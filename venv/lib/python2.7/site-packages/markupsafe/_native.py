# -*- coding: utf-8 -*-
***REMOVED***
    markupsafe._native
    ~~~~~~~~~~~~~~~~~~

    Native Python implementation the C module is not compiled.

    :copyright: (c***REMOVED*** 2010 by Armin Ronacher.
    :license: BSD, see LICENSE for more details.
***REMOVED***
from markupsafe import Markup
from markupsafe._compat import text_type


def escape(s***REMOVED***:
    ***REMOVED***Convert the characters &, <, >, ' and " in string s to HTML-safe
    sequences.  Use this if you need to display text that might contain
    such characters in HTML.  Marks return value as markup string.
    ***REMOVED***
    if hasattr(s, '__html__'***REMOVED***:
        return s.__html__(***REMOVED***
    return Markup(text_type(s***REMOVED***
        .replace('&', '&amp;'***REMOVED***
        .replace('>', '&gt;'***REMOVED***
        .replace('<', '&lt;'***REMOVED***
        .replace("'", '&#39;'***REMOVED***
        .replace('"', '&#34;'***REMOVED***
    ***REMOVED***


def escape_silent(s***REMOVED***:
    ***REMOVED***Like :func:`escape` but converts `None` into an empty
    markup string.
    ***REMOVED***
    if s is None:
        return Markup(***REMOVED***
    return escape(s***REMOVED***


def soft_unicode(s***REMOVED***:
    ***REMOVED***Make a string unicode if it isn't already.  That way a markup
    string is not converted back to unicode.
    ***REMOVED***
    if not isinstance(s, text_type***REMOVED***:
        s = text_type(s***REMOVED***
    return s
