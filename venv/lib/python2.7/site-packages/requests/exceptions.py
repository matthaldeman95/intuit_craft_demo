# -*- coding: utf-8 -*-

***REMOVED***
requests.exceptions
~~~~~~~~~~~~~~~~~~~

This module contains the set of Requests' exceptions.
***REMOVED***
from .packages.urllib3.exceptions import HTTPError as BaseHTTPError


class RequestException(IOError***REMOVED***:
    ***REMOVED***There was an ambiguous exception that occurred while handling your
    request.
    ***REMOVED***

    def __init__(self, *args, **kwargs***REMOVED***:
        ***REMOVED***Initialize RequestException with `request` and `response` objects.***REMOVED***
        response = kwargs.pop('response', None***REMOVED***
        self.response = response
        self.request = kwargs.pop('request', None***REMOVED***
        if (response is not None and not self.request and
                hasattr(response, 'request'***REMOVED******REMOVED***:
            self.request = self.response.request
        super(RequestException, self***REMOVED***.__init__(*args, **kwargs***REMOVED***


class HTTPError(RequestException***REMOVED***:
    ***REMOVED***An HTTP error occurred.***REMOVED***


class ConnectionError(RequestException***REMOVED***:
    ***REMOVED***A Connection error occurred.***REMOVED***


class ProxyError(ConnectionError***REMOVED***:
    ***REMOVED***A proxy error occurred.***REMOVED***


class SSLError(ConnectionError***REMOVED***:
    ***REMOVED***An SSL error occurred.***REMOVED***


class Timeout(RequestException***REMOVED***:
    ***REMOVED***The request timed out.

    Catching this error will catch both
    :exc:`~requests.exceptions.ConnectTimeout` and
    :exc:`~requests.exceptions.ReadTimeout` errors.
    ***REMOVED***


class ConnectTimeout(ConnectionError, Timeout***REMOVED***:
    ***REMOVED***The request timed out while trying to connect to the remote server.

    Requests that produced this error are safe to retry.
    ***REMOVED***


class ReadTimeout(Timeout***REMOVED***:
    ***REMOVED***The server did not send any data in the allotted amount of time.***REMOVED***


class URLRequired(RequestException***REMOVED***:
    ***REMOVED***A valid URL is required to make a request.***REMOVED***


class TooManyRedirects(RequestException***REMOVED***:
    ***REMOVED***Too many redirects.***REMOVED***


class MissingSchema(RequestException, ValueError***REMOVED***:
    ***REMOVED***The URL schema (e.g. http or https***REMOVED*** is missing.***REMOVED***


class InvalidSchema(RequestException, ValueError***REMOVED***:
    ***REMOVED***See defaults.py for valid schemas.***REMOVED***


class InvalidURL(RequestException, ValueError***REMOVED***:
    ***REMOVED***The URL provided was somehow invalid.***REMOVED***


class InvalidHeader(RequestException, ValueError***REMOVED***:
    ***REMOVED***The header value provided was somehow invalid.***REMOVED***


class ChunkedEncodingError(RequestException***REMOVED***:
    ***REMOVED***The server declared chunked encoding but sent an invalid chunk.***REMOVED***


class ContentDecodingError(RequestException, BaseHTTPError***REMOVED***:
    ***REMOVED***Failed to decode response content***REMOVED***


class StreamConsumedError(RequestException, TypeError***REMOVED***:
    ***REMOVED***The content for this response was already consumed***REMOVED***


class RetryError(RequestException***REMOVED***:
    ***REMOVED***Custom retries logic failed***REMOVED***


# Warnings


class RequestsWarning(Warning***REMOVED***:
    ***REMOVED***Base warning for Requests.***REMOVED***
    pass


class FileModeWarning(RequestsWarning, DeprecationWarning***REMOVED***:
    ***REMOVED***A file was opened in text mode, but Requests determined its binary length.***REMOVED***
    pass
