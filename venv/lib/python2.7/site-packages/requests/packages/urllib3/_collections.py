from __future__ import absolute_import
from collections import Mapping, MutableMapping
***REMOVED***
    from threading import RLock
except ImportError:  # Platform-specific: No threads available
    class RLock:
        def __enter__(self***REMOVED***:
            pass

        def __exit__(self, exc_type, exc_value, traceback***REMOVED***:
            pass


***REMOVED***  # Python 2.7+
    from collections import OrderedDict
except ImportError:
    from .packages.ordered_dict import OrderedDict
from .packages.six import iterkeys, itervalues, PY3


__all__ = ['RecentlyUsedContainer', 'HTTPHeaderDict'***REMOVED***


_Null = object(***REMOVED***


class RecentlyUsedContainer(MutableMapping***REMOVED***:
    ***REMOVED***
    Provides a thread-safe dict-like container which maintains up to
    ``maxsize`` keys while throwing away the least-recently-used keys beyond
    ``maxsize``.

    :param maxsize:
        Maximum number of recent elements to retain.

    :param dispose_func:
        Every time an item is evicted from the container,
        ``dispose_func(value***REMOVED***`` is called.  Callback which will get called
    ***REMOVED***

    ContainerCls = OrderedDict

    def __init__(self, maxsize=10, dispose_func=None***REMOVED***:
        self._maxsize = maxsize
        self.dispose_func = dispose_func

        self._container = self.ContainerCls(***REMOVED***
        self.lock = RLock(***REMOVED***

    def __getitem__(self, key***REMOVED***:
        # Re-insert the item, moving it to the end of the eviction line.
        with self.lock:
            item = self._container.pop(key***REMOVED***
            self._container[key***REMOVED*** = item
            return item

    def __setitem__(self, key, value***REMOVED***:
        evicted_value = _Null
        with self.lock:
            # Possibly evict the existing value of 'key'
            evicted_value = self._container.get(key, _Null***REMOVED***
            self._container[key***REMOVED*** = value

            # If we didn't evict an existing value, we might have to evict the
            # least recently used item from the beginning of the container.
            if len(self._container***REMOVED*** > self._maxsize:
                _key, evicted_value = self._container.popitem(last=False***REMOVED***

        if self.dispose_func and evicted_value is not _Null:
            self.dispose_func(evicted_value***REMOVED***

    def __delitem__(self, key***REMOVED***:
        with self.lock:
            value = self._container.pop(key***REMOVED***

        if self.dispose_func:
            self.dispose_func(value***REMOVED***

    def __len__(self***REMOVED***:
        with self.lock:
            return len(self._container***REMOVED***

    def __iter__(self***REMOVED***:
        raise NotImplementedError('Iteration over this class is unlikely to be threadsafe.'***REMOVED***

    def clear(self***REMOVED***:
        with self.lock:
            # Copy pointers to all values, then wipe the mapping
            values = list(itervalues(self._container***REMOVED******REMOVED***
            self._container.clear(***REMOVED***

        if self.dispose_func:
            for value in values:
                self.dispose_func(value***REMOVED***

    def keys(self***REMOVED***:
        with self.lock:
            return list(iterkeys(self._container***REMOVED******REMOVED***


class HTTPHeaderDict(MutableMapping***REMOVED***:
    ***REMOVED***
    :param headers:
        An iterable of field-value pairs. Must not contain multiple field names
        when compared case-insensitively.

    :param kwargs:
        Additional field-value pairs to pass in to ``dict.update``.

    A ``dict`` like container for storing HTTP Headers.

    Field names are stored and compared case-insensitively in compliance with
    RFC 7230. Iteration provides the first case-sensitive key seen for each
    case-insensitive pair.

    Using ``__setitem__`` syntax overwrites fields that compare equal
    case-insensitively in order to maintain ``dict``'s api. For fields that
    compare equal, instead create a new ``HTTPHeaderDict`` and use ``.add``
    in a loop.

    If multiple fields that are equal case-insensitively are passed to the
    constructor or ``.update``, the behavior is undefined and some will be
    lost.

    >>> headers = HTTPHeaderDict(***REMOVED***
    >>> headers.add('Set-Cookie', 'foo=bar'***REMOVED***
    >>> headers.add('set-cookie', 'baz=quxx'***REMOVED***
    >>> headers['content-length'***REMOVED*** = '7'
    >>> headers['SET-cookie'***REMOVED***
    'foo=bar, baz=quxx'
    >>> headers['Content-Length'***REMOVED***
    '7'
    ***REMOVED***

    def __init__(self, headers=None, **kwargs***REMOVED***:
        super(HTTPHeaderDict, self***REMOVED***.__init__(***REMOVED***
        self._container = OrderedDict(***REMOVED***
        if headers is not None:
            if isinstance(headers, HTTPHeaderDict***REMOVED***:
                self._copy_from(headers***REMOVED***
            else:
                self.extend(headers***REMOVED***
        if kwargs:
            self.extend(kwargs***REMOVED***

    def __setitem__(self, key, val***REMOVED***:
        self._container[key.lower(***REMOVED******REMOVED*** = (key, val***REMOVED***
        return self._container[key.lower(***REMOVED******REMOVED***

    def __getitem__(self, key***REMOVED***:
        val = self._container[key.lower(***REMOVED******REMOVED***
        return ', '.join(val[1:***REMOVED******REMOVED***

    def __delitem__(self, key***REMOVED***:
        del self._container[key.lower(***REMOVED******REMOVED***

    def __contains__(self, key***REMOVED***:
        return key.lower(***REMOVED*** in self._container

    def __eq__(self, other***REMOVED***:
        if not isinstance(other, Mapping***REMOVED*** and not hasattr(other, 'keys'***REMOVED***:
            return False
        if not isinstance(other, type(self***REMOVED******REMOVED***:
            other = type(self***REMOVED***(other***REMOVED***
        return (dict((k.lower(***REMOVED***, v***REMOVED*** for k, v in self.itermerged(***REMOVED******REMOVED*** ==
                dict((k.lower(***REMOVED***, v***REMOVED*** for k, v in other.itermerged(***REMOVED******REMOVED******REMOVED***

    def __ne__(self, other***REMOVED***:
        return not self.__eq__(other***REMOVED***

    if not PY3:  # Python 2
        iterkeys = MutableMapping.iterkeys
        itervalues = MutableMapping.itervalues

    __marker = object(***REMOVED***

    def __len__(self***REMOVED***:
        return len(self._container***REMOVED***

    def __iter__(self***REMOVED***:
        # Only provide the originally cased names
        for vals in self._container.values(***REMOVED***:
            yield vals[0***REMOVED***

    def pop(self, key, default=__marker***REMOVED***:
        '''D.pop(k[,d***REMOVED******REMOVED*** -> v, remove specified key and return the corresponding value.
          If key is not found, d is returned if given, otherwise KeyError is raised.
        '''
        # Using the MutableMapping function directly fails due to the private marker.
        # Using ordinary dict.pop would expose the internal structures.
        # So let's reinvent the wheel.
        ***REMOVED***
            value = self[key***REMOVED***
        except KeyError:
            if default is self.__marker:
                raise
            return default
        else:
            del self[key***REMOVED***
            return value

    def discard(self, key***REMOVED***:
        ***REMOVED***
            del self[key***REMOVED***
        except KeyError:
            pass

    def add(self, key, val***REMOVED***:
        ***REMOVED***Adds a (name, value***REMOVED*** pair, doesn't overwrite the value if it already
        exists.

        >>> headers = HTTPHeaderDict(foo='bar'***REMOVED***
        >>> headers.add('Foo', 'baz'***REMOVED***
        >>> headers['foo'***REMOVED***
        'bar, baz'
        ***REMOVED***
        key_lower = key.lower(***REMOVED***
        new_vals = key, val
        # Keep the common case aka no item present as fast as possible
        vals = self._container.setdefault(key_lower, new_vals***REMOVED***
        if new_vals is not vals:
            # new_vals was not inserted, as there was a previous one
            if isinstance(vals, list***REMOVED***:
                # If already several items got inserted, we have a list
                vals.append(val***REMOVED***
            else:
                # vals should be a tuple then, i.e. only one item so far
                # Need to convert the tuple to list for further extension
                self._container[key_lower***REMOVED*** = [vals[0***REMOVED***, vals[1***REMOVED***, val***REMOVED***

    def extend(self, *args, **kwargs***REMOVED***:
        ***REMOVED***Generic import function for any type of header-like object.
        Adapted version of MutableMapping.update in order to insert items
        with self.add instead of self.__setitem__
        ***REMOVED***
        if len(args***REMOVED*** > 1:
            raise TypeError("extend(***REMOVED*** takes at most 1 positional "
                            "arguments ({0***REMOVED*** given***REMOVED***".format(len(args***REMOVED******REMOVED******REMOVED***
        other = args[0***REMOVED*** if len(args***REMOVED*** >= 1 else (***REMOVED***

        if isinstance(other, HTTPHeaderDict***REMOVED***:
            for key, val in other.iteritems(***REMOVED***:
                self.add(key, val***REMOVED***
        elif isinstance(other, Mapping***REMOVED***:
            for key in other:
                self.add(key, other[key***REMOVED******REMOVED***
        elif hasattr(other, "keys"***REMOVED***:
            for key in other.keys(***REMOVED***:
                self.add(key, other[key***REMOVED******REMOVED***
        else:
            for key, value in other:
                self.add(key, value***REMOVED***

        for key, value in kwargs.items(***REMOVED***:
            self.add(key, value***REMOVED***

    def getlist(self, key***REMOVED***:
        ***REMOVED***Returns a list of all the values for the named field. Returns an
        empty list if the key doesn't exist.***REMOVED***
        ***REMOVED***
            vals = self._container[key.lower(***REMOVED******REMOVED***
        except KeyError:
            return [***REMOVED***
        else:
            if isinstance(vals, tuple***REMOVED***:
                return [vals[1***REMOVED******REMOVED***
            else:
                return vals[1:***REMOVED***

    # Backwards compatibility for httplib
    getheaders = getlist
    getallmatchingheaders = getlist
    iget = getlist

    def __repr__(self***REMOVED***:
        return "%s(%s***REMOVED***" % (type(self***REMOVED***.__name__, dict(self.itermerged(***REMOVED******REMOVED******REMOVED***

    def _copy_from(self, other***REMOVED***:
        for key in other:
            val = other.getlist(key***REMOVED***
            if isinstance(val, list***REMOVED***:
                # Don't need to convert tuples
                val = list(val***REMOVED***
            self._container[key.lower(***REMOVED******REMOVED*** = [key***REMOVED*** + val

    def copy(self***REMOVED***:
        clone = type(self***REMOVED***(***REMOVED***
        clone._copy_from(self***REMOVED***
        return clone

    def iteritems(self***REMOVED***:
        ***REMOVED***Iterate over all header lines, including duplicate ones.***REMOVED***
        for key in self:
            vals = self._container[key.lower(***REMOVED******REMOVED***
            for val in vals[1:***REMOVED***:
                yield vals[0***REMOVED***, val

    def itermerged(self***REMOVED***:
        ***REMOVED***Iterate over all headers, merging duplicate ones together.***REMOVED***
        for key in self:
            val = self._container[key.lower(***REMOVED******REMOVED***
            yield val[0***REMOVED***, ', '.join(val[1:***REMOVED******REMOVED***

    def items(self***REMOVED***:
        return list(self.iteritems(***REMOVED******REMOVED***

    @classmethod
    def from_httplib(cls, message***REMOVED***:  # Python 2
        ***REMOVED***Read headers from a Python 2 httplib message object.***REMOVED***
        # python2.7 does not expose a proper API for exporting multiheaders
        # efficiently. This function re-reads raw lines from the message
        # object and extracts the multiheaders properly.
        headers = [***REMOVED***

        for line in message.headers:
            if line.startswith((' ', '\t'***REMOVED******REMOVED***:
                key, value = headers[-1***REMOVED***
                headers[-1***REMOVED*** = (key, value + '\r\n' + line.rstrip(***REMOVED******REMOVED***
                continue

            key, value = line.split(':', 1***REMOVED***
            headers.append((key, value.strip(***REMOVED******REMOVED******REMOVED***

        return cls(headers***REMOVED***
