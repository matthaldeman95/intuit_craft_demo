from __future__ import absolute_import
# Base Exceptions


class HTTPError(Exception***REMOVED***:
    "Base exception used by this module."
    pass


class HTTPWarning(Warning***REMOVED***:
    "Base warning used by this module."
    pass


class PoolError(HTTPError***REMOVED***:
    "Base exception for errors caused within a pool."
    def __init__(self, pool, message***REMOVED***:
        self.pool = pool
        HTTPError.__init__(self, "%s: %s" % (pool, message***REMOVED******REMOVED***

    def __reduce__(self***REMOVED***:
        # For pickling purposes.
        return self.__class__, (None, None***REMOVED***


class RequestError(PoolError***REMOVED***:
    "Base exception for PoolErrors that have associated URLs."
    def __init__(self, pool, url, message***REMOVED***:
        self.url = url
        PoolError.__init__(self, pool, message***REMOVED***

    def __reduce__(self***REMOVED***:
        # For pickling purposes.
        return self.__class__, (None, self.url, None***REMOVED***


class SSLError(HTTPError***REMOVED***:
    "Raised when SSL certificate fails in an HTTPS connection."
    pass


class ProxyError(HTTPError***REMOVED***:
    "Raised when the connection to a proxy fails."
    pass


class DecodeError(HTTPError***REMOVED***:
    "Raised when automatic decoding based on Content-Type fails."
    pass


class ProtocolError(HTTPError***REMOVED***:
    "Raised when something unexpected happens mid-request/response."
    pass


#: Renamed to ProtocolError but aliased for backwards compatibility.
ConnectionError = ProtocolError


# Leaf Exceptions

class MaxRetryError(RequestError***REMOVED***:
    ***REMOVED***Raised when the maximum number of retries is exceeded.

    :param pool: The connection pool
    :type pool: :class:`~urllib3.connectionpool.HTTPConnectionPool`
    :param string url: The requested Url
    :param exceptions.Exception reason: The underlying error

    ***REMOVED***

    def __init__(self, pool, url, reason=None***REMOVED***:
        self.reason = reason

        message = "Max retries exceeded with url: %s (Caused by %r***REMOVED***" % (
            url, reason***REMOVED***

        RequestError.__init__(self, pool, url, message***REMOVED***


class HostChangedError(RequestError***REMOVED***:
    "Raised when an existing pool gets a request for a foreign host."

    def __init__(self, pool, url, retries=3***REMOVED***:
        message = "Tried to open a foreign host with url: %s" % url
        RequestError.__init__(self, pool, url, message***REMOVED***
        self.retries = retries


class TimeoutStateError(HTTPError***REMOVED***:
    ***REMOVED*** Raised when passing an invalid state to a timeout ***REMOVED***
    pass


class TimeoutError(HTTPError***REMOVED***:
    ***REMOVED*** Raised when a socket timeout error occurs.

    Catching this error will catch both :exc:`ReadTimeoutErrors
    <ReadTimeoutError>` and :exc:`ConnectTimeoutErrors <ConnectTimeoutError>`.
    ***REMOVED***
    pass


class ReadTimeoutError(TimeoutError, RequestError***REMOVED***:
    "Raised when a socket timeout occurs while receiving data from a server"
    pass


# This timeout error does not have a URL attached and needs to inherit from the
# base HTTPError
class ConnectTimeoutError(TimeoutError***REMOVED***:
    "Raised when a socket timeout occurs while connecting to a server"
    pass


class NewConnectionError(ConnectTimeoutError, PoolError***REMOVED***:
    "Raised when we fail to establish a new connection. Usually ECONNREFUSED."
    pass


class EmptyPoolError(PoolError***REMOVED***:
    "Raised when a pool runs out of connections and no more are allowed."
    pass


class ClosedPoolError(PoolError***REMOVED***:
    "Raised when a request enters a pool after the pool has been closed."
    pass


class LocationValueError(ValueError, HTTPError***REMOVED***:
    "Raised when there is something wrong with a given URL input."
    pass


class LocationParseError(LocationValueError***REMOVED***:
    "Raised when get_host or similar fails to parse the URL input."

    def __init__(self, location***REMOVED***:
        message = "Failed to parse: %s" % location
        HTTPError.__init__(self, message***REMOVED***

        self.location = location


class ResponseError(HTTPError***REMOVED***:
    "Used as a container for an error reason supplied in a MaxRetryError."
    GENERIC_ERROR = 'too many error responses'
    SPECIFIC_ERROR = 'too many {status_code***REMOVED*** error responses'


class SecurityWarning(HTTPWarning***REMOVED***:
    "Warned when perfoming security reducing actions"
    pass


class SubjectAltNameWarning(SecurityWarning***REMOVED***:
    "Warned when connecting to a host with a certificate missing a SAN."
    pass


class InsecureRequestWarning(SecurityWarning***REMOVED***:
    "Warned when making an unverified HTTPS request."
    pass


class SystemTimeWarning(SecurityWarning***REMOVED***:
    "Warned when system time is suspected to be wrong"
    pass


class InsecurePlatformWarning(SecurityWarning***REMOVED***:
    "Warned when certain SSL configuration is not available on a platform."
    pass


class SNIMissingWarning(HTTPWarning***REMOVED***:
    "Warned when making a HTTPS request without SNI available."
    pass


class DependencyWarning(HTTPWarning***REMOVED***:
    ***REMOVED***
    Warned when an attempt is made to import a module with missing optional
    dependencies.
    ***REMOVED***
    pass


class ResponseNotChunked(ProtocolError, ValueError***REMOVED***:
    "Response needs to be chunked in order to read it as chunks."
    pass


class ProxySchemeUnknown(AssertionError, ValueError***REMOVED***:
    "ProxyManager does not support the supplied scheme"
    # TODO(t-8ch***REMOVED***: Stop inheriting from AssertionError in v2.0.

    def __init__(self, scheme***REMOVED***:
        message = "Not supported proxy scheme %s" % scheme
        super(ProxySchemeUnknown, self***REMOVED***.__init__(message***REMOVED***


class HeaderParsingError(HTTPError***REMOVED***:
    "Raised by assert_header_parsing, but we convert it to a log.warning statement."
    def __init__(self, defects, unparsed_data***REMOVED***:
        message = '%s, unparsed data: %r' % (defects or 'Unknown', unparsed_data***REMOVED***
        super(HeaderParsingError, self***REMOVED***.__init__(message***REMOVED***
