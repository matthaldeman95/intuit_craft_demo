#!/usr/bin/env python
***REMOVED***
Script which takes one or more file paths and reports on their detected
encodings

Example::

    % chardetect somefile someotherfile
    somefile: windows-1252 with confidence 0.5
    someotherfile: ascii with confidence 1.0

If no paths are provided, it takes its input from stdin.

***REMOVED***

from __future__ import absolute_import, print_function, unicode_literals

import argparse
import sys
from io import open

from chardet import __version__
from chardet.universaldetector import UniversalDetector


def description_of(lines, name='stdin'***REMOVED***:
    ***REMOVED***
    Return a string describing the probable encoding of a file or
    list of strings.

    :param lines: The lines to get the encoding of.
    :type lines: Iterable of bytes
    :param name: Name of file or collection of lines
    :type name: str
    ***REMOVED***
    u = UniversalDetector(***REMOVED***
    for line in lines:
        u.feed(line***REMOVED***
    u.close(***REMOVED***
    result = u.result
    if result['encoding'***REMOVED***:
        return '{0***REMOVED***: {1***REMOVED*** with confidence {2***REMOVED***'.format(name, result['encoding'***REMOVED***,
                                                     result['confidence'***REMOVED******REMOVED***
    else:
        return '{0***REMOVED***: no result'.format(name***REMOVED***


def main(argv=None***REMOVED***:
    '''
    Handles command line arguments and gets things started.

    :param argv: List of arguments, as if specified on the command-line.
                 If None, ``sys.argv[1:***REMOVED***`` is used instead.
    :type argv: list of str
    '''
    # Get command line arguments
    parser = argparse.ArgumentParser(
        description="Takes one or more file paths and reports their detected \
                     encodings",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        conflict_handler='resolve'***REMOVED***
    parser.add_argument('input',
                        help='File whose encoding we would like to determine.',
                        type=argparse.FileType('rb'***REMOVED***, nargs='*',
                        default=[sys.stdin***REMOVED******REMOVED***
    parser.add_argument('--version', action='version',
                        version='%(prog***REMOVED***s {0***REMOVED***'.format(__version__***REMOVED******REMOVED***
    args = parser.parse_args(argv***REMOVED***

    for f in args.input:
        if f.isatty(***REMOVED***:
            print("You are running chardetect interactively. Press " +
                  "CTRL-D twice at the start of a blank line to signal the " +
                  "end of your input. If you want help, run chardetect " +
                  "--help\n", file=sys.stderr***REMOVED***
        print(description_of(f, f.name***REMOVED******REMOVED***


if __name__ == '__main__':
    main(***REMOVED***
