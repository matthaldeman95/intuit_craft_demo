#===========================================================================
#
# Duration
#
#===========================================================================


***REMOVED***Duration module.***REMOVED***

#===========================================================================
# Place all imports after here.
#
from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six
#
# Place all imports before here.
#===========================================================================

#===========================================================================
class Duration(object***REMOVED***:
   ***REMOVED***Class Duration in development.
   ***REMOVED***
   allowed = [ "ET", "UTC" ***REMOVED***

   #-----------------------------------------------------------------------
   def __init__( self, frame, seconds ***REMOVED***:
      ***REMOVED***Create a new Duration object.

      = ERROR CONDITIONS
      - If the input frame is not in the allowed list, an error is thrown.

      = INPUT VARIABLES
      - frame    The frame of the duration.  Must be 'ET' or 'UTC'
      - seconds  The number of seconds in the Duration.
      ***REMOVED***
      if frame not in self.allowed:
         msg = "Input frame '%s' is not one of the supported frames of %s" \
               % ( frame, str( self.allowed ***REMOVED*** ***REMOVED***
         raise ValueError( msg ***REMOVED***

      self._frame = frame
      self._seconds = seconds

   #-----------------------------------------------------------------------
   def frame( self ***REMOVED***:
      ***REMOVED***Return the frame the duration is in.***REMOVED***
      return self._frame

   #-----------------------------------------------------------------------
   def __abs__( self ***REMOVED***:
      ***REMOVED***Return the absolute value of the duration.***REMOVED***
      return Duration( self._frame, abs( self._seconds ***REMOVED*** ***REMOVED***

   #-----------------------------------------------------------------------
   def __neg__( self ***REMOVED***:
      ***REMOVED***Return the negative value of this Duration.***REMOVED***
      return Duration( self._frame, -self._seconds ***REMOVED***

   #-----------------------------------------------------------------------
   def seconds( self ***REMOVED***:
      ***REMOVED***Return the number of seconds in the Duration.***REMOVED***
      return self._seconds

   #-----------------------------------------------------------------------
   def __nonzero__( self ***REMOVED***:
      ***REMOVED***Compare two Durations.

      = INPUT VARIABLES
      - rhs    The Duration to compare against.

      = RETURN VALUE
      - Returns -1 if self < rhs, 0 if self == rhs, +1 if self > rhs.
      ***REMOVED***
      return self._seconds != 0

   if six.PY3:
      __bool__ = __nonzero__

   #-----------------------------------------------------------------------
   def __cmp__( self, rhs ***REMOVED***:
      ***REMOVED***Compare two Durations.

      = ERROR CONDITIONS
      - If the input rhs is not in the same frame, an error is thrown.

      = INPUT VARIABLES
      - rhs    The Duration to compare against.

      = RETURN VALUE
      - Returns -1 if self < rhs, 0 if self == rhs, +1 if self > rhs.
      ***REMOVED***
      self.checkSameFrame( rhs, "compare" ***REMOVED***
      return cmp( self._seconds, rhs._seconds ***REMOVED***

   #-----------------------------------------------------------------------
   def __add__( self, rhs ***REMOVED***:
      ***REMOVED***Add two Durations.

      = ERROR CONDITIONS
      - If the input rhs is not in the same frame, an error is thrown.

      = INPUT VARIABLES
      - rhs    The Duration to add.

      = RETURN VALUE
      - Returns the sum of ourselves and the input Duration.
      ***REMOVED***
      # Delay-load due to circular dependencies.
      import matplotlib.testing.jpl_units as U

      if isinstance( rhs, U.Epoch ***REMOVED***:
         return rhs + self

      self.checkSameFrame( rhs, "add" ***REMOVED***
      return Duration( self._frame, self._seconds + rhs._seconds ***REMOVED***

   #-----------------------------------------------------------------------
   def __sub__( self, rhs ***REMOVED***:
      ***REMOVED***Subtract two Durations.

      = ERROR CONDITIONS
      - If the input rhs is not in the same frame, an error is thrown.

      = INPUT VARIABLES
      - rhs    The Duration to subtract.

      = RETURN VALUE
      - Returns the difference of ourselves and the input Duration.
      ***REMOVED***
      self.checkSameFrame( rhs, "sub" ***REMOVED***
      return Duration( self._frame, self._seconds - rhs._seconds ***REMOVED***

   #-----------------------------------------------------------------------
   def __mul__( self, rhs ***REMOVED***:
      ***REMOVED***Scale a UnitDbl by a value.

      = INPUT VARIABLES
      - rhs    The scalar to multiply by.

      = RETURN VALUE
      - Returns the scaled Duration.
      ***REMOVED***
      return Duration( self._frame, self._seconds * float( rhs ***REMOVED*** ***REMOVED***

   #-----------------------------------------------------------------------
   def __rmul__( self, lhs ***REMOVED***:
      ***REMOVED***Scale a Duration by a value.

      = INPUT VARIABLES
      - lhs    The scalar to multiply by.

      = RETURN VALUE
      - Returns the scaled Duration.
      ***REMOVED***
      return Duration( self._frame, self._seconds * float( lhs ***REMOVED*** ***REMOVED***

   #-----------------------------------------------------------------------
   def __div__( self, rhs ***REMOVED***:
      ***REMOVED***Divide a Duration by a value.

      = INPUT VARIABLES
      - rhs    The scalar to divide by.

      = RETURN VALUE
      - Returns the scaled Duration.
      ***REMOVED***
      return Duration( self._frame, self._seconds / float( rhs ***REMOVED*** ***REMOVED***

   #-----------------------------------------------------------------------
   def __rdiv__( self, rhs ***REMOVED***:
      ***REMOVED***Divide a Duration by a value.

      = INPUT VARIABLES
      - rhs    The scalar to divide by.

      = RETURN VALUE
      - Returns the scaled Duration.
      ***REMOVED***
      return Duration( self._frame, float( rhs ***REMOVED*** / self._seconds ***REMOVED***

   #-----------------------------------------------------------------------
   def __str__( self ***REMOVED***:
      ***REMOVED***Print the Duration.***REMOVED***
      return "%g %s" % ( self._seconds, self._frame ***REMOVED***

   #-----------------------------------------------------------------------
   def __repr__( self ***REMOVED***:
      ***REMOVED***Print the Duration.***REMOVED***
      return "Duration( '%s', %g ***REMOVED***" % ( self._frame, self._seconds ***REMOVED***

   #-----------------------------------------------------------------------
   def checkSameFrame( self, rhs, func ***REMOVED***:
      ***REMOVED***Check to see if frames are the same.

      = ERROR CONDITIONS
      - If the frame of the rhs Duration is not the same as our frame,
        an error is thrown.

      = INPUT VARIABLES
      - rhs    The Duration to check for the same frame
      - func   The name of the function doing the check.
      ***REMOVED***
      if self._frame != rhs._frame:
         msg = "Cannot %s Duration's with different frames.\n" \
               "LHS: %s\n" \
               "RHS: %s" % ( func, self._frame, rhs._frame ***REMOVED***
         raise ValueError( msg ***REMOVED***

#===========================================================================
