from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

import warnings
from contextlib import contextmanager

from matplotlib.cbook import is_string_like, iterable
from matplotlib import rcParams, rcdefaults, use


def _is_list_like(obj***REMOVED***:
    ***REMOVED***Returns whether the obj is iterable and not a string***REMOVED***
    return not is_string_like(obj***REMOVED*** and iterable(obj***REMOVED***


# stolen from pandas
@contextmanager
def assert_produces_warning(expected_warning=Warning, filter_level="always",
                            clear=None***REMOVED***:
    ***REMOVED***
    Context manager for running code that expects to raise (or not raise***REMOVED***
    warnings.  Checks that code raises the expected warning and only the
    expected warning. Pass ``False`` or ``None`` to check that it does *not*
    raise a warning. Defaults to ``exception.Warning``, baseclass of all
    Warnings. (basically a wrapper around ``warnings.catch_warnings``***REMOVED***.

    >>> import warnings
    >>> with assert_produces_warning(***REMOVED***:
    ...     warnings.warn(UserWarning(***REMOVED******REMOVED***
    ...
    >>> with assert_produces_warning(False***REMOVED***:
    ...     warnings.warn(RuntimeWarning(***REMOVED******REMOVED***
    ...
    Traceback (most recent call last***REMOVED***:
        ...
    AssertionError: Caused unexpected warning(s***REMOVED***: ['RuntimeWarning'***REMOVED***.
    >>> with assert_produces_warning(UserWarning***REMOVED***:
    ...     warnings.warn(RuntimeWarning(***REMOVED******REMOVED***
    Traceback (most recent call last***REMOVED***:
        ...
    AssertionError: Did not see expected warning of class 'UserWarning'.

    ..warn:: This is *not* thread-safe.
    ***REMOVED***
    with warnings.catch_warnings(record=True***REMOVED*** as w:

        if clear is not None:
            # make sure that we are clearning these warnings
            # if they have happened before
            # to guarantee that we will catch them
            if not _is_list_like(clear***REMOVED***:
                clear = [clear***REMOVED***
            for m in clear:
                ***REMOVED***
                    m.__warningregistry__.clear(***REMOVED***
                ***REMOVED***
                    pass

        saw_warning = False
        warnings.simplefilter(filter_level***REMOVED***
        yield w
        extra_warnings = [***REMOVED***
        for actual_warning in w:
            if (expected_warning and issubclass(actual_warning.category,
                                                expected_warning***REMOVED******REMOVED***:
                saw_warning = True
            else:
                extra_warnings.append(actual_warning.category.__name__***REMOVED***
        if expected_warning:
            assert saw_warning, ("Did not see expected warning of class %r."
                                 % expected_warning.__name__***REMOVED***
        assert not extra_warnings, ("Caused unexpected warning(s***REMOVED***: %r."
                                    % extra_warnings***REMOVED***


def setup(***REMOVED***:
    # The baseline images are created in this locale, so we should use
    # it during all of the tests.
    import locale
    import warnings
    from matplotlib.backends import backend_agg, backend_pdf, backend_svg

    ***REMOVED***
        locale.setlocale(locale.LC_ALL, str('en_US.UTF-8'***REMOVED******REMOVED***
    except locale.Error:
        ***REMOVED***
            locale.setlocale(locale.LC_ALL, str('English_United States.1252'***REMOVED******REMOVED***
        except locale.Error:
            warnings.warn(
                "Could not set locale to English/United States. "
                "Some date-related tests may fail"***REMOVED***

    use('Agg', warn=False***REMOVED***  # use Agg backend for these tests

    # These settings *must* be hardcoded for running the comparison
    # tests and are not necessarily the default values as specified in
    # rcsetup.py
    rcdefaults(***REMOVED***  # Start with all defaults
    rcParams['font.family'***REMOVED*** = 'Bitstream Vera Sans'
    rcParams['text.hinting'***REMOVED*** = False
    rcParams['text.hinting_factor'***REMOVED*** = 8

    # Clear the font caches.  Otherwise, the hinting mode can travel
    # from one test to another.
    backend_agg.RendererAgg._fontd.clear(***REMOVED***
    backend_pdf.RendererPdf.truetype_font_cache.clear(***REMOVED***
    backend_svg.RendererSVG.fontd.clear(***REMOVED***
