***REMOVED***
A module for parsing and generating fontconfig patterns.

See the `fontconfig pattern specification
<http://www.fontconfig.org/fontconfig-user.html>`_ for more
information.
***REMOVED***

# This class is defined here because it must be available in:
#   - The old-style config framework (:file:`rcsetup.py`***REMOVED***
#   - The traits-based config framework (:file:`mpltraits.py`***REMOVED***
#   - The font manager (:file:`font_manager.py`***REMOVED***

# It probably logically belongs in :file:`font_manager.py`, but
# placing it in any of these places would have created cyclical
# dependency problems, or an undesired dependency on traits even
# when the traits-based config framework is not used.

from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six

import re, sys
from pyparsing import Literal, ZeroOrMore, \
     Optional, Regex, StringEnd, ParseException, Suppress

family_punc = r'\\\-:,'
family_unescape = re.compile(r'\\([%s***REMOVED******REMOVED***' % family_punc***REMOVED***.sub
family_escape = re.compile(r'([%s***REMOVED******REMOVED***' % family_punc***REMOVED***.sub

value_punc = r'\\=_:,'
value_unescape = re.compile(r'\\([%s***REMOVED******REMOVED***' % value_punc***REMOVED***.sub
value_escape = re.compile(r'([%s***REMOVED******REMOVED***' % value_punc***REMOVED***.sub

class FontconfigPatternParser(object***REMOVED***:
    ***REMOVED***A simple pyparsing-based parser for fontconfig-style patterns.

    See the `fontconfig pattern specification
    <http://www.fontconfig.org/fontconfig-user.html>`_ for more
    information.
    ***REMOVED***

    _constants = {
        'thin'           : ('weight', 'light'***REMOVED***,
        'extralight'     : ('weight', 'light'***REMOVED***,
        'ultralight'     : ('weight', 'light'***REMOVED***,
        'light'          : ('weight', 'light'***REMOVED***,
        'book'           : ('weight', 'book'***REMOVED***,
        'regular'        : ('weight', 'regular'***REMOVED***,
        'normal'         : ('weight', 'normal'***REMOVED***,
        'medium'         : ('weight', 'medium'***REMOVED***,
        'demibold'       : ('weight', 'demibold'***REMOVED***,
        'semibold'       : ('weight', 'semibold'***REMOVED***,
        'bold'           : ('weight', 'bold'***REMOVED***,
        'extrabold'      : ('weight', 'extra bold'***REMOVED***,
        'black'          : ('weight', 'black'***REMOVED***,
        'heavy'          : ('weight', 'heavy'***REMOVED***,
        'roman'          : ('slant', 'normal'***REMOVED***,
        'italic'         : ('slant', 'italic'***REMOVED***,
        'oblique'        : ('slant', 'oblique'***REMOVED***,
        'ultracondensed' : ('width', 'ultra-condensed'***REMOVED***,
        'extracondensed' : ('width', 'extra-condensed'***REMOVED***,
        'condensed'      : ('width', 'condensed'***REMOVED***,
        'semicondensed'  : ('width', 'semi-condensed'***REMOVED***,
        'expanded'       : ('width', 'expanded'***REMOVED***,
        'extraexpanded'  : ('width', 'extra-expanded'***REMOVED***,
        'ultraexpanded'  : ('width', 'ultra-expanded'***REMOVED***
    ***REMOVED***

    def __init__(self***REMOVED***:
        family      = Regex(r'([^%s***REMOVED***|(\\[%s***REMOVED******REMOVED******REMOVED****' %
                            (family_punc, family_punc***REMOVED******REMOVED*** \
                      .setParseAction(self._family***REMOVED***
        size        = Regex(r"([0-9***REMOVED***+\.?[0-9***REMOVED****|\.[0-9***REMOVED***+***REMOVED***"***REMOVED*** \
                      .setParseAction(self._size***REMOVED***
        name        = Regex(r'[a-z***REMOVED***+'***REMOVED*** \
                      .setParseAction(self._name***REMOVED***
        value       = Regex(r'([^%s***REMOVED***|(\\[%s***REMOVED******REMOVED******REMOVED****' %
                            (value_punc, value_punc***REMOVED******REMOVED*** \
                      .setParseAction(self._value***REMOVED***

        families    =(family
                    + ZeroOrMore(
                        Literal(','***REMOVED***
                      + family***REMOVED***
                    ***REMOVED***.setParseAction(self._families***REMOVED***

        point_sizes =(size
                    + ZeroOrMore(
                        Literal(','***REMOVED***
                      + size***REMOVED***
                    ***REMOVED***.setParseAction(self._point_sizes***REMOVED***

        property    =( (name
                      + Suppress(Literal('='***REMOVED******REMOVED***
                      + value
                      + ZeroOrMore(
                          Suppress(Literal(','***REMOVED******REMOVED***
                        + value***REMOVED***
                      ***REMOVED***
                     |  name
                    ***REMOVED***.setParseAction(self._property***REMOVED***

        pattern     =(Optional(
                        families***REMOVED***
                    + Optional(
                        Literal('-'***REMOVED***
                      + point_sizes***REMOVED***
                    + ZeroOrMore(
                        Literal(':'***REMOVED***
                      + property***REMOVED***
                    + StringEnd(***REMOVED***
                    ***REMOVED***

        self._parser = pattern
        self.ParseException = ParseException

    def parse(self, pattern***REMOVED***:
        ***REMOVED***
        Parse the given fontconfig *pattern* and return a dictionary
        of key/value pairs useful for initializing a
        :class:`font_manager.FontProperties` object.
        ***REMOVED***
        props = self._properties = {***REMOVED***
        ***REMOVED***
            self._parser.parseString(pattern***REMOVED***
        except self.ParseException as e:
            raise ValueError(
                "Could not parse font string: '%s'\n%s" % (pattern, e***REMOVED******REMOVED***

        self._properties = None

        self._parser.resetCache(***REMOVED***

        return props

    def _family(self, s, loc, tokens***REMOVED***:
        return [family_unescape(r'\1', str(tokens[0***REMOVED******REMOVED******REMOVED******REMOVED***

    def _size(self, s, loc, tokens***REMOVED***:
        return [float(tokens[0***REMOVED******REMOVED******REMOVED***

    def _name(self, s, loc, tokens***REMOVED***:
        return [str(tokens[0***REMOVED******REMOVED******REMOVED***

    def _value(self, s, loc, tokens***REMOVED***:
        return [value_unescape(r'\1', str(tokens[0***REMOVED******REMOVED******REMOVED******REMOVED***

    def _families(self, s, loc, tokens***REMOVED***:
        self._properties['family'***REMOVED*** = [str(x***REMOVED*** for x in tokens***REMOVED***
        return [***REMOVED***

    def _point_sizes(self, s, loc, tokens***REMOVED***:
        self._properties['size'***REMOVED*** = [str(x***REMOVED*** for x in tokens***REMOVED***
        return [***REMOVED***

    def _property(self, s, loc, tokens***REMOVED***:
        if len(tokens***REMOVED*** == 1:
            if tokens[0***REMOVED*** in self._constants:
                key, val = self._constants[tokens[0***REMOVED******REMOVED***
                self._properties.setdefault(key, [***REMOVED******REMOVED***.append(val***REMOVED***
        else:
            key = tokens[0***REMOVED***
            val = tokens[1:***REMOVED***
            self._properties.setdefault(key, [***REMOVED******REMOVED***.extend(val***REMOVED***
        return [***REMOVED***

parse_fontconfig_pattern = FontconfigPatternParser(***REMOVED***.parse

def generate_fontconfig_pattern(d***REMOVED***:
    ***REMOVED***
    Given a dictionary of key/value pairs, generates a fontconfig
    pattern string.
    ***REMOVED***
    props = [***REMOVED***
    families = ''
    size = ''
    for key in 'family style variant weight stretch file size'.split(***REMOVED***:
        val = getattr(d, 'get_' + key***REMOVED***(***REMOVED***
        if val is not None and val != [***REMOVED***:
            if type(val***REMOVED*** == list:
                val = [value_escape(r'\\\1', str(x***REMOVED******REMOVED*** for x in val if x is not None***REMOVED***
                if val != [***REMOVED***:
                    val = ','.join(val***REMOVED***
            props.append(":%s=%s" % (key, val***REMOVED******REMOVED***
    return ''.join(props***REMOVED***
