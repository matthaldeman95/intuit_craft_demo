# Note: The first part of this file can be modified in place, but the latter
# part is autogenerated by the boilerplate.py script.
***REMOVED***
Provides a MATLAB-like plotting framework.

:mod:`~matplotlib.pylab` combines pyplot with numpy into a single namespace.
This is convenient for interactive work, but for programming it
is recommended that the namespaces be kept separate, e.g.::

    import numpy as np
    import matplotlib.pyplot as plt

    x = np.arange(0, 5, 0.1***REMOVED***;
    y = np.sin(x***REMOVED***
    plt.plot(x, y***REMOVED***

***REMOVED***
from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six

import sys
import warnings
import types

from cycler import cycler
import matplotlib
import matplotlib.colorbar
from matplotlib import style
from matplotlib import _pylab_helpers, interactive
from matplotlib.cbook import dedent, silent_list, is_string_like, is_numlike
from matplotlib.cbook import _string_to_bool
from matplotlib import docstring
from matplotlib.backend_bases import FigureCanvasBase
from matplotlib.figure import Figure, figaspect
from matplotlib.gridspec import GridSpec
from matplotlib.image import imread as _imread
from matplotlib.image import imsave as _imsave
from matplotlib import rcParams, rcParamsDefault, get_backend
from matplotlib import rc_context
from matplotlib.rcsetup import interactive_bk as _interactive_bk
from matplotlib.artist import getp, get, Artist
from matplotlib.artist import setp as _setp
from matplotlib.axes import Axes, Subplot
from matplotlib.projections import PolarAxes
from matplotlib import mlab  # for csv2rec, detrend_none, window_hanning
from matplotlib.scale import get_scale_docs, get_scale_names

from matplotlib import cm
from matplotlib.cm import get_cmap, register_cmap

import numpy as np

# We may not need the following imports here:
from matplotlib.colors import Normalize
from matplotlib.lines import Line2D
from matplotlib.text import Text, Annotation
from matplotlib.patches import Polygon, Rectangle, Circle, Arrow
from matplotlib.widgets import SubplotTool, Button, Slider, Widget

from .ticker import TickHelper, Formatter, FixedFormatter, NullFormatter,\
           FuncFormatter, FormatStrFormatter, ScalarFormatter,\
           LogFormatter, LogFormatterExponent, LogFormatterMathtext,\
           Locator, IndexLocator, FixedLocator, NullLocator,\
           LinearLocator, LogLocator, AutoLocator, MultipleLocator,\
           MaxNLocator


## Backend detection ##
def _backend_selection(***REMOVED***:
    ***REMOVED*** If rcParams['backend_fallback'***REMOVED*** is true, check to see if the
        current backend is compatible with the current running event
        loop, and if not switches to a compatible one.
    ***REMOVED***
    backend = rcParams['backend'***REMOVED***
    if not rcParams['backend_fallback'***REMOVED*** or \
                     backend not in _interactive_bk:
        return
    is_agg_backend = rcParams['backend'***REMOVED***.endswith('Agg'***REMOVED***
    if 'wx' in sys.modules and not backend in ('WX', 'WXAgg'***REMOVED***:
        import wx
        if wx.App.IsMainLoopRunning(***REMOVED***:
            rcParams['backend'***REMOVED*** = 'wx' + 'Agg' * is_agg_backend
    elif 'PyQt4.QtCore' in sys.modules and not backend == 'Qt4Agg':
        import PyQt4.QtGui
        if not PyQt4.QtGui.qApp.startingUp(***REMOVED***:
            # The mainloop is running.
            rcParams['backend'***REMOVED*** = 'qt4Agg'
    elif 'PyQt5.QtCore' in sys.modules and not backend == 'Qt5Agg':
        import PyQt5.QtWidgets
        if not PyQt5.QtWidgets.qApp.startingUp(***REMOVED***:
            # The mainloop is running.
            rcParams['backend'***REMOVED*** = 'qt5Agg'
    elif ('gtk' in sys.modules and
          backend not in ('GTK', 'GTKAgg', 'GTKCairo'***REMOVED******REMOVED***:
        if 'gi' in sys.modules:
            from gi.repository import GObject
            ml = GObject.MainLoop
        else:
            import gobject
            ml = gobject.MainLoop
        if ml(***REMOVED***.is_running(***REMOVED***:
            rcParams['backend'***REMOVED*** = 'gtk' + 'Agg' * is_agg_backend
    elif 'Tkinter' in sys.modules and not backend == 'TkAgg':
        # import Tkinter
        pass  # what if anything do we need to do for tkinter?

_backend_selection(***REMOVED***

## Global ##

from matplotlib.backends import pylab_setup
_backend_mod, new_figure_manager, draw_if_interactive, _show = pylab_setup(***REMOVED***

_IP_REGISTERED = None
_INSTALL_FIG_OBSERVER = False


def install_repl_displayhook(***REMOVED***:
    ***REMOVED***
    Install a repl display hook so that any stale figure are automatically
    redrawn when control is returned to the repl.

    This works with IPython terminals and kernels,
    as well as vanilla python shells.
    ***REMOVED***
    global _IP_REGISTERED
    global _INSTALL_FIG_OBSERVER

    class _NotIPython(Exception***REMOVED***:
        pass

    # see if we have IPython hooks around, if use them

    ***REMOVED***
        if 'IPython' in sys.modules:
            from IPython import get_ipython
            ip = get_ipython(***REMOVED***
            if ip is None:
                raise _NotIPython(***REMOVED***

            if _IP_REGISTERED:
                return

            def post_execute(***REMOVED***:
                if matplotlib.is_interactive(***REMOVED***:
                    draw_all(***REMOVED***

            # IPython >= 2
            ***REMOVED***
                ip.events.register('post_execute', post_execute***REMOVED***
            except AttributeError:
                # IPython 1.x
                ip.register_post_execute(post_execute***REMOVED***

            _IP_REGISTERED = post_execute
            _INSTALL_FIG_OBSERVER = False

            # trigger IPython's eventloop integration, if available
            from IPython.core.pylabtools import backend2gui

            ipython_gui_name = backend2gui.get(get_backend(***REMOVED******REMOVED***
            if ipython_gui_name:
                ip.enable_gui(ipython_gui_name***REMOVED***
        else:
            _INSTALL_FIG_OBSERVER = True

    # import failed or ipython is not running
    except (ImportError, _NotIPython***REMOVED***:
        _INSTALL_FIG_OBSERVER = True


def uninstall_repl_displayhook(***REMOVED***:
    ***REMOVED***
    Uninstalls the matplotlib display hook.

    .. warning

       Need IPython >= 2 for this to work.  For IPython < 2 will raise a
       ``NotImplementedError``

    .. warning

       If you are using vanilla python and have installed another
       display hook this will reset ``sys.displayhook`` to what ever
       function was there when matplotlib installed it's displayhook,
       possibly discarding your changes.
    ***REMOVED***
    global _IP_REGISTERED
    global _INSTALL_FIG_OBSERVER
    if _IP_REGISTERED:
        from IPython import get_ipython
        ip = get_ipython(***REMOVED***
        ***REMOVED***
            ip.events.unregister('post_execute', _IP_REGISTERED***REMOVED***
        except AttributeError:
            raise NotImplementedError("Can not unregister events "
                                      "in IPython < 2.0"***REMOVED***
        _IP_REGISTERED = None

    if _INSTALL_FIG_OBSERVER:
        _INSTALL_FIG_OBSERVER = False


draw_all = _pylab_helpers.Gcf.draw_all


@docstring.copy_dedent(Artist.findobj***REMOVED***
def findobj(o=None, match=None, include_self=True***REMOVED***:
    if o is None:
        o = gcf(***REMOVED***
    return o.findobj(match, include_self=include_self***REMOVED***


def switch_backend(newbackend***REMOVED***:
    ***REMOVED***
    Switch the default backend.  This feature is **experimental**, and
    is only expected to work switching to an image backend.  e.g., if
    you have a bunch of PostScript scripts that you want to run from
    an interactive ipython session, you may want to switch to the PS
    backend before running them to avoid having a bunch of GUI windows
    popup.  If you try to interactively switch from one GUI backend to
    another, you will explode.

    Calling this command will close all open windows.
    ***REMOVED***
    close('all'***REMOVED***
    global _backend_mod, new_figure_manager, draw_if_interactive, _show
    matplotlib.use(newbackend, warn=False, force=True***REMOVED***
    from matplotlib.backends import pylab_setup
    _backend_mod, new_figure_manager, draw_if_interactive, _show = pylab_setup(***REMOVED***


def show(*args, **kw***REMOVED***:
    ***REMOVED***
    Display a figure.
    When running in ipython with its pylab mode, display all
    figures and return to the ipython prompt.

    In non-interactive mode, display all figures and block until
    the figures have been closed; in interactive mode it has no
    effect unless figures were created prior to a change from
    non-interactive to interactive mode (not recommended***REMOVED***.  In
    that case it displays the figures but does not block.

    A single experimental keyword argument, *block*, may be
    set to True or False to override the blocking behavior
    described above.
    ***REMOVED***
    global _show
    return _show(*args, **kw***REMOVED***


def isinteractive(***REMOVED***:
    ***REMOVED***
    Return status of interactive mode.
    ***REMOVED***
    return matplotlib.is_interactive(***REMOVED***


def ioff(***REMOVED***:
    'Turn interactive mode off.'
    matplotlib.interactive(False***REMOVED***
    uninstall_repl_displayhook(***REMOVED***


def ion(***REMOVED***:
    'Turn interactive mode on.'
    matplotlib.interactive(True***REMOVED***
    install_repl_displayhook(***REMOVED***


def pause(interval***REMOVED***:
    ***REMOVED***
    Pause for *interval* seconds.

    If there is an active figure it will be updated and displayed,
    and the GUI event loop will run during the pause.

    If there is no active figure, or if a non-interactive backend
    is in use, this executes time.sleep(interval***REMOVED***.

    This can be used for crude animation. For more complex
    animation, see :mod:`matplotlib.animation`.

    This function is experimental; its behavior may be changed
    or extended in a future release.

    ***REMOVED***
    backend = rcParams['backend'***REMOVED***
    if backend in _interactive_bk:
        figManager = _pylab_helpers.Gcf.get_active(***REMOVED***
        if figManager is not None:
            canvas = figManager.canvas
            if canvas.figure.stale:
                canvas.draw(***REMOVED***
            show(block=False***REMOVED***
            canvas.start_event_loop(interval***REMOVED***
            return

    # No on-screen figure is active, so sleep(***REMOVED*** is all we need.
    import time
    time.sleep(interval***REMOVED***


@docstring.copy_dedent(matplotlib.rc***REMOVED***
def rc(*args, **kwargs***REMOVED***:
    matplotlib.rc(*args, **kwargs***REMOVED***


@docstring.copy_dedent(matplotlib.rc_context***REMOVED***
def rc_context(rc=None, fname=None***REMOVED***:
    return matplotlib.rc_context(rc, fname***REMOVED***


@docstring.copy_dedent(matplotlib.rcdefaults***REMOVED***
def rcdefaults(***REMOVED***:
    matplotlib.rcdefaults(***REMOVED***
    if matplotlib.is_interactive(***REMOVED***:
        draw_all(***REMOVED***


# The current "image" (ScalarMappable***REMOVED*** is retrieved or set
# only via the pyplot interface using the following two
# functions:
def gci(***REMOVED***:
    ***REMOVED***
    Get the current colorable artist.  Specifically, returns the
    current :class:`~matplotlib.cm.ScalarMappable` instance (image or
    patch collection***REMOVED***, or *None* if no images or patch collections
    have been defined.  The commands :func:`~matplotlib.pyplot.imshow`
    and :func:`~matplotlib.pyplot.figimage` create
    :class:`~matplotlib.image.Image` instances, and the commands
    :func:`~matplotlib.pyplot.pcolor` and
    :func:`~matplotlib.pyplot.scatter` create
    :class:`~matplotlib.collections.Collection` instances.  The
    current image is an attribute of the current axes, or the nearest
    earlier axes in the current figure that contains an image.
    ***REMOVED***
    return gcf(***REMOVED***._gci(***REMOVED***


def sci(im***REMOVED***:
    ***REMOVED***
    Set the current image.  This image will be the target of colormap
    commands like :func:`~matplotlib.pyplot.jet`,
    :func:`~matplotlib.pyplot.hot` or
    :func:`~matplotlib.pyplot.clim`***REMOVED***.  The current image is an
    attribute of the current axes.
    ***REMOVED***
    gca(***REMOVED***._sci(im***REMOVED***


## Any Artist ##
# (getp is simply imported***REMOVED***
@docstring.copy(_setp***REMOVED***
def setp(*args, **kwargs***REMOVED***:
    return _setp(*args, **kwargs***REMOVED***


def xkcd(scale=1, length=100, randomness=2***REMOVED***:
    ***REMOVED***
    Turns on `xkcd <http://xkcd.com/>`_ sketch-style drawing mode.
    This will only have effect on things drawn after this function is
    called.

    For best results, the "Humor Sans" font should be installed: it is
    not included with matplotlib.

    Parameters
    ----------
    scale : float, optional
        The amplitude of the wiggle perpendicular to the source line.
    length : float, optional
        The length of the wiggle along the line.
    randomness : float, optional
        The scale factor by which the length is shrunken or expanded.

    Notes
    -----
    This function works by a number of rcParams, so it will probably
    override others you have set before.

    If you want the effects of this function to be temporary, it can
    be used as a context manager, for example::

        with plt.xkcd(***REMOVED***:
            # This figure will be in XKCD-style
            fig1 = plt.figure(***REMOVED***
            # ...

        # This figure will be in regular style
        fig2 = plt.figure(***REMOVED***
    ***REMOVED***
    if rcParams['text.usetex'***REMOVED***:
        raise RuntimeError(
            "xkcd mode is not compatible with text.usetex = True"***REMOVED***

    from matplotlib import patheffects
    context = rc_context(***REMOVED***
    ***REMOVED***
        rcParams['font.family'***REMOVED*** = ['Humor Sans', 'Comic Sans MS'***REMOVED***
        rcParams['font.size'***REMOVED*** = 14.0
        rcParams['path.sketch'***REMOVED*** = (scale, length, randomness***REMOVED***
        rcParams['path.effects'***REMOVED*** = [
            patheffects.withStroke(linewidth=4, foreground="w"***REMOVED******REMOVED***
        rcParams['axes.linewidth'***REMOVED*** = 1.5
        rcParams['lines.linewidth'***REMOVED*** = 2.0
        rcParams['figure.facecolor'***REMOVED*** = 'white'
        rcParams['grid.linewidth'***REMOVED*** = 0.0
        rcParams['axes.grid'***REMOVED*** = False
        rcParams['axes.unicode_minus'***REMOVED*** = False
        rcParams['axes.prop_cycle'***REMOVED*** = cycler('color', ['b', 'r', 'c', 'm'***REMOVED******REMOVED***
        rcParams['axes.edgecolor'***REMOVED*** = 'black'
        rcParams['xtick.major.size'***REMOVED*** = 8
        rcParams['xtick.major.width'***REMOVED*** = 3
        rcParams['ytick.major.size'***REMOVED*** = 8
        rcParams['ytick.major.width'***REMOVED*** = 3
    ***REMOVED***
        context.__exit__(*sys.exc_info(***REMOVED******REMOVED***
        raise
    return context


## Figures ##

def figure(num=None,  # autoincrement if None, else integer from 1-N
           figsize=None,  # defaults to rc figure.figsize
           dpi=None,  # defaults to rc figure.dpi
           facecolor=None,  # defaults to rc figure.facecolor
           edgecolor=None,  # defaults to rc figure.edgecolor
           frameon=True,
           FigureClass=Figure,
           **kwargs
           ***REMOVED***:
    ***REMOVED***
    Creates a new figure.

    Parameters
    ----------

    num : integer or string, optional, default: none
        If not provided, a new figure will be created, and the figure number
        will be incremented. The figure objects holds this number in a `number`
        attribute.
        If num is provided, and a figure with this id already exists, make
        it active, and returns a reference to it. If this figure does not
        exists, create it and returns it.
        If num is a string, the window title will be set to this figure's
        `num`.

    figsize : tuple of integers, optional, default: None
        width, height in inches. If not provided, defaults to rc
        figure.figsize.

    dpi : integer, optional, default: None
        resolution of the figure. If not provided, defaults to rc figure.dpi.

    facecolor :
        the background color. If not provided, defaults to rc figure.facecolor

    edgecolor :
        the border color. If not provided, defaults to rc figure.edgecolor

    Returns
    -------
    figure : Figure
        The Figure instance returned will also be passed to new_figure_manager
        in the backends, which allows to hook custom Figure classes into the
        pylab interface. Additional kwargs will be passed to the figure init
        function.

    Notes
    -----
    If you are creating many figures, make sure you explicitly call "close"
    on the figures you are not using, because this will enable pylab
    to properly clean up the memory.

    rcParams defines the default values, which can be modified in the
    matplotlibrc file

    ***REMOVED***

    if figsize is None:
        figsize = rcParams['figure.figsize'***REMOVED***
    if dpi is None:
        dpi = rcParams['figure.dpi'***REMOVED***
    if facecolor is None:
        facecolor = rcParams['figure.facecolor'***REMOVED***
    if edgecolor is None:
        edgecolor = rcParams['figure.edgecolor'***REMOVED***

    allnums = get_fignums(***REMOVED***
    next_num = max(allnums***REMOVED*** + 1 if allnums else 1
    figLabel = ''
    if num is None:
        num = next_num
    elif is_string_like(num***REMOVED***:
        figLabel = num
        allLabels = get_figlabels(***REMOVED***
        if figLabel not in allLabels:
            if figLabel == 'all':
                warnings.warn("close('all'***REMOVED*** closes all existing figures"***REMOVED***
            num = next_num
        else:
            inum = allLabels.index(figLabel***REMOVED***
            num = allnums[inum***REMOVED***
    else:
        num = int(num***REMOVED***  # crude validation of num argument

    figManager = _pylab_helpers.Gcf.get_fig_manager(num***REMOVED***
    if figManager is None:
        max_open_warning = rcParams['figure.max_open_warning'***REMOVED***

        if (max_open_warning >= 1 and len(allnums***REMOVED*** >= max_open_warning***REMOVED***:
            warnings.warn(
                "More than %d figures have been opened. Figures "
                "created through the pyplot interface "
                "(`matplotlib.pyplot.figure`***REMOVED*** are retained until "
                "explicitly closed and may consume too much memory. "
                "(To control this warning, see the rcParam "
                "`figure.max_open_warning`***REMOVED***." %
                max_open_warning, RuntimeWarning***REMOVED***

        if get_backend(***REMOVED***.lower(***REMOVED*** == 'ps':
            dpi = 72

        figManager = new_figure_manager(num, figsize=figsize,
                                        dpi=dpi,
                                        facecolor=facecolor,
                                        edgecolor=edgecolor,
                                        frameon=frameon,
                                        FigureClass=FigureClass,
                                        **kwargs***REMOVED***

        if figLabel:
            figManager.set_window_title(figLabel***REMOVED***
            figManager.canvas.figure.set_label(figLabel***REMOVED***

        # make this figure current on button press event
        def make_active(event***REMOVED***:
            _pylab_helpers.Gcf.set_active(figManager***REMOVED***

        cid = figManager.canvas.mpl_connect('button_press_event', make_active***REMOVED***
        figManager._cidgcf = cid

        _pylab_helpers.Gcf.set_active(figManager***REMOVED***
        fig = figManager.canvas.figure
        fig.number = num

        # make sure backends (inline***REMOVED*** that we don't ship that expect this
        # to be called in plotting commands to make the figure call show
        # still work.  There is probably a better way to do this in the
        # FigureManager base class.
        if matplotlib.is_interactive(***REMOVED***:
            draw_if_interactive(***REMOVED***

        if _INSTALL_FIG_OBSERVER:
            fig.stale_callback = _auto_draw_if_interactive

    return figManager.canvas.figure


def _auto_draw_if_interactive(fig, val***REMOVED***:
    ***REMOVED***
    This is an internal helper function for making sure that auto-redrawing
    works as intended in the plain python repl.

    Parameters
    ----------
    fig : Figure
        A figure object which is assumed to be associated with a canvas
    ***REMOVED***
    if val and matplotlib.is_interactive(***REMOVED*** and not fig.canvas.is_saving(***REMOVED***:
        fig.canvas.draw_idle(***REMOVED***


def gcf(***REMOVED***:
    "Get a reference to the current figure."

    figManager = _pylab_helpers.Gcf.get_active(***REMOVED***
    if figManager is not None:
        return figManager.canvas.figure
    else:
        return figure(***REMOVED***


def fignum_exists(num***REMOVED***:
    return _pylab_helpers.Gcf.has_fignum(num***REMOVED*** or num in get_figlabels(***REMOVED***


def get_fignums(***REMOVED***:
    ***REMOVED***Return a list of existing figure numbers.***REMOVED***
    fignums = list(six.iterkeys(_pylab_helpers.Gcf.figs***REMOVED******REMOVED***
    fignums.sort(***REMOVED***
    return fignums


def get_figlabels(***REMOVED***:
    "Return a list of existing figure labels."
    figManagers = _pylab_helpers.Gcf.get_all_fig_managers(***REMOVED***
    figManagers.sort(key=lambda m: m.num***REMOVED***
    return [m.canvas.figure.get_label(***REMOVED*** for m in figManagers***REMOVED***


def get_current_fig_manager(***REMOVED***:
    figManager = _pylab_helpers.Gcf.get_active(***REMOVED***
    if figManager is None:
        gcf(***REMOVED***  # creates an active figure as a side effect
        figManager = _pylab_helpers.Gcf.get_active(***REMOVED***
    return figManager


@docstring.copy_dedent(FigureCanvasBase.mpl_connect***REMOVED***
def connect(s, func***REMOVED***:
    return get_current_fig_manager(***REMOVED***.canvas.mpl_connect(s, func***REMOVED***


@docstring.copy_dedent(FigureCanvasBase.mpl_disconnect***REMOVED***
def disconnect(cid***REMOVED***:
    return get_current_fig_manager(***REMOVED***.canvas.mpl_disconnect(cid***REMOVED***


def close(*args***REMOVED***:
    ***REMOVED***
    Close a figure window.

    ``close(***REMOVED***`` by itself closes the current figure

    ``close(h***REMOVED***`` where *h* is a :class:`Figure` instance, closes that figure

    ``close(num***REMOVED***`` closes figure number *num*

    ``close(name***REMOVED***`` where *name* is a string, closes figure with that label

    ``close('all'***REMOVED***`` closes all the figure windows
    ***REMOVED***

    if len(args***REMOVED*** == 0:
        figManager = _pylab_helpers.Gcf.get_active(***REMOVED***
        if figManager is None:
            return
        else:
            _pylab_helpers.Gcf.destroy(figManager.num***REMOVED***
    elif len(args***REMOVED*** == 1:
        arg = args[0***REMOVED***
        if arg == 'all':
            _pylab_helpers.Gcf.destroy_all(***REMOVED***
        elif isinstance(arg, six.integer_types***REMOVED***:
            _pylab_helpers.Gcf.destroy(arg***REMOVED***
        elif hasattr(arg, 'int'***REMOVED***:
            # if we are dealing with a type UUID, we
            # can use its integer representation
            _pylab_helpers.Gcf.destroy(arg.int***REMOVED***
        elif is_string_like(arg***REMOVED***:
            allLabels = get_figlabels(***REMOVED***
            if arg in allLabels:
                num = get_fignums(***REMOVED***[allLabels.index(arg***REMOVED******REMOVED***
                _pylab_helpers.Gcf.destroy(num***REMOVED***
        elif isinstance(arg, Figure***REMOVED***:
            _pylab_helpers.Gcf.destroy_fig(arg***REMOVED***
        else:
            raise TypeError('Unrecognized argument type %s to close' % type(arg***REMOVED******REMOVED***
    else:
        raise TypeError('close takes 0 or 1 arguments'***REMOVED***


def clf(***REMOVED***:
    ***REMOVED***
    Clear the current figure.
    ***REMOVED***
    gcf(***REMOVED***.clf(***REMOVED***


def draw(***REMOVED***:
    ***REMOVED***Redraw the current figure.

    This is used in interactive mode to update a figure that has been
    altered, but not automatically re-drawn.  This should be only rarely
    needed, but there may be ways to modify the state of a figure with
    out marking it as `stale`.  Please report these cases as bugs.

    A more object-oriented alternative, given any
    :class:`~matplotlib.figure.Figure` instance, :attr:`fig`, that
    was created using a :mod:`~matplotlib.pyplot` function, is::

        fig.canvas.draw_idle(***REMOVED***
    ***REMOVED***
    get_current_fig_manager(***REMOVED***.canvas.draw_idle(***REMOVED***


@docstring.copy_dedent(Figure.savefig***REMOVED***
def savefig(*args, **kwargs***REMOVED***:
    fig = gcf(***REMOVED***
    res = fig.savefig(*args, **kwargs***REMOVED***
    fig.canvas.draw_idle(***REMOVED***   # need this if 'transparent=True' to reset colors
    return res


@docstring.copy_dedent(Figure.ginput***REMOVED***
def ginput(*args, **kwargs***REMOVED***:
    ***REMOVED***
    Blocking call to interact with the figure.

    This will wait for *n* clicks from the user and return a list of the
    coordinates of each click.

    If *timeout* is negative, does not timeout.
    ***REMOVED***
    return gcf(***REMOVED***.ginput(*args, **kwargs***REMOVED***


@docstring.copy_dedent(Figure.waitforbuttonpress***REMOVED***
def waitforbuttonpress(*args, **kwargs***REMOVED***:
    ***REMOVED***
    Blocking call to interact with the figure.

    This will wait for *n* key or mouse clicks from the user and
    return a list containing True's for keyboard clicks and False's
    for mouse clicks.

    If *timeout* is negative, does not timeout.
    ***REMOVED***
    return gcf(***REMOVED***.waitforbuttonpress(*args, **kwargs***REMOVED***


# Putting things in figures

@docstring.copy_dedent(Figure.text***REMOVED***
def figtext(*args, **kwargs***REMOVED***:
    return gcf(***REMOVED***.text(*args, **kwargs***REMOVED***


@docstring.copy_dedent(Figure.suptitle***REMOVED***
def suptitle(*args, **kwargs***REMOVED***:
    return gcf(***REMOVED***.suptitle(*args, **kwargs***REMOVED***


@docstring.Appender("Addition kwargs: hold = [True|False***REMOVED*** overrides default hold state", "\n"***REMOVED***
@docstring.copy_dedent(Figure.figimage***REMOVED***
def figimage(*args, **kwargs***REMOVED***:
    # allow callers to override the hold state by passing hold=True|False
    #sci(ret***REMOVED***  # JDH figimage should not set current image -- it is not mappable, etc
    return gcf(***REMOVED***.figimage(*args, **kwargs***REMOVED***


def figlegend(handles, labels, loc, **kwargs***REMOVED***:
    ***REMOVED***
    Place a legend in the figure.

    *labels*
      a sequence of strings

    *handles*
      a sequence of :class:`~matplotlib.lines.Line2D` or
      :class:`~matplotlib.patches.Patch` instances

    *loc*
      can be a string or an integer specifying the legend
      location

    A :class:`matplotlib.legend.Legend` instance is returned.

    Example::

      figlegend( (line1, line2, line3***REMOVED***,
                 ('label1', 'label2', 'label3'***REMOVED***,
                 'upper right' ***REMOVED***

    .. seealso::

       :func:`~matplotlib.pyplot.legend`

    ***REMOVED***
    return gcf(***REMOVED***.legend(handles, labels, loc, **kwargs***REMOVED***


## Figure and Axes hybrid ##

def hold(b=None***REMOVED***:
    ***REMOVED***
    Set the hold state.  If *b* is None (default***REMOVED***, toggle the
    hold state, else set the hold state to boolean value *b*::

      hold(***REMOVED***      # toggle hold
      hold(True***REMOVED***  # hold is on
      hold(False***REMOVED*** # hold is off

    When *hold* is *True*, subsequent plot commands will be added to
    the current axes.  When *hold* is *False*, the current axes and
    figure will be cleared on the next plot command.
    ***REMOVED***

    fig = gcf(***REMOVED***
    ax = fig.gca(***REMOVED***

    fig.hold(b***REMOVED***
    ax.hold(b***REMOVED***

    # b=None toggles the hold state, so let's get get the current hold
    # state; but should pyplot hold toggle the rc setting - me thinks
    # not
    b = ax.ishold(***REMOVED***

    rc('axes', hold=b***REMOVED***


def ishold(***REMOVED***:
    ***REMOVED***
    Return the hold status of the current axes.
    ***REMOVED***
    return gca(***REMOVED***.ishold(***REMOVED***


def over(func, *args, **kwargs***REMOVED***:
    ***REMOVED***
    Call a function with hold(True***REMOVED***.

    Calls::

      func(*args, **kwargs***REMOVED***

    with ``hold(True***REMOVED***`` and then restores the hold state.
    ***REMOVED***
    h = ishold(***REMOVED***
    hold(True***REMOVED***
    func(*args, **kwargs***REMOVED***
    hold(h***REMOVED***

## Axes ##


def axes(*args, **kwargs***REMOVED***:
    ***REMOVED***
    Add an axes to the figure.

    The axes is added at position *rect* specified by:

    - ``axes(***REMOVED***`` by itself creates a default full ``subplot(111***REMOVED***`` window axis.

    - ``axes(rect, axisbg='w'***REMOVED***`` where *rect* = [left, bottom, width,
      height***REMOVED*** in normalized (0, 1***REMOVED*** units.  *axisbg* is the background
      color for the axis, default white.

    - ``axes(h***REMOVED***`` where *h* is an axes instance makes *h* the current
      axis.  An :class:`~matplotlib.axes.Axes` instance is returned.

    =======   ==============   ==============================================
    kwarg     Accepts          Description
    =======   ==============   ==============================================
    axisbg    color            the axes background color
    frameon   [True|False***REMOVED***     display the frame?
    sharex    otherax          current axes shares xaxis attribute
                               with otherax
    sharey    otherax          current axes shares yaxis attribute
                               with otherax
    polar     [True|False***REMOVED***     use a polar axes?
    aspect    [str | num***REMOVED***      ['equal', 'auto'***REMOVED*** or a number.  If a number
                               the ratio of x-unit/y-unit in screen-space.
                               Also see
                               :meth:`~matplotlib.axes.Axes.set_aspect`.
    =======   ==============   ==============================================

    Examples:

    * :file:`examples/pylab_examples/axes_demo.py` places custom axes.
    * :file:`examples/pylab_examples/shared_axis_demo.py` uses
      *sharex* and *sharey*.

    ***REMOVED***

    nargs = len(args***REMOVED***
    if len(args***REMOVED*** == 0:
        return subplot(111, **kwargs***REMOVED***
    if nargs > 1:
        raise TypeError('Only one non keyword arg to axes allowed'***REMOVED***
    arg = args[0***REMOVED***

    if isinstance(arg, Axes***REMOVED***:
        a = gcf(***REMOVED***.sca(arg***REMOVED***
    else:
        rect = arg
        a = gcf(***REMOVED***.add_axes(rect, **kwargs***REMOVED***
    return a


def delaxes(*args***REMOVED***:
    ***REMOVED***
    Remove an axes from the current figure.  If *ax*
    doesn't exist, an error will be raised.

    ``delaxes(***REMOVED***``: delete the current axes
    ***REMOVED***
    if not len(args***REMOVED***:
        ax = gca(***REMOVED***
    else:
        ax = args[0***REMOVED***
    ret = gcf(***REMOVED***.delaxes(ax***REMOVED***
    return ret


def sca(ax***REMOVED***:
    ***REMOVED***
    Set the current Axes instance to *ax*.

    The current Figure is updated to the parent of *ax*.
    ***REMOVED***
    managers = _pylab_helpers.Gcf.get_all_fig_managers(***REMOVED***
    for m in managers:
        if ax in m.canvas.figure.axes:
            _pylab_helpers.Gcf.set_active(m***REMOVED***
            m.canvas.figure.sca(ax***REMOVED***
            return
    raise ValueError("Axes instance argument was not found in a figure."***REMOVED***


def gca(**kwargs***REMOVED***:
    ***REMOVED***
    Get the current :class:`~matplotlib.axes.Axes` instance on the
    current figure matching the given keyword args, or create one.

    Examples
    ---------
    To get the current polar axes on the current figure::

        plt.gca(projection='polar'***REMOVED***

    If the current axes doesn't exist, or isn't a polar one, the appropriate
    axes will be created and then returned.

    See Also
    --------
    matplotlib.figure.Figure.gca : The figure's gca method.
    ***REMOVED***
    return gcf(***REMOVED***.gca(**kwargs***REMOVED***

# More ways of creating axes:


def subplot(*args, **kwargs***REMOVED***:
    ***REMOVED***
    Return a subplot axes positioned by the given grid definition.

    Typical call signature::

      subplot(nrows, ncols, plot_number***REMOVED***

    Where *nrows* and *ncols* are used to notionally split the figure
    into ``nrows * ncols`` sub-axes, and *plot_number* is used to identify
    the particular subplot that this function is to create within the notional
    grid. *plot_number* starts at 1, increments across rows first and has a
    maximum of ``nrows * ncols``.

    In the case when *nrows*, *ncols* and *plot_number* are all less than 10,
    a convenience exists, such that the a 3 digit number can be given instead,
    where the hundreds represent *nrows*, the tens represent *ncols* and the
    units represent *plot_number*. For instance::

      subplot(211***REMOVED***

    produces a subaxes in a figure which represents the top plot (i.e. the
    first***REMOVED*** in a 2 row by 1 column notional grid (no grid actually exists,
    but conceptually this is how the returned subplot has been positioned***REMOVED***.

    .. note::

       Creating a new subplot with a position which is entirely inside a
       pre-existing axes will trigger the larger axes to be deleted::

          import matplotlib.pyplot as plt
          # plot a line, implicitly creating a subplot(111***REMOVED***
          plt.plot([1,2,3***REMOVED******REMOVED***
          # now create a subplot which represents the top plot of a grid
          # with 2 rows and 1 column. Since this subplot will overlap the
          # first, the plot (and its axes***REMOVED*** previously created, will be removed
          plt.subplot(211***REMOVED***
          plt.plot(range(12***REMOVED******REMOVED***
          plt.subplot(212, axisbg='y'***REMOVED*** # creates 2nd subplot with yellow background

       If you do not want this behavior, use the
       :meth:`~matplotlib.figure.Figure.add_subplot` method or the
       :func:`~matplotlib.pyplot.axes` function instead.

    Keyword arguments:

      *axisbg*:
        The background color of the subplot, which can be any valid
        color specifier.  See :mod:`matplotlib.colors` for more
        information.

      *polar*:
        A boolean flag indicating whether the subplot plot should be
        a polar projection.  Defaults to *False*.

      *projection*:
        A string giving the name of a custom projection to be used
        for the subplot. This projection must have been previously
        registered. See :mod:`matplotlib.projections`.

    .. seealso::

        :func:`~matplotlib.pyplot.axes`
            For additional information on :func:`axes` and
            :func:`subplot` keyword arguments.

        :file:`examples/pie_and_polar_charts/polar_scatter_demo.py`
            For an example

    **Example:**

    .. plot:: mpl_examples/subplots_axes_and_figures/subplot_demo.py

    ***REMOVED***
    # if subplot called without arguments, create subplot(1,1,1***REMOVED***
    if len(args***REMOVED***==0:
        args=(1,1,1***REMOVED***

    # This check was added because it is very easy to type
    # subplot(1, 2, False***REMOVED*** when subplots(1, 2, False***REMOVED*** was intended
    # (sharex=False, that is***REMOVED***. In most cases, no error will
    # ever occur, but mysterious behavior can result because what was
    # intended to be the sharex argument is instead treated as a
    # subplot index for subplot(***REMOVED***
    if len(args***REMOVED*** >= 3 and isinstance(args[2***REMOVED***, bool***REMOVED*** :
        warnings.warn("The subplot index argument to subplot(***REMOVED*** appears"
                      " to be a boolean. Did you intend to use subplots(***REMOVED***?"***REMOVED***

    fig = gcf(***REMOVED***
    a = fig.add_subplot(*args, **kwargs***REMOVED***
    bbox = a.bbox
    byebye = [***REMOVED***
    for other in fig.axes:
        if other==a: continue
        if bbox.fully_overlaps(other.bbox***REMOVED***:
            byebye.append(other***REMOVED***
    for ax in byebye: delaxes(ax***REMOVED***

    return a


def subplots(nrows=1, ncols=1, sharex=False, sharey=False, squeeze=True,
                subplot_kw=None, gridspec_kw=None, **fig_kw***REMOVED***:
    ***REMOVED***
    Create a figure with a set of subplots already made.

    This utility wrapper makes it convenient to create common layouts of
    subplots, including the enclosing figure object, in a single call.

    Keyword arguments:

      *nrows* : int
        Number of rows of the subplot grid.  Defaults to 1.

      *ncols* : int
        Number of columns of the subplot grid.  Defaults to 1.

      *sharex* : string or bool
        If *True*, the X axis will be shared amongst all subplots.  If
        *True* and you have multiple rows, the x tick labels on all but
        the last row of plots will have visible set to *False*
        If a string must be one of "row", "col", "all", or "none".
        "all" has the same effect as *True*, "none" has the same effect
        as *False*.
        If "row", each subplot row will share a X axis.
        If "col", each subplot column will share a X axis and the x tick
        labels on all but the last row will have visible set to *False*.

      *sharey* : string or bool
        If *True*, the Y axis will be shared amongst all subplots. If
        *True* and you have multiple columns, the y tick labels on all but
        the first column of plots will have visible set to *False*
        If a string must be one of "row", "col", "all", or "none".
        "all" has the same effect as *True*, "none" has the same effect
        as *False*.
        If "row", each subplot row will share a Y axis and the y tick
        labels on all but the first column will have visible set to *False*.
        If "col", each subplot column will share a Y axis.

      *squeeze* : bool
        If *True*, extra dimensions are squeezed out from the
        returned axis object:

        - if only one subplot is constructed (nrows=ncols=1***REMOVED***, the
          resulting single Axis object is returned as a scalar.

        - for Nx1 or 1xN subplots, the returned object is a 1-d numpy
          object array of Axis objects are returned as numpy 1-d
          arrays.

        - for NxM subplots with N>1 and M>1 are returned as a 2d
          array.

        If *False*, no squeezing at all is done: the returned axis
        object is always a 2-d array containing Axis instances, even if it
        ends up being 1x1.

      *subplot_kw* : dict
        Dict with keywords passed to the
        :meth:`~matplotlib.figure.Figure.add_subplot` call used to
        create each subplots.

      *gridspec_kw* : dict
        Dict with keywords passed to the
        :class:`~matplotlib.gridspec.GridSpec` constructor used to create
        the grid the subplots are placed on.

      *fig_kw* : dict
        Dict with keywords passed to the :func:`figure` call.  Note that all
        keywords not recognized above will be automatically included here.

    Returns:

    fig, ax : tuple

      - *fig* is the :class:`matplotlib.figure.Figure` object

      - *ax* can be either a single axis object or an array of axis
        objects if more than one subplot was created.  The dimensions
        of the resulting array can be controlled with the squeeze
        keyword, see above.

    Examples::

        x = np.linspace(0, 2*np.pi, 400***REMOVED***
        y = np.sin(x**2***REMOVED***

        # Just a figure and one subplot
        f, ax = plt.subplots(***REMOVED***
        ax.plot(x, y***REMOVED***
        ax.set_title('Simple plot'***REMOVED***

        # Two subplots, unpack the output array immediately
        f, (ax1, ax2***REMOVED*** = plt.subplots(1, 2, sharey=True***REMOVED***
        ax1.plot(x, y***REMOVED***
        ax1.set_title('Sharing Y axis'***REMOVED***
        ax2.scatter(x, y***REMOVED***

        # Four polar axes
        plt.subplots(2, 2, subplot_kw=dict(polar=True***REMOVED******REMOVED***

        # Share a X axis with each column of subplots
        plt.subplots(2, 2, sharex='col'***REMOVED***

        # Share a Y axis with each row of subplots
        plt.subplots(2, 2, sharey='row'***REMOVED***

        # Share a X and Y axis with all subplots
        plt.subplots(2, 2, sharex='all', sharey='all'***REMOVED***
        # same as
        plt.subplots(2, 2, sharex=True, sharey=True***REMOVED***
    ***REMOVED***
    # for backwards compatibility
    if isinstance(sharex, bool***REMOVED***:
        if sharex:
            sharex = "all"
        else:
            sharex = "none"
    if isinstance(sharey, bool***REMOVED***:
        if sharey:
            sharey = "all"
        else:
            sharey = "none"
    share_values = ["all", "row", "col", "none"***REMOVED***
    if sharex not in share_values:
        # This check was added because it is very easy to type
        # `subplots(1, 2, 1***REMOVED***` when `subplot(1, 2, 1***REMOVED***` was intended.
        # In most cases, no error will ever occur, but mysterious behavior will
        # result because what was intended to be the subplot index is instead
        # treated as a bool for sharex.
        if isinstance(sharex, int***REMOVED***:
            warnings.warn("sharex argument to subplots(***REMOVED*** was an integer."
                          " Did you intend to use subplot(***REMOVED*** (without 's'***REMOVED***?"***REMOVED***

        raise ValueError("sharex [%s***REMOVED*** must be one of %s" %
                         (sharex, share_values***REMOVED******REMOVED***
    if sharey not in share_values:
        raise ValueError("sharey [%s***REMOVED*** must be one of %s" %
                         (sharey, share_values***REMOVED******REMOVED***
    if subplot_kw is None:
        subplot_kw = {***REMOVED***
    if gridspec_kw is None:
        gridspec_kw = {***REMOVED***

    fig = figure(**fig_kw***REMOVED***
    gs = GridSpec(nrows, ncols, **gridspec_kw***REMOVED***

    # Create empty object array to hold all axes.  It's easiest to make it 1-d
    # so we can just append subplots upon creation, and then
    nplots = nrows*ncols
    axarr = np.empty(nplots, dtype=object***REMOVED***

    # Create first subplot separately, so we can share it if requested
    ax0 = fig.add_subplot(gs[0, 0***REMOVED***, **subplot_kw***REMOVED***
    axarr[0***REMOVED*** = ax0

    r, c = np.mgrid[:nrows, :ncols***REMOVED***
    r = r.flatten(***REMOVED*** * ncols
    c = c.flatten(***REMOVED***
    lookup = {
            "none": np.arange(nplots***REMOVED***,
            "all": np.zeros(nplots, dtype=int***REMOVED***,
            "row": r,
            "col": c,
        ***REMOVED***
    sxs = lookup[sharex***REMOVED***
    sys = lookup[sharey***REMOVED***

    # Note off-by-one counting because add_subplot uses the MATLAB 1-based
    # convention.
    for i in range(1, nplots***REMOVED***:
        if sxs[i***REMOVED*** == i:
            subplot_kw['sharex'***REMOVED*** = None
        else:
            subplot_kw['sharex'***REMOVED*** = axarr[sxs[i***REMOVED******REMOVED***
        if sys[i***REMOVED*** == i:
            subplot_kw['sharey'***REMOVED*** = None
        else:
            subplot_kw['sharey'***REMOVED*** = axarr[sys[i***REMOVED******REMOVED***
        axarr[i***REMOVED*** = fig.add_subplot(gs[i // ncols, i % ncols***REMOVED***, **subplot_kw***REMOVED***

    # returned axis array will be always 2-d, even if nrows=ncols=1
    axarr = axarr.reshape(nrows, ncols***REMOVED***

    # turn off redundant tick labeling
    if sharex in ["col", "all"***REMOVED*** and nrows > 1:
        # turn off all but the bottom row
        for ax in axarr[:-1, :***REMOVED***.flat:
            for label in ax.get_xticklabels(***REMOVED***:
                label.set_visible(False***REMOVED***
            ax.xaxis.offsetText.set_visible(False***REMOVED***

    if sharey in ["row", "all"***REMOVED*** and ncols > 1:
        # turn off all but the first column
        for ax in axarr[:, 1:***REMOVED***.flat:
            for label in ax.get_yticklabels(***REMOVED***:
                label.set_visible(False***REMOVED***
            ax.yaxis.offsetText.set_visible(False***REMOVED***

    if squeeze:
        # Reshape the array to have the final desired dimension (nrow,ncol***REMOVED***,
        # though discarding unneeded dimensions that equal 1.  If we only have
        # one subplot, just return it instead of a 1-element array.
        if nplots == 1:
            ret = fig, axarr[0, 0***REMOVED***
        else:
            ret = fig, axarr.squeeze(***REMOVED***
    else:
        # returned axis array will be always 2-d, even if nrows=ncols=1
        ret = fig, axarr.reshape(nrows, ncols***REMOVED***

    return ret


def subplot2grid(shape, loc, rowspan=1, colspan=1, **kwargs***REMOVED***:
    ***REMOVED***
    Create a subplot in a grid.  The grid is specified by *shape*, at
    location of *loc*, spanning *rowspan*, *colspan* cells in each
    direction.  The index for loc is 0-based. ::

      subplot2grid(shape, loc, rowspan=1, colspan=1***REMOVED***

    is identical to ::

      gridspec=GridSpec(shape[0***REMOVED***, shape[1***REMOVED******REMOVED***
      subplotspec=gridspec.new_subplotspec(loc, rowspan, colspan***REMOVED***
      subplot(subplotspec***REMOVED***
    ***REMOVED***

    fig = gcf(***REMOVED***
    s1, s2 = shape
    subplotspec = GridSpec(s1, s2***REMOVED***.new_subplotspec(loc,
                                                   rowspan=rowspan,
                                                   colspan=colspan***REMOVED***
    a = fig.add_subplot(subplotspec, **kwargs***REMOVED***
    bbox = a.bbox
    byebye = [***REMOVED***
    for other in fig.axes:
        if other == a:
            continue
        if bbox.fully_overlaps(other.bbox***REMOVED***:
            byebye.append(other***REMOVED***
    for ax in byebye:
        delaxes(ax***REMOVED***

    return a


def twinx(ax=None***REMOVED***:
    ***REMOVED***
    Make a second axes that shares the *x*-axis.  The new axes will
    overlay *ax* (or the current axes if *ax* is *None****REMOVED***.  The ticks
    for *ax2* will be placed on the right, and the *ax2* instance is
    returned.

    .. seealso::

       :file:`examples/api_examples/two_scales.py`
          For an example
    ***REMOVED***
    if ax is None:
        ax=gca(***REMOVED***
    ax1 = ax.twinx(***REMOVED***
    return ax1


def twiny(ax=None***REMOVED***:
    ***REMOVED***
    Make a second axes that shares the *y*-axis.  The new axis will
    overlay *ax* (or the current axes if *ax* is *None****REMOVED***.  The ticks
    for *ax2* will be placed on the top, and the *ax2* instance is
    returned.
    ***REMOVED***
    if ax is None:
        ax=gca(***REMOVED***
    ax1 = ax.twiny(***REMOVED***
    return ax1


def subplots_adjust(*args, **kwargs***REMOVED***:
    ***REMOVED***
    Tune the subplot layout.

    call signature::

      subplots_adjust(left=None, bottom=None, right=None, top=None,
                      wspace=None, hspace=None***REMOVED***

    The parameter meanings (and suggested defaults***REMOVED*** are::

      left  = 0.125  # the left side of the subplots of the figure
      right = 0.9    # the right side of the subplots of the figure
      bottom = 0.1   # the bottom of the subplots of the figure
      top = 0.9      # the top of the subplots of the figure
      wspace = 0.2   # the amount of width reserved for blank space between subplots
      hspace = 0.2   # the amount of height reserved for white space between subplots

    The actual defaults are controlled by the rc file
    ***REMOVED***
    fig = gcf(***REMOVED***
    fig.subplots_adjust(*args, **kwargs***REMOVED***


def subplot_tool(targetfig=None***REMOVED***:
    ***REMOVED***
    Launch a subplot tool window for a figure.

    A :class:`matplotlib.widgets.SubplotTool` instance is returned.
    ***REMOVED***
    tbar = rcParams['toolbar'***REMOVED*** # turn off the navigation toolbar for the toolfig
    rcParams['toolbar'***REMOVED*** = 'None'
    if targetfig is None:
        manager = get_current_fig_manager(***REMOVED***
        targetfig = manager.canvas.figure
    else:
        # find the manager for this figure
        for manager in _pylab_helpers.Gcf._activeQue:
            if manager.canvas.figure==targetfig: break
        else: raise RuntimeError('Could not find manager for targetfig'***REMOVED***

    toolfig = figure(figsize=(6,3***REMOVED******REMOVED***
    toolfig.subplots_adjust(top=0.9***REMOVED***
    ret =  SubplotTool(targetfig, toolfig***REMOVED***
    rcParams['toolbar'***REMOVED*** = tbar
    _pylab_helpers.Gcf.set_active(manager***REMOVED***  # restore the current figure
    return ret


def tight_layout(pad=1.08, h_pad=None, w_pad=None, rect=None***REMOVED***:
    ***REMOVED***
    Automatically adjust subplot parameters to give specified padding.

    Parameters:

    pad : float
        padding between the figure edge and the edges of subplots, as a fraction of the font-size.
    h_pad, w_pad : float
        padding (height/width***REMOVED*** between edges of adjacent subplots.
        Defaults to `pad_inches`.
    rect : if rect is given, it is interpreted as a rectangle
        (left, bottom, right, top***REMOVED*** in the normalized figure
        coordinate that the whole subplots area (including
        labels***REMOVED*** will fit into. Default is (0, 0, 1, 1***REMOVED***.
    ***REMOVED***

    fig = gcf(***REMOVED***
    fig.tight_layout(pad=pad, h_pad=h_pad, w_pad=w_pad, rect=rect***REMOVED***


def box(on=None***REMOVED***:
    ***REMOVED***
    Turn the axes box on or off.  *on* may be a boolean or a string,
    'on' or 'off'.

    If *on* is *None*, toggle state.
    ***REMOVED***
    ax = gca(***REMOVED***
    on = _string_to_bool(on***REMOVED***
    if on is None:
        on = not ax.get_frame_on(***REMOVED***
    ax.set_frame_on(on***REMOVED***


def title(s, *args, **kwargs***REMOVED***:
    ***REMOVED***
    Set a title of the current axes.

    Set one of the three available axes titles. The available titles are
    positioned above the axes in the center, flush with the left edge,
    and flush with the right edge.

    .. seealso::
        See :func:`~matplotlib.pyplot.text` for adding text
        to the current axes

    Parameters
    ----------
    label : str
        Text to use for the title

    fontdict : dict
        A dictionary controlling the appearance of the title text,
        the default `fontdict` is:

        ***REMOVED***'fontsize': rcParams['axes.titlesize'***REMOVED***,
            'fontweight' : rcParams['axes.titleweight'***REMOVED***,
            'verticalalignment': 'baseline',
            'horizontalalignment': loc***REMOVED***

    loc : {'center', 'left', 'right'***REMOVED***, str, optional
        Which title to set, defaults to 'center'

    Returns
    -------
    text : :class:`~matplotlib.text.Text`
        The matplotlib text instance representing the title

    Other parameters
    ----------------
    kwargs : text properties
        Other keyword arguments are text properties, see
        :class:`~matplotlib.text.Text` for a list of valid text
        properties.

    ***REMOVED***
    return gca(***REMOVED***.set_title(s, *args, **kwargs***REMOVED***

## Axis ##


def axis(*v, **kwargs***REMOVED***:
    ***REMOVED***
    Convenience method to get or set axis properties.

    Calling with no arguments::

      >>> axis(***REMOVED***

    returns the current axes limits ``[xmin, xmax, ymin, ymax***REMOVED***``.::

      >>> axis(v***REMOVED***

    sets the min and max of the x and y axes, with
    ``v = [xmin, xmax, ymin, ymax***REMOVED***``.::

      >>> axis('off'***REMOVED***

    turns off the axis lines and labels.::

      >>> axis('equal'***REMOVED***

    changes limits of *x* or *y* axis so that equal increments of *x*
    and *y* have the same length; a circle is circular.::

      >>> axis('scaled'***REMOVED***

    achieves the same result by changing the dimensions of the plot box instead
    of the axis data limits.::

      >>> axis('tight'***REMOVED***

    changes *x* and *y* axis limits such that all data is shown. If
    all data is already shown, it will move it to the center of the
    figure without modifying (*xmax* - *xmin****REMOVED*** or (*ymax* -
    *ymin****REMOVED***. Note this is slightly different than in MATLAB.::

      >>> axis('image'***REMOVED***

    is 'scaled' with the axis limits equal to the data limits.::

      >>> axis('auto'***REMOVED***

    and::

      >>> axis('normal'***REMOVED***

    are deprecated. They restore default behavior; axis limits are automatically
    scaled to make the data fit comfortably within the plot box.

    if ``len(*v***REMOVED***==0``, you can pass in *xmin*, *xmax*, *ymin*, *ymax*
    as kwargs selectively to alter just those limits without changing
    the others.

      >>> axis('square'***REMOVED***

    changes the limit ranges (*xmax*-*xmin****REMOVED*** and (*ymax*-*ymin****REMOVED*** of
    the *x* and *y* axes to be the same, and have the same scaling,
    resulting in a square plot.

    The xmin, xmax, ymin, ymax tuple is returned

    .. seealso::

        :func:`xlim`, :func:`ylim`
           For setting the x- and y-limits individually.
    ***REMOVED***
    return gca(***REMOVED***.axis(*v, **kwargs***REMOVED***


def xlabel(s, *args, **kwargs***REMOVED***:
    ***REMOVED***
    Set the *x* axis label of the current axis.

    Default override is::

      override = {
          'fontsize'            : 'small',
          'verticalalignment'   : 'top',
          'horizontalalignment' : 'center'
      ***REMOVED***

    .. seealso::

        :func:`~matplotlib.pyplot.text`
            For information on how override and the optional args work
    ***REMOVED***
    return gca(***REMOVED***.set_xlabel(s, *args, **kwargs***REMOVED***


def ylabel(s, *args, **kwargs***REMOVED***:
    ***REMOVED***
    Set the *y* axis label of the current axis.

    Defaults override is::

        override = {
           'fontsize'            : 'small',
           'verticalalignment'   : 'center',
           'horizontalalignment' : 'right',
           'rotation'='vertical' : ***REMOVED***

    .. seealso::

        :func:`~matplotlib.pyplot.text`
            For information on how override and the optional args
            work.
    ***REMOVED***
    return gca(***REMOVED***.set_ylabel(s, *args, **kwargs***REMOVED***


def xlim(*args, **kwargs***REMOVED***:
    ***REMOVED***
    Get or set the *x* limits of the current axes.

    ::

      xmin, xmax = xlim(***REMOVED***   # return the current xlim
      xlim( (xmin, xmax***REMOVED*** ***REMOVED***  # set the xlim to xmin, xmax
      xlim( xmin, xmax ***REMOVED***    # set the xlim to xmin, xmax

    If you do not specify args, you can pass the xmin and xmax as
    kwargs, e.g.::

      xlim(xmax=3***REMOVED*** # adjust the max leaving min unchanged
      xlim(xmin=1***REMOVED*** # adjust the min leaving max unchanged

    Setting limits turns autoscaling off for the x-axis.

    The new axis limits are returned as a length 2 tuple.

    ***REMOVED***
    ax = gca(***REMOVED***
    if not args and not kwargs:
        return ax.get_xlim(***REMOVED***
    ret = ax.set_xlim(*args, **kwargs***REMOVED***
    return ret


def ylim(*args, **kwargs***REMOVED***:
    ***REMOVED***
    Get or set the *y*-limits of the current axes.

    ::

      ymin, ymax = ylim(***REMOVED***   # return the current ylim
      ylim( (ymin, ymax***REMOVED*** ***REMOVED***  # set the ylim to ymin, ymax
      ylim( ymin, ymax ***REMOVED***    # set the ylim to ymin, ymax

    If you do not specify args, you can pass the *ymin* and *ymax* as
    kwargs, e.g.::

      ylim(ymax=3***REMOVED*** # adjust the max leaving min unchanged
      ylim(ymin=1***REMOVED*** # adjust the min leaving max unchanged

    Setting limits turns autoscaling off for the y-axis.

    The new axis limits are returned as a length 2 tuple.
    ***REMOVED***
    ax = gca(***REMOVED***
    if not args and not kwargs:
        return ax.get_ylim(***REMOVED***
    ret = ax.set_ylim(*args, **kwargs***REMOVED***
    return ret


@docstring.dedent_interpd
def xscale(*args, **kwargs***REMOVED***:
    ***REMOVED***
    Set the scaling of the *x*-axis.

    call signature::

      xscale(scale, **kwargs***REMOVED***

    The available scales are: %(scale***REMOVED***s

    Different keywords may be accepted, depending on the scale:

    %(scale_docs***REMOVED***s
    ***REMOVED***
    gca(***REMOVED***.set_xscale(*args, **kwargs***REMOVED***


@docstring.dedent_interpd
def yscale(*args, **kwargs***REMOVED***:
    ***REMOVED***
    Set the scaling of the *y*-axis.

    call signature::

      yscale(scale, **kwargs***REMOVED***

    The available scales are: %(scale***REMOVED***s

    Different keywords may be accepted, depending on the scale:

    %(scale_docs***REMOVED***s
    ***REMOVED***
    gca(***REMOVED***.set_yscale(*args, **kwargs***REMOVED***


def xticks(*args, **kwargs***REMOVED***:
    ***REMOVED***
    Get or set the *x*-limits of the current tick locations and labels.

    ::

      # return locs, labels where locs is an array of tick locations and
      # labels is an array of tick labels.
      locs, labels = xticks(***REMOVED***

      # set the locations of the xticks
      xticks( arange(6***REMOVED*** ***REMOVED***

      # set the locations and labels of the xticks
      xticks( arange(5***REMOVED***, ('Tom', 'Dick', 'Harry', 'Sally', 'Sue'***REMOVED*** ***REMOVED***

    The keyword args, if any, are :class:`~matplotlib.text.Text`
    properties. For example, to rotate long labels::

      xticks( arange(12***REMOVED***, calendar.month_name[1:13***REMOVED***, rotation=17 ***REMOVED***
    ***REMOVED***
    ax = gca(***REMOVED***

    if len(args***REMOVED***==0:
        locs = ax.get_xticks(***REMOVED***
        labels = ax.get_xticklabels(***REMOVED***
    elif len(args***REMOVED***==1:
        locs = ax.set_xticks(args[0***REMOVED******REMOVED***
        labels = ax.get_xticklabels(***REMOVED***
    elif len(args***REMOVED***==2:
        locs = ax.set_xticks(args[0***REMOVED******REMOVED***
        labels = ax.set_xticklabels(args[1***REMOVED***, **kwargs***REMOVED***
    else: raise TypeError('Illegal number of arguments to xticks'***REMOVED***
    if len(kwargs***REMOVED***:
        for l in labels:
            l.update(kwargs***REMOVED***

    return locs, silent_list('Text xticklabel', labels***REMOVED***


def yticks(*args, **kwargs***REMOVED***:
    ***REMOVED***
    Get or set the *y*-limits of the current tick locations and labels.

    ::

      # return locs, labels where locs is an array of tick locations and
      # labels is an array of tick labels.
      locs, labels = yticks(***REMOVED***

      # set the locations of the yticks
      yticks( arange(6***REMOVED*** ***REMOVED***

      # set the locations and labels of the yticks
      yticks( arange(5***REMOVED***, ('Tom', 'Dick', 'Harry', 'Sally', 'Sue'***REMOVED*** ***REMOVED***

    The keyword args, if any, are :class:`~matplotlib.text.Text`
    properties. For example, to rotate long labels::

      yticks( arange(12***REMOVED***, calendar.month_name[1:13***REMOVED***, rotation=45 ***REMOVED***
    ***REMOVED***
    ax = gca(***REMOVED***

    if len(args***REMOVED***==0:
        locs = ax.get_yticks(***REMOVED***
        labels = ax.get_yticklabels(***REMOVED***
    elif len(args***REMOVED***==1:
        locs = ax.set_yticks(args[0***REMOVED******REMOVED***
        labels = ax.get_yticklabels(***REMOVED***
    elif len(args***REMOVED***==2:
        locs = ax.set_yticks(args[0***REMOVED******REMOVED***
        labels = ax.set_yticklabels(args[1***REMOVED***, **kwargs***REMOVED***
    else: raise TypeError('Illegal number of arguments to yticks'***REMOVED***
    if len(kwargs***REMOVED***:
        for l in labels:
            l.update(kwargs***REMOVED***


    return ( locs,
             silent_list('Text yticklabel', labels***REMOVED***
             ***REMOVED***


def minorticks_on(***REMOVED***:
    ***REMOVED***
    Display minor ticks on the current plot.

    Displaying minor ticks reduces performance; turn them off using
    minorticks_off(***REMOVED*** if drawing speed is a problem.
    ***REMOVED***
    gca(***REMOVED***.minorticks_on(***REMOVED***


def minorticks_off(***REMOVED***:
    ***REMOVED***
    Remove minor ticks from the current plot.
    ***REMOVED***
    gca(***REMOVED***.minorticks_off(***REMOVED***


def rgrids(*args, **kwargs***REMOVED***:
    ***REMOVED***
    Get or set the radial gridlines on a polar plot.

    call signatures::

      lines, labels = rgrids(***REMOVED***
      lines, labels = rgrids(radii, labels=None, angle=22.5, **kwargs***REMOVED***

    When called with no arguments, :func:`rgrid` simply returns the
    tuple (*lines*, *labels****REMOVED***, where *lines* is an array of radial
    gridlines (:class:`~matplotlib.lines.Line2D` instances***REMOVED*** and
    *labels* is an array of tick labels
    (:class:`~matplotlib.text.Text` instances***REMOVED***. When called with
    arguments, the labels will appear at the specified radial
    distances and angles.

    *labels*, if not *None*, is a len(*radii****REMOVED*** list of strings of the
    labels to use at each angle.

    If *labels* is None, the rformatter will be used

    Examples::

      # set the locations of the radial gridlines and labels
      lines, labels = rgrids( (0.25, 0.5, 1.0***REMOVED*** ***REMOVED***

      # set the locations and labels of the radial gridlines and labels
      lines, labels = rgrids( (0.25, 0.5, 1.0***REMOVED***, ('Tom', 'Dick', 'Harry' ***REMOVED***

    ***REMOVED***
    ax = gca(***REMOVED***
    if not isinstance(ax, PolarAxes***REMOVED***:
        raise RuntimeError('rgrids only defined for polar axes'***REMOVED***
    if len(args***REMOVED***==0:
        lines = ax.yaxis.get_gridlines(***REMOVED***
        labels = ax.yaxis.get_ticklabels(***REMOVED***
    else:
        lines, labels = ax.set_rgrids(*args, **kwargs***REMOVED***

    return ( silent_list('Line2D rgridline', lines***REMOVED***,
             silent_list('Text rgridlabel', labels***REMOVED*** ***REMOVED***


def thetagrids(*args, **kwargs***REMOVED***:
    ***REMOVED***
    Get or set the theta locations of the gridlines in a polar plot.

    If no arguments are passed, return a tuple (*lines*, *labels****REMOVED***
    where *lines* is an array of radial gridlines
    (:class:`~matplotlib.lines.Line2D` instances***REMOVED*** and *labels* is an
    array of tick labels (:class:`~matplotlib.text.Text` instances***REMOVED***::

      lines, labels = thetagrids(***REMOVED***

    Otherwise the syntax is::

      lines, labels = thetagrids(angles, labels=None, fmt='%d', frac = 1.1***REMOVED***

    set the angles at which to place the theta grids (these gridlines
    are equal along the theta dimension***REMOVED***.

    *angles* is in degrees.

    *labels*, if not *None*, is a len(angles***REMOVED*** list of strings of the
    labels to use at each angle.

    If *labels* is *None*, the labels will be ``fmt%angle``.

    *frac* is the fraction of the polar axes radius at which to place
    the label (1 is the edge***REMOVED***. e.g., 1.05 is outside the axes and 0.95
    is inside the axes.

    Return value is a list of tuples (*lines*, *labels****REMOVED***:

      - *lines* are :class:`~matplotlib.lines.Line2D` instances

      - *labels* are :class:`~matplotlib.text.Text` instances.

    Note that on input, the *labels* argument is a list of strings,
    and on output it is a list of :class:`~matplotlib.text.Text`
    instances.

    Examples::

      # set the locations of the radial gridlines and labels
      lines, labels = thetagrids( range(45,360,90***REMOVED*** ***REMOVED***

      # set the locations and labels of the radial gridlines and labels
      lines, labels = thetagrids( range(45,360,90***REMOVED***, ('NE', 'NW', 'SW','SE'***REMOVED*** ***REMOVED***
    ***REMOVED***
    ax = gca(***REMOVED***
    if not isinstance(ax, PolarAxes***REMOVED***:
        raise RuntimeError('rgrids only defined for polar axes'***REMOVED***
    if len(args***REMOVED***==0:
        lines = ax.xaxis.get_ticklines(***REMOVED***
        labels = ax.xaxis.get_ticklabels(***REMOVED***
    else:
        lines, labels = ax.set_thetagrids(*args, **kwargs***REMOVED***

    return (silent_list('Line2D thetagridline', lines***REMOVED***,
            silent_list('Text thetagridlabel', labels***REMOVED***
            ***REMOVED***


## Plotting Info ##

def plotting(***REMOVED***:
    pass


def get_plot_commands(***REMOVED***:
    ***REMOVED***
    Get a sorted list of all of the plotting commands.
    ***REMOVED***
    # This works by searching for all functions in this module and
    # removing a few hard-coded exclusions, as well as all of the
    # colormap-setting functions, and anything marked as private with
    # a preceding underscore.

    import inspect

    exclude = set(['colormaps', 'colors', 'connect', 'disconnect',
                   'get_plot_commands', 'get_current_fig_manager',
                   'ginput', 'plotting', 'waitforbuttonpress'***REMOVED******REMOVED***
    exclude |= set(colormaps(***REMOVED******REMOVED***
    this_module = inspect.getmodule(get_plot_commands***REMOVED***

    commands = set(***REMOVED***
    for name, obj in list(six.iteritems(globals(***REMOVED******REMOVED******REMOVED***:
        if name.startswith('_'***REMOVED*** or name in exclude:
            continue
        if inspect.isfunction(obj***REMOVED*** and inspect.getmodule(obj***REMOVED*** is this_module:
            commands.add(name***REMOVED***

    commands = list(commands***REMOVED***
    commands.sort(***REMOVED***
    return commands

def colors(***REMOVED***:
    ***REMOVED***
    This is a do-nothing function to provide you with help on how
    matplotlib handles colors.

    Commands which take color arguments can use several formats to
    specify the colors.  For the basic built-in colors, you can use a
    single letter

      =====   =======
      Alias   Color
      =====   =======
      'b'     blue
      'g'     green
      'r'     red
      'c'     cyan
      'm'     magenta
      'y'     yellow
      'k'     black
      'w'     white
      =====   =======

    For a greater range of colors, you have two options.  You can
    specify the color using an html hex string, as in::

      color = '#eeefff'

    or you can pass an R,G,B tuple, where each of R,G,B are in the
    range [0,1***REMOVED***.

    You can also use any legal html name for a color, for example::

      color = 'red'
      color = 'burlywood'
      color = 'chartreuse'

    The example below creates a subplot with a dark
    slate gray background::

       subplot(111, axisbg=(0.1843, 0.3098, 0.3098***REMOVED******REMOVED***

    Here is an example that creates a pale turquoise title::

      title('Is this the best color?', color='#afeeee'***REMOVED***

    ***REMOVED***
    pass


def colormaps(***REMOVED***:
    ***REMOVED***
    Matplotlib provides a number of colormaps, and others can be added using
    :func:`~matplotlib.cm.register_cmap`.  This function documents the built-in
    colormaps, and will also return a list of all registered colormaps if called.

    You can set the colormap for an image, pcolor, scatter, etc,
    using a keyword argument::

      imshow(X, cmap=cm.hot***REMOVED***

    or using the :func:`set_cmap` function::

      imshow(X***REMOVED***
      pyplot.set_cmap('hot'***REMOVED***
      pyplot.set_cmap('jet'***REMOVED***

    In interactive mode, :func:`set_cmap` will update the colormap post-hoc,
    allowing you to see which one works best for your data.

    All built-in colormaps can be reversed by appending ``_r``: For instance,
    ``gray_r`` is the reverse of ``gray``.

    There are several common color schemes used in visualization:

    Sequential schemes
      for unipolar data that progresses from low to high
    Diverging schemes
      for bipolar data that emphasizes positive or negative deviations from a
      central value
    Cyclic schemes
      meant for plotting values that wrap around at the
      endpoints, such as phase angle, wind direction, or time of day
    Qualitative schemes
      for nominal data that has no inherent ordering, where color is used
      only to distinguish categories

    The base colormaps are derived from those of the same name provided
    with Matlab:

      =========   =======================================================
      Colormap    Description
      =========   =======================================================
      autumn      sequential linearly-increasing shades of red-orange-yellow
      bone        sequential increasing black-white color map with
                  a tinge of blue, to emulate X-ray film
      cool        linearly-decreasing shades of cyan-magenta
      copper      sequential increasing shades of black-copper
      flag        repetitive red-white-blue-black pattern (not cyclic at
                  endpoints***REMOVED***
      gray        sequential linearly-increasing black-to-white
                  grayscale
      hot         sequential black-red-yellow-white, to emulate blackbody
                  radiation from an object at increasing temperatures
      hsv         cyclic red-yellow-green-cyan-blue-magenta-red, formed
                  by changing the hue component in the HSV color space
      inferno     perceptually uniform shades of black-red-yellow
      jet         a spectral map with dark endpoints, blue-cyan-yellow-red;
                  based on a fluid-jet simulation by NCSA [#***REMOVED***_
      magma       perceptually uniform shades of black-red-white
      pink        sequential increasing pastel black-pink-white, meant
                  for sepia tone colorization of photographs
      plasma      perceptually uniform shades of blue-red-yellow
      prism       repetitive red-yellow-green-blue-purple-...-green pattern
                  (not cyclic at endpoints***REMOVED***
      spring      linearly-increasing shades of magenta-yellow
      summer      sequential linearly-increasing shades of green-yellow
      viridis     perceptually uniform shades of blue-green-yellow
      winter      linearly-increasing shades of blue-green
      =========   =======================================================

    For the above list only, you can also set the colormap using the
    corresponding pylab shortcut interface function, similar to Matlab::

      imshow(X***REMOVED***
      hot(***REMOVED***
      jet(***REMOVED***

    The next set of palettes are from the `Yorick scientific visualisation
    package <http://dhmunro.github.io/yorick-doc/>`_, an evolution of
    the GIST package, both by David H. Munro:

      ============  =======================================================
      Colormap      Description
      ============  =======================================================
      gist_earth    mapmaker's colors from dark blue deep ocean to green
                    lowlands to brown highlands to white mountains
      gist_heat     sequential increasing black-red-orange-white, to emulate
                    blackbody radiation from an iron bar as it grows hotter
      gist_ncar     pseudo-spectral black-blue-green-yellow-red-purple-white
                    colormap from National Center for Atmospheric
                    Research [#***REMOVED***_
      gist_rainbow  runs through the colors in spectral order from red to
                    violet at full saturation (like *hsv* but not cyclic***REMOVED***
      gist_stern    "Stern special" color table from Interactive Data
                    Language software
      ============  =======================================================

    The following colormaps are based on the `ColorBrewer
    <http://colorbrewer.org>`_ color specifications and designs developed by
    Cynthia Brewer:

    ColorBrewer Diverging (luminance is highest at the midpoint, and
    decreases towards differently-colored endpoints***REMOVED***:

      ========  ===================================
      Colormap  Description
      ========  ===================================
      BrBG      brown, white, blue-green
      PiYG      pink, white, yellow-green
      PRGn      purple, white, green
      PuOr      orange, white, purple
      RdBu      red, white, blue
      RdGy      red, white, gray
      RdYlBu    red, yellow, blue
      RdYlGn    red, yellow, green
      Spectral  red, orange, yellow, green, blue
      ========  ===================================

    ColorBrewer Sequential (luminance decreases monotonically***REMOVED***:

      ========  ====================================
      Colormap  Description
      ========  ====================================
      Blues     white to dark blue
      BuGn      white, light blue, dark green
      BuPu      white, light blue, dark purple
      GnBu      white, light green, dark blue
      Greens    white to dark green
      Greys     white to black (not linear***REMOVED***
      Oranges   white, orange, dark brown
      OrRd      white, orange, dark red
      PuBu      white, light purple, dark blue
      PuBuGn    white, light purple, dark green
      PuRd      white, light purple, dark red
      Purples   white to dark purple
      RdPu      white, pink, dark purple
      Reds      white to dark red
      YlGn      light yellow, dark green
      YlGnBu    light yellow, light green, dark blue
      YlOrBr    light yellow, orange, dark brown
      YlOrRd    light yellow, orange, dark red
      ========  ====================================

    ColorBrewer Qualitative:

    (For plotting nominal data, :class:`ListedColormap` should be used,
    not :class:`LinearSegmentedColormap`.  Different sets of colors are
    recommended for different numbers of categories.  These continuous
    versions of the qualitative schemes may be removed or converted in the
    future.***REMOVED***

    * Accent
    * Dark2
    * Paired
    * Pastel1
    * Pastel2
    * Set1
    * Set2
    * Set3

    Other miscellaneous schemes:

      ============= =======================================================
      Colormap      Description
      ============= =======================================================
      afmhot        sequential black-orange-yellow-white blackbody
                    spectrum, commonly used in atomic force microscopy
      brg           blue-red-green
      bwr           diverging blue-white-red
      coolwarm      diverging blue-gray-red, meant to avoid issues with 3D
                    shading, color blindness, and ordering of colors [#***REMOVED***_
      CMRmap        "Default colormaps on color images often reproduce to
                    confusing grayscale images. The proposed colormap
                    maintains an aesthetically pleasing color image that
                    automatically reproduces to a monotonic grayscale with
                    discrete, quantifiable saturation levels." [#***REMOVED***_
      cubehelix     Unlike most other color schemes cubehelix was designed
                    by D.A. Green to be monotonically increasing in terms
                    of perceived brightness. Also, when printed on a black
                    and white postscript printer, the scheme results in a
                    greyscale with monotonically increasing brightness.
                    This color scheme is named cubehelix because the r,g,b
                    values produced can be visualised as a squashed helix
                    around the diagonal in the r,g,b color cube.
      gnuplot       gnuplot's traditional pm3d scheme
                    (black-blue-red-yellow***REMOVED***
      gnuplot2      sequential color printable as gray
                    (black-blue-violet-yellow-white***REMOVED***
      ocean         green-blue-white
      rainbow       spectral purple-blue-green-yellow-orange-red colormap
                    with diverging luminance
      seismic       diverging blue-white-red
      nipy_spectral black-purple-blue-green-yellow-red-white spectrum,
                    originally from the Neuroimaging in Python project
      terrain       mapmaker's colors, blue-green-yellow-brown-white,
                    originally from IGOR Pro
      ============= =======================================================

    The following colormaps are redundant and may be removed in future
    versions.  It's recommended to use the names in the descriptions
    instead, which produce identical output:

      =========  =======================================================
      Colormap   Description
      =========  =======================================================
      gist_gray  identical to *gray*
      gist_yarg  identical to *gray_r*
      binary     identical to *gray_r*
      spectral   identical to *nipy_spectral* [#***REMOVED***_
      =========  =======================================================

    .. rubric:: Footnotes

    .. [#***REMOVED*** Rainbow colormaps, ``jet`` in particular, are considered a poor
      choice for scientific visualization by many researchers: `Rainbow Color
      Map (Still***REMOVED*** Considered Harmful
      <http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=4118486>`_

    .. [#***REMOVED*** Resembles "BkBlAqGrYeOrReViWh200" from NCAR Command
      Language. See `Color Table Gallery
      <http://www.ncl.ucar.edu/Document/Graphics/color_table_gallery.shtml>`_

    .. [#***REMOVED*** See `Diverging Color Maps for Scientific Visualization
      <http://www.kennethmoreland.com/color-maps/>`_ by Kenneth Moreland.

    .. [#***REMOVED*** See `A Color Map for Effective Black-and-White Rendering of
      Color-Scale Images
      <http://www.mathworks.com/matlabcentral/fileexchange/2662-cmrmap-m>`_
      by Carey Rappaport

    .. [#***REMOVED*** Changed to distinguish from ColorBrewer's *Spectral* map.
      :func:`spectral` still works, but
      ``set_cmap('nipy_spectral'***REMOVED***`` is recommended for clarity.


    ***REMOVED***
    return sorted(cm.cmap_d.keys(***REMOVED******REMOVED***


def _setup_pyplot_info_docstrings(***REMOVED***:
    ***REMOVED***
    Generates the plotting and docstring.

    These must be done after the entire module is imported, so it is
    called from the end of this module, which is generated by
    boilerplate.py.
    ***REMOVED***
    # Generate the plotting docstring
    import re

    def pad(s, l***REMOVED***:
        ***REMOVED***Pad string *s* to length *l*.***REMOVED***
        if l < len(s***REMOVED***:
            return s[:l***REMOVED***
        return s + ' ' * (l - len(s***REMOVED******REMOVED***

    commands = get_plot_commands(***REMOVED***

    first_sentence = re.compile("(?:\s****REMOVED***.+?\.(?:\s+|$***REMOVED***", flags=re.DOTALL***REMOVED***

    # Collect the first sentence of the docstring for all of the
    # plotting commands.
    rows = [***REMOVED***
    max_name = 0
    max_summary = 0
    for name in commands:
        doc = globals(***REMOVED***[name***REMOVED***.__doc__
        summary = ''
        if doc is not None:
            match = first_sentence.match(doc***REMOVED***
            if match is not None:
                summary = match.group(0***REMOVED***.strip(***REMOVED***.replace('\n', ' '***REMOVED***
        name = '`%s`' % name
        rows.append([name, summary***REMOVED******REMOVED***
        max_name = max(max_name, len(name***REMOVED******REMOVED***
        max_summary = max(max_summary, len(summary***REMOVED******REMOVED***

    lines = [***REMOVED***
    sep = '=' * max_name + ' ' + '=' * max_summary
    lines.append(sep***REMOVED***
    lines.append(' '.join([pad("Function", max_name***REMOVED***,
                           pad("Description", max_summary***REMOVED******REMOVED******REMOVED******REMOVED***
    lines.append(sep***REMOVED***
    for name, summary in rows:
        lines.append(' '.join([pad(name, max_name***REMOVED***,
                               pad(summary, max_summary***REMOVED******REMOVED******REMOVED******REMOVED***
    lines.append(sep***REMOVED***

    plotting.__doc__ = '\n'.join(lines***REMOVED***

## Plotting part 1: manually generated functions and wrappers ##

def colorbar(mappable=None, cax=None, ax=None, **kw***REMOVED***:
    if mappable is None:
        mappable = gci(***REMOVED***
        if mappable is None:
            raise RuntimeError('No mappable was found to use for colorbar '
                               'creation. First define a mappable such as '
                               'an image (with imshow***REMOVED*** or a contour set ('
                               'with contourf***REMOVED***.'***REMOVED***
    if ax is None:
        ax = gca(***REMOVED***

    ret = gcf(***REMOVED***.colorbar(mappable, cax = cax, ax=ax, **kw***REMOVED***
    return ret
colorbar.__doc__ = matplotlib.colorbar.colorbar_doc


def clim(vmin=None, vmax=None***REMOVED***:
    ***REMOVED***
    Set the color limits of the current image.

    To apply clim to all axes images do::

      clim(0, 0.5***REMOVED***

    If either *vmin* or *vmax* is None, the image min/max respectively
    will be used for color scaling.

    If you want to set the clim of multiple images,
    use, for example::

      for im in gca(***REMOVED***.get_images(***REMOVED***:
          im.set_clim(0, 0.05***REMOVED***

    ***REMOVED***
    im = gci(***REMOVED***
    if im is None:
        raise RuntimeError('You must first define an image, e.g., with imshow'***REMOVED***

    im.set_clim(vmin, vmax***REMOVED***


def set_cmap(cmap***REMOVED***:
    ***REMOVED***
    Set the default colormap.  Applies to the current image if any.
    See help(colormaps***REMOVED*** for more information.

    *cmap* must be a :class:`~matplotlib.colors.Colormap` instance, or
    the name of a registered colormap.

    See :func:`matplotlib.cm.register_cmap` and
    :func:`matplotlib.cm.get_cmap`.
    ***REMOVED***
    cmap = cm.get_cmap(cmap***REMOVED***

    rc('image', cmap=cmap.name***REMOVED***
    im = gci(***REMOVED***

    if im is not None:
        im.set_cmap(cmap***REMOVED***



@docstring.copy_dedent(_imread***REMOVED***
def imread(*args, **kwargs***REMOVED***:
    return _imread(*args, **kwargs***REMOVED***


@docstring.copy_dedent(_imsave***REMOVED***
def imsave(*args, **kwargs***REMOVED***:
    return _imsave(*args, **kwargs***REMOVED***


def matshow(A, fignum=None, **kw***REMOVED***:
    ***REMOVED***
    Display an array as a matrix in a new figure window.

    The origin is set at the upper left hand corner and rows (first
    dimension of the array***REMOVED*** are displayed horizontally.  The aspect
    ratio of the figure window is that of the array, unless this would
    make an excessively short or narrow figure.

    Tick labels for the xaxis are placed on top.

    With the exception of *fignum*, keyword arguments are passed to
    :func:`~matplotlib.pyplot.imshow`.  You may set the *origin*
    kwarg to "lower" if you want the first row in the array to be
    at the bottom instead of the top.


    *fignum*: [ None | integer | False ***REMOVED***
      By default, :func:`matshow` creates a new figure window with
      automatic numbering.  If *fignum* is given as an integer, the
      created figure will use this figure number.  Because of how
      :func:`matshow` tries to set the figure aspect ratio to be the
      one of the array, if you provide the number of an already
      existing figure, strange things may happen.

      If *fignum* is *False* or 0, a new figure window will **NOT** be created.
    ***REMOVED***
    A = np.asanyarray(A***REMOVED***
    if fignum is False or fignum is 0:
        ax = gca(***REMOVED***
    else:
        # Extract actual aspect ratio of array and make appropriately sized figure
        fig = figure(fignum, figsize=figaspect(A***REMOVED******REMOVED***
        ax  = fig.add_axes([0.15, 0.09, 0.775, 0.775***REMOVED******REMOVED***

    im = ax.matshow(A, **kw***REMOVED***
    sci(im***REMOVED***

    return im


def polar(*args, **kwargs***REMOVED***:
    ***REMOVED***
    Make a polar plot.

    call signature::

      polar(theta, r, **kwargs***REMOVED***

    Multiple *theta*, *r* arguments are supported, with format
    strings, as in :func:`~matplotlib.pyplot.plot`.

    ***REMOVED***
    ax = gca(polar=True***REMOVED***
    ret = ax.plot(*args, **kwargs***REMOVED***
    return ret


def plotfile(fname, cols=(0,***REMOVED***, plotfuncs=None,
             comments='#', skiprows=0, checkrows=5, delimiter=',',
             names=None, subplots=True, newfig=True, **kwargs***REMOVED***:
    ***REMOVED***
    Plot the data in in a file.

    *cols* is a sequence of column identifiers to plot.  An identifier
    is either an int or a string.  If it is an int, it indicates the
    column number.  If it is a string, it indicates the column header.
    matplotlib will make column headers lower case, replace spaces with
    underscores, and remove all illegal characters; so ``'Adj Close*'``
    will have name ``'adj_close'``.

    - If len(*cols****REMOVED*** == 1, only that column will be plotted on the *y* axis.

    - If len(*cols****REMOVED*** > 1, the first element will be an identifier for
      data for the *x* axis and the remaining elements will be the
      column indexes for multiple subplots if *subplots* is *True*
      (the default***REMOVED***, or for lines in a single subplot if *subplots*
      is *False*.

    *plotfuncs*, if not *None*, is a dictionary mapping identifier to
    an :class:`~matplotlib.axes.Axes` plotting function as a string.
    Default is 'plot', other choices are 'semilogy', 'fill', 'bar',
    etc.  You must use the same type of identifier in the *cols*
    vector as you use in the *plotfuncs* dictionary, e.g., integer
    column numbers in both or column names in both. If *subplots*
    is *False*, then including any function such as 'semilogy'
    that changes the axis scaling will set the scaling for all
    columns.

    *comments*, *skiprows*, *checkrows*, *delimiter*, and *names*
    are all passed on to :func:`matplotlib.pylab.csv2rec` to
    load the data into a record array.

    If *newfig* is *True*, the plot always will be made in a new figure;
    if *False*, it will be made in the current figure if one exists,
    else in a new figure.

    kwargs are passed on to plotting functions.

    Example usage::

      # plot the 2nd and 4th column against the 1st in two subplots
      plotfile(fname, (0,1,3***REMOVED******REMOVED***

      # plot using column names; specify an alternate plot type for volume
      plotfile(fname, ('date', 'volume', 'adj_close'***REMOVED***,
                                    plotfuncs={'volume': 'semilogy'***REMOVED******REMOVED***

    Note: plotfile is intended as a convenience for quickly plotting
    data from flat files; it is not intended as an alternative
    interface to general plotting with pyplot or matplotlib.
    ***REMOVED***

    if newfig:
        fig = figure(***REMOVED***
    else:
        fig = gcf(***REMOVED***

    if len(cols***REMOVED***<1:
        raise ValueError('must have at least one column of data'***REMOVED***

    if plotfuncs is None:
        plotfuncs = dict(***REMOVED***
    r = mlab.csv2rec(fname, comments=comments, skiprows=skiprows,
                     checkrows=checkrows, delimiter=delimiter, names=names***REMOVED***

    def getname_val(identifier***REMOVED***:
        'return the name and column data for identifier'
        if is_string_like(identifier***REMOVED***:
            return identifier, r[identifier***REMOVED***
        elif is_numlike(identifier***REMOVED***:
            name = r.dtype.names[int(identifier***REMOVED******REMOVED***
            return name, r[name***REMOVED***
        else:
            raise TypeError('identifier must be a string or integer'***REMOVED***

    xname, x = getname_val(cols[0***REMOVED******REMOVED***
    ynamelist = [***REMOVED***

    if len(cols***REMOVED***==1:
        ax1 = fig.add_subplot(1,1,1***REMOVED***
        funcname = plotfuncs.get(cols[0***REMOVED***, 'plot'***REMOVED***
        func = getattr(ax1, funcname***REMOVED***
        func(x, **kwargs***REMOVED***
        ax1.set_ylabel(xname***REMOVED***
    else:
        N = len(cols***REMOVED***
        for i in range(1,N***REMOVED***:
            if subplots:
                if i==1:
                    ax = ax1 = fig.add_subplot(N-1,1,i***REMOVED***
                else:
                    ax = fig.add_subplot(N-1,1,i, sharex=ax1***REMOVED***
            elif i==1:
                ax = fig.add_subplot(1,1,1***REMOVED***

            yname, y = getname_val(cols[i***REMOVED******REMOVED***
            ynamelist.append(yname***REMOVED***

            funcname = plotfuncs.get(cols[i***REMOVED***, 'plot'***REMOVED***
            func = getattr(ax, funcname***REMOVED***

            func(x, y, **kwargs***REMOVED***
            if subplots:
                ax.set_ylabel(yname***REMOVED***
            if ax.is_last_row(***REMOVED***:
                ax.set_xlabel(xname***REMOVED***
            else:
                ax.set_xlabel(''***REMOVED***

    if not subplots:
        ax.legend(ynamelist, loc='best'***REMOVED***

    if xname=='date':
        fig.autofmt_xdate(***REMOVED***


def _autogen_docstring(base***REMOVED***:
    ***REMOVED***Autogenerated wrappers will get their docstring from a base function
    with an addendum.***REMOVED***
    msg = "\n\nAdditional kwargs: hold = [True|False***REMOVED*** overrides default hold state"
    addendum = docstring.Appender(msg, '\n\n'***REMOVED***
    return lambda func: addendum(docstring.copy_dedent(base***REMOVED***(func***REMOVED******REMOVED***

# This function cannot be generated by boilerplate.py because it may
# return an image or a line.
@_autogen_docstring(Axes.spy***REMOVED***
def spy(Z, precision=0, marker=None, markersize=None, aspect='equal', hold=None, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***

    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.spy(Z, precision, marker, markersize, aspect, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***
    if isinstance(ret, cm.ScalarMappable***REMOVED***:
        sci(ret***REMOVED***
    return ret

# just to be safe.  Interactive mode can be turned on without
# calling `plt.ion(***REMOVED***` so register it again here.
# This is safe because multiple calls to `install_repl_displayhook`
# are no-ops and the registered function respect `mpl.is_interactive(***REMOVED***`
# to determine if they should trigger a draw.
install_repl_displayhook(***REMOVED***

################# REMAINING CONTENT GENERATED BY boilerplate.py ##############


# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.acorr***REMOVED***
def acorr(x, hold=None, data=None, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***

    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.acorr(x, data=data, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.angle_spectrum***REMOVED***
def angle_spectrum(x, Fs=None, Fc=None, window=None, pad_to=None, sides=None,
                   hold=None, data=None, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***

    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.angle_spectrum(x, Fs=Fs, Fc=Fc, window=window, pad_to=pad_to,
                                sides=sides, data=data, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.arrow***REMOVED***
def arrow(x, y, dx, dy, hold=None, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***

    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.arrow(x, y, dx, dy, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.axhline***REMOVED***
def axhline(y=0, xmin=0, xmax=1, hold=None, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***

    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.axhline(y=y, xmin=xmin, xmax=xmax, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.axhspan***REMOVED***
def axhspan(ymin, ymax, xmin=0, xmax=1, hold=None, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***

    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.axhspan(ymin, ymax, xmin=xmin, xmax=xmax, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.axvline***REMOVED***
def axvline(x=0, ymin=0, ymax=1, hold=None, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***

    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.axvline(x=x, ymin=ymin, ymax=ymax, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.axvspan***REMOVED***
def axvspan(xmin, xmax, ymin=0, ymax=1, hold=None, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***

    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.axvspan(xmin, xmax, ymin=ymin, ymax=ymax, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.bar***REMOVED***
def bar(left, height, width=0.8, bottom=None, hold=None, data=None, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***

    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.bar(left, height, width=width, bottom=bottom, data=data,
                     **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.barh***REMOVED***
def barh(bottom, width, height=0.8, left=None, hold=None, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***

    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.barh(bottom, width, height=height, left=left, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.broken_barh***REMOVED***
def broken_barh(xranges, yrange, hold=None, data=None, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***

    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.broken_barh(xranges, yrange, data=data, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.boxplot***REMOVED***
def boxplot(x, notch=None, sym=None, vert=None, whis=None, positions=None,
            widths=None, patch_artist=None, bootstrap=None, usermedians=None,
            conf_intervals=None, meanline=None, showmeans=None, showcaps=None,
            showbox=None, showfliers=None, boxprops=None, labels=None,
            flierprops=None, medianprops=None, meanprops=None, capprops=None,
            whiskerprops=None, manage_xticks=True, hold=None, data=None***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***

    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.boxplot(x, notch=notch, sym=sym, vert=vert, whis=whis,
                         positions=positions, widths=widths,
                         patch_artist=patch_artist, bootstrap=bootstrap,
                         usermedians=usermedians,
                         conf_intervals=conf_intervals, meanline=meanline,
                         showmeans=showmeans, showcaps=showcaps,
                         showbox=showbox, showfliers=showfliers,
                         boxprops=boxprops, labels=labels,
                         flierprops=flierprops, medianprops=medianprops,
                         meanprops=meanprops, capprops=capprops,
                         whiskerprops=whiskerprops,
                         manage_xticks=manage_xticks, data=data***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.cohere***REMOVED***
def cohere(x, y, NFFT=256, Fs=2, Fc=0, detrend=mlab.detrend_none,
           window=mlab.window_hanning, noverlap=0, pad_to=None, sides='default',
           scale_by_freq=None, hold=None, data=None, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***

    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.cohere(x, y, NFFT=NFFT, Fs=Fs, Fc=Fc, detrend=detrend,
                        window=window, noverlap=noverlap, pad_to=pad_to,
                        sides=sides, scale_by_freq=scale_by_freq, data=data,
                        **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.clabel***REMOVED***
def clabel(CS, *args, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***
    hold = kwargs.pop('hold', None***REMOVED***
    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.clabel(CS, *args, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.contour***REMOVED***
def contour(*args, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***
    hold = kwargs.pop('hold', None***REMOVED***
    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.contour(*args, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***
    if ret._A is not None: sci(ret***REMOVED***
    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.contourf***REMOVED***
def contourf(*args, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***
    hold = kwargs.pop('hold', None***REMOVED***
    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.contourf(*args, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***
    if ret._A is not None: sci(ret***REMOVED***
    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.csd***REMOVED***
def csd(x, y, NFFT=None, Fs=None, Fc=None, detrend=None, window=None,
        noverlap=None, pad_to=None, sides=None, scale_by_freq=None,
        return_line=None, hold=None, data=None, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***

    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.csd(x, y, NFFT=NFFT, Fs=Fs, Fc=Fc, detrend=detrend,
                     window=window, noverlap=noverlap, pad_to=pad_to,
                     sides=sides, scale_by_freq=scale_by_freq,
                     return_line=return_line, data=data, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.errorbar***REMOVED***
def errorbar(x, y, yerr=None, xerr=None, fmt='', ecolor=None, elinewidth=None,
             capsize=None, barsabove=False, lolims=False, uplims=False,
             xlolims=False, xuplims=False, errorevery=1, capthick=None,
             hold=None, data=None, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***

    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.errorbar(x, y, yerr=yerr, xerr=xerr, fmt=fmt, ecolor=ecolor,
                          elinewidth=elinewidth, capsize=capsize,
                          barsabove=barsabove, lolims=lolims, uplims=uplims,
                          xlolims=xlolims, xuplims=xuplims,
                          errorevery=errorevery, capthick=capthick, data=data,
                          **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.eventplot***REMOVED***
def eventplot(positions, orientation='horizontal', lineoffsets=1, linelengths=1,
              linewidths=None, colors=None, linestyles='solid', hold=None,
              data=None, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***

    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.eventplot(positions, orientation=orientation,
                           lineoffsets=lineoffsets, linelengths=linelengths,
                           linewidths=linewidths, colors=colors,
                           linestyles=linestyles, data=data, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.fill***REMOVED***
def fill(*args, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***
    hold = kwargs.pop('hold', None***REMOVED***
    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.fill(*args, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.fill_between***REMOVED***
def fill_between(x, y1, y2=0, where=None, interpolate=False, step=None,
                 hold=None, data=None, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***

    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.fill_between(x, y1, y2=y2, where=where,
                              interpolate=interpolate, step=step, data=data,
                              **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.fill_betweenx***REMOVED***
def fill_betweenx(y, x1, x2=0, where=None, step=None, hold=None, data=None,
                  **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***

    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.fill_betweenx(y, x1, x2=x2, where=where, step=step, data=data,
                               **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.hexbin***REMOVED***
def hexbin(x, y, C=None, gridsize=100, bins=None, xscale='linear',
           yscale='linear', extent=None, cmap=None, norm=None, vmin=None,
           vmax=None, alpha=None, linewidths=None, edgecolors='none',
           reduce_C_function=np.mean, mincnt=None, marginals=False, hold=None,
           data=None, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***

    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.hexbin(x, y, C=C, gridsize=gridsize, bins=bins, xscale=xscale,
                        yscale=yscale, extent=extent, cmap=cmap, norm=norm,
                        vmin=vmin, vmax=vmax, alpha=alpha,
                        linewidths=linewidths, edgecolors=edgecolors,
                        reduce_C_function=reduce_C_function, mincnt=mincnt,
                        marginals=marginals, data=data, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***
    sci(ret***REMOVED***
    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.hist***REMOVED***
def hist(x, bins=10, range=None, normed=False, weights=None, cumulative=False,
         bottom=None, histtype='bar', align='mid', orientation='vertical',
         rwidth=None, log=False, color=None, label=None, stacked=False,
         hold=None, data=None, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***

    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.hist(x, bins=bins, range=range, normed=normed,
                      weights=weights, cumulative=cumulative, bottom=bottom,
                      histtype=histtype, align=align, orientation=orientation,
                      rwidth=rwidth, log=log, color=color, label=label,
                      stacked=stacked, data=data, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.hist2d***REMOVED***
def hist2d(x, y, bins=10, range=None, normed=False, weights=None, cmin=None,
           cmax=None, hold=None, data=None, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***

    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.hist2d(x, y, bins=bins, range=range, normed=normed,
                        weights=weights, cmin=cmin, cmax=cmax, data=data,
                        **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***
    sci(ret[-1***REMOVED******REMOVED***
    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.hlines***REMOVED***
def hlines(y, xmin, xmax, colors='k', linestyles='solid', label='', hold=None,
           data=None, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***

    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.hlines(y, xmin, xmax, colors=colors, linestyles=linestyles,
                        label=label, data=data, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.imshow***REMOVED***
def imshow(X, cmap=None, norm=None, aspect=None, interpolation=None, alpha=None,
           vmin=None, vmax=None, origin=None, extent=None, shape=None,
           filternorm=1, filterrad=4.0, imlim=None, resample=None, url=None,
           hold=None, data=None, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***

    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.imshow(X, cmap=cmap, norm=norm, aspect=aspect,
                        interpolation=interpolation, alpha=alpha, vmin=vmin,
                        vmax=vmax, origin=origin, extent=extent, shape=shape,
                        filternorm=filternorm, filterrad=filterrad,
                        imlim=imlim, resample=resample, url=url, data=data,
                        **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***
    sci(ret***REMOVED***
    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.loglog***REMOVED***
def loglog(*args, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***
    hold = kwargs.pop('hold', None***REMOVED***
    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.loglog(*args, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.magnitude_spectrum***REMOVED***
def magnitude_spectrum(x, Fs=None, Fc=None, window=None, pad_to=None,
                       sides=None, scale=None, hold=None, data=None, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***

    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.magnitude_spectrum(x, Fs=Fs, Fc=Fc, window=window,
                                    pad_to=pad_to, sides=sides, scale=scale,
                                    data=data, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.pcolor***REMOVED***
def pcolor(*args, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***
    hold = kwargs.pop('hold', None***REMOVED***
    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.pcolor(*args, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***
    sci(ret***REMOVED***
    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.pcolormesh***REMOVED***
def pcolormesh(*args, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***
    hold = kwargs.pop('hold', None***REMOVED***
    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.pcolormesh(*args, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***
    sci(ret***REMOVED***
    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.phase_spectrum***REMOVED***
def phase_spectrum(x, Fs=None, Fc=None, window=None, pad_to=None, sides=None,
                   hold=None, data=None, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***

    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.phase_spectrum(x, Fs=Fs, Fc=Fc, window=window, pad_to=pad_to,
                                sides=sides, data=data, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.pie***REMOVED***
def pie(x, explode=None, labels=None, colors=None, autopct=None,
        pctdistance=0.6, shadow=False, labeldistance=1.1, startangle=None,
        radius=None, counterclock=True, wedgeprops=None, textprops=None,
        center=(0, 0***REMOVED***, frame=False, hold=None, data=None***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***

    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.pie(x, explode=explode, labels=labels, colors=colors,
                     autopct=autopct, pctdistance=pctdistance, shadow=shadow,
                     labeldistance=labeldistance, startangle=startangle,
                     radius=radius, counterclock=counterclock,
                     wedgeprops=wedgeprops, textprops=textprops, center=center,
                     frame=frame, data=data***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.plot***REMOVED***
def plot(*args, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***
    hold = kwargs.pop('hold', None***REMOVED***
    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.plot(*args, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.plot_date***REMOVED***
def plot_date(x, y, fmt='o', tz=None, xdate=True, ydate=False, hold=None,
              data=None, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***

    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.plot_date(x, y, fmt=fmt, tz=tz, xdate=xdate, ydate=ydate,
                           data=data, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.psd***REMOVED***
def psd(x, NFFT=None, Fs=None, Fc=None, detrend=None, window=None,
        noverlap=None, pad_to=None, sides=None, scale_by_freq=None,
        return_line=None, hold=None, data=None, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***

    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.psd(x, NFFT=NFFT, Fs=Fs, Fc=Fc, detrend=detrend,
                     window=window, noverlap=noverlap, pad_to=pad_to,
                     sides=sides, scale_by_freq=scale_by_freq,
                     return_line=return_line, data=data, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.quiver***REMOVED***
def quiver(*args, **kw***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***
    hold = kw.pop('hold', None***REMOVED***
    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.quiver(*args, **kw***REMOVED***
    finally:
        ax.hold(washold***REMOVED***
    sci(ret***REMOVED***
    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.quiverkey***REMOVED***
def quiverkey(*args, **kw***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***
    hold = kw.pop('hold', None***REMOVED***
    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.quiverkey(*args, **kw***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.scatter***REMOVED***
def scatter(x, y, s=20, c=None, marker='o', cmap=None, norm=None, vmin=None,
            vmax=None, alpha=None, linewidths=None, verts=None, edgecolors=None,
            hold=None, data=None, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***

    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.scatter(x, y, s=s, c=c, marker=marker, cmap=cmap, norm=norm,
                         vmin=vmin, vmax=vmax, alpha=alpha,
                         linewidths=linewidths, verts=verts,
                         edgecolors=edgecolors, data=data, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***
    sci(ret***REMOVED***
    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.semilogx***REMOVED***
def semilogx(*args, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***
    hold = kwargs.pop('hold', None***REMOVED***
    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.semilogx(*args, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.semilogy***REMOVED***
def semilogy(*args, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***
    hold = kwargs.pop('hold', None***REMOVED***
    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.semilogy(*args, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.specgram***REMOVED***
def specgram(x, NFFT=None, Fs=None, Fc=None, detrend=None, window=None,
             noverlap=None, cmap=None, xextent=None, pad_to=None, sides=None,
             scale_by_freq=None, mode=None, scale=None, vmin=None, vmax=None,
             hold=None, data=None, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***

    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.specgram(x, NFFT=NFFT, Fs=Fs, Fc=Fc, detrend=detrend,
                          window=window, noverlap=noverlap, cmap=cmap,
                          xextent=xextent, pad_to=pad_to, sides=sides,
                          scale_by_freq=scale_by_freq, mode=mode, scale=scale,
                          vmin=vmin, vmax=vmax, data=data, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***
    sci(ret[-1***REMOVED******REMOVED***
    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.stackplot***REMOVED***
def stackplot(x, *args, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***
    hold = kwargs.pop('hold', None***REMOVED***
    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.stackplot(x, *args, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.stem***REMOVED***
def stem(*args, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***
    hold = kwargs.pop('hold', None***REMOVED***
    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.stem(*args, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.step***REMOVED***
def step(x, y, *args, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***
    hold = kwargs.pop('hold', None***REMOVED***
    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.step(x, y, *args, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.streamplot***REMOVED***
def streamplot(x, y, u, v, density=1, linewidth=None, color=None, cmap=None,
               norm=None, arrowsize=1, arrowstyle='-|>', minlength=0.1,
               transform=None, zorder=1, start_points=None, hold=None, data=None***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***

    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.streamplot(x, y, u, v, density=density, linewidth=linewidth,
                            color=color, cmap=cmap, norm=norm,
                            arrowsize=arrowsize, arrowstyle=arrowstyle,
                            minlength=minlength, transform=transform,
                            zorder=zorder, start_points=start_points, data=data***REMOVED***
    finally:
        ax.hold(washold***REMOVED***
    sci(ret.lines***REMOVED***
    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.tricontour***REMOVED***
def tricontour(*args, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***
    hold = kwargs.pop('hold', None***REMOVED***
    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.tricontour(*args, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***
    if ret._A is not None: sci(ret***REMOVED***
    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.tricontourf***REMOVED***
def tricontourf(*args, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***
    hold = kwargs.pop('hold', None***REMOVED***
    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.tricontourf(*args, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***
    if ret._A is not None: sci(ret***REMOVED***
    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.tripcolor***REMOVED***
def tripcolor(*args, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***
    hold = kwargs.pop('hold', None***REMOVED***
    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.tripcolor(*args, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***
    sci(ret***REMOVED***
    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.triplot***REMOVED***
def triplot(*args, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***
    hold = kwargs.pop('hold', None***REMOVED***
    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.triplot(*args, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.violinplot***REMOVED***
def violinplot(dataset, positions=None, vert=True, widths=0.5, showmeans=False,
               showextrema=True, showmedians=False, points=100, bw_method=None,
               hold=None, data=None***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***

    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.violinplot(dataset, positions=positions, vert=vert,
                            widths=widths, showmeans=showmeans,
                            showextrema=showextrema, showmedians=showmedians,
                            points=points, bw_method=bw_method, data=data***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.vlines***REMOVED***
def vlines(x, ymin, ymax, colors='k', linestyles='solid', label='', hold=None,
           data=None, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***

    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.vlines(x, ymin, ymax, colors=colors, linestyles=linestyles,
                        label=label, data=data, **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.xcorr***REMOVED***
def xcorr(x, y, normed=True, detrend=mlab.detrend_none, usevlines=True,
          maxlags=10, hold=None, data=None, **kwargs***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***

    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.xcorr(x, y, normed=normed, detrend=detrend,
                       usevlines=usevlines, maxlags=maxlags, data=data,
                       **kwargs***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@_autogen_docstring(Axes.barbs***REMOVED***
def barbs(*args, **kw***REMOVED***:
    ax = gca(***REMOVED***
    # allow callers to override the hold state by passing hold=True|False
    washold = ax.ishold(***REMOVED***
    hold = kw.pop('hold', None***REMOVED***
    if hold is not None:
        ax.hold(hold***REMOVED***
    ***REMOVED***
        ret = ax.barbs(*args, **kw***REMOVED***
    finally:
        ax.hold(washold***REMOVED***

    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@docstring.copy_dedent(Axes.cla***REMOVED***
def cla(***REMOVED***:
    ret = gca(***REMOVED***.cla(***REMOVED***
    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@docstring.copy_dedent(Axes.grid***REMOVED***
def grid(b=None, which='major', axis='both', **kwargs***REMOVED***:
    ret = gca(***REMOVED***.grid(b=b, which=which, axis=axis, **kwargs***REMOVED***
    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@docstring.copy_dedent(Axes.legend***REMOVED***
def legend(*args, **kwargs***REMOVED***:
    ret = gca(***REMOVED***.legend(*args, **kwargs***REMOVED***
    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@docstring.copy_dedent(Axes.table***REMOVED***
def table(**kwargs***REMOVED***:
    ret = gca(***REMOVED***.table(**kwargs***REMOVED***
    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@docstring.copy_dedent(Axes.text***REMOVED***
def text(x, y, s, fontdict=None, withdash=False, **kwargs***REMOVED***:
    ret = gca(***REMOVED***.text(x, y, s, fontdict=fontdict, withdash=withdash, **kwargs***REMOVED***
    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@docstring.copy_dedent(Axes.annotate***REMOVED***
def annotate(*args, **kwargs***REMOVED***:
    ret = gca(***REMOVED***.annotate(*args, **kwargs***REMOVED***
    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@docstring.copy_dedent(Axes.ticklabel_format***REMOVED***
def ticklabel_format(**kwargs***REMOVED***:
    ret = gca(***REMOVED***.ticklabel_format(**kwargs***REMOVED***
    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@docstring.copy_dedent(Axes.locator_params***REMOVED***
def locator_params(axis='both', tight=None, **kwargs***REMOVED***:
    ret = gca(***REMOVED***.locator_params(axis=axis, tight=tight, **kwargs***REMOVED***
    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@docstring.copy_dedent(Axes.tick_params***REMOVED***
def tick_params(axis='both', **kwargs***REMOVED***:
    ret = gca(***REMOVED***.tick_params(axis=axis, **kwargs***REMOVED***
    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@docstring.copy_dedent(Axes.margins***REMOVED***
def margins(*args, **kw***REMOVED***:
    ret = gca(***REMOVED***.margins(*args, **kw***REMOVED***
    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
@docstring.copy_dedent(Axes.autoscale***REMOVED***
def autoscale(enable=True, axis='both', tight=None***REMOVED***:
    ret = gca(***REMOVED***.autoscale(enable=enable, axis=axis, tight=tight***REMOVED***
    return ret

# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
def autumn(***REMOVED***:
    '''
    set the default colormap to autumn and apply to current image if any.
    See help(colormaps***REMOVED*** for more information
    '''
    rc('image', cmap='autumn'***REMOVED***
    im = gci(***REMOVED***

    if im is not None:
        im.set_cmap(cm.autumn***REMOVED***


# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
def bone(***REMOVED***:
    '''
    set the default colormap to bone and apply to current image if any.
    See help(colormaps***REMOVED*** for more information
    '''
    rc('image', cmap='bone'***REMOVED***
    im = gci(***REMOVED***

    if im is not None:
        im.set_cmap(cm.bone***REMOVED***


# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
def cool(***REMOVED***:
    '''
    set the default colormap to cool and apply to current image if any.
    See help(colormaps***REMOVED*** for more information
    '''
    rc('image', cmap='cool'***REMOVED***
    im = gci(***REMOVED***

    if im is not None:
        im.set_cmap(cm.cool***REMOVED***


# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
def copper(***REMOVED***:
    '''
    set the default colormap to copper and apply to current image if any.
    See help(colormaps***REMOVED*** for more information
    '''
    rc('image', cmap='copper'***REMOVED***
    im = gci(***REMOVED***

    if im is not None:
        im.set_cmap(cm.copper***REMOVED***


# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
def flag(***REMOVED***:
    '''
    set the default colormap to flag and apply to current image if any.
    See help(colormaps***REMOVED*** for more information
    '''
    rc('image', cmap='flag'***REMOVED***
    im = gci(***REMOVED***

    if im is not None:
        im.set_cmap(cm.flag***REMOVED***


# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
def gray(***REMOVED***:
    '''
    set the default colormap to gray and apply to current image if any.
    See help(colormaps***REMOVED*** for more information
    '''
    rc('image', cmap='gray'***REMOVED***
    im = gci(***REMOVED***

    if im is not None:
        im.set_cmap(cm.gray***REMOVED***


# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
def hot(***REMOVED***:
    '''
    set the default colormap to hot and apply to current image if any.
    See help(colormaps***REMOVED*** for more information
    '''
    rc('image', cmap='hot'***REMOVED***
    im = gci(***REMOVED***

    if im is not None:
        im.set_cmap(cm.hot***REMOVED***


# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
def hsv(***REMOVED***:
    '''
    set the default colormap to hsv and apply to current image if any.
    See help(colormaps***REMOVED*** for more information
    '''
    rc('image', cmap='hsv'***REMOVED***
    im = gci(***REMOVED***

    if im is not None:
        im.set_cmap(cm.hsv***REMOVED***


# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
def jet(***REMOVED***:
    '''
    set the default colormap to jet and apply to current image if any.
    See help(colormaps***REMOVED*** for more information
    '''
    rc('image', cmap='jet'***REMOVED***
    im = gci(***REMOVED***

    if im is not None:
        im.set_cmap(cm.jet***REMOVED***


# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
def pink(***REMOVED***:
    '''
    set the default colormap to pink and apply to current image if any.
    See help(colormaps***REMOVED*** for more information
    '''
    rc('image', cmap='pink'***REMOVED***
    im = gci(***REMOVED***

    if im is not None:
        im.set_cmap(cm.pink***REMOVED***


# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
def prism(***REMOVED***:
    '''
    set the default colormap to prism and apply to current image if any.
    See help(colormaps***REMOVED*** for more information
    '''
    rc('image', cmap='prism'***REMOVED***
    im = gci(***REMOVED***

    if im is not None:
        im.set_cmap(cm.prism***REMOVED***


# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
def spring(***REMOVED***:
    '''
    set the default colormap to spring and apply to current image if any.
    See help(colormaps***REMOVED*** for more information
    '''
    rc('image', cmap='spring'***REMOVED***
    im = gci(***REMOVED***

    if im is not None:
        im.set_cmap(cm.spring***REMOVED***


# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
def summer(***REMOVED***:
    '''
    set the default colormap to summer and apply to current image if any.
    See help(colormaps***REMOVED*** for more information
    '''
    rc('image', cmap='summer'***REMOVED***
    im = gci(***REMOVED***

    if im is not None:
        im.set_cmap(cm.summer***REMOVED***


# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
def winter(***REMOVED***:
    '''
    set the default colormap to winter and apply to current image if any.
    See help(colormaps***REMOVED*** for more information
    '''
    rc('image', cmap='winter'***REMOVED***
    im = gci(***REMOVED***

    if im is not None:
        im.set_cmap(cm.winter***REMOVED***


# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
def spectral(***REMOVED***:
    '''
    set the default colormap to spectral and apply to current image if any.
    See help(colormaps***REMOVED*** for more information
    '''
    rc('image', cmap='spectral'***REMOVED***
    im = gci(***REMOVED***

    if im is not None:
        im.set_cmap(cm.spectral***REMOVED***


# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
def magma(***REMOVED***:
    '''
    set the default colormap to magma and apply to current image if any.
    See help(colormaps***REMOVED*** for more information
    '''
    rc('image', cmap='magma'***REMOVED***
    im = gci(***REMOVED***

    if im is not None:
        im.set_cmap(cm.magma***REMOVED***


# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
def inferno(***REMOVED***:
    '''
    set the default colormap to inferno and apply to current image if any.
    See help(colormaps***REMOVED*** for more information
    '''
    rc('image', cmap='inferno'***REMOVED***
    im = gci(***REMOVED***

    if im is not None:
        im.set_cmap(cm.inferno***REMOVED***


# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
def plasma(***REMOVED***:
    '''
    set the default colormap to plasma and apply to current image if any.
    See help(colormaps***REMOVED*** for more information
    '''
    rc('image', cmap='plasma'***REMOVED***
    im = gci(***REMOVED***

    if im is not None:
        im.set_cmap(cm.plasma***REMOVED***


# This function was autogenerated by boilerplate.py.  Do not edit as
# changes will be lost
def viridis(***REMOVED***:
    '''
    set the default colormap to viridis and apply to current image if any.
    See help(colormaps***REMOVED*** for more information
    '''
    rc('image', cmap='viridis'***REMOVED***
    im = gci(***REMOVED***

    if im is not None:
        im.set_cmap(cm.viridis***REMOVED***

_setup_pyplot_info_docstrings(***REMOVED***
