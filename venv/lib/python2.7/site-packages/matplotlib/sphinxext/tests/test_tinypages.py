***REMOVED*** Tests for tinypages build using sphinx extensions ***REMOVED***

import shutil
import tempfile

from os.path import (join as pjoin, dirname, isdir***REMOVED***

from subprocess import call, Popen, PIPE

from nose import SkipTest
from nose.tools import assert_true

HERE = dirname(__file__***REMOVED***
TINY_PAGES = pjoin(HERE, 'tinypages'***REMOVED***


def setup(***REMOVED***:
    # Check we have the sphinx-build command
    ***REMOVED***
        ret = call(['sphinx-build', '--help'***REMOVED***, stdout=PIPE, stderr=PIPE***REMOVED***
    except OSError:
        raise SkipTest('Need sphinx-build on path for these tests'***REMOVED***
    if ret != 0:
        raise RuntimeError('sphinx-build does not return 0'***REMOVED***


def file_same(file1, file2***REMOVED***:
    with open(file1, 'rb'***REMOVED*** as fobj:
        contents1 = fobj.read(***REMOVED***
    with open(file2, 'rb'***REMOVED*** as fobj:
        contents2 = fobj.read(***REMOVED***
    return contents1 == contents2


class TestTinyPages(object***REMOVED***:
    # Test build and output of tinypages project

    @classmethod
    def setup_class(cls***REMOVED***:
        cls.page_build = tempfile.mkdtemp(***REMOVED***
        ***REMOVED***
            cls.html_dir = pjoin(cls.page_build, 'html'***REMOVED***
            cls.doctree_dir = pjoin(cls.page_build, 'doctrees'***REMOVED***
            # Build the pages with warnings turned into errors
            cmd = ['sphinx-build', '-W', '-b', 'html',
                   '-d', cls.doctree_dir,
                   TINY_PAGES,
                   cls.html_dir***REMOVED***
            proc = Popen(cmd, stdout=PIPE, stderr=PIPE***REMOVED***
            out, err = proc.communicate(***REMOVED***
        except Exception as e:
            shutil.rmtree(cls.page_build***REMOVED***
            raise e
        if proc.returncode != 0:
            shutil.rmtree(cls.page_build***REMOVED***
            raise RuntimeError('sphinx-build failed with stdout:\n'
                               '{0***REMOVED***\nstderr:\n{1***REMOVED***\n'.format(
                                    out, err***REMOVED******REMOVED***

    @classmethod
    def teardown_class(cls***REMOVED***:
        shutil.rmtree(cls.page_build***REMOVED***

    def test_some_plots(self***REMOVED***:
        assert_true(isdir(self.html_dir***REMOVED******REMOVED***

        def plot_file(num***REMOVED***:
            return pjoin(self.html_dir, 'some_plots-{0***REMOVED***.png'.format(num***REMOVED******REMOVED***

        range_10, range_6, range_4 = [plot_file(i***REMOVED*** for i in range(1, 4***REMOVED******REMOVED***
        # Plot 5 is range(6***REMOVED*** plot
        assert_true(file_same(range_6, plot_file(5***REMOVED******REMOVED******REMOVED***
        # Plot 7 is range(4***REMOVED*** plot
        assert_true(file_same(range_4, plot_file(7***REMOVED******REMOVED******REMOVED***
        # Plot 11 is range(10***REMOVED*** plot
        assert_true(file_same(range_10, plot_file(11***REMOVED******REMOVED******REMOVED***
        # Plot 12 uses the old range(10***REMOVED*** figure and the new range(6***REMOVED*** figure
        assert_true(file_same(range_10, plot_file('12_00'***REMOVED******REMOVED******REMOVED***
        assert_true(file_same(range_6, plot_file('12_01'***REMOVED******REMOVED******REMOVED***
        # Plot 13 shows close-figs in action
        assert_true(file_same(range_4, plot_file(13***REMOVED******REMOVED******REMOVED***
        # Plot 14 has included source
        with open(pjoin(self.html_dir, 'some_plots.html'***REMOVED***, 'rt'***REMOVED*** as fobj:
            html_contents = fobj.read(***REMOVED***
        assert_true('# Only a comment' in html_contents***REMOVED***
