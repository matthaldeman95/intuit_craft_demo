from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six

***REMOVED***
import sys
from hashlib import md5

from docutils import nodes
from docutils.parsers.rst import directives
import warnings

from matplotlib import rcParams
from matplotlib.mathtext import MathTextParser
rcParams['mathtext.fontset'***REMOVED*** = 'cm'
mathtext_parser = MathTextParser("Bitmap"***REMOVED***

# Define LaTeX math node:
class latex_math(nodes.General, nodes.Element***REMOVED***:
    pass

def fontset_choice(arg***REMOVED***:
    return directives.choice(arg, ['cm', 'stix', 'stixsans'***REMOVED******REMOVED***

options_spec = {'fontset': fontset_choice***REMOVED***

def math_role(role, rawtext, text, lineno, inliner,
              options={***REMOVED***, content=[***REMOVED******REMOVED***:
    i = rawtext.find('`'***REMOVED***
    latex = rawtext[i+1:-1***REMOVED***
    node = latex_math(rawtext***REMOVED***
    node['latex'***REMOVED*** = latex
    node['fontset'***REMOVED*** = options.get('fontset', 'cm'***REMOVED***
    return [node***REMOVED***, [***REMOVED***
math_role.options = options_spec

def math_directive(name, arguments, options, content, lineno,
                   content_offset, block_text, state, state_machine***REMOVED***:
    latex = ''.join(content***REMOVED***
    node = latex_math(block_text***REMOVED***
    node['latex'***REMOVED*** = latex
    node['fontset'***REMOVED*** = options.get('fontset', 'cm'***REMOVED***
    return [node***REMOVED***

# This uses mathtext to render the expression
def latex2png(latex, filename, fontset='cm'***REMOVED***:
    latex = "$%s$" % latex
    orig_fontset = rcParams['mathtext.fontset'***REMOVED***
    rcParams['mathtext.fontset'***REMOVED*** = fontset
    if os.path.exists(filename***REMOVED***:
        depth = mathtext_parser.get_depth(latex, dpi=100***REMOVED***
    else:
        ***REMOVED***
            depth = mathtext_parser.to_png(filename, latex, dpi=100***REMOVED***
        ***REMOVED***
            warnings.warn("Could not render math expression %s" % latex,
                          Warning***REMOVED***
            depth = 0
    rcParams['mathtext.fontset'***REMOVED*** = orig_fontset
    sys.stdout.write("#"***REMOVED***
    sys.stdout.flush(***REMOVED***
    return depth

# LaTeX to HTML translation stuff:
def latex2html(node, source***REMOVED***:
    inline = isinstance(node.parent, nodes.TextElement***REMOVED***
    latex = node['latex'***REMOVED***
    name = 'math-%s' % md5(latex.encode(***REMOVED******REMOVED***.hexdigest(***REMOVED***[-10:***REMOVED***

    destdir = os.path.join(setup.app.builder.outdir, '_images', 'mathmpl'***REMOVED***
    if not os.path.exists(destdir***REMOVED***:
        os.makedirs(destdir***REMOVED***
    dest = os.path.join(destdir, '%s.png' % name***REMOVED***
    path = '/'.join((setup.app.builder.imgpath, 'mathmpl'***REMOVED******REMOVED***

    depth = latex2png(latex, dest, node['fontset'***REMOVED******REMOVED***

    if inline:
        cls = ''
    else:
        cls = 'class="center" '
    if inline and depth != 0:
        style = 'style="position: relative; bottom: -%dpx"' % (depth + 1***REMOVED***
    else:
        style = ''

    return '<img src="%s/%s.png" %s%s/>' % (path, name, cls, style***REMOVED***


def setup(app***REMOVED***:
    setup.app = app

    # Add visit/depart methods to HTML-Translator:
    def visit_latex_math_html(self, node***REMOVED***:
        source = self.document.attributes['source'***REMOVED***
        self.body.append(latex2html(node, source***REMOVED******REMOVED***

    def depart_latex_math_html(self, node***REMOVED***:
        pass

    # Add visit/depart methods to LaTeX-Translator:
    def visit_latex_math_latex(self, node***REMOVED***:
        inline = isinstance(node.parent, nodes.TextElement***REMOVED***
        if inline:
            self.body.append('$%s$' % node['latex'***REMOVED******REMOVED***
        else:
            self.body.extend(['\\begin{equation***REMOVED***',
                              node['latex'***REMOVED***,
                              '\\end{equation***REMOVED***'***REMOVED******REMOVED***

    def depart_latex_math_latex(self, node***REMOVED***:
        pass

    app.add_node(latex_math,
                 html=(visit_latex_math_html, depart_latex_math_html***REMOVED***,
                 latex=(visit_latex_math_latex, depart_latex_math_latex***REMOVED******REMOVED***
    app.add_role('math', math_role***REMOVED***
    app.add_directive('math', math_directive,
                      True, (0, 0, 0***REMOVED***, **options_spec***REMOVED***
