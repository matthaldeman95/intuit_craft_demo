from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six

from . import backend_gtk3
from . import backend_cairo
from .backend_cairo import cairo, HAS_CAIRO_CFFI
from matplotlib.figure import Figure

class RendererGTK3Cairo(backend_cairo.RendererCairo***REMOVED***:
    def set_context(self, ctx***REMOVED***:
        if HAS_CAIRO_CFFI:
            ctx = cairo.Context._from_pointer(
                cairo.ffi.cast(
                    'cairo_t **',
                    id(ctx***REMOVED*** + object.__basicsize__***REMOVED***[0***REMOVED***,
                incref=True***REMOVED***

        self.gc.ctx = ctx


class FigureCanvasGTK3Cairo(backend_gtk3.FigureCanvasGTK3,
                            backend_cairo.FigureCanvasCairo***REMOVED***:
    def __init__(self, figure***REMOVED***:
        backend_gtk3.FigureCanvasGTK3.__init__(self, figure***REMOVED***

    def _renderer_init(self***REMOVED***:
        ***REMOVED***use cairo renderer***REMOVED***
        self._renderer = RendererGTK3Cairo(self.figure.dpi***REMOVED***

    def _render_figure(self, width, height***REMOVED***:
        self._renderer.set_width_height (width, height***REMOVED***
        self.figure.draw (self._renderer***REMOVED***

    def on_draw_event(self, widget, ctx***REMOVED***:
        ***REMOVED*** GtkDrawable draw event, like expose_event in GTK 2.X
        ***REMOVED***
        # the _need_redraw flag doesnt work. it sometimes prevents
        # the rendering and leaving the canvas blank
        #if self._need_redraw:
        self._renderer.set_context(ctx***REMOVED***
        allocation = self.get_allocation(***REMOVED***
        x, y, w, h = allocation.x, allocation.y, allocation.width, allocation.height
        self._render_figure(w, h***REMOVED***
        #self._need_redraw = False

        return False  # finish event propagation?


class FigureManagerGTK3Cairo(backend_gtk3.FigureManagerGTK3***REMOVED***:
    pass


def new_figure_manager(num, *args, **kwargs***REMOVED***:
    ***REMOVED***
    Create a new figure manager instance
    ***REMOVED***
    FigureClass = kwargs.pop('FigureClass', Figure***REMOVED***
    thisFig = FigureClass(*args, **kwargs***REMOVED***
    return new_figure_manager_given_figure(num, thisFig***REMOVED***


def new_figure_manager_given_figure(num, figure***REMOVED***:
    ***REMOVED***
    Create a new figure manager instance for the given figure.
    ***REMOVED***
    canvas = FigureCanvasGTK3Cairo(figure***REMOVED***
    manager = FigureManagerGTK3Cairo(canvas, num***REMOVED***
    return manager


FigureCanvas = FigureCanvasGTK3Cairo
FigureManager = FigureManagerGTK3Cairo
show = backend_gtk3.show
