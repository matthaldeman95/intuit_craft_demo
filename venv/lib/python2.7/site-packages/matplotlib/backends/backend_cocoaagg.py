***REMOVED***
 backend_cocoaagg.py

 A native Cocoa backend via PyObjC in OSX.

 Author: Charles Moad (cmoad@users.sourceforge.net***REMOVED***

 Notes:
  - Requires PyObjC (currently testing v1.3.7***REMOVED***
  - The Tk backend works nicely on OSX.  This code
    primarily serves as an example of embedding a
    matplotlib rendering context into a cocoa app
    using a NSImageView.
***REMOVED***
from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six
from matplotlib.externals.six.moves import xrange

***REMOVED***, sys

***REMOVED***
    import objc
except ImportError:
    raise ImportError('The CococaAgg backend required PyObjC to be installed!'***REMOVED***

from Foundation import *
from AppKit import *
from PyObjCTools import NibClassBuilder, AppHelper

from matplotlib import cbook
cbook.warn_deprecated(
    '1.3',
    message="The CocoaAgg backend is not a fully-functioning backend. "
            "It may be removed in matplotlib 1.4."***REMOVED***

import matplotlib
from matplotlib.figure import Figure
from matplotlib.backend_bases import FigureManagerBase, FigureCanvasBase
from matplotlib.backend_bases import ShowBase

from .backend_agg import FigureCanvasAgg
from matplotlib._pylab_helpers import Gcf

mplBundle = NSBundle.bundleWithPath_(os.path.dirname(__file__***REMOVED******REMOVED***


def new_figure_manager(num, *args, **kwargs***REMOVED***:
    FigureClass = kwargs.pop('FigureClass', Figure***REMOVED***
    thisFig = FigureClass( *args, **kwargs ***REMOVED***
    return new_figure_manager_given_figure(num, thisFig***REMOVED***


def new_figure_manager_given_figure(num, figure***REMOVED***:
    ***REMOVED***
    Create a new figure manager instance for the given figure.
    ***REMOVED***
    canvas = FigureCanvasCocoaAgg(figure***REMOVED***
    return FigureManagerCocoaAgg(canvas, num***REMOVED***


## Below is the original show(***REMOVED*** function:
#def show(***REMOVED***:
#    for manager in Gcf.get_all_fig_managers(***REMOVED***:
#        manager.show(***REMOVED***
#
## It appears that this backend is unusual in having a separate
## run function invoked for each figure, instead of a single
## mainloop.  Presumably there is no blocking at all.
##
## Using the Show class below should cause no difference in
## behavior.

class Show(ShowBase***REMOVED***:
    def mainloop(self***REMOVED***:
        pass

show = Show(***REMOVED***

def draw_if_interactive(***REMOVED***:
    if matplotlib.is_interactive(***REMOVED***:
        figManager =  Gcf.get_active(***REMOVED***
        if figManager is not None:
            figManager.show(***REMOVED***

class FigureCanvasCocoaAgg(FigureCanvasAgg***REMOVED***:
    def draw(self***REMOVED***:
        FigureCanvasAgg.draw(self***REMOVED***

    def blit(self, bbox***REMOVED***:
        pass

    def start_event_loop(self,timeout***REMOVED***:
        FigureCanvasBase.start_event_loop_default(self,timeout***REMOVED***
    start_event_loop.__doc__=FigureCanvasBase.start_event_loop_default.__doc__

    def stop_event_loop(self***REMOVED***:
        FigureCanvasBase.stop_event_loop_default(self***REMOVED***
    stop_event_loop.__doc__=FigureCanvasBase.stop_event_loop_default.__doc__



NibClassBuilder.extractClasses('Matplotlib.nib', mplBundle***REMOVED***

class MatplotlibController(NibClassBuilder.AutoBaseClass***REMOVED***:
    # available outlets:
    #  NSWindow plotWindow
    #  PlotView plotView

    def awakeFromNib(self***REMOVED***:
        # Get a reference to the active canvas
        NSApp(***REMOVED***.setDelegate_(self***REMOVED***
        self.app = NSApp(***REMOVED***
        self.canvas = Gcf.get_active(***REMOVED***.canvas
        self.plotView.canvas = self.canvas
        self.canvas.plotView = self.plotView

        self.plotWindow.setAcceptsMouseMovedEvents_(True***REMOVED***
        self.plotWindow.makeKeyAndOrderFront_(self***REMOVED***
        self.plotWindow.setDelegate_(self***REMOVED***#.plotView***REMOVED***

        self.plotView.setImageFrameStyle_(NSImageFrameGroove***REMOVED***
        self.plotView.image_ = NSImage.alloc(***REMOVED***.initWithSize_((0,0***REMOVED******REMOVED***
        self.plotView.setImage_(self.plotView.image_***REMOVED***

        # Make imageview first responder for key events
        self.plotWindow.makeFirstResponder_(self.plotView***REMOVED***

        # Force the first update
        self.plotView.windowDidResize_(self***REMOVED***

    def windowDidResize_(self, sender***REMOVED***:
        self.plotView.windowDidResize_(sender***REMOVED***

    def windowShouldClose_(self, sender***REMOVED***:
        #NSApplication.sharedApplication(***REMOVED***.stop_(self***REMOVED***
        self.app.stop_(self***REMOVED***
        return objc.YES

    def saveFigure_(self, sender***REMOVED***:
        p = NSSavePanel.savePanel(***REMOVED***
        if(p.runModal(***REMOVED*** == NSFileHandlingPanelOKButton***REMOVED***:
            self.canvas.print_figure(p.filename(***REMOVED******REMOVED***

    def printFigure_(self, sender***REMOVED***:
        op = NSPrintOperation.printOperationWithView_(self.plotView***REMOVED***
        op.runOperation(***REMOVED***

class PlotWindow(NibClassBuilder.AutoBaseClass***REMOVED***:
    pass

class PlotView(NibClassBuilder.AutoBaseClass***REMOVED***:
    def updatePlot(self***REMOVED***:
        w,h = self.canvas.get_width_height(***REMOVED***

        # Remove all previous images
        for i in xrange(self.image_.representations(***REMOVED***.count(***REMOVED******REMOVED***:
            self.image_.removeRepresentation_(self.image_.representations(***REMOVED***.objectAtIndex_(i***REMOVED******REMOVED***

        self.image_.setSize_((w,h***REMOVED******REMOVED***

        brep = NSBitmapImageRep.alloc(***REMOVED***.initWithBitmapDataPlanes_pixelsWide_pixelsHigh_bitsPerSample_samplesPerPixel_hasAlpha_isPlanar_colorSpaceName_bytesPerRow_bitsPerPixel_(
            (self.canvas.buffer_rgba(***REMOVED***,'','','',''***REMOVED***, # Image data
            w, # width
            h, # height
            8, # bits per pixel
            4, # components per pixel
            True, # has alpha?
            False, # is planar?
            NSCalibratedRGBColorSpace, # color space
            w*4, # row bytes
            32***REMOVED*** # bits per pixel

        self.image_.addRepresentation_(brep***REMOVED***
        self.setNeedsDisplay_(True***REMOVED***

    def windowDidResize_(self, sender***REMOVED***:
        w,h = self.bounds(***REMOVED***.size
        dpi = self.canvas.figure.dpi
        self.canvas.figure.set_size_inches(w / dpi, h / dpi***REMOVED***
        self.canvas.draw(***REMOVED***
        self.updatePlot(***REMOVED***

    def mouseDown_(self, event***REMOVED***:
        dblclick = (event.clickCount(***REMOVED*** == 2***REMOVED***
        loc = self.convertPoint_fromView_(event.locationInWindow(***REMOVED***, None***REMOVED***
        type = event.type(***REMOVED***
        if (type == NSLeftMouseDown***REMOVED***:
            button = 1
        else:
            print('Unknown mouse event type:', type, file=sys.stderr***REMOVED***
            button = -1
        self.canvas.button_press_event(loc.x, loc.y, button, dblclick=dblclick***REMOVED***
        self.updatePlot(***REMOVED***

    def mouseDragged_(self, event***REMOVED***:
        loc = self.convertPoint_fromView_(event.locationInWindow(***REMOVED***, None***REMOVED***
        self.canvas.motion_notify_event(loc.x, loc.y***REMOVED***
        self.updatePlot(***REMOVED***

    def mouseUp_(self, event***REMOVED***:
        loc = self.convertPoint_fromView_(event.locationInWindow(***REMOVED***, None***REMOVED***
        type = event.type(***REMOVED***
        if (type == NSLeftMouseUp***REMOVED***:
            button = 1
        else:
            print('Unknown mouse event type:', type, file=sys.stderr***REMOVED***
            button = -1
        self.canvas.button_release_event(loc.x, loc.y, button***REMOVED***
        self.updatePlot(***REMOVED***

    def keyDown_(self, event***REMOVED***:
        self.canvas.key_press_event(event.characters(***REMOVED******REMOVED***
        self.updatePlot(***REMOVED***

    def keyUp_(self, event***REMOVED***:
        self.canvas.key_release_event(event.characters(***REMOVED******REMOVED***
        self.updatePlot(***REMOVED***

class MPLBootstrap(NSObject***REMOVED***:
    # Loads the nib containing the PlotWindow and PlotView
    def startWithBundle_(self, bundle***REMOVED***:
        #NSApplicationLoad(***REMOVED***
        if not bundle.loadNibFile_externalNameTable_withZone_('Matplotlib.nib', {***REMOVED***, None***REMOVED***:
            print('Unable to load Matplotlib Cocoa UI!', file=sys.stderr***REMOVED***
            sys.exit(***REMOVED***

class FigureManagerCocoaAgg(FigureManagerBase***REMOVED***:
    def __init__(self, canvas, num***REMOVED***:
        FigureManagerBase.__init__(self, canvas, num***REMOVED***

        ***REMOVED***
            WMEnable('Matplotlib'***REMOVED***
        ***REMOVED***
            # MULTIPLE FIGURES ARE BUGGY!
            pass # If there are multiple figures we only need to enable once
        #self.bootstrap = MPLBootstrap.alloc(***REMOVED***.init(***REMOVED***.performSelectorOnMainThread_withObject_waitUntilDone_(
        #        'startWithBundle:',
        #        mplBundle,
        #        False***REMOVED***

    def show(self***REMOVED***:
        # Load a new PlotWindow
        self.bootstrap = MPLBootstrap.alloc(***REMOVED***.init(***REMOVED***.performSelectorOnMainThread_withObject_waitUntilDone_(
                'startWithBundle:',
                mplBundle,
                False***REMOVED***
        NSApplication.sharedApplication(***REMOVED***.run(***REMOVED***


#### Everything below taken from PyObjC examples
#### This is a hack to allow python scripts to access
#### the window manager without running pythonw.
def S(*args***REMOVED***:
    return ''.join(args***REMOVED***

OSErr = objc._C_SHT
OUTPSN = 'o^{ProcessSerialNumber=LL***REMOVED***'
INPSN = 'n^{ProcessSerialNumber=LL***REMOVED***'
FUNCTIONS=[
    # These two are public API
    ( 'GetCurrentProcess', S(OSErr, OUTPSN***REMOVED*** ***REMOVED***,
    ( 'SetFrontProcess', S(OSErr, INPSN***REMOVED*** ***REMOVED***,
    # This is undocumented SPI
    ( 'CPSSetProcessName', S(OSErr, INPSN, objc._C_CHARPTR***REMOVED*** ***REMOVED***,
    ( 'CPSEnableForegroundOperation', S(OSErr, INPSN***REMOVED*** ***REMOVED***,
***REMOVED***
def WMEnable(name='Python'***REMOVED***:
    if isinstance(name, six.text_type***REMOVED***:
        name = name.encode('utf8'***REMOVED***
    mainBundle = NSBundle.mainBundle(***REMOVED***
    bPath = os.path.split(os.path.split(os.path.split(sys.executable***REMOVED***[0***REMOVED******REMOVED***[0***REMOVED******REMOVED***[0***REMOVED***
    if mainBundle.bundlePath(***REMOVED*** == bPath:
        return True
    bndl = NSBundle.bundleWithPath_(objc.pathForFramework('/System/Library/Frameworks/ApplicationServices.framework'***REMOVED******REMOVED***
    if bndl is None:
        print('ApplicationServices missing', file=sys.stderr***REMOVED***
        return False
    d = {***REMOVED***
    objc.loadBundleFunctions(bndl, d, FUNCTIONS***REMOVED***
    for (fn, sig***REMOVED*** in FUNCTIONS:
        if fn not in d:
            print('Missing', fn, file=sys.stderr***REMOVED***
            return False
    err, psn = d['GetCurrentProcess'***REMOVED***(***REMOVED***
    if err:
        print('GetCurrentProcess', (err, psn***REMOVED***, file=sys.stderr***REMOVED***
        return False
    err = d['CPSSetProcessName'***REMOVED***(psn, name***REMOVED***
    if err:
        print('CPSSetProcessName', (err, psn***REMOVED***, file=sys.stderr***REMOVED***
        return False
    err = d['CPSEnableForegroundOperation'***REMOVED***(psn***REMOVED***
    if err:
        #print >>sys.stderr, 'CPSEnableForegroundOperation', (err, psn***REMOVED***
        return False
    err = d['SetFrontProcess'***REMOVED***(psn***REMOVED***
    if err:
        print('SetFrontProcess', (err, psn***REMOVED***, file=sys.stderr***REMOVED***
        return False
    return True


FigureCanvas = FigureCanvasCocoaAgg
FigureManager = FigureManagerCocoaAgg
