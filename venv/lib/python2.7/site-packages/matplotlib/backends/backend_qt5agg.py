***REMOVED***
Render to qt from agg
***REMOVED***
from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six

import ctypes
import sys
import traceback

from matplotlib.figure import Figure

from .backend_agg import FigureCanvasAgg
from .backend_qt5 import QtCore
from .backend_qt5 import QtGui
from .backend_qt5 import FigureManagerQT
from .backend_qt5 import NavigationToolbar2QT
##### Modified Qt5 backend import
from .backend_qt5 import FigureCanvasQT
##### not used
from .backend_qt5 import show
from .backend_qt5 import draw_if_interactive
from .backend_qt5 import backend_version
######
from .qt_compat import QT_API

DEBUG = False

_decref = ctypes.pythonapi.Py_DecRef
_decref.argtypes = [ctypes.py_object***REMOVED***
_decref.restype = None


def new_figure_manager(num, *args, **kwargs***REMOVED***:
    ***REMOVED***
    Create a new figure manager instance
    ***REMOVED***
    if DEBUG:
        print('backend_qt5agg.new_figure_manager'***REMOVED***
    FigureClass = kwargs.pop('FigureClass', Figure***REMOVED***
    thisFig = FigureClass(*args, **kwargs***REMOVED***
    return new_figure_manager_given_figure(num, thisFig***REMOVED***


def new_figure_manager_given_figure(num, figure***REMOVED***:
    ***REMOVED***
    Create a new figure manager instance for the given figure.
    ***REMOVED***
    canvas = FigureCanvasQTAgg(figure***REMOVED***
    return FigureManagerQT(canvas, num***REMOVED***


class FigureCanvasQTAggBase(object***REMOVED***:
    ***REMOVED***
    The canvas the figure renders into.  Calls the draw and print fig
    methods, creates the renderers, etc...

    Public attribute

        figure - A Figure instance
    ***REMOVED***

    def __init__(self, figure***REMOVED***:
        super(FigureCanvasQTAggBase, self***REMOVED***.__init__(figure=figure***REMOVED***
        self._agg_draw_pending = False

    def drawRectangle(self, rect***REMOVED***:
        self._drawRect = rect
        self.update(***REMOVED***

    def paintEvent(self, e***REMOVED***:
        ***REMOVED***
        Copy the image from the Agg canvas to the qt.drawable.
        In Qt, all drawing should be done inside of here when a widget is
        shown onscreen.
        ***REMOVED***
        # if the canvas does not have a renderer, then give up and wait for
        # FigureCanvasAgg.draw(self***REMOVED*** to be called
        if not hasattr(self, 'renderer'***REMOVED***:
            return

        if DEBUG:
            print('FigureCanvasQtAgg.paintEvent: ', self,
                  self.get_width_height(***REMOVED******REMOVED***

        if self.blitbox is None:
            # matplotlib is in rgba byte order.  QImage wants to put the bytes
            # into argb format and is in a 4 byte unsigned int.  Little endian
            # system is LSB first and expects the bytes in reverse order
            # (bgra***REMOVED***.
            if QtCore.QSysInfo.ByteOrder == QtCore.QSysInfo.LittleEndian:
                stringBuffer = self.renderer._renderer.tostring_bgra(***REMOVED***
            else:
                stringBuffer = self.renderer._renderer.tostring_argb(***REMOVED***

            refcnt = sys.getrefcount(stringBuffer***REMOVED***

            # convert the Agg rendered image -> qImage
            qImage = QtGui.QImage(stringBuffer, self.renderer.width,
                                  self.renderer.height,
                                  QtGui.QImage.Format_ARGB32***REMOVED***
            # get the rectangle for the image
            rect = qImage.rect(***REMOVED***
            p = QtGui.QPainter(self***REMOVED***
            # reset the image area of the canvas to be the back-ground color
            p.eraseRect(rect***REMOVED***
            # draw the rendered image on to the canvas
            p.drawPixmap(QtCore.QPoint(0, 0***REMOVED***, QtGui.QPixmap.fromImage(qImage***REMOVED******REMOVED***

            # draw the zoom rectangle to the QPainter
            if self._drawRect is not None:
                p.setPen(QtGui.QPen(QtCore.Qt.black, 1, QtCore.Qt.DotLine***REMOVED******REMOVED***
                x, y, w, h = self._drawRect
                p.drawRect(x, y, w, h***REMOVED***
            p.end(***REMOVED***

            # This works around a bug in PySide 1.1.2 on Python 3.x,
            # where the reference count of stringBuffer is incremented
            # but never decremented by QImage.
            # TODO: revert PR #1323 once the issue is fixed in PySide.
            del qImage
            if refcnt != sys.getrefcount(stringBuffer***REMOVED***:
                _decref(stringBuffer***REMOVED***
        else:
            bbox = self.blitbox
            l, b, r, t = bbox.extents
            w = int(r***REMOVED*** - int(l***REMOVED***
            h = int(t***REMOVED*** - int(b***REMOVED***
            t = int(b***REMOVED*** + h
            reg = self.copy_from_bbox(bbox***REMOVED***
            stringBuffer = reg.to_string_argb(***REMOVED***
            qImage = QtGui.QImage(stringBuffer, w, h,
                                  QtGui.QImage.Format_ARGB32***REMOVED***
            # Adjust the stringBuffer reference count to work around a memory
            # leak bug in QImage(***REMOVED*** under PySide on Python 3.x
            if QT_API == 'PySide' and six.PY3:
                ctypes.c_long.from_address(id(stringBuffer***REMOVED******REMOVED***.value = 1

            pixmap = QtGui.QPixmap.fromImage(qImage***REMOVED***
            p = QtGui.QPainter(self***REMOVED***
            p.drawPixmap(QtCore.QPoint(l, self.renderer.height-t***REMOVED***, pixmap***REMOVED***

            # draw the zoom rectangle to the QPainter
            if self._drawRect is not None:
                p.setPen(QtGui.QPen(QtCore.Qt.black, 1, QtCore.Qt.DotLine***REMOVED******REMOVED***
                x, y, w, h = self._drawRect
                p.drawRect(x, y, w, h***REMOVED***
            p.end(***REMOVED***
            self.blitbox = None

    def draw(self***REMOVED***:
        ***REMOVED***
        Draw the figure with Agg, and queue a request for a Qt draw.
        ***REMOVED***
        # The Agg draw is done here; delaying causes problems with code that
        # uses the result of the draw(***REMOVED*** to update plot elements.
        FigureCanvasAgg.draw(self***REMOVED***
        self.update(***REMOVED***

    def draw_idle(self***REMOVED***:
        ***REMOVED***
        Queue redraw of the Agg buffer and request Qt paintEvent.
        ***REMOVED***
        # The Agg draw needs to be handled by the same thread matplotlib
        # modifies the scene graph from. Post Agg draw request to the
        # current event loop in order to ensure thread affinity and to
        # accumulate multiple draw requests from event handling.
        # TODO: queued signal connection might be safer than singleShot
        if not self._agg_draw_pending:
            self._agg_draw_pending = True
            QtCore.QTimer.singleShot(0, self.__draw_idle_agg***REMOVED***

    def __draw_idle_agg(self, *args***REMOVED***:
        if self.height(***REMOVED*** < 0 or self.width(***REMOVED*** < 0:
            self._agg_draw_pending = False
            return
        ***REMOVED***
            FigureCanvasAgg.draw(self***REMOVED***
            self.update(***REMOVED***
        except Exception:
            # Uncaught exceptions are fatal for PyQt5, so catch them instead.
            traceback.print_exc(***REMOVED***
        finally:
            self._agg_draw_pending = False

    def blit(self, bbox=None***REMOVED***:
        ***REMOVED***
        Blit the region in bbox
        ***REMOVED***
        # If bbox is None, blit the entire canvas. Otherwise
        # blit only the area defined by the bbox.
        if bbox is None and self.figure:
            bbox = self.figure.bbox

        self.blitbox = bbox
        l, b, w, h = bbox.bounds
        t = b + h
        self.repaint(l, self.renderer.height-t, w, h***REMOVED***

    def print_figure(self, *args, **kwargs***REMOVED***:
        FigureCanvasAgg.print_figure(self, *args, **kwargs***REMOVED***
        self.draw(***REMOVED***


class FigureCanvasQTAgg(FigureCanvasQTAggBase,
                        FigureCanvasQT, FigureCanvasAgg***REMOVED***:
    ***REMOVED***
    The canvas the figure renders into.  Calls the draw and print fig
    methods, creates the renderers, etc.

    Modified to import from Qt5 backend for new-style mouse events.

    Public attribute

      figure - A Figure instance
    ***REMOVED***

    def __init__(self, figure***REMOVED***:
        if DEBUG:
            print('FigureCanvasQtAgg: ', figure***REMOVED***
        super(FigureCanvasQTAgg, self***REMOVED***.__init__(figure=figure***REMOVED***
        self._drawRect = None
        self.blitbox = None
        self.setAttribute(QtCore.Qt.WA_OpaquePaintEvent***REMOVED***


FigureCanvas = FigureCanvasQTAgg
FigureManager = FigureManagerQT
