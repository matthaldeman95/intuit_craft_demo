from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six

import matplotlib
from matplotlib.figure import Figure

from .backend_agg import FigureCanvasAgg

from . import wx_compat as wxc
from . import backend_wx
from .backend_wx import (FigureManagerWx, FigureCanvasWx,
    FigureFrameWx, DEBUG_MSG, NavigationToolbar2Wx, Toolbar***REMOVED***

import wx


show = backend_wx.Show(***REMOVED***


class FigureFrameWxAgg(FigureFrameWx***REMOVED***:
    def get_canvas(self, fig***REMOVED***:
        return FigureCanvasWxAgg(self, -1, fig***REMOVED***

    def _get_toolbar(self, statbar***REMOVED***:
        if matplotlib.rcParams['toolbar'***REMOVED*** == 'toolbar2':
            toolbar = NavigationToolbar2WxAgg(self.canvas***REMOVED***
            toolbar.set_status_bar(statbar***REMOVED***
        else:
            toolbar = None
        return toolbar


class FigureCanvasWxAgg(FigureCanvasAgg, FigureCanvasWx***REMOVED***:
    ***REMOVED***
    The FigureCanvas contains the figure and does event handling.

    In the wxPython backend, it is derived from wxPanel, and (usually***REMOVED***
    lives inside a frame instantiated by a FigureManagerWx. The parent
    window probably implements a wxSizer to control the displayed
    control size - but we give a hint as to our preferred minimum
    size.
    ***REMOVED***

    def draw(self, drawDC=None***REMOVED***:
        ***REMOVED***
        Render the figure using agg.
        ***REMOVED***
        DEBUG_MSG("draw(***REMOVED***", 1, self***REMOVED***
        FigureCanvasAgg.draw(self***REMOVED***

        self.bitmap = _convert_agg_to_wx_bitmap(self.get_renderer(***REMOVED***, None***REMOVED***
        self._isDrawn = True
        self.gui_repaint(drawDC=drawDC, origin='WXAgg'***REMOVED***

    def blit(self, bbox=None***REMOVED***:
        ***REMOVED***
        Transfer the region of the agg buffer defined by bbox to the display.
        If bbox is None, the entire buffer is transferred.
        ***REMOVED***
        if bbox is None:
            self.bitmap = _convert_agg_to_wx_bitmap(self.get_renderer(***REMOVED***, None***REMOVED***
            self.gui_repaint(***REMOVED***
            return

        l, b, w, h = bbox.bounds
        r = l + w
        t = b + h
        x = int(l***REMOVED***
        y = int(self.bitmap.GetHeight(***REMOVED*** - t***REMOVED***

        srcBmp = _convert_agg_to_wx_bitmap(self.get_renderer(***REMOVED***, None***REMOVED***
        srcDC = wx.MemoryDC(***REMOVED***
        srcDC.SelectObject(srcBmp***REMOVED***

        destDC = wx.MemoryDC(***REMOVED***
        destDC.SelectObject(self.bitmap***REMOVED***

        destDC.Blit(x, y, int(w***REMOVED***, int(h***REMOVED***, srcDC, x, y***REMOVED***

        destDC.SelectObject(wx.NullBitmap***REMOVED***
        srcDC.SelectObject(wx.NullBitmap***REMOVED***
        self.gui_repaint(***REMOVED***

    filetypes = FigureCanvasAgg.filetypes

    def print_figure(self, filename, *args, **kwargs***REMOVED***:
        # Use pure Agg renderer to draw
        FigureCanvasAgg.print_figure(self, filename, *args, **kwargs***REMOVED***
        # Restore the current view; this is needed because the
        # artist contains methods rely on particular attributes
        # of the rendered figure for determining things like
        # bounding boxes.
        if self._isDrawn:
            self.draw(***REMOVED***


class NavigationToolbar2WxAgg(NavigationToolbar2Wx***REMOVED***:
    def get_canvas(self, frame, fig***REMOVED***:
        return FigureCanvasWxAgg(frame, -1, fig***REMOVED***


def new_figure_manager(num, *args, **kwargs***REMOVED***:
    ***REMOVED***
    Create a new figure manager instance
    ***REMOVED***
    # in order to expose the Figure constructor to the pylab
    # interface we need to create the figure here
    DEBUG_MSG("new_figure_manager(***REMOVED***", 3, None***REMOVED***
    backend_wx._create_wx_app(***REMOVED***

    FigureClass = kwargs.pop('FigureClass', Figure***REMOVED***
    fig = FigureClass(*args, **kwargs***REMOVED***

    return new_figure_manager_given_figure(num, fig***REMOVED***


def new_figure_manager_given_figure(num, figure***REMOVED***:
    ***REMOVED***
    Create a new figure manager instance for the given figure.
    ***REMOVED***
    frame = FigureFrameWxAgg(num, figure***REMOVED***
    figmgr = frame.get_figure_manager(***REMOVED***
    if matplotlib.is_interactive(***REMOVED***:
        figmgr.frame.Show(***REMOVED***
        figure.canvas.draw_idle(***REMOVED***
    return figmgr


#
# agg/wxPython image conversion functions (wxPython >= 2.8***REMOVED***
#

def _convert_agg_to_wx_image(agg, bbox***REMOVED***:
    ***REMOVED***
    Convert the region of the agg buffer bounded by bbox to a wx.Image.  If
    bbox is None, the entire buffer is converted.

    Note: agg must be a backend_agg.RendererAgg instance.
    ***REMOVED***
    if bbox is None:
        # agg => rgb -> image
        image = wxc.EmptyImage(int(agg.width***REMOVED***, int(agg.height***REMOVED******REMOVED***
        image.SetData(agg.tostring_rgb(***REMOVED******REMOVED***
        return image
    else:
        # agg => rgba buffer -> bitmap => clipped bitmap => image
        return wx.ImageFromBitmap(_WX28_clipped_agg_as_bitmap(agg, bbox***REMOVED******REMOVED***


def _convert_agg_to_wx_bitmap(agg, bbox***REMOVED***:
    ***REMOVED***
    Convert the region of the agg buffer bounded by bbox to a wx.Bitmap.  If
    bbox is None, the entire buffer is converted.

    Note: agg must be a backend_agg.RendererAgg instance.
    ***REMOVED***
    if bbox is None:
        # agg => rgba buffer -> bitmap
        return wxc.BitmapFromBuffer(int(agg.width***REMOVED***, int(agg.height***REMOVED***,
                                    agg.buffer_rgba(***REMOVED******REMOVED***
    else:
        # agg => rgba buffer -> bitmap => clipped bitmap
        return _WX28_clipped_agg_as_bitmap(agg, bbox***REMOVED***


def _WX28_clipped_agg_as_bitmap(agg, bbox***REMOVED***:
    ***REMOVED***
    Convert the region of a the agg buffer bounded by bbox to a wx.Bitmap.

    Note: agg must be a backend_agg.RendererAgg instance.
    ***REMOVED***
    l, b, width, height = bbox.bounds
    r = l + width
    t = b + height

    srcBmp = wxc.BitmapFromBuffer(int(agg.width***REMOVED***, int(agg.height***REMOVED***,
                                  agg.buffer_rgba(***REMOVED******REMOVED***
    srcDC = wx.MemoryDC(***REMOVED***
    srcDC.SelectObject(srcBmp***REMOVED***

    destBmp = wxc.EmptyBitmap(int(width***REMOVED***, int(height***REMOVED******REMOVED***
    destDC = wx.MemoryDC(***REMOVED***
    destDC.SelectObject(destBmp***REMOVED***

    x = int(l***REMOVED***
    y = int(int(agg.height***REMOVED*** - t***REMOVED***
    destDC.Blit(0, 0, int(width***REMOVED***, int(height***REMOVED***, srcDC, x, y***REMOVED***

    srcDC.SelectObject(wx.NullBitmap***REMOVED***
    destDC.SelectObject(wx.NullBitmap***REMOVED***

    return destBmp

FigureCanvas = FigureCanvasWxAgg
FigureManager = FigureManagerWx
