from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six
from matplotlib.externals.six import unichr
***REMOVED***
import re
import signal
import sys

import matplotlib

from matplotlib.cbook import is_string_like
from matplotlib.backend_bases import FigureManagerBase
from matplotlib.backend_bases import FigureCanvasBase
from matplotlib.backend_bases import NavigationToolbar2

from matplotlib.backend_bases import cursors
from matplotlib.backend_bases import TimerBase
from matplotlib.backend_bases import ShowBase

from matplotlib._pylab_helpers import Gcf
from matplotlib.figure import Figure


from matplotlib.widgets import SubplotTool
***REMOVED***
    import matplotlib.backends.qt_editor.figureoptions as figureoptions
except ImportError:
    figureoptions = None

from .qt_compat import QtCore, QtWidgets, _getSaveFileName, __version__
from matplotlib.backends.qt_editor.formsubplottool import UiSubplotTool

from .backend_qt5 import (backend_version, SPECIAL_KEYS, SUPER, ALT, CTRL,
                        SHIFT, MODIFIER_KEYS, fn_name, cursord,
                        draw_if_interactive, _create_qApp, show, TimerQT,
                        MainWindow, FigureManagerQT, NavigationToolbar2QT,
                        SubplotToolQt, error_msg_qt, exception_handler***REMOVED***

from .backend_qt5 import FigureCanvasQT as FigureCanvasQT5

DEBUG = False


def new_figure_manager(num, *args, **kwargs***REMOVED***:
    ***REMOVED***
    Create a new figure manager instance
    ***REMOVED***
    thisFig = Figure(*args, **kwargs***REMOVED***
    return new_figure_manager_given_figure(num, thisFig***REMOVED***


def new_figure_manager_given_figure(num, figure***REMOVED***:
    ***REMOVED***
    Create a new figure manager instance for the given figure.
    ***REMOVED***
    canvas = FigureCanvasQT(figure***REMOVED***
    manager = FigureManagerQT(canvas, num***REMOVED***
    return manager


class FigureCanvasQT(FigureCanvasQT5***REMOVED***:

    def __init__(self, figure***REMOVED***:
        if DEBUG:
            print('FigureCanvasQt qt4: ', figure***REMOVED***
        _create_qApp(***REMOVED***

        # Note different super-calling style to backend_qt5
        QtWidgets.QWidget.__init__(self***REMOVED***
        FigureCanvasBase.__init__(self, figure***REMOVED***
        self.figure = figure
        self.setMouseTracking(True***REMOVED***
        self._idle = True
        w, h = self.get_width_height(***REMOVED***
        self.resize(w, h***REMOVED***

    def wheelEvent(self, event***REMOVED***:
        x = event.x(***REMOVED***
        # flipy so y=0 is bottom of canvas
        y = self.figure.bbox.height - event.y(***REMOVED***
        # from QWheelEvent::delta doc
        steps = event.delta(***REMOVED***/120
        if (event.orientation(***REMOVED*** == QtCore.Qt.Vertical***REMOVED***:
            FigureCanvasBase.scroll_event(self, x, y, steps***REMOVED***
            if DEBUG:
                print('scroll event: delta = %i, '
                      'steps = %i ' % (event.delta(***REMOVED***, steps***REMOVED******REMOVED***


FigureCanvas = FigureCanvasQT
FigureManager = FigureManagerQT
