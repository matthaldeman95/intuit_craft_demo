# -*- coding: utf-8 -*-
#
# Copyright Â© 2009 Pierre Raybaut
# Licensed under the terms of the MIT License
# see the mpl licenses directory for a copy of the license


***REMOVED***Module that provides a GUI-based editor for matplotlib's figure options***REMOVED***

from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six

***REMOVED***.path as osp

import matplotlib.backends.qt_editor.formlayout as formlayout
from matplotlib.backends.qt_compat import QtGui
from matplotlib import markers
from matplotlib.colors import colorConverter, rgb2hex


def get_icon(name***REMOVED***:
    import matplotlib
    basedir = osp.join(matplotlib.rcParams['datapath'***REMOVED***, 'images'***REMOVED***
    return QtGui.QIcon(osp.join(basedir, name***REMOVED******REMOVED***

LINESTYLES = {'-': 'Solid',
              '--': 'Dashed',
              '-.': 'DashDot',
              ':': 'Dotted',
              'none': 'None',
          ***REMOVED***

DRAWSTYLES = {'default': 'Default',
              'steps': 'Steps',
          ***REMOVED***

MARKERS = markers.MarkerStyle.markers


def figure_edit(axes, parent=None***REMOVED***:
    ***REMOVED***Edit matplotlib figure options***REMOVED***
    sep = (None, None***REMOVED***  # separator

    has_curve = len(axes.get_lines(***REMOVED******REMOVED*** > 0

    # Get / General
    xmin, xmax = axes.get_xlim(***REMOVED***
    ymin, ymax = axes.get_ylim(***REMOVED***
    general = [('Title', axes.get_title(***REMOVED******REMOVED***,
               sep,
               (None, "<b>X-Axis</b>"***REMOVED***,
               ('Min', xmin***REMOVED***, ('Max', xmax***REMOVED***,
               ('Label', axes.get_xlabel(***REMOVED******REMOVED***,
               ('Scale', [axes.get_xscale(***REMOVED***, 'linear', 'log'***REMOVED******REMOVED***,
               sep,
               (None, "<b>Y-Axis</b>"***REMOVED***,
               ('Min', ymin***REMOVED***, ('Max', ymax***REMOVED***,
               ('Label', axes.get_ylabel(***REMOVED******REMOVED***,
               ('Scale', [axes.get_yscale(***REMOVED***, 'linear', 'log'***REMOVED******REMOVED***,
               sep,
               ('(Re-***REMOVED***Generate automatic legend', False***REMOVED***,
               ***REMOVED***

    # Save the unit data
    xconverter = axes.xaxis.converter
    yconverter = axes.yaxis.converter
    xunits = axes.xaxis.get_units(***REMOVED***
    yunits = axes.yaxis.get_units(***REMOVED***

    if has_curve:
        # Get / Curves
        linedict = {***REMOVED***
        for line in axes.get_lines(***REMOVED***:
            label = line.get_label(***REMOVED***
            if label == '_nolegend_':
                continue
            linedict[label***REMOVED*** = line
        curves = [***REMOVED***
        linestyles = list(six.iteritems(LINESTYLES***REMOVED******REMOVED***
        drawstyles = list(six.iteritems(DRAWSTYLES***REMOVED******REMOVED***
        markers = list(six.iteritems(MARKERS***REMOVED******REMOVED***
        curvelabels = sorted(linedict.keys(***REMOVED******REMOVED***
        for label in curvelabels:
            line = linedict[label***REMOVED***
            color = rgb2hex(colorConverter.to_rgb(line.get_color(***REMOVED******REMOVED******REMOVED***
            ec = rgb2hex(colorConverter.to_rgb(line.get_markeredgecolor(***REMOVED******REMOVED******REMOVED***
            fc = rgb2hex(colorConverter.to_rgb(line.get_markerfacecolor(***REMOVED******REMOVED******REMOVED***
            curvedata = [('Label', label***REMOVED***,
                         sep,
                         (None, '<b>Line</b>'***REMOVED***,
                         ('Line Style', [line.get_linestyle(***REMOVED******REMOVED*** + linestyles***REMOVED***,
                         ('Draw Style', [line.get_drawstyle(***REMOVED******REMOVED*** + drawstyles***REMOVED***,
                         ('Width', line.get_linewidth(***REMOVED******REMOVED***,
                         ('Color', color***REMOVED***,
                         sep,
                         (None, '<b>Marker</b>'***REMOVED***,
                         ('Style', [line.get_marker(***REMOVED******REMOVED*** + markers***REMOVED***,
                         ('Size', line.get_markersize(***REMOVED******REMOVED***,
                         ('Facecolor', fc***REMOVED***,
                         ('Edgecolor', ec***REMOVED***,
                         ***REMOVED***
            curves.append([curvedata, label, ""***REMOVED******REMOVED***

        # make sure that there is at least one displayed curve
        has_curve = bool(curves***REMOVED***

    datalist = [(general, "Axes", ""***REMOVED******REMOVED***
    if has_curve:
        datalist.append((curves, "Curves", ""***REMOVED******REMOVED***

    def apply_callback(data***REMOVED***:
        ***REMOVED***This function will be called to apply changes***REMOVED***
        if has_curve:
            general, curves = data
        else:
            general, = data

        # Set / General
        title, xmin, xmax, xlabel, xscale, ymin, ymax, ylabel, yscale, \
            generate_legend = general

        if axes.get_xscale(***REMOVED*** != xscale:
            axes.set_xscale(xscale***REMOVED***
        if axes.get_yscale(***REMOVED*** != yscale:
            axes.set_yscale(yscale***REMOVED***

        axes.set_title(title***REMOVED***
        axes.set_xlim(xmin, xmax***REMOVED***
        axes.set_xlabel(xlabel***REMOVED***
        axes.set_ylim(ymin, ymax***REMOVED***
        axes.set_ylabel(ylabel***REMOVED***

        # Restore the unit data
        axes.xaxis.converter = xconverter
        axes.yaxis.converter = yconverter
        axes.xaxis.set_units(xunits***REMOVED***
        axes.yaxis.set_units(yunits***REMOVED***
        axes.xaxis._update_axisinfo(***REMOVED***
        axes.yaxis._update_axisinfo(***REMOVED***

        if has_curve:
            # Set / Curves
            for index, curve in enumerate(curves***REMOVED***:
                line = linedict[curvelabels[index***REMOVED******REMOVED***
                label, linestyle, drawstyle, linewidth, color, \
                    marker, markersize, markerfacecolor, markeredgecolor \
                    = curve
                line.set_label(label***REMOVED***
                line.set_linestyle(linestyle***REMOVED***
                line.set_drawstyle(drawstyle***REMOVED***
                line.set_linewidth(linewidth***REMOVED***
                line.set_color(color***REMOVED***
                if marker is not 'none':
                    line.set_marker(marker***REMOVED***
                    line.set_markersize(markersize***REMOVED***
                    line.set_markerfacecolor(markerfacecolor***REMOVED***
                    line.set_markeredgecolor(markeredgecolor***REMOVED***

        # re-generate legend, if checkbox is checked

        if generate_legend:
            draggable = None
            ncol = 1
            if axes.legend_ is not None:
                old_legend = axes.get_legend(***REMOVED***
                draggable = old_legend._draggable is not None
                ncol = old_legend._ncol
            new_legend = axes.legend(ncol=ncol***REMOVED***
            if new_legend:
                new_legend.draggable(draggable***REMOVED***

        # Redraw
        figure = axes.get_figure(***REMOVED***
        figure.canvas.draw(***REMOVED***

    data = formlayout.fedit(datalist, title="Figure options", parent=parent,
                            icon=get_icon('qt4_editor_options.svg'***REMOVED***,
                            apply=apply_callback***REMOVED***
    if data is not None:
        apply_callback(data***REMOVED***
