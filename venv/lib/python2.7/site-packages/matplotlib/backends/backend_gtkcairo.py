***REMOVED***
GTK+ Matplotlib interface using cairo (not GDK***REMOVED*** drawing operations.
Author: Steve Chaplin
***REMOVED***
from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six

import gtk
if gtk.pygtk_version < (2,7,0***REMOVED***:
    import cairo.gtk

from matplotlib.backends import backend_cairo
from matplotlib.backends.backend_gtk import *

backend_version = 'PyGTK(%d.%d.%d***REMOVED*** ' % gtk.pygtk_version + \
                  'Pycairo(%s***REMOVED***' % backend_cairo.backend_version


_debug = False
#_debug = True


def new_figure_manager(num, *args, **kwargs***REMOVED***:
    ***REMOVED***
    Create a new figure manager instance
    ***REMOVED***
    if _debug: print('backend_gtkcairo.%s(***REMOVED***' % fn_name(***REMOVED******REMOVED***
    FigureClass = kwargs.pop('FigureClass', Figure***REMOVED***
    thisFig = FigureClass(*args, **kwargs***REMOVED***
    return new_figure_manager_given_figure(num, thisFig***REMOVED***


def new_figure_manager_given_figure(num, figure***REMOVED***:
    ***REMOVED***
    Create a new figure manager instance for the given figure.
    ***REMOVED***
    canvas = FigureCanvasGTKCairo(figure***REMOVED***
    return FigureManagerGTK(canvas, num***REMOVED***


class RendererGTKCairo (backend_cairo.RendererCairo***REMOVED***:
    if gtk.pygtk_version >= (2,7,0***REMOVED***:
        def set_pixmap (self, pixmap***REMOVED***:
            self.gc.ctx = pixmap.cairo_create(***REMOVED***
    else:
        def set_pixmap (self, pixmap***REMOVED***:
            self.gc.ctx = cairo.gtk.gdk_cairo_create (pixmap***REMOVED***


class FigureCanvasGTKCairo(backend_cairo.FigureCanvasCairo, FigureCanvasGTK***REMOVED***:
    filetypes = FigureCanvasGTK.filetypes.copy(***REMOVED***
    filetypes.update(backend_cairo.FigureCanvasCairo.filetypes***REMOVED***

    def _renderer_init(self***REMOVED***:
        ***REMOVED***Override to use cairo (rather than GDK***REMOVED*** renderer***REMOVED***
        if _debug: print('%s.%s(***REMOVED***' % (self.__class__.__name__, _fn_name(***REMOVED******REMOVED******REMOVED***
        self._renderer = RendererGTKCairo (self.figure.dpi***REMOVED***


class FigureManagerGTKCairo(FigureManagerGTK***REMOVED***:
    def _get_toolbar(self, canvas***REMOVED***:
        # must be inited after the window, drawingArea and figure
        # attrs are set
        if matplotlib.rcParams['toolbar'***REMOVED***=='toolbar2':
            toolbar = NavigationToolbar2GTKCairo (canvas, self.window***REMOVED***
        else:
            toolbar = None
        return toolbar


class NavigationToolbar2Cairo(NavigationToolbar2GTK***REMOVED***:
    def _get_canvas(self, fig***REMOVED***:
        return FigureCanvasGTKCairo(fig***REMOVED***


FigureCanvas = FigureCanvasGTKCairo
FigureManager = FigureManagerGTKCairo
