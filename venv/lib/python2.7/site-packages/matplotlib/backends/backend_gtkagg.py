***REMOVED***
Render to gtk from agg
***REMOVED***
from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six

***REMOVED***

import matplotlib
from matplotlib.figure import Figure
from matplotlib.backends.backend_agg import FigureCanvasAgg
from matplotlib.backends.backend_gtk import gtk, FigureManagerGTK, FigureCanvasGTK,\
     show, draw_if_interactive,\
     error_msg_gtk, PIXELS_PER_INCH, backend_version, \
     NavigationToolbar2GTK
from matplotlib.backends._gtkagg import agg_to_gtk_drawable


DEBUG = False

class NavigationToolbar2GTKAgg(NavigationToolbar2GTK***REMOVED***:
    def _get_canvas(self, fig***REMOVED***:
        return FigureCanvasGTKAgg(fig***REMOVED***


class FigureManagerGTKAgg(FigureManagerGTK***REMOVED***:
    def _get_toolbar(self, canvas***REMOVED***:
        # must be inited after the window, drawingArea and figure
        # attrs are set
        if matplotlib.rcParams['toolbar'***REMOVED***=='toolbar2':
            toolbar = NavigationToolbar2GTKAgg (canvas, self.window***REMOVED***
        else:
            toolbar = None
        return toolbar


def new_figure_manager(num, *args, **kwargs***REMOVED***:
    ***REMOVED***
    Create a new figure manager instance
    ***REMOVED***
    if DEBUG: print('backend_gtkagg.new_figure_manager'***REMOVED***
    FigureClass = kwargs.pop('FigureClass', Figure***REMOVED***
    thisFig = FigureClass(*args, **kwargs***REMOVED***
    return new_figure_manager_given_figure(num, thisFig***REMOVED***


def new_figure_manager_given_figure(num, figure***REMOVED***:
    ***REMOVED***
    Create a new figure manager instance for the given figure.
    ***REMOVED***
    canvas = FigureCanvasGTKAgg(figure***REMOVED***
    return FigureManagerGTKAgg(canvas, num***REMOVED***
    if DEBUG: print('backend_gtkagg.new_figure_manager done'***REMOVED***


class FigureCanvasGTKAgg(FigureCanvasGTK, FigureCanvasAgg***REMOVED***:
    filetypes = FigureCanvasGTK.filetypes.copy(***REMOVED***
    filetypes.update(FigureCanvasAgg.filetypes***REMOVED***

    def configure_event(self, widget, event=None***REMOVED***:

        if DEBUG: print('FigureCanvasGTKAgg.configure_event'***REMOVED***
        if widget.window is None:
            return
        ***REMOVED***
            del self.renderer
        except AttributeError:
            pass
        w,h = widget.window.get_size(***REMOVED***
        if w==1 or h==1: return # empty fig

        # compute desired figure size in inches
        dpival = self.figure.dpi
        winch = w/dpival
        hinch = h/dpival
        self.figure.set_size_inches(winch, hinch***REMOVED***
        self._need_redraw = True
        self.resize_event(***REMOVED***
        if DEBUG: print('FigureCanvasGTKAgg.configure_event end'***REMOVED***
        return True

    def _render_figure(self, pixmap, width, height***REMOVED***:
        if DEBUG: print('FigureCanvasGTKAgg.render_figure'***REMOVED***
        FigureCanvasAgg.draw(self***REMOVED***
        if DEBUG: print('FigureCanvasGTKAgg.render_figure pixmap', pixmap***REMOVED***
        #agg_to_gtk_drawable(pixmap, self.renderer._renderer, None***REMOVED***

        buf = self.buffer_rgba(***REMOVED***
        ren = self.get_renderer(***REMOVED***
        w = int(ren.width***REMOVED***
        h = int(ren.height***REMOVED***

        pixbuf = gtk.gdk.pixbuf_new_from_data(
            buf, gtk.gdk.COLORSPACE_RGB,  True, 8, w, h, w*4***REMOVED***
        pixmap.draw_pixbuf(pixmap.new_gc(***REMOVED***, pixbuf, 0, 0, 0, 0, w, h,
                           gtk.gdk.RGB_DITHER_NONE, 0, 0***REMOVED***
        if DEBUG: print('FigureCanvasGTKAgg.render_figure done'***REMOVED***

    def blit(self, bbox=None***REMOVED***:
        if DEBUG: print('FigureCanvasGTKAgg.blit', self._pixmap***REMOVED***
        agg_to_gtk_drawable(self._pixmap, self.renderer._renderer, bbox***REMOVED***

        x, y, w, h = self.allocation

        self.window.draw_drawable (self.style.fg_gc[self.state***REMOVED***, self._pixmap,
                                   0, 0, 0, 0, w, h***REMOVED***
        if DEBUG: print('FigureCanvasGTKAgg.done'***REMOVED***

    def print_png(self, filename, *args, **kwargs***REMOVED***:
        # Do this so we can save the resolution of figure in the PNG file
        agg = self.switch_backends(FigureCanvasAgg***REMOVED***
        return agg.print_png(filename, *args, **kwargs***REMOVED***


***REMOVED***\
Traceback (most recent call last***REMOVED***:
  File "/home/titan/johnh/local/lib/python2.3/site-packages/matplotlib/backends/backend_gtk.py", line 304, in expose_event
    self._render_figure(self._pixmap, w, h***REMOVED***
  File "/home/titan/johnh/local/lib/python2.3/site-packages/matplotlib/backends/backend_gtkagg.py", line 77, in _render_figure
    pixbuf = gtk.gdk.pixbuf_new_from_data(
ValueError: data length (3156672***REMOVED*** is less then required by the other parameters (3160608***REMOVED***
***REMOVED***

FigureCanvas = FigureCanvasGTKAgg
FigureManager = FigureManagerGTKAgg
