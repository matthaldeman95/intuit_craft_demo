# -*- coding: utf-8 -*-

from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

import io
import re
import numpy as np
from matplotlib.externals import six

import matplotlib
import matplotlib.pyplot as plt
from matplotlib import patheffects
from matplotlib.testing.decorators import cleanup, knownfailureif


needs_ghostscript = knownfailureif(
    matplotlib.checkdep_ghostscript(***REMOVED***[0***REMOVED*** is None,
    "This test needs a ghostscript installation"***REMOVED***


needs_tex = knownfailureif(
    not matplotlib.checkdep_tex(***REMOVED***,
    "This test needs a TeX installation"***REMOVED***


def _test_savefig_to_stringio(format='ps', use_log=False***REMOVED***:
    fig, ax = plt.subplots(***REMOVED***
    buffers = [
        six.moves.StringIO(***REMOVED***,
        io.StringIO(***REMOVED***,
        io.BytesIO(***REMOVED******REMOVED***

    if use_log:
        ax.set_yscale('log'***REMOVED***

    ax.plot([1, 2***REMOVED***, [1, 2***REMOVED******REMOVED***
    ax.set_title("Déjà vu"***REMOVED***
    for buffer in buffers:
        fig.savefig(buffer, format=format***REMOVED***

    values = [x.getvalue(***REMOVED*** for x in buffers***REMOVED***

    if six.PY3:
        values = [
            values[0***REMOVED***.encode('ascii'***REMOVED***,
            values[1***REMOVED***.encode('ascii'***REMOVED***,
            values[2***REMOVED******REMOVED***

    # Remove comments from the output.  This includes things that
    # could change from run to run, such as the time.
    values = [re.sub(b'%%.*?\n', b'', x***REMOVED*** for x in values***REMOVED***

    assert values[0***REMOVED*** == values[1***REMOVED***
    assert values[1***REMOVED*** == values[2***REMOVED***.replace(b'\r\n', b'\n'***REMOVED***
    for buffer in buffers:
        buffer.close(***REMOVED***


@cleanup
def test_savefig_to_stringio(***REMOVED***:
    _test_savefig_to_stringio(***REMOVED***


@cleanup
@needs_ghostscript
def test_savefig_to_stringio_with_distiller(***REMOVED***:
    matplotlib.rcParams['ps.usedistiller'***REMOVED*** = 'ghostscript'
    _test_savefig_to_stringio(***REMOVED***


@cleanup
@needs_tex
def test_savefig_to_stringio_with_usetex(***REMOVED***:
    matplotlib.rcParams['text.latex.unicode'***REMOVED*** = True
    matplotlib.rcParams['text.usetex'***REMOVED*** = True
    _test_savefig_to_stringio(***REMOVED***


@cleanup
def test_savefig_to_stringio_eps(***REMOVED***:
    _test_savefig_to_stringio(format='eps'***REMOVED***


@cleanup
def test_savefig_to_stringio_eps_afm(***REMOVED***:
    matplotlib.rcParams['ps.useafm'***REMOVED*** = True
    _test_savefig_to_stringio(format='eps', use_log=True***REMOVED***


@cleanup
@needs_tex
def test_savefig_to_stringio_with_usetex_eps(***REMOVED***:
    matplotlib.rcParams['text.latex.unicode'***REMOVED*** = True
    matplotlib.rcParams['text.usetex'***REMOVED*** = True
    _test_savefig_to_stringio(format='eps'***REMOVED***


@cleanup
def test_composite_image(***REMOVED***:
    # Test that figures can be saved with and without combining multiple images
    # (on a single set of axes***REMOVED*** into a single composite image.
    X, Y = np.meshgrid(np.arange(-5, 5, 1***REMOVED***, np.arange(-5, 5, 1***REMOVED******REMOVED***
    Z = np.sin(Y ** 2***REMOVED***
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(1, 1, 1***REMOVED***
    ax.set_xlim(0, 3***REMOVED***
    ax.imshow(Z, extent=[0, 1, 0, 1***REMOVED******REMOVED***
    ax.imshow(Z[::-1***REMOVED***, extent=[2, 3, 0, 1***REMOVED******REMOVED***
    plt.rcParams['image.composite_image'***REMOVED*** = True
    with io.BytesIO(***REMOVED*** as ps:
        fig.savefig(ps, format="ps"***REMOVED***
        ps.seek(0***REMOVED***
        buff = ps.read(***REMOVED***
        assert buff.count(six.b(' colorimage'***REMOVED******REMOVED*** == 1
    plt.rcParams['image.composite_image'***REMOVED*** = False
    with io.BytesIO(***REMOVED*** as ps:
        fig.savefig(ps, format="ps"***REMOVED***
        ps.seek(0***REMOVED***
        buff = ps.read(***REMOVED***
        assert buff.count(six.b(' colorimage'***REMOVED******REMOVED*** == 2


@cleanup
def test_patheffects(***REMOVED***:
    with matplotlib.rc_context(***REMOVED***:
        matplotlib.rcParams['path.effects'***REMOVED*** = [
            patheffects.withStroke(linewidth=4, foreground='w'***REMOVED******REMOVED***
        fig, ax = plt.subplots(***REMOVED***
        ax.plot([1, 2, 3***REMOVED******REMOVED***
        with io.BytesIO(***REMOVED*** as ps:
            fig.savefig(ps, format='ps'***REMOVED***


@cleanup
@needs_tex
@needs_ghostscript
def test_tilde_in_tempfilename(***REMOVED***:
    # Tilde ~ in the tempdir path (e.g. TMPDIR, TMP oder TEMP on windows
    # when the username is very long and windows uses a short name***REMOVED*** breaks
    # latex before https://github.com/matplotlib/matplotlib/pull/5928
    import tempfile
    import shutil
    ***REMOVED***
    ***REMOVED***.path

    tempdir = None
    old_tempdir = tempfile.tempdir
    ***REMOVED***
        # change the path for new tempdirs, which is used
        # internally by the ps backend to write a file
        tempdir = tempfile.mkdtemp(***REMOVED***
        base_tempdir = os.path.join(tempdir, "short~1"***REMOVED***
        os.makedirs(base_tempdir***REMOVED***
        tempfile.tempdir = base_tempdir

        # usetex results in the latex call, which does not like the ~
        plt.rc('text', usetex=True***REMOVED***
        plt.plot([1, 2, 3, 4***REMOVED******REMOVED***
        plt.xlabel(r'\textbf{time***REMOVED*** (s***REMOVED***'***REMOVED***
        #matplotlib.verbose.set_level("debug"***REMOVED***
        output_eps = os.path.join(base_tempdir, 'tex_demo.eps'***REMOVED***
        # use the PS backend to write the file...
        plt.savefig(output_eps, format="ps"***REMOVED***
    finally:
        tempfile.tempdir = old_tempdir
        if tempdir:
            ***REMOVED***
                shutil.rmtree(tempdir***REMOVED***
            except Exception as e:
                # do not break if this is not removeable...
                print(e***REMOVED***


if __name__ == '__main__':
    import nose
    nose.runmodule(argv=['-s', '--with-doctest'***REMOVED***, exit=False***REMOVED***
