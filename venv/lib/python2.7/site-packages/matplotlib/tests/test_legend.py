from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six
from matplotlib.externals.six.moves import xrange
***REMOVED***
    # mock in python 3.3+
    from unittest import mock
except ImportError:
    import mock
from nose.tools import assert_equal
import numpy as np

from matplotlib.testing.decorators import image_comparison, cleanup
from matplotlib.cbook import MatplotlibDeprecationWarning
import matplotlib.pyplot as plt
import matplotlib as mpl
import matplotlib.patches as mpatches


@image_comparison(baseline_images=['legend_auto1'***REMOVED***, remove_text=True***REMOVED***
def test_legend_auto1(***REMOVED***:
    'Test automatic legend placement'
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(111***REMOVED***
    x = np.arange(100***REMOVED***
    ax.plot(x, 50 - x, 'o', label='y=1'***REMOVED***
    ax.plot(x, x - 50, 'o', label='y=-1'***REMOVED***
    ax.legend(loc=0***REMOVED***


@image_comparison(baseline_images=['legend_auto2'***REMOVED***, remove_text=True***REMOVED***
def test_legend_auto2(***REMOVED***:
    'Test automatic legend placement'
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(111***REMOVED***
    x = np.arange(100***REMOVED***
    b1 = ax.bar(x, x, color='m'***REMOVED***
    b2 = ax.bar(x, x[::-1***REMOVED***, color='g'***REMOVED***
    ax.legend([b1[0***REMOVED***, b2[0***REMOVED******REMOVED***, ['up', 'down'***REMOVED***, loc=0***REMOVED***


@image_comparison(baseline_images=['legend_auto3'***REMOVED******REMOVED***
def test_legend_auto3(***REMOVED***:
    'Test automatic legend placement'
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(111***REMOVED***
    x = [0.9, 0.1, 0.1, 0.9, 0.9, 0.5***REMOVED***
    y = [0.95, 0.95, 0.05, 0.05, 0.5, 0.5***REMOVED***
    ax.plot(x, y, 'o-', label='line'***REMOVED***
    ax.set_xlim(0.0, 1.0***REMOVED***
    ax.set_ylim(0.0, 1.0***REMOVED***
    ax.legend(loc=0***REMOVED***


@image_comparison(baseline_images=['legend_various_labels'***REMOVED***, remove_text=True***REMOVED***
def test_various_labels(***REMOVED***:
    # tests all sorts of label types
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(121***REMOVED***
    ax.plot(list(xrange(4***REMOVED******REMOVED***, 'o', label=1***REMOVED***
    ax.plot(np.linspace(4, 4.1***REMOVED***, 'o', label='D\xe9velopp\xe9s'***REMOVED***
    ax.plot(list(xrange(4, 1, -1***REMOVED******REMOVED***, 'o', label='__nolegend__'***REMOVED***
    ax.legend(numpoints=1, loc=0***REMOVED***


@image_comparison(baseline_images=['legend_labels_first'***REMOVED***, extensions=['png'***REMOVED***,
                  remove_text=True***REMOVED***
def test_labels_first(***REMOVED***:
    # test labels to left of markers
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(111***REMOVED***
    ax.plot(np.arange(10***REMOVED***, '-o', label=1***REMOVED***
    ax.plot(np.ones(10***REMOVED****5, ':x', label="x"***REMOVED***
    ax.plot(np.arange(20, 10, -1***REMOVED***, 'd', label="diamond"***REMOVED***
    ax.legend(loc=0, markerfirst=False***REMOVED***


@image_comparison(baseline_images=['rgba_alpha'***REMOVED***,
                  extensions=['png'***REMOVED***, remove_text=True***REMOVED***
def test_alpha_rgba(***REMOVED***:
    import matplotlib.pyplot as plt

    fig, ax = plt.subplots(1, 1***REMOVED***
    ax.plot(range(10***REMOVED***, lw=5***REMOVED***
    leg = plt.legend(['Longlabel that will go away'***REMOVED***, loc=10***REMOVED***
    leg.legendPatch.set_facecolor([1, 0, 0, 0.5***REMOVED******REMOVED***


@image_comparison(baseline_images=['rcparam_alpha'***REMOVED***,
                  extensions=['png'***REMOVED***, remove_text=True***REMOVED***
def test_alpha_rcparam(***REMOVED***:
    import matplotlib.pyplot as plt

    fig, ax = plt.subplots(1, 1***REMOVED***
    ax.plot(range(10***REMOVED***, lw=5***REMOVED***
    with mpl.rc_context(rc={'legend.framealpha': .75***REMOVED******REMOVED***:
        leg = plt.legend(['Longlabel that will go away'***REMOVED***, loc=10***REMOVED***
        # this alpha is going to be over-ridden by the rcparam whith
        # sets the alpha of the patch to be non-None which causes the alpha
        # value of the face color to be discarded.  This behavior may not be
        # ideal, but it is what it is and we should keep track of it changing
        leg.legendPatch.set_facecolor([1, 0, 0, 0.5***REMOVED******REMOVED***


@image_comparison(baseline_images=['fancy'***REMOVED***, remove_text=True***REMOVED***
def test_fancy(***REMOVED***:
    # using subplot triggers some offsetbox functionality untested elsewhere
    plt.subplot(121***REMOVED***
    plt.scatter(list(xrange(10***REMOVED******REMOVED***, list(xrange(10, 0, -1***REMOVED******REMOVED***, label='XX\nXX'***REMOVED***
    plt.plot([5***REMOVED*** * 10, 'o--', label='XX'***REMOVED***
    plt.errorbar(list(xrange(10***REMOVED******REMOVED***, list(xrange(10***REMOVED******REMOVED***, xerr=0.5, yerr=0.5, label='XX'***REMOVED***
    plt.legend(loc="center left", bbox_to_anchor=[1.0, 0.5***REMOVED***,
               ncol=2, shadow=True, title="My legend", numpoints=1***REMOVED***


@image_comparison(baseline_images=['framealpha'***REMOVED***, remove_text=True***REMOVED***
def test_framealpha(***REMOVED***:
    x = np.linspace(1, 100, 100***REMOVED***
    y = x
    plt.plot(x, y, label='mylabel', lw=10***REMOVED***
    plt.legend(framealpha=0.5***REMOVED***


@image_comparison(baseline_images=['scatter_rc3', 'scatter_rc1'***REMOVED***, remove_text=True***REMOVED***
def test_rc(***REMOVED***:
    # using subplot triggers some offsetbox functionality untested elsewhere
    fig = plt.figure(***REMOVED***
    ax = plt.subplot(121***REMOVED***
    ax.scatter(list(xrange(10***REMOVED******REMOVED***, list(xrange(10, 0, -1***REMOVED******REMOVED***, label='three'***REMOVED***
    ax.legend(loc="center left", bbox_to_anchor=[1.0, 0.5***REMOVED***,
              title="My legend"***REMOVED***

    mpl.rcParams['legend.scatterpoints'***REMOVED*** = 1
    fig = plt.figure(***REMOVED***
    ax = plt.subplot(121***REMOVED***
    ax.scatter(list(xrange(10***REMOVED******REMOVED***, list(xrange(10, 0, -1***REMOVED******REMOVED***, label='one'***REMOVED***
    ax.legend(loc="center left", bbox_to_anchor=[1.0, 0.5***REMOVED***,
              title="My legend"***REMOVED***


@image_comparison(baseline_images=['legend_expand'***REMOVED***, remove_text=True***REMOVED***
def test_legend_expand(***REMOVED***:
    'Test expand mode'
    legend_modes = [None, "expand"***REMOVED***
    fig, axes_list = plt.subplots(len(legend_modes***REMOVED***, 1***REMOVED***
    x = np.arange(100***REMOVED***
    for ax, mode in zip(axes_list, legend_modes***REMOVED***:
        ax.plot(x, 50 - x, 'o', label='y=1'***REMOVED***
        l1 = ax.legend(loc=2, mode=mode***REMOVED***
        ax.add_artist(l1***REMOVED***
        ax.plot(x, x - 50, 'o', label='y=-1'***REMOVED***
        l2 = ax.legend(loc=5, mode=mode***REMOVED***
        ax.add_artist(l2***REMOVED***
        ax.legend(loc=3, mode=mode, ncol=2***REMOVED***


@cleanup
def test_legend_remove(***REMOVED***:
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(1, 1, 1***REMOVED***
    lines = ax.plot(range(10***REMOVED******REMOVED***
    leg = fig.legend(lines, "test"***REMOVED***
    leg.remove(***REMOVED***
    assert_equal(fig.legends, [***REMOVED******REMOVED***
    leg = ax.legend("test"***REMOVED***
    leg.remove(***REMOVED***
    assert ax.get_legend(***REMOVED*** is None


class TestLegendFunction(object***REMOVED***:
    # Tests the legend function on the Axes and pyplot.
    @cleanup
    def test_legend_handle_label(self***REMOVED***:
        lines = plt.plot(range(10***REMOVED******REMOVED***
        with mock.patch('matplotlib.legend.Legend'***REMOVED*** as Legend:
            plt.legend(lines, ['hello world'***REMOVED******REMOVED***
        Legend.assert_called_with(plt.gca(***REMOVED***, lines, ['hello world'***REMOVED******REMOVED***

    @cleanup
    def test_legend_no_args(self***REMOVED***:
        lines = plt.plot(range(10***REMOVED***, label='hello world'***REMOVED***
        with mock.patch('matplotlib.legend.Legend'***REMOVED*** as Legend:
            plt.legend(***REMOVED***
        Legend.assert_called_with(plt.gca(***REMOVED***, lines, ['hello world'***REMOVED******REMOVED***

    @cleanup
    def test_legend_label_args(self***REMOVED***:
        lines = plt.plot(range(10***REMOVED***, label='hello world'***REMOVED***
        with mock.patch('matplotlib.legend.Legend'***REMOVED*** as Legend:
            plt.legend(['foobar'***REMOVED******REMOVED***
        Legend.assert_called_with(plt.gca(***REMOVED***, lines, ['foobar'***REMOVED******REMOVED***

    @cleanup
    def test_legend_handler_map(self***REMOVED***:
        lines = plt.plot(range(10***REMOVED***, label='hello world'***REMOVED***
        with mock.patch('matplotlib.axes.Axes.'
                        'get_legend_handles_labels'***REMOVED*** as handles_labels:
            handles_labels.return_value = lines, ['hello world'***REMOVED***
            plt.legend(handler_map={'1': 2***REMOVED******REMOVED***
        handles_labels.assert_called_with({'1': 2***REMOVED******REMOVED***

    @cleanup
    def test_kwargs(self***REMOVED***:
        fig, ax = plt.subplots(1, 1***REMOVED***
        th = np.linspace(0, 2*np.pi, 1024***REMOVED***
        lns, = ax.plot(th, np.sin(th***REMOVED***, label='sin', lw=5***REMOVED***
        lnc, = ax.plot(th, np.cos(th***REMOVED***, label='cos', lw=5***REMOVED***
        with mock.patch('matplotlib.legend.Legend'***REMOVED*** as Legend:
            ax.legend(handles=(lnc, lns***REMOVED***, labels=('a', 'b'***REMOVED******REMOVED***
        Legend.assert_called_with(ax, (lnc, lns***REMOVED***, ('a', 'b'***REMOVED******REMOVED***

    @cleanup
    def test_warn_args_kwargs(self***REMOVED***:
        fig, ax = plt.subplots(1, 1***REMOVED***
        th = np.linspace(0, 2*np.pi, 1024***REMOVED***
        lns, = ax.plot(th, np.sin(th***REMOVED***, label='sin', lw=5***REMOVED***
        lnc, = ax.plot(th, np.cos(th***REMOVED***, label='cos', lw=5***REMOVED***
        with mock.patch('warnings.warn'***REMOVED*** as warn:
            ax.legend((lnc, lns***REMOVED***, labels=('a', 'b'***REMOVED******REMOVED***

        warn.assert_called_with("You have mixed positional and keyword "
                          "arguments, some input will be "
                          "discarded."***REMOVED***


@image_comparison(baseline_images=['legend_stackplot'***REMOVED***, extensions=['png'***REMOVED******REMOVED***
def test_legend_stackplot(***REMOVED***:
    '''test legend for PolyCollection using stackplot'''
    # related to #1341, #1943, and PR #3303
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(111***REMOVED***
    x = np.linspace(0, 10, 10***REMOVED***
    y1 = 1.0 * x
    y2 = 2.0 * x + 1
    y3 = 3.0 * x + 2
    ax.stackplot(x, y1, y2, y3, labels=['y1', 'y2', 'y3'***REMOVED******REMOVED***
    ax.set_xlim((0, 10***REMOVED******REMOVED***
    ax.set_ylim((0, 70***REMOVED******REMOVED***
    ax.legend(loc=0***REMOVED***


@cleanup
def test_cross_figure_patch_legend(***REMOVED***:
    fig, ax = plt.subplots(***REMOVED***
    fig2, ax2 = plt.subplots(***REMOVED***

    brs = ax.bar(range(3***REMOVED***, range(3***REMOVED******REMOVED***
    fig2.legend(brs, 'foo'***REMOVED***


@cleanup
def test_nanscatter(***REMOVED***:
    fig, ax = plt.subplots(***REMOVED***

    h = ax.scatter([np.nan***REMOVED***, [np.nan***REMOVED***, marker="o",
                   facecolor="r", edgecolor="r", s=3***REMOVED***

    ax.legend([h***REMOVED***, ["scatter"***REMOVED******REMOVED***

    fig, ax = plt.subplots(***REMOVED***
    for color in ['red', 'green', 'blue'***REMOVED***:
        n = 750
        x, y = np.random.rand(2, n***REMOVED***
        scale = 200.0 * np.random.rand(n***REMOVED***
        ax.scatter(x, y, c=color, s=scale, label=color,
                   alpha=0.3, edgecolors='none'***REMOVED***

    ax.legend(***REMOVED***
    ax.grid(True***REMOVED***


if __name__ == '__main__':
    import nose
    nose.runmodule(argv=['-s', '--with-doctest'***REMOVED***, exit=False***REMOVED***
