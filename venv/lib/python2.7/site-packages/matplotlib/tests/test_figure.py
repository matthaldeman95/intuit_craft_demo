from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six
from matplotlib.externals.six.moves import xrange

from nose.tools import assert_equal, assert_true
from matplotlib.testing.decorators import image_comparison, cleanup
from matplotlib.axes import Axes
import matplotlib.pyplot as plt
import numpy as np


@cleanup
def test_figure_label(***REMOVED***:
    # pyplot figure creation, selection and closing with figure label and
    # number
    plt.close('all'***REMOVED***
    plt.figure('today'***REMOVED***
    plt.figure(3***REMOVED***
    plt.figure('tomorrow'***REMOVED***
    plt.figure(***REMOVED***
    plt.figure(0***REMOVED***
    plt.figure(1***REMOVED***
    plt.figure(3***REMOVED***
    assert_equal(plt.get_fignums(***REMOVED***, [0, 1, 3, 4, 5***REMOVED******REMOVED***
    assert_equal(plt.get_figlabels(***REMOVED***, ['', 'today', '', 'tomorrow', ''***REMOVED******REMOVED***
    plt.close(10***REMOVED***
    plt.close(***REMOVED***
    plt.close(5***REMOVED***
    plt.close('tomorrow'***REMOVED***
    assert_equal(plt.get_fignums(***REMOVED***, [0, 1***REMOVED******REMOVED***
    assert_equal(plt.get_figlabels(***REMOVED***, ['', 'today'***REMOVED******REMOVED***


@cleanup
def test_fignum_exists(***REMOVED***:
    # pyplot figure creation, selection and closing with fignum_exists
    plt.figure('one'***REMOVED***
    plt.figure(2***REMOVED***
    plt.figure('three'***REMOVED***
    plt.figure(***REMOVED***
    assert_equal(plt.fignum_exists('one'***REMOVED***, True***REMOVED***
    assert_equal(plt.fignum_exists(2***REMOVED***, True***REMOVED***
    assert_equal(plt.fignum_exists('three'***REMOVED***, True***REMOVED***
    assert_equal(plt.fignum_exists(4***REMOVED***, True***REMOVED***
    plt.close('one'***REMOVED***
    plt.close(4***REMOVED***
    assert_equal(plt.fignum_exists('one'***REMOVED***, False***REMOVED***
    assert_equal(plt.fignum_exists(4***REMOVED***, False***REMOVED***


@image_comparison(baseline_images=['figure_today'***REMOVED******REMOVED***
def test_figure(***REMOVED***:
    # named figure support
    fig = plt.figure('today'***REMOVED***
    ax = fig.add_subplot(111***REMOVED***
    ax.set_title(fig.get_label(***REMOVED******REMOVED***
    ax.plot(list(xrange(5***REMOVED******REMOVED******REMOVED***
    # plot red line in a different figure.
    plt.figure('tomorrow'***REMOVED***
    plt.plot([0, 1***REMOVED***, [1, 0***REMOVED***, 'r'***REMOVED***
    # Return to the original; make sure the red line is not there.
    plt.figure('today'***REMOVED***
    plt.close('tomorrow'***REMOVED***


@cleanup
def test_gca(***REMOVED***:
    fig = plt.figure(***REMOVED***

    ax1 = fig.add_axes([0, 0, 1, 1***REMOVED******REMOVED***
    assert_true(fig.gca(projection='rectilinear'***REMOVED*** is ax1***REMOVED***
    assert_true(fig.gca(***REMOVED*** is ax1***REMOVED***

    ax2 = fig.add_subplot(121, projection='polar'***REMOVED***
    assert_true(fig.gca(***REMOVED*** is ax2***REMOVED***
    assert_true(fig.gca(polar=True***REMOVED***is ax2***REMOVED***

    ax3 = fig.add_subplot(122***REMOVED***
    assert_true(fig.gca(***REMOVED*** is ax3***REMOVED***

    # the final request for a polar axes will end up creating one
    # with a spec of 111.
    assert_true(fig.gca(polar=True***REMOVED*** is not ax3***REMOVED***
    assert_true(fig.gca(polar=True***REMOVED*** is not ax2***REMOVED***
    assert_equal(fig.gca(***REMOVED***.get_geometry(***REMOVED***, (1, 1, 1***REMOVED******REMOVED***

    fig.sca(ax1***REMOVED***
    assert_true(fig.gca(projection='rectilinear'***REMOVED*** is ax1***REMOVED***
    assert_true(fig.gca(***REMOVED*** is ax1***REMOVED***


@image_comparison(baseline_images=['figure_suptitle'***REMOVED******REMOVED***
def test_suptitle(***REMOVED***:
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(1, 1, 1***REMOVED***
    fig.suptitle('hello', color='r'***REMOVED***
    fig.suptitle('title', color='g', rotation='30'***REMOVED***


@image_comparison(baseline_images=['alpha_background'***REMOVED***,
                  # only test png and svg. The PDF output appears correct,
                  # but Ghostscript does not preserve the background color.
                  extensions=['png', 'svg'***REMOVED***,
                  savefig_kwarg={'facecolor': (0, 1, 0.4***REMOVED***,
                                 'edgecolor': 'none'***REMOVED******REMOVED***
def test_alpha(***REMOVED***:
    # We want an image which has a background color and an
    # alpha of 0.4.
    fig = plt.figure(figsize=[2, 1***REMOVED******REMOVED***
    fig.set_facecolor((0, 1, 0.4***REMOVED******REMOVED***
    fig.patch.set_alpha(0.4***REMOVED***

    import matplotlib.patches as mpatches
    fig.patches.append(mpatches.CirclePolygon([20, 20***REMOVED***,
                                              radius=15,
                                              alpha=0.6,
                                              facecolor='red'***REMOVED******REMOVED***


@cleanup
def test_too_many_figures(***REMOVED***:
    import warnings

    with warnings.catch_warnings(record=True***REMOVED*** as w:
        for i in range(22***REMOVED***:
            fig = plt.figure(***REMOVED***
    assert len(w***REMOVED*** == 1


def test_iterability_axes_argument(***REMOVED***:

    # This is a regression test for matplotlib/matplotlib#3196. If one of the
    # arguments returned by _as_mpl_axes defines __getitem__ but is not
    # iterable, this would raise an execption. This is because we check
    # whether the arguments are iterable, and if so we try and convert them
    # to a tuple. However, the ``iterable`` function returns True if
    # __getitem__ is present, but some classes can define __getitem__ without
    # being iterable. The tuple conversion is now done in a try...except in
    # case it fails.

    class MyAxes(Axes***REMOVED***:
        def __init__(self, *args, **kwargs***REMOVED***:
            kwargs.pop('myclass', None***REMOVED***
            return Axes.__init__(self, *args, **kwargs***REMOVED***

    class MyClass(object***REMOVED***:

        def __getitem__(self, item***REMOVED***:
            if item != 'a':
                raise ValueError("item should be a"***REMOVED***

        def _as_mpl_axes(self***REMOVED***:
            return MyAxes, {'myclass': self***REMOVED***

    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(1, 1, 1, projection=MyClass(***REMOVED******REMOVED***
    plt.close(fig***REMOVED***


@cleanup
def test_set_fig_size(***REMOVED***:
    fig = plt.figure(***REMOVED***

    # check figwidth
    fig.set_figwidth(5***REMOVED***
    assert_equal(fig.get_figwidth(***REMOVED***, 5***REMOVED***

    # check figheight
    fig.set_figheight(1***REMOVED***
    assert_equal(fig.get_figheight(***REMOVED***, 1***REMOVED***

    # check using set_size_inches
    fig.set_size_inches(2, 4***REMOVED***
    assert_equal(fig.get_figwidth(***REMOVED***, 2***REMOVED***
    assert_equal(fig.get_figheight(***REMOVED***, 4***REMOVED***

    # check using tuple to first argument
    fig.set_size_inches((1, 3***REMOVED******REMOVED***
    assert_equal(fig.get_figwidth(***REMOVED***, 1***REMOVED***
    assert_equal(fig.get_figheight(***REMOVED***, 3***REMOVED***


@cleanup
def test_axes_remove(***REMOVED***:
    fig, axes = plt.subplots(2, 2***REMOVED***
    axes[-1, -1***REMOVED***.remove(***REMOVED***
    for ax in axes.ravel(***REMOVED***[:-1***REMOVED***:
        assert ax in fig.axes
    assert axes[-1, -1***REMOVED*** not in fig.axes
    assert_equal(len(fig.axes***REMOVED***, 3***REMOVED***


def test_figaspect(***REMOVED***:
    w, h = plt.figaspect(np.float64(2***REMOVED*** / np.float64(1***REMOVED******REMOVED***
    assert h / w == 2
    w, h = plt.figaspect(2***REMOVED***
    assert h / w == 2
    w, h = plt.figaspect(np.zeros((1, 2***REMOVED******REMOVED******REMOVED***
    assert h / w == 0.5
    w, h = plt.figaspect(np.zeros((2, 2***REMOVED******REMOVED******REMOVED***
    assert h / w == 1


if __name__ == "__main__":
    import nose
    nose.runmodule(argv=['-s', '--with-doctest'***REMOVED***, exit=False***REMOVED***
