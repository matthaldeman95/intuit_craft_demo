from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***
import itertools
from weakref import ref
import warnings

from matplotlib.externals import six

from datetime import datetime

import numpy as np
from numpy.testing.utils import (assert_array_equal, assert_approx_equal,
                                 assert_array_almost_equal***REMOVED***
from nose.tools import (assert_equal, assert_not_equal, raises, assert_true,
                        assert_raises***REMOVED***

import matplotlib.cbook as cbook
import matplotlib.colors as mcolors
from matplotlib.cbook import delete_masked_points as dmp


def test_is_string_like(***REMOVED***:
    y = np.arange(10***REMOVED***
    assert_equal(cbook.is_string_like(y***REMOVED***, False***REMOVED***
    y.shape = 10, 1
    assert_equal(cbook.is_string_like(y***REMOVED***, False***REMOVED***
    y.shape = 1, 10
    assert_equal(cbook.is_string_like(y***REMOVED***, False***REMOVED***

    assert cbook.is_string_like("hello world"***REMOVED***
    assert_equal(cbook.is_string_like(10***REMOVED***, False***REMOVED***

    y = ['a', 'b', 'c'***REMOVED***
    assert_equal(cbook.is_string_like(y***REMOVED***, False***REMOVED***

    y = np.array(y***REMOVED***
    assert_equal(cbook.is_string_like(y***REMOVED***, False***REMOVED***

    y = np.array(y, dtype=object***REMOVED***
    assert cbook.is_string_like(y***REMOVED***


def test_is_sequence_of_strings(***REMOVED***:
    y = ['a', 'b', 'c'***REMOVED***
    assert cbook.is_sequence_of_strings(y***REMOVED***

    y = np.array(y, dtype=object***REMOVED***
    assert cbook.is_sequence_of_strings(y***REMOVED***


def test_is_hashable(***REMOVED***:
    s = 'string'
    assert cbook.is_hashable(s***REMOVED***

    lst = ['list', 'of', 'stings'***REMOVED***
    assert not cbook.is_hashable(lst***REMOVED***


def test_restrict_dict(***REMOVED***:
    d = {'foo': 'bar', 1: 2***REMOVED***
    d1 = cbook.restrict_dict(d, ['foo', 1***REMOVED******REMOVED***
    assert_equal(d1, d***REMOVED***
    d2 = cbook.restrict_dict(d, ['bar', 2***REMOVED******REMOVED***
    assert_equal(d2, {***REMOVED******REMOVED***
    d3 = cbook.restrict_dict(d, {'foo': 1***REMOVED******REMOVED***
    assert_equal(d3, {'foo': 'bar'***REMOVED******REMOVED***
    d4 = cbook.restrict_dict(d, {***REMOVED******REMOVED***
    assert_equal(d4, {***REMOVED******REMOVED***
    d5 = cbook.restrict_dict(d, set(['foo', 2***REMOVED******REMOVED******REMOVED***
    assert_equal(d5, {'foo': 'bar'***REMOVED******REMOVED***
    # check that d was not modified
    assert_equal(d, {'foo': 'bar', 1: 2***REMOVED******REMOVED***


class Test_delete_masked_points(object***REMOVED***:
    def setUp(self***REMOVED***:
        self.mask1 = [False, False, True, True, False, False***REMOVED***
        self.arr0 = np.arange(1.0, 7.0***REMOVED***
        self.arr1 = [1, 2, 3, np.nan, np.nan, 6***REMOVED***
        self.arr2 = np.array(self.arr1***REMOVED***
        self.arr3 = np.ma.array(self.arr2, mask=self.mask1***REMOVED***
        self.arr_s = ['a', 'b', 'c', 'd', 'e', 'f'***REMOVED***
        self.arr_s2 = np.array(self.arr_s***REMOVED***
        self.arr_dt = [datetime(2008, 1, 1***REMOVED***, datetime(2008, 1, 2***REMOVED***,
                       datetime(2008, 1, 3***REMOVED***, datetime(2008, 1, 4***REMOVED***,
                       datetime(2008, 1, 5***REMOVED***, datetime(2008, 1, 6***REMOVED******REMOVED***
        self.arr_dt2 = np.array(self.arr_dt***REMOVED***
        self.arr_colors = ['r', 'g', 'b', 'c', 'm', 'y'***REMOVED***
        self.arr_rgba = mcolors.colorConverter.to_rgba_array(self.arr_colors***REMOVED***

    @raises(ValueError***REMOVED***
    def test_bad_first_arg(self***REMOVED***:
        dmp('a string', self.arr0***REMOVED***

    def test_string_seq(self***REMOVED***:
        actual = dmp(self.arr_s, self.arr1***REMOVED***
        ind = [0, 1, 2, 5***REMOVED***
        expected = (self.arr_s2.take(ind***REMOVED***, self.arr2.take(ind***REMOVED******REMOVED***
        assert_array_equal(actual[0***REMOVED***, expected[0***REMOVED******REMOVED***
        assert_array_equal(actual[1***REMOVED***, expected[1***REMOVED******REMOVED***

    def test_datetime(self***REMOVED***:
        actual = dmp(self.arr_dt, self.arr3***REMOVED***
        ind = [0, 1,  5***REMOVED***
        expected = (self.arr_dt2.take(ind***REMOVED***,
                    self.arr3.take(ind***REMOVED***.compressed(***REMOVED******REMOVED***
        assert_array_equal(actual[0***REMOVED***, expected[0***REMOVED******REMOVED***
        assert_array_equal(actual[1***REMOVED***, expected[1***REMOVED******REMOVED***

    def test_rgba(self***REMOVED***:
        actual = dmp(self.arr3, self.arr_rgba***REMOVED***
        ind = [0, 1, 5***REMOVED***
        expected = (self.arr3.take(ind***REMOVED***.compressed(***REMOVED***,
                    self.arr_rgba.take(ind, axis=0***REMOVED******REMOVED***
        assert_array_equal(actual[0***REMOVED***, expected[0***REMOVED******REMOVED***
        assert_array_equal(actual[1***REMOVED***, expected[1***REMOVED******REMOVED***


def test_allequal(***REMOVED***:
    assert(cbook.allequal([1, 1, 1***REMOVED******REMOVED******REMOVED***
    assert(not cbook.allequal([1, 1, 0***REMOVED******REMOVED******REMOVED***
    assert(cbook.allequal([***REMOVED******REMOVED******REMOVED***
    assert(cbook.allequal(('a', 'a'***REMOVED******REMOVED******REMOVED***
    assert(not cbook.allequal(('a', 'b'***REMOVED******REMOVED******REMOVED***


class Test_boxplot_stats(object***REMOVED***:
    def setup(self***REMOVED***:
        np.random.seed(937***REMOVED***
        self.nrows = 37
        self.ncols = 4
        self.data = np.random.lognormal(size=(self.nrows, self.ncols***REMOVED***,
                                        mean=1.5, sigma=1.75***REMOVED***
        self.known_keys = sorted([
            'mean', 'med', 'q1', 'q3', 'iqr',
            'cilo', 'cihi', 'whislo', 'whishi',
            'fliers', 'label'
        ***REMOVED******REMOVED***
        self.std_results = cbook.boxplot_stats(self.data***REMOVED***

        self.known_nonbootstrapped_res = {
            'cihi': 6.8161283264444847,
            'cilo': -0.1489815330368689,
            'iqr': 13.492709959447094,
            'mean': 13.00447442387868,
            'med': 3.3335733967038079,
            'fliers': np.array([
                92.55467075,  87.03819018,  42.23204914,  39.29390996
            ***REMOVED******REMOVED***,
            'q1': 1.3597529879465153,
            'q3': 14.85246294739361,
            'whishi': 27.899688243699629,
            'whislo': 0.042143774965502923
    ***REMOVED***

        self.known_bootstrapped_ci = {
            'cihi': 8.939577523357828,
            'cilo': 1.8692703958676578,
    ***REMOVED***

        self.known_whis3_res = {
            'whishi': 42.232049135969874,
            'whislo': 0.042143774965502923,
            'fliers': np.array([92.55467075, 87.03819018***REMOVED******REMOVED***,
    ***REMOVED***

        self.known_res_percentiles = {
            'whislo':   0.1933685896907924,
            'whishi':  42.232049135969874
    ***REMOVED***

        self.known_res_range = {
            'whislo': 0.042143774965502923,
            'whishi': 92.554670752188699

    ***REMOVED***

    def test_form_main_list(self***REMOVED***:
        assert_true(isinstance(self.std_results, list***REMOVED******REMOVED***

    def test_form_each_dict(self***REMOVED***:
        for res in self.std_results:
            assert_true(isinstance(res, dict***REMOVED******REMOVED***

    def test_form_dict_keys(self***REMOVED***:
        for res in self.std_results:
            keys = sorted(list(res.keys(***REMOVED******REMOVED******REMOVED***
            for key in keys:
                assert_true(key in self.known_keys***REMOVED***

    def test_results_baseline(self***REMOVED***:
        res = self.std_results[0***REMOVED***
        for key in list(self.known_nonbootstrapped_res.keys(***REMOVED******REMOVED***:
            if key != 'fliers':
                assert_statement = assert_approx_equal
            else:
                assert_statement = assert_array_almost_equal

            assert_statement(
                res[key***REMOVED***,
                self.known_nonbootstrapped_res[key***REMOVED***
            ***REMOVED***

    def test_results_bootstrapped(self***REMOVED***:
        results = cbook.boxplot_stats(self.data, bootstrap=10000***REMOVED***
        res = results[0***REMOVED***
        for key in list(self.known_bootstrapped_ci.keys(***REMOVED******REMOVED***:
            assert_approx_equal(
                res[key***REMOVED***,
                self.known_bootstrapped_ci[key***REMOVED***
            ***REMOVED***

    def test_results_whiskers_float(self***REMOVED***:
        results = cbook.boxplot_stats(self.data, whis=3***REMOVED***
        res = results[0***REMOVED***
        for key in list(self.known_whis3_res.keys(***REMOVED******REMOVED***:
            if key != 'fliers':
                assert_statement = assert_approx_equal
            else:
                assert_statement = assert_array_almost_equal

            assert_statement(
                res[key***REMOVED***,
                self.known_whis3_res[key***REMOVED***
            ***REMOVED***

    def test_results_whiskers_range(self***REMOVED***:
        results = cbook.boxplot_stats(self.data, whis='range'***REMOVED***
        res = results[0***REMOVED***
        for key in list(self.known_res_range.keys(***REMOVED******REMOVED***:
            if key != 'fliers':
                assert_statement = assert_approx_equal
            else:
                assert_statement = assert_array_almost_equal

            assert_statement(
                res[key***REMOVED***,
                self.known_res_range[key***REMOVED***
            ***REMOVED***

    def test_results_whiskers_percentiles(self***REMOVED***:
        results = cbook.boxplot_stats(self.data, whis=[5, 95***REMOVED******REMOVED***
        res = results[0***REMOVED***
        for key in list(self.known_res_percentiles.keys(***REMOVED******REMOVED***:
            if key != 'fliers':
                assert_statement = assert_approx_equal
            else:
                assert_statement = assert_array_almost_equal

            assert_statement(
                res[key***REMOVED***,
                self.known_res_percentiles[key***REMOVED***
            ***REMOVED***

    def test_results_withlabels(self***REMOVED***:
        labels = ['Test1', 2, 'ardvark', 4***REMOVED***
        results = cbook.boxplot_stats(self.data, labels=labels***REMOVED***
        res = results[0***REMOVED***
        for lab, res in zip(labels, results***REMOVED***:
            assert_equal(res['label'***REMOVED***, lab***REMOVED***

        results = cbook.boxplot_stats(self.data***REMOVED***
        for res in results:
            assert('label' not in res***REMOVED***

    @raises(ValueError***REMOVED***
    def test_label_error(self***REMOVED***:
        labels = [1, 2***REMOVED***
        results = cbook.boxplot_stats(self.data, labels=labels***REMOVED***

    @raises(ValueError***REMOVED***
    def test_bad_dims(self***REMOVED***:
        data = np.random.normal(size=(34, 34, 34***REMOVED******REMOVED***
        results = cbook.boxplot_stats(data***REMOVED***

    def test_boxplot_stats_autorange_false(self***REMOVED***:
        x = np.zeros(shape=140***REMOVED***
        x = np.hstack([-25, x, 25***REMOVED******REMOVED***
        bstats_false = cbook.boxplot_stats(x, autorange=False***REMOVED***
        bstats_true = cbook.boxplot_stats(x, autorange=True***REMOVED***

        assert_equal(bstats_false[0***REMOVED***['whislo'***REMOVED***, 0***REMOVED***
        assert_equal(bstats_false[0***REMOVED***['whishi'***REMOVED***, 0***REMOVED***
        assert_array_almost_equal(bstats_false[0***REMOVED***['fliers'***REMOVED***, [-25, 25***REMOVED******REMOVED***

        assert_equal(bstats_true[0***REMOVED***['whislo'***REMOVED***, -25***REMOVED***
        assert_equal(bstats_true[0***REMOVED***['whishi'***REMOVED***, 25***REMOVED***
        assert_array_almost_equal(bstats_true[0***REMOVED***['fliers'***REMOVED***, [***REMOVED******REMOVED***


class Test_callback_registry(object***REMOVED***:
    def setup(self***REMOVED***:
        self.signal = 'test'
        self.callbacks = cbook.CallbackRegistry(***REMOVED***

    def connect(self, s, func***REMOVED***:
        return self.callbacks.connect(s, func***REMOVED***

    def is_empty(self***REMOVED***:
        assert_equal(self.callbacks._func_cid_map, {***REMOVED******REMOVED***
        assert_equal(self.callbacks.callbacks, {***REMOVED******REMOVED***

    def is_not_empty(self***REMOVED***:
        assert_not_equal(self.callbacks._func_cid_map, {***REMOVED******REMOVED***
        assert_not_equal(self.callbacks.callbacks, {***REMOVED******REMOVED***

    def test_callback_complete(self***REMOVED***:
        # ensure we start with an empty registry
        self.is_empty(***REMOVED***

        # create a class for testing
        mini_me = Test_callback_registry(***REMOVED***

        # test that we can add a callback
        cid1 = self.connect(self.signal, mini_me.dummy***REMOVED***
        assert_equal(type(cid1***REMOVED***, int***REMOVED***
        self.is_not_empty(***REMOVED***

        # test that we don't add a second callback
        cid2 = self.connect(self.signal, mini_me.dummy***REMOVED***
        assert_equal(cid1, cid2***REMOVED***
        self.is_not_empty(***REMOVED***
        assert_equal(len(self.callbacks._func_cid_map***REMOVED***, 1***REMOVED***
        assert_equal(len(self.callbacks.callbacks***REMOVED***, 1***REMOVED***

        del mini_me

        # check we now have no callbacks registered
        self.is_empty(***REMOVED***

    def dummy(self***REMOVED***:
        pass


def _kwarg_norm_helper(inp, expected, kwargs_to_norm, warn_count=0***REMOVED***:

    with warnings.catch_warnings(record=True***REMOVED*** as w:
        warnings.simplefilter("always"***REMOVED***
        assert expected == cbook.normalize_kwargs(inp, **kwargs_to_norm***REMOVED***
        assert len(w***REMOVED*** == warn_count


def _kwarg_norm_fail_helper(inp, kwargs_to_norm***REMOVED***:
    assert_raises(TypeError, cbook.normalize_kwargs, inp, **kwargs_to_norm***REMOVED***


def test_normalize_kwargs(***REMOVED***:
    fail_mapping = (
        ({'a': 1***REMOVED***, {'forbidden': ('a'***REMOVED******REMOVED******REMOVED***,
        ({'a': 1***REMOVED***, {'required': ('b'***REMOVED******REMOVED******REMOVED***,
        ({'a': 1, 'b': 2***REMOVED***, {'required': ('a'***REMOVED***, 'allowed': (***REMOVED******REMOVED******REMOVED***
    ***REMOVED***

    for inp, kwargs in fail_mapping:
        yield _kwarg_norm_fail_helper, inp, kwargs

    warn_passing_mapping = (
        ({'a': 1, 'b': 2***REMOVED***, {'a': 1***REMOVED***, {'alias_mapping': {'a': ['b'***REMOVED******REMOVED******REMOVED***, 1***REMOVED***,
        ({'a': 1, 'b': 2***REMOVED***, {'a': 1***REMOVED***, {'alias_mapping': {'a': ['b'***REMOVED******REMOVED***,
                                      'allowed': ('a',***REMOVED******REMOVED***, 1***REMOVED***,
        ({'a': 1, 'b': 2***REMOVED***, {'a': 2***REMOVED***, {'alias_mapping': {'a': ['a', 'b'***REMOVED******REMOVED******REMOVED***, 1***REMOVED***,

        ({'a': 1, 'b': 2, 'c': 3***REMOVED***, {'a': 1, 'c': 3***REMOVED***,
     ***REMOVED***'alias_mapping': {'a': ['b'***REMOVED******REMOVED***, 'required': ('a', ***REMOVED******REMOVED***, 1***REMOVED***,

    ***REMOVED***

    for inp, exp, kwargs, wc in warn_passing_mapping:
        yield _kwarg_norm_helper, inp, exp, kwargs, wc

    pass_mapping = (
        ({'a': 1, 'b': 2***REMOVED***, {'a': 1, 'b': 2***REMOVED***, {***REMOVED******REMOVED***,
        ({'b': 2***REMOVED***, {'a': 2***REMOVED***, {'alias_mapping': {'a': ['a', 'b'***REMOVED******REMOVED******REMOVED******REMOVED***,
        ({'b': 2***REMOVED***, {'a': 2***REMOVED***, {'alias_mapping': {'a': ['b'***REMOVED******REMOVED***,
                              'forbidden': ('b', ***REMOVED******REMOVED******REMOVED***,

        ({'a': 1, 'c': 3***REMOVED***, {'a': 1, 'c': 3***REMOVED***, {'required': ('a', ***REMOVED***,
                                              'allowed': ('c', ***REMOVED******REMOVED******REMOVED***,

        ({'a': 1, 'c': 3***REMOVED***, {'a': 1, 'c': 3***REMOVED***, {'required': ('a', 'c'***REMOVED***,
                                              'allowed': ('c', ***REMOVED******REMOVED******REMOVED***,
        ({'a': 1, 'c': 3***REMOVED***, {'a': 1, 'c': 3***REMOVED***, {'required': ('a', 'c'***REMOVED***,
                                              'allowed': ('a', 'c'***REMOVED******REMOVED******REMOVED***,
        ({'a': 1, 'c': 3***REMOVED***, {'a': 1, 'c': 3***REMOVED***, {'required': ('a', 'c'***REMOVED***,
                                              'allowed': (***REMOVED******REMOVED******REMOVED***,

        ({'a': 1, 'c': 3***REMOVED***, {'a': 1, 'c': 3***REMOVED***, {'required': ('a', 'c'***REMOVED******REMOVED******REMOVED***,
        ({'a': 1, 'c': 3***REMOVED***, {'a': 1, 'c': 3***REMOVED***, {'allowed': ('a', 'c'***REMOVED******REMOVED******REMOVED***,

    ***REMOVED***

    for inp, exp, kwargs in pass_mapping:
        yield _kwarg_norm_helper, inp, exp, kwargs


def test_to_prestep(***REMOVED***:
    x = np.arange(4***REMOVED***
    y1 = np.arange(4***REMOVED***
    y2 = np.arange(4***REMOVED***[::-1***REMOVED***

    xs, y1s, y2s = cbook.pts_to_prestep(x, y1, y2***REMOVED***

    x_target = np.asarray([0, 0, 1, 1, 2, 2, 3***REMOVED***, dtype='float'***REMOVED***
    y1_target = np.asarray([0, 1, 1, 2, 2, 3, 3***REMOVED***, dtype='float'***REMOVED***
    y2_target = np.asarray([3, 2, 2, 1, 1, 0, 0***REMOVED***, dtype='float'***REMOVED***

    assert_array_equal(x_target, xs***REMOVED***
    assert_array_equal(y1_target, y1s***REMOVED***
    assert_array_equal(y2_target, y2s***REMOVED***

    xs, y1s = cbook.pts_to_prestep(x, y1***REMOVED***
    assert_array_equal(x_target, xs***REMOVED***
    assert_array_equal(y1_target, y1s***REMOVED***


def test_to_poststep(***REMOVED***:
    x = np.arange(4***REMOVED***
    y1 = np.arange(4***REMOVED***
    y2 = np.arange(4***REMOVED***[::-1***REMOVED***

    xs, y1s, y2s = cbook.pts_to_poststep(x, y1, y2***REMOVED***

    x_target = np.asarray([0, 1, 1, 2, 2, 3, 3***REMOVED***, dtype='float'***REMOVED***
    y1_target = np.asarray([0, 0, 1, 1, 2, 2, 3***REMOVED***, dtype='float'***REMOVED***
    y2_target = np.asarray([3, 3, 2, 2, 1, 1, 0***REMOVED***, dtype='float'***REMOVED***

    assert_array_equal(x_target, xs***REMOVED***
    assert_array_equal(y1_target, y1s***REMOVED***
    assert_array_equal(y2_target, y2s***REMOVED***

    xs, y1s = cbook.pts_to_poststep(x, y1***REMOVED***
    assert_array_equal(x_target, xs***REMOVED***
    assert_array_equal(y1_target, y1s***REMOVED***


def test_to_midstep(***REMOVED***:
    x = np.arange(4***REMOVED***
    y1 = np.arange(4***REMOVED***
    y2 = np.arange(4***REMOVED***[::-1***REMOVED***

    xs, y1s, y2s = cbook.pts_to_midstep(x, y1, y2***REMOVED***

    x_target = np.asarray([0, .5, .5, 1.5, 1.5, 2.5, 2.5, 3***REMOVED***, dtype='float'***REMOVED***
    y1_target = np.asarray([0, 0, 1, 1, 2, 2, 3, 3***REMOVED***, dtype='float'***REMOVED***
    y2_target = np.asarray([3, 3, 2, 2, 1, 1, 0, 0***REMOVED***, dtype='float'***REMOVED***

    assert_array_equal(x_target, xs***REMOVED***
    assert_array_equal(y1_target, y1s***REMOVED***
    assert_array_equal(y2_target, y2s***REMOVED***

    xs, y1s = cbook.pts_to_midstep(x, y1***REMOVED***
    assert_array_equal(x_target, xs***REMOVED***
    assert_array_equal(y1_target, y1s***REMOVED***


def test_step_fails(***REMOVED***:
    assert_raises(ValueError, cbook._step_validation,
                  np.arange(12***REMOVED***.reshape(3, 4***REMOVED***, 'a'***REMOVED***
    assert_raises(ValueError, cbook._step_validation,
                  np.arange(12***REMOVED***, 'a'***REMOVED***
    assert_raises(ValueError, cbook._step_validation,
                  np.arange(12***REMOVED******REMOVED***
    assert_raises(ValueError, cbook._step_validation,
                  np.arange(12***REMOVED***, np.arange(3***REMOVED******REMOVED***


def test_grouper(***REMOVED***:
    class dummy(***REMOVED***:
        pass
    a, b, c, d, e = objs = [dummy(***REMOVED*** for j in range(5***REMOVED******REMOVED***
    g = cbook.Grouper(***REMOVED***
    g.join(*objs***REMOVED***
    assert set(list(g***REMOVED***[0***REMOVED******REMOVED*** == set(objs***REMOVED***
    assert set(g.get_siblings(a***REMOVED******REMOVED*** == set(objs***REMOVED***

    for other in objs[1:***REMOVED***:
        assert g.joined(a, other***REMOVED***

    g.remove(a***REMOVED***
    for other in objs[1:***REMOVED***:
        assert not g.joined(a, other***REMOVED***

    for A, B in itertools.product(objs[1:***REMOVED***, objs[1:***REMOVED******REMOVED***:
        assert g.joined(A, B***REMOVED***


def test_grouper_private(***REMOVED***:
    class dummy(***REMOVED***:
        pass
    objs = [dummy(***REMOVED*** for j in range(5***REMOVED******REMOVED***
    g = cbook.Grouper(***REMOVED***
    g.join(*objs***REMOVED***
    # reach in and touch the internals !
    mapping = g._mapping

    for o in objs:
        assert ref(o***REMOVED*** in mapping

    base_set = mapping[ref(objs[0***REMOVED******REMOVED******REMOVED***
    for o in objs[1:***REMOVED***:
        assert mapping[ref(o***REMOVED******REMOVED*** is base_set
