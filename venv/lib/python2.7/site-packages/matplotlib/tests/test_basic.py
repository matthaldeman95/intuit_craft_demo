from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six

from nose.tools import assert_equal

from matplotlib.testing.decorators import knownfailureif
from pylab import *


def test_simple(***REMOVED***:
    assert_equal(1 + 1, 2***REMOVED***


@knownfailureif(True***REMOVED***
def test_simple_knownfail(***REMOVED***:
    # Test the known fail mechanism.
    assert_equal(1 + 1, 3***REMOVED***


def test_override_builtins(***REMOVED***:
    ok_to_override = set([
        '__name__',
        '__doc__',
        '__package__',
        '__loader__',
        '__spec__',
        'any',
        'all',
        'sum'
    ***REMOVED******REMOVED***

    # We could use six.moves.builtins here, but that seems
    # to do a little more than just this.
    if six.PY3:
        builtins = sys.modules['builtins'***REMOVED***
    else:
        builtins = sys.modules['__builtin__'***REMOVED***

    overridden = False
    for key in globals(***REMOVED***.keys(***REMOVED***:
        if key in dir(builtins***REMOVED***:
            if (globals(***REMOVED***[key***REMOVED*** != getattr(builtins, key***REMOVED*** and
                    key not in ok_to_override***REMOVED***:
                print("'%s' was overridden in globals(***REMOVED***." % key***REMOVED***
                overridden = True

    assert not overridden


if __name__ == '__main__':
    import nose
    nose.runmodule(argv=['-s', '--with-doctest'***REMOVED***, exit=False***REMOVED***
