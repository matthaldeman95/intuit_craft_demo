from __future__ import print_function
***REMOVED***
import tempfile
import numpy as np
import sys
from matplotlib import pyplot as plt
from matplotlib.testing.decorators import cleanup
from matplotlib.testing.decorators import image_comparison


def draw_quiver(ax, **kw***REMOVED***:
    X, Y = np.meshgrid(np.arange(0, 2 * np.pi, 1***REMOVED***,
                       np.arange(0, 2 * np.pi, 1***REMOVED******REMOVED***
    U = np.cos(X***REMOVED***
    V = np.sin(Y***REMOVED***

    Q = ax.quiver(U, V, **kw***REMOVED***
    return Q


@cleanup
def test_quiver_memory_leak(***REMOVED***:
    fig, ax = plt.subplots(***REMOVED***

    Q = draw_quiver(ax***REMOVED***
    ttX = Q.X
    Q.remove(***REMOVED***

    del Q

    assert sys.getrefcount(ttX***REMOVED*** == 2


@cleanup
def test_quiver_key_memory_leak(***REMOVED***:
    fig, ax = plt.subplots(***REMOVED***

    Q = draw_quiver(ax***REMOVED***

    qk = ax.quiverkey(Q, 0.5, 0.92, 2, r'$2 \frac{m***REMOVED***{s***REMOVED***$',
                      labelpos='W',
                      fontproperties={'weight': 'bold'***REMOVED******REMOVED***
    assert sys.getrefcount(qk***REMOVED*** == 3
    qk.remove(***REMOVED***
    assert sys.getrefcount(qk***REMOVED*** == 2


@image_comparison(baseline_images=['quiver_animated_test_image'***REMOVED***,
                  extensions=['png'***REMOVED******REMOVED***
def test_quiver_animate(***REMOVED***:
    # Tests fix for #2616
    fig, ax = plt.subplots(***REMOVED***

    Q = draw_quiver(ax, animated=True***REMOVED***

    qk = ax.quiverkey(Q, 0.5, 0.92, 2, r'$2 \frac{m***REMOVED***{s***REMOVED***$',
                      labelpos='W',
                      fontproperties={'weight': 'bold'***REMOVED******REMOVED***


@image_comparison(baseline_images=['quiver_with_key_test_image'***REMOVED***,
                  extensions=['png'***REMOVED******REMOVED***
def test_quiver_with_key(***REMOVED***:
    fig, ax = plt.subplots(***REMOVED***
    ax.margins(0.1***REMOVED***

    Q = draw_quiver(ax***REMOVED***

    qk = ax.quiverkey(Q, 0.5, 0.95, 2,
                      r'$2\, \mathrm{m***REMOVED***\, \mathrm{s***REMOVED***^{-1***REMOVED***$',
                      coordinates='figure',
                      labelpos='W',
                      fontproperties={'weight': 'bold',
                                      'size': 'large'***REMOVED******REMOVED***


@image_comparison(baseline_images=['quiver_single_test_image'***REMOVED***,
                  extensions=['png'***REMOVED***, remove_text=True***REMOVED***
def test_quiver_single(***REMOVED***:
    fig, ax = plt.subplots(***REMOVED***
    ax.margins(0.1***REMOVED***

    ax.quiver([1***REMOVED***, [1***REMOVED***, [2***REMOVED***, [2***REMOVED******REMOVED***


@cleanup
def test_quiver_copy(***REMOVED***:
    fig, ax = plt.subplots(***REMOVED***
    uv = dict(u=np.array([1.1***REMOVED******REMOVED***, v=np.array([2.0***REMOVED******REMOVED******REMOVED***
    q0 = ax.quiver([1***REMOVED***, [1***REMOVED***, uv['u'***REMOVED***, uv['v'***REMOVED******REMOVED***
    uv['v'***REMOVED***[0***REMOVED*** = 0
    assert q0.V[0***REMOVED*** == 2.0


@image_comparison(baseline_images=['quiver_key_pivot'***REMOVED***,
                  extensions=['png'***REMOVED***, remove_text=True***REMOVED***
def test_quiver_key_pivot(***REMOVED***:
    fig, ax = plt.subplots(***REMOVED***

    u, v = np.mgrid[0:2*np.pi:10j, 0:2*np.pi:10j***REMOVED***

    q = ax.quiver(np.sin(u***REMOVED***, np.cos(v***REMOVED******REMOVED***
    ax.set_xlim(-2, 11***REMOVED***
    ax.set_ylim(-2, 11***REMOVED***
    ax.quiverkey(q, 0.5, 1, 1, 'N', labelpos='N'***REMOVED***
    ax.quiverkey(q, 1, 0.5, 1, 'E', labelpos='E'***REMOVED***
    ax.quiverkey(q, 0.5, 0, 1, 'S', labelpos='S'***REMOVED***
    ax.quiverkey(q, 0, 0.5, 1, 'W', labelpos='W'***REMOVED***


if __name__ == '__main__':
    import nose
    nose.runmodule(***REMOVED***
