from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six

import io
***REMOVED***
import sys
import warnings

from cycler import cycler, Cycler

import matplotlib as mpl
import matplotlib.pyplot as plt
from matplotlib.tests import assert_str_equal
from matplotlib.testing.decorators import cleanup, knownfailureif
import matplotlib.colors as mcolors
from nose.tools import assert_true, assert_raises, assert_equal
from nose.plugins.skip import SkipTest
import nose
from itertools import chain
import numpy as np
from matplotlib.rcsetup import (validate_bool_maybe_none,
                                validate_stringlist,
                                validate_colorlist,
                                validate_bool,
                                validate_nseq_int,
                                validate_nseq_float,
                                validate_cycler,
                                validate_hatch***REMOVED***


mpl.rc('text', usetex=False***REMOVED***
mpl.rc('lines', linewidth=22***REMOVED***

fname = os.path.join(os.path.dirname(__file__***REMOVED***, 'test_rcparams.rc'***REMOVED***


def test_rcparams(***REMOVED***:
    usetex = mpl.rcParams['text.usetex'***REMOVED***
    linewidth = mpl.rcParams['lines.linewidth'***REMOVED***

    # test context given dictionary
    with mpl.rc_context(rc={'text.usetex': not usetex***REMOVED******REMOVED***:
        assert mpl.rcParams['text.usetex'***REMOVED*** == (not usetex***REMOVED***
    assert mpl.rcParams['text.usetex'***REMOVED*** == usetex

    # test context given filename (mpl.rc sets linewdith to 33***REMOVED***
    with mpl.rc_context(fname=fname***REMOVED***:
        assert mpl.rcParams['lines.linewidth'***REMOVED*** == 33
    assert mpl.rcParams['lines.linewidth'***REMOVED*** == linewidth

    # test context given filename and dictionary
    with mpl.rc_context(fname=fname, rc={'lines.linewidth': 44***REMOVED******REMOVED***:
        assert mpl.rcParams['lines.linewidth'***REMOVED*** == 44
    assert mpl.rcParams['lines.linewidth'***REMOVED*** == linewidth

    # test rc_file
    ***REMOVED***
        mpl.rc_file(fname***REMOVED***
        assert mpl.rcParams['lines.linewidth'***REMOVED*** == 33
    finally:
        mpl.rcParams['lines.linewidth'***REMOVED*** = linewidth


def test_RcParams_class(***REMOVED***:
    rc = mpl.RcParams({'font.cursive': ['Apple Chancery',
                                        'Textile',
                                        'Zapf Chancery',
                                        'cursive'***REMOVED***,
                       'font.family': 'sans-serif',
                       'font.weight': 'normal',
                       'font.size': 12***REMOVED******REMOVED***

    if six.PY3:
        expected_repr = ***REMOVED***
RcParams({'font.cursive': ['Apple Chancery',
                           'Textile',
                           'Zapf Chancery',
                           'cursive'***REMOVED***,
          'font.family': ['sans-serif'***REMOVED***,
          'font.size': 12.0,
          'font.weight': 'normal'***REMOVED******REMOVED******REMOVED***.lstrip(***REMOVED***
    else:
        expected_repr = ***REMOVED***
RcParams({u'font.cursive': [u'Apple Chancery',
                            u'Textile',
                            u'Zapf Chancery',
                            u'cursive'***REMOVED***,
          u'font.family': [u'sans-serif'***REMOVED***,
          u'font.size': 12.0,
          u'font.weight': u'normal'***REMOVED******REMOVED******REMOVED***.lstrip(***REMOVED***

    assert_str_equal(expected_repr, repr(rc***REMOVED******REMOVED***

    if six.PY3:
        expected_str = ***REMOVED***
font.cursive: ['Apple Chancery', 'Textile', 'Zapf Chancery', 'cursive'***REMOVED***
font.family: ['sans-serif'***REMOVED***
font.size: 12.0
font.weight: normal***REMOVED***.lstrip(***REMOVED***
    else:
        expected_str = ***REMOVED***
font.cursive: [u'Apple Chancery', u'Textile', u'Zapf Chancery', u'cursive'***REMOVED***
font.family: [u'sans-serif'***REMOVED***
font.size: 12.0
font.weight: normal***REMOVED***.lstrip(***REMOVED***

    assert_str_equal(expected_str, str(rc***REMOVED******REMOVED***

    # test the find_all functionality
    assert ['font.cursive', 'font.size'***REMOVED*** == sorted(rc.find_all('i[vz***REMOVED***'***REMOVED***.keys(***REMOVED******REMOVED***
    assert ['font.family'***REMOVED*** == list(six.iterkeys(rc.find_all('family'***REMOVED******REMOVED******REMOVED***


def test_rcparams_update(***REMOVED***:
    if sys.version_info[:2***REMOVED*** < (2, 7***REMOVED***:
        raise nose.SkipTest("assert_raises as context manager "
                            "not supported with Python < 2.7"***REMOVED***
    rc = mpl.RcParams({'figure.figsize': (3.5, 42***REMOVED******REMOVED******REMOVED***
    bad_dict = {'figure.figsize': (3.5, 42, 1***REMOVED******REMOVED***
    # make sure validation happens on input
    with assert_raises(ValueError***REMOVED***:

        with warnings.catch_warnings(***REMOVED***:
            warnings.filterwarnings('ignore',
                                message='.*(validate***REMOVED***',
                                category=UserWarning***REMOVED***
            rc.update(bad_dict***REMOVED***


def test_rcparams_init(***REMOVED***:
    if sys.version_info[:2***REMOVED*** < (2, 7***REMOVED***:
        raise nose.SkipTest("assert_raises as context manager "
                            "not supported with Python < 2.7"***REMOVED***
    with assert_raises(ValueError***REMOVED***:
        with warnings.catch_warnings(***REMOVED***:
            warnings.filterwarnings('ignore',
                                message='.*(validate***REMOVED***',
                                category=UserWarning***REMOVED***
            mpl.RcParams({'figure.figsize': (3.5, 42, 1***REMOVED******REMOVED******REMOVED***


@cleanup
def test_Bug_2543(***REMOVED***:
    # Test that it possible to add all values to itself / deepcopy
    # This was not possible because validate_bool_maybe_none did not
    # accept None as an argument.
    # https://github.com/matplotlib/matplotlib/issues/2543
    # We filter warnings at this stage since a number of them are raised
    # for deprecated rcparams as they should. We dont want these in the
    # printed in the test suite.
    with warnings.catch_warnings(***REMOVED***:
        warnings.filterwarnings('ignore',
                                message='.*(deprecated|obsolete***REMOVED***',
                                category=UserWarning***REMOVED***
        with mpl.rc_context(***REMOVED***:
            _copy = mpl.rcParams.copy(***REMOVED***
            for key in six.iterkeys(_copy***REMOVED***:
                mpl.rcParams[key***REMOVED*** = _copy[key***REMOVED***
            mpl.rcParams['text.dvipnghack'***REMOVED*** = None
        with mpl.rc_context(***REMOVED***:
            from copy import deepcopy
            _deep_copy = deepcopy(mpl.rcParams***REMOVED***
        # real test is that this does not raise
        assert_true(validate_bool_maybe_none(None***REMOVED*** is None***REMOVED***
        assert_true(validate_bool_maybe_none("none"***REMOVED*** is None***REMOVED***
        _fonttype = mpl.rcParams['svg.fonttype'***REMOVED***
        assert_true(_fonttype == mpl.rcParams['svg.embed_char_paths'***REMOVED******REMOVED***
        with mpl.rc_context(***REMOVED***:
            mpl.rcParams['svg.embed_char_paths'***REMOVED*** = False
            assert_true(mpl.rcParams['svg.fonttype'***REMOVED*** == "none"***REMOVED***


@cleanup
def test_Bug_2543_newer_python(***REMOVED***:
    # only split from above because of the usage of assert_raises
    # as a context manager, which only works in 2.7 and above
    if sys.version_info[:2***REMOVED*** < (2, 7***REMOVED***:
        raise nose.SkipTest("assert_raises as context manager not supported with Python < 2.7"***REMOVED***
    from matplotlib.rcsetup import validate_bool_maybe_none, validate_bool
    with assert_raises(ValueError***REMOVED***:
        validate_bool_maybe_none("blah"***REMOVED***
    with assert_raises(ValueError***REMOVED***:
        validate_bool(None***REMOVED***
    with assert_raises(ValueError***REMOVED***:
        with mpl.rc_context(***REMOVED***:
            mpl.rcParams['svg.fonttype'***REMOVED*** = True


@cleanup
def _legend_rcparam_helper(param_dict, target, get_func***REMOVED***:
    with mpl.rc_context(param_dict***REMOVED***:
        _, ax = plt.subplots(***REMOVED***
        ax.plot(range(3***REMOVED***, label='test'***REMOVED***
        leg = ax.legend(***REMOVED***
        assert_equal(getattr(leg.legendPatch, get_func***REMOVED***(***REMOVED***, target***REMOVED***


def test_legend_facecolor(***REMOVED***:
    get_func = 'get_facecolor'
    rcparam = 'legend.facecolor'
    test_values = [({rcparam: 'r'***REMOVED***,
                    mcolors.colorConverter.to_rgba('r'***REMOVED******REMOVED***,
                   ({rcparam: 'inherit',
                     'axes.facecolor': 'r'
             ***REMOVED***
                    mcolors.colorConverter.to_rgba('r'***REMOVED******REMOVED***,
                   ({rcparam: 'g',
                     'axes.facecolor': 'r'***REMOVED***,
                   mcolors.colorConverter.to_rgba('g'***REMOVED******REMOVED***
                   ***REMOVED***
    for rc_dict, target in test_values:
        yield _legend_rcparam_helper, rc_dict, target, get_func


def test_legend_edgecolor(***REMOVED***:
    get_func = 'get_edgecolor'
    rcparam = 'legend.edgecolor'
    test_values = [({rcparam: 'r'***REMOVED***,
                    mcolors.colorConverter.to_rgba('r'***REMOVED******REMOVED***,
                   ({rcparam: 'inherit',
                     'axes.edgecolor': 'r'
             ***REMOVED***
                    mcolors.colorConverter.to_rgba('r'***REMOVED******REMOVED***,
                   ({rcparam: 'g',
                     'axes.facecolor': 'r'***REMOVED***,
                   mcolors.colorConverter.to_rgba('g'***REMOVED******REMOVED***
                   ***REMOVED***
    for rc_dict, target in test_values:
        yield _legend_rcparam_helper, rc_dict, target, get_func


def test_Issue_1713(***REMOVED***:
    utf32_be = os.path.join(os.path.dirname(__file__***REMOVED***,
                           'test_utf32_be_rcparams.rc'***REMOVED***
    old_lang = os.environ.get('LANG', None***REMOVED***
    os.environ['LANG'***REMOVED*** = 'en_US.UTF-32-BE'
    rc = mpl.rc_params_from_file(utf32_be, True***REMOVED***
    if old_lang:
        os.environ['LANG'***REMOVED*** = old_lang
    else:
        del os.environ['LANG'***REMOVED***
    assert rc.get('timezone'***REMOVED*** == 'UTC'


def _validation_test_helper(validator, arg, target***REMOVED***:
    res = validator(arg***REMOVED***
    if isinstance(target, np.ndarray***REMOVED***:
        assert_true(np.all(res == target***REMOVED******REMOVED***
    elif not isinstance(target, Cycler***REMOVED***:
        assert_equal(res, target***REMOVED***
    else:
        # Cyclers can't simply be asserted equal. They don't implement __eq__
        assert_equal(list(res***REMOVED***, list(target***REMOVED******REMOVED***


def _validation_fail_helper(validator, arg, exception_type***REMOVED***:
    if sys.version_info[:2***REMOVED*** < (2, 7***REMOVED***:
        raise nose.SkipTest("assert_raises as context manager not "
                            "supported with Python < 2.7"***REMOVED***
    with assert_raises(exception_type***REMOVED***:
        validator(arg***REMOVED***


def test_validators(***REMOVED***:
    validation_tests = (
    ***REMOVED***'validator': validate_bool,
         'success': chain(((_, True***REMOVED*** for _ in
                           ('t', 'y', 'yes', 'on', 'true', '1', 1, True***REMOVED******REMOVED***,
                           ((_, False***REMOVED*** for _ in
                            ('f', 'n', 'no', 'off', 'false', '0', 0, False***REMOVED******REMOVED******REMOVED***,
        'fail': ((_, ValueError***REMOVED***
                 for _ in ('aardvark', 2, -1, [***REMOVED***, ***REMOVED******REMOVED******REMOVED***,
    ***REMOVED***'validator': validate_stringlist,
         'success': (('', [***REMOVED******REMOVED***,
                     ('a,b', ['a', 'b'***REMOVED******REMOVED***,
                     ('aardvark', ['aardvark'***REMOVED******REMOVED***,
                     ('aardvark, ', ['aardvark'***REMOVED******REMOVED***,
                     ('aardvark, ,', ['aardvark'***REMOVED******REMOVED***,
                     (['a', 'b'***REMOVED***, ['a', 'b'***REMOVED******REMOVED***,
                     (('a', 'b'***REMOVED***, ['a', 'b'***REMOVED******REMOVED***,
                     (iter(['a', 'b'***REMOVED******REMOVED***, ['a', 'b'***REMOVED******REMOVED***,
                     (np.array(['a', 'b'***REMOVED******REMOVED***, ['a', 'b'***REMOVED******REMOVED***,
                     ((1, 2***REMOVED***, ['1', '2'***REMOVED******REMOVED***,
                     (np.array([1, 2***REMOVED******REMOVED***, ['1', '2'***REMOVED******REMOVED***,
                    ***REMOVED***,
         'fail': ((dict(***REMOVED***, ValueError***REMOVED***,
                  (1, ValueError***REMOVED***,
                 ***REMOVED***
***REMOVED***
    ***REMOVED***'validator': validate_nseq_int(2***REMOVED***,
         'success': ((_, [1, 2***REMOVED******REMOVED***
                     for _ in ('1, 2', [1.5, 2.5***REMOVED***, [1, 2***REMOVED***,
                               (1, 2***REMOVED***, np.array((1, 2***REMOVED******REMOVED******REMOVED******REMOVED***,
         'fail': ((_, ValueError***REMOVED***
                  for _ in ('aardvark', ('a', 1***REMOVED***,
                            (1, 2, 3***REMOVED***
                            ***REMOVED******REMOVED***
***REMOVED***
    ***REMOVED***'validator': validate_nseq_float(2***REMOVED***,
         'success': ((_, [1.5, 2.5***REMOVED******REMOVED***
                     for _ in ('1.5, 2.5', [1.5, 2.5***REMOVED***, [1.5, 2.5***REMOVED***,
                               (1.5, 2.5***REMOVED***, np.array((1.5, 2.5***REMOVED******REMOVED******REMOVED******REMOVED***,
         'fail': ((_, ValueError***REMOVED***
                  for _ in ('aardvark', ('a', 1***REMOVED***,
                            (1, 2, 3***REMOVED***
                            ***REMOVED******REMOVED***
***REMOVED***
    ***REMOVED***'validator': validate_cycler,
         'success': (('cycler("color", "rgb"***REMOVED***',
                      cycler("color", 'rgb'***REMOVED******REMOVED***,
                     (cycler('linestyle', ['-', '--'***REMOVED******REMOVED***,
                      cycler('linestyle', ['-', '--'***REMOVED******REMOVED******REMOVED***,
                     (***REMOVED***(cycler("color", ["r", "g", "b"***REMOVED******REMOVED*** +
                          cycler("mew", [2, 3, 5***REMOVED******REMOVED******REMOVED******REMOVED***,
                      (cycler("color", 'rgb'***REMOVED*** +
                          cycler("markeredgewidth", [2, 3, 5***REMOVED******REMOVED******REMOVED******REMOVED***,
                     ("cycler(c='rgb', lw=[1, 2, 3***REMOVED******REMOVED***",
                      cycler('color', 'rgb'***REMOVED*** + cycler('linewidth', [1, 2, 3***REMOVED******REMOVED******REMOVED***,
                     ("cycler('c', 'rgb'***REMOVED*** * cycler('linestyle', ['-', '--'***REMOVED******REMOVED***",
                      (cycler('color', 'rgb'***REMOVED*** *
                          cycler('linestyle', ['-', '--'***REMOVED******REMOVED******REMOVED******REMOVED***,
                    ***REMOVED***,
         # This is *so* incredibly important: validate_cycler(***REMOVED*** eval's
         # an arbitrary string! I think I have it locked down enough,
         # and that is what this is testing.
         # TODO: Note that these tests are actually insufficient, as it may
         # be that they raised errors, but still did an action prior to
         # raising the exception. We should devise some additional tests
         # for that...
         'fail': ((4, ValueError***REMOVED***,  # Gotta be a string or Cycler object
                  ('cycler("bleh, [***REMOVED******REMOVED***', ValueError***REMOVED***,  # syntax error
                  ('Cycler("linewidth", [1, 2, 3***REMOVED******REMOVED***',
                      ValueError***REMOVED***,  # only 'cycler(***REMOVED***' function is allowed
                  ('1 + 2', ValueError***REMOVED***,  # doesn't produce a Cycler object
                  ('os.system("echo Gotcha"***REMOVED***', ValueError***REMOVED***,  # os not available
                  ('***REMOVED***', ValueError***REMOVED***,  # should not be able to import
                  ('def badjuju(a***REMOVED***: return a; badjuju(cycler("color", "rgb"***REMOVED******REMOVED***',
                      ValueError***REMOVED***,  # Should not be able to define anything
                                    # even if it does return a cycler
                  ('cycler("waka", [1, 2, 3***REMOVED******REMOVED***', ValueError***REMOVED***,  # not a property
                  ('cycler(c=[1, 2, 3***REMOVED******REMOVED***', ValueError***REMOVED***,  # invalid values
                  ("cycler(lw=['a', 'b', 'c'***REMOVED******REMOVED***", ValueError***REMOVED***,  # invalid values
                 ***REMOVED***
***REMOVED***
    ***REMOVED***'validator': validate_hatch,
         'success': (('--|', '--|'***REMOVED***, ('\\oO', '\\oO'***REMOVED***,
                     ('/+*/.x', '/+*/.x'***REMOVED***, ('', ''***REMOVED******REMOVED***,
         'fail': (('--_', ValueError***REMOVED***,
                  (8, ValueError***REMOVED***,
                  ('X', ValueError***REMOVED******REMOVED***,
***REMOVED***
    ***REMOVED***'validator': validate_colorlist,
         'success': (('r,g,b', ['r', 'g', 'b'***REMOVED******REMOVED***,
                     (['r', 'g', 'b'***REMOVED***, ['r', 'g', 'b'***REMOVED******REMOVED***,
                     ('r, ,', ['r'***REMOVED******REMOVED***,
                     (['', 'g', 'blue'***REMOVED***, ['g', 'blue'***REMOVED******REMOVED***,
                     ([np.array([1, 0, 0***REMOVED******REMOVED***, np.array([0, 1, 0***REMOVED******REMOVED******REMOVED***,
                         np.array([[1, 0, 0***REMOVED***, [0, 1, 0***REMOVED******REMOVED******REMOVED******REMOVED***,
                     (np.array([[1, 0, 0***REMOVED***, [0, 1, 0***REMOVED******REMOVED******REMOVED***,
                         np.array([[1, 0, 0***REMOVED***, [0, 1, 0***REMOVED******REMOVED******REMOVED******REMOVED***,
                    ***REMOVED***,
         'fail': (('fish', ValueError***REMOVED***,
                 ***REMOVED***,
    ***REMOVED***
    ***REMOVED***

    for validator_dict in validation_tests:
        validator = validator_dict['validator'***REMOVED***
        for arg, target in validator_dict['success'***REMOVED***:
            yield _validation_test_helper, validator, arg, target
        for arg, error_type in validator_dict['fail'***REMOVED***:
            yield _validation_fail_helper, validator, arg, error_type


def test_keymaps(***REMOVED***:
    key_list = [k for k in mpl.rcParams if 'keymap' in k***REMOVED***
    for k in key_list:
        assert(isinstance(mpl.rcParams[k***REMOVED***, list***REMOVED******REMOVED***


def test_rcparams_reset_after_fail(***REMOVED***:

    # There was previously a bug that meant that if rc_context failed and
    # raised an exception due to issues in the supplied rc parameters, the
    # global rc parameters were left in a modified state.

    if sys.version_info[:2***REMOVED*** >= (2, 7***REMOVED***:
        from collections import OrderedDict
    else:
        raise SkipTest("Test can only be run in Python >= 2.7 as it requires OrderedDict"***REMOVED***

    with mpl.rc_context(rc={'text.usetex': False***REMOVED******REMOVED***:

        assert mpl.rcParams['text.usetex'***REMOVED*** is False

        with assert_raises(KeyError***REMOVED***:
            with mpl.rc_context(rc=OrderedDict([('text.usetex', True***REMOVED***,('test.blah', True***REMOVED******REMOVED******REMOVED******REMOVED***:
                pass

        assert mpl.rcParams['text.usetex'***REMOVED*** is False


if __name__ == '__main__':
    nose.runmodule(argv=['-s', '--with-doctest'***REMOVED***, exit=False***REMOVED***
