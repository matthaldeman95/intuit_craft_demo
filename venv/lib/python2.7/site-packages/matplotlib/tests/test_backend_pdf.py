# -*- encoding: utf-8 -*-

from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six

import io
***REMOVED***

import numpy as np
from matplotlib import cm, rcParams
from matplotlib.backends.backend_pdf import PdfPages
from matplotlib import pyplot as plt
from matplotlib.testing.decorators import (image_comparison, knownfailureif,
                                           cleanup***REMOVED***

if 'TRAVIS' not in os.environ:
    @image_comparison(baseline_images=['pdf_use14corefonts'***REMOVED***,
                      extensions=['pdf'***REMOVED******REMOVED***
    def test_use14corefonts(***REMOVED***:
        rcParams['pdf.use14corefonts'***REMOVED*** = True
        rcParams['font.family'***REMOVED*** = 'sans-serif'
        rcParams['font.size'***REMOVED*** = 8
        rcParams['font.sans-serif'***REMOVED*** = ['Helvetica'***REMOVED***
        rcParams['pdf.compression'***REMOVED*** = 0

        text = '''A three-line text positioned just above a blue line
    and containing some French characters and the euro symbol:
    "Merci pépé pour les 10 €"'''


@cleanup
def test_type42(***REMOVED***:
    rcParams['pdf.fonttype'***REMOVED*** = 42

    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(111***REMOVED***
    ax.plot([1, 2, 3***REMOVED******REMOVED***
    fig.savefig(io.BytesIO(***REMOVED******REMOVED***


@cleanup
def test_multipage_pagecount(***REMOVED***:
    with PdfPages(io.BytesIO(***REMOVED******REMOVED*** as pdf:
        assert pdf.get_pagecount(***REMOVED*** == 0
        fig = plt.figure(***REMOVED***
        ax = fig.add_subplot(111***REMOVED***
        ax.plot([1, 2, 3***REMOVED******REMOVED***
        fig.savefig(pdf, format="pdf"***REMOVED***
        assert pdf.get_pagecount(***REMOVED*** == 1
        pdf.savefig(***REMOVED***
        assert pdf.get_pagecount(***REMOVED*** == 2


@cleanup
def test_multipage_keep_empty(***REMOVED***:
    from matplotlib.backends.backend_pdf import PdfPages
    from tempfile import NamedTemporaryFile
    # test empty pdf files
    # test that an empty pdf is left behind with keep_empty=True (default***REMOVED***
    with NamedTemporaryFile(delete=False***REMOVED*** as tmp:
        with PdfPages(tmp***REMOVED*** as pdf:
            filename = pdf._file.fh.name
        assert os.path.exists(filename***REMOVED***
    os.remove(filename***REMOVED***
    # test if an empty pdf is deleting itself afterwards with keep_empty=False
    with PdfPages(filename, keep_empty=False***REMOVED*** as pdf:
        pass
    assert not os.path.exists(filename***REMOVED***
    # test pdf files with content, they should never be deleted
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(111***REMOVED***
    ax.plot([1, 2, 3***REMOVED******REMOVED***
    # test that a non-empty pdf is left behind with keep_empty=True (default***REMOVED***
    with NamedTemporaryFile(delete=False***REMOVED*** as tmp:
        with PdfPages(tmp***REMOVED*** as pdf:
            filename = pdf._file.fh.name
            pdf.savefig(***REMOVED***
        assert os.path.exists(filename***REMOVED***
    os.remove(filename***REMOVED***
    # test that a non-empty pdf is left behind with keep_empty=False
    with NamedTemporaryFile(delete=False***REMOVED*** as tmp:
        with PdfPages(tmp, keep_empty=False***REMOVED*** as pdf:
            filename = pdf._file.fh.name
            pdf.savefig(***REMOVED***
        assert os.path.exists(filename***REMOVED***
    os.remove(filename***REMOVED***


@cleanup
def test_composite_image(***REMOVED***:
    #Test that figures can be saved with and without combining multiple images
    #(on a single set of axes***REMOVED*** into a single composite image.
    X, Y = np.meshgrid(np.arange(-5, 5, 1***REMOVED***, np.arange(-5, 5, 1***REMOVED******REMOVED***
    Z = np.sin(Y ** 2***REMOVED***
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(1, 1, 1***REMOVED***
    ax.set_xlim(0, 3***REMOVED***
    ax.imshow(Z, extent=[0, 1, 0, 1***REMOVED******REMOVED***
    ax.imshow(Z[::-1***REMOVED***, extent=[2, 3, 0, 1***REMOVED******REMOVED***
    plt.rcParams['image.composite_image'***REMOVED*** = True
    with PdfPages(io.BytesIO(***REMOVED******REMOVED*** as pdf:
        fig.savefig(pdf, format="pdf"***REMOVED***
        assert len(pdf._file.images.keys(***REMOVED******REMOVED*** == 1
    plt.rcParams['image.composite_image'***REMOVED*** = False
    with PdfPages(io.BytesIO(***REMOVED******REMOVED*** as pdf:
        fig.savefig(pdf, format="pdf"***REMOVED***
        assert len(pdf._file.images.keys(***REMOVED******REMOVED*** == 2


@image_comparison(baseline_images=['hatching_legend'***REMOVED***,
                  extensions=['pdf'***REMOVED******REMOVED***
def test_hatching_legend(***REMOVED***:
    ***REMOVED***Test for correct hatching on patches in legend***REMOVED***
    fig = plt.figure(figsize=(1, 2***REMOVED******REMOVED***

    a = plt.Rectangle([0, 0***REMOVED***, 0, 0, facecolor="green", hatch="XXXX"***REMOVED***
    b = plt.Rectangle([0, 0***REMOVED***, 0, 0, facecolor="blue", hatch="XXXX"***REMOVED***

    fig.legend([a, b, a, b***REMOVED***, ["", "", "", ""***REMOVED******REMOVED***


@image_comparison(baseline_images=['grayscale_alpha'***REMOVED***,
                  extensions=['pdf'***REMOVED***, tol=1e-3***REMOVED***
def test_grayscale_alpha(***REMOVED***:
    ***REMOVED***Masking images with NaN did not work for grayscale images***REMOVED***
    x, y = np.ogrid[-2:2:.1, -2:2:.1***REMOVED***
    dd = np.exp(-(x**2 + y**2***REMOVED******REMOVED***
    dd[dd < .1***REMOVED*** = np.nan
    fig, ax = plt.subplots(***REMOVED***
    ax.imshow(dd, interpolation='none', cmap='gray_r'***REMOVED***
    ax.set_xticks([***REMOVED******REMOVED***
    ax.set_yticks([***REMOVED******REMOVED***
