# -*- encoding: utf-8 -*-
from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six

***REMOVED***
import shutil

import numpy as np
import nose
from nose.plugins.skip import SkipTest

import matplotlib as mpl
import matplotlib.pyplot as plt
from matplotlib.compat import subprocess
from matplotlib.testing.compare import compare_images, ImageComparisonFailure
from matplotlib.testing.decorators import _image_directories, switch_backend


baseline_dir, result_dir = _image_directories(lambda: 'dummy func'***REMOVED***


def check_for(texsystem***REMOVED***:
    header = ***REMOVED***
    \\documentclass{minimal***REMOVED***
    \\usepackage{pgf***REMOVED***
    \\begin{document***REMOVED***
    \\typeout{pgfversion=\\pgfversion***REMOVED***
    \\makeatletter
    \\@@end
    ***REMOVED***
    ***REMOVED***
        latex = subprocess.Popen(["xelatex", "-halt-on-error"***REMOVED***,
                                 stdin=subprocess.PIPE,
                                 stdout=subprocess.PIPE***REMOVED***
        stdout, stderr = latex.communicate(header.encode("utf8"***REMOVED******REMOVED***
    except OSError:
        return False

    return latex.returncode == 0


def compare_figure(fname, savefig_kwargs={***REMOVED******REMOVED***:
    actual = os.path.join(result_dir, fname***REMOVED***
    plt.savefig(actual, **savefig_kwargs***REMOVED***

    expected = os.path.join(result_dir, "expected_%s" % fname***REMOVED***
    shutil.copyfile(os.path.join(baseline_dir, fname***REMOVED***, expected***REMOVED***
    err = compare_images(expected, actual, tol=14***REMOVED***
    if err:
        raise ImageComparisonFailure('images not close: %s vs. '
                                     '%s' % (actual, expected***REMOVED******REMOVED***


def create_figure(***REMOVED***:
    plt.figure(***REMOVED***
    x = np.linspace(0, 1, 15***REMOVED***

    # line plot
    plt.plot(x, x ** 2, "b-"***REMOVED***

    # marker
    plt.plot(x, 1 - x**2, "g>"***REMOVED***

    # filled paths and patterns
    plt.fill_between([0., .4***REMOVED***, [.4, 0.***REMOVED***, hatch='//', facecolor="lightgray",
                     edgecolor="red"***REMOVED***
    plt.fill([3, 3, .8, .8, 3***REMOVED***, [2, -2, -2, 0, 2***REMOVED***, "b"***REMOVED***

    # text and typesetting
    plt.plot([0.9***REMOVED***, [0.5***REMOVED***, "ro", markersize=3***REMOVED***
    plt.text(0.9, 0.5, 'unicode (ü, °, µ***REMOVED*** and math ($\\mu_i = x_i^2$***REMOVED***',
             ha='right', fontsize=20***REMOVED***
    plt.ylabel('sans-serif, blue, $\\frac{\\sqrt{x***REMOVED******REMOVED***{y^2***REMOVED***$..',
               family='sans-serif', color='blue'***REMOVED***

    plt.xlim(0, 1***REMOVED***
    plt.ylim(0, 1***REMOVED***


# test compiling a figure to pdf with xelatex
@switch_backend('pgf'***REMOVED***
def test_xelatex(***REMOVED***:
    if not check_for('xelatex'***REMOVED***:
        raise SkipTest('xelatex + pgf is required'***REMOVED***

    rc_xelatex = {'font.family': 'serif',
                  'pgf.rcfonts': False***REMOVED***
    mpl.rcParams.update(rc_xelatex***REMOVED***
    create_figure(***REMOVED***
    compare_figure('pgf_xelatex.pdf'***REMOVED***


# test compiling a figure to pdf with pdflatex
@switch_backend('pgf'***REMOVED***
def test_pdflatex(***REMOVED***:
    if not check_for('pdflatex'***REMOVED***:
        raise SkipTest('pdflatex + pgf is required'***REMOVED***

    rc_pdflatex = {'font.family': 'serif',
                   'pgf.rcfonts': False,
                   'pgf.texsystem': 'pdflatex',
                   'pgf.preamble': ['\\usepackage[utf8x***REMOVED***{inputenc***REMOVED***',
                                    '\\usepackage[T1***REMOVED***{fontenc***REMOVED***'***REMOVED******REMOVED***
    mpl.rcParams.update(rc_pdflatex***REMOVED***
    create_figure(***REMOVED***
    compare_figure('pgf_pdflatex.pdf'***REMOVED***


# test updating the rc parameters for each figure
@switch_backend('pgf'***REMOVED***
def test_rcupdate(***REMOVED***:
    if not check_for('xelatex'***REMOVED*** or not check_for('pdflatex'***REMOVED***:
        raise SkipTest('xelatex and pdflatex + pgf required'***REMOVED***

    rc_sets = [***REMOVED***
    rc_sets.append({'font.family': 'sans-serif',
                    'font.size': 30,
                    'figure.subplot.left': .2,
                    'lines.markersize': 10,
                    'pgf.rcfonts': False,
                    'pgf.texsystem': 'xelatex'***REMOVED******REMOVED***
    rc_sets.append({'font.family': 'monospace',
                    'font.size': 10,
                    'figure.subplot.left': .1,
                    'lines.markersize': 20,
                    'pgf.rcfonts': False,
                    'pgf.texsystem': 'pdflatex',
                    'pgf.preamble': ['\\usepackage[utf8x***REMOVED***{inputenc***REMOVED***',
                                     '\\usepackage[T1***REMOVED***{fontenc***REMOVED***',
                                     '\\usepackage{sfmath***REMOVED***'***REMOVED******REMOVED******REMOVED***

    for i, rc_set in enumerate(rc_sets***REMOVED***:
        mpl.rcParams.update(rc_set***REMOVED***
        create_figure(***REMOVED***
        compare_figure('pgf_rcupdate%d.pdf' % (i + 1***REMOVED******REMOVED***


# test backend-side clipping, since large numbers are not supported by TeX
@switch_backend('pgf'***REMOVED***
def test_pathclip(***REMOVED***:
    if not check_for('xelatex'***REMOVED***:
        raise SkipTest('xelatex + pgf is required'***REMOVED***

    rc_xelatex = {'font.family': 'serif',
                  'pgf.rcfonts': False***REMOVED***
    mpl.rcParams.update(rc_xelatex***REMOVED***

    plt.figure(***REMOVED***
    plt.plot([0., 1e100***REMOVED***, [0., 1e100***REMOVED******REMOVED***
    plt.xlim(0, 1***REMOVED***
    plt.ylim(0, 1***REMOVED***
    # this test passes if compiling/saving to pdf works (no image comparison***REMOVED***
    plt.savefig(os.path.join(result_dir, "pgf_pathclip.pdf"***REMOVED******REMOVED***


# test mixed mode rendering
@switch_backend('pgf'***REMOVED***
def test_mixedmode(***REMOVED***:
    if not check_for('xelatex'***REMOVED***:
        raise SkipTest('xelatex + pgf is required'***REMOVED***

    rc_xelatex = {'font.family': 'serif',
                  'pgf.rcfonts': False***REMOVED***
    mpl.rcParams.update(rc_xelatex***REMOVED***

    Y, X = np.ogrid[-1:1:40j, -1:1:40j***REMOVED***
    plt.figure(***REMOVED***
    plt.pcolor(X**2 + Y**2***REMOVED***.set_rasterized(True***REMOVED***
    compare_figure('pgf_mixedmode.pdf'***REMOVED***


# test bbox_inches clipping
@switch_backend('pgf'***REMOVED***
def test_bbox_inches(***REMOVED***:
    if not check_for('xelatex'***REMOVED***:
        raise SkipTest('xelatex + pgf is required'***REMOVED***

    rc_xelatex = {'font.family': 'serif',
                  'pgf.rcfonts': False***REMOVED***
    mpl.rcParams.update(rc_xelatex***REMOVED***

    Y, X = np.ogrid[-1:1:40j, -1:1:40j***REMOVED***
    fig = plt.figure(***REMOVED***
    ax1 = fig.add_subplot(121***REMOVED***
    ax1.plot(range(5***REMOVED******REMOVED***
    ax2 = fig.add_subplot(122***REMOVED***
    ax2.plot(range(5***REMOVED******REMOVED***
    plt.tight_layout(***REMOVED***

    bbox = ax1.get_window_extent(***REMOVED***.transformed(fig.dpi_scale_trans.inverted(***REMOVED******REMOVED***
    compare_figure('pgf_bbox_inches.pdf', savefig_kwargs={'bbox_inches': bbox***REMOVED******REMOVED***


if __name__ == '__main__':
    import nose
    nose.runmodule(argv=['-s', '--with-doctest'***REMOVED***, exit=False***REMOVED***
