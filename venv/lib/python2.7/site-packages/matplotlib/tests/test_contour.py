from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six

import datetime

import numpy as np
from matplotlib import mlab
from matplotlib.testing.decorators import cleanup, image_comparison
from matplotlib import pyplot as plt
from nose.tools import assert_equal, assert_raises
import warnings

import re


@cleanup
def test_contour_shape_1d_valid(***REMOVED***:

    x = np.arange(10***REMOVED***
    y = np.arange(9***REMOVED***
    z = np.random.random((9, 10***REMOVED******REMOVED***

    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(111***REMOVED***
    ax.contour(x, y, z***REMOVED***


@cleanup
def test_contour_shape_2d_valid(***REMOVED***:

    x = np.arange(10***REMOVED***
    y = np.arange(9***REMOVED***
    xg, yg = np.meshgrid(x, y***REMOVED***
    z = np.random.random((9, 10***REMOVED******REMOVED***

    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(111***REMOVED***
    ax.contour(xg, yg, z***REMOVED***


@cleanup
def test_contour_shape_mismatch_1(***REMOVED***:

    x = np.arange(9***REMOVED***
    y = np.arange(9***REMOVED***
    z = np.random.random((9, 10***REMOVED******REMOVED***

    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(111***REMOVED***

    ***REMOVED***
        ax.contour(x, y, z***REMOVED***
    except TypeError as exc:
        assert exc.args[0***REMOVED*** == 'Length of x must be number of columns in z.'


@cleanup
def test_contour_shape_mismatch_2(***REMOVED***:

    x = np.arange(10***REMOVED***
    y = np.arange(10***REMOVED***
    z = np.random.random((9, 10***REMOVED******REMOVED***

    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(111***REMOVED***

    ***REMOVED***
        ax.contour(x, y, z***REMOVED***
    except TypeError as exc:
        assert exc.args[0***REMOVED*** == 'Length of y must be number of rows in z.'


@cleanup
def test_contour_shape_mismatch_3(***REMOVED***:

    x = np.arange(10***REMOVED***
    y = np.arange(10***REMOVED***
    xg, yg = np.meshgrid(x, y***REMOVED***
    z = np.random.random((9, 10***REMOVED******REMOVED***

    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(111***REMOVED***

    ***REMOVED***
        ax.contour(xg, y, z***REMOVED***
    except TypeError as exc:
        assert exc.args[0***REMOVED*** == 'Number of dimensions of x and y should match.'

    ***REMOVED***
        ax.contour(x, yg, z***REMOVED***
    except TypeError as exc:
        assert exc.args[0***REMOVED*** == 'Number of dimensions of x and y should match.'


@cleanup
def test_contour_shape_mismatch_4(***REMOVED***:

    g = np.random.random((9, 10***REMOVED******REMOVED***
    b = np.random.random((9, 9***REMOVED******REMOVED***
    z = np.random.random((9, 10***REMOVED******REMOVED***

    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(111***REMOVED***

    ***REMOVED***
        ax.contour(b, g, z***REMOVED***
    except TypeError as exc:
        print(exc.args[0***REMOVED******REMOVED***
        assert re.match(
            r'Shape of x does not match that of z: ' +
            r'found \(9L?, 9L?\***REMOVED*** instead of \(9L?, 10L?\***REMOVED***\.',
            exc.args[0***REMOVED******REMOVED*** is not None

    ***REMOVED***
        ax.contour(g, b, z***REMOVED***
    except TypeError as exc:
        assert re.match(
            r'Shape of y does not match that of z: ' +
            r'found \(9L?, 9L?\***REMOVED*** instead of \(9L?, 10L?\***REMOVED***\.',
            exc.args[0***REMOVED******REMOVED*** is not None


@cleanup
def test_contour_shape_invalid_1(***REMOVED***:

    x = np.random.random((3, 3, 3***REMOVED******REMOVED***
    y = np.random.random((3, 3, 3***REMOVED******REMOVED***
    z = np.random.random((9, 10***REMOVED******REMOVED***

    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(111***REMOVED***

    ***REMOVED***
        ax.contour(x, y, z***REMOVED***
    except TypeError as exc:
        assert exc.args[0***REMOVED*** == 'Inputs x and y must be 1D or 2D.'


@cleanup
def test_contour_shape_invalid_2(***REMOVED***:

    x = np.random.random((3, 3, 3***REMOVED******REMOVED***
    y = np.random.random((3, 3, 3***REMOVED******REMOVED***
    z = np.random.random((3, 3, 3***REMOVED******REMOVED***

    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(111***REMOVED***

    ***REMOVED***
        ax.contour(x, y, z***REMOVED***
    except TypeError as exc:
        assert exc.args[0***REMOVED*** == 'Input z must be a 2D array.'


@image_comparison(baseline_images=['contour_manual_labels'***REMOVED******REMOVED***
def test_contour_manual_labels(***REMOVED***:

    x, y = np.meshgrid(np.arange(0, 10***REMOVED***, np.arange(0, 10***REMOVED******REMOVED***
    z = np.max(np.dstack([abs(x***REMOVED***, abs(y***REMOVED******REMOVED******REMOVED***, 2***REMOVED***

    plt.figure(figsize=(6, 2***REMOVED******REMOVED***
    cs = plt.contour(x, y, z***REMOVED***
    pts = np.array([(1.5, 3.0***REMOVED***, (1.5, 4.4***REMOVED***, (1.5, 6.0***REMOVED******REMOVED******REMOVED***
    plt.clabel(cs, manual=pts***REMOVED***


@image_comparison(baseline_images=['contour_labels_size_color'***REMOVED***,
                  extensions=['png'***REMOVED***, remove_text=True***REMOVED***
def test_contour_manual_labels(***REMOVED***:

    x, y = np.meshgrid(np.arange(0, 10***REMOVED***, np.arange(0, 10***REMOVED******REMOVED***
    z = np.max(np.dstack([abs(x***REMOVED***, abs(y***REMOVED******REMOVED******REMOVED***, 2***REMOVED***

    plt.figure(figsize=(6, 2***REMOVED******REMOVED***
    cs = plt.contour(x, y, z***REMOVED***
    pts = np.array([(1.5, 3.0***REMOVED***, (1.5, 4.4***REMOVED***, (1.5, 6.0***REMOVED******REMOVED******REMOVED***
    plt.clabel(cs, manual=pts, fontsize='small', colors=('r', 'g'***REMOVED******REMOVED***


@image_comparison(baseline_images=['contour_manual_colors_and_levels'***REMOVED***,
                  extensions=['png'***REMOVED***, remove_text=True***REMOVED***
def test_given_colors_levels_and_extends(***REMOVED***:
    _, axes = plt.subplots(2, 4***REMOVED***

    data = np.arange(12***REMOVED***.reshape(3, 4***REMOVED***

    colors = ['red', 'yellow', 'pink', 'blue', 'black'***REMOVED***
    levels = [2, 4, 8, 10***REMOVED***

    for i, ax in enumerate(axes.flatten(***REMOVED******REMOVED***:
        plt.sca(ax***REMOVED***

        filled = i % 2 == 0.
        extend = ['neither', 'min', 'max', 'both'***REMOVED***[i // 2***REMOVED***

        if filled:
            last_color = -1 if extend in ['min', 'max'***REMOVED*** else None
            plt.contourf(data, colors=colors[:last_color***REMOVED***, levels=levels,
                         extend=extend***REMOVED***
        else:
            last_level = -1 if extend == 'both' else None
            plt.contour(data, colors=colors, levels=levels[:last_level***REMOVED***,
                        extend=extend***REMOVED***

        plt.colorbar(***REMOVED***


@image_comparison(baseline_images=['contour_datetime_axis'***REMOVED***,
                  extensions=['png'***REMOVED***, remove_text=False***REMOVED***
def test_contour_datetime_axis(***REMOVED***:
    fig = plt.figure(***REMOVED***
    fig.subplots_adjust(hspace=0.4, top=0.98, bottom=.15***REMOVED***
    base = datetime.datetime(2013, 1, 1***REMOVED***
    x = np.array([base + datetime.timedelta(days=d***REMOVED*** for d in range(20***REMOVED******REMOVED******REMOVED***
    y = np.arange(20***REMOVED***
    z1, z2 = np.meshgrid(np.arange(20***REMOVED***, np.arange(20***REMOVED******REMOVED***
    z = z1 * z2
    plt.subplot(221***REMOVED***
    plt.contour(x, y, z***REMOVED***
    plt.subplot(222***REMOVED***
    plt.contourf(x, y, z***REMOVED***
    x = np.repeat(x[np.newaxis***REMOVED***, 20, axis=0***REMOVED***
    y = np.repeat(y[:, np.newaxis***REMOVED***, 20, axis=1***REMOVED***
    plt.subplot(223***REMOVED***
    plt.contour(x, y, z***REMOVED***
    plt.subplot(224***REMOVED***
    plt.contourf(x, y, z***REMOVED***
    for ax in fig.get_axes(***REMOVED***:
        for label in ax.get_xticklabels(***REMOVED***:
            label.set_ha('right'***REMOVED***
            label.set_rotation(30***REMOVED***


@image_comparison(baseline_images=['contour_test_label_transforms'***REMOVED***,
                  extensions=['png'***REMOVED***, remove_text=True***REMOVED***
def test_labels(***REMOVED***:
    # Adapted from pylab_examples example code: contour_demo.py
    # see issues #2475, #2843, and #2818 for explanation
    delta = 0.025
    x = np.arange(-3.0, 3.0, delta***REMOVED***
    y = np.arange(-2.0, 2.0, delta***REMOVED***
    X, Y = np.meshgrid(x, y***REMOVED***
    Z1 = mlab.bivariate_normal(X, Y, 1.0, 1.0, 0.0, 0.0***REMOVED***
    Z2 = mlab.bivariate_normal(X, Y, 1.5, 0.5, 1, 1***REMOVED***
    # difference of Gaussians
    Z = 10.0 * (Z2 - Z1***REMOVED***

    fig, ax = plt.subplots(1, 1***REMOVED***
    CS = ax.contour(X, Y, Z***REMOVED***
    disp_units = [(216, 177***REMOVED***, (359, 290***REMOVED***, (521, 406***REMOVED******REMOVED***
    data_units = [(-2, .5***REMOVED***, (0, -1.5***REMOVED***, (2.8, 1***REMOVED******REMOVED***

    CS.clabel(***REMOVED***

    for x, y in data_units:
        CS.add_label_near(x, y, inline=True, transform=None***REMOVED***

    for x, y in disp_units:
        CS.add_label_near(x, y, inline=True, transform=False***REMOVED***


@image_comparison(baseline_images=['contour_corner_mask_False',
                                   'contour_corner_mask_True'***REMOVED***,
                  extensions=['png'***REMOVED***, remove_text=True***REMOVED***
def test_corner_mask(***REMOVED***:
    n = 60
    mask_level = 0.95
    noise_amp = 1.0
    np.random.seed([1***REMOVED******REMOVED***
    x, y = np.meshgrid(np.linspace(0, 2.0, n***REMOVED***, np.linspace(0, 2.0, n***REMOVED******REMOVED***
    z = np.cos(7*x***REMOVED****np.sin(8*y***REMOVED*** + noise_amp*np.random.rand(n, n***REMOVED***
    mask = np.where(np.random.rand(n, n***REMOVED*** >= mask_level, True, False***REMOVED***
    z = np.ma.array(z, mask=mask***REMOVED***

    for corner_mask in [False, True***REMOVED***:
        fig = plt.figure(***REMOVED***
        plt.contourf(z, corner_mask=corner_mask***REMOVED***


@cleanup
def test_contourf_decreasing_levels(***REMOVED***:
    # github issue 5477.
    z = [[0.1, 0.3***REMOVED***, [0.5, 0.7***REMOVED******REMOVED***
    plt.figure(***REMOVED***
    assert_raises(ValueError, plt.contourf, z, [1.0, 0.0***REMOVED******REMOVED***
    # Legacy contouring algorithm gives a warning rather than raising an error,
    # plus a DeprecationWarning.
    with warnings.catch_warnings(record=True***REMOVED*** as w:
        plt.contourf(z, [1.0, 0.0***REMOVED***, corner_mask='legacy'***REMOVED***
    assert_equal(len(w***REMOVED***, 2***REMOVED***


if __name__ == '__main__':
    import nose
    nose.runmodule(argv=['-s', '--with-doctest'***REMOVED***, exit=False***REMOVED***
