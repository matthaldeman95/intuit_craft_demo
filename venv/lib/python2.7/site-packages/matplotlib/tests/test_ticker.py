from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six
import nose.tools
from nose.tools import assert_raises
from numpy.testing import assert_almost_equal
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import matplotlib.ticker as mticker
from matplotlib.testing.decorators import cleanup

import warnings


def test_MaxNLocator(***REMOVED***:
    loc = mticker.MaxNLocator(nbins=5***REMOVED***
    test_value = np.array([20., 40., 60., 80., 100.***REMOVED******REMOVED***
    assert_almost_equal(loc.tick_values(20, 100***REMOVED***, test_value***REMOVED***

    test_value = np.array([0., 0.0002, 0.0004, 0.0006, 0.0008, 0.001***REMOVED******REMOVED***
    assert_almost_equal(loc.tick_values(0.001, 0.0001***REMOVED***, test_value***REMOVED***

    test_value = np.array([-1.0e+15, -5.0e+14, 0e+00, 5e+14, 1.0e+15***REMOVED******REMOVED***
    assert_almost_equal(loc.tick_values(-1e15, 1e15***REMOVED***, test_value***REMOVED***


def test_LinearLocator(***REMOVED***:
    loc = mticker.LinearLocator(numticks=3***REMOVED***
    test_value = np.array([-0.8, -0.3, 0.2***REMOVED******REMOVED***
    assert_almost_equal(loc.tick_values(-0.8, 0.2***REMOVED***, test_value***REMOVED***


def test_MultipleLocator(***REMOVED***:
    loc = mticker.MultipleLocator(base=3.147***REMOVED***
    test_value = np.array([-9.441, -6.294, -3.147, 0., 3.147, 6.294,
                           9.441, 12.588***REMOVED******REMOVED***
    assert_almost_equal(loc.tick_values(-7, 10***REMOVED***, test_value***REMOVED***


@cleanup
def test_AutoMinorLocator(***REMOVED***:
    fig, ax = plt.subplots(***REMOVED***
    ax.set_xlim(0, 1.39***REMOVED***
    ax.minorticks_on(***REMOVED***
    test_value = np.array([0.05, 0.1, 0.15, 0.25, 0.3, 0.35, 0.45,
                           0.5, 0.55, 0.65, 0.7, 0.75, 0.85, 0.9,
                           0.95, 1, 1.05, 1.1, 1.15, 1.25, 1.3, 1.35***REMOVED******REMOVED***
    assert_almost_equal(ax.xaxis.get_ticklocs(minor=True***REMOVED***, test_value***REMOVED***


def test_LogLocator(***REMOVED***:
    loc = mticker.LogLocator(numticks=5***REMOVED***
    assert_raises(ValueError, loc.tick_values, 0, 1000***REMOVED***

    test_value = np.array([1.00000000e-05, 1.00000000e-03, 1.00000000e-01,
                           1.00000000e+01, 1.00000000e+03, 1.00000000e+05,
                           1.00000000e+07, 1.000000000e+09***REMOVED******REMOVED***
    assert_almost_equal(loc.tick_values(0.001, 1.1e5***REMOVED***, test_value***REMOVED***

    loc = mticker.LogLocator(base=2***REMOVED***
    test_value = np.array([0.5, 1., 2., 4., 8., 16., 32., 64., 128., 256.***REMOVED******REMOVED***
    assert_almost_equal(loc.tick_values(1, 100***REMOVED***, test_value***REMOVED***


def test_LinearLocator_set_params(***REMOVED***:
    ***REMOVED***
    Create linear locator with presets={***REMOVED***, numticks=2 and change it to
    something else. See if change was successful. Should not exception.
    ***REMOVED***
    loc = mticker.LinearLocator(numticks=2***REMOVED***
    loc.set_params(numticks=8, presets={(0, 1***REMOVED***: [***REMOVED******REMOVED******REMOVED***
    nose.tools.assert_equal(loc.numticks, 8***REMOVED***
    nose.tools.assert_equal(loc.presets, {(0, 1***REMOVED***: [***REMOVED******REMOVED******REMOVED***


def test_LogLocator_set_params(***REMOVED***:
    ***REMOVED***
    Create log locator with default value, base=10.0, subs=[1.0***REMOVED***, numdecs=4,
    numticks=15 and change it to something else.
    See if change was successful.
    Should not exception.
    ***REMOVED***
    loc = mticker.LogLocator(***REMOVED***
    loc.set_params(numticks=8, numdecs=8, subs=[2.0***REMOVED***, base=8***REMOVED***
    nose.tools.assert_equal(loc.numticks, 8***REMOVED***
    nose.tools.assert_equal(loc.numdecs, 8***REMOVED***
    nose.tools.assert_equal(loc.base, 8***REMOVED***
    nose.tools.assert_equal(loc.subs, [2.0***REMOVED******REMOVED***


def test_NullLocator_set_params(***REMOVED***:
    ***REMOVED***
    Create null locator, and attempt to call set_params(***REMOVED*** on it.
    Should not exception, and should raise a warning.
    ***REMOVED***
    loc = mticker.NullLocator(***REMOVED***
    with warnings.catch_warnings(record=True***REMOVED*** as w:
        loc.set_params(***REMOVED***
        nose.tools.assert_equal(len(w***REMOVED***, 1***REMOVED***


def test_MultipleLocator_set_params(***REMOVED***:
    ***REMOVED***
    Create multiple locator with 0.7 base, and change it to something else.
    See if change was successful.
    Should not exception.
    ***REMOVED***
    mult = mticker.MultipleLocator(base=0.7***REMOVED***
    mult.set_params(base=1.7***REMOVED***
    nose.tools.assert_equal(mult._base, 1.7***REMOVED***


def test_LogitLocator_set_params(***REMOVED***:
    ***REMOVED***
    Create logit locator with default minor=False, and change it to something
    else. See if change was successful. Should not exception.
    ***REMOVED***
    loc = mticker.LogitLocator(***REMOVED***  # Defaults to false.
    loc.set_params(minor=True***REMOVED***
    nose.tools.assert_true(loc.minor***REMOVED***


def test_FixedLocator_set_params(***REMOVED***:
    ***REMOVED***
    Create fixed locator with 5 nbins, and change it to something else.
    See if change was successful.
    Should not exception.
    ***REMOVED***
    fixed = mticker.FixedLocator(range(0, 24***REMOVED***, nbins=5***REMOVED***
    fixed.set_params(nbins=7***REMOVED***
    nose.tools.assert_equal(fixed.nbins, 7***REMOVED***


def test_IndexLocator_set_params(***REMOVED***:
    ***REMOVED***
    Create index locator with 3 base, 4 offset. and change it to something
    else. See if change was successful.
    Should not exception.
    ***REMOVED***
    index = mticker.IndexLocator(base=3, offset=4***REMOVED***
    index.set_params(base=7, offset=7***REMOVED***
    nose.tools.assert_equal(index._base, 7***REMOVED***
    nose.tools.assert_equal(index.offset, 7***REMOVED***


def test_SymmetricalLogLocator_set_params(***REMOVED***:
    ***REMOVED***
    Create symmetrical log locator with default subs =[1.0***REMOVED*** numticks = 15,
    and change it to something else.
    See if change was successful.
    Should not exception.
    ***REMOVED***
    # since we only test for the params change. I will pass empty transform
    sym = mticker.SymmetricalLogLocator(None***REMOVED***
    sym.set_params(subs=[2.0***REMOVED***, numticks=8***REMOVED***
    nose.tools.assert_equal(sym._subs, [2.0***REMOVED******REMOVED***
    nose.tools.assert_equal(sym.numticks, 8***REMOVED***


def test_LogFormatterExponent(***REMOVED***:
    class FakeAxis(object***REMOVED***:
        ***REMOVED***Allow Formatter to be called without having a "full" plot set up.***REMOVED***
        def get_view_interval(self***REMOVED***:
            return 1, 10

    i = np.arange(-3, 4, dtype=float***REMOVED***
    expected_result = ['-3', '-2', '-1', '0', '1', '2', '3'***REMOVED***
    for base in [2, 5, 10, np.pi, np.e***REMOVED***:
        formatter = mticker.LogFormatterExponent(base=base***REMOVED***
        formatter.axis = FakeAxis(***REMOVED***
        vals = base**i
        labels = [formatter(x, pos***REMOVED*** for (x, pos***REMOVED*** in zip(vals, i***REMOVED******REMOVED***
        nose.tools.assert_equal(labels, expected_result***REMOVED***

    # Should be a blank string for non-integer powers if labelOnlyBase=True
    formatter = mticker.LogFormatterExponent(base=10, labelOnlyBase=True***REMOVED***
    formatter.axis = FakeAxis(***REMOVED***
    nose.tools.assert_equal(formatter(10**0.1***REMOVED***, ''***REMOVED***

    # Otherwise, non-integer powers should be nicely formatted
    locs = np.array([0.1, 0.00001, np.pi, 0.2, -0.2, -0.00001***REMOVED******REMOVED***
    i = range(len(locs***REMOVED******REMOVED***
    expected_result = ['0.1', '1e-05', '3.14', '0.2', '-0.2', '-1e-05'***REMOVED***
    for base in [2, 5, 10, np.pi, np.e***REMOVED***:
        formatter = mticker.LogFormatterExponent(base, labelOnlyBase=False***REMOVED***
        formatter.axis = FakeAxis(***REMOVED***
        vals = base**locs
        labels = [formatter(x, pos***REMOVED*** for (x, pos***REMOVED*** in zip(vals, i***REMOVED******REMOVED***
        nose.tools.assert_equal(labels, expected_result***REMOVED***


def test_use_offset(***REMOVED***:
    for use_offset in [True, False***REMOVED***:
        with matplotlib.rc_context({'axes.formatter.useoffset': use_offset***REMOVED******REMOVED***:
            tmp_form = mticker.ScalarFormatter(***REMOVED***
            nose.tools.assert_equal(use_offset, tmp_form.get_useOffset(***REMOVED******REMOVED***


def test_formatstrformatter(***REMOVED***:
    # test % style formatter
    tmp_form = mticker.FormatStrFormatter('%05d'***REMOVED***
    nose.tools.assert_equal('00002', tmp_form(2***REMOVED******REMOVED***

    # test str.format(***REMOVED*** style formatter
    tmp_form = mticker.StrMethodFormatter('{x:05d***REMOVED***'***REMOVED***
    nose.tools.assert_equal('00002', tmp_form(2***REMOVED******REMOVED***

if __name__ == '__main__':
    import nose
    nose.runmodule(argv=['-s', '--with-doctest'***REMOVED***, exit=False***REMOVED***
