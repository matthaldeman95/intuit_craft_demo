from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

import numpy as np
from nose.tools import assert_true
from matplotlib.externals import six

import matplotlib
import matplotlib.pyplot as plt
import matplotlib.transforms as mtransforms
from matplotlib.testing.decorators import image_comparison, cleanup


@image_comparison(baseline_images=['spines_axes_positions'***REMOVED******REMOVED***
def test_spines_axes_positions(***REMOVED***:
    # SF bug 2852168
    fig = plt.figure(***REMOVED***
    x = np.linspace(0, 2*np.pi, 100***REMOVED***
    y = 2*np.sin(x***REMOVED***
    ax = fig.add_subplot(1, 1, 1***REMOVED***
    ax.set_title('centered spines'***REMOVED***
    ax.plot(x, y***REMOVED***
    ax.spines['right'***REMOVED***.set_position(('axes', 0.1***REMOVED******REMOVED***
    ax.yaxis.set_ticks_position('right'***REMOVED***
    ax.spines['top'***REMOVED***.set_position(('axes', 0.25***REMOVED******REMOVED***
    ax.xaxis.set_ticks_position('top'***REMOVED***
    ax.spines['left'***REMOVED***.set_color('none'***REMOVED***
    ax.spines['bottom'***REMOVED***.set_color('none'***REMOVED***


@image_comparison(baseline_images=['spines_data_positions'***REMOVED******REMOVED***
def test_spines_data_positions(***REMOVED***:
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(1, 1, 1***REMOVED***
    ax.spines['left'***REMOVED***.set_position(('data', -1.5***REMOVED******REMOVED***
    ax.spines['top'***REMOVED***.set_position(('data', 0.5***REMOVED******REMOVED***
    ax.spines['right'***REMOVED***.set_position(('data', -0.5***REMOVED******REMOVED***
    ax.spines['bottom'***REMOVED***.set_position('zero'***REMOVED***
    ax.set_xlim([-2, 2***REMOVED******REMOVED***
    ax.set_ylim([-2, 2***REMOVED******REMOVED***


@image_comparison(baseline_images=['spines_capstyle'***REMOVED******REMOVED***
def test_spines_capstyle(***REMOVED***:
    # issue 2542
    plt.rc('axes', linewidth=20***REMOVED***
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(1, 1, 1***REMOVED***
    ax.set_xticks([***REMOVED******REMOVED***
    ax.set_yticks([***REMOVED******REMOVED***


@cleanup
def test_label_without_ticks(***REMOVED***:
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(1, 1, 1***REMOVED***
    plt.subplots_adjust(left=0.3, bottom=0.3***REMOVED***
    ax.plot(np.arange(10***REMOVED******REMOVED***
    ax.yaxis.set_ticks_position('left'***REMOVED***
    ax.spines['left'***REMOVED***.set_position(('outward', 30***REMOVED******REMOVED***
    ax.spines['right'***REMOVED***.set_visible(False***REMOVED***
    ax.set_ylabel('y label'***REMOVED***
    ax.xaxis.set_ticks_position('bottom'***REMOVED***
    ax.spines['bottom'***REMOVED***.set_position(('outward', 30***REMOVED******REMOVED***
    ax.spines['top'***REMOVED***.set_visible(False***REMOVED***
    ax.set_xlabel('x label'***REMOVED***
    ax.xaxis.set_ticks([***REMOVED******REMOVED***
    ax.yaxis.set_ticks([***REMOVED******REMOVED***
    plt.draw(***REMOVED***

    spine = ax.spines['left'***REMOVED***
    spinebbox = spine.get_transform(***REMOVED***.transform_path(
        spine.get_path(***REMOVED******REMOVED***.get_extents(***REMOVED***
    # replace with assert_less if >python2.6
    assert_true(ax.yaxis.label.get_position(***REMOVED***[0***REMOVED*** < spinebbox.xmin,
                "Y-Axis label not left of the spine"***REMOVED***

    spine = ax.spines['bottom'***REMOVED***
    spinebbox = spine.get_transform(***REMOVED***.transform_path(
        spine.get_path(***REMOVED******REMOVED***.get_extents(***REMOVED***
    # replace with assert_less if >python2.6
    assert_true(ax.xaxis.label.get_position(***REMOVED***[1***REMOVED*** < spinebbox.ymin,
                "X-Axis label not below the spine"***REMOVED***
