import matplotlib.pyplot as plt
import matplotlib.units as munits
import numpy as np

***REMOVED***
    # mock in python 3.3+
    from unittest.mock import MagicMock
except ImportError:
    from mock import MagicMock


# Tests that the conversion machinery works properly for classes that
# work as a facade over numpy arrays (like pint***REMOVED***
def test_numpy_facade(***REMOVED***:
    # Basic class that wraps numpy array and has units
    class Quantity(object***REMOVED***:
        def __init__(self, data, units***REMOVED***:
            self.magnitude = data
            self.units = units

        def to(self, new_units***REMOVED***:
            return Quantity(self.magnitude, new_units***REMOVED***

        def __getattr__(self, attr***REMOVED***:
            return getattr(self.magnitude, attr***REMOVED***

        def __getitem__(self, item***REMOVED***:
            return self.magnitude[item***REMOVED***

    # Create an instance of the conversion interface and
    # mock so we can check methods called
    qc = munits.ConversionInterface(***REMOVED***

    def convert(value, unit, axis***REMOVED***:
        if hasattr(value, 'units'***REMOVED***:
            return value.to(unit***REMOVED***
        else:
            return Quantity(value, axis.get_units(***REMOVED******REMOVED***.to(unit***REMOVED***.magnitude

    qc.convert = MagicMock(side_effect=convert***REMOVED***
    qc.axisinfo = MagicMock(return_value=None***REMOVED***
    qc.default_units = MagicMock(side_effect=lambda x, a: x.units***REMOVED***

    # Register the class
    munits.registry[Quantity***REMOVED*** = qc

    # Simple test
    t = Quantity(np.linspace(0, 10***REMOVED***, 'sec'***REMOVED***
    d = Quantity(30 * np.linspace(0, 10***REMOVED***, 'm/s'***REMOVED***

    fig, ax = plt.subplots(1, 1***REMOVED***
    l, = plt.plot(t, d***REMOVED***
    ax.yaxis.set_units('inch'***REMOVED***

    assert qc.convert.called
    assert qc.axisinfo.called
    assert qc.default_units.called
