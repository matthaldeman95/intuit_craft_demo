***REMOVED***
Tests specific to the lines module.
***REMOVED***
from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six

import nose
from nose.tools import assert_true, assert_raises
from timeit import repeat
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
from matplotlib.testing.decorators import cleanup, image_comparison
import sys


@cleanup
def test_invisible_Line_rendering(***REMOVED***:
    ***REMOVED***
    Github issue #1256 identified a bug in Line.draw method

    Despite visibility attribute set to False, the draw method was not
    returning early enough and some pre-rendering code was executed
    though not necessary.

    Consequence was an excessive draw time for invisible Line instances
    holding a large number of points (Npts> 10**6***REMOVED***
    ***REMOVED***
    # Creates big x and y data:
    N = 10**7
    x = np.linspace(0,1,N***REMOVED***
    y = np.random.normal(size=N***REMOVED***

    # Create a plot figure:
    fig = plt.figure(***REMOVED***
    ax = plt.subplot(111***REMOVED***

    # Create a "big" Line instance:
    l = mpl.lines.Line2D(x,y***REMOVED***
    l.set_visible(False***REMOVED***
    # but don't add it to the Axis instance `ax`

    # [here Interactive panning and zooming is pretty responsive***REMOVED***
    # Time the canvas drawing:
    t_no_line = min(repeat(fig.canvas.draw, number=1, repeat=3***REMOVED******REMOVED***
    # (gives about 25 ms***REMOVED***

    # Add the big invisible Line:
    ax.add_line(l***REMOVED***

    # [Now interactive panning and zooming is very slow***REMOVED***
    # Time the canvas drawing:
    t_unvisible_line = min(repeat(fig.canvas.draw, number=1, repeat=3***REMOVED******REMOVED***
    # gives about 290 ms for N = 10**7 pts

    slowdown_factor = (t_unvisible_line/t_no_line***REMOVED***
    slowdown_threshold = 2 # trying to avoid false positive failures
    assert_true(slowdown_factor < slowdown_threshold***REMOVED***


@cleanup
def test_set_line_coll_dash(***REMOVED***:
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(1, 1, 1***REMOVED***

    np.random.seed(0***REMOVED***
    # Testing setting linestyles for line collections.
    # This should not produce an error.
    cs = ax.contour(np.random.randn(20, 30***REMOVED***, linestyles=[(0, (3, 3***REMOVED******REMOVED******REMOVED******REMOVED***

    assert True


@image_comparison(baseline_images=['line_dashes'***REMOVED***, remove_text=True***REMOVED***
def test_line_dashes(***REMOVED***:
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(1, 1, 1***REMOVED***

    ax.plot(range(10***REMOVED***, linestyle=(0, (3, 3***REMOVED******REMOVED***, lw=5***REMOVED***


@cleanup
def test_line_colors(***REMOVED***:
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(1, 1, 1***REMOVED***
    ax.plot(range(10***REMOVED***, color='none'***REMOVED***
    ax.plot(range(10***REMOVED***, color='r'***REMOVED***
    ax.plot(range(10***REMOVED***, color='.3'***REMOVED***
    ax.plot(range(10***REMOVED***, color=(1, 0, 0, 1***REMOVED******REMOVED***
    ax.plot(range(10***REMOVED***, color=(1, 0, 0***REMOVED******REMOVED***
    fig.canvas.draw(***REMOVED***
    assert True


@cleanup
def test_linestyle_variants(***REMOVED***:
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(1, 1, 1***REMOVED***
    for ls in ["-", "solid", "--", "dashed",
               "-.", "dashdot", ":", "dotted"***REMOVED***:
        ax.plot(range(10***REMOVED***, linestyle=ls***REMOVED***

    fig.canvas.draw(***REMOVED***
    assert True


@cleanup
def test_valid_linestyles(***REMOVED***:
    if sys.version_info[:2***REMOVED*** < (2, 7***REMOVED***:
        raise nose.SkipTest("assert_raises as context manager "
                            "not supported with Python < 2.7"***REMOVED***

    line = mpl.lines.Line2D([***REMOVED***, [***REMOVED******REMOVED***
    with assert_raises(ValueError***REMOVED***:
        line.set_linestyle('aardvark'***REMOVED***


@image_comparison(baseline_images=['line_collection_dashes'***REMOVED***, remove_text=True***REMOVED***
def test_set_line_coll_dash_image(***REMOVED***:
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(1, 1, 1***REMOVED***

    np.random.seed(0***REMOVED***
    cs = ax.contour(np.random.randn(20, 30***REMOVED***, linestyles=[(0, (3, 3***REMOVED******REMOVED******REMOVED******REMOVED***


def test_nan_is_sorted(***REMOVED***:
    # Exercises issue from PR #2744 (NaN throwing warning in _is_sorted***REMOVED***
    line = mpl.lines.Line2D([***REMOVED***,[***REMOVED******REMOVED***
    assert_true(line._is_sorted(np.array([1, 2, 3***REMOVED******REMOVED******REMOVED******REMOVED***
    assert_true(line._is_sorted(np.array([1, np.nan, 3***REMOVED******REMOVED******REMOVED******REMOVED***
    assert_true(not line._is_sorted([3, 5***REMOVED*** + [np.nan***REMOVED*** * 100 + [0, 2***REMOVED******REMOVED******REMOVED***


if __name__ == '__main__':
    nose.runmodule(argv=['-s', '--with-doctest'***REMOVED***, exit=False***REMOVED***
