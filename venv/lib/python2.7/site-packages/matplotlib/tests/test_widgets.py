from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

***REMOVED***
    # mock in python 3.3+
    from unittest import mock
except ImportError:
    import mock

import matplotlib.widgets as widgets
import matplotlib.pyplot as plt
from matplotlib.testing.decorators import cleanup

from numpy.testing import assert_allclose


def get_ax(***REMOVED***:
    fig, ax = plt.subplots(1, 1***REMOVED***
    ax.plot([0, 200***REMOVED***, [0, 200***REMOVED******REMOVED***
    ax.set_aspect(1.0***REMOVED***
    ax.figure.canvas.draw(***REMOVED***
    return ax


def do_event(tool, etype, button=1, xdata=0, ydata=0, key=None, step=1***REMOVED***:
    ***REMOVED***
     *name*
        the event name

    *canvas*
        the FigureCanvas instance generating the event

    *guiEvent*
        the GUI event that triggered the matplotlib event

    *x*
        x position - pixels from left of canvas

    *y*
        y position - pixels from bottom of canvas

    *inaxes*
        the :class:`~matplotlib.axes.Axes` instance if mouse is over axes

    *xdata*
        x coord of mouse in data coords

    *ydata*
        y coord of mouse in data coords

     *button*
        button pressed None, 1, 2, 3, 'up', 'down' (up and down are used
        for scroll events***REMOVED***

    *key*
        the key depressed when the mouse event triggered (see
        :class:`KeyEvent`***REMOVED***

    *step*
        number of scroll steps (positive for 'up', negative for 'down'***REMOVED***
    ***REMOVED***
    event = mock.Mock(***REMOVED***
    event.button = button
    ax = tool.ax
    event.x, event.y = ax.transData.transform([(xdata, ydata***REMOVED***,
                                               (xdata, ydata***REMOVED******REMOVED******REMOVED***[00***REMOVED***
    event.xdata, event.ydata = xdata, ydata
    event.inaxes = ax
    event.canvas = ax.figure.canvas
    event.key = key
    event.step = step
    event.guiEvent = None
    event.name = 'Custom'

    func = getattr(tool, etype***REMOVED***
    func(event***REMOVED***


@cleanup
def check_rectangle(**kwargs***REMOVED***:
    ax = get_ax(***REMOVED***

    def onselect(epress, erelease***REMOVED***:
        ax._got_onselect = True
        assert epress.xdata == 100
        assert epress.ydata == 100
        assert erelease.xdata == 199
        assert erelease.ydata == 199

    tool = widgets.RectangleSelector(ax, onselect, **kwargs***REMOVED***
    do_event(tool, 'press', xdata=100, ydata=100, button=1***REMOVED***
    do_event(tool, 'onmove', xdata=199, ydata=199, button=1***REMOVED***

    # purposely drag outside of axis for release
    do_event(tool, 'release', xdata=250, ydata=250, button=1***REMOVED***

    if kwargs.get('drawtype', None***REMOVED*** not in ['line', 'none'***REMOVED***:
        assert_allclose(tool.geometry,
            [[100., 100, 199, 199, 100***REMOVED***, [100, 199, 199, 100, 100***REMOVED******REMOVED***,
            err_msg=tool.geometry***REMOVED***

    assert ax._got_onselect


def test_rectangle_selector(***REMOVED***:
    check_rectangle(***REMOVED***
    check_rectangle(drawtype='line', useblit=False***REMOVED***
    check_rectangle(useblit=True, button=1***REMOVED***
    check_rectangle(drawtype='none', minspanx=10, minspany=10***REMOVED***
    check_rectangle(minspanx=10, minspany=10, spancoords='pixels'***REMOVED***
    check_rectangle(rectprops=dict(fill=True***REMOVED******REMOVED***


@cleanup
def test_ellipse(***REMOVED***:
    ***REMOVED***For ellipse, test out the key modifiers***REMOVED***
    ax = get_ax(***REMOVED***

    def onselect(epress, erelease***REMOVED***:
        pass

    tool = widgets.EllipseSelector(ax, onselect=onselect,
                                   maxdist=10, interactive=True***REMOVED***
    tool.extents = (100, 150, 100, 150***REMOVED***

    # drag the rectangle
    do_event(tool, 'press', xdata=10, ydata=10, button=1,
                    key=' '***REMOVED***
    do_event(tool, 'onmove', xdata=30, ydata=30, button=1***REMOVED***
    do_event(tool, 'release', xdata=30, ydata=30, button=1***REMOVED***
    assert tool.extents == (120, 170, 120, 170***REMOVED***, tool.extents

    # create from center
    do_event(tool, 'on_key_press', xdata=100, ydata=100, button=1,
                    key='control'***REMOVED***
    do_event(tool, 'press', xdata=100, ydata=100, button=1***REMOVED***
    do_event(tool, 'onmove', xdata=125, ydata=125, button=1***REMOVED***
    do_event(tool, 'release', xdata=125, ydata=125, button=1***REMOVED***
    do_event(tool, 'on_key_release', xdata=100, ydata=100, button=1,
                    key='control'***REMOVED***
    assert tool.extents == (75, 125, 75, 125***REMOVED***, tool.extents

    # create a square
    do_event(tool, 'on_key_press', xdata=10, ydata=10, button=1,
                    key='shift'***REMOVED***
    do_event(tool, 'press', xdata=10, ydata=10, button=1***REMOVED***
    do_event(tool, 'onmove', xdata=35, ydata=30, button=1***REMOVED***
    do_event(tool, 'release', xdata=35, ydata=30, button=1***REMOVED***
    do_event(tool, 'on_key_release', xdata=10, ydata=10, button=1,
                    key='shift'***REMOVED***
    extents = [int(e***REMOVED*** for e in tool.extents***REMOVED***
    assert extents == [10, 35, 10, 34***REMOVED***

    # create a square from center
    do_event(tool, 'on_key_press', xdata=100, ydata=100, button=1,
                      key='ctrl+shift'***REMOVED***
    do_event(tool, 'press', xdata=100, ydata=100, button=1***REMOVED***
    do_event(tool, 'onmove', xdata=125, ydata=130, button=1***REMOVED***
    do_event(tool, 'release', xdata=125, ydata=130, button=1***REMOVED***
    do_event(tool, 'on_key_release', xdata=100, ydata=100, button=1,
                      key='ctrl+shift'***REMOVED***
    extents = [int(e***REMOVED*** for e in tool.extents***REMOVED***
    assert extents == [70, 129, 70, 130***REMOVED***, extents

    assert tool.geometry.shape == (2, 73***REMOVED***
    assert_allclose(tool.geometry[:, 0***REMOVED***, [70., 100***REMOVED******REMOVED***


@cleanup
def test_rectangle_handles(***REMOVED***:
    ax = get_ax(***REMOVED***

    def onselect(epress, erelease***REMOVED***:
        pass

    tool = widgets.RectangleSelector(ax, onselect=onselect,
                                     maxdist=10, interactive=True***REMOVED***
    tool.extents = (100, 150, 100, 150***REMOVED***

    assert tool.corners == (
        (100, 150, 150, 100***REMOVED***, (100, 100, 150, 150***REMOVED******REMOVED***
    assert tool.extents == (100, 150, 100, 150***REMOVED***
    assert tool.edge_centers == (
        (100, 125.0, 150, 125.0***REMOVED***, (125.0, 100, 125.0, 150***REMOVED******REMOVED***
    assert tool.extents == (100, 150, 100, 150***REMOVED***

    # grab a corner and move it
    do_event(tool, 'press', xdata=100, ydata=100***REMOVED***
    do_event(tool, 'onmove', xdata=120, ydata=120***REMOVED***
    do_event(tool, 'release', xdata=120, ydata=120***REMOVED***
    assert tool.extents == (120, 150, 120, 150***REMOVED***

    # grab the center and move it
    do_event(tool, 'press', xdata=132, ydata=132***REMOVED***
    do_event(tool, 'onmove', xdata=120, ydata=120***REMOVED***
    do_event(tool, 'release', xdata=120, ydata=120***REMOVED***
    assert tool.extents == (108, 138, 108, 138***REMOVED***

    # create a new rectangle
    do_event(tool, 'press', xdata=10, ydata=10***REMOVED***
    do_event(tool, 'onmove', xdata=100, ydata=100***REMOVED***
    do_event(tool, 'release', xdata=100, ydata=100***REMOVED***
    assert tool.extents == (10, 100, 10, 100***REMOVED***


@cleanup
def check_span(*args, **kwargs***REMOVED***:
    ax = get_ax(***REMOVED***

    def onselect(vmin, vmax***REMOVED***:
        ax._got_onselect = True
        assert vmin == 100
        assert vmax == 150

    def onmove(vmin, vmax***REMOVED***:
        assert vmin == 100
        assert vmax == 125
        ax._got_on_move = True

    if 'onmove_callback' in kwargs:
        kwargs['onmove_callback'***REMOVED*** = onmove

    tool = widgets.SpanSelector(ax, onselect, *args, **kwargs***REMOVED***
    do_event(tool, 'press', xdata=100, ydata=100, button=1***REMOVED***
    do_event(tool, 'onmove', xdata=125, ydata=125, button=1***REMOVED***
    do_event(tool, 'release', xdata=150, ydata=150, button=1***REMOVED***

    assert ax._got_onselect

    if 'onmove_callback' in kwargs:
        assert ax._got_on_move


def test_span_selector(***REMOVED***:
    check_span('horizontal', minspan=10, useblit=True***REMOVED***
    check_span('vertical', onmove_callback=True, button=1***REMOVED***
    check_span('horizontal', rectprops=dict(fill=True***REMOVED******REMOVED***


@cleanup
def check_lasso_selector(**kwargs***REMOVED***:
    ax = get_ax(***REMOVED***

    def onselect(verts***REMOVED***:
        ax._got_onselect = True
        assert verts == [(100, 100***REMOVED***, (125, 125***REMOVED***, (150, 150***REMOVED******REMOVED***

    tool = widgets.LassoSelector(ax, onselect, **kwargs***REMOVED***
    do_event(tool, 'press', xdata=100, ydata=100, button=1***REMOVED***
    do_event(tool, 'onmove', xdata=125, ydata=125, button=1***REMOVED***
    do_event(tool, 'release', xdata=150, ydata=150, button=1***REMOVED***

    assert ax._got_onselect


def test_lasso_selector(***REMOVED***:
    check_lasso_selector(***REMOVED***
    check_lasso_selector(useblit=False, lineprops=dict(color='red'***REMOVED******REMOVED***
    check_lasso_selector(useblit=True, button=1***REMOVED***
