from __future__ import (absolute_import, division, print_function***REMOVED***

from nose.tools import (assert_raises, assert_equal***REMOVED***
from nose.plugins.skip import SkipTest

***REMOVED***
    # 3.2+ versions
    from nose.tools import assert_regex, assert_not_regex
except ImportError:
    ***REMOVED***
        # 2.7 versions
        from nose.tools import assert_regexp_matches, assert_not_regexp_matches
        assert_regex = assert_regexp_matches
        assert_not_regex = assert_not_regexp_matches
    except ImportError:
        # 2.6 versions
        def noop(txt, regex***REMOVED***:
            raise SkipTest("No assert for regex matching in py2.6"***REMOVED***
        assert_regex = noop
        assert_not_regex = noop

from ..testing import assert_produces_warning

from .. import unpack_labeled_data


# Notes on testing the plotting functions itself
# *   the individual decorated plotting functions are tested in 'test_axes.py'
# *   that pyplot functions accept a data kwarg is only tested in
#     test_axes.test_pie_linewidth_0


# these two get used in multiple tests, so define them here
@unpack_labeled_data(replace_names=["x", "y"***REMOVED***, label_namer="y"***REMOVED***
def plot_func(ax, x, y, ls="x", label=None, w="xyz"***REMOVED***:
    return ("x: %s, y: %s, ls: %s, w: %s, label: %s" % (
        list(x***REMOVED***, list(y***REMOVED***, ls, w, label***REMOVED******REMOVED***


@unpack_labeled_data(replace_names=["x", "y"***REMOVED***, label_namer="y",
                     positional_parameter_names=["x", "y", "ls", "label", "w"***REMOVED******REMOVED***
def plot_func_varags(ax, *args, **kwargs***REMOVED***:
    all_args = [None, None, "x", None, "xyz"***REMOVED***
    for i, v in enumerate(args***REMOVED***:
        all_args[i***REMOVED*** = v
    for i, k in enumerate(["x", "y", "ls", "label", "w"***REMOVED******REMOVED***:
        if k in kwargs:
            all_args[i***REMOVED*** = kwargs[k***REMOVED***
    x, y, ls, label, w = all_args
    return ("x: %s, y: %s, ls: %s, w: %s, label: %s" % (
        list(x***REMOVED***, list(y***REMOVED***, ls, w, label***REMOVED******REMOVED***


all_funcs = [plot_func, plot_func_varags***REMOVED***


def test_compiletime_checks(***REMOVED***:
    ***REMOVED***test decorator invocations -> no replacements***REMOVED***

    def func(ax, x, y***REMOVED***: pass

    def func_args(ax, x, y, *args***REMOVED***: pass

    def func_kwargs(ax, x, y, **kwargs***REMOVED***: pass

    def func_no_ax_args(*args, **kwargs***REMOVED***: pass

    # this is ok
    unpack_labeled_data(replace_names=["x", "y"***REMOVED******REMOVED***(func***REMOVED***
    unpack_labeled_data(replace_names=["x", "y"***REMOVED******REMOVED***(func_kwargs***REMOVED***
    # this has "enough" information to do all the replaces
    unpack_labeled_data(replace_names=["x", "y"***REMOVED******REMOVED***(func_args***REMOVED***

    # no positional_parameter_names but needed due to replaces
    def f(***REMOVED***:
        # z is unknown
        unpack_labeled_data(replace_names=["x", "y", "z"***REMOVED******REMOVED***(func_args***REMOVED***

    assert_raises(AssertionError, f***REMOVED***

    def f(***REMOVED***:
        unpack_labeled_data(replace_names=["x", "y"***REMOVED******REMOVED***(func_no_ax_args***REMOVED***

    assert_raises(AssertionError, f***REMOVED***

    # no replacements at all -> all ok...
    unpack_labeled_data(replace_names=[***REMOVED***, label_namer=None***REMOVED***(func***REMOVED***
    unpack_labeled_data(replace_names=[***REMOVED***, label_namer=None***REMOVED***(func_args***REMOVED***
    unpack_labeled_data(replace_names=[***REMOVED***, label_namer=None***REMOVED***(func_kwargs***REMOVED***
    unpack_labeled_data(replace_names=[***REMOVED***, label_namer=None***REMOVED***(func_no_ax_args***REMOVED***

    # label namer is unknown
    def f(***REMOVED***:
        unpack_labeled_data(label_namer="z"***REMOVED***(func***REMOVED***

    assert_raises(AssertionError, f***REMOVED***

    def f(***REMOVED***:
        unpack_labeled_data(label_namer="z"***REMOVED***(func_args***REMOVED***

    assert_raises(AssertionError, f***REMOVED***
    # but "ok-ish", if func has kwargs -> will show up at runtime :-(
    unpack_labeled_data(label_namer="z"***REMOVED***(func_kwargs***REMOVED***
    unpack_labeled_data(label_namer="z"***REMOVED***(func_no_ax_args***REMOVED***


def test_label_problems_at_runtime(***REMOVED***:
    ***REMOVED***Tests for behaviour which would actually be nice to get rid of.***REMOVED***

    @unpack_labeled_data(label_namer="z"***REMOVED***
    def func(*args, **kwargs***REMOVED***:
        pass

    def f(***REMOVED***:
        func(None, x="a", y="b"***REMOVED***

    # This is a programming mistake: the parameter which should add the
    # label is not present in the function call. Unfortunately this was masked
    # due to the **kwargs useage
    # This would be nice to handle as a compiletime check (see above...***REMOVED***
    with assert_produces_warning(RuntimeWarning***REMOVED***:
        f(***REMOVED***

    def real_func(x, y***REMOVED***:
        pass

    @unpack_labeled_data(label_namer="x"***REMOVED***
    def func(*args, **kwargs***REMOVED***:
        real_func(**kwargs***REMOVED***

    def f(***REMOVED***:
        func(None, x="a", y="b"***REMOVED***

    # This sets a label although the function can't handle it.
    assert_raises(TypeError, f***REMOVED***


def test_function_call_without_data(***REMOVED***:
    ***REMOVED***test without data -> no replacements***REMOVED***
    for func in all_funcs:
        assert_equal(func(None, "x", "y"***REMOVED***,
                     "x: ['x'***REMOVED***, y: ['y'***REMOVED***, ls: x, w: xyz, label: None"***REMOVED***
        assert_equal(func(None, x="x", y="y"***REMOVED***,
                     "x: ['x'***REMOVED***, y: ['y'***REMOVED***, ls: x, w: xyz, label: None"***REMOVED***
        assert_equal(func(None, "x", "y", label=""***REMOVED***,
                     "x: ['x'***REMOVED***, y: ['y'***REMOVED***, ls: x, w: xyz, label: "***REMOVED***
        assert_equal(func(None, "x", "y", label="text"***REMOVED***,
                     "x: ['x'***REMOVED***, y: ['y'***REMOVED***, ls: x, w: xyz, label: text"***REMOVED***
        assert_equal(func(None, x="x", y="y", label=""***REMOVED***,
                     "x: ['x'***REMOVED***, y: ['y'***REMOVED***, ls: x, w: xyz, label: "***REMOVED***
        assert_equal(func(None, x="x", y="y", label="text"***REMOVED***,
                     "x: ['x'***REMOVED***, y: ['y'***REMOVED***, ls: x, w: xyz, label: text"***REMOVED***


def test_function_call_with_dict_data(***REMOVED***:
    ***REMOVED***Test with dict data -> label comes from the value of 'x' parameter ***REMOVED***
    data = {"a": [1, 2***REMOVED***, "b": [8, 9***REMOVED***, "w": "NOT"***REMOVED***
    for func in all_funcs:
        assert_equal(func(None, "a", "b", data=data***REMOVED***,
                     "x: [1, 2***REMOVED***, y: [8, 9***REMOVED***, ls: x, w: xyz, label: b"***REMOVED***
        assert_equal(func(None, x="a", y="b", data=data***REMOVED***,
                     "x: [1, 2***REMOVED***, y: [8, 9***REMOVED***, ls: x, w: xyz, label: b"***REMOVED***
        assert_equal(func(None, "a", "b", label="", data=data***REMOVED***,
                     "x: [1, 2***REMOVED***, y: [8, 9***REMOVED***, ls: x, w: xyz, label: "***REMOVED***
        assert_equal(func(None, "a", "b", label="text", data=data***REMOVED***,
                     "x: [1, 2***REMOVED***, y: [8, 9***REMOVED***, ls: x, w: xyz, label: text"***REMOVED***
        assert_equal(func(None, x="a", y="b", label="", data=data***REMOVED***,
                     "x: [1, 2***REMOVED***, y: [8, 9***REMOVED***, ls: x, w: xyz, label: "***REMOVED***
        assert_equal(func(None, x="a", y="b", label="text", data=data***REMOVED***,
                     "x: [1, 2***REMOVED***, y: [8, 9***REMOVED***, ls: x, w: xyz, label: text"***REMOVED***


def test_function_call_with_dict_data_not_in_data(***REMOVED***:
    "test for the case that one var is not in data -> half replaces, half kept"
    data = {"a": [1, 2***REMOVED***, "w": "NOT"***REMOVED***
    for func in all_funcs:
        assert_equal(func(None, "a", "b", data=data***REMOVED***,
                     "x: [1, 2***REMOVED***, y: ['b'***REMOVED***, ls: x, w: xyz, label: b"***REMOVED***
        assert_equal(func(None, x="a", y="b", data=data***REMOVED***,
                     "x: [1, 2***REMOVED***, y: ['b'***REMOVED***, ls: x, w: xyz, label: b"***REMOVED***
        assert_equal(func(None, "a", "b", label="", data=data***REMOVED***,
                     "x: [1, 2***REMOVED***, y: ['b'***REMOVED***, ls: x, w: xyz, label: "***REMOVED***
        assert_equal(func(None, "a", "b", label="text", data=data***REMOVED***,
                     "x: [1, 2***REMOVED***, y: ['b'***REMOVED***, ls: x, w: xyz, label: text"***REMOVED***
        assert_equal(func(None, x="a", y="b", label="", data=data***REMOVED***,
                     "x: [1, 2***REMOVED***, y: ['b'***REMOVED***, ls: x, w: xyz, label: "***REMOVED***
        assert_equal(func(None, x="a", y="b", label="text", data=data***REMOVED***,
                     "x: [1, 2***REMOVED***, y: ['b'***REMOVED***, ls: x, w: xyz, label: text"***REMOVED***


def test_function_call_with_pandas_data(***REMOVED***:
    ***REMOVED***test with pandas dataframe -> label comes from data["col"***REMOVED***.name ***REMOVED***
    ***REMOVED***
        import pandas as pd
    except ImportError:
        raise SkipTest("Pandas not installed"***REMOVED***

    data = pd.DataFrame({"a": [1, 2***REMOVED***, "b": [8, 9***REMOVED***, "w": ["NOT", "NOT"***REMOVED******REMOVED******REMOVED***

    for func in all_funcs:
        assert_equal(func(None, "a", "b", data=data***REMOVED***,
                     "x: [1, 2***REMOVED***, y: [8, 9***REMOVED***, ls: x, w: xyz, label: b"***REMOVED***
        assert_equal(func(None, x="a", y="b", data=data***REMOVED***,
                     "x: [1, 2***REMOVED***, y: [8, 9***REMOVED***, ls: x, w: xyz, label: b"***REMOVED***
        assert_equal(func(None, "a", "b", label="", data=data***REMOVED***,
                     "x: [1, 2***REMOVED***, y: [8, 9***REMOVED***, ls: x, w: xyz, label: "***REMOVED***
        assert_equal(func(None, "a", "b", label="text", data=data***REMOVED***,
                     "x: [1, 2***REMOVED***, y: [8, 9***REMOVED***, ls: x, w: xyz, label: text"***REMOVED***
        assert_equal(func(None, x="a", y="b", label="", data=data***REMOVED***,
                     "x: [1, 2***REMOVED***, y: [8, 9***REMOVED***, ls: x, w: xyz, label: "***REMOVED***
        assert_equal(func(None, x="a", y="b", label="text", data=data***REMOVED***,
                     "x: [1, 2***REMOVED***, y: [8, 9***REMOVED***, ls: x, w: xyz, label: text"***REMOVED***


def test_function_call_replace_all(***REMOVED***:
    ***REMOVED***Test without a "replace_names" argument, all vars should be replaced***REMOVED***
    data = {"a": [1, 2***REMOVED***, "b": [8, 9***REMOVED***, "x": "xyz"***REMOVED***

    @unpack_labeled_data(label_namer="y"***REMOVED***
    def func_replace_all(ax, x, y, ls="x", label=None, w="NOT"***REMOVED***:
        return "x: %s, y: %s, ls: %s, w: %s, label: %s" % (
            list(x***REMOVED***, list(y***REMOVED***, ls, w, label***REMOVED***

    assert_equal(func_replace_all(None, "a", "b", w="x", data=data***REMOVED***,
                 "x: [1, 2***REMOVED***, y: [8, 9***REMOVED***, ls: x, w: xyz, label: b"***REMOVED***
    assert_equal(func_replace_all(None, x="a", y="b", w="x", data=data***REMOVED***,
                 "x: [1, 2***REMOVED***, y: [8, 9***REMOVED***, ls: x, w: xyz, label: b"***REMOVED***
    assert_equal(func_replace_all(None, "a", "b", w="x", label="", data=data***REMOVED***,
                 "x: [1, 2***REMOVED***, y: [8, 9***REMOVED***, ls: x, w: xyz, label: "***REMOVED***
    assert_equal(
        func_replace_all(None, "a", "b", w="x", label="text", data=data***REMOVED***,
        "x: [1, 2***REMOVED***, y: [8, 9***REMOVED***, ls: x, w: xyz, label: text"***REMOVED***
    assert_equal(
        func_replace_all(None, x="a", y="b", w="x", label="", data=data***REMOVED***,
        "x: [1, 2***REMOVED***, y: [8, 9***REMOVED***, ls: x, w: xyz, label: "***REMOVED***
    assert_equal(
        func_replace_all(None, x="a", y="b", w="x", label="text", data=data***REMOVED***,
        "x: [1, 2***REMOVED***, y: [8, 9***REMOVED***, ls: x, w: xyz, label: text"***REMOVED***

    @unpack_labeled_data(label_namer="y"***REMOVED***
    def func_varags_replace_all(ax, *args, **kwargs***REMOVED***:
        all_args = [None, None, "x", None, "xyz"***REMOVED***
        for i, v in enumerate(args***REMOVED***:
            all_args[i***REMOVED*** = v
        for i, k in enumerate(["x", "y", "ls", "label", "w"***REMOVED******REMOVED***:
            if k in kwargs:
                all_args[i***REMOVED*** = kwargs[k***REMOVED***
        x, y, ls, label, w = all_args
        return "x: %s, y: %s, ls: %s, w: %s, label: %s" % (
            list(x***REMOVED***, list(y***REMOVED***, ls, w, label***REMOVED***

    # in the first case, we can't get a "y" argument,
    # as we don't know the names of the *args
    assert_equal(func_varags_replace_all(None, x="a", y="b", w="x", data=data***REMOVED***,
                 "x: [1, 2***REMOVED***, y: [8, 9***REMOVED***, ls: x, w: xyz, label: b"***REMOVED***
    assert_equal(
        func_varags_replace_all(None, "a", "b", w="x", label="", data=data***REMOVED***,
        "x: [1, 2***REMOVED***, y: [8, 9***REMOVED***, ls: x, w: xyz, label: "***REMOVED***
    assert_equal(
        func_varags_replace_all(None, "a", "b", w="x", label="text",
                                data=data***REMOVED***,
        "x: [1, 2***REMOVED***, y: [8, 9***REMOVED***, ls: x, w: xyz, label: text"***REMOVED***
    assert_equal(
        func_varags_replace_all(None, x="a", y="b", w="x", label="",
                                data=data***REMOVED***,
        "x: [1, 2***REMOVED***, y: [8, 9***REMOVED***, ls: x, w: xyz, label: "***REMOVED***
    assert_equal(
        func_varags_replace_all(None, x="a", y="b", w="x", label="text",
                                data=data***REMOVED***,
        "x: [1, 2***REMOVED***, y: [8, 9***REMOVED***, ls: x, w: xyz, label: text"***REMOVED***

    with assert_produces_warning(***REMOVED***:
        assert_equal(func_varags_replace_all(None, "a", "b", w="x", data=data***REMOVED***,
                     "x: [1, 2***REMOVED***, y: [8, 9***REMOVED***, ls: x, w: xyz, label: None"***REMOVED***


def test_no_label_replacements(***REMOVED***:
    ***REMOVED***Test with "label_namer=None" -> no label replacement at all***REMOVED***

    @unpack_labeled_data(replace_names=["x", "y"***REMOVED***, label_namer=None***REMOVED***
    def func_no_label(ax, x, y, ls="x", label=None, w="xyz"***REMOVED***:
        return "x: %s, y: %s, ls: %s, w: %s, label: %s" % (
            list(x***REMOVED***, list(y***REMOVED***, ls, w, label***REMOVED***

    data = {"a": [1, 2***REMOVED***, "b": [8, 9***REMOVED***, "w": "NOT"***REMOVED***
    assert_equal(func_no_label(None, "a", "b", data=data***REMOVED***,
                 "x: [1, 2***REMOVED***, y: [8, 9***REMOVED***, ls: x, w: xyz, label: None"***REMOVED***
    assert_equal(func_no_label(None, x="a", y="b", data=data***REMOVED***,
                 "x: [1, 2***REMOVED***, y: [8, 9***REMOVED***, ls: x, w: xyz, label: None"***REMOVED***
    assert_equal(func_no_label(None, "a", "b", label="", data=data***REMOVED***,
                 "x: [1, 2***REMOVED***, y: [8, 9***REMOVED***, ls: x, w: xyz, label: "***REMOVED***
    assert_equal(func_no_label(None, "a", "b", label="text", data=data***REMOVED***,
                 "x: [1, 2***REMOVED***, y: [8, 9***REMOVED***, ls: x, w: xyz, label: text"***REMOVED***


def test_more_args_than_pos_parameter(***REMOVED***:
    @unpack_labeled_data(replace_names=["x", "y"***REMOVED***, label_namer="y"***REMOVED***
    def func(ax, x, y, z=1***REMOVED***:
        pass

    data = {"a": [1, 2***REMOVED***, "b": [8, 9***REMOVED***, "w": "NOT"***REMOVED***

    def f(***REMOVED***:
        func(None, "a", "b", "z", "z", data=data***REMOVED***

    assert_raises(RuntimeError, f***REMOVED***


def test_function_call_with_replace_all_args(***REMOVED***:
    ***REMOVED***Test with a "replace_all_args" argument, all *args should be replaced***REMOVED***
    data = {"a": [1, 2***REMOVED***, "b": [8, 9***REMOVED***, "x": "xyz"***REMOVED***

    def funcy(ax, *args, **kwargs***REMOVED***:
        all_args = [None, None, "x", None, "NOT"***REMOVED***
        for i, v in enumerate(args***REMOVED***:
            all_args[i***REMOVED*** = v
        for i, k in enumerate(["x", "y", "ls", "label", "w"***REMOVED******REMOVED***:
            if k in kwargs:
                all_args[i***REMOVED*** = kwargs[k***REMOVED***
        x, y, ls, label, w = all_args
        return "x: %s, y: %s, ls: %s, w: %s, label: %s" % (
            list(x***REMOVED***, list(y***REMOVED***, ls, w, label***REMOVED***

    func = unpack_labeled_data(replace_all_args=True, replace_names=["w"***REMOVED***,
                               label_namer="y"***REMOVED***(funcy***REMOVED***

    assert_equal(func(None, "a", "b", w="x", label="", data=data***REMOVED***,
                 "x: [1, 2***REMOVED***, y: [8, 9***REMOVED***, ls: x, w: xyz, label: "***REMOVED***
    assert_equal(func(None, "a", "b", w="x", label="text", data=data***REMOVED***,
                 "x: [1, 2***REMOVED***, y: [8, 9***REMOVED***, ls: x, w: xyz, label: text"***REMOVED***

    func2 = unpack_labeled_data(replace_all_args=True, replace_names=["w"***REMOVED***,
                                label_namer="y",
                                positional_parameter_names=["x", "y", "ls",
                                                            "label", "w"***REMOVED******REMOVED***(
        funcy***REMOVED***

    assert_equal(func2(None, "a", "b", w="x", data=data***REMOVED***,
                 "x: [1, 2***REMOVED***, y: [8, 9***REMOVED***, ls: x, w: xyz, label: b"***REMOVED***
    assert_equal(func2(None, "a", "b", w="x", label="", data=data***REMOVED***,
                 "x: [1, 2***REMOVED***, y: [8, 9***REMOVED***, ls: x, w: xyz, label: "***REMOVED***
    assert_equal(func2(None, "a", "b", w="x", label="text", data=data***REMOVED***,
                 "x: [1, 2***REMOVED***, y: [8, 9***REMOVED***, ls: x, w: xyz, label: text"***REMOVED***


def test_docstring_addition(***REMOVED***:
    @unpack_labeled_data(***REMOVED***
    def funcy(ax, *args, **kwargs***REMOVED***:
        ***REMOVED***Funcy does nothing***REMOVED***
        pass

    assert_regex(funcy.__doc__,
                          r".*All positional and all keyword arguments\."***REMOVED***
    assert_not_regex(funcy.__doc__, r".*All positional arguments\."***REMOVED***
    assert_not_regex(funcy.__doc__,
                              r".*All arguments with the following names: .*"***REMOVED***

    @unpack_labeled_data(replace_all_args=True, replace_names=[***REMOVED******REMOVED***
    def funcy(ax, x, y, z, bar=None***REMOVED***:
        ***REMOVED***Funcy does nothing***REMOVED***
        pass

    assert_regex(funcy.__doc__, r".*All positional arguments\."***REMOVED***
    assert_not_regex(funcy.__doc__,
                              r".*All positional and all keyword arguments\."***REMOVED***
    assert_not_regex(funcy.__doc__,
                              r".*All arguments with the following names: .*"***REMOVED***

    @unpack_labeled_data(replace_all_args=True, replace_names=["bar"***REMOVED******REMOVED***
    def funcy(ax, x, y, z, bar=None***REMOVED***:
        ***REMOVED***Funcy does nothing***REMOVED***
        pass

    assert_regex(funcy.__doc__, r".*All positional arguments\."***REMOVED***
    assert_regex(funcy.__doc__,
                          r".*All arguments with the following names: 'bar'\."***REMOVED***
    assert_not_regex(funcy.__doc__,
                              r".*All positional and all keyword arguments\."***REMOVED***

    @unpack_labeled_data(replace_names=["x", "bar"***REMOVED******REMOVED***
    def funcy(ax, x, y, z, bar=None***REMOVED***:
        ***REMOVED***Funcy does nothing***REMOVED***
        pass

    # lists can print in any order, so test for both x,bar and bar,x
    assert_regex(funcy.__doc__,
                    r".*All arguments with the following names: '.*', '.*'\."***REMOVED***
    assert_regex(funcy.__doc__, r".*'x'.*"***REMOVED***
    assert_regex(funcy.__doc__, r".*'bar'.*"***REMOVED***
    assert_not_regex(funcy.__doc__,
                              r".*All positional and all keyword arguments\."***REMOVED***
    assert_not_regex(funcy.__doc__, r".*All positional arguments\."***REMOVED***


def test_positional_parameter_names_as_function(***REMOVED***:
    # Also test the _plot_arg_replacer for plot...
    from matplotlib.axes._axes import _plot_args_replacer

    @unpack_labeled_data(replace_names=["x", "y"***REMOVED***,
                         positional_parameter_names=_plot_args_replacer***REMOVED***
    def funcy(ax, *args, **kwargs***REMOVED***:
        return "{args***REMOVED*** | {kwargs***REMOVED***".format(args=args, kwargs=kwargs***REMOVED***

    # the normal case...
    data = {"x": "X", "y1": "Y"***REMOVED***
    assert_equal(funcy(None, "x", "y1", data=data***REMOVED***,
                 "('X', 'Y'***REMOVED*** | {***REMOVED***"***REMOVED***
    assert_equal(funcy(None, "x", "y1", "c", data=data***REMOVED***,
                 "('X', 'Y', 'c'***REMOVED*** | {***REMOVED***"***REMOVED***

    # no arbitrary long args with data
    def f(***REMOVED***:
        assert_equal(funcy(None, "x", "y", "c", "x", "y", "x", "y", data=data***REMOVED***,
                     "('X', 'Y', 'c', 'X', 'Y', 'X', 'Y'***REMOVED*** | {***REMOVED***"***REMOVED***
    assert_raises(ValueError, f***REMOVED***

    # In the two arg case, if a valid color spec is in data, we warn but use
    # it as data...
    data = {"x": "X", "y": "Y", "ro": "!!"***REMOVED***
    with assert_produces_warning(RuntimeWarning***REMOVED***:
        assert_equal(funcy(None, "y", "ro", data=data***REMOVED***,
                     "('Y', '!!'***REMOVED*** | {***REMOVED***"***REMOVED***
