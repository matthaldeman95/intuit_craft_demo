from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

import warnings
from matplotlib.externals import six
from matplotlib.externals.six.moves import xrange

import numpy
import matplotlib.pyplot as plt
from matplotlib.testing.decorators import image_comparison, cleanup

from nose.tools import assert_raises


def check_shared(results, f, axs***REMOVED***:
    ***REMOVED***
    results is a 4 x 4 x 2 matrix of boolean values where
        if [i, j, 0***REMOVED*** == True, X axis for subplots i and j should be shared
        if [i, j, 1***REMOVED*** == False, Y axis for subplots i and j should not be shared
    ***REMOVED***
    shared_str = ['x', 'y'***REMOVED***
    shared = [axs[0***REMOVED***._shared_x_axes, axs[0***REMOVED***._shared_y_axes***REMOVED***
    #shared = {
    #        'x': a1._shared_x_axes,
    #        'y': a1._shared_y_axes,
    #    ***REMOVED***
    tostr = lambda r: "not " if r else ""
    for i1 in xrange(len(axs***REMOVED******REMOVED***:
        for i2 in xrange(i1 + 1, len(axs***REMOVED******REMOVED***:
            for i3 in xrange(len(shared***REMOVED******REMOVED***:
                assert shared[i3***REMOVED***.joined(axs[i1***REMOVED***, axs[i2***REMOVED******REMOVED*** == \
                        results[i1, i2, i3***REMOVED***, \
                        "axes %i and %i incorrectly %ssharing %s axis" % \
                        (i1, i2, tostr(results[i1, i2, i3***REMOVED******REMOVED***, shared_str[i3***REMOVED******REMOVED***


def check_visible(result, f, axs***REMOVED***:
    tostr = lambda v: "invisible" if v else "visible"
    for (ax, vx, vy***REMOVED*** in zip(axs, result['x'***REMOVED***, result['y'***REMOVED******REMOVED***:
        for l in ax.get_xticklabels(***REMOVED***:
            assert l.get_visible(***REMOVED*** == vx, \
                    "X axis was incorrectly %s" % (tostr(vx***REMOVED******REMOVED***
        for l in ax.get_yticklabels(***REMOVED***:
            assert l.get_visible(***REMOVED*** == vy, \
                    "Y axis was incorrectly %s" % (tostr(vy***REMOVED******REMOVED***


def test_shared(***REMOVED***:
    rdim = (4, 4, 2***REMOVED***
    share = {
            'all': numpy.ones(rdim[:2***REMOVED***, dtype=bool***REMOVED***,
            'none': numpy.zeros(rdim[:2***REMOVED***, dtype=bool***REMOVED***,
            'row': numpy.array([
                [False, True, False, False***REMOVED***,
                [True, False, False, False***REMOVED***,
                [False, False, False, True***REMOVED***,
                [False, False, True, False***REMOVED******REMOVED******REMOVED***,
            'col': numpy.array([
                [False, False, True, False***REMOVED***,
                [False, False, False, True***REMOVED***,
                [True, False, False, False***REMOVED***,
                [False, True, False, False***REMOVED******REMOVED******REMOVED***,
        ***REMOVED***
    visible = {
            'x': {
                'all': [False, False, True, True***REMOVED***,
                'col': [False, False, True, True***REMOVED***,
                'row': [True***REMOVED*** * 4,
                'none': [True***REMOVED*** * 4,
                False: [True***REMOVED*** * 4,
                True: [False, False, True, True***REMOVED***,
        ***REMOVED***
            'y': {
                'all': [True, False, True, False***REMOVED***,
                'col': [True***REMOVED*** * 4,
                'row': [True, False, True, False***REMOVED***,
                'none': [True***REMOVED*** * 4,
                False: [True***REMOVED*** * 4,
                True: [True, False, True, False***REMOVED***,
        ***REMOVED***
        ***REMOVED***
    share[False***REMOVED*** = share['none'***REMOVED***
    share[True***REMOVED*** = share['all'***REMOVED***

    # test default
    f, ((a1, a2***REMOVED***, (a3, a4***REMOVED******REMOVED*** = plt.subplots(2, 2***REMOVED***
    axs = [a1, a2, a3, a4***REMOVED***
    check_shared(numpy.dstack((share['none'***REMOVED***, share['none'***REMOVED******REMOVED******REMOVED***, \
            f, axs***REMOVED***
    plt.close(f***REMOVED***

    # test all option combinations
    ops = [False, True, 'all', 'none', 'row', 'col'***REMOVED***
    for xo in ops:
        for yo in ops:
            f, ((a1, a2***REMOVED***, (a3, a4***REMOVED******REMOVED*** = plt.subplots(2, 2, sharex=xo, sharey=yo***REMOVED***
            axs = [a1, a2, a3, a4***REMOVED***
            check_shared(numpy.dstack((share[xo***REMOVED***, share[yo***REMOVED******REMOVED******REMOVED***, \
                    f, axs***REMOVED***
            check_visible(dict(x=visible['x'***REMOVED***[xo***REMOVED***, y=visible['y'***REMOVED***[yo***REMOVED******REMOVED***, \
                    f, axs***REMOVED***
            plt.close(f***REMOVED***


def test_exceptions(***REMOVED***:
    # TODO should this test more options?
    assert_raises(ValueError, plt.subplots, 2, 2, sharex='blah'***REMOVED***
    assert_raises(ValueError, plt.subplots, 2, 2, sharey='blah'***REMOVED***
    # We filter warnings in this test which are genuine since
    # the pount of this test is to ensure that this raises.
    with warnings.catch_warnings(***REMOVED***:
        warnings.filterwarnings('ignore',
                                message='.*sharex\ argument\ to\ subplots',
                                category=UserWarning***REMOVED***
        assert_raises(ValueError, plt.subplots, 2, 2, -1***REMOVED***
        assert_raises(ValueError, plt.subplots, 2, 2, 0***REMOVED***
        assert_raises(ValueError, plt.subplots, 2, 2, 5***REMOVED***


@image_comparison(baseline_images=['subplots_offset_text'***REMOVED***, remove_text=False***REMOVED***
def test_subplots_offsettext(***REMOVED***:
    x = numpy.arange(0, 1e10, 1e9***REMOVED***
    y = numpy.arange(0, 100, 10***REMOVED***+1e4
    fig, axes = plt.subplots(2, 2, sharex='col', sharey='all'***REMOVED***
    axes[0, 0***REMOVED***.plot(x, x***REMOVED***
    axes[1, 0***REMOVED***.plot(x, x***REMOVED***
    axes[0, 1***REMOVED***.plot(y, x***REMOVED***
    axes[1, 1***REMOVED***.plot(y, x***REMOVED***


@cleanup
def test_subplots(***REMOVED***:
    # things to test
    # - are axes actually shared?
    # - are tickmarks correctly hidden?
    test_shared(***REMOVED***
    # - are exceptions thrown correctly
    test_exceptions(***REMOVED***


if __name__ == "__main__":
    import nose
    nose.runmodule(argv=['-s', '--with-doctest'***REMOVED***, exit=False***REMOVED***
