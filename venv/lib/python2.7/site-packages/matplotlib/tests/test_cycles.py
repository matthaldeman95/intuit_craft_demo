import warnings

from matplotlib.testing.decorators import image_comparison, cleanup
import matplotlib.pyplot as plt
import numpy as np
from nose.tools import assert_raises

from cycler import cycler


@image_comparison(baseline_images=['color_cycle_basic'***REMOVED***, remove_text=True,
                  extensions=['png'***REMOVED******REMOVED***
def test_colorcycle_basic(***REMOVED***:
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(111***REMOVED***
    ax.set_prop_cycle(cycler('color', ['r', 'g', 'y'***REMOVED******REMOVED******REMOVED***
    xs = np.arange(10***REMOVED***
    ys = 0.25 * xs + 2
    ax.plot(xs, ys, label='red', lw=4***REMOVED***
    ys = 0.45 * xs + 3
    ax.plot(xs, ys, label='green', lw=4***REMOVED***
    ys = 0.65 * xs + 4
    ax.plot(xs, ys, label='yellow', lw=4***REMOVED***
    ys = 0.85 * xs + 5
    ax.plot(xs, ys, label='red2', lw=4***REMOVED***
    ax.legend(loc='upper left'***REMOVED***


@image_comparison(baseline_images=['marker_cycle', 'marker_cycle'***REMOVED***,
                  remove_text=True, extensions=['png'***REMOVED******REMOVED***
def test_marker_cycle(***REMOVED***:
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(111***REMOVED***
    ax.set_prop_cycle(cycler('color', ['r', 'g', 'y'***REMOVED******REMOVED*** +
                      cycler('marker', ['.', '*', 'x'***REMOVED******REMOVED******REMOVED***
    xs = np.arange(10***REMOVED***
    ys = 0.25 * xs + 2
    ax.plot(xs, ys, label='red dot', lw=4, ms=16***REMOVED***
    ys = 0.45 * xs + 3
    ax.plot(xs, ys, label='green star', lw=4, ms=16***REMOVED***
    ys = 0.65 * xs + 4
    ax.plot(xs, ys, label='yellow x', lw=4, ms=16***REMOVED***
    ys = 0.85 * xs + 5
    ax.plot(xs, ys, label='red2 dot', lw=4, ms=16***REMOVED***
    ax.legend(loc='upper left'***REMOVED***

    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(111***REMOVED***
    # Test keyword arguments, numpy arrays, and generic iterators
    ax.set_prop_cycle(color=np.array(['r', 'g', 'y'***REMOVED******REMOVED***,
                      marker=iter(['.', '*', 'x'***REMOVED******REMOVED******REMOVED***
    xs = np.arange(10***REMOVED***
    ys = 0.25 * xs + 2
    ax.plot(xs, ys, label='red dot', lw=4, ms=16***REMOVED***
    ys = 0.45 * xs + 3
    ax.plot(xs, ys, label='green star', lw=4, ms=16***REMOVED***
    ys = 0.65 * xs + 4
    ax.plot(xs, ys, label='yellow x', lw=4, ms=16***REMOVED***
    ys = 0.85 * xs + 5
    ax.plot(xs, ys, label='red2 dot', lw=4, ms=16***REMOVED***
    ax.legend(loc='upper left'***REMOVED***


@image_comparison(baseline_images=['lineprop_cycle_basic'***REMOVED***, remove_text=True,
                  extensions=['png'***REMOVED******REMOVED***
def test_linestylecycle_basic(***REMOVED***:
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(111***REMOVED***
    ax.set_prop_cycle(cycler('linestyle', ['-', '--', ':'***REMOVED******REMOVED******REMOVED***
    xs = np.arange(10***REMOVED***
    ys = 0.25 * xs + 2
    ax.plot(xs, ys, label='solid', lw=4***REMOVED***
    ys = 0.45 * xs + 3
    ax.plot(xs, ys, label='dashed', lw=4***REMOVED***
    ys = 0.65 * xs + 4
    ax.plot(xs, ys, label='dotted', lw=4***REMOVED***
    ys = 0.85 * xs + 5
    ax.plot(xs, ys, label='solid2', lw=4***REMOVED***
    ax.legend(loc='upper left'***REMOVED***


@image_comparison(baseline_images=['fill_cycle_basic'***REMOVED***, remove_text=True,
                  extensions=['png'***REMOVED******REMOVED***
def test_fillcycle_basic(***REMOVED***:
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(111***REMOVED***
    ax.set_prop_cycle(cycler('color',  ['r', 'g', 'y'***REMOVED******REMOVED*** +
                      cycler('hatch', ['xx', 'O', '|-'***REMOVED******REMOVED*** +
                      cycler('linestyle', ['-', '--', ':'***REMOVED******REMOVED******REMOVED***
    xs = np.arange(10***REMOVED***
    ys = 0.25 * xs**.5 + 2
    ax.fill(xs, ys, label='red, xx', linewidth=3***REMOVED***
    ys = 0.45 * xs**.5 + 3
    ax.fill(xs, ys, label='green, circle', linewidth=3***REMOVED***
    ys = 0.65 * xs**.5 + 4
    ax.fill(xs, ys, label='yellow, cross', linewidth=3***REMOVED***
    ys = 0.85 * xs**.5 + 5
    ax.fill(xs, ys, label='red2, xx', linewidth=3***REMOVED***
    ax.legend(loc='upper left'***REMOVED***


@image_comparison(baseline_images=['fill_cycle_ignore'***REMOVED***, remove_text=True,
                  extensions=['png'***REMOVED******REMOVED***
def test_fillcycle_ignore(***REMOVED***:
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(111***REMOVED***
    ax.set_prop_cycle(cycler('color',  ['r', 'g', 'y'***REMOVED******REMOVED*** +
                      cycler('hatch', ['xx', 'O', '|-'***REMOVED******REMOVED*** +
                      cycler('marker', ['.', '*', 'D'***REMOVED******REMOVED******REMOVED***
    xs = np.arange(10***REMOVED***
    ys = 0.25 * xs**.5 + 2
    # Should not advance the cycler, even though there is an
    # unspecified property in the cycler "marker".
    # "marker" is not a Polygon property, and should be ignored.
    ax.fill(xs, ys, 'r', hatch='xx', label='red, xx'***REMOVED***
    ys = 0.45 * xs**.5 + 3
    # Allow the cycler to advance, but specify some properties
    ax.fill(xs, ys, hatch='O', label='red, circle'***REMOVED***
    ys = 0.65 * xs**.5 + 4
    ax.fill(xs, ys, label='green, circle'***REMOVED***
    ys = 0.85 * xs**.5 + 5
    ax.fill(xs, ys, label='yellow, cross'***REMOVED***
    ax.legend(loc='upper left'***REMOVED***


@image_comparison(baseline_images=['property_collision_plot'***REMOVED***,
                  remove_text=True, extensions=['png'***REMOVED******REMOVED***
def test_property_collision_plot(***REMOVED***:
    fig, ax = plt.subplots(***REMOVED***
    ax.set_prop_cycle('linewidth', [2, 4***REMOVED******REMOVED***
    for c in range(1, 4***REMOVED***:
        ax.plot(np.arange(10***REMOVED***, c * np.arange(10***REMOVED***, lw=0.1***REMOVED***
    ax.plot(np.arange(10***REMOVED***, 4 * np.arange(10***REMOVED******REMOVED***
    ax.plot(np.arange(10***REMOVED***, 5 * np.arange(10***REMOVED******REMOVED***


@image_comparison(baseline_images=['property_collision_fill'***REMOVED***,
                  remove_text=True, extensions=['png'***REMOVED******REMOVED***
def test_property_collision_fill(***REMOVED***:
    fig, ax = plt.subplots(***REMOVED***
    xs = np.arange(10***REMOVED***
    ys = 0.25 * xs**.5 + 2
    ax.set_prop_cycle(linewidth=[2, 3, 4, 5, 6***REMOVED***, facecolor='bgcmy'***REMOVED***
    for c in range(1, 4***REMOVED***:
        ax.fill(xs, c * ys, lw=0.1***REMOVED***
    ax.fill(xs, 4 * ys***REMOVED***
    ax.fill(xs, 5 * ys***REMOVED***


@cleanup
def test_valid_input_forms(***REMOVED***:
    fig, ax = plt.subplots(***REMOVED***
    # These should not raise an error.
    ax.set_prop_cycle(None***REMOVED***
    ax.set_prop_cycle(cycler('linewidth', [1, 2***REMOVED******REMOVED******REMOVED***
    ax.set_prop_cycle('color', 'rgywkbcm'***REMOVED***
    ax.set_prop_cycle('linewidth', (1, 2***REMOVED******REMOVED***
    ax.set_prop_cycle('linewidth', [1, 2***REMOVED******REMOVED***
    ax.set_prop_cycle('linewidth', iter([1, 2***REMOVED******REMOVED******REMOVED***
    ax.set_prop_cycle('linewidth', np.array([1, 2***REMOVED******REMOVED******REMOVED***
    ax.set_prop_cycle('color', np.array([[1, 0, 0***REMOVED***,
                                         [0, 1, 0***REMOVED***,
                                         [0, 0, 1***REMOVED******REMOVED******REMOVED******REMOVED***
    ax.set_prop_cycle(lw=[1, 2***REMOVED***, color=['k', 'w'***REMOVED***, ls=['-', '--'***REMOVED******REMOVED***
    ax.set_prop_cycle(lw=np.array([1, 2***REMOVED******REMOVED***,
                      color=np.array(['k', 'w'***REMOVED******REMOVED***,
                      ls=np.array(['-', '--'***REMOVED******REMOVED******REMOVED***
    assert True


@cleanup
def test_cycle_reset(***REMOVED***:
    fig, ax = plt.subplots(***REMOVED***

    # Can't really test a reset because only a cycle object is stored
    # but we can test the first item of the cycle.
    prop = next(ax._get_lines.prop_cycler***REMOVED***
    ax.set_prop_cycle(linewidth=[10, 9, 4***REMOVED******REMOVED***
    assert prop != next(ax._get_lines.prop_cycler***REMOVED***
    ax.set_prop_cycle(None***REMOVED***
    got = next(ax._get_lines.prop_cycler***REMOVED***
    assert prop == got, "expected %s, got %s" % (prop, got***REMOVED***

    fig, ax = plt.subplots(***REMOVED***
    # Need to double-check the old set/get_color_cycle(***REMOVED***, too
    with warnings.catch_warnings(***REMOVED***:
        prop = next(ax._get_lines.prop_cycler***REMOVED***
        ax.set_color_cycle(['c', 'm', 'y', 'k'***REMOVED******REMOVED***
        assert prop != next(ax._get_lines.prop_cycler***REMOVED***
        ax.set_color_cycle(None***REMOVED***
        got = next(ax._get_lines.prop_cycler***REMOVED***
        assert prop == got, "expected %s, got %s" % (prop, got***REMOVED***


@cleanup
def test_invalid_input_forms(***REMOVED***:
    fig, ax = plt.subplots(***REMOVED***
    assert_raises((TypeError, ValueError***REMOVED***, ax.set_prop_cycle, 1***REMOVED***
    assert_raises((TypeError, ValueError***REMOVED***, ax.set_prop_cycle, [1, 2***REMOVED******REMOVED***
    assert_raises((TypeError, ValueError***REMOVED***, ax.set_prop_cycle, 'color', 'fish'***REMOVED***
    assert_raises((TypeError, ValueError***REMOVED***, ax.set_prop_cycle, 'linewidth', 1***REMOVED***
    assert_raises((TypeError, ValueError***REMOVED***, ax.set_prop_cycle,
            'linewidth', {'1': 1, '2': 2***REMOVED******REMOVED***
    assert_raises((TypeError, ValueError***REMOVED***, ax.set_prop_cycle,
            linewidth=1, color='r'***REMOVED***


if __name__ == '__main__':
    import nose
    nose.runmodule(argv=['-s', '--with-doctest'***REMOVED***, exit=False***REMOVED***
