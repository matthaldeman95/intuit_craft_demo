from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six
from matplotlib.externals.six.moves import map

import datetime
import warnings
import tempfile

import dateutil
***REMOVED***
    # mock in python 3.3+
    from unittest import mock
except ImportError:
    import mock
from nose.tools import assert_raises, assert_equal

from matplotlib.testing.decorators import image_comparison, cleanup
import matplotlib.pyplot as plt
import matplotlib.dates as mdates


@image_comparison(baseline_images=['date_empty'***REMOVED***, extensions=['png'***REMOVED******REMOVED***
def test_date_empty(***REMOVED***:
    # make sure mpl does the right thing when told to plot dates even
    # if no date data has been presented, cf
    # http://sourceforge.net/tracker/?func=detail&aid=2850075&group_id=80706&atid=560720
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(1, 1, 1***REMOVED***
    ax.xaxis_date(***REMOVED***


@image_comparison(baseline_images=['date_axhspan'***REMOVED***, extensions=['png'***REMOVED******REMOVED***
def test_date_axhspan(***REMOVED***:
    # test ax hspan with date inputs
    t0 = datetime.datetime(2009, 1, 20***REMOVED***
    tf = datetime.datetime(2009, 1, 21***REMOVED***
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(1, 1, 1***REMOVED***
    ax.axhspan(t0, tf, facecolor="blue", alpha=0.25***REMOVED***
    ax.set_ylim(t0 - datetime.timedelta(days=5***REMOVED***,
                tf + datetime.timedelta(days=5***REMOVED******REMOVED***
    fig.subplots_adjust(left=0.25***REMOVED***


@image_comparison(baseline_images=['date_axvspan'***REMOVED***, extensions=['png'***REMOVED******REMOVED***
def test_date_axvspan(***REMOVED***:
    # test ax hspan with date inputs
    t0 = datetime.datetime(2000, 1, 20***REMOVED***
    tf = datetime.datetime(2010, 1, 21***REMOVED***
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(1, 1, 1***REMOVED***
    ax.axvspan(t0, tf, facecolor="blue", alpha=0.25***REMOVED***
    ax.set_xlim(t0 - datetime.timedelta(days=720***REMOVED***,
                tf + datetime.timedelta(days=720***REMOVED******REMOVED***
    fig.autofmt_xdate(***REMOVED***


@image_comparison(baseline_images=['date_axhline'***REMOVED***,
                  extensions=['png'***REMOVED******REMOVED***
def test_date_axhline(***REMOVED***:
    # test ax hline with date inputs
    t0 = datetime.datetime(2009, 1, 20***REMOVED***
    tf = datetime.datetime(2009, 1, 31***REMOVED***
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(1, 1, 1***REMOVED***
    ax.axhline(t0, color="blue", lw=3***REMOVED***
    ax.set_ylim(t0 - datetime.timedelta(days=5***REMOVED***,
                tf + datetime.timedelta(days=5***REMOVED******REMOVED***
    fig.subplots_adjust(left=0.25***REMOVED***


@image_comparison(baseline_images=['date_axvline'***REMOVED***, tol=16,
                  extensions=['png'***REMOVED******REMOVED***
def test_date_axvline(***REMOVED***:
    # test ax hline with date inputs
    t0 = datetime.datetime(2000, 1, 20***REMOVED***
    tf = datetime.datetime(2000, 1, 21***REMOVED***
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(1, 1, 1***REMOVED***
    ax.axvline(t0, color="red", lw=3***REMOVED***
    ax.set_xlim(t0 - datetime.timedelta(days=5***REMOVED***,
                tf + datetime.timedelta(days=5***REMOVED******REMOVED***
    fig.autofmt_xdate(***REMOVED***


@cleanup
def test_too_many_date_ticks(***REMOVED***:
    # Attempt to test SF 2715172, see
    # https://sourceforge.net/tracker/?func=detail&aid=2715172&group_id=80706&atid=560720
    # setting equal datetimes triggers and expander call in
    # transforms.nonsingular which results in too many ticks in the
    # DayLocator.  This should trigger a Locator.MAXTICKS RuntimeError
    warnings.filterwarnings(
        'ignore',
        'Attempting to set identical left==right results\\nin singular '
        'transformations; automatically expanding.\\nleft=\d*\.\d*, '
        'right=\d*\.\d*',
        UserWarning, module='matplotlib.axes'***REMOVED***
    t0 = datetime.datetime(2000, 1, 20***REMOVED***
    tf = datetime.datetime(2000, 1, 20***REMOVED***
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(1, 1, 1***REMOVED***
    ax.set_xlim((t0, tf***REMOVED***, auto=True***REMOVED***
    ax.plot([***REMOVED***, [***REMOVED******REMOVED***
    ax.xaxis.set_major_locator(mdates.DayLocator(***REMOVED******REMOVED***
    assert_raises(RuntimeError, fig.savefig, 'junk.png'***REMOVED***


@image_comparison(baseline_images=['RRuleLocator_bounds'***REMOVED***, extensions=['png'***REMOVED******REMOVED***
def test_RRuleLocator(***REMOVED***:
    import matplotlib.testing.jpl_units as units
    units.register(***REMOVED***

    # This will cause the RRuleLocator to go out of bounds when it tries
    # to add padding to the limits, so we make sure it caps at the correct
    # boundary values.
    t0 = datetime.datetime(1000, 1, 1***REMOVED***
    tf = datetime.datetime(6000, 1, 1***REMOVED***

    fig = plt.figure(***REMOVED***
    ax = plt.subplot(111***REMOVED***
    ax.set_autoscale_on(True***REMOVED***
    ax.plot([t0, tf***REMOVED***, [0.0, 1.0***REMOVED***, marker='o'***REMOVED***

    rrule = mdates.rrulewrapper(dateutil.rrule.YEARLY, interval=500***REMOVED***
    locator = mdates.RRuleLocator(rrule***REMOVED***
    ax.xaxis.set_major_locator(locator***REMOVED***
    ax.xaxis.set_major_formatter(mdates.AutoDateFormatter(locator***REMOVED******REMOVED***

    ax.autoscale_view(***REMOVED***
    fig.autofmt_xdate(***REMOVED***


@image_comparison(baseline_images=['DateFormatter_fractionalSeconds'***REMOVED***,
                  extensions=['png'***REMOVED******REMOVED***
def test_DateFormatter(***REMOVED***:
    import matplotlib.testing.jpl_units as units
    units.register(***REMOVED***

    # Lets make sure that DateFormatter will allow us to have tick marks
    # at intervals of fractional seconds.

    t0 = datetime.datetime(2001, 1, 1, 0, 0, 0***REMOVED***
    tf = datetime.datetime(2001, 1, 1, 0, 0, 1***REMOVED***

    fig = plt.figure(***REMOVED***
    ax = plt.subplot(111***REMOVED***
    ax.set_autoscale_on(True***REMOVED***
    ax.plot([t0, tf***REMOVED***, [0.0, 1.0***REMOVED***, marker='o'***REMOVED***

    # rrule = mpldates.rrulewrapper( dateutil.rrule.YEARLY, interval=500 ***REMOVED***
    # locator = mpldates.RRuleLocator( rrule ***REMOVED***
    # ax.xaxis.set_major_locator( locator ***REMOVED***
    # ax.xaxis.set_major_formatter( mpldates.AutoDateFormatter(locator***REMOVED*** ***REMOVED***

    ax.autoscale_view(***REMOVED***
    fig.autofmt_xdate(***REMOVED***


def test_date_formatter_strftime(***REMOVED***:
    ***REMOVED***
    Tests that DateFormatter matches datetime.strftime,
    check microseconds for years before 1900 for bug #3179
    as well as a few related issues for years before 1900.
    ***REMOVED***
    def test_strftime_fields(dt***REMOVED***:
        ***REMOVED***For datetime object dt, check DateFormatter fields***REMOVED***
        # Note: the last couple of %%s are to check multiple %s are handled
        # properly; %% should get replaced by %.
        formatter = mdates.DateFormatter("%w %d %m %y %Y %H %I %M %S %%%f %%x"***REMOVED***
        # Compute date fields without using datetime.strftime,
        # since datetime.strftime does not work before year 1900
        formatted_date_str = (
            "{weekday***REMOVED*** {day:02d***REMOVED*** {month:02d***REMOVED*** {year:02d***REMOVED*** {full_year:04d***REMOVED*** "
            "{hour24:02d***REMOVED*** {hour12:02d***REMOVED*** {minute:02d***REMOVED*** {second:02d***REMOVED*** "
            "%{microsecond:06d***REMOVED*** %x"
            .format(
            # weeknum=dt.isocalendar(***REMOVED***[1***REMOVED***,  # %U/%W {weeknum:02d***REMOVED***
            # %w Sunday=0, weekday(***REMOVED*** Monday=0
            weekday=str((dt.weekday(***REMOVED*** + 1***REMOVED*** % 7***REMOVED***,
            day=dt.day,
            month=dt.month,
            year=dt.year % 100,
            full_year=dt.year,
            hour24=dt.hour,
            hour12=((dt.hour-1***REMOVED*** % 12***REMOVED*** + 1,
            minute=dt.minute,
            second=dt.second,
            microsecond=dt.microsecond***REMOVED******REMOVED***
        assert_equal(formatter.strftime(dt***REMOVED***, formatted_date_str***REMOVED***

        ***REMOVED***
            # Test strftime("%x"***REMOVED*** with the current locale.
            import locale  # Might not exist on some platforms, such as Windows
            locale_formatter = mdates.DateFormatter("%x"***REMOVED***
            locale_d_fmt = locale.nl_langinfo(locale.D_FMT***REMOVED***
            expanded_formatter = mdates.DateFormatter(locale_d_fmt***REMOVED***
            assert_equal(locale_formatter.strftime(dt***REMOVED***,
                         expanded_formatter.strftime(dt***REMOVED******REMOVED***
        except (ImportError, AttributeError***REMOVED***:
            pass

    for year in range(1, 3000, 71***REMOVED***:
        # Iterate through random set of years
        test_strftime_fields(datetime.datetime(year, 1, 1***REMOVED******REMOVED***
        test_strftime_fields(datetime.datetime(year, 2, 3, 4, 5, 6, 12345***REMOVED******REMOVED***


def test_date_formatter_callable(***REMOVED***:
    scale = -11
    locator = mock.Mock(_get_unit=mock.Mock(return_value=scale***REMOVED******REMOVED***
    callable_formatting_function = (lambda dates, _:
                                    [dt.strftime('%d-%m//%Y'***REMOVED*** for dt in dates***REMOVED******REMOVED***

    formatter = mdates.AutoDateFormatter(locator***REMOVED***
    formatter.scaled[-10***REMOVED*** = callable_formatting_function
    assert_equal(formatter([datetime.datetime(2014, 12, 25***REMOVED******REMOVED******REMOVED***,
                 ['25-12//2014'***REMOVED******REMOVED***


def test_drange(***REMOVED***:
    ***REMOVED***
    This test should check if drange works as expected, and if all the
    rounding errors are fixed
    ***REMOVED***
    start = datetime.datetime(2011, 1, 1, tzinfo=mdates.UTC***REMOVED***
    end = datetime.datetime(2011, 1, 2, tzinfo=mdates.UTC***REMOVED***
    delta = datetime.timedelta(hours=1***REMOVED***
    # We expect 24 values in drange(start, end, delta***REMOVED***, because drange returns
    # dates from an half open interval [start, end***REMOVED***
    assert_equal(24, len(mdates.drange(start, end, delta***REMOVED******REMOVED******REMOVED***

    # if end is a little bit later, we expect the range to contain one element
    # more
    end = end + datetime.timedelta(microseconds=1***REMOVED***
    assert_equal(25, len(mdates.drange(start, end, delta***REMOVED******REMOVED******REMOVED***

    # reset end
    end = datetime.datetime(2011, 1, 2, tzinfo=mdates.UTC***REMOVED***

    # and tst drange with "complicated" floats:
    # 4 hours = 1/6 day, this is an "dangerous" float
    delta = datetime.timedelta(hours=4***REMOVED***
    daterange = mdates.drange(start, end, delta***REMOVED***
    assert_equal(6, len(daterange***REMOVED******REMOVED***
    assert_equal(mdates.num2date(daterange[-1***REMOVED******REMOVED***, end - delta***REMOVED***


@cleanup
def test_empty_date_with_year_formatter(***REMOVED***:
    # exposes sf bug 2861426:
    # https://sourceforge.net/tracker/?func=detail&aid=2861426&group_id=80706&atid=560720

    # update: I am no longer believe this is a bug, as I commented on
    # the tracker.  The question is now: what to do with this test

    import matplotlib.dates as dates

    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(111***REMOVED***

    yearFmt = dates.DateFormatter('%Y'***REMOVED***
    ax.xaxis.set_major_formatter(yearFmt***REMOVED***

    with tempfile.TemporaryFile(***REMOVED*** as fh:
        assert_raises(ValueError, fig.savefig, fh***REMOVED***


def test_auto_date_locator(***REMOVED***:
    def _create_auto_date_locator(date1, date2***REMOVED***:
        locator = mdates.AutoDateLocator(***REMOVED***
        locator.create_dummy_axis(***REMOVED***
        locator.set_view_interval(mdates.date2num(date1***REMOVED***,
                                  mdates.date2num(date2***REMOVED******REMOVED***
        return locator

    d1 = datetime.datetime(1990, 1, 1***REMOVED***
    results = ([datetime.timedelta(weeks=52 * 200***REMOVED***,
                ['1990-01-01 00:00:00+00:00', '2010-01-01 00:00:00+00:00',
                 '2030-01-01 00:00:00+00:00', '2050-01-01 00:00:00+00:00',
                 '2070-01-01 00:00:00+00:00', '2090-01-01 00:00:00+00:00',
                 '2110-01-01 00:00:00+00:00', '2130-01-01 00:00:00+00:00',
                 '2150-01-01 00:00:00+00:00', '2170-01-01 00:00:00+00:00'***REMOVED***
                ***REMOVED***,
               [datetime.timedelta(weeks=52***REMOVED***,
                ['1990-01-01 00:00:00+00:00', '1990-02-01 00:00:00+00:00',
                 '1990-03-01 00:00:00+00:00', '1990-04-01 00:00:00+00:00',
                 '1990-05-01 00:00:00+00:00', '1990-06-01 00:00:00+00:00',
                 '1990-07-01 00:00:00+00:00', '1990-08-01 00:00:00+00:00',
                 '1990-09-01 00:00:00+00:00', '1990-10-01 00:00:00+00:00',
                 '1990-11-01 00:00:00+00:00', '1990-12-01 00:00:00+00:00'***REMOVED***
                ***REMOVED***,
               [datetime.timedelta(days=141***REMOVED***,
                ['1990-01-05 00:00:00+00:00', '1990-01-26 00:00:00+00:00',
                 '1990-02-16 00:00:00+00:00', '1990-03-09 00:00:00+00:00',
                 '1990-03-30 00:00:00+00:00', '1990-04-20 00:00:00+00:00',
                 '1990-05-11 00:00:00+00:00'***REMOVED***
                ***REMOVED***,
               [datetime.timedelta(days=40***REMOVED***,
                ['1990-01-03 00:00:00+00:00', '1990-01-10 00:00:00+00:00',
                 '1990-01-17 00:00:00+00:00', '1990-01-24 00:00:00+00:00',
                 '1990-01-31 00:00:00+00:00', '1990-02-07 00:00:00+00:00'***REMOVED***
                ***REMOVED***,
               [datetime.timedelta(hours=40***REMOVED***,
                ['1990-01-01 00:00:00+00:00', '1990-01-01 04:00:00+00:00',
                 '1990-01-01 08:00:00+00:00', '1990-01-01 12:00:00+00:00',
                 '1990-01-01 16:00:00+00:00', '1990-01-01 20:00:00+00:00',
                 '1990-01-02 00:00:00+00:00', '1990-01-02 04:00:00+00:00',
                 '1990-01-02 08:00:00+00:00', '1990-01-02 12:00:00+00:00',
                 '1990-01-02 16:00:00+00:00'***REMOVED***
                ***REMOVED***,
               [datetime.timedelta(minutes=20***REMOVED***,
                ['1990-01-01 00:00:00+00:00', '1990-01-01 00:05:00+00:00',
                 '1990-01-01 00:10:00+00:00', '1990-01-01 00:15:00+00:00',
                 '1990-01-01 00:20:00+00:00'***REMOVED***

                ***REMOVED***,
               [datetime.timedelta(seconds=40***REMOVED***,
                ['1990-01-01 00:00:00+00:00', '1990-01-01 00:00:05+00:00',
                 '1990-01-01 00:00:10+00:00', '1990-01-01 00:00:15+00:00',
                 '1990-01-01 00:00:20+00:00', '1990-01-01 00:00:25+00:00',
                 '1990-01-01 00:00:30+00:00', '1990-01-01 00:00:35+00:00',
                 '1990-01-01 00:00:40+00:00'***REMOVED***
                ***REMOVED***,
               [datetime.timedelta(microseconds=1500***REMOVED***,
                ['1989-12-31 23:59:59.999507+00:00',
                 '1990-01-01 00:00:00+00:00',
                 '1990-01-01 00:00:00.000502+00:00',
                 '1990-01-01 00:00:00.001005+00:00',
                 '1990-01-01 00:00:00.001508+00:00'***REMOVED***
                ***REMOVED***,
               ***REMOVED***

    for t_delta, expected in results:
        d2 = d1 + t_delta
        locator = _create_auto_date_locator(d1, d2***REMOVED***
        assert_equal(list(map(str, mdates.num2date(locator(***REMOVED******REMOVED******REMOVED******REMOVED***,
                     expected***REMOVED***


@image_comparison(baseline_images=['date_inverted_limit'***REMOVED***,
                  extensions=['png'***REMOVED******REMOVED***
def test_date_inverted_limit(***REMOVED***:
    # test ax hline with date inputs
    t0 = datetime.datetime(2009, 1, 20***REMOVED***
    tf = datetime.datetime(2009, 1, 31***REMOVED***
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(1, 1, 1***REMOVED***
    ax.axhline(t0, color="blue", lw=3***REMOVED***
    ax.set_ylim(t0 - datetime.timedelta(days=5***REMOVED***,
                tf + datetime.timedelta(days=5***REMOVED******REMOVED***
    ax.invert_yaxis(***REMOVED***
    fig.subplots_adjust(left=0.25***REMOVED***


if __name__ == '__main__':
    import nose
    nose.runmodule(argv=['-s', '--with-doctest'***REMOVED***, exit=False***REMOVED***
