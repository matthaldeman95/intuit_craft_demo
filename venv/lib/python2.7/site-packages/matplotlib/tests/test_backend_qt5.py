from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***
from matplotlib.externals import six

from matplotlib import pyplot as plt
from matplotlib.testing.decorators import cleanup, switch_backend
from matplotlib.testing.decorators import knownfailureif
from matplotlib._pylab_helpers import Gcf
import matplotlib.style as mstyle
import copy

***REMOVED***
    # mock in python 3.3+
    from unittest import mock
except ImportError:
    import mock

***REMOVED***
    with mstyle.context({'backend': 'Qt5Agg'***REMOVED******REMOVED***:
        from matplotlib.backends.qt_compat import QtCore, __version__
    from matplotlib.backends.backend_qt5 import (MODIFIER_KEYS,
                                                 SUPER, ALT, CTRL, SHIFT***REMOVED***

    _, ControlModifier, ControlKey = MODIFIER_KEYS[CTRL***REMOVED***
    _, AltModifier, AltKey = MODIFIER_KEYS[ALT***REMOVED***
    _, SuperModifier, SuperKey = MODIFIER_KEYS[SUPER***REMOVED***
    _, ShiftModifier, ShiftKey = MODIFIER_KEYS[SHIFT***REMOVED***

    py_qt_ver = int(__version__.split('.'***REMOVED***[0***REMOVED******REMOVED***
    HAS_QT = py_qt_ver == 5

except ImportError:
    HAS_QT = False


@cleanup
@knownfailureif(not HAS_QT***REMOVED***
@switch_backend('Qt5Agg'***REMOVED***
def test_fig_close(***REMOVED***:
    # save the state of Gcf.figs
    init_figs = copy.copy(Gcf.figs***REMOVED***

    # make a figure using pyplot interface
    fig = plt.figure(***REMOVED***

    # simulate user clicking the close button by reaching in
    # and calling close on the underlying Qt object
    fig.canvas.manager.window.close(***REMOVED***

    # assert that we have removed the reference to the FigureManager
    # that got added by plt.figure(***REMOVED***
    assert(init_figs == Gcf.figs***REMOVED***


@switch_backend('Qt5Agg'***REMOVED***
def assert_correct_key(qt_key, qt_mods, answer***REMOVED***:
    ***REMOVED***
    Make a figure
    Send a key_press_event event (using non-public, qt5 backend specific api***REMOVED***
    Catch the event
    Assert sent and caught keys are the same
    ***REMOVED***
    qt_canvas = plt.figure(***REMOVED***.canvas

    event = mock.Mock(***REMOVED***
    event.isAutoRepeat.return_value = False
    event.key.return_value = qt_key
    event.modifiers.return_value = qt_mods

    def receive(event***REMOVED***:
        assert event.key == answer

    qt_canvas.mpl_connect('key_press_event', receive***REMOVED***
    qt_canvas.keyPressEvent(event***REMOVED***


@cleanup
@knownfailureif(not HAS_QT***REMOVED***
def test_shift(***REMOVED***:
    assert_correct_key(QtCore.Qt.Key_A,
                       ShiftModifier,
                       'A'***REMOVED***


@cleanup
@knownfailureif(not HAS_QT***REMOVED***
def test_lower(***REMOVED***:
    assert_correct_key(QtCore.Qt.Key_A,
                       QtCore.Qt.NoModifier,
                       'a'***REMOVED***


@cleanup
@knownfailureif(not HAS_QT***REMOVED***
def test_control(***REMOVED***:
    assert_correct_key(QtCore.Qt.Key_A,
                       ControlModifier,
                       'ctrl+a'***REMOVED***


@cleanup
@knownfailureif(not HAS_QT***REMOVED***
def test_unicode_upper(***REMOVED***:
    assert_correct_key(QtCore.Qt.Key_Aacute,
                       ShiftModifier,
                       six.unichr(193***REMOVED******REMOVED***


@cleanup
@knownfailureif(not HAS_QT***REMOVED***
def test_unicode_lower(***REMOVED***:
    assert_correct_key(QtCore.Qt.Key_Aacute,
                       QtCore.Qt.NoModifier,
                       six.unichr(225***REMOVED******REMOVED***


@cleanup
@knownfailureif(not HAS_QT***REMOVED***
def test_alt_control(***REMOVED***:
    assert_correct_key(ControlKey,
                       AltModifier,
                       'alt+control'***REMOVED***


@cleanup
@knownfailureif(not HAS_QT***REMOVED***
def test_control_alt(***REMOVED***:
    assert_correct_key(AltKey,
                       ControlModifier,
                       'ctrl+alt'***REMOVED***


@cleanup
@knownfailureif(not HAS_QT***REMOVED***
def test_modifier_order(***REMOVED***:
    assert_correct_key(QtCore.Qt.Key_Aacute,
                       (ControlModifier | AltModifier | SuperModifier***REMOVED***,
                       'ctrl+alt+super+' + six.unichr(225***REMOVED******REMOVED***


@cleanup
@knownfailureif(not HAS_QT***REMOVED***
def test_backspace(***REMOVED***:
    assert_correct_key(QtCore.Qt.Key_Backspace,
                       QtCore.Qt.NoModifier,
                       'backspace'***REMOVED***


@cleanup
@knownfailureif(not HAS_QT***REMOVED***
def test_backspace_mod(***REMOVED***:
    assert_correct_key(QtCore.Qt.Key_Backspace,
                       ControlModifier,
                       'ctrl+backspace'***REMOVED***


@cleanup
@knownfailureif(not HAS_QT***REMOVED***
def test_non_unicode_key(***REMOVED***:
    assert_correct_key(QtCore.Qt.Key_Play,
                       QtCore.Qt.NoModifier,
                       None***REMOVED***
