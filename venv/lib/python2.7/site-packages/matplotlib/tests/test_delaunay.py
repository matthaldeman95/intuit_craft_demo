from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six
from matplotlib.externals.six.moves import xrange
import warnings

import numpy as np
from matplotlib.testing.decorators import image_comparison, knownfailureif
from matplotlib.cbook import MatplotlibDeprecationWarning

with warnings.catch_warnings(***REMOVED***:
    # the module is deprecated. The tests should be removed when the module is.
    warnings.simplefilter('ignore', MatplotlibDeprecationWarning***REMOVED***
    from matplotlib.delaunay.triangulate import Triangulation
from matplotlib import pyplot as plt
import matplotlib as mpl

def constant(x, y***REMOVED***:
    return np.ones(x.shape, x.dtype***REMOVED***
constant.title = 'Constant'

def xramp(x, y***REMOVED***:
    return x
xramp.title = 'X Ramp'

def yramp(x, y***REMOVED***:
    return y
yramp.title = 'Y Ramp'

def exponential(x, y***REMOVED***:
    x = x*9
    y = y*9
    x1 = x+1.0
    x2 = x-2.0
    x4 = x-4.0
    x7 = x-7.0
    y1 = x+1.0
    y2 = y-2.0
    y3 = y-3.0
    y7 = y-7.0
    f = (0.75 * np.exp(-(x2*x2+y2*y2***REMOVED***/4.0***REMOVED*** +
         0.75 * np.exp(-x1*x1/49.0 - y1/10.0***REMOVED*** +
         0.5 * np.exp(-(x7*x7 + y3*y3***REMOVED***/4.0***REMOVED*** -
         0.2 * np.exp(-x4*x4 -y7*y7***REMOVED******REMOVED***
    return f
exponential.title = 'Exponential and Some Gaussians'

def cliff(x, y***REMOVED***:
    f = np.tanh(9.0*(y-x***REMOVED*** + 1.0***REMOVED***/9.0
    return f
cliff.title = 'Cliff'

def saddle(x, y***REMOVED***:
    f = (1.25 + np.cos(5.4*y***REMOVED******REMOVED***/(6.0 + 6.0*(3*x-1.0***REMOVED*****2***REMOVED***
    return f
saddle.title = 'Saddle'

def gentle(x, y***REMOVED***:
    f = np.exp(-5.0625*((x-0.5***REMOVED*****2+(y-0.5***REMOVED*****2***REMOVED******REMOVED***/3.0
    return f
gentle.title = 'Gentle Peak'

def steep(x, y***REMOVED***:
    f = np.exp(-20.25*((x-0.5***REMOVED*****2+(y-0.5***REMOVED*****2***REMOVED******REMOVED***/3.0
    return f
steep.title = 'Steep Peak'

def sphere(x, y***REMOVED***:
    circle = 64-81*((x-0.5***REMOVED*****2 + (y-0.5***REMOVED*****2***REMOVED***
    f = np.where(circle >= 0, np.sqrt(np.clip(circle,0,100***REMOVED******REMOVED*** - 0.5, 0.0***REMOVED***
    return f
sphere.title = 'Sphere'

def trig(x, y***REMOVED***:
    f = 2.0*np.cos(10.0*x***REMOVED****np.sin(10.0*y***REMOVED*** + np.sin(10.0*x*y***REMOVED***
    return f
trig.title = 'Cosines and Sines'

def gauss(x, y***REMOVED***:
    x = 5.0-10.0*x
    y = 5.0-10.0*y
    g1 = np.exp(-x*x/2***REMOVED***
    g2 = np.exp(-y*y/2***REMOVED***
    f = g1 + 0.75*g2*(1 + g1***REMOVED***
    return f
gauss.title = 'Gaussian Peak and Gaussian Ridges'

def cloverleaf(x, y***REMOVED***:
    ex = np.exp((10.0-20.0*x***REMOVED***/3.0***REMOVED***
    ey = np.exp((10.0-20.0*y***REMOVED***/3.0***REMOVED***
    logitx = 1.0/(1.0+ex***REMOVED***
    logity = 1.0/(1.0+ey***REMOVED***
    f = (((20.0/3.0***REMOVED*****3 * ex*ey***REMOVED*****2 * (logitx*logity***REMOVED*****5 *
        (ex-2.0*logitx***REMOVED****(ey-2.0*logity***REMOVED******REMOVED***
    return f
cloverleaf.title = 'Cloverleaf'

def cosine_peak(x, y***REMOVED***:
    circle = np.hypot(80*x-40.0, 90*y-45.***REMOVED***
    f = np.exp(-0.04*circle***REMOVED*** * np.cos(0.15*circle***REMOVED***
    return f
cosine_peak.title = 'Cosine Peak'

allfuncs = [exponential, cliff, saddle, gentle, steep, sphere, trig, gauss, cloverleaf, cosine_peak***REMOVED***


class LinearTester(object***REMOVED***:
    name = 'Linear'
    def __init__(self, xrange=(0.0, 1.0***REMOVED***, yrange=(0.0, 1.0***REMOVED***, nrange=101, npoints=250***REMOVED***:
        self.xrange = xrange
        self.yrange = yrange
        self.nrange = nrange
        self.npoints = npoints

        rng = np.random.RandomState(1234567890***REMOVED***
        self.x = rng.uniform(xrange[0***REMOVED***, xrange[1***REMOVED***, size=npoints***REMOVED***
        self.y = rng.uniform(yrange[0***REMOVED***, yrange[1***REMOVED***, size=npoints***REMOVED***
        self.tri = Triangulation(self.x, self.y***REMOVED***

    def replace_data(self, dataset***REMOVED***:
        self.x = dataset.x
        self.y = dataset.y
        self.tri = Triangulation(self.x, self.y***REMOVED***

    def interpolator(self, func***REMOVED***:
        z = func(self.x, self.y***REMOVED***
        return self.tri.linear_extrapolator(z, bbox=self.xrange+self.yrange***REMOVED***

    def plot(self, func, interp=True, plotter='imshow'***REMOVED***:
        if interp:
            lpi = self.interpolator(func***REMOVED***
            z = lpi[self.yrange[0***REMOVED***:self.yrange[1***REMOVED***:complex(0,self.nrange***REMOVED***,
                    self.xrange[0***REMOVED***:self.xrange[1***REMOVED***:complex(0,self.nrange***REMOVED******REMOVED***
        else:
            y, x = np.mgrid[self.yrange[0***REMOVED***:self.yrange[1***REMOVED***:complex(0,self.nrange***REMOVED***,
                            self.xrange[0***REMOVED***:self.xrange[1***REMOVED***:complex(0,self.nrange***REMOVED******REMOVED***
            z = func(x, y***REMOVED***

        z = np.where(np.isinf(z***REMOVED***, 0.0, z***REMOVED***

        extent = (self.xrange[0***REMOVED***, self.xrange[1***REMOVED***,
            self.yrange[0***REMOVED***, self.yrange[1***REMOVED******REMOVED***
        fig = plt.figure(***REMOVED***
        plt.hot(***REMOVED*** # Some like it hot
        if plotter == 'imshow':
            plt.imshow(np.nan_to_num(z***REMOVED***, interpolation='nearest', extent=extent, origin='lower'***REMOVED***
        elif plotter == 'contour':
            Y, X = np.ogrid[self.yrange[0***REMOVED***:self.yrange[1***REMOVED***:complex(0,self.nrange***REMOVED***,
                self.xrange[0***REMOVED***:self.xrange[1***REMOVED***:complex(0,self.nrange***REMOVED******REMOVED***
            plt.contour(np.ravel(X***REMOVED***, np.ravel(Y***REMOVED***, z, 20***REMOVED***
        x = self.x
        y = self.y
        lc = mpl.collections.LineCollection(np.array([((x[i***REMOVED***, y[i***REMOVED******REMOVED***, (x[j***REMOVED***, y[j***REMOVED******REMOVED******REMOVED***
            for i, j in self.tri.edge_db***REMOVED******REMOVED***, colors=[(0,0,0,0.2***REMOVED******REMOVED******REMOVED***
        ax = plt.gca(***REMOVED***
        ax.add_collection(lc***REMOVED***

        if interp:
            title = '%s Interpolant' % self.name
        else:
            title = 'Reference'
        if hasattr(func, 'title'***REMOVED***:
            plt.title('%s: %s' % (func.title, title***REMOVED******REMOVED***
        else:
            plt.title(title***REMOVED***

class NNTester(LinearTester***REMOVED***:
    name = 'Natural Neighbors'
    def interpolator(self, func***REMOVED***:
        z = func(self.x, self.y***REMOVED***
        return self.tri.nn_extrapolator(z, bbox=self.xrange+self.yrange***REMOVED***

def make_all_2d_testfuncs(allfuncs=allfuncs***REMOVED***:
    def make_test(func***REMOVED***:
        filenames = [
            '%s-%s' % (func.__name__, x***REMOVED*** for x in
            ['ref-img', 'nn-img', 'lin-img', 'ref-con', 'nn-con', 'lin-con'***REMOVED******REMOVED***

        # We only generate PNGs to save disk space -- we just assume
        # that any backend differences are caught by other tests.
        @image_comparison(filenames, extensions=['png'***REMOVED***,
                          freetype_version=('2.4.5', '2.4.9'***REMOVED***,
                          remove_text=True***REMOVED***
        def reference_test(***REMOVED***:
            nnt.plot(func, interp=False, plotter='imshow'***REMOVED***
            nnt.plot(func, interp=True, plotter='imshow'***REMOVED***
            lpt.plot(func, interp=True, plotter='imshow'***REMOVED***
            nnt.plot(func, interp=False, plotter='contour'***REMOVED***
            nnt.plot(func, interp=True, plotter='contour'***REMOVED***
            lpt.plot(func, interp=True, plotter='contour'***REMOVED***

        tester = reference_test
        tester.__name__ = str('test_%s' % func.__name__***REMOVED***
        return tester

    nnt = NNTester(npoints=1000***REMOVED***
    lpt = LinearTester(npoints=1000***REMOVED***
    for func in allfuncs:
        globals(***REMOVED***['test_%s' % func.__name__***REMOVED*** = make_test(func***REMOVED***

make_all_2d_testfuncs(***REMOVED***

# 1d and 0d grid tests

ref_interpolator = Triangulation([0,10,10,0***REMOVED***,
                                 [0,0,10,10***REMOVED******REMOVED***.linear_interpolator([1,10,5,2.0***REMOVED******REMOVED***

def test_1d_grid(***REMOVED***:
    res = ref_interpolator[3:6:2j,1:1:1j***REMOVED***
    assert np.allclose(res, [[1.6***REMOVED***,[1.9***REMOVED******REMOVED***, rtol=0***REMOVED***

def test_0d_grid(***REMOVED***:
    res = ref_interpolator[3:3:1j,1:1:1j***REMOVED***
    assert np.allclose(res, [[1.6***REMOVED******REMOVED***, rtol=0***REMOVED***

@image_comparison(baseline_images=['delaunay-1d-interp'***REMOVED***, extensions=['png'***REMOVED******REMOVED***
def test_1d_plots(***REMOVED***:
    x_range = slice(0.25,9.75,20j***REMOVED***
    x = np.mgrid[x_range***REMOVED***
    ax = plt.gca(***REMOVED***
    for y in xrange(2,10,2***REMOVED***:
        plt.plot(x, ref_interpolator[x_range,y:y:1j***REMOVED******REMOVED***
    ax.set_xticks([***REMOVED******REMOVED***
    ax.set_yticks([***REMOVED******REMOVED***
