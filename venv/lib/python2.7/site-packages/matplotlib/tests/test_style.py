from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

***REMOVED***
import sys
import shutil
import tempfile
from contextlib import contextmanager

from nose import SkipTest
from nose.tools import assert_raises
from nose.plugins.attrib import attr

import matplotlib as mpl
from matplotlib import style
from matplotlib.style.core import USER_LIBRARY_PATHS, STYLE_EXTENSION

from matplotlib.externals import six

PARAM = 'image.cmap'
VALUE = 'pink'
DUMMY_SETTINGS = {PARAM: VALUE***REMOVED***


@contextmanager
def temp_style(style_name, settings=None***REMOVED***:
    ***REMOVED***Context manager to create a style sheet in a temporary directory.***REMOVED***
    settings = DUMMY_SETTINGS
    temp_file = '%s.%s' % (style_name, STYLE_EXTENSION***REMOVED***

    # Write style settings to file in the temp directory.
    tempdir = tempfile.mkdtemp(***REMOVED***
    with open(os.path.join(tempdir, temp_file***REMOVED***, 'w'***REMOVED*** as f:
        for k, v in six.iteritems(settings***REMOVED***:
            f.write('%s: %s' % (k, v***REMOVED******REMOVED***

    # Add temp directory to style path and reload so we can access this style.
    USER_LIBRARY_PATHS.append(tempdir***REMOVED***
    style.reload_library(***REMOVED***

    ***REMOVED***
        yield
    finally:
        shutil.rmtree(tempdir***REMOVED***
        style.reload_library(***REMOVED***


def test_available(***REMOVED***:
    with temp_style('_test_', DUMMY_SETTINGS***REMOVED***:
        assert '_test_' in style.available


def test_use(***REMOVED***:
    mpl.rcParams[PARAM***REMOVED*** = 'gray'
    with temp_style('test', DUMMY_SETTINGS***REMOVED***:
        with style.context('test'***REMOVED***:
            assert mpl.rcParams[PARAM***REMOVED*** == VALUE


@attr('network'***REMOVED***
def test_use_url(***REMOVED***:
    with temp_style('test', DUMMY_SETTINGS***REMOVED***:
        with style.context('https://gist.github.com/adrn/6590261/raw'***REMOVED***:
            assert mpl.rcParams['axes.facecolor'***REMOVED*** == "#adeade"


def test_context(***REMOVED***:
    mpl.rcParams[PARAM***REMOVED*** = 'gray'
    with temp_style('test', DUMMY_SETTINGS***REMOVED***:
        with style.context('test'***REMOVED***:
            assert mpl.rcParams[PARAM***REMOVED*** == VALUE
    # Check that this value is reset after the exiting the context.
    assert mpl.rcParams[PARAM***REMOVED*** == 'gray'


def test_context_with_dict(***REMOVED***:
    original_value = 'gray'
    other_value = 'blue'
    mpl.rcParams[PARAM***REMOVED*** = original_value
    with style.context({PARAM: other_value***REMOVED******REMOVED***:
        assert mpl.rcParams[PARAM***REMOVED*** == other_value
    assert mpl.rcParams[PARAM***REMOVED*** == original_value


def test_context_with_dict_after_namedstyle(***REMOVED***:
    # Test dict after style name where dict modifies the same parameter.
    original_value = 'gray'
    other_value = 'blue'
    mpl.rcParams[PARAM***REMOVED*** = original_value
    with temp_style('test', DUMMY_SETTINGS***REMOVED***:
        with style.context(['test', {PARAM: other_value***REMOVED******REMOVED******REMOVED***:
            assert mpl.rcParams[PARAM***REMOVED*** == other_value
    assert mpl.rcParams[PARAM***REMOVED*** == original_value


def test_context_with_dict_before_namedstyle(***REMOVED***:
    # Test dict before style name where dict modifies the same parameter.
    original_value = 'gray'
    other_value = 'blue'
    mpl.rcParams[PARAM***REMOVED*** = original_value
    with temp_style('test', DUMMY_SETTINGS***REMOVED***:
        with style.context([{PARAM: other_value***REMOVED***, 'test'***REMOVED******REMOVED***:
            assert mpl.rcParams[PARAM***REMOVED*** == VALUE
    assert mpl.rcParams[PARAM***REMOVED*** == original_value


def test_context_with_union_of_dict_and_namedstyle(***REMOVED***:
    # Test dict after style name where dict modifies the a different parameter.
    original_value = 'gray'
    other_param = 'text.usetex'
    other_value = True
    d = {other_param: other_value***REMOVED***
    mpl.rcParams[PARAM***REMOVED*** = original_value
    mpl.rcParams[other_param***REMOVED*** = (not other_value***REMOVED***
    with temp_style('test', DUMMY_SETTINGS***REMOVED***:
        with style.context(['test', d***REMOVED******REMOVED***:
            assert mpl.rcParams[PARAM***REMOVED*** == VALUE
            assert mpl.rcParams[other_param***REMOVED*** == other_value
    assert mpl.rcParams[PARAM***REMOVED*** == original_value
    assert mpl.rcParams[other_param***REMOVED*** == (not other_value***REMOVED***


def test_context_with_badparam(***REMOVED***:
    if sys.version_info[:2***REMOVED*** >= (2, 7***REMOVED***:
        from collections import OrderedDict
    else:
        m = "Test can only be run in Python >= 2.7 as it requires OrderedDict"
        raise SkipTest(m***REMOVED***

    original_value = 'gray'
    other_value = 'blue'
    d = OrderedDict([(PARAM, original_value***REMOVED***, ('badparam', None***REMOVED******REMOVED******REMOVED***
    with style.context({PARAM: other_value***REMOVED******REMOVED***:
        assert mpl.rcParams[PARAM***REMOVED*** == other_value
        x = style.context([d***REMOVED******REMOVED***
        assert_raises(KeyError, x.__enter__***REMOVED***
        assert mpl.rcParams[PARAM***REMOVED*** == other_value


if __name__ == '__main__':
    from numpy import testing
    testing.run_module_suite(***REMOVED***
