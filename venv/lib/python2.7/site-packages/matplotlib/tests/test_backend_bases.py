from matplotlib.backend_bases import FigureCanvasBase
from matplotlib.backend_bases import RendererBase
from matplotlib.testing.decorators import image_comparison, cleanup

import matplotlib.pyplot as plt
import matplotlib.transforms as transforms
import matplotlib.path as path

from nose.tools import assert_equal

import numpy as np
***REMOVED***
import shutil
import tempfile


def test_uses_per_path(***REMOVED***:
    id = transforms.Affine2D(***REMOVED***
    paths = [path.Path.unit_regular_polygon(i***REMOVED*** for i in range(3, 7***REMOVED******REMOVED***
    tforms = [id.rotate(i***REMOVED*** for i in range(1, 5***REMOVED******REMOVED***
    offsets = np.arange(20***REMOVED***.reshape((10, 2***REMOVED******REMOVED***
    facecolors = ['red', 'green'***REMOVED***
    edgecolors = ['red', 'green'***REMOVED***

    def check(master_transform, paths, all_transforms,
              offsets, facecolors, edgecolors***REMOVED***:
        rb = RendererBase(***REMOVED***
        raw_paths = list(rb._iter_collection_raw_paths(master_transform,
                                                       paths, all_transforms***REMOVED******REMOVED***
        gc = rb.new_gc(***REMOVED***
        ids = [path_id for xo, yo, path_id, gc0, rgbFace in
               rb._iter_collection(gc, master_transform, all_transforms,
                                   range(len(raw_paths***REMOVED******REMOVED***, offsets,
                                   transforms.IdentityTransform(***REMOVED***,
                                   facecolors, edgecolors, [***REMOVED***, [***REMOVED***, [False***REMOVED***,
                                   [***REMOVED***, 'data'***REMOVED******REMOVED***
        uses = rb._iter_collection_uses_per_path(
            paths, all_transforms, offsets, facecolors, edgecolors***REMOVED***
        seen = [0***REMOVED*** * len(raw_paths***REMOVED***
        for i in ids:
            seen[i***REMOVED*** += 1
        for n in seen:
            assert n in (uses-1, uses***REMOVED***

    check(id, paths, tforms, offsets, facecolors, edgecolors***REMOVED***
    check(id, paths[0:1***REMOVED***, tforms, offsets, facecolors, edgecolors***REMOVED***
    check(id, [***REMOVED***, tforms, offsets, facecolors, edgecolors***REMOVED***
    check(id, paths, tforms[0:1***REMOVED***, offsets, facecolors, edgecolors***REMOVED***
    check(id, paths, [***REMOVED***, offsets, facecolors, edgecolors***REMOVED***
    for n in range(0, offsets.shape[0***REMOVED******REMOVED***:
        check(id, paths, tforms, offsets[0:n, :***REMOVED***, facecolors, edgecolors***REMOVED***
    check(id, paths, tforms, offsets, [***REMOVED***, edgecolors***REMOVED***
    check(id, paths, tforms, offsets, facecolors, [***REMOVED******REMOVED***
    check(id, paths, tforms, offsets, [***REMOVED***, [***REMOVED******REMOVED***
    check(id, paths, tforms, offsets, facecolors[0:1***REMOVED***, edgecolors***REMOVED***


@cleanup
def test_get_default_filename(***REMOVED***:
    ***REMOVED***
        test_dir = tempfile.mkdtemp(***REMOVED***
        plt.rcParams['savefig.directory'***REMOVED*** = test_dir
        fig = plt.figure(***REMOVED***
        canvas = FigureCanvasBase(fig***REMOVED***
        filename = canvas.get_default_filename(***REMOVED***
        assert_equal(filename, 'image.png'***REMOVED***
    finally:
        shutil.rmtree(test_dir***REMOVED***


@cleanup
def test_get_default_filename_already_exists(***REMOVED***:
    # From #3068: Suggest non-existing default filename
    ***REMOVED***
        test_dir = tempfile.mkdtemp(***REMOVED***
        plt.rcParams['savefig.directory'***REMOVED*** = test_dir
        fig = plt.figure(***REMOVED***
        canvas = FigureCanvasBase(fig***REMOVED***

        # create 'image.png' in figure's save dir
        open(os.path.join(test_dir, 'image.png'***REMOVED***, 'w'***REMOVED***.close(***REMOVED***

        filename = canvas.get_default_filename(***REMOVED***
        assert_equal(filename, 'image-1.png'***REMOVED***
    finally:
        shutil.rmtree(test_dir***REMOVED***

if __name__ == "__main__":
    import nose
    nose.runmodule(argv=['-s', '--with-doctest'***REMOVED***, exit=False***REMOVED***
