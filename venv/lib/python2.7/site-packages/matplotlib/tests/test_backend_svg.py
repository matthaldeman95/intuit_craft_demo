from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six

import numpy as np
from io import BytesIO
import xml.parsers.expat

import matplotlib.pyplot as plt
from matplotlib.testing.decorators import cleanup
from matplotlib.testing.decorators import image_comparison


@cleanup
def test_visibility(***REMOVED***:
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(111***REMOVED***

    x = np.linspace(0, 4 * np.pi, 50***REMOVED***
    y = np.sin(x***REMOVED***
    yerr = np.ones_like(y***REMOVED***

    a, b, c = ax.errorbar(x, y, yerr=yerr, fmt='ko'***REMOVED***
    for artist in b:
        artist.set_visible(False***REMOVED***

    fd = BytesIO(***REMOVED***
    fig.savefig(fd, format='svg'***REMOVED***

    fd.seek(0***REMOVED***
    buf = fd.read(***REMOVED***
    fd.close(***REMOVED***

    parser = xml.parsers.expat.ParserCreate(***REMOVED***
    parser.Parse(buf***REMOVED***  # this will raise ExpatError if the svg is invalid


@image_comparison(baseline_images=['fill_black_with_alpha'***REMOVED***, remove_text=True,
                  extensions=['svg'***REMOVED******REMOVED***
def test_fill_black_with_alpha(***REMOVED***:
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(1, 1, 1***REMOVED***
    ax.scatter(x=[0, 0.1, 1***REMOVED***, y=[0, 0, 0***REMOVED***, c='k', alpha=0.1, s=10000***REMOVED***


@image_comparison(baseline_images=['noscale'***REMOVED***, remove_text=True***REMOVED***
def test_noscale(***REMOVED***:
    X, Y = np.meshgrid(np.arange(-5, 5, 1***REMOVED***, np.arange(-5, 5, 1***REMOVED******REMOVED***
    Z = np.sin(Y ** 2***REMOVED***

    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(1, 1, 1***REMOVED***
    ax.imshow(Z, cmap='gray'***REMOVED***
    plt.rcParams['svg.image_noscale'***REMOVED*** = True


@cleanup
def test_composite_images(***REMOVED***:
    #Test that figures can be saved with and without combining multiple images
    #(on a single set of axes***REMOVED*** into a single composite image.
    X, Y = np.meshgrid(np.arange(-5, 5, 1***REMOVED***, np.arange(-5, 5, 1***REMOVED******REMOVED***
    Z = np.sin(Y ** 2***REMOVED***
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(1, 1, 1***REMOVED***
    ax.set_xlim(0, 3***REMOVED***
    ax.imshow(Z, extent=[0, 1, 0, 1***REMOVED******REMOVED***
    ax.imshow(Z[::-1***REMOVED***, extent=[2, 3, 0, 1***REMOVED******REMOVED***
    plt.rcParams['image.composite_image'***REMOVED*** = True
    with BytesIO(***REMOVED*** as svg:
        fig.savefig(svg, format="svg"***REMOVED***
        svg.seek(0***REMOVED***
        buff = svg.read(***REMOVED***
        assert buff.count(six.b('<image '***REMOVED******REMOVED*** == 1
    plt.rcParams['image.composite_image'***REMOVED*** = False
    with BytesIO(***REMOVED*** as svg:
        fig.savefig(svg, format="svg"***REMOVED***
        svg.seek(0***REMOVED***
        buff = svg.read(***REMOVED***
        assert buff.count(six.b('<image '***REMOVED******REMOVED*** == 2


@cleanup
def test_text_urls(***REMOVED***:
    fig = plt.figure(***REMOVED***

    test_url = "http://test_text_urls.matplotlib.org"
    fig.suptitle("test_text_urls", url=test_url***REMOVED***

    fd = BytesIO(***REMOVED***
    fig.savefig(fd, format='svg'***REMOVED***
    fd.seek(0***REMOVED***
    buf = fd.read(***REMOVED***.decode(***REMOVED***
    fd.close(***REMOVED***

    expected = '<a xlink:href="{0***REMOVED***">'.format(test_url***REMOVED***
    assert expected in buf


@image_comparison(baseline_images=['bold_font_output'***REMOVED***, extensions=['svg'***REMOVED******REMOVED***
def test_bold_font_output(***REMOVED***:
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(1, 1, 1***REMOVED***
    ax.plot(np.arange(10***REMOVED***, np.arange(10***REMOVED******REMOVED***
    ax.set_xlabel('nonbold-xlabel'***REMOVED***
    ax.set_ylabel('bold-ylabel', fontweight='bold'***REMOVED***
    ax.set_title('bold-title', fontweight='bold'***REMOVED***


@image_comparison(baseline_images=['bold_font_output_with_none_fonttype'***REMOVED***,
                  extensions=['svg'***REMOVED******REMOVED***
def test_bold_font_output_with_none_fonttype(***REMOVED***:
    plt.rcParams['svg.fonttype'***REMOVED*** = 'none'
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(1, 1, 1***REMOVED***
    ax.plot(np.arange(10***REMOVED***, np.arange(10***REMOVED******REMOVED***
    ax.set_xlabel('nonbold-xlabel'***REMOVED***
    ax.set_ylabel('bold-ylabel', fontweight='bold'***REMOVED***
    ax.set_title('bold-title', fontweight='bold'***REMOVED***


if __name__ == '__main__':
    import nose
    nose.runmodule(argv=['-s', '--with-doctest'***REMOVED***, exit=False***REMOVED***
