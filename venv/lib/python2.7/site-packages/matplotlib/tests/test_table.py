from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six

import matplotlib.pyplot as plt
import numpy as np
from matplotlib.testing.decorators import image_comparison

from matplotlib.table import CustomCell
from matplotlib.path import Path
from nose.tools import assert_equal


@image_comparison(baseline_images=['table_zorder'***REMOVED***,
                  extensions=['png'***REMOVED***,
                  remove_text=True***REMOVED***
def test_zorder(***REMOVED***:
    data = [[66386, 174296***REMOVED***,
            [58230, 381139***REMOVED******REMOVED***

    colLabels = ('Freeze', 'Wind'***REMOVED***
    rowLabels = ['%d year' % x for x in (100, 50***REMOVED******REMOVED***

    cellText = [***REMOVED***
    yoff = np.array([0.0***REMOVED*** * len(colLabels***REMOVED******REMOVED***
    for row in reversed(data***REMOVED***:
        yoff += row
        cellText.append(['%1.1f' % (x/1000.0***REMOVED*** for x in yoff***REMOVED******REMOVED***

    t = np.linspace(0, 2*np.pi, 100***REMOVED***
    plt.plot(t, np.cos(t***REMOVED***, lw=4, zorder=2***REMOVED***

    plt.table(cellText=cellText,
              rowLabels=rowLabels,
              colLabels=colLabels,
              loc='center',
              zorder=-2,
              ***REMOVED***

    plt.table(cellText=cellText,
              rowLabels=rowLabels,
              colLabels=colLabels,
              loc='upper center',
              zorder=4,
              ***REMOVED***
    plt.yticks([***REMOVED******REMOVED***


@image_comparison(baseline_images=['table_labels'***REMOVED***,
                  extensions=['png'***REMOVED******REMOVED***
def test_label_colours(***REMOVED***:
    dim = 3

    c = np.linspace(0, 1, dim***REMOVED***
    colours = plt.cm.RdYlGn(c***REMOVED***
    cellText = [['1'***REMOVED*** * dim***REMOVED*** * dim

    fig = plt.figure(***REMOVED***

    ax1 = fig.add_subplot(4, 1, 1***REMOVED***
    ax1.axis('off'***REMOVED***
    ax1.table(cellText=cellText,
              rowColours=colours,
              loc='best'***REMOVED***

    ax2 = fig.add_subplot(4, 1, 2***REMOVED***
    ax2.axis('off'***REMOVED***
    ax2.table(cellText=cellText,
              rowColours=colours,
              rowLabels=['Header'***REMOVED*** * dim,
              loc='best'***REMOVED***

    ax3 = fig.add_subplot(4, 1, 3***REMOVED***
    ax3.axis('off'***REMOVED***
    ax3.table(cellText=cellText,
              colColours=colours,
              loc='best'***REMOVED***

    ax4 = fig.add_subplot(4, 1, 4***REMOVED***
    ax4.axis('off'***REMOVED***
    ax4.table(cellText=cellText,
              colColours=colours,
              colLabels=['Header'***REMOVED*** * dim,
              loc='best'***REMOVED***


@image_comparison(baseline_images=['table_cell_manipulation'***REMOVED***,
                  extensions=['png'***REMOVED***, remove_text=True***REMOVED***
def test_diff_cell_table(***REMOVED***:
    cells = ('horizontal', 'vertical', 'open', 'closed', 'T', 'R', 'B', 'L'***REMOVED***
    cellText = [['1'***REMOVED*** * len(cells***REMOVED******REMOVED*** * 2
    colWidths = [0.1***REMOVED*** * len(cells***REMOVED***

    _, axes = plt.subplots(nrows=len(cells***REMOVED***, figsize=(4, len(cells***REMOVED***+1***REMOVED******REMOVED***
    for ax, cell in zip(axes, cells***REMOVED***:
        ax.table(
                colWidths=colWidths,
                cellText=cellText,
                loc='center',
                edges=cell,
                ***REMOVED***
        ax.axis('off'***REMOVED***
    plt.tight_layout(***REMOVED***


def test_customcell(***REMOVED***:
    types = ('horizontal', 'vertical', 'open', 'closed', 'T', 'R', 'B', 'L'***REMOVED***
    codes = (
        (Path.MOVETO, Path.LINETO, Path.MOVETO, Path.LINETO, Path.MOVETO***REMOVED***,
        (Path.MOVETO, Path.MOVETO, Path.LINETO, Path.MOVETO, Path.LINETO***REMOVED***,
        (Path.MOVETO, Path.MOVETO, Path.MOVETO, Path.MOVETO, Path.MOVETO***REMOVED***,
        (Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY***REMOVED***,
        (Path.MOVETO, Path.MOVETO, Path.MOVETO, Path.LINETO, Path.MOVETO***REMOVED***,
        (Path.MOVETO, Path.MOVETO, Path.LINETO, Path.MOVETO, Path.MOVETO***REMOVED***,
        (Path.MOVETO, Path.LINETO, Path.MOVETO, Path.MOVETO, Path.MOVETO***REMOVED***,
        (Path.MOVETO, Path.MOVETO, Path.MOVETO, Path.MOVETO, Path.LINETO***REMOVED***,
        ***REMOVED***

    for t, c in zip(types, codes***REMOVED***:
        cell = CustomCell((0, 0***REMOVED***, visible_edges=t, width=1, height=1***REMOVED***
        code = tuple(s for _, s in cell.get_path(***REMOVED***.iter_segments(***REMOVED******REMOVED***
        assert_equal(c, code***REMOVED***
