from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six
import warnings

import numpy as np

from matplotlib.testing.decorators import image_comparison, knownfailureif
import matplotlib.pyplot as plt
from nose.tools import assert_raises
from numpy.testing import assert_array_equal
from matplotlib.offsetbox import AnchoredOffsetbox, DrawingArea
from matplotlib.patches import Rectangle


def example_plot(ax, fontsize=12***REMOVED***:
    ax.plot([1, 2***REMOVED******REMOVED***
    ax.locator_params(nbins=3***REMOVED***
    ax.set_xlabel('x-label', fontsize=fontsize***REMOVED***
    ax.set_ylabel('y-label', fontsize=fontsize***REMOVED***
    ax.set_title('Title', fontsize=fontsize***REMOVED***


@image_comparison(baseline_images=['tight_layout1'***REMOVED******REMOVED***
def test_tight_layout1(***REMOVED***:
    'Test tight_layout for a single subplot'
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(111***REMOVED***
    example_plot(ax, fontsize=24***REMOVED***
    plt.tight_layout(***REMOVED***


@image_comparison(baseline_images=['tight_layout2'***REMOVED******REMOVED***
def test_tight_layout2(***REMOVED***:
    'Test tight_layout for mutiple subplots'
    fig, ((ax1, ax2***REMOVED***, (ax3, ax4***REMOVED******REMOVED*** = plt.subplots(nrows=2, ncols=2***REMOVED***
    example_plot(ax1***REMOVED***
    example_plot(ax2***REMOVED***
    example_plot(ax3***REMOVED***
    example_plot(ax4***REMOVED***
    plt.tight_layout(***REMOVED***


@image_comparison(baseline_images=['tight_layout3'***REMOVED******REMOVED***
def test_tight_layout3(***REMOVED***:
    'Test tight_layout for mutiple subplots'

    fig = plt.figure(***REMOVED***

    ax1 = plt.subplot(221***REMOVED***
    ax2 = plt.subplot(223***REMOVED***
    ax3 = plt.subplot(122***REMOVED***

    example_plot(ax1***REMOVED***
    example_plot(ax2***REMOVED***
    example_plot(ax3***REMOVED***

    plt.tight_layout(***REMOVED***


@image_comparison(baseline_images=['tight_layout4'***REMOVED***,
                  freetype_version=('2.4.5', '2.4.9'***REMOVED******REMOVED***
def test_tight_layout4(***REMOVED***:
    'Test tight_layout for subplot2grid'

    fig = plt.figure(***REMOVED***

    ax1 = plt.subplot2grid((3, 3***REMOVED***, (0, 0***REMOVED******REMOVED***
    ax2 = plt.subplot2grid((3, 3***REMOVED***, (0, 1***REMOVED***, colspan=2***REMOVED***
    ax3 = plt.subplot2grid((3, 3***REMOVED***, (1, 0***REMOVED***, colspan=2, rowspan=2***REMOVED***
    ax4 = plt.subplot2grid((3, 3***REMOVED***, (1, 2***REMOVED***, rowspan=2***REMOVED***

    example_plot(ax1***REMOVED***
    example_plot(ax2***REMOVED***
    example_plot(ax3***REMOVED***
    example_plot(ax4***REMOVED***

    plt.tight_layout(***REMOVED***


@image_comparison(baseline_images=['tight_layout5'***REMOVED******REMOVED***
def test_tight_layout5(***REMOVED***:
    'Test tight_layout for image'

    fig = plt.figure(***REMOVED***

    ax = plt.subplot(111***REMOVED***
    arr = np.arange(100***REMOVED***.reshape((10, 10***REMOVED******REMOVED***
    ax.imshow(arr, interpolation="none"***REMOVED***

    plt.tight_layout(***REMOVED***


@image_comparison(baseline_images=['tight_layout6'***REMOVED******REMOVED***
def test_tight_layout6(***REMOVED***:
    'Test tight_layout for gridspec'

    # This raises warnings since tight layout cannot
    # do this fully automatically. But the test is
    # correct since the layout is manually edited
    with warnings.catch_warnings(***REMOVED***:
        warnings.simplefilter("ignore", UserWarning***REMOVED***
        fig = plt.figure(***REMOVED***

        import matplotlib.gridspec as gridspec

        gs1 = gridspec.GridSpec(2, 1***REMOVED***
        ax1 = fig.add_subplot(gs1[0***REMOVED******REMOVED***
        ax2 = fig.add_subplot(gs1[1***REMOVED******REMOVED***

        example_plot(ax1***REMOVED***
        example_plot(ax2***REMOVED***

        gs1.tight_layout(fig, rect=[0, 0, 0.5, 1***REMOVED******REMOVED***

        gs2 = gridspec.GridSpec(3, 1***REMOVED***

        for ss in gs2:
            ax = fig.add_subplot(ss***REMOVED***
            example_plot(ax***REMOVED***
            ax.set_title(""***REMOVED***
            ax.set_xlabel(""***REMOVED***

        ax.set_xlabel("x-label", fontsize=12***REMOVED***

        gs2.tight_layout(fig, rect=[0.5, 0, 1, 1***REMOVED***, h_pad=0.45***REMOVED***

        top = min(gs1.top, gs2.top***REMOVED***
        bottom = max(gs1.bottom, gs2.bottom***REMOVED***

        gs1.tight_layout(fig, rect=[None, 0 + (bottom-gs1.bottom***REMOVED***,
                                    0.5, 1 - (gs1.top-top***REMOVED******REMOVED******REMOVED***
        gs2.tight_layout(fig, rect=[0.5, 0 + (bottom-gs2.bottom***REMOVED***,
                                    None, 1 - (gs2.top-top***REMOVED******REMOVED***,
                         h_pad=0.45***REMOVED***


@image_comparison(baseline_images=['tight_layout7'***REMOVED******REMOVED***
def test_tight_layout7(***REMOVED***:
    # tight layout with left and right titles
    fig = plt.figure(***REMOVED***
    fontsize = 24
    ax = fig.add_subplot(111***REMOVED***
    ax.plot([1, 2***REMOVED******REMOVED***
    ax.locator_params(nbins=3***REMOVED***
    ax.set_xlabel('x-label', fontsize=fontsize***REMOVED***
    ax.set_ylabel('y-label', fontsize=fontsize***REMOVED***
    ax.set_title('Left Title', loc='left', fontsize=fontsize***REMOVED***
    ax.set_title('Right Title', loc='right', fontsize=fontsize***REMOVED***
    plt.tight_layout(***REMOVED***

@image_comparison(baseline_images=['tight_layout8'***REMOVED******REMOVED***
def test_tight_layout8(***REMOVED***:
    'Test automatic use of tight_layout'
    fig = plt.figure(***REMOVED***
    fig.set_tight_layout({'pad': .1***REMOVED******REMOVED***
    ax = fig.add_subplot(111***REMOVED***
    example_plot(ax, fontsize=24***REMOVED***


def add_offsetboxes(ax, size=10, margin=.1, color='black'***REMOVED***:
    ***REMOVED***
    Surround ax with OffsetBoxes
    ***REMOVED***
    m, mp = margin, 1+margin
    anchor_points = [(-m, -m***REMOVED***, (-m, .5***REMOVED***, (-m, mp***REMOVED***,
                     (mp, .5***REMOVED***, (.5, mp***REMOVED***, (mp, mp***REMOVED***,
                     (.5, -m***REMOVED***, (mp, -m***REMOVED***, (.5, -m***REMOVED******REMOVED***
    for point in anchor_points:
        da = DrawingArea(size, size***REMOVED***
        background = Rectangle((0, 0***REMOVED***, width=size,
                               height=size,
                               facecolor=color,
                               edgecolor='None',
                               linewidth=0,
                               antialiased=False***REMOVED***
        da.add_artist(background***REMOVED***

        anchored_box = AnchoredOffsetbox(
            loc=10,
            child=da,
            pad=0.,
            frameon=False,
            bbox_to_anchor=point,
            bbox_transform=ax.transAxes,
            borderpad=0.***REMOVED***
        ax.add_artist(anchored_box***REMOVED***
    return anchored_box


@image_comparison(baseline_images=['tight_layout_offsetboxes1',
                                   'tight_layout_offsetboxes2'***REMOVED******REMOVED***
def test_tight_layout_offsetboxes(***REMOVED***:
    # 1.
    # - Create 4 subplots
    # - Plot a diagonal line on them
    # - Surround each plot with 7 boxes
    # - Use tight_layout
    # - See that the squares are included in the tight_layout
    #   and that the squares in the middle do not overlap
    #
    # 2.
    # - Make the squares around the right side axes invisible
    # - See that the invisible squares do not affect the
    #   tight_layout
    rows = cols = 2
    colors = ['red', 'blue', 'green', 'yellow'***REMOVED***
    x = y = [0, 1***REMOVED***

    def _subplots(***REMOVED***:
        _, axs = plt.subplots(rows, cols***REMOVED***
        axs = axs.flat
        for ax, color in zip(axs, colors***REMOVED***:
            ax.plot(x, y, color=color***REMOVED***
            add_offsetboxes(ax, 20, color=color***REMOVED***
        return axs

    # 1.
    axs = _subplots(***REMOVED***
    plt.tight_layout(***REMOVED***

    # 2.
    axs = _subplots(***REMOVED***
    for ax in (axs[cols-1::rows***REMOVED******REMOVED***:
        for child in ax.get_children(***REMOVED***:
            if isinstance(child, AnchoredOffsetbox***REMOVED***:
                child.set_visible(False***REMOVED***

    plt.tight_layout(***REMOVED***
