from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six

import numpy as np

from matplotlib.path import Path
from matplotlib.patches import Polygon
from nose.tools import assert_raises, assert_equal
from matplotlib.testing.decorators import image_comparison
import matplotlib.pyplot as plt
from matplotlib import transforms


def test_readonly_path(***REMOVED***:
    path = Path.unit_circle(***REMOVED***

    def modify_vertices(***REMOVED***:
        path.vertices = path.vertices * 2.0

    assert_raises(AttributeError, modify_vertices***REMOVED***


def test_point_in_path(***REMOVED***:
    # Test #1787
    verts2 = [(0, 0***REMOVED***, (0, 1***REMOVED***, (1, 1***REMOVED***, (1, 0***REMOVED***, (0, 0***REMOVED******REMOVED***

    path = Path(verts2, closed=True***REMOVED***
    points = [(0.5, 0.5***REMOVED***, (1.5, 0.5***REMOVED******REMOVED***
    ret = path.contains_points(points***REMOVED***
    assert ret.dtype == 'bool'
    assert np.all(ret == [True, False***REMOVED******REMOVED***


def test_contains_points_negative_radius(***REMOVED***:
    path = Path.unit_circle(***REMOVED***

    points = [(0.0, 0.0***REMOVED***, (1.25, 0.0***REMOVED***, (0.9, 0.9***REMOVED******REMOVED***
    expected = [True, False, False***REMOVED***
    result = path.contains_points(points, radius=-0.5***REMOVED***

    assert np.all(result == expected***REMOVED***


@image_comparison(baseline_images=['path_clipping'***REMOVED***,
                  extensions=['svg'***REMOVED***, remove_text=True***REMOVED***
def test_path_clipping(***REMOVED***:
    fig = plt.figure(figsize=(6.0, 6.2***REMOVED******REMOVED***

    for i, xy in enumerate([
            [(200, 200***REMOVED***, (200, 350***REMOVED***, (400, 350***REMOVED***, (400, 200***REMOVED******REMOVED***,
            [(200, 200***REMOVED***, (200, 350***REMOVED***, (400, 350***REMOVED***, (400, 100***REMOVED******REMOVED***,
            [(200, 100***REMOVED***, (200, 350***REMOVED***, (400, 350***REMOVED***, (400, 100***REMOVED******REMOVED***,
            [(200, 100***REMOVED***, (200, 415***REMOVED***, (400, 350***REMOVED***, (400, 100***REMOVED******REMOVED***,
            [(200, 100***REMOVED***, (200, 415***REMOVED***, (400, 415***REMOVED***, (400, 100***REMOVED******REMOVED***,
            [(200, 415***REMOVED***, (400, 415***REMOVED***, (400, 100***REMOVED***, (200, 100***REMOVED******REMOVED***,
            [(400, 415***REMOVED***, (400, 100***REMOVED***, (200, 100***REMOVED***, (200, 415***REMOVED******REMOVED******REMOVED******REMOVED***:
        ax = fig.add_subplot(4, 2, i+1***REMOVED***
        bbox = [0, 140, 640, 260***REMOVED***
        ax.set_xlim(bbox[0***REMOVED***, bbox[0***REMOVED*** + bbox[2***REMOVED******REMOVED***
        ax.set_ylim(bbox[1***REMOVED***, bbox[1***REMOVED*** + bbox[3***REMOVED******REMOVED***
        ax.add_patch(Polygon(
            xy, facecolor='none', edgecolor='red', closed=True***REMOVED******REMOVED***


def test_point_in_path_nan(***REMOVED***:
    box = np.array([[0, 0***REMOVED***, [1, 0***REMOVED***, [1, 1***REMOVED***, [0, 1***REMOVED***, [0, 0***REMOVED******REMOVED******REMOVED***
    p = Path(box***REMOVED***
    test = np.array([[np.nan, 0.5***REMOVED******REMOVED******REMOVED***
    contains = p.contains_points(test***REMOVED***
    assert len(contains***REMOVED*** == 1
    assert not contains[0***REMOVED***


@image_comparison(baseline_images=['semi_log_with_zero'***REMOVED***, extensions=['png'***REMOVED******REMOVED***
def test_log_transform_with_zero(***REMOVED***:
    x = np.arange(-10, 10***REMOVED***
    y = (1.0 - 1.0/(x**2+1***REMOVED******REMOVED*****20

    fig, ax = plt.subplots(***REMOVED***
    ax.semilogy(x, y, "-o", lw=15***REMOVED***
    ax.grid(True***REMOVED***


def test_make_compound_path_empty(***REMOVED***:
    # We should be able to make a compound path with no arguments.
    # This makes it easier to write generic path based code.
    r = Path.make_compound_path(***REMOVED***
    assert_equal(r.vertices.shape, (0, 2***REMOVED******REMOVED***


@image_comparison(baseline_images=['xkcd'***REMOVED***, remove_text=True***REMOVED***
def test_xkcd(***REMOVED***:
    x = np.linspace(0, 2.0 * np.pi, 100.0***REMOVED***
    y = np.sin(x***REMOVED***

    with plt.xkcd(***REMOVED***:
        fig, ax = plt.subplots(***REMOVED***
        ax.plot(x, y***REMOVED***


@image_comparison(baseline_images=['marker_paths'***REMOVED***, extensions=['pdf'***REMOVED***,
                  remove_text=True***REMOVED***
def test_marker_paths_pdf(***REMOVED***:
    N = 7

    plt.errorbar(np.arange(N***REMOVED***,
                 np.ones(N***REMOVED*** + 4,
                 np.ones(N***REMOVED******REMOVED***
    plt.xlim(-1, N***REMOVED***
    plt.ylim(-1, 7***REMOVED***


def test_path_no_doubled_point_in_to_polygon(***REMOVED***:
    hand = np.array(
        [[1.64516129, 1.16145833***REMOVED***,
         [1.64516129, 1.59375***REMOVED***,
         [1.35080645, 1.921875***REMOVED***,
         [1.375, 2.18229167***REMOVED***,
         [1.68548387, 1.9375***REMOVED***,
         [1.60887097, 2.55208333***REMOVED***,
         [1.68548387, 2.69791667***REMOVED***,
         [1.76209677, 2.56770833***REMOVED***,
         [1.83064516, 1.97395833***REMOVED***,
         [1.89516129, 2.75***REMOVED***,
         [1.9516129, 2.84895833***REMOVED***,
         [2.01209677, 2.76041667***REMOVED***,
         [1.99193548, 1.99479167***REMOVED***,
         [2.11290323, 2.63020833***REMOVED***,
         [2.2016129, 2.734375***REMOVED***,
         [2.25403226, 2.60416667***REMOVED***,
         [2.14919355, 1.953125***REMOVED***,
         [2.30645161, 2.36979167***REMOVED***,
         [2.39112903, 2.36979167***REMOVED***,
         [2.41532258, 2.1875***REMOVED***,
         [2.1733871, 1.703125***REMOVED***,
         [2.07782258, 1.16666667***REMOVED******REMOVED******REMOVED***

    (r0, c0, r1, c1***REMOVED*** = (1.0, 1.5, 2.1, 2.5***REMOVED***

    poly = Path(np.vstack((hand[:, 1***REMOVED***, hand[:, 0***REMOVED******REMOVED******REMOVED***.T, closed=True***REMOVED***
    clip_rect = transforms.Bbox([[r0, c0***REMOVED***, [r1, c1***REMOVED******REMOVED******REMOVED***
    poly_clipped = poly.clip_to_bbox(clip_rect***REMOVED***.to_polygons(***REMOVED***[0***REMOVED***

    assert np.all(poly_clipped[-2***REMOVED*** != poly_clipped[-1***REMOVED******REMOVED***
    assert np.all(poly_clipped[-1***REMOVED*** == poly_clipped[0***REMOVED******REMOVED***


if __name__ == '__main__':
    import nose
    nose.runmodule(argv=['-s', '--with-doctest'***REMOVED***, exit=False***REMOVED***
