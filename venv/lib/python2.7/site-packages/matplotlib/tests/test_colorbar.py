from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six

import numpy as np
from numpy import ma
import matplotlib
from matplotlib import rc_context
from matplotlib.testing.decorators import image_comparison, cleanup
import matplotlib.pyplot as plt
from matplotlib import rcParams
from matplotlib.colors import BoundaryNorm
from matplotlib.cm import get_cmap
from matplotlib import cm
from matplotlib.colorbar import ColorbarBase


def _get_cmap_norms(***REMOVED***:
    ***REMOVED***
    Define a colormap and appropriate norms for each of the four
    possible settings of the extend keyword.

    Helper function for _colorbar_extension_shape and
    colorbar_extension_length.
    ***REMOVED***
    # Create a color map and specify the levels it represents.
    cmap = get_cmap("RdBu", lut=5***REMOVED***
    clevs = [-5., -2.5, -.5, .5, 1.5, 3.5***REMOVED***
    # Define norms for the color maps.
    norms = dict(***REMOVED***
    norms['neither'***REMOVED*** = BoundaryNorm(clevs, len(clevs***REMOVED*** - 1***REMOVED***
    norms['min'***REMOVED*** = BoundaryNorm([-10***REMOVED*** + clevs[1:***REMOVED***, len(clevs***REMOVED*** - 1***REMOVED***
    norms['max'***REMOVED*** = BoundaryNorm(clevs[:-1***REMOVED*** + [10***REMOVED***, len(clevs***REMOVED*** - 1***REMOVED***
    norms['both'***REMOVED*** = BoundaryNorm([-10***REMOVED*** + clevs[1:-1***REMOVED*** + [10***REMOVED***, len(clevs***REMOVED*** - 1***REMOVED***
    return cmap, norms


def _colorbar_extension_shape(spacing***REMOVED***:
    '''
    Produce 4 colorbars with rectangular extensions for either uniform
    or proportional spacing.

    Helper function for test_colorbar_extension_shape.
    '''
    # Get a colormap and appropriate norms for each extension type.
    cmap, norms = _get_cmap_norms(***REMOVED***
    # Create a figure and adjust whitespace for subplots.
    fig = plt.figure(***REMOVED***
    fig.subplots_adjust(hspace=4***REMOVED***
    for i, extension_type in enumerate(('neither', 'min', 'max', 'both'***REMOVED******REMOVED***:
        # Get the appropriate norm and use it to get colorbar boundaries.
        norm = norms[extension_type***REMOVED***
        boundaries = values = norm.boundaries
        # Create a subplot.
        cax = fig.add_subplot(4, 1, i + 1***REMOVED***
        # Turn off text and ticks.
        for item in cax.get_xticklabels(***REMOVED*** + cax.get_yticklabels(***REMOVED*** +\
                cax.get_xticklines(***REMOVED*** + cax.get_yticklines(***REMOVED***:
            item.set_visible(False***REMOVED***
        # Generate the colorbar.
        cb = ColorbarBase(cax, cmap=cmap, norm=norm,
                boundaries=boundaries, values=values,
                extend=extension_type, extendrect=True,
                orientation='horizontal', spacing=spacing***REMOVED***
    # Return the figure to the caller.
    return fig


def _colorbar_extension_length(spacing***REMOVED***:
    '''
    Produce 12 colorbars with variable length extensions for either
    uniform or proportional spacing.

    Helper function for test_colorbar_extension_length.
    '''
    # Get a colormap and appropriate norms for each extension type.
    cmap, norms = _get_cmap_norms(***REMOVED***
    # Create a figure and adjust whitespace for subplots.
    fig = plt.figure(***REMOVED***
    fig.subplots_adjust(hspace=.6***REMOVED***
    for i, extension_type in enumerate(('neither', 'min', 'max', 'both'***REMOVED******REMOVED***:
        # Get the appropriate norm and use it to get colorbar boundaries.
        norm = norms[extension_type***REMOVED***
        boundaries = values = norm.boundaries
        for j, extendfrac in enumerate((None, 'auto', 0.1***REMOVED******REMOVED***:
            # Create a subplot.
            cax = fig.add_subplot(12, 1, i*3 + j + 1***REMOVED***
            # Turn off text and ticks.
            for item in cax.get_xticklabels(***REMOVED*** + cax.get_yticklabels(***REMOVED*** +\
                    cax.get_xticklines(***REMOVED*** + cax.get_yticklines(***REMOVED***:
                item.set_visible(False***REMOVED***
            # Generate the colorbar.
            cb = ColorbarBase(cax, cmap=cmap, norm=norm,
                    boundaries=boundaries, values=values,
                    extend=extension_type, extendfrac=extendfrac,
                    orientation='horizontal', spacing=spacing***REMOVED***
    # Return the figure to the caller.
    return fig


@image_comparison(
        baseline_images=['colorbar_extensions_shape_uniform',
                         'colorbar_extensions_shape_proportional'***REMOVED***,
        extensions=['png'***REMOVED******REMOVED***
def test_colorbar_extension_shape(***REMOVED***:
    '''Test rectangular colorbar extensions.'''
    # Create figures for uniform and proportionally spaced colorbars.
    fig1 = _colorbar_extension_shape('uniform'***REMOVED***
    fig2 = _colorbar_extension_shape('proportional'***REMOVED***


@image_comparison(baseline_images=['colorbar_extensions_uniform',
                                   'colorbar_extensions_proportional'***REMOVED***,
                  extensions=['png'***REMOVED******REMOVED***
def test_colorbar_extension_length(***REMOVED***:
    '''Test variable length colorbar extensions.'''
    # Create figures for uniform and proportionally spaced colorbars.
    fig1 = _colorbar_extension_length('uniform'***REMOVED***
    fig2 = _colorbar_extension_length('proportional'***REMOVED***


@image_comparison(baseline_images=['cbar_with_orientation',
                                   'cbar_locationing',
                                   'double_cbar',
                                   'cbar_sharing',
                                   ***REMOVED***,
                  extensions=['png'***REMOVED***, remove_text=True,
                  savefig_kwarg={'dpi': 40***REMOVED******REMOVED***
def test_colorbar_positioning(***REMOVED***:
    data = np.arange(1200***REMOVED***.reshape(30, 40***REMOVED***
    levels = [0, 200, 400, 600, 800, 1000, 1200***REMOVED***

    # -------------------
    plt.figure(***REMOVED***
    plt.contourf(data, levels=levels***REMOVED***
    plt.colorbar(orientation='horizontal', use_gridspec=False***REMOVED***

    locations = ['left', 'right', 'top', 'bottom'***REMOVED***
    plt.figure(***REMOVED***
    for i, location in enumerate(locations***REMOVED***:
        plt.subplot(2, 2, i + 1***REMOVED***
        plt.contourf(data, levels=levels***REMOVED***
        plt.colorbar(location=location, use_gridspec=False***REMOVED***

    # -------------------
    plt.figure(***REMOVED***
    # make some other data (random integers***REMOVED***
    data_2nd = np.array([[2, 3, 2, 3***REMOVED***, [1.5, 2, 2, 3***REMOVED***, [2, 3, 3, 4***REMOVED******REMOVED******REMOVED***
    # make the random data expand to the shape of the main data
    data_2nd = np.repeat(np.repeat(data_2nd, 10, axis=1***REMOVED***, 10, axis=0***REMOVED***

    color_mappable = plt.contourf(data, levels=levels, extend='both'***REMOVED***
    # test extend frac here
    hatch_mappable = plt.contourf(data_2nd, levels=[1, 2, 3***REMOVED***, colors='none',
                                  hatches=['/', 'o', '+'***REMOVED***, extend='max'***REMOVED***
    plt.contour(hatch_mappable, colors='black'***REMOVED***

    plt.colorbar(color_mappable, location='left', label='variable 1',
                 use_gridspec=False***REMOVED***
    plt.colorbar(hatch_mappable, location='right', label='variable 2',
                 use_gridspec=False***REMOVED***

    # -------------------
    plt.figure(***REMOVED***
    ax1 = plt.subplot(211, anchor='NE', aspect='equal'***REMOVED***
    plt.contourf(data, levels=levels***REMOVED***
    ax2 = plt.subplot(223***REMOVED***
    plt.contourf(data, levels=levels***REMOVED***
    ax3 = plt.subplot(224***REMOVED***
    plt.contourf(data, levels=levels***REMOVED***

    plt.colorbar(ax=[ax2, ax3, ax1***REMOVED***, location='right', pad=0.0, shrink=0.5,
                 panchor=False, use_gridspec=False***REMOVED***
    plt.colorbar(ax=[ax2, ax3, ax1***REMOVED***, location='left', shrink=0.5,
                 panchor=False, use_gridspec=False***REMOVED***
    plt.colorbar(ax=[ax1***REMOVED***, location='bottom', panchor=False,
                 anchor=(0.8, 0.5***REMOVED***, shrink=0.6, use_gridspec=False***REMOVED***


@image_comparison(baseline_images=['cbar_with_subplots_adjust'***REMOVED***,
                  extensions=['png'***REMOVED***, remove_text=True,
                  savefig_kwarg={'dpi': 40***REMOVED******REMOVED***
def test_gridspec_make_colorbar(***REMOVED***:
    plt.figure(***REMOVED***
    data = np.arange(1200***REMOVED***.reshape(30, 40***REMOVED***
    levels = [0, 200, 400, 600, 800, 1000, 1200***REMOVED***

    plt.subplot(121***REMOVED***
    plt.contourf(data, levels=levels***REMOVED***
    plt.colorbar(use_gridspec=True, orientation='vertical'***REMOVED***

    plt.subplot(122***REMOVED***
    plt.contourf(data, levels=levels***REMOVED***
    plt.colorbar(use_gridspec=True, orientation='horizontal'***REMOVED***

    plt.subplots_adjust(top=0.95, right=0.95, bottom=0.2, hspace=0.25***REMOVED***


@image_comparison(baseline_images=['colorbar_single_scatter'***REMOVED***,
                  extensions=['png'***REMOVED***, remove_text=True,
                  savefig_kwarg={'dpi': 40***REMOVED******REMOVED***
def test_colorbar_single_scatter(***REMOVED***:
    # Issue #2642: if a path collection has only one entry,
    # the norm scaling within the colorbar must ensure a
    # finite range, otherwise a zero denominator will occur in _locate.
    plt.figure(***REMOVED***
    x = np.arange(4***REMOVED***
    y = x.copy(***REMOVED***
    z = np.ma.masked_greater(np.arange(50, 54***REMOVED***, 50***REMOVED***
    cmap = plt.get_cmap('jet', 16***REMOVED***
    cs = plt.scatter(x, y, z, c=z, cmap=cmap***REMOVED***
    plt.colorbar(cs***REMOVED***


def _test_remove_from_figure(use_gridspec***REMOVED***:
    ***REMOVED***
    Test `remove_from_figure` with the specified ``use_gridspec`` setting
    ***REMOVED***
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(111***REMOVED***
    sc = ax.scatter([1, 2***REMOVED***, [3, 4***REMOVED***, cmap="spring"***REMOVED***
    sc.set_array(np.array([5, 6***REMOVED******REMOVED******REMOVED***
    pre_figbox = np.array(ax.figbox***REMOVED***
    cb = fig.colorbar(sc, use_gridspec=use_gridspec***REMOVED***
    fig.subplots_adjust(***REMOVED***
    cb.remove(***REMOVED***
    fig.subplots_adjust(***REMOVED***
    post_figbox = np.array(ax.figbox***REMOVED***
    assert (pre_figbox == post_figbox***REMOVED***.all(***REMOVED***


@cleanup
def test_remove_from_figure_with_gridspec(***REMOVED***:
    ***REMOVED***
    Make sure that `remove_from_figure` removes the colorbar and properly
    restores the gridspec
    ***REMOVED***
    _test_remove_from_figure(True***REMOVED***


@cleanup
def test_remove_from_figure_no_gridspec(***REMOVED***:
    ***REMOVED***
    Make sure that `remove_from_figure` removes a colorbar that was created
    without modifying the gridspec
    ***REMOVED***
    _test_remove_from_figure(False***REMOVED***


@cleanup
def test_colorbarbase(***REMOVED***:
    # smoke test from #3805
    ax = plt.gca(***REMOVED***
    ColorbarBase(ax, plt.cm.bone***REMOVED***


@image_comparison(
    baseline_images=['colorbar_closed_patch'***REMOVED***,
    remove_text=True***REMOVED***
def test_colorbar_closed_patch(***REMOVED***:
    fig = plt.figure(figsize=(8, 6***REMOVED******REMOVED***
    ax1 = fig.add_axes([0.05, 0.85, 0.9, 0.1***REMOVED******REMOVED***
    ax2 = fig.add_axes([0.1, 0.65, 0.75, 0.1***REMOVED******REMOVED***
    ax3 = fig.add_axes([0.05, 0.45, 0.9, 0.1***REMOVED******REMOVED***
    ax4 = fig.add_axes([0.05, 0.25, 0.9, 0.1***REMOVED******REMOVED***
    ax5 = fig.add_axes([0.05, 0.05, 0.9, 0.1***REMOVED******REMOVED***

    cmap = get_cmap("RdBu", lut=5***REMOVED***

    im = ax1.pcolormesh(np.linspace(0, 10, 16***REMOVED***.reshape((4, 4***REMOVED******REMOVED***, cmap=cmap***REMOVED***
    values = np.linspace(0, 10, 5***REMOVED***

    with rc_context({'axes.linewidth': 16***REMOVED******REMOVED***:
        plt.colorbar(im, cax=ax2, cmap=cmap, orientation='horizontal',
                     extend='both', extendfrac=0.5, values=values***REMOVED***
        plt.colorbar(im, cax=ax3, cmap=cmap, orientation='horizontal',
                     extend='both', values=values***REMOVED***
        plt.colorbar(im, cax=ax4, cmap=cmap, orientation='horizontal',
                     extend='both', extendrect=True, values=values***REMOVED***
        plt.colorbar(im, cax=ax5, cmap=cmap, orientation='horizontal',
                     extend='neither', values=values***REMOVED***


@cleanup
def test_colorbar_ticks(***REMOVED***:
    # test fix for #5673
    fig, ax = plt.subplots(***REMOVED***
    x = np.arange(-3.0, 4.001***REMOVED***
    y = np.arange(-4.0, 3.001***REMOVED***
    X, Y = np.meshgrid(x, y***REMOVED***
    Z = X * Y
    clevs = np.array([-12, -5, 0, 5, 12***REMOVED***, dtype=float***REMOVED***
    colors = ['r', 'g', 'b', 'c'***REMOVED***
    cs = ax.contourf(X, Y, Z, clevs, colors=colors***REMOVED***
    cbar = fig.colorbar(cs, ax=ax, extend='neither',
                        orientation='horizontal', ticks=clevs***REMOVED***
    assert len(cbar.ax.xaxis.get_ticklocs(***REMOVED******REMOVED*** == len(clevs***REMOVED***


if __name__ == '__main__':
    import nose
    nose.runmodule(argv=['-s', '--with-doctest'***REMOVED***, exit=False***REMOVED***
