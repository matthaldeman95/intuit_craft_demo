from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six

import numpy as np

from matplotlib.testing.decorators import (image_comparison, cleanup,
                                           knownfailureif***REMOVED***
import matplotlib.pyplot as plt
import matplotlib.patheffects as path_effects

***REMOVED***
    # mock in python 3.3+
    from unittest import mock
except ImportError:
    import mock
from nose.tools import assert_equal


@image_comparison(baseline_images=['patheffect1'***REMOVED***, remove_text=True***REMOVED***
def test_patheffect1(***REMOVED***:
    ax1 = plt.subplot(111***REMOVED***
    ax1.imshow([[1, 2***REMOVED***, [2, 3***REMOVED******REMOVED******REMOVED***
    txt = ax1.annotate("test", (1., 1.***REMOVED***, (0., 0***REMOVED***,
                       arrowprops=dict(arrowstyle="->",
                                       connectionstyle="angle3", lw=2***REMOVED***,
                       size=20, ha="center",
                       path_effects=[path_effects.withStroke(linewidth=3,
                                                             foreground="w"***REMOVED******REMOVED******REMOVED***
    txt.arrow_patch.set_path_effects([path_effects.Stroke(linewidth=5,
                                                          foreground="w"***REMOVED***,
                                      path_effects.Normal(***REMOVED******REMOVED******REMOVED***

    ax1.grid(True, linestyle="-"***REMOVED***

    pe = [path_effects.withStroke(linewidth=3, foreground="w"***REMOVED******REMOVED***
    for l in ax1.get_xgridlines(***REMOVED*** + ax1.get_ygridlines(***REMOVED***:
        l.set_path_effects(pe***REMOVED***


@image_comparison(baseline_images=['patheffect2'***REMOVED***, remove_text=True***REMOVED***
def test_patheffect2(***REMOVED***:

    ax2 = plt.subplot(111***REMOVED***
    arr = np.arange(25***REMOVED***.reshape((5, 5***REMOVED******REMOVED***
    ax2.imshow(arr***REMOVED***
    cntr = ax2.contour(arr, colors="k"***REMOVED***

    plt.setp(cntr.collections,
             path_effects=[path_effects.withStroke(linewidth=3,
                                                   foreground="w"***REMOVED******REMOVED******REMOVED***

    clbls = ax2.clabel(cntr, fmt="%2.0f", use_clabeltext=True***REMOVED***
    plt.setp(clbls,
             path_effects=[path_effects.withStroke(linewidth=3,
                                                   foreground="w"***REMOVED******REMOVED******REMOVED***


@image_comparison(baseline_images=['patheffect3'***REMOVED******REMOVED***
def test_patheffect3(***REMOVED***:
    p1, = plt.plot([1, 3, 5, 4, 3***REMOVED***, 'o-b', lw=4***REMOVED***
    p1.set_path_effects([path_effects.SimpleLineShadow(***REMOVED***,
                         path_effects.Normal(***REMOVED******REMOVED******REMOVED***
    plt.title(r'testing$^{123***REMOVED***$',
        path_effects=[path_effects.withStroke(linewidth=1, foreground="r"***REMOVED******REMOVED******REMOVED***
    leg = plt.legend([p1***REMOVED***, [r'Line 1$^2$'***REMOVED***, fancybox=True, loc=2***REMOVED***
    leg.legendPatch.set_path_effects([path_effects.withSimplePatchShadow(***REMOVED******REMOVED******REMOVED***

    text = plt.text(2, 3, 'Drop test', color='white',
                    bbox={'boxstyle': 'circle,pad=0.1', 'color': 'red'***REMOVED******REMOVED***
    pe = [path_effects.Stroke(linewidth=3.75, foreground='k'***REMOVED***,
          path_effects.withSimplePatchShadow((6, -3***REMOVED***, shadow_rgbFace='blue'***REMOVED******REMOVED***
    text.set_path_effects(pe***REMOVED***
    text.get_bbox_patch(***REMOVED***.set_path_effects(pe***REMOVED***

    pe = [path_effects.PathPatchEffect(offset=(4, -4***REMOVED***, hatch='xxxx',
                                       facecolor='gray'***REMOVED***,
          path_effects.PathPatchEffect(edgecolor='white', facecolor='black',
                                       lw=1.1***REMOVED******REMOVED***

    t = plt.gcf(***REMOVED***.text(0.02, 0.1, 'Hatch shadow', fontsize=75, weight=1000,
                       va='center'***REMOVED***
    t.set_path_effects(pe***REMOVED***


@cleanup
@knownfailureif(True***REMOVED***
def test_PathEffect_points_to_pixels(***REMOVED***:
    fig = plt.figure(dpi=150***REMOVED***
    p1, = plt.plot(range(10***REMOVED******REMOVED***
    p1.set_path_effects([path_effects.SimpleLineShadow(***REMOVED***,
                         path_effects.Normal(***REMOVED******REMOVED******REMOVED***

    renderer = fig.canvas.get_renderer(***REMOVED***
    pe_renderer = path_effects.SimpleLineShadow(***REMOVED***.get_proxy_renderer(renderer***REMOVED***

    assert isinstance(pe_renderer, path_effects.PathEffectRenderer***REMOVED***, (
                'Expected a PathEffectRendere instance, got '
                'a {0***REMOVED*** instance.'.format(type(pe_renderer***REMOVED******REMOVED******REMOVED***

    # Confirm that using a path effects renderer maintains point sizes
    # appropriately. Otherwise rendered font would be the wrong size.
    assert_equal(renderer.points_to_pixels(15***REMOVED***,
                 pe_renderer.points_to_pixels(15***REMOVED******REMOVED***


def test_SimplePatchShadow_offset(***REMOVED***:
    pe = path_effects.SimplePatchShadow(offset=(4, 5***REMOVED******REMOVED***
    assert_equal(pe._offset, (4, 5***REMOVED******REMOVED***


@image_comparison(baseline_images=['collection'***REMOVED******REMOVED***
def test_collection(***REMOVED***:
    x, y = np.meshgrid(np.linspace(0, 10, 150***REMOVED***, np.linspace(-5, 5, 100***REMOVED******REMOVED***
    data = np.sin(x***REMOVED*** + np.cos(y***REMOVED***
    cs = plt.contour(data***REMOVED***
    pe = [path_effects.PathPatchEffect(edgecolor='black', facecolor='none',
                                       linewidth=12***REMOVED***,
          path_effects.Stroke(linewidth=5***REMOVED******REMOVED***

    for collection in cs.collections:
        collection.set_path_effects(pe***REMOVED***

    for text in plt.clabel(cs, colors='white'***REMOVED***:
        text.set_path_effects([path_effects.withStroke(foreground='k',
                                                       linewidth=3***REMOVED******REMOVED******REMOVED***
        text.set_bbox({'boxstyle': 'sawtooth', 'facecolor': 'none',
                       'edgecolor': 'blue'***REMOVED******REMOVED***


if __name__ == '__main__':
    import nose
    nose.runmodule(argv=['-s', '--with-doctest'***REMOVED***, exit=False***REMOVED***
