from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six

***REMOVED***
Core functions and attributes for the matplotlib style library:

``use``
    Select style sheet to override the current matplotlib settings.
``context``
    Context manager to use a style sheet temporarily.
``available``
    List available style sheets.
``library``
    A dictionary of style names and matplotlib settings.
***REMOVED***
***REMOVED***
import re
import contextlib

import matplotlib as mpl
from matplotlib import cbook
from matplotlib import rc_params_from_file


__all__ = ['use', 'context', 'available', 'library', 'reload_library'***REMOVED***


BASE_LIBRARY_PATH = os.path.join(mpl.get_data_path(***REMOVED***, 'stylelib'***REMOVED***
# Users may want multiple library paths, so store a list of paths.
USER_LIBRARY_PATHS = [os.path.join(mpl._get_configdir(***REMOVED***, 'stylelib'***REMOVED******REMOVED***
STYLE_EXTENSION = 'mplstyle'
STYLE_FILE_PATTERN = re.compile('([\S***REMOVED***+***REMOVED***.%s$' % STYLE_EXTENSION***REMOVED***


def is_style_file(filename***REMOVED***:
    ***REMOVED***Return True if the filename looks like a style file.***REMOVED***
    return STYLE_FILE_PATTERN.match(filename***REMOVED*** is not None


def use(style***REMOVED***:
    ***REMOVED***Use matplotlib style settings from a style specification.

    The style name of 'default' is reserved for reverting back to
    the default style settings.

    Parameters
    ----------
    style : str, dict, or list
        A style specification. Valid options are:

        +------+-------------------------------------------------------------+
        | str  | The name of a style or a path/URL to a style file. For a    |
        |      | list of available style names, see `style.available`.       |
        +------+-------------------------------------------------------------+
        | dict | Dictionary with valid key/value pairs for                   |
        |      | `matplotlib.rcParams`.                                      |
        +------+-------------------------------------------------------------+
        | list | A list of style specifiers (str or dict***REMOVED*** applied from first |
        |      | to last in the list.                                        |
        +------+-------------------------------------------------------------+


    ***REMOVED***
    if cbook.is_string_like(style***REMOVED*** or hasattr(style, 'keys'***REMOVED***:
        # If name is a single str or dict, make it a single element list.
        styles = [style***REMOVED***
    else:
        styles = style

    for style in styles:
        if not cbook.is_string_like(style***REMOVED***:
            mpl.rcParams.update(style***REMOVED***
            continue
        elif style == 'default':
            mpl.rcdefaults(***REMOVED***
            continue

        if style in library:
            mpl.rcParams.update(library[style***REMOVED******REMOVED***
        else:
            ***REMOVED***
                rc = rc_params_from_file(style, use_default_template=False***REMOVED***
                mpl.rcParams.update(rc***REMOVED***
            except IOError:
                msg = ("'%s' not found in the style library and input is "
                       "not a valid URL or path. See `style.available` for "
                       "list of available styles."***REMOVED***
                raise IOError(msg % style***REMOVED***


@contextlib.contextmanager
def context(style, after_reset=False***REMOVED***:
    ***REMOVED***Context manager for using style settings temporarily.

    Parameters
    ----------
    style : str, dict, or list
        A style specification. Valid options are:

        +------+-------------------------------------------------------------+
        | str  | The name of a style or a path/URL to a style file. For a    |
        |      | list of available style names, see `style.available`.       |
        +------+-------------------------------------------------------------+
        | dict | Dictionary with valid key/value pairs for                   |
        |      | `matplotlib.rcParams`.                                      |
        +------+-------------------------------------------------------------+
        | list | A list of style specifiers (str or dict***REMOVED*** applied from first |
        |      | to last in the list.                                        |
        +------+-------------------------------------------------------------+

    after_reset : bool
        If True, apply style after resetting settings to their defaults;
        otherwise, apply style on top of the current settings.
    ***REMOVED***
    initial_settings = mpl.rcParams.copy(***REMOVED***
    if after_reset:
        mpl.rcdefaults(***REMOVED***
    ***REMOVED***
        use(style***REMOVED***
    ***REMOVED***
        # Restore original settings before raising errors during the update.
        mpl.rcParams.update(initial_settings***REMOVED***
        raise
    else:
        yield
    finally:
        mpl.rcParams.update(initial_settings***REMOVED***


def load_base_library(***REMOVED***:
    ***REMOVED***Load style library defined in this package.***REMOVED***
    library = dict(***REMOVED***
    library.update(read_style_directory(BASE_LIBRARY_PATH***REMOVED******REMOVED***
    return library


def iter_user_libraries(***REMOVED***:
    for stylelib_path in USER_LIBRARY_PATHS:
        stylelib_path = os.path.expanduser(stylelib_path***REMOVED***
        if os.path.exists(stylelib_path***REMOVED*** and os.path.isdir(stylelib_path***REMOVED***:
            yield stylelib_path


def update_user_library(library***REMOVED***:
    ***REMOVED***Update style library with user-defined rc files***REMOVED***
    for stylelib_path in iter_user_libraries(***REMOVED***:
        styles = read_style_directory(stylelib_path***REMOVED***
        update_nested_dict(library, styles***REMOVED***
    return library


def iter_style_files(style_dir***REMOVED***:
    ***REMOVED***Yield file path and name of styles in the given directory.***REMOVED***
    for path in os.listdir(style_dir***REMOVED***:
        filename = os.path.basename(path***REMOVED***
        if is_style_file(filename***REMOVED***:
            match = STYLE_FILE_PATTERN.match(filename***REMOVED***
            path = os.path.abspath(os.path.join(style_dir, path***REMOVED******REMOVED***
            yield path, match.groups(***REMOVED***[0***REMOVED***


def read_style_directory(style_dir***REMOVED***:
    ***REMOVED***Return dictionary of styles defined in `style_dir`.***REMOVED***
    styles = dict(***REMOVED***
    for path, name in iter_style_files(style_dir***REMOVED***:
        styles[name***REMOVED*** = rc_params_from_file(path, use_default_template=False***REMOVED***
    return styles


def update_nested_dict(main_dict, new_dict***REMOVED***:
    ***REMOVED***Update nested dict (only level of nesting***REMOVED*** with new values.

    Unlike dict.update, this assumes that the values of the parent dict are
    dicts (or dict-like***REMOVED***, so you shouldn't replace the nested dict if it
    already exists. Instead you should update the sub-dict.
    ***REMOVED***
    # update named styles specified by user
    for name, rc_dict in six.iteritems(new_dict***REMOVED***:
        if name in main_dict:
            main_dict[name***REMOVED***.update(rc_dict***REMOVED***
        else:
            main_dict[name***REMOVED*** = rc_dict
    return main_dict


# Load style library
# ==================
_base_library = load_base_library(***REMOVED***

library = None
available = [***REMOVED***


def reload_library(***REMOVED***:
    ***REMOVED***Reload style library.***REMOVED***
    global library, available
    library = update_user_library(_base_library***REMOVED***
    available[:***REMOVED*** = library.keys(***REMOVED***
reload_library(***REMOVED***
