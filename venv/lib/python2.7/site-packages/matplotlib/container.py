from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six

import matplotlib.cbook as cbook
import matplotlib.artist as martist


class Container(tuple***REMOVED***:
    ***REMOVED***
    Base class for containers.
    ***REMOVED***

    def __repr__(self***REMOVED***:
        return "<Container object of %d artists>" % (len(self***REMOVED******REMOVED***

    def __new__(cls, *kl, **kwargs***REMOVED***:
        return tuple.__new__(cls, kl[0***REMOVED******REMOVED***

    def __init__(self, kl, label=None***REMOVED***:

        self.eventson = False  # fire events only if eventson
        self._oid = 0  # an observer id
        self._propobservers = {***REMOVED***  # a dict from oids to funcs

        self._remove_method = None

        self.set_label(label***REMOVED***

    def set_remove_method(self, f***REMOVED***:
        self._remove_method = f

    def remove(self***REMOVED***:
        for c in cbook.flatten(self,
                               scalarp=lambda x: isinstance(x,
                                                            martist.Artist***REMOVED******REMOVED***:
            c.remove(***REMOVED***

        if self._remove_method:
            self._remove_method(self***REMOVED***

    def __getstate__(self***REMOVED***:
        d = self.__dict__.copy(***REMOVED***
        # remove the unpicklable remove method, this will get re-added on load
        # (by the axes***REMOVED*** if the artist lives on an axes.
        d['_remove_method'***REMOVED*** = None
        return d

    def get_label(self***REMOVED***:
        ***REMOVED***
        Get the label used for this artist in the legend.
        ***REMOVED***
        return self._label

    def set_label(self, s***REMOVED***:
        ***REMOVED***
        Set the label to *s* for auto legend.

        ACCEPTS: string or anything printable with '%s' conversion.
        ***REMOVED***
        if s is not None:
            self._label = '%s' % (s, ***REMOVED***
        else:
            self._label = None
        self.pchanged(***REMOVED***

    def add_callback(self, func***REMOVED***:
        ***REMOVED***
        Adds a callback function that will be called whenever one of
        the :class:`Artist`'s properties changes.

        Returns an *id* that is useful for removing the callback with
        :meth:`remove_callback` later.
        ***REMOVED***
        oid = self._oid
        self._propobservers[oid***REMOVED*** = func
        self._oid += 1
        return oid

    def remove_callback(self, oid***REMOVED***:
        ***REMOVED***
        Remove a callback based on its *id*.

        .. seealso::

            :meth:`add_callback`
               For adding callbacks

        ***REMOVED***
        ***REMOVED***
            del self._propobservers[oid***REMOVED***
        except KeyError:
            pass

    def pchanged(self***REMOVED***:
        ***REMOVED***
        Fire an event when property changed, calling all of the
        registered callbacks.
        ***REMOVED***
        for oid, func in list(six.iteritems(self._propobservers***REMOVED******REMOVED***:
            func(self***REMOVED***

    def get_children(self***REMOVED***:
        return list(cbook.flatten(self***REMOVED******REMOVED***


class BarContainer(Container***REMOVED***:

    def __init__(self, patches, errorbar=None, **kwargs***REMOVED***:
        self.patches = patches
        self.errorbar = errorbar
        Container.__init__(self, patches, **kwargs***REMOVED***


class ErrorbarContainer(Container***REMOVED***:

    def __init__(self, lines, has_xerr=False, has_yerr=False, **kwargs***REMOVED***:
        self.lines = lines
        self.has_xerr = has_xerr
        self.has_yerr = has_yerr
        Container.__init__(self, lines, **kwargs***REMOVED***


class StemContainer(Container***REMOVED***:

    def __init__(self, markerline_stemlines_baseline, **kwargs***REMOVED***:
        markerline, stemlines, baseline = markerline_stemlines_baseline
        self.markerline = markerline
        self.stemlines = stemlines
        self.baseline = baseline
        Container.__init__(self, markerline_stemlines_baseline, **kwargs***REMOVED***
