from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six
from matplotlib.externals.six.moves import xrange

import itertools
import warnings
import math
from operator import itemgetter

import numpy as np
from numpy import ma

import matplotlib

from matplotlib import cbook
from matplotlib.cbook import (_check_1d, _string_to_bool, iterable,
                              index_of, get_label***REMOVED***
from matplotlib import docstring
import matplotlib.colors as mcolors
import matplotlib.lines as mlines
import matplotlib.patches as mpatches
import matplotlib.artist as martist
import matplotlib.transforms as mtransforms
import matplotlib.ticker as mticker
import matplotlib.axis as maxis
import matplotlib.scale as mscale
import matplotlib.spines as mspines
import matplotlib.font_manager as font_manager
import matplotlib.text as mtext
import matplotlib.image as mimage
from matplotlib.offsetbox import OffsetBox
from matplotlib.artist import allow_rasterization

from matplotlib.rcsetup import cycler

rcParams = matplotlib.rcParams

is_string_like = cbook.is_string_like
is_sequence_of_strings = cbook.is_sequence_of_strings


def _process_plot_format(fmt***REMOVED***:
    ***REMOVED***
    Process a MATLAB style color/line style format string.  Return a
    (*linestyle*, *color****REMOVED*** tuple as a result of the processing.  Default
    values are ('-', 'b'***REMOVED***.  Example format strings include:

    * 'ko': black circles
    * '.b': blue dots
    * 'r--': red dashed lines

    .. seealso::

        :func:`~matplotlib.Line2D.lineStyles` and
        :func:`~matplotlib.pyplot.colors`
            for all possible styles and color format string.
    ***REMOVED***

    linestyle = None
    marker = None
    color = None

    # Is fmt just a colorspec?
    ***REMOVED***
        color = mcolors.colorConverter.to_rgb(fmt***REMOVED***

        # We need to differentiate grayscale '1.0' from tri_down marker '1'
        ***REMOVED***
            fmtint = str(int(fmt***REMOVED******REMOVED***
        except ValueError:
            return linestyle, marker, color  # Yes
        else:
            if fmt != fmtint:
                # user definitely doesn't want tri_down marker
                return linestyle, marker, color  # Yes
            else:
                # ignore converted color
                color = None
    except ValueError:
        pass  # No, not just a color.

    # handle the multi char special cases and strip them from the
    # string
    if fmt.find('--'***REMOVED*** >= 0:
        linestyle = '--'
        fmt = fmt.replace('--', ''***REMOVED***
    if fmt.find('-.'***REMOVED*** >= 0:
        linestyle = '-.'
        fmt = fmt.replace('-.', ''***REMOVED***
    if fmt.find(' '***REMOVED*** >= 0:
        linestyle = 'None'
        fmt = fmt.replace(' ', ''***REMOVED***

    chars = [c for c in fmt***REMOVED***

    for c in chars:
        if c in mlines.lineStyles:
            if linestyle is not None:
                raise ValueError(
                    'Illegal format string "%s"; two linestyle symbols' % fmt***REMOVED***
            linestyle = c
        elif c in mlines.lineMarkers:
            if marker is not None:
                raise ValueError(
                    'Illegal format string "%s"; two marker symbols' % fmt***REMOVED***
            marker = c
        elif c in mcolors.colorConverter.colors:
            if color is not None:
                raise ValueError(
                    'Illegal format string "%s"; two color symbols' % fmt***REMOVED***
            color = c
        else:
            raise ValueError(
                'Unrecognized character %c in format string' % c***REMOVED***

    if linestyle is None and marker is None:
        linestyle = rcParams['lines.linestyle'***REMOVED***
    if linestyle is None:
        linestyle = 'None'
    if marker is None:
        marker = 'None'

    return linestyle, marker, color


class _process_plot_var_args(object***REMOVED***:
    ***REMOVED***
    Process variable length arguments to the plot command, so that
    plot commands like the following are supported::

      plot(t, s***REMOVED***
      plot(t1, s1, t2, s2***REMOVED***
      plot(t1, s1, 'ko', t2, s2***REMOVED***
      plot(t1, s1, 'ko', t2, s2, 'r--', t3, e3***REMOVED***

    an arbitrary number of *x*, *y*, *fmt* are allowed
    ***REMOVED***
    def __init__(self, axes, command='plot'***REMOVED***:
        self.axes = axes
        self.command = command
        self.set_prop_cycle(***REMOVED***

    def __getstate__(self***REMOVED***:
        # note: it is not possible to pickle a itertools.cycle instance
        return {'axes': self.axes, 'command': self.command***REMOVED***

    def __setstate__(self, state***REMOVED***:
        self.__dict__ = state.copy(***REMOVED***
        self.set_prop_cycle(***REMOVED***

    def set_prop_cycle(self, *args, **kwargs***REMOVED***:
        if not (args or kwargs***REMOVED*** or (len(args***REMOVED*** == 1 and args[0***REMOVED*** is None***REMOVED***:
            prop_cycler = rcParams['axes.prop_cycle'***REMOVED***
            if prop_cycler is None and 'axes.color_cycle' in rcParams:
                clist = rcParams['axes.color_cycle'***REMOVED***
                prop_cycler = cycler('color', clist***REMOVED***
        else:
            prop_cycler = cycler(*args, **kwargs***REMOVED***

        self.prop_cycler = itertools.cycle(prop_cycler***REMOVED***
        # This should make a copy
        self._prop_keys = prop_cycler.keys

    def __call__(self, *args, **kwargs***REMOVED***:
        if self.axes.xaxis is not None and self.axes.yaxis is not None:
            xunits = kwargs.pop('xunits', self.axes.xaxis.units***REMOVED***

            if self.axes.name == 'polar':
                xunits = kwargs.pop('thetaunits', xunits***REMOVED***

            yunits = kwargs.pop('yunits', self.axes.yaxis.units***REMOVED***

            if self.axes.name == 'polar':
                yunits = kwargs.pop('runits', yunits***REMOVED***

            if xunits != self.axes.xaxis.units:
                self.axes.xaxis.set_units(xunits***REMOVED***

            if yunits != self.axes.yaxis.units:
                self.axes.yaxis.set_units(yunits***REMOVED***

        ret = self._grab_next_args(*args, **kwargs***REMOVED***
        return ret

    def set_patchprops(self, fill_poly, **kwargs***REMOVED***:
        assert self.command == 'fill', 'set_patchprops only works with "fill"'
        fill_poly.set(**kwargs***REMOVED***

    def _xy_from_xy(self, x, y***REMOVED***:
        if self.axes.xaxis is not None and self.axes.yaxis is not None:
            bx = self.axes.xaxis.update_units(x***REMOVED***
            by = self.axes.yaxis.update_units(y***REMOVED***

            if self.command != 'plot':
                # the Line2D class can handle unitized data, with
                # support for post hoc unit changes etc.  Other mpl
                # artists, e.g., Polygon which _process_plot_var_args
                # also serves on calls to fill, cannot.  So this is a
                # hack to say: if you are not "plot", which is
                # creating Line2D, then convert the data now to
                # floats.  If you are plot, pass the raw data through
                # to Line2D which will handle the conversion.  So
                # polygons will not support post hoc conversions of
                # the unit type since they are not storing the orig
                # data.  Hopefully we can rationalize this at a later
                # date - JDH
                if bx:
                    x = self.axes.convert_xunits(x***REMOVED***
                if by:
                    y = self.axes.convert_yunits(y***REMOVED***

        # like asanyarray, but converts scalar to array, and doesn't change
        # existing compatible sequences
        x = _check_1d(x***REMOVED***
        y = _check_1d(y***REMOVED***
        if x.shape[0***REMOVED*** != y.shape[0***REMOVED***:
            raise ValueError("x and y must have same first dimension"***REMOVED***
        if x.ndim > 2 or y.ndim > 2:
            raise ValueError("x and y can be no greater than 2-D"***REMOVED***

        if x.ndim == 1:
            x = x[:, np.newaxis***REMOVED***
        if y.ndim == 1:
            y = y[:, np.newaxis***REMOVED***
        return x, y

    def _getdefaults(self, ignore, *kwargs***REMOVED***:
        ***REMOVED***
        Only advance the cycler if the cycler has information that
        is not specified in any of the supplied tuple of dicts.
        Ignore any keys specified in the `ignore` set.

        Returns a copy of defaults dictionary if there are any
        keys that are not found in any of the supplied dictionaries.
        If the supplied dictionaries have non-None values for
        everything the property cycler has, then just return
        an empty dictionary. Ignored keys are excluded from the
        returned dictionary.

        ***REMOVED***
        prop_keys = self._prop_keys
        if ignore is None:
            ignore = set([***REMOVED******REMOVED***
        prop_keys = prop_keys - ignore

        if any(all(kw.get(k, None***REMOVED*** is None for kw in kwargs***REMOVED***
               for k in prop_keys***REMOVED***:
            # Need to copy this dictionary or else the next time around
            # in the cycle, the dictionary could be missing entries.
            default_dict = six.next(self.prop_cycler***REMOVED***.copy(***REMOVED***
            for p in ignore:
                default_dict.pop(p, None***REMOVED***
        else:
            default_dict = {***REMOVED***
        return default_dict

    def _setdefaults(self, defaults, *kwargs***REMOVED***:
        ***REMOVED***
        Given a defaults dictionary, and any other dictionaries,
        update those other dictionaries with information in defaults if
        none of the other dictionaries contains that information.

        ***REMOVED***
        for k in defaults:
            if all(kw.get(k, None***REMOVED*** is None for kw in kwargs***REMOVED***:
                for kw in kwargs:
                    kw[k***REMOVED*** = defaults[k***REMOVED***

    def _makeline(self, x, y, kw, kwargs***REMOVED***:
        kw = kw.copy(***REMOVED***  # Don't modify the original kw.
        kw.update(kwargs***REMOVED***
        default_dict = self._getdefaults(None, kw***REMOVED***
        self._setdefaults(default_dict, kw***REMOVED***
        seg = mlines.Line2D(x, y, **kw***REMOVED***
        return seg

    def _makefill(self, x, y, kw, kwargs***REMOVED***:
        kw = kw.copy(***REMOVED***  # Don't modify the original kw.
        kwargs = kwargs.copy(***REMOVED***

        # Ignore 'marker'-related properties as they aren't Polygon
        # properties, but they are Line2D properties, and so they are
        # likely to appear in the default cycler construction.
        # This is done here to the defaults dictionary as opposed to the
        # other two dictionaries because we do want to capture when a
        # *user* explicitly specifies a marker which should be an error.
        # We also want to prevent advancing the cycler if there are no
        # defaults needed after ignoring the given properties.
        ignores = set(['marker', 'markersize', 'markeredgecolor',
                       'markerfacecolor', 'markeredgewidth'***REMOVED******REMOVED***
        # Also ignore anything provided by *kwargs*.
        for k, v in six.iteritems(kwargs***REMOVED***:
            if v is not None:
                ignores.add(k***REMOVED***

        # Only using the first dictionary to use as basis
        # for getting defaults for back-compat reasons.
        # Doing it with both seems to mess things up in
        # various places (probably due to logic bugs elsewhere***REMOVED***.
        default_dict = self._getdefaults(ignores, kw***REMOVED***
        self._setdefaults(default_dict, kw***REMOVED***

        # Looks like we don't want "color" to be interpreted to
        # mean both facecolor and edgecolor for some reason.
        # So the "kw" dictionary is thrown out, and only its
        # 'color' value is kept and translated as a 'facecolor'.
        # This design should probably be revisited as it increases
        # complexity.
        facecolor = kw.get('color', None***REMOVED***

        # Throw out 'color' as it is now handled as a facecolor
        default_dict.pop('color', None***REMOVED***

        # To get other properties set from the cycler
        # modify the kwargs dictionary.
        self._setdefaults(default_dict, kwargs***REMOVED***

        seg = mpatches.Polygon(np.hstack((x[:, np.newaxis***REMOVED***,
                                          y[:, np.newaxis***REMOVED******REMOVED******REMOVED***,
                               facecolor=facecolor,
                               fill=True,
                               closed=kw['closed'***REMOVED******REMOVED***
        self.set_patchprops(seg, **kwargs***REMOVED***
        return seg

    def _plot_args(self, tup, kwargs***REMOVED***:
        ret = [***REMOVED***
        if len(tup***REMOVED*** > 1 and is_string_like(tup[-1***REMOVED******REMOVED***:
            linestyle, marker, color = _process_plot_format(tup[-1***REMOVED******REMOVED***
            tup = tup[:-1***REMOVED***
        elif len(tup***REMOVED*** == 3:
            raise ValueError('third arg must be a format string'***REMOVED***
        else:
            linestyle, marker, color = None, None, None

        # Don't allow any None value; These will be up-converted
        # to one element array of None which causes problems
        # downstream.
        if any(v is None for v in tup***REMOVED***:
            raise ValueError("x and y must not be None"***REMOVED***

        kw = {***REMOVED***
        for k, v in zip(('linestyle', 'marker', 'color'***REMOVED***,
                        (linestyle, marker, color***REMOVED******REMOVED***:
            if v is not None:
                kw[k***REMOVED*** = v

        if 'label' not in kwargs or kwargs['label'***REMOVED*** is None:
            kwargs['label'***REMOVED*** = get_label(tup[-1***REMOVED***, None***REMOVED***

        if len(tup***REMOVED*** == 2:
            x = _check_1d(tup[0***REMOVED******REMOVED***
            y = _check_1d(tup[-1***REMOVED******REMOVED***
        else:
            x, y = index_of(tup[-1***REMOVED******REMOVED***

        x, y = self._xy_from_xy(x, y***REMOVED***

        if self.command == 'plot':
            func = self._makeline
        else:
            kw['closed'***REMOVED*** = kwargs.get('closed', True***REMOVED***
            func = self._makefill

        ncx, ncy = x.shape[1***REMOVED***, y.shape[1***REMOVED***
        for j in xrange(max(ncx, ncy***REMOVED******REMOVED***:
            seg = func(x[:, j % ncx***REMOVED***, y[:, j % ncy***REMOVED***, kw, kwargs***REMOVED***
            ret.append(seg***REMOVED***
        return ret

    def _grab_next_args(self, *args, **kwargs***REMOVED***:

        remaining = args
        while 1:

            if len(remaining***REMOVED*** == 0:
                return
            if len(remaining***REMOVED*** <= 3:
                for seg in self._plot_args(remaining, kwargs***REMOVED***:
                    yield seg
                return

            if is_string_like(remaining[2***REMOVED******REMOVED***:
                isplit = 3
            else:
                isplit = 2

            for seg in self._plot_args(remaining[:isplit***REMOVED***, kwargs***REMOVED***:
                yield seg
            remaining = remaining[isplit:***REMOVED***


class _AxesBase(martist.Artist***REMOVED***:
    ***REMOVED***
    ***REMOVED***
    name = "rectilinear"

    _shared_x_axes = cbook.Grouper(***REMOVED***
    _shared_y_axes = cbook.Grouper(***REMOVED***

    def __str__(self***REMOVED***:
        return "Axes(%g,%g;%gx%g***REMOVED***" % tuple(self._position.bounds***REMOVED***

    def __init__(self, fig, rect,
                 axisbg=None,  # defaults to rc axes.facecolor
                 frameon=True,
                 sharex=None,  # use Axes instance's xaxis info
                 sharey=None,  # use Axes instance's yaxis info
                 label='',
                 xscale=None,
                 yscale=None,
                 **kwargs
                 ***REMOVED***:
        ***REMOVED***
        Build an :class:`Axes` instance in
        :class:`~matplotlib.figure.Figure` *fig* with
        *rect=[left, bottom, width, height***REMOVED**** in
        :class:`~matplotlib.figure.Figure` coordinates

        Optional keyword arguments:

          ================   =========================================
          Keyword            Description
          ================   =========================================
          *adjustable*       [ 'box' | 'datalim' | 'box-forced'***REMOVED***
          *alpha*            float: the alpha transparency (can be None***REMOVED***
          *anchor*           [ 'C', 'SW', 'S', 'SE', 'E', 'NE', 'N',
                               'NW', 'W' ***REMOVED***
          *aspect*           [ 'auto' | 'equal' | aspect_ratio ***REMOVED***
          *autoscale_on*     [ *True* | *False* ***REMOVED*** whether or not to
                             autoscale the *viewlim*
          *axis_bgcolor*     any matplotlib color, see
                             :func:`~matplotlib.pyplot.colors`
          *axisbelow*        draw the grids and ticks below the other
                             artists
          *cursor_props*     a (*float*, *color****REMOVED*** tuple
          *figure*           a :class:`~matplotlib.figure.Figure`
                             instance
          *frame_on*         a boolean - draw the axes frame
          *label*            the axes label
          *navigate*         [ *True* | *False* ***REMOVED***
          *navigate_mode*    [ 'PAN' | 'ZOOM' | None ***REMOVED*** the navigation
                             toolbar button status
          *position*         [left, bottom, width, height***REMOVED*** in
                             class:`~matplotlib.figure.Figure` coords
          *sharex*           an class:`~matplotlib.axes.Axes` instance
                             to share the x-axis with
          *sharey*           an class:`~matplotlib.axes.Axes` instance
                             to share the y-axis with
          *title*            the title string
          *visible*          [ *True* | *False* ***REMOVED*** whether the axes is
                             visible
          *xlabel*           the xlabel
          *xlim*             (*xmin*, *xmax****REMOVED*** view limits
          *xscale*           [%(scale***REMOVED***s***REMOVED***
          *xticklabels*      sequence of strings
          *xticks*           sequence of floats
          *ylabel*           the ylabel strings
          *ylim*             (*ymin*, *ymax****REMOVED*** view limits
          *yscale*           [%(scale***REMOVED***s***REMOVED***
          *yticklabels*      sequence of strings
          *yticks*           sequence of floats
          ================   =========================================
        ***REMOVED*** % {'scale': ' | '.join(
            [repr(x***REMOVED*** for x in mscale.get_scale_names(***REMOVED******REMOVED******REMOVED******REMOVED***
        martist.Artist.__init__(self***REMOVED***
        if isinstance(rect, mtransforms.Bbox***REMOVED***:
            self._position = rect
        else:
            self._position = mtransforms.Bbox.from_bounds(*rect***REMOVED***
        self._originalPosition = self._position.frozen(***REMOVED***
        # self.set_axes(self***REMOVED***
        self.axes = self
        self.set_aspect('auto'***REMOVED***
        self._adjustable = 'box'
        self.set_anchor('C'***REMOVED***
        self._sharex = sharex
        self._sharey = sharey
        if sharex is not None:
            self._shared_x_axes.join(self, sharex***REMOVED***
            if sharex._adjustable == 'box':
                sharex._adjustable = 'datalim'
                #warnings.warn(
                #    'shared axes: "adjustable" is being changed to "datalim"'***REMOVED***
            self._adjustable = 'datalim'
        if sharey is not None:
            self._shared_y_axes.join(self, sharey***REMOVED***
            if sharey._adjustable == 'box':
                sharey._adjustable = 'datalim'
                #warnings.warn(
                #    'shared axes: "adjustable" is being changed to "datalim"'***REMOVED***
            self._adjustable = 'datalim'
        self.set_label(label***REMOVED***
        self.set_figure(fig***REMOVED***

        self.set_axes_locator(kwargs.get("axes_locator", None***REMOVED******REMOVED***

        self.spines = self._gen_axes_spines(***REMOVED***

        # this call may differ for non-sep axes, e.g., polar
        self._init_axis(***REMOVED***

        if axisbg is None:
            axisbg = rcParams['axes.facecolor'***REMOVED***
        self._axisbg = axisbg
        self._frameon = frameon
        self._axisbelow = rcParams['axes.axisbelow'***REMOVED***

        self._rasterization_zorder = None

        self._hold = rcParams['axes.hold'***REMOVED***
        self._connected = {***REMOVED***  # a dict from events to (id, func***REMOVED***
        self.cla(***REMOVED***
        # funcs used to format x and y - fall back on major formatters
        self.fmt_xdata = None
        self.fmt_ydata = None

        self.set_cursor_props((1, 'k'***REMOVED******REMOVED***  # set the cursor properties for axes

        self._cachedRenderer = None
        self.set_navigate(True***REMOVED***
        self.set_navigate_mode(None***REMOVED***

        if xscale:
            self.set_xscale(xscale***REMOVED***
        if yscale:
            self.set_yscale(yscale***REMOVED***

        if len(kwargs***REMOVED***:
            self.update(kwargs***REMOVED***

        if self.xaxis is not None:
            self._xcid = self.xaxis.callbacks.connect('units finalize',
                                                      self.relim***REMOVED***

        if self.yaxis is not None:
            self._ycid = self.yaxis.callbacks.connect('units finalize',
                                                      self.relim***REMOVED***

    def __setstate__(self, state***REMOVED***:
        self.__dict__ = state
        # put the _remove_method back on all artists contained within the axes
        for container_name in ['lines', 'collections', 'tables', 'patches',
                               'texts', 'images'***REMOVED***:
            container = getattr(self, container_name***REMOVED***
            for artist in container:
                artist._remove_method = container.remove
        self._stale = True

    def get_window_extent(self, *args, **kwargs***REMOVED***:
        ***REMOVED***
        get the axes bounding box in display space; *args* and
        *kwargs* are empty
        ***REMOVED***
        return self.bbox

    def _init_axis(self***REMOVED***:
        "move this out of __init__ because non-separable axes don't use it"
        self.xaxis = maxis.XAxis(self***REMOVED***
        self.spines['bottom'***REMOVED***.register_axis(self.xaxis***REMOVED***
        self.spines['top'***REMOVED***.register_axis(self.xaxis***REMOVED***
        self.yaxis = maxis.YAxis(self***REMOVED***
        self.spines['left'***REMOVED***.register_axis(self.yaxis***REMOVED***
        self.spines['right'***REMOVED***.register_axis(self.yaxis***REMOVED***
        self._update_transScale(***REMOVED***

    def set_figure(self, fig***REMOVED***:
        ***REMOVED***
        Set the class:`~matplotlib.axes.Axes` figure

        accepts a class:`~matplotlib.figure.Figure` instance
        ***REMOVED***
        martist.Artist.set_figure(self, fig***REMOVED***

        self.bbox = mtransforms.TransformedBbox(self._position,
                                                fig.transFigure***REMOVED***
        # these will be updated later as data is added
        self.dataLim = mtransforms.Bbox.null(***REMOVED***
        self.viewLim = mtransforms.Bbox.unit(***REMOVED***
        self.transScale = mtransforms.TransformWrapper(
            mtransforms.IdentityTransform(***REMOVED******REMOVED***

        self._set_lim_and_transforms(***REMOVED***

    def _set_lim_and_transforms(self***REMOVED***:
        ***REMOVED***
        set the *dataLim* and *viewLim*
        :class:`~matplotlib.transforms.Bbox` attributes and the
        *transScale*, *transData*, *transLimits* and *transAxes*
        transformations.

        .. note::

            This method is primarily used by rectilinear projections
            of the :class:`~matplotlib.axes.Axes` class, and is meant
            to be overridden by new kinds of projection axes that need
            different transformations and limits. (See
            :class:`~matplotlib.projections.polar.PolarAxes` for an
            example.

        ***REMOVED***
        self.transAxes = mtransforms.BboxTransformTo(self.bbox***REMOVED***

        # Transforms the x and y axis separately by a scale factor.
        # It is assumed that this part will have non-linear components
        # (e.g., for a log scale***REMOVED***.
        self.transScale = mtransforms.TransformWrapper(
            mtransforms.IdentityTransform(***REMOVED******REMOVED***

        # An affine transformation on the data, generally to limit the
        # range of the axes
        self.transLimits = mtransforms.BboxTransformFrom(
            mtransforms.TransformedBbox(self.viewLim, self.transScale***REMOVED******REMOVED***

        # The parentheses are important for efficiency here -- they
        # group the last two (which are usually affines***REMOVED*** separately
        # from the first (which, with log-scaling can be non-affine***REMOVED***.
        self.transData = self.transScale + (self.transLimits + self.transAxes***REMOVED***

        self._xaxis_transform = mtransforms.blended_transform_factory(
            self.transData, self.transAxes***REMOVED***
        self._yaxis_transform = mtransforms.blended_transform_factory(
            self.transAxes, self.transData***REMOVED***

    def get_xaxis_transform(self, which='grid'***REMOVED***:
        ***REMOVED***
        Get the transformation used for drawing x-axis labels, ticks
        and gridlines.  The x-direction is in data coordinates and the
        y-direction is in axis coordinates.

        .. note::

            This transformation is primarily used by the
            :class:`~matplotlib.axis.Axis` class, and is meant to be
            overridden by new kinds of projections that may need to
            place axis elements in different locations.

        ***REMOVED***
        if which == 'grid':
            return self._xaxis_transform
        elif which == 'tick1':
            # for cartesian projection, this is bottom spine
            return self.spines['bottom'***REMOVED***.get_spine_transform(***REMOVED***
        elif which == 'tick2':
            # for cartesian projection, this is top spine
            return self.spines['top'***REMOVED***.get_spine_transform(***REMOVED***
        else:
            raise ValueError('unknown value for which'***REMOVED***

    def get_xaxis_text1_transform(self, pad_points***REMOVED***:
        ***REMOVED***
        Get the transformation used for drawing x-axis labels, which
        will add the given amount of padding (in points***REMOVED*** between the
        axes and the label.  The x-direction is in data coordinates
        and the y-direction is in axis coordinates.  Returns a
        3-tuple of the form::

          (transform, valign, halign***REMOVED***

        where *valign* and *halign* are requested alignments for the
        text.

        .. note::

            This transformation is primarily used by the
            :class:`~matplotlib.axis.Axis` class, and is meant to be
            overridden by new kinds of projections that may need to
            place axis elements in different locations.

        ***REMOVED***
        return (self.get_xaxis_transform(which='tick1'***REMOVED*** +
                mtransforms.ScaledTranslation(0, -1 * pad_points / 72.0,
                                              self.figure.dpi_scale_trans***REMOVED***,
                "top", "center"***REMOVED***

    def get_xaxis_text2_transform(self, pad_points***REMOVED***:
        ***REMOVED***
        Get the transformation used for drawing the secondary x-axis
        labels, which will add the given amount of padding (in points***REMOVED***
        between the axes and the label.  The x-direction is in data
        coordinates and the y-direction is in axis coordinates.
        Returns a 3-tuple of the form::

          (transform, valign, halign***REMOVED***

        where *valign* and *halign* are requested alignments for the
        text.

        .. note::

            This transformation is primarily used by the
            :class:`~matplotlib.axis.Axis` class, and is meant to be
            overridden by new kinds of projections that may need to
            place axis elements in different locations.

        ***REMOVED***
        return (self.get_xaxis_transform(which='tick2'***REMOVED*** +
                mtransforms.ScaledTranslation(0, pad_points / 72.0,
                                              self.figure.dpi_scale_trans***REMOVED***,
                "bottom", "center"***REMOVED***

    def get_yaxis_transform(self, which='grid'***REMOVED***:
        ***REMOVED***
        Get the transformation used for drawing y-axis labels, ticks
        and gridlines.  The x-direction is in axis coordinates and the
        y-direction is in data coordinates.

        .. note::

            This transformation is primarily used by the
            :class:`~matplotlib.axis.Axis` class, and is meant to be
            overridden by new kinds of projections that may need to
            place axis elements in different locations.

        ***REMOVED***
        if which == 'grid':
            return self._yaxis_transform
        elif which == 'tick1':
            # for cartesian projection, this is bottom spine
            return self.spines['left'***REMOVED***.get_spine_transform(***REMOVED***
        elif which == 'tick2':
            # for cartesian projection, this is top spine
            return self.spines['right'***REMOVED***.get_spine_transform(***REMOVED***
        else:
            raise ValueError('unknown value for which'***REMOVED***

    def get_yaxis_text1_transform(self, pad_points***REMOVED***:
        ***REMOVED***
        Get the transformation used for drawing y-axis labels, which
        will add the given amount of padding (in points***REMOVED*** between the
        axes and the label.  The x-direction is in axis coordinates
        and the y-direction is in data coordinates.  Returns a 3-tuple
        of the form::

          (transform, valign, halign***REMOVED***

        where *valign* and *halign* are requested alignments for the
        text.

        .. note::

            This transformation is primarily used by the
            :class:`~matplotlib.axis.Axis` class, and is meant to be
            overridden by new kinds of projections that may need to
            place axis elements in different locations.

        ***REMOVED***
        return (self.get_yaxis_transform(which='tick1'***REMOVED*** +
                mtransforms.ScaledTranslation(-1 * pad_points / 72.0, 0,
                                              self.figure.dpi_scale_trans***REMOVED***,
                "center", "right"***REMOVED***

    def get_yaxis_text2_transform(self, pad_points***REMOVED***:
        ***REMOVED***
        Get the transformation used for drawing the secondary y-axis
        labels, which will add the given amount of padding (in points***REMOVED***
        between the axes and the label.  The x-direction is in axis
        coordinates and the y-direction is in data coordinates.
        Returns a 3-tuple of the form::

          (transform, valign, halign***REMOVED***

        where *valign* and *halign* are requested alignments for the
        text.

        .. note::

            This transformation is primarily used by the
            :class:`~matplotlib.axis.Axis` class, and is meant to be
            overridden by new kinds of projections that may need to
            place axis elements in different locations.

        ***REMOVED***
        return (self.get_yaxis_transform(which='tick2'***REMOVED*** +
                mtransforms.ScaledTranslation(pad_points / 72.0, 0,
                                              self.figure.dpi_scale_trans***REMOVED***,
                "center", "left"***REMOVED***

    def _update_transScale(self***REMOVED***:
        self.transScale.set(
            mtransforms.blended_transform_factory(
                self.xaxis.get_transform(***REMOVED***, self.yaxis.get_transform(***REMOVED******REMOVED******REMOVED***
        if hasattr(self, "lines"***REMOVED***:
            for line in self.lines:
                ***REMOVED***
                    line._transformed_path.invalidate(***REMOVED***
                except AttributeError:
                    pass

    def get_position(self, original=False***REMOVED***:
        'Return the a copy of the axes rectangle as a Bbox'
        if original:
            return self._originalPosition.frozen(***REMOVED***
        else:
            return self._position.frozen(***REMOVED***

    def set_position(self, pos, which='both'***REMOVED***:
        ***REMOVED***
        Set the axes position with::

          pos = [left, bottom, width, height***REMOVED***

        in relative 0,1 coords, or *pos* can be a
        :class:`~matplotlib.transforms.Bbox`

        There are two position variables: one which is ultimately
        used, but which may be modified by :meth:`apply_aspect`, and a
        second which is the starting point for :meth:`apply_aspect`.


        Optional keyword arguments:
          *which*

            ==========   ====================
            value        description
            ==========   ====================
            'active'     to change the first
            'original'   to change the second
            'both'       to change both
            ==========   ====================

        ***REMOVED***
        if not isinstance(pos, mtransforms.BboxBase***REMOVED***:
            pos = mtransforms.Bbox.from_bounds(*pos***REMOVED***
        if which in ('both', 'active'***REMOVED***:
            self._position.set(pos***REMOVED***
        if which in ('both', 'original'***REMOVED***:
            self._originalPosition.set(pos***REMOVED***
        self.stale = True

    def reset_position(self***REMOVED***:
        ***REMOVED***Make the original position the active position***REMOVED***
        pos = self.get_position(original=True***REMOVED***
        self.set_position(pos, which='active'***REMOVED***

    def set_axes_locator(self, locator***REMOVED***:
        ***REMOVED***
        set axes_locator

        ACCEPT: a callable object which takes an axes instance and renderer and
                 returns a bbox.
        ***REMOVED***
        self._axes_locator = locator
        self.stale = True

    def get_axes_locator(self***REMOVED***:
        ***REMOVED***
        return axes_locator
        ***REMOVED***
        return self._axes_locator

    def _set_artist_props(self, a***REMOVED***:
        ***REMOVED***set the boilerplate props for artists added to axes***REMOVED***
        a.set_figure(self.figure***REMOVED***
        if not a.is_transform_set(***REMOVED***:
            a.set_transform(self.transData***REMOVED***

        a.axes = self
        if a.mouseover:
            self.mouseover_set.add(a***REMOVED***

    def _gen_axes_patch(self***REMOVED***:
        ***REMOVED***
        Returns the patch used to draw the background of the axes.  It
        is also used as the clipping path for any data elements on the
        axes.

        In the standard axes, this is a rectangle, but in other
        projections it may not be.

        .. note::

            Intended to be overridden by new projection types.

        ***REMOVED***
        return mpatches.Rectangle((0.0, 0.0***REMOVED***, 1.0, 1.0***REMOVED***

    def _gen_axes_spines(self, locations=None, offset=0.0, units='inches'***REMOVED***:
        ***REMOVED***
        Returns a dict whose keys are spine names and values are
        Line2D or Patch instances. Each element is used to draw a
        spine of the axes.

        In the standard axes, this is a single line segment, but in
        other projections it may not be.

        .. note::

            Intended to be overridden by new projection types.

        ***REMOVED***
        return {
            'left': mspines.Spine.linear_spine(self, 'left'***REMOVED***,
            'right': mspines.Spine.linear_spine(self, 'right'***REMOVED***,
            'bottom': mspines.Spine.linear_spine(self, 'bottom'***REMOVED***,
            'top': mspines.Spine.linear_spine(self, 'top'***REMOVED***, ***REMOVED***

    def cla(self***REMOVED***:
        ***REMOVED***Clear the current axes.***REMOVED***
        # Note: this is called by Axes.__init__(***REMOVED***

        # stash the current visibility state
        if hasattr(self, 'patch'***REMOVED***:
            patch_visible = self.patch.get_visible(***REMOVED***
        else:
            patch_visible = True

        xaxis_visible = self.xaxis.get_visible(***REMOVED***
        yaxis_visible = self.yaxis.get_visible(***REMOVED***

        self.xaxis.cla(***REMOVED***
        self.yaxis.cla(***REMOVED***
        for name, spine in six.iteritems(self.spines***REMOVED***:
            spine.cla(***REMOVED***

        self.ignore_existing_data_limits = True
        self.callbacks = cbook.CallbackRegistry(***REMOVED***

        if self._sharex is not None:
            # major and minor are class instances with
            # locator and formatter attributes
            self.xaxis.major = self._sharex.xaxis.major
            self.xaxis.minor = self._sharex.xaxis.minor
            x0, x1 = self._sharex.get_xlim(***REMOVED***
            self.set_xlim(x0, x1, emit=False, auto=None***REMOVED***

            # Save the current formatter/locator so we don't lose it
            majf = self._sharex.xaxis.get_major_formatter(***REMOVED***
            minf = self._sharex.xaxis.get_minor_formatter(***REMOVED***
            majl = self._sharex.xaxis.get_major_locator(***REMOVED***
            minl = self._sharex.xaxis.get_minor_locator(***REMOVED***

            # This overwrites the current formatter/locator
            self.xaxis._set_scale(self._sharex.xaxis.get_scale(***REMOVED******REMOVED***

            # Reset the formatter/locator
            self.xaxis.set_major_formatter(majf***REMOVED***
            self.xaxis.set_minor_formatter(minf***REMOVED***
            self.xaxis.set_major_locator(majl***REMOVED***
            self.xaxis.set_minor_locator(minl***REMOVED***
        else:
            self.xaxis._set_scale('linear'***REMOVED***

        if self._sharey is not None:
            self.yaxis.major = self._sharey.yaxis.major
            self.yaxis.minor = self._sharey.yaxis.minor
            y0, y1 = self._sharey.get_ylim(***REMOVED***
            self.set_ylim(y0, y1, emit=False, auto=None***REMOVED***

            # Save the current formatter/locator so we don't lose it
            majf = self._sharey.yaxis.get_major_formatter(***REMOVED***
            minf = self._sharey.yaxis.get_minor_formatter(***REMOVED***
            majl = self._sharey.yaxis.get_major_locator(***REMOVED***
            minl = self._sharey.yaxis.get_minor_locator(***REMOVED***

            # This overwrites the current formatter/locator
            self.yaxis._set_scale(self._sharey.yaxis.get_scale(***REMOVED******REMOVED***

            # Reset the formatter/locator
            self.yaxis.set_major_formatter(majf***REMOVED***
            self.yaxis.set_minor_formatter(minf***REMOVED***
            self.yaxis.set_major_locator(majl***REMOVED***
            self.yaxis.set_minor_locator(minl***REMOVED***
        else:
            self.yaxis._set_scale('linear'***REMOVED***

        # update the minor locator for x and y axis based on rcParams
        if (rcParams['xtick.minor.visible'***REMOVED******REMOVED***:
            self.xaxis.set_minor_locator(mticker.AutoMinorLocator(***REMOVED******REMOVED***

        if (rcParams['ytick.minor.visible'***REMOVED******REMOVED***:
            self.yaxis.set_minor_locator(mticker.AutoMinorLocator(***REMOVED******REMOVED***

        self._autoscaleXon = True
        self._autoscaleYon = True
        self._xmargin = rcParams['axes.xmargin'***REMOVED***
        self._ymargin = rcParams['axes.ymargin'***REMOVED***
        self._tight = False
        self._update_transScale(***REMOVED***  # needed?

        self._get_lines = _process_plot_var_args(self***REMOVED***
        self._get_patches_for_fill = _process_plot_var_args(self, 'fill'***REMOVED***

        self._gridOn = rcParams['axes.grid'***REMOVED***
        self.lines = [***REMOVED***
        self.patches = [***REMOVED***
        self.texts = [***REMOVED***
        self.tables = [***REMOVED***
        self.artists = [***REMOVED***
        self.images = [***REMOVED***
        self.mouseover_set = set(***REMOVED***
        self._current_image = None  # strictly for pyplot via _sci, _gci
        self.legend_ = None
        self.collections = [***REMOVED***  # collection.Collection instances
        self.containers = [***REMOVED***

        self.grid(False***REMOVED***  # Disable grid on init to use rcParameter
        self.grid(self._gridOn, which=rcParams['axes.grid.which'***REMOVED***,
                    axis=rcParams['axes.grid.axis'***REMOVED******REMOVED***
        props = font_manager.FontProperties(
                    size=rcParams['axes.titlesize'***REMOVED***,
                    weight=rcParams['axes.titleweight'***REMOVED***
                ***REMOVED***

        self.titleOffsetTrans = mtransforms.ScaledTranslation(
            0.0, 5.0 / 72.0, self.figure.dpi_scale_trans***REMOVED***
        self.title = mtext.Text(
            x=0.5, y=1.0, text='',
            fontproperties=props,
            verticalalignment='baseline',
            horizontalalignment='center',
            ***REMOVED***
        self._left_title = mtext.Text(
            x=0.0, y=1.0, text='',
            fontproperties=props.copy(***REMOVED***,
            verticalalignment='baseline',
            horizontalalignment='left', ***REMOVED***
        self._right_title = mtext.Text(
            x=1.0, y=1.0, text='',
            fontproperties=props.copy(***REMOVED***,
            verticalalignment='baseline',
            horizontalalignment='right',
            ***REMOVED***

        for _title in (self.title, self._left_title, self._right_title***REMOVED***:
            _title.set_transform(self.transAxes + self.titleOffsetTrans***REMOVED***
            _title.set_clip_box(None***REMOVED***
            self._set_artist_props(_title***REMOVED***

        # the patch draws the background of the axes.  we want this to
        # be below the other artists; the axesPatch name is
        # deprecated.  We use the frame to draw the edges so we are
        # setting the edgecolor to None
        self.patch = self.axesPatch = self._gen_axes_patch(***REMOVED***
        self.patch.set_figure(self.figure***REMOVED***
        self.patch.set_facecolor(self._axisbg***REMOVED***
        self.patch.set_edgecolor('None'***REMOVED***
        self.patch.set_linewidth(0***REMOVED***
        self.patch.set_transform(self.transAxes***REMOVED***

        self.set_axis_on(***REMOVED***

        self.xaxis.set_clip_path(self.patch***REMOVED***
        self.yaxis.set_clip_path(self.patch***REMOVED***

        self._shared_x_axes.clean(***REMOVED***
        self._shared_y_axes.clean(***REMOVED***
        if self._sharex:
            self.xaxis.set_visible(xaxis_visible***REMOVED***
            self.patch.set_visible(patch_visible***REMOVED***

        if self._sharey:
            self.yaxis.set_visible(yaxis_visible***REMOVED***
            self.patch.set_visible(patch_visible***REMOVED***
        self.stale = True

    def clear(self***REMOVED***:
        ***REMOVED***clear the axes***REMOVED***
        self.cla(***REMOVED***

    def set_prop_cycle(self, *args, **kwargs***REMOVED***:
        ***REMOVED***
        Set the property cycle for any future plot commands on this Axes.

        set_prop_cycle(arg***REMOVED***
        set_prop_cycle(label, itr***REMOVED***
        set_prop_cycle(label1=itr1[, label2=itr2[, ...***REMOVED******REMOVED******REMOVED***

        Form 1 simply sets given `Cycler` object.

        Form 2 creates and sets  a `Cycler` from a label and an iterable.

        Form 3 composes and sets  a `Cycler` as an inner product of the
        pairs of keyword arguments. In other words, all of the
        iterables are cycled simultaneously, as if through zip(***REMOVED***.

        Parameters
        ----------
        arg : Cycler
            Set the given Cycler.
            Can also be `None` to reset to the cycle defined by the
            current style.

        label : str
            The property key. Must be a valid `Artist` property.
            For example, 'color' or 'linestyle'. Aliases are allowed,
            such as 'c' for 'color' and 'lw' for 'linewidth'.

        itr : iterable
            Finite-length iterable of the property values. These values
            are validated and will raise a ValueError if invalid.

        See Also
        --------
            :func:`cycler`      Convenience function for creating your
                                own cyclers.

        ***REMOVED***
        if args and kwargs:
            raise TypeError("Cannot supply both positional and keyword "
                            "arguments to this method."***REMOVED***
        if len(args***REMOVED*** == 1 and args[0***REMOVED*** is None:
            prop_cycle = None
        else:
            prop_cycle = cycler(*args, **kwargs***REMOVED***
        self._get_lines.set_prop_cycle(prop_cycle***REMOVED***
        self._get_patches_for_fill.set_prop_cycle(prop_cycle***REMOVED***

    def set_color_cycle(self, clist***REMOVED***:
        ***REMOVED***
        Set the color cycle for any future plot commands on this Axes.

        *clist* is a list of mpl color specifiers.

        .. deprecated:: 1.5
        ***REMOVED***
        cbook.warn_deprecated(
                '1.5', name='set_color_cycle', alternative='set_prop_cycle'***REMOVED***
        if clist is None:
            # Calling set_color_cycle(***REMOVED*** or set_prop_cycle(***REMOVED*** with None
            # effectively resets the cycle, but you can't do
            # set_prop_cycle('color', None***REMOVED***. So we are special-casing this.
            self.set_prop_cycle(None***REMOVED***
        else:
            self.set_prop_cycle('color', clist***REMOVED***

    def ishold(self***REMOVED***:
        ***REMOVED***return the HOLD status of the axes***REMOVED***
        return self._hold

    def hold(self, b=None***REMOVED***:
        ***REMOVED***
        Call signature::

          hold(b=None***REMOVED***

        Set the hold state.  If *hold* is *None* (default***REMOVED***, toggle the
        *hold* state.  Else set the *hold* state to boolean value *b*.

        Examples::

          # toggle hold
          hold(***REMOVED***

          # turn hold on
          hold(True***REMOVED***

          # turn hold off
          hold(False***REMOVED***

        When hold is *True*, subsequent plot commands will be added to
        the current axes.  When hold is *False*, the current axes and
        figure will be cleared on the next plot command

        ***REMOVED***
        if b is None:
            self._hold = not self._hold
        else:
            self._hold = b

    def get_aspect(self***REMOVED***:
        return self._aspect

    def set_aspect(self, aspect, adjustable=None, anchor=None***REMOVED***:
        ***REMOVED***
        *aspect*

          ========   ================================================
          value      description
          ========   ================================================
          'auto'     automatic; fill position rectangle with data
          'normal'   same as 'auto'; deprecated
          'equal'    same scaling from data to plot units for x and y
           num       a circle will be stretched such that the height
                     is num times the width. aspect=1 is the same as
                     aspect='equal'.
          ========   ================================================

        *adjustable*

          ============   =====================================
          value          description
          ============   =====================================
          'box'          change physical size of axes
          'datalim'      change xlim or ylim
          'box-forced'   same as 'box', but axes can be shared
          ============   =====================================

        'box' does not allow axes sharing, as this can cause
        unintended side effect. For cases when sharing axes is
        fine, use 'box-forced'.

        *anchor*

          =====   =====================
          value   description
          =====   =====================
          'C'     centered
          'SW'    lower left corner
          'S'     middle of bottom edge
          'SE'    lower right corner
          etc.
          =====   =====================

        .. deprecated:: 1.2
            the option 'normal' for aspect is deprecated. Use 'auto' instead.
        ***REMOVED***
        if aspect == 'normal':
            cbook.warn_deprecated(
                '1.2', name='normal', alternative='auto', obj_type='aspect'***REMOVED***
            self._aspect = 'auto'

        elif aspect in ('equal', 'auto'***REMOVED***:
            self._aspect = aspect
        else:
            self._aspect = float(aspect***REMOVED***  # raise ValueError if necessary

        if adjustable is not None:
            self.set_adjustable(adjustable***REMOVED***
        if anchor is not None:
            self.set_anchor(anchor***REMOVED***
        self.stale = True

    def get_adjustable(self***REMOVED***:
        return self._adjustable

    def set_adjustable(self, adjustable***REMOVED***:
        ***REMOVED***
        ACCEPTS: [ 'box' | 'datalim' | 'box-forced'***REMOVED***
        ***REMOVED***
        if adjustable in ('box', 'datalim', 'box-forced'***REMOVED***:
            if self in self._shared_x_axes or self in self._shared_y_axes:
                if adjustable == 'box':
                    raise ValueError(
                        'adjustable must be "datalim" for shared axes'***REMOVED***
            self._adjustable = adjustable
        else:
            raise ValueError('argument must be "box", or "datalim"'***REMOVED***
        self.stale = True

    def get_anchor(self***REMOVED***:
        return self._anchor

    def set_anchor(self, anchor***REMOVED***:
        ***REMOVED***
        *anchor*

          =====  ============
          value  description
          =====  ============
          'C'    Center
          'SW'   bottom left
          'S'    bottom
          'SE'   bottom right
          'E'    right
          'NE'   top right
          'N'    top
          'NW'   top left
          'W'    left
          =====  ============

        ***REMOVED***
        if (anchor in list(six.iterkeys(mtransforms.Bbox.coefs***REMOVED******REMOVED*** or
                len(anchor***REMOVED*** == 2***REMOVED***:
            self._anchor = anchor
        else:
            raise ValueError('argument must be among %s' %
                             ', '.join(six.iterkeys(mtransforms.Bbox.coefs***REMOVED******REMOVED******REMOVED***
        self.stale = True

    def get_data_ratio(self***REMOVED***:
        ***REMOVED***
        Returns the aspect ratio of the raw data.

        This method is intended to be overridden by new projection
        types.
        ***REMOVED***
        xmin, xmax = self.get_xbound(***REMOVED***
        ymin, ymax = self.get_ybound(***REMOVED***

        xsize = max(math.fabs(xmax - xmin***REMOVED***, 1e-30***REMOVED***
        ysize = max(math.fabs(ymax - ymin***REMOVED***, 1e-30***REMOVED***

        return ysize / xsize

    def get_data_ratio_log(self***REMOVED***:
        ***REMOVED***
        Returns the aspect ratio of the raw data in log scale.
        Will be used when both axis scales are in log.
        ***REMOVED***
        xmin, xmax = self.get_xbound(***REMOVED***
        ymin, ymax = self.get_ybound(***REMOVED***

        xsize = max(math.fabs(math.log10(xmax***REMOVED*** - math.log10(xmin***REMOVED******REMOVED***, 1e-30***REMOVED***
        ysize = max(math.fabs(math.log10(ymax***REMOVED*** - math.log10(ymin***REMOVED******REMOVED***, 1e-30***REMOVED***

        return ysize / xsize

    def apply_aspect(self, position=None***REMOVED***:
        ***REMOVED***
        Use :meth:`_aspect` and :meth:`_adjustable` to modify the
        axes box or the view limits.
        ***REMOVED***
        if position is None:
            position = self.get_position(original=True***REMOVED***

        aspect = self.get_aspect(***REMOVED***

        if self.name != 'polar':
            xscale, yscale = self.get_xscale(***REMOVED***, self.get_yscale(***REMOVED***
            if xscale == "linear" and yscale == "linear":
                aspect_scale_mode = "linear"
            elif xscale == "log" and yscale == "log":
                aspect_scale_mode = "log"
            elif ((xscale == "linear" and yscale == "log"***REMOVED*** or
                  (xscale == "log" and yscale == "linear"***REMOVED******REMOVED***:
                if aspect != "auto":
                    warnings.warn(
                        'aspect is not supported for Axes with xscale=%s, '
                        'yscale=%s' % (xscale, yscale***REMOVED******REMOVED***
                    aspect = "auto"
            else:  # some custom projections have their own scales.
                pass
        else:
            aspect_scale_mode = "linear"

        if aspect == 'auto':
            self.set_position(position, which='active'***REMOVED***
            return

        if aspect == 'equal':
            A = 1
        else:
            A = aspect

        # Ensure at drawing time that any Axes involved in axis-sharing
        # does not have its position changed.
        if self in self._shared_x_axes or self in self._shared_y_axes:
            if self._adjustable == 'box':
                self._adjustable = 'datalim'
                warnings.warn(
                    'shared axes: "adjustable" is being changed to "datalim"'***REMOVED***

        figW, figH = self.get_figure(***REMOVED***.get_size_inches(***REMOVED***
        fig_aspect = figH / figW
        if self._adjustable in ['box', 'box-forced'***REMOVED***:
            if aspect_scale_mode == "log":
                box_aspect = A * self.get_data_ratio_log(***REMOVED***
            else:
                box_aspect = A * self.get_data_ratio(***REMOVED***
            pb = position.frozen(***REMOVED***
            pb1 = pb.shrunk_to_aspect(box_aspect, pb, fig_aspect***REMOVED***
            self.set_position(pb1.anchored(self.get_anchor(***REMOVED***, pb***REMOVED***, 'active'***REMOVED***
            return

        # reset active to original in case it had been changed
        # by prior use of 'box'
        self.set_position(position, which='active'***REMOVED***

        xmin, xmax = self.get_xbound(***REMOVED***
        ymin, ymax = self.get_ybound(***REMOVED***

        if aspect_scale_mode == "log":
            xmin, xmax = math.log10(xmin***REMOVED***, math.log10(xmax***REMOVED***
            ymin, ymax = math.log10(ymin***REMOVED***, math.log10(ymax***REMOVED***

        xsize = max(math.fabs(xmax - xmin***REMOVED***, 1e-30***REMOVED***
        ysize = max(math.fabs(ymax - ymin***REMOVED***, 1e-30***REMOVED***

        l, b, w, h = position.bounds
        box_aspect = fig_aspect * (h / w***REMOVED***
        data_ratio = box_aspect / A

        y_expander = (data_ratio * xsize / ysize - 1.0***REMOVED***
        # If y_expander > 0, the dy/dx viewLim ratio needs to increase
        if abs(y_expander***REMOVED*** < 0.005:
            return

        if aspect_scale_mode == "log":
            dL = self.dataLim
            dL_width = math.log10(dL.x1***REMOVED*** - math.log10(dL.x0***REMOVED***
            dL_height = math.log10(dL.y1***REMOVED*** - math.log10(dL.y0***REMOVED***
            xr = 1.05 * dL_width
            yr = 1.05 * dL_height
        else:
            dL = self.dataLim
            xr = 1.05 * dL.width
            yr = 1.05 * dL.height

        xmarg = xsize - xr
        ymarg = ysize - yr
        Ysize = data_ratio * xsize
        Xsize = ysize / data_ratio
        Xmarg = Xsize - xr
        Ymarg = Ysize - yr
        # Setting these targets to, e.g., 0.05*xr does not seem to
        # help.
        xm = 0
        ym = 0

        changex = (self in self._shared_y_axes and
                   self not in self._shared_x_axes***REMOVED***
        changey = (self in self._shared_x_axes and
                   self not in self._shared_y_axes***REMOVED***
        if changex and changey:
            warnings.warn("adjustable='datalim' cannot work with shared "
                          "x and y axes"***REMOVED***
            return
        if changex:
            adjust_y = False
        else:
            if xmarg > xm and ymarg > ym:
                adjy = ((Ymarg > 0 and y_expander < 0***REMOVED*** or
                        (Xmarg < 0 and y_expander > 0***REMOVED******REMOVED***
            else:
                adjy = y_expander > 0
            adjust_y = changey or adjy  # (Ymarg > xmarg***REMOVED***
        if adjust_y:
            yc = 0.5 * (ymin + ymax***REMOVED***
            y0 = yc - Ysize / 2.0
            y1 = yc + Ysize / 2.0
            if aspect_scale_mode == "log":
                self.set_ybound((10. ** y0, 10. ** y1***REMOVED******REMOVED***
            else:
                self.set_ybound((y0, y1***REMOVED******REMOVED***
        else:
            xc = 0.5 * (xmin + xmax***REMOVED***
            x0 = xc - Xsize / 2.0
            x1 = xc + Xsize / 2.0
            if aspect_scale_mode == "log":
                self.set_xbound((10. ** x0, 10. ** x1***REMOVED******REMOVED***
            else:
                self.set_xbound((x0, x1***REMOVED******REMOVED***

    def axis(self, *v, **kwargs***REMOVED***:
        ***REMOVED***Set axis properties.

        Valid signatures::

          xmin, xmax, ymin, ymax = axis(***REMOVED***
          xmin, xmax, ymin, ymax = axis(list_arg***REMOVED***
          xmin, xmax, ymin, ymax = axis(string_arg***REMOVED***
          xmin, xmax, ymin, ymax = axis(**kwargs***REMOVED***

        Parameters
        ----------
        v : list of float or {'on', 'off', 'equal', 'tight', 'scaled',\
            'normal', 'auto', 'image', 'square'***REMOVED***
            Optional positional argument

            Axis data limits set from a list; or a command relating to axes:

                ========== ================================================
                Value      Description
                ========== ================================================
                'on'       Toggle axis lines and labels on
                'off'      Toggle axis lines and labels off
                'equal'    Equal scaling by changing limits
                'scaled'   Equal scaling by changing box dimensions
                'tight'    Limits set such that all data is shown
                'auto'     Automatic scaling, fill rectangle with data
                'normal'   Same as 'auto'; deprecated
                'image'    'scaled' with axis limits equal to data limits
                'square'   Square plot; similar to 'scaled', but initially\
                           forcing xmax-xmin = ymax-ymin
                ========== ================================================

        emit : bool, optional
            Passed to set_{x,y***REMOVED***lim functions, if observers
            are notified of axis limit change

        xmin, ymin, xmax, ymax : float, optional
            The axis limits to be set

        Returns
        -------
        xmin, xmax, ymin, ymax : float
            The axis limits

        ***REMOVED***

        if len(v***REMOVED*** == 0 and len(kwargs***REMOVED*** == 0:
            xmin, xmax = self.get_xlim(***REMOVED***
            ymin, ymax = self.get_ylim(***REMOVED***
            return xmin, xmax, ymin, ymax

        emit = kwargs.get('emit', True***REMOVED***

        if len(v***REMOVED*** == 1 and is_string_like(v[0***REMOVED******REMOVED***:
            s = v[0***REMOVED***.lower(***REMOVED***
            if s == 'on':
                self.set_axis_on(***REMOVED***
            elif s == 'off':
                self.set_axis_off(***REMOVED***
            elif s in ('equal', 'tight', 'scaled', 'normal',
                       'auto', 'image', 'square'***REMOVED***:
                self.set_autoscale_on(True***REMOVED***
                self.set_aspect('auto'***REMOVED***
                self.autoscale_view(tight=False***REMOVED***
                # self.apply_aspect(***REMOVED***
                if s == 'equal':
                    self.set_aspect('equal', adjustable='datalim'***REMOVED***
                elif s == 'scaled':
                    self.set_aspect('equal', adjustable='box', anchor='C'***REMOVED***
                    self.set_autoscale_on(False***REMOVED***  # Req. by Mark Bakker
                elif s == 'tight':
                    self.autoscale_view(tight=True***REMOVED***
                    self.set_autoscale_on(False***REMOVED***
                elif s == 'image':
                    self.autoscale_view(tight=True***REMOVED***
                    self.set_autoscale_on(False***REMOVED***
                    self.set_aspect('equal', adjustable='box', anchor='C'***REMOVED***
                elif s == 'square':
                    self.set_aspect('equal', adjustable='box', anchor='C'***REMOVED***
                    self.set_autoscale_on(False***REMOVED***
                    xlim = self.get_xlim(***REMOVED***
                    ylim = self.get_ylim(***REMOVED***
                    edge_size = max(np.diff(xlim***REMOVED***, np.diff(ylim***REMOVED******REMOVED***
                    self.set_xlim([xlim[0***REMOVED***, xlim[0***REMOVED*** + edge_size***REMOVED***,
                                  emit=emit, auto=False***REMOVED***
                    self.set_ylim([ylim[0***REMOVED***, ylim[0***REMOVED*** + edge_size***REMOVED***,
                                  emit=emit, auto=False***REMOVED***
            else:
                raise ValueError('Unrecognized string %s to axis; '
                                 'try on or off' % s***REMOVED***
            xmin, xmax = self.get_xlim(***REMOVED***
            ymin, ymax = self.get_ylim(***REMOVED***
            return xmin, xmax, ymin, ymax

        ***REMOVED***
            v[0***REMOVED***
        except IndexError:
            xmin = kwargs.get('xmin', None***REMOVED***
            xmax = kwargs.get('xmax', None***REMOVED***
            auto = False  # turn off autoscaling, unless...
            if xmin is None and xmax is None:
                auto = None  # leave autoscaling state alone
            xmin, xmax = self.set_xlim(xmin, xmax, emit=emit, auto=auto***REMOVED***

            ymin = kwargs.get('ymin', None***REMOVED***
            ymax = kwargs.get('ymax', None***REMOVED***
            auto = False  # turn off autoscaling, unless...
            if ymin is None and ymax is None:
                auto = None  # leave autoscaling state alone
            ymin, ymax = self.set_ylim(ymin, ymax, emit=emit, auto=auto***REMOVED***
            return xmin, xmax, ymin, ymax

        v = v[0***REMOVED***
        if len(v***REMOVED*** != 4:
            raise ValueError('v must contain [xmin xmax ymin ymax***REMOVED***'***REMOVED***

        self.set_xlim([v[0***REMOVED***, v[1***REMOVED******REMOVED***, emit=emit, auto=False***REMOVED***
        self.set_ylim([v[2***REMOVED***, v[3***REMOVED******REMOVED***, emit=emit, auto=False***REMOVED***

        return v

    def get_legend(self***REMOVED***:
        ***REMOVED***
        Return the legend.Legend instance, or None if no legend is defined
        ***REMOVED***
        return self.legend_

    def get_images(self***REMOVED***:
        ***REMOVED***return a list of Axes images contained by the Axes***REMOVED***
        return cbook.silent_list('AxesImage', self.images***REMOVED***

    def get_lines(self***REMOVED***:
        ***REMOVED***Return a list of lines contained by the Axes***REMOVED***
        return cbook.silent_list('Line2D', self.lines***REMOVED***

    def get_xaxis(self***REMOVED***:
        ***REMOVED***Return the XAxis instance***REMOVED***
        return self.xaxis

    def get_xgridlines(self***REMOVED***:
        ***REMOVED***Get the x grid lines as a list of Line2D instances***REMOVED***
        return cbook.silent_list('Line2D xgridline',
                                 self.xaxis.get_gridlines(***REMOVED******REMOVED***

    def get_xticklines(self***REMOVED***:
        ***REMOVED***Get the xtick lines as a list of Line2D instances***REMOVED***
        return cbook.silent_list('Text xtickline',
                                 self.xaxis.get_ticklines(***REMOVED******REMOVED***

    def get_yaxis(self***REMOVED***:
        ***REMOVED***Return the YAxis instance***REMOVED***
        return self.yaxis

    def get_ygridlines(self***REMOVED***:
        ***REMOVED***Get the y grid lines as a list of Line2D instances***REMOVED***
        return cbook.silent_list('Line2D ygridline',
                                 self.yaxis.get_gridlines(***REMOVED******REMOVED***

    def get_yticklines(self***REMOVED***:
        ***REMOVED***Get the ytick lines as a list of Line2D instances***REMOVED***
        return cbook.silent_list('Line2D ytickline',
                                 self.yaxis.get_ticklines(***REMOVED******REMOVED***

    # Adding and tracking artists

    def _sci(self, im***REMOVED***:
        ***REMOVED***
        helper for :func:`~matplotlib.pyplot.sci`;
        do not use elsewhere.
        ***REMOVED***
        if isinstance(im, matplotlib.contour.ContourSet***REMOVED***:
            if im.collections[0***REMOVED*** not in self.collections:
                raise ValueError(
                    "ContourSet must be in current Axes"***REMOVED***
        elif im not in self.images and im not in self.collections:
            raise ValueError(
                "Argument must be an image, collection, or ContourSet in "
                "this Axes"***REMOVED***
        self._current_image = im

    def _gci(self***REMOVED***:
        ***REMOVED***
        Helper for :func:`~matplotlib.pyplot.gci`;
        do not use elsewhere.
        ***REMOVED***
        return self._current_image

    def has_data(self***REMOVED***:
        ***REMOVED***
        Return *True* if any artists have been added to axes.

        This should not be used to determine whether the *dataLim*
        need to be updated, and may not actually be useful for
        anything.
        ***REMOVED***
        return (
            len(self.collections***REMOVED*** +
            len(self.images***REMOVED*** +
            len(self.lines***REMOVED*** +
            len(self.patches***REMOVED******REMOVED*** > 0

    def add_artist(self, a***REMOVED***:
        ***REMOVED***Add any :class:`~matplotlib.artist.Artist` to the axes.

        Use `add_artist` only for artists for which there is no dedicated
        "add" method; and if necessary, use a method such as
        `update_datalim` or `update_datalim_numerix` to manually update the
        dataLim if the artist is to be included in autoscaling.

        Returns the artist.
        ***REMOVED***
        a.axes = self
        self.artists.append(a***REMOVED***
        self._set_artist_props(a***REMOVED***
        a.set_clip_path(self.patch***REMOVED***
        a._remove_method = lambda h: self.artists.remove(h***REMOVED***
        self.stale = True
        return a

    def add_collection(self, collection, autolim=True***REMOVED***:
        ***REMOVED***
        Add a :class:`~matplotlib.collections.Collection` instance
        to the axes.

        Returns the collection.
        ***REMOVED***
        label = collection.get_label(***REMOVED***
        if not label:
            collection.set_label('_collection%d' % len(self.collections***REMOVED******REMOVED***
        self.collections.append(collection***REMOVED***
        self._set_artist_props(collection***REMOVED***

        if collection.get_clip_path(***REMOVED*** is None:
            collection.set_clip_path(self.patch***REMOVED***

        if autolim:
            self.update_datalim(collection.get_datalim(self.transData***REMOVED******REMOVED***

        collection._remove_method = lambda h: self.collections.remove(h***REMOVED***
        self.stale = True
        return collection

    def add_image(self, image***REMOVED***:
        ***REMOVED***
        Add a :class:`~matplotlib.image.AxesImage` to the axes.

        Returns the image.
        ***REMOVED***
        self._set_artist_props(image***REMOVED***
        self.images.append(image***REMOVED***
        image._remove_method = lambda h: self.images.remove(h***REMOVED***
        self.stale = True
        return image

    def add_line(self, line***REMOVED***:
        ***REMOVED***
        Add a :class:`~matplotlib.lines.Line2D` to the list of plot
        lines

        Returns the line.
        ***REMOVED***
        self._set_artist_props(line***REMOVED***
        if line.get_clip_path(***REMOVED*** is None:
            line.set_clip_path(self.patch***REMOVED***

        self._update_line_limits(line***REMOVED***
        if not line.get_label(***REMOVED***:
            line.set_label('_line%d' % len(self.lines***REMOVED******REMOVED***
        self.lines.append(line***REMOVED***
        line._remove_method = lambda h: self.lines.remove(h***REMOVED***
        self.stale = True
        return line

    def _add_text(self, txt***REMOVED***:
        ***REMOVED***

        ***REMOVED***
        self._set_artist_props(txt***REMOVED***
        self.texts.append(txt***REMOVED***
        txt._remove_method = lambda h: self.texts.remove(h***REMOVED***
        self.stale = True
        return txt

    def _update_line_limits(self, line***REMOVED***:
        ***REMOVED***
        Figures out the data limit of the given line, updating self.dataLim.
        ***REMOVED***
        path = line.get_path(***REMOVED***
        if path.vertices.size == 0:
            return

        line_trans = line.get_transform(***REMOVED***

        if line_trans == self.transData:
            data_path = path

        elif any(line_trans.contains_branch_seperately(self.transData***REMOVED******REMOVED***:
            # identify the transform to go from line's coordinates
            # to data coordinates
            trans_to_data = line_trans - self.transData

            # if transData is affine we can use the cached non-affine component
            # of line's path. (since the non-affine part of line_trans is
            # entirely encapsulated in trans_to_data***REMOVED***.
            if self.transData.is_affine:
                line_trans_path = line._get_transformed_path(***REMOVED***
                na_path, _ = line_trans_path.get_transformed_path_and_affine(***REMOVED***
                data_path = trans_to_data.transform_path_affine(na_path***REMOVED***
            else:
                data_path = trans_to_data.transform_path(path***REMOVED***
        else:
            # for backwards compatibility we update the dataLim with the
            # coordinate range of the given path, even though the coordinate
            # systems are completely different. This may occur in situations
            # such as when ax.transAxes is passed through for absolute
            # positioning.
            data_path = path

        if data_path.vertices.size > 0:
            updatex, updatey = line_trans.contains_branch_seperately(
                self.transData***REMOVED***
            self.dataLim.update_from_path(data_path,
                                          self.ignore_existing_data_limits,
                                          updatex=updatex,
                                          updatey=updatey***REMOVED***
            self.ignore_existing_data_limits = False

    def add_patch(self, p***REMOVED***:
        ***REMOVED***
        Add a :class:`~matplotlib.patches.Patch` *p* to the list of
        axes patches; the clipbox will be set to the Axes clipping
        box.  If the transform is not set, it will be set to
        :attr:`transData`.

        Returns the patch.
        ***REMOVED***

        self._set_artist_props(p***REMOVED***
        if p.get_clip_path(***REMOVED*** is None:
            p.set_clip_path(self.patch***REMOVED***
        self._update_patch_limits(p***REMOVED***
        self.patches.append(p***REMOVED***
        p._remove_method = lambda h: self.patches.remove(h***REMOVED***
        return p

    def _update_patch_limits(self, patch***REMOVED***:
        ***REMOVED***update the data limits for patch *p****REMOVED***
        # hist can add zero height Rectangles, which is useful to keep
        # the bins, counts and patches lined up, but it throws off log
        # scaling.  We'll ignore rects with zero height or width in
        # the auto-scaling

        # cannot check for '==0' since unitized data may not compare to zero
        # issue #2150 - we update the limits if patch has non zero width
        # or height.
        if (isinstance(patch, mpatches.Rectangle***REMOVED*** and
                ((not patch.get_width(***REMOVED******REMOVED*** and (not patch.get_height(***REMOVED******REMOVED******REMOVED******REMOVED***:
            return
        vertices = patch.get_path(***REMOVED***.vertices
        if vertices.size > 0:
            xys = patch.get_patch_transform(***REMOVED***.transform(vertices***REMOVED***
            if patch.get_data_transform(***REMOVED*** != self.transData:
                patch_to_data = (patch.get_data_transform(***REMOVED*** -
                                 self.transData***REMOVED***
                xys = patch_to_data.transform(xys***REMOVED***

            updatex, updatey = patch.get_transform(***REMOVED***.\
                contains_branch_seperately(self.transData***REMOVED***
            self.update_datalim(xys, updatex=updatex,
                                updatey=updatey***REMOVED***

    def add_table(self, tab***REMOVED***:
        ***REMOVED***
        Add a :class:`~matplotlib.tables.Table` instance to the
        list of axes tables

        Returns the table.
        ***REMOVED***
        self._set_artist_props(tab***REMOVED***
        self.tables.append(tab***REMOVED***
        tab.set_clip_path(self.patch***REMOVED***
        tab._remove_method = lambda h: self.tables.remove(h***REMOVED***
        return tab

    def add_container(self, container***REMOVED***:
        ***REMOVED***
        Add a :class:`~matplotlib.container.Container` instance
        to the axes.

        Returns the collection.
        ***REMOVED***
        label = container.get_label(***REMOVED***
        if not label:
            container.set_label('_container%d' % len(self.containers***REMOVED******REMOVED***
        self.containers.append(container***REMOVED***
        container.set_remove_method(lambda h: self.containers.remove(h***REMOVED******REMOVED***
        return container

    def relim(self, visible_only=False***REMOVED***:
        ***REMOVED***
        Recompute the data limits based on current artists. If you want to
        exclude invisible artists from the calculation, set
        ``visible_only=True``

        At present, :class:`~matplotlib.collections.Collection`
        instances are not supported.
        ***REMOVED***
        # Collections are deliberately not supported (yet***REMOVED***; see
        # the TODO note in artists.py.
        self.dataLim.ignore(True***REMOVED***
        self.dataLim.set_points(mtransforms.Bbox.null(***REMOVED***.get_points(***REMOVED******REMOVED***
        self.ignore_existing_data_limits = True

        for line in self.lines:
            if not visible_only or line.get_visible(***REMOVED***:
                self._update_line_limits(line***REMOVED***

        for p in self.patches:
            if not visible_only or p.get_visible(***REMOVED***:
                self._update_patch_limits(p***REMOVED***

    def update_datalim(self, xys, updatex=True, updatey=True***REMOVED***:
        ***REMOVED***
        Update the data lim bbox with seq of xy tups or equiv. 2-D array
        ***REMOVED***
        # if no data is set currently, the bbox will ignore its
        # limits and set the bound to be the bounds of the xydata.
        # Otherwise, it will compute the bounds of it's current data
        # and the data in xydata

        if iterable(xys***REMOVED*** and not len(xys***REMOVED***:
            return
        if not ma.isMaskedArray(xys***REMOVED***:
            xys = np.asarray(xys***REMOVED***
        self.dataLim.update_from_data_xy(xys, self.ignore_existing_data_limits,
                                         updatex=updatex, updatey=updatey***REMOVED***
        self.ignore_existing_data_limits = False

    def update_datalim_numerix(self, x, y***REMOVED***:
        ***REMOVED***
        Update the data lim bbox with seq of xy tups
        ***REMOVED***
        # if no data is set currently, the bbox will ignore it's
        # limits and set the bound to be the bounds of the xydata.
        # Otherwise, it will compute the bounds of it's current data
        # and the data in xydata
        if iterable(x***REMOVED*** and not len(x***REMOVED***:
            return
        self.dataLim.update_from_data(x, y, self.ignore_existing_data_limits***REMOVED***
        self.ignore_existing_data_limits = False

    def update_datalim_bounds(self, bounds***REMOVED***:
        ***REMOVED***
        Update the datalim to include the given
        :class:`~matplotlib.transforms.Bbox` *bounds*
        ***REMOVED***
        self.dataLim.set(mtransforms.Bbox.union([self.dataLim, bounds***REMOVED******REMOVED******REMOVED***

    def _process_unit_info(self, xdata=None, ydata=None, kwargs=None***REMOVED***:
        ***REMOVED***Look for unit *kwargs* and update the axis instances as necessary***REMOVED***

        if self.xaxis is None or self.yaxis is None:
            return

        if xdata is not None:
            # we only need to update if there is nothing set yet.
            if not self.xaxis.have_units(***REMOVED***:
                self.xaxis.update_units(xdata***REMOVED***

        if ydata is not None:
            # we only need to update if there is nothing set yet.
            if not self.yaxis.have_units(***REMOVED***:
                self.yaxis.update_units(ydata***REMOVED***

        # process kwargs 2nd since these will override default units
        if kwargs is not None:
            xunits = kwargs.pop('xunits', self.xaxis.units***REMOVED***
            if self.name == 'polar':
                xunits = kwargs.pop('thetaunits', xunits***REMOVED***
            if xunits != self.xaxis.units:
                self.xaxis.set_units(xunits***REMOVED***
                # If the units being set imply a different converter,
                # we need to update.
                if xdata is not None:
                    self.xaxis.update_units(xdata***REMOVED***

            yunits = kwargs.pop('yunits', self.yaxis.units***REMOVED***
            if self.name == 'polar':
                yunits = kwargs.pop('runits', yunits***REMOVED***
            if yunits != self.yaxis.units:
                self.yaxis.set_units(yunits***REMOVED***
                # If the units being set imply a different converter,
                # we need to update.
                if ydata is not None:
                    self.yaxis.update_units(ydata***REMOVED***

    def in_axes(self, mouseevent***REMOVED***:
        ***REMOVED***
        Return *True* if the given *mouseevent* (in display coords***REMOVED***
        is in the Axes
        ***REMOVED***
        return self.patch.contains(mouseevent***REMOVED***[0***REMOVED***

    def get_autoscale_on(self***REMOVED***:
        ***REMOVED***
        Get whether autoscaling is applied for both axes on plot commands
        ***REMOVED***
        return self._autoscaleXon and self._autoscaleYon

    def get_autoscalex_on(self***REMOVED***:
        ***REMOVED***
        Get whether autoscaling for the x-axis is applied on plot commands
        ***REMOVED***
        return self._autoscaleXon

    def get_autoscaley_on(self***REMOVED***:
        ***REMOVED***
        Get whether autoscaling for the y-axis is applied on plot commands
        ***REMOVED***
        return self._autoscaleYon

    def set_autoscale_on(self, b***REMOVED***:
        ***REMOVED***
        Set whether autoscaling is applied on plot commands

        accepts: [ *True* | *False* ***REMOVED***
        ***REMOVED***
        self._autoscaleXon = b
        self._autoscaleYon = b

    def set_autoscalex_on(self, b***REMOVED***:
        ***REMOVED***
        Set whether autoscaling for the x-axis is applied on plot commands

        accepts: [ *True* | *False* ***REMOVED***
        ***REMOVED***
        self._autoscaleXon = b

    def set_autoscaley_on(self, b***REMOVED***:
        ***REMOVED***
        Set whether autoscaling for the y-axis is applied on plot commands

        accepts: [ *True* | *False* ***REMOVED***
        ***REMOVED***
        self._autoscaleYon = b

    def set_xmargin(self, m***REMOVED***:
        ***REMOVED***
        Set padding of X data limits prior to autoscaling.

        *m* times the data interval will be added to each
        end of that interval before it is used in autoscaling.

        accepts: float in range 0 to 1
        ***REMOVED***
        if m < 0 or m > 1:
            raise ValueError("margin must be in range 0 to 1"***REMOVED***
        self._xmargin = m
        self.stale = True

    def set_ymargin(self, m***REMOVED***:
        ***REMOVED***
        Set padding of Y data limits prior to autoscaling.

        *m* times the data interval will be added to each
        end of that interval before it is used in autoscaling.

        accepts: float in range 0 to 1
        ***REMOVED***
        if m < 0 or m > 1:
            raise ValueError("margin must be in range 0 to 1"***REMOVED***
        self._ymargin = m
        self.stale = True

    def margins(self, *args, **kw***REMOVED***:
        ***REMOVED***
        Set or retrieve autoscaling margins.

        signatures::

            margins(***REMOVED***

        returns xmargin, ymargin

        ::

            margins(margin***REMOVED***

            margins(xmargin, ymargin***REMOVED***

            margins(x=xmargin, y=ymargin***REMOVED***

            margins(..., tight=False***REMOVED***

        All three forms above set the xmargin and ymargin parameters.
        All keyword parameters are optional.  A single argument
        specifies both xmargin and ymargin.  The *tight* parameter
        is passed to :meth:`autoscale_view`, which is executed after
        a margin is changed; the default here is *True*, on the
        assumption that when margins are specified, no additional
        padding to match tick marks is usually desired.  Setting
        *tight* to *None* will preserve the previous setting.

        Specifying any margin changes only the autoscaling; for example,
        if *xmargin* is not None, then *xmargin* times the X data
        interval will be added to each end of that interval before
        it is used in autoscaling.

        ***REMOVED***
        if not args and not kw:
            return self._xmargin, self._ymargin

        tight = kw.pop('tight', True***REMOVED***
        mx = kw.pop('x', None***REMOVED***
        my = kw.pop('y', None***REMOVED***
        if len(args***REMOVED*** == 1:
            mx = my = args[0***REMOVED***
        elif len(args***REMOVED*** == 2:
            mx, my = args
        elif len(args***REMOVED*** > 2:
            raise ValueError("more than two arguments were supplied"***REMOVED***
        if mx is not None:
            self.set_xmargin(mx***REMOVED***
        if my is not None:
            self.set_ymargin(my***REMOVED***

        scalex = (mx is not None***REMOVED***
        scaley = (my is not None***REMOVED***

        self.autoscale_view(tight=tight, scalex=scalex, scaley=scaley***REMOVED***

    def set_rasterization_zorder(self, z***REMOVED***:
        ***REMOVED***
        Set zorder value below which artists will be rasterized.  Set
        to `None` to disable rasterizing of artists below a particular
        zorder.
        ***REMOVED***
        self._rasterization_zorder = z
        self.stale = True

    def get_rasterization_zorder(self***REMOVED***:
        ***REMOVED***
        Get zorder value below which artists will be rasterized
        ***REMOVED***
        return self._rasterization_zorder

    def autoscale(self, enable=True, axis='both', tight=None***REMOVED***:
        ***REMOVED***
        Autoscale the axis view to the data (toggle***REMOVED***.

        Convenience method for simple axis view autoscaling.
        It turns autoscaling on or off, and then,
        if autoscaling for either axis is on, it performs
        the autoscaling on the specified axis or axes.

        *enable*: [True | False | None***REMOVED***
            True (default***REMOVED*** turns autoscaling on, False turns it off.
            None leaves the autoscaling state unchanged.

        *axis*: ['x' | 'y' | 'both'***REMOVED***
            which axis to operate on; default is 'both'

        *tight*: [True | False | None***REMOVED***
            If True, set view limits to data limits;
            if False, let the locator and margins expand the view limits;
            if None, use tight scaling if the only artist is an image,
            otherwise treat *tight* as False.
            The *tight* setting is retained for future autoscaling
            until it is explicitly changed.


        Returns None.
        ***REMOVED***
        if enable is None:
            scalex = True
            scaley = True
        else:
            scalex = False
            scaley = False
            if axis in ['x', 'both'***REMOVED***:
                self._autoscaleXon = bool(enable***REMOVED***
                scalex = self._autoscaleXon
            if axis in ['y', 'both'***REMOVED***:
                self._autoscaleYon = bool(enable***REMOVED***
                scaley = self._autoscaleYon
        self.autoscale_view(tight=tight, scalex=scalex, scaley=scaley***REMOVED***

    def autoscale_view(self, tight=None, scalex=True, scaley=True***REMOVED***:
        ***REMOVED***
        Autoscale the view limits using the data limits. You can
        selectively autoscale only a single axis, e.g., the xaxis by
        setting *scaley* to *False*.  The autoscaling preserves any
        axis direction reversal that has already been done.

        The data limits are not updated automatically when artist data are
        changed after the artist has been added to an Axes instance.  In that
        case, use :meth:`matplotlib.axes.Axes.relim` prior to calling
        autoscale_view.
        ***REMOVED***
        if tight is None:
            # if image data only just use the datalim
            _tight = self._tight or (len(self.images***REMOVED*** > 0 and
                                     len(self.lines***REMOVED*** == 0 and
                                     len(self.patches***REMOVED*** == 0***REMOVED***
        else:
            _tight = self._tight = bool(tight***REMOVED***

        if scalex and self._autoscaleXon:
            xshared = self._shared_x_axes.get_siblings(self***REMOVED***
            dl = [ax.dataLim for ax in xshared***REMOVED***
            # ignore non-finite data limits if good limits exist
            finite_dl = [d for d in dl if np.isfinite(d***REMOVED***.all(***REMOVED******REMOVED***
            if len(finite_dl***REMOVED***:
                dl = finite_dl

            bb = mtransforms.BboxBase.union(dl***REMOVED***
            x0, x1 = bb.intervalx
            xlocator = self.xaxis.get_major_locator(***REMOVED***
            ***REMOVED***
                # e.g., DateLocator has its own nonsingular(***REMOVED***
                x0, x1 = xlocator.nonsingular(x0, x1***REMOVED***
            except AttributeError:
                # Default nonsingular for, e.g., MaxNLocator
                x0, x1 = mtransforms.nonsingular(x0, x1, increasing=False,
                                                 expander=0.05***REMOVED***
            if self._xmargin > 0:
                delta = (x1 - x0***REMOVED*** * self._xmargin
                x0 -= delta
                x1 += delta
            if not _tight:
                x0, x1 = xlocator.view_limits(x0, x1***REMOVED***
            self.set_xbound(x0, x1***REMOVED***

        if scaley and self._autoscaleYon:
            yshared = self._shared_y_axes.get_siblings(self***REMOVED***
            dl = [ax.dataLim for ax in yshared***REMOVED***
            # ignore non-finite data limits if good limits exist
            finite_dl = [d for d in dl if np.isfinite(d***REMOVED***.all(***REMOVED******REMOVED***
            if len(finite_dl***REMOVED***:
                dl = finite_dl

            bb = mtransforms.BboxBase.union(dl***REMOVED***
            y0, y1 = bb.intervaly
            ylocator = self.yaxis.get_major_locator(***REMOVED***
            ***REMOVED***
                y0, y1 = ylocator.nonsingular(y0, y1***REMOVED***
            except AttributeError:
                y0, y1 = mtransforms.nonsingular(y0, y1, increasing=False,
                                                 expander=0.05***REMOVED***
            if self._ymargin > 0:
                delta = (y1 - y0***REMOVED*** * self._ymargin
                y0 -= delta
                y1 += delta
            if not _tight:
                y0, y1 = ylocator.view_limits(y0, y1***REMOVED***
            self.set_ybound(y0, y1***REMOVED***

    def _get_axis_list(self***REMOVED***:
        return (self.xaxis, self.yaxis***REMOVED***

    # Drawing

    @allow_rasterization
    def draw(self, renderer=None, inframe=False***REMOVED***:
        ***REMOVED***Draw everything (plot lines, axes, labels***REMOVED******REMOVED***
        if renderer is None:
            renderer = self._cachedRenderer

        if renderer is None:
            raise RuntimeError('No renderer defined'***REMOVED***
        if not self.get_visible(***REMOVED***:
            return
        renderer.open_group('axes'***REMOVED***
        # prevent triggering call backs during the draw process
        self._stale = True
        locator = self.get_axes_locator(***REMOVED***
        if locator:
            pos = locator(self, renderer***REMOVED***
            self.apply_aspect(pos***REMOVED***
        else:
            self.apply_aspect(***REMOVED***

        artists = self.get_children(***REMOVED***
        artists.remove(self.patch***REMOVED***

        # the frame draws the edges around the axes patch -- we
        # decouple these so the patch can be in the background and the
        # frame in the foreground. Do this before drawing the axis
        # objects so that the spine has the opportunity to update them.
        if not (self.axison and self._frameon***REMOVED***:
            for spine in six.itervalues(self.spines***REMOVED***:
                artists.remove(spine***REMOVED***

        if self.axison and not inframe:
            if self._axisbelow:
                self.xaxis.set_zorder(0.5***REMOVED***
                self.yaxis.set_zorder(0.5***REMOVED***
            else:
                self.xaxis.set_zorder(2.5***REMOVED***
                self.yaxis.set_zorder(2.5***REMOVED***
        else:
            for _axis in self._get_axis_list(***REMOVED***:
                artists.remove(_axis***REMOVED***

        if inframe:
            artists.remove(self.title***REMOVED***
            artists.remove(self._left_title***REMOVED***
            artists.remove(self._right_title***REMOVED***

        # add images to dsu if the backend supports compositing.
        # otherwise, does the manual compositing  without adding images to dsu.
        if len(self.images***REMOVED*** <= 1 or renderer.option_image_nocomposite(***REMOVED***:
            _do_composite = False
        else:
            _do_composite = True
            for im in self.images:
                artists.remove(im***REMOVED***

        if self.figure.canvas.is_saving(***REMOVED***:
            dsu = [(a.zorder, a***REMOVED*** for a in artists***REMOVED***
        else:
            dsu = [(a.zorder, a***REMOVED*** for a in artists
                   if (not a.get_animated(***REMOVED*** or a in self.images***REMOVED******REMOVED***

        dsu.sort(key=itemgetter(0***REMOVED******REMOVED***

        # rasterize artists with negative zorder
        # if the minimum zorder is negative, start rasterization
        rasterization_zorder = self._rasterization_zorder
        if (rasterization_zorder is not None and
                len(dsu***REMOVED*** > 0 and dsu[0***REMOVED***[0***REMOVED*** < rasterization_zorder***REMOVED***:
            renderer.start_rasterizing(***REMOVED***
            dsu_rasterized = [l for l in dsu if l[0***REMOVED*** < rasterization_zorder***REMOVED***
            dsu = [l for l in dsu if l[0***REMOVED*** >= rasterization_zorder***REMOVED***
        else:
            dsu_rasterized = [***REMOVED***

        # the patch draws the background rectangle -- the frame below
        # will draw the edges
        if self.axison and self._frameon:
            self.patch.draw(renderer***REMOVED***

        if _do_composite:
            # make a composite image, blending alpha
            # list of (mimage.Image, ox, oy***REMOVED***

            zorder_images = [(im.zorder, im***REMOVED*** for im in self.images
                             if im.get_visible(***REMOVED******REMOVED***
            zorder_images.sort(key=lambda x: x[0***REMOVED******REMOVED***

            mag = renderer.get_image_magnification(***REMOVED***
            ims = [(im.make_image(mag***REMOVED***, 0, 0, im.get_alpha(***REMOVED******REMOVED***
                   for z, im in zorder_images***REMOVED***

            l, b, r, t = self.bbox.extents
            width = int(mag * ((round(r***REMOVED*** + 0.5***REMOVED*** - (round(l***REMOVED*** - 0.5***REMOVED******REMOVED******REMOVED***
            height = int(mag * ((round(t***REMOVED*** + 0.5***REMOVED*** - (round(b***REMOVED*** - 0.5***REMOVED******REMOVED******REMOVED***
            im = mimage.from_images(height,
                                    width,
                                    ims***REMOVED***

            im.is_grayscale = False
            l, b, w, h = self.bbox.bounds
            # composite images need special args so they will not
            # respect z-order for now

            gc = renderer.new_gc(***REMOVED***
            gc.set_clip_rectangle(self.bbox***REMOVED***
            gc.set_clip_path(mtransforms.TransformedPath(
                self.patch.get_path(***REMOVED***,
                self.patch.get_transform(***REMOVED******REMOVED******REMOVED***

            renderer.draw_image(gc, round(l***REMOVED***, round(b***REMOVED***, im***REMOVED***
            gc.restore(***REMOVED***

        if dsu_rasterized:
            for zorder, a in dsu_rasterized:
                a.draw(renderer***REMOVED***
            renderer.stop_rasterizing(***REMOVED***

        for zorder, a in dsu:
            a.draw(renderer***REMOVED***

        renderer.close_group('axes'***REMOVED***
        self._cachedRenderer = renderer
        self.stale = False

    def draw_artist(self, a***REMOVED***:
        ***REMOVED***
        This method can only be used after an initial draw which
        caches the renderer.  It is used to efficiently update Axes
        data (axis ticks, labels, etc are not updated***REMOVED***
        ***REMOVED***
        if self._cachedRenderer is None:
            msg = ('draw_artist can only be used after an initial draw which'
                   ' caches the render'***REMOVED***
            raise AttributeError(msg***REMOVED***
        a.draw(self._cachedRenderer***REMOVED***

    def redraw_in_frame(self***REMOVED***:
        ***REMOVED***
        This method can only be used after an initial draw which
        caches the renderer.  It is used to efficiently update Axes
        data (axis ticks, labels, etc are not updated***REMOVED***
        ***REMOVED***
        if self._cachedRenderer is None:
            msg = ('redraw_in_frame can only be used after an initial draw'
                   ' which caches the render'***REMOVED***
            raise AttributeError(msg***REMOVED***
        self.draw(self._cachedRenderer, inframe=True***REMOVED***

    def get_renderer_cache(self***REMOVED***:
        return self._cachedRenderer

    # Axes rectangle characteristics

    def get_frame_on(self***REMOVED***:
        ***REMOVED***
        Get whether the axes rectangle patch is drawn
        ***REMOVED***
        return self._frameon

    def set_frame_on(self, b***REMOVED***:
        ***REMOVED***
        Set whether the axes rectangle patch is drawn

        ACCEPTS: [ *True* | *False* ***REMOVED***
        ***REMOVED***
        self._frameon = b
        self.stale = True

    def get_axisbelow(self***REMOVED***:
        ***REMOVED***
        Get whether axis below is true or not
        ***REMOVED***
        return self._axisbelow

    def set_axisbelow(self, b***REMOVED***:
        ***REMOVED***
        Set whether the axis ticks and gridlines are above or below most
        artists

        ACCEPTS: [ *True* | *False* ***REMOVED***
        ***REMOVED***
        self._axisbelow = b
        self.stale = True

    @docstring.dedent_interpd
    def grid(self, b=None, which='major', axis='both', **kwargs***REMOVED***:
        ***REMOVED***
        Turn the axes grids on or off.

        Call signature::

           grid(self, b=None, which='major', axis='both', **kwargs***REMOVED***

        Set the axes grids on or off; *b* is a boolean.  (For MATLAB
        compatibility, *b* may also be a string, 'on' or 'off'.***REMOVED***

        If *b* is *None* and ``len(kwargs***REMOVED***==0``, toggle the grid state.  If
        *kwargs* are supplied, it is assumed that you want a grid and *b*
        is thus set to *True*.

        *which* can be 'major' (default***REMOVED***, 'minor', or 'both' to control
        whether major tick grids, minor tick grids, or both are affected.

        *axis* can be 'both' (default***REMOVED***, 'x', or 'y' to control which
        set of gridlines are drawn.

        *kwargs* are used to set the grid line properties, e.g.,::

           ax.grid(color='r', linestyle='-', linewidth=2***REMOVED***

        Valid :class:`~matplotlib.lines.Line2D` kwargs are

        %(Line2D***REMOVED***s

        ***REMOVED***
        if len(kwargs***REMOVED***:
            b = True
        b = _string_to_bool(b***REMOVED***

        if axis == 'x' or axis == 'both':
            self.xaxis.grid(b, which=which, **kwargs***REMOVED***
        if axis == 'y' or axis == 'both':
            self.yaxis.grid(b, which=which, **kwargs***REMOVED***

    def ticklabel_format(self, **kwargs***REMOVED***:
        ***REMOVED***
        Change the `~matplotlib.ticker.ScalarFormatter` used by
        default for linear axes.

        Optional keyword arguments:

          ============   =========================================
          Keyword        Description
          ============   =========================================
          *style*        [ 'sci' (or 'scientific'***REMOVED*** | 'plain' ***REMOVED***
                         plain turns off scientific notation
          *scilimits*    (m, n***REMOVED***, pair of integers; if *style*
                         is 'sci', scientific notation will
                         be used for numbers outside the range
                         10`m`:sup: to 10`n`:sup:.
                         Use (0,0***REMOVED*** to include all numbers.
          *useOffset*    [True | False | offset***REMOVED***; if True,
                         the offset will be calculated as needed;
                         if False, no offset will be used; if a
                         numeric offset is specified, it will be
                         used.
          *axis*         [ 'x' | 'y' | 'both' ***REMOVED***
          *useLocale*    If True, format the number according to
                         the current locale.  This affects things
                         such as the character used for the
                         decimal separator.  If False, use
                         C-style (English***REMOVED*** formatting.  The
                         default setting is controlled by the
                         axes.formatter.use_locale rcparam.
          ============   =========================================

        Only the major ticks are affected.
        If the method is called when the
        :class:`~matplotlib.ticker.ScalarFormatter` is not the
        :class:`~matplotlib.ticker.Formatter` being used, an
        :exc:`AttributeError` will be raised.

        ***REMOVED***
        style = kwargs.pop('style', ''***REMOVED***.lower(***REMOVED***
        scilimits = kwargs.pop('scilimits', None***REMOVED***
        useOffset = kwargs.pop('useOffset', None***REMOVED***
        useLocale = kwargs.pop('useLocale', None***REMOVED***
        axis = kwargs.pop('axis', 'both'***REMOVED***.lower(***REMOVED***
        if scilimits is not None:
            ***REMOVED***
                m, n = scilimits
                m + n + 1  # check that both are numbers
            except (ValueError, TypeError***REMOVED***:
                raise ValueError("scilimits must be a sequence of 2 integers"***REMOVED***
        if style[:3***REMOVED*** == 'sci':
            sb = True
        elif style in ['plain', 'comma'***REMOVED***:
            sb = False
            if style == 'plain':
                cb = False
            else:
                cb = True
                raise NotImplementedError("comma style remains to be added"***REMOVED***
        elif style == '':
            sb = None
        else:
            raise ValueError("%s is not a valid style value"***REMOVED***
        ***REMOVED***
            if sb is not None:
                if axis == 'both' or axis == 'x':
                    self.xaxis.major.formatter.set_scientific(sb***REMOVED***
                if axis == 'both' or axis == 'y':
                    self.yaxis.major.formatter.set_scientific(sb***REMOVED***
            if scilimits is not None:
                if axis == 'both' or axis == 'x':
                    self.xaxis.major.formatter.set_powerlimits(scilimits***REMOVED***
                if axis == 'both' or axis == 'y':
                    self.yaxis.major.formatter.set_powerlimits(scilimits***REMOVED***
            if useOffset is not None:
                if axis == 'both' or axis == 'x':
                    self.xaxis.major.formatter.set_useOffset(useOffset***REMOVED***
                if axis == 'both' or axis == 'y':
                    self.yaxis.major.formatter.set_useOffset(useOffset***REMOVED***
            if useLocale is not None:
                if axis == 'both' or axis == 'x':
                    self.xaxis.major.formatter.set_useLocale(useLocale***REMOVED***
                if axis == 'both' or axis == 'y':
                    self.yaxis.major.formatter.set_useLocale(useLocale***REMOVED***
        except AttributeError:
            raise AttributeError(
                "This method only works with the ScalarFormatter."***REMOVED***

    def locator_params(self, axis='both', tight=None, **kwargs***REMOVED***:
        ***REMOVED***
        Control behavior of tick locators.

        Keyword arguments:

        *axis*
            ['x' | 'y' | 'both'***REMOVED***  Axis on which to operate;
            default is 'both'.

        *tight*
            [True | False | None***REMOVED*** Parameter passed to :meth:`autoscale_view`.
            Default is None, for no change.

        Remaining keyword arguments are passed to directly to the
        :meth:`~matplotlib.ticker.MaxNLocator.set_params` method.

        Typically one might want to reduce the maximum number
        of ticks and use tight bounds when plotting small
        subplots, for example::

            ax.locator_params(tight=True, nbins=4***REMOVED***

        Because the locator is involved in autoscaling,
        :meth:`autoscale_view` is called automatically after
        the parameters are changed.

        This presently works only for the
        :class:`~matplotlib.ticker.MaxNLocator` used
        by default on linear axes, but it may be generalized.
        ***REMOVED***
        _x = axis in ['x', 'both'***REMOVED***
        _y = axis in ['y', 'both'***REMOVED***
        if _x:
            self.xaxis.get_major_locator(***REMOVED***.set_params(**kwargs***REMOVED***
        if _y:
            self.yaxis.get_major_locator(***REMOVED***.set_params(**kwargs***REMOVED***
        self.autoscale_view(tight=tight, scalex=_x, scaley=_y***REMOVED***

    def tick_params(self, axis='both', **kwargs***REMOVED***:
        ***REMOVED***
        Change the appearance of ticks and tick labels.

        Keyword arguments:

        *axis* : ['x' | 'y' | 'both'***REMOVED***
            Axis on which to operate; default is 'both'.

        *reset* : [True | False***REMOVED***
            If *True*, set all parameters to defaults
            before processing other keyword arguments.  Default is
            *False*.

        *which* : ['major' | 'minor' | 'both'***REMOVED***
            Default is 'major'; apply arguments to *which* ticks.

        *direction* : ['in' | 'out' | 'inout'***REMOVED***
            Puts ticks inside the axes, outside the axes, or both.

        *length*
            Tick length in points.

        *width*
            Tick width in points.

        *color*
            Tick color; accepts any mpl color spec.

        *pad*
            Distance in points between tick and label.

        *labelsize*
            Tick label font size in points or as a string (e.g., 'large'***REMOVED***.

        *labelcolor*
            Tick label color; mpl color spec.

        *colors*
            Changes the tick color and the label color to the same value:
            mpl color spec.

        *zorder*
            Tick and label zorder.

        *bottom*, *top*, *left*, *right* : [bool | 'on' | 'off'***REMOVED***
            controls whether to draw the respective ticks.

        *labelbottom*, *labeltop*, *labelleft*, *labelright*
            Boolean or ['on' | 'off'***REMOVED***, controls whether to draw the
            respective tick labels.

        Example::

            ax.tick_params(direction='out', length=6, width=2, colors='r'***REMOVED***

        This will make all major ticks be red, pointing out of the box,
        and with dimensions 6 points by 2 points.  Tick labels will
        also be red.

        ***REMOVED***
        if axis in ['x', 'both'***REMOVED***:
            xkw = dict(kwargs***REMOVED***
            xkw.pop('left', None***REMOVED***
            xkw.pop('right', None***REMOVED***
            xkw.pop('labelleft', None***REMOVED***
            xkw.pop('labelright', None***REMOVED***
            self.xaxis.set_tick_params(**xkw***REMOVED***
        if axis in ['y', 'both'***REMOVED***:
            ykw = dict(kwargs***REMOVED***
            ykw.pop('top', None***REMOVED***
            ykw.pop('bottom', None***REMOVED***
            ykw.pop('labeltop', None***REMOVED***
            ykw.pop('labelbottom', None***REMOVED***
            self.yaxis.set_tick_params(**ykw***REMOVED***

    def set_axis_off(self***REMOVED***:
        ***REMOVED***turn off the axis***REMOVED***
        self.axison = False
        self.stale = True

    def set_axis_on(self***REMOVED***:
        ***REMOVED***turn on the axis***REMOVED***
        self.axison = True
        self.stale = True

    def get_axis_bgcolor(self***REMOVED***:
        ***REMOVED***Return the axis background color***REMOVED***
        return self._axisbg

    def set_axis_bgcolor(self, color***REMOVED***:
        ***REMOVED***
        set the axes background color

        ACCEPTS: any matplotlib color - see
        :func:`~matplotlib.pyplot.colors`
        ***REMOVED***

        self._axisbg = color
        self.patch.set_facecolor(color***REMOVED***
        self.stale = True
    # data limits, ticks, tick labels, and formatting

    def invert_xaxis(self***REMOVED***:
        "Invert the x-axis."
        left, right = self.get_xlim(***REMOVED***
        self.set_xlim(right, left, auto=None***REMOVED***

    def xaxis_inverted(self***REMOVED***:
        ***REMOVED***Returns *True* if the x-axis is inverted.***REMOVED***
        left, right = self.get_xlim(***REMOVED***
        return right < left

    def get_xbound(self***REMOVED***:
        ***REMOVED***
        Returns the x-axis numerical bounds where::

          lowerBound < upperBound

        ***REMOVED***
        left, right = self.get_xlim(***REMOVED***
        if left < right:
            return left, right
        else:
            return right, left

    def set_xbound(self, lower=None, upper=None***REMOVED***:
        ***REMOVED***
        Set the lower and upper numerical bounds of the x-axis.
        This method will honor axes inversion regardless of parameter order.
        It will not change the _autoscaleXon attribute.
        ***REMOVED***
        if upper is None and iterable(lower***REMOVED***:
            lower, upper = lower

        old_lower, old_upper = self.get_xbound(***REMOVED***

        if lower is None:
            lower = old_lower
        if upper is None:
            upper = old_upper

        if self.xaxis_inverted(***REMOVED***:
            if lower < upper:
                self.set_xlim(upper, lower, auto=None***REMOVED***
            else:
                self.set_xlim(lower, upper, auto=None***REMOVED***
        else:
            if lower < upper:
                self.set_xlim(lower, upper, auto=None***REMOVED***
            else:
                self.set_xlim(upper, lower, auto=None***REMOVED***

    def get_xlim(self***REMOVED***:
        ***REMOVED***
        Get the x-axis range [*left*, *right****REMOVED***
        ***REMOVED***
        return tuple(self.viewLim.intervalx***REMOVED***

    def set_xlim(self, left=None, right=None, emit=True, auto=False, **kw***REMOVED***:
        ***REMOVED***
        Call signature::

          set_xlim(self, *args, **kwargs***REMOVED***:

        Set the data limits for the xaxis

        Examples::

          set_xlim((left, right***REMOVED******REMOVED***
          set_xlim(left, right***REMOVED***
          set_xlim(left=1***REMOVED*** # right unchanged
          set_xlim(right=1***REMOVED*** # left unchanged

        Keyword arguments:

          *left*: scalar
            The left xlim; *xmin*, the previous name, may still be used

          *right*: scalar
            The right xlim; *xmax*, the previous name, may still be used

          *emit*: [ *True* | *False* ***REMOVED***
            Notify observers of limit change

          *auto*: [ *True* | *False* | *None* ***REMOVED***
            Turn *x* autoscaling on (*True****REMOVED***, off (*False*; default***REMOVED***,
            or leave unchanged (*None****REMOVED***

        Note, the *left* (formerly *xmin****REMOVED*** value may be greater than
        the *right* (formerly *xmax****REMOVED***.
        For example, suppose *x* is years before present.
        Then one might use::

          set_ylim(5000, 0***REMOVED***

        so 5000 years ago is on the left of the plot and the
        present is on the right.

        Returns the current xlimits as a length 2 tuple

        ACCEPTS: length 2 sequence of floats
        ***REMOVED***
        if 'xmin' in kw:
            left = kw.pop('xmin'***REMOVED***
        if 'xmax' in kw:
            right = kw.pop('xmax'***REMOVED***
        if kw:
            raise ValueError("unrecognized kwargs: %s" %
                             list(six.iterkeys(kw***REMOVED******REMOVED******REMOVED***

        if right is None and iterable(left***REMOVED***:
            left, right = left

        self._process_unit_info(xdata=(left, right***REMOVED******REMOVED***
        if left is not None:
            left = self.convert_xunits(left***REMOVED***
        if right is not None:
            right = self.convert_xunits(right***REMOVED***

        old_left, old_right = self.get_xlim(***REMOVED***
        if left is None:
            left = old_left
        if right is None:
            right = old_right

        if left == right:
            warnings.warn(
                ('Attempting to set identical left==right results\n'
                 'in singular transformations; automatically expanding.\n'
                 'left=%s, right=%s'***REMOVED*** % (left, right***REMOVED******REMOVED***
        left, right = mtransforms.nonsingular(left, right, increasing=False***REMOVED***
        left, right = self.xaxis.limit_range_for_scale(left, right***REMOVED***

        self.viewLim.intervalx = (left, right***REMOVED***
        if auto is not None:
            self._autoscaleXon = bool(auto***REMOVED***

        if emit:
            self.callbacks.process('xlim_changed', self***REMOVED***
            # Call all of the other x-axes that are shared with this one
            for other in self._shared_x_axes.get_siblings(self***REMOVED***:
                if other is not self:
                    other.set_xlim(self.viewLim.intervalx,
                                   emit=False, auto=auto***REMOVED***
                    if (other.figure != self.figure and
                            other.figure.canvas is not None***REMOVED***:
                        other.figure.canvas.draw_idle(***REMOVED***
        self.stale = True
        return left, right

    def get_xscale(self***REMOVED***:
        return self.xaxis.get_scale(***REMOVED***
    get_xscale.__doc__ = "Return the xaxis scale string: %s***REMOVED*** % (
        ", ".join(mscale.get_scale_names(***REMOVED******REMOVED******REMOVED***

    @docstring.dedent_interpd
    def set_xscale(self, value, **kwargs***REMOVED***:
        ***REMOVED***
        Call signature::

          set_xscale(value***REMOVED***

        Set the scaling of the x-axis: %(scale***REMOVED***s

        ACCEPTS: [%(scale***REMOVED***s***REMOVED***

        Different kwargs are accepted, depending on the scale:
        %(scale_docs***REMOVED***s
        ***REMOVED***
        # If the scale is being set to log, clip nonposx to prevent headaches
        # around zero
        if value.lower(***REMOVED*** == 'log' and 'nonposx' not in kwargs.keys(***REMOVED***:
            kwargs['nonposx'***REMOVED*** = 'clip'

        g = self.get_shared_x_axes(***REMOVED***
        for ax in g.get_siblings(self***REMOVED***:
            ax.xaxis._set_scale(value, **kwargs***REMOVED***
            ax._update_transScale(***REMOVED***
            ax.stale = True

        self.autoscale_view(scaley=False***REMOVED***

    def get_xticks(self, minor=False***REMOVED***:
        ***REMOVED***Return the x ticks as a list of locations***REMOVED***
        return self.xaxis.get_ticklocs(minor=minor***REMOVED***

    def set_xticks(self, ticks, minor=False***REMOVED***:
        ***REMOVED***
        Set the x ticks with list of *ticks*

        ACCEPTS: sequence of floats
        ***REMOVED***
        ret = self.xaxis.set_ticks(ticks, minor=minor***REMOVED***
        self.stale = True
        return ret

    def get_xmajorticklabels(self***REMOVED***:
        ***REMOVED***
        Get the xtick labels as a list of :class:`~matplotlib.text.Text`
        instances.
        ***REMOVED***
        return cbook.silent_list('Text xticklabel',
                                 self.xaxis.get_majorticklabels(***REMOVED******REMOVED***

    def get_xminorticklabels(self***REMOVED***:
        ***REMOVED***
        Get the x minor tick labels as a list of
        :class:`matplotlib.text.Text` instances.
        ***REMOVED***
        return cbook.silent_list('Text xticklabel',
                                 self.xaxis.get_minorticklabels(***REMOVED******REMOVED***

    def get_xticklabels(self, minor=False, which=None***REMOVED***:
        ***REMOVED***
        Get the x tick labels as a list of :class:`~matplotlib.text.Text`
        instances.

        Parameters
        ----------
        minor : bool
           If True return the minor ticklabels,
           else return the major ticklabels

        which : None, ('minor', 'major', 'both'***REMOVED***
           Overrides `minor`.

           Selects which ticklabels to return

        Returns
        -------
        ret : list
           List of :class:`~matplotlib.text.Text` instances.
        ***REMOVED***
        return cbook.silent_list('Text xticklabel',
                                 self.xaxis.get_ticklabels(minor=minor,
                                                           which=which***REMOVED******REMOVED***

    @docstring.dedent_interpd
    def set_xticklabels(self, labels, fontdict=None, minor=False, **kwargs***REMOVED***:
        ***REMOVED***
        Call signature::

          set_xticklabels(labels, fontdict=None, minor=False, **kwargs***REMOVED***

        Set the xtick labels with list of strings *labels*. Return a
        list of axis text instances.

        *kwargs* set the :class:`~matplotlib.text.Text` properties.
        Valid properties are
        %(Text***REMOVED***s

        ACCEPTS: sequence of strings
        ***REMOVED***
        if fontdict is not None:
            kwargs.update(fontdict***REMOVED***
        ret = self.xaxis.set_ticklabels(labels,
                                        minor=minor, **kwargs***REMOVED***
        self.stale = True
        return ret

    def invert_yaxis(self***REMOVED***:
        ***REMOVED***
        Invert the y-axis.
        ***REMOVED***
        bottom, top = self.get_ylim(***REMOVED***
        self.set_ylim(top, bottom, auto=None***REMOVED***

    def yaxis_inverted(self***REMOVED***:
        ***REMOVED***Returns *True* if the y-axis is inverted.***REMOVED***
        bottom, top = self.get_ylim(***REMOVED***
        return top < bottom

    def get_ybound(self***REMOVED***:
        ***REMOVED***
        Return y-axis numerical bounds in the form of
        ``lowerBound < upperBound``
        ***REMOVED***
        bottom, top = self.get_ylim(***REMOVED***
        if bottom < top:
            return bottom, top
        else:
            return top, bottom

    def set_ybound(self, lower=None, upper=None***REMOVED***:
        ***REMOVED***
        Set the lower and upper numerical bounds of the y-axis.
        This method will honor axes inversion regardless of parameter order.
        It will not change the _autoscaleYon attribute.
        ***REMOVED***
        if upper is None and iterable(lower***REMOVED***:
            lower, upper = lower

        old_lower, old_upper = self.get_ybound(***REMOVED***

        if lower is None:
            lower = old_lower
        if upper is None:
            upper = old_upper

        if self.yaxis_inverted(***REMOVED***:
            if lower < upper:
                self.set_ylim(upper, lower, auto=None***REMOVED***
            else:
                self.set_ylim(lower, upper, auto=None***REMOVED***
        else:
            if lower < upper:
                self.set_ylim(lower, upper, auto=None***REMOVED***
            else:
                self.set_ylim(upper, lower, auto=None***REMOVED***

    def get_ylim(self***REMOVED***:
        ***REMOVED***
        Get the y-axis range [*bottom*, *top****REMOVED***
        ***REMOVED***
        return tuple(self.viewLim.intervaly***REMOVED***

    def set_ylim(self, bottom=None, top=None, emit=True, auto=False, **kw***REMOVED***:
        ***REMOVED***
        Call signature::

          set_ylim(self, *args, **kwargs***REMOVED***:

        Set the data limits for the yaxis

        Examples::

          set_ylim((bottom, top***REMOVED******REMOVED***
          set_ylim(bottom, top***REMOVED***
          set_ylim(bottom=1***REMOVED*** # top unchanged
          set_ylim(top=1***REMOVED*** # bottom unchanged

        Keyword arguments:

          *bottom*: scalar
            The bottom ylim; the previous name, *ymin*, may still be used

          *top*: scalar
            The top ylim; the previous name, *ymax*, may still be used

          *emit*: [ *True* | *False* ***REMOVED***
            Notify observers of limit change

          *auto*: [ *True* | *False* | *None* ***REMOVED***
            Turn *y* autoscaling on (*True****REMOVED***, off (*False*; default***REMOVED***,
            or leave unchanged (*None****REMOVED***

        Note, the *bottom* (formerly *ymin****REMOVED*** value may be greater than
        the *top* (formerly *ymax****REMOVED***.
        For example, suppose *y* is depth in the ocean.
        Then one might use::

          set_ylim(5000, 0***REMOVED***

        so 5000 m depth is at the bottom of the plot and the
        surface, 0 m, is at the top.

        Returns the current ylimits as a length 2 tuple

        ACCEPTS: length 2 sequence of floats
        ***REMOVED***
        if 'ymin' in kw:
            bottom = kw.pop('ymin'***REMOVED***
        if 'ymax' in kw:
            top = kw.pop('ymax'***REMOVED***
        if kw:
            raise ValueError("unrecognized kwargs: %s" %
                             list(six.iterkeys(kw***REMOVED******REMOVED******REMOVED***

        if top is None and iterable(bottom***REMOVED***:
            bottom, top = bottom

        if bottom is not None:
            bottom = self.convert_yunits(bottom***REMOVED***
        if top is not None:
            top = self.convert_yunits(top***REMOVED***

        old_bottom, old_top = self.get_ylim(***REMOVED***

        if bottom is None:
            bottom = old_bottom
        if top is None:
            top = old_top

        if bottom == top:
            warnings.warn(
                ('Attempting to set identical bottom==top results\n'
                 'in singular transformations; automatically expanding.\n'
                 'bottom=%s, top=%s'***REMOVED*** % (bottom, top***REMOVED******REMOVED***

        bottom, top = mtransforms.nonsingular(bottom, top, increasing=False***REMOVED***
        bottom, top = self.yaxis.limit_range_for_scale(bottom, top***REMOVED***

        self.viewLim.intervaly = (bottom, top***REMOVED***
        if auto is not None:
            self._autoscaleYon = bool(auto***REMOVED***

        if emit:
            self.callbacks.process('ylim_changed', self***REMOVED***
            # Call all of the other y-axes that are shared with this one
            for other in self._shared_y_axes.get_siblings(self***REMOVED***:
                if other is not self:
                    other.set_ylim(self.viewLim.intervaly,
                                   emit=False, auto=auto***REMOVED***
                    if (other.figure != self.figure and
                            other.figure.canvas is not None***REMOVED***:
                        other.figure.canvas.draw_idle(***REMOVED***
        self.stale = True
        return bottom, top

    def get_yscale(self***REMOVED***:
        return self.yaxis.get_scale(***REMOVED***
    get_yscale.__doc__ = "Return the yaxis scale string: %s***REMOVED*** % (
        ", ".join(mscale.get_scale_names(***REMOVED******REMOVED******REMOVED***

    @docstring.dedent_interpd
    def set_yscale(self, value, **kwargs***REMOVED***:
        ***REMOVED***
        Call signature::

          set_yscale(value***REMOVED***

        Set the scaling of the y-axis: %(scale***REMOVED***s

        ACCEPTS: [%(scale***REMOVED***s***REMOVED***

        Different kwargs are accepted, depending on the scale:
        %(scale_docs***REMOVED***s
        ***REMOVED***
        # If the scale is being set to log, clip nonposy to prevent headaches
        # around zero
        if value.lower(***REMOVED*** == 'log' and 'nonposy' not in kwargs.keys(***REMOVED***:
            kwargs['nonposy'***REMOVED*** = 'clip'

        g = self.get_shared_y_axes(***REMOVED***
        for ax in g.get_siblings(self***REMOVED***:
            ax.yaxis._set_scale(value, **kwargs***REMOVED***
            ax._update_transScale(***REMOVED***
            ax.stale = True
        self.autoscale_view(scalex=False***REMOVED***

    def get_yticks(self, minor=False***REMOVED***:
        ***REMOVED***Return the y ticks as a list of locations***REMOVED***
        return self.yaxis.get_ticklocs(minor=minor***REMOVED***

    def set_yticks(self, ticks, minor=False***REMOVED***:
        ***REMOVED***
        Set the y ticks with list of *ticks*

        ACCEPTS: sequence of floats

        Keyword arguments:

          *minor*: [ *False* | *True* ***REMOVED***
            Sets the minor ticks if *True*
        ***REMOVED***
        ret = self.yaxis.set_ticks(ticks, minor=minor***REMOVED***
        return ret

    def get_ymajorticklabels(self***REMOVED***:
        ***REMOVED***
        Get the major y tick labels as a list of
        :class:`~matplotlib.text.Text` instances.
        ***REMOVED***
        return cbook.silent_list('Text yticklabel',
                                 self.yaxis.get_majorticklabels(***REMOVED******REMOVED***

    def get_yminorticklabels(self***REMOVED***:
        ***REMOVED***
        Get the minor y tick labels as a list of
        :class:`~matplotlib.text.Text` instances.
        ***REMOVED***
        return cbook.silent_list('Text yticklabel',
                                 self.yaxis.get_minorticklabels(***REMOVED******REMOVED***

    def get_yticklabels(self, minor=False, which=None***REMOVED***:
        ***REMOVED***
        Get the x tick labels as a list of :class:`~matplotlib.text.Text`
        instances.

        Parameters
        ----------
        minor : bool
           If True return the minor ticklabels,
           else return the major ticklabels

        which : None, ('minor', 'major', 'both'***REMOVED***
           Overrides `minor`.

           Selects which ticklabels to return

        Returns
        -------
        ret : list
           List of :class:`~matplotlib.text.Text` instances.
        ***REMOVED***
        return cbook.silent_list('Text yticklabel',
                                 self.yaxis.get_ticklabels(minor=minor,
                                                           which=which***REMOVED******REMOVED***

    @docstring.dedent_interpd
    def set_yticklabels(self, labels, fontdict=None, minor=False, **kwargs***REMOVED***:
        ***REMOVED***
        Call signature::

          set_yticklabels(labels, fontdict=None, minor=False, **kwargs***REMOVED***

        Set the y tick labels with list of strings *labels*.  Return a list of
        :class:`~matplotlib.text.Text` instances.

        *kwargs* set :class:`~matplotlib.text.Text` properties for the labels.
        Valid properties are
        %(Text***REMOVED***s

        ACCEPTS: sequence of strings
        ***REMOVED***
        if fontdict is not None:
            kwargs.update(fontdict***REMOVED***
        return self.yaxis.set_ticklabels(labels,
                                         minor=minor, **kwargs***REMOVED***

    def xaxis_date(self, tz=None***REMOVED***:
        ***REMOVED***
        Sets up x-axis ticks and labels that treat the x data as dates.

        *tz* is a timezone string or :class:`tzinfo` instance.
        Defaults to rc value.
        ***REMOVED***
        # should be enough to inform the unit conversion interface
        # dates are coming in
        self.xaxis.axis_date(tz***REMOVED***

    def yaxis_date(self, tz=None***REMOVED***:
        ***REMOVED***
        Sets up y-axis ticks and labels that treat the y data as dates.

        *tz* is a timezone string or :class:`tzinfo` instance.
        Defaults to rc value.
        ***REMOVED***
        self.yaxis.axis_date(tz***REMOVED***

    def format_xdata(self, x***REMOVED***:
        ***REMOVED***
        Return *x* string formatted.  This function will use the attribute
        self.fmt_xdata if it is callable, else will fall back on the xaxis
        major formatter
        ***REMOVED***
        ***REMOVED***
            return self.fmt_xdata(x***REMOVED***
        except TypeError:
            func = self.xaxis.get_major_formatter(***REMOVED***.format_data_short
            val = func(x***REMOVED***
            return val

    def format_ydata(self, y***REMOVED***:
        ***REMOVED***
        Return y string formatted.  This function will use the
        :attr:`fmt_ydata` attribute if it is callable, else will fall
        back on the yaxis major formatter
        ***REMOVED***
        ***REMOVED***
            return self.fmt_ydata(y***REMOVED***
        except TypeError:
            func = self.yaxis.get_major_formatter(***REMOVED***.format_data_short
            val = func(y***REMOVED***
            return val

    def format_coord(self, x, y***REMOVED***:
        ***REMOVED***Return a format string formatting the *x*, *y* coord***REMOVED***
        if x is None:
            xs = '???'
        else:
            xs = self.format_xdata(x***REMOVED***
        if y is None:
            ys = '???'
        else:
            ys = self.format_ydata(y***REMOVED***
        return 'x=%s y=%s' % (xs, ys***REMOVED***

    def minorticks_on(self***REMOVED***:
        'Add autoscaling minor ticks to the axes.'
        for ax in (self.xaxis, self.yaxis***REMOVED***:
            scale = ax.get_scale(***REMOVED***
            if scale == 'log':
                s = ax._scale
                ax.set_minor_locator(mticker.LogLocator(s.base, s.subs***REMOVED******REMOVED***
            elif scale == 'symlog':
                s = ax._scale
                ax.set_minor_locator(
                    mticker.SymmetricalLogLocator(s.base, s.subs***REMOVED******REMOVED***
            else:
                ax.set_minor_locator(mticker.AutoMinorLocator(***REMOVED******REMOVED***

    def minorticks_off(self***REMOVED***:
        ***REMOVED***Remove minor ticks from the axes.***REMOVED***
        self.xaxis.set_minor_locator(mticker.NullLocator(***REMOVED******REMOVED***
        self.yaxis.set_minor_locator(mticker.NullLocator(***REMOVED******REMOVED***

    # Interactive manipulation

    def can_zoom(self***REMOVED***:
        ***REMOVED***
        Return *True* if this axes supports the zoom box button functionality.
        ***REMOVED***
        return True

    def can_pan(self***REMOVED***:
        ***REMOVED***
        Return *True* if this axes supports any pan/zoom button functionality.
        ***REMOVED***
        return True

    def get_navigate(self***REMOVED***:
        ***REMOVED***
        Get whether the axes responds to navigation commands
        ***REMOVED***
        return self._navigate

    def set_navigate(self, b***REMOVED***:
        ***REMOVED***
        Set whether the axes responds to navigation toolbar commands

        ACCEPTS: [ *True* | *False* ***REMOVED***
        ***REMOVED***
        self._navigate = b

    def get_navigate_mode(self***REMOVED***:
        ***REMOVED***
        Get the navigation toolbar button status: 'PAN', 'ZOOM', or None
        ***REMOVED***
        return self._navigate_mode

    def set_navigate_mode(self, b***REMOVED***:
        ***REMOVED***
        Set the navigation toolbar button status;

        .. warning::
            this is not a user-API function.

        ***REMOVED***
        self._navigate_mode = b

    def _get_view(self***REMOVED***:
        ***REMOVED***
        Save information required to reproduce the current view.

        Called before a view is changed, such as during a pan or zoom
        initiated by the user. You may return any information you deem
        necessary to describe the view.

        .. note::

            Intended to be overridden by new projection types, but if not, the
            default implementation saves the view limits. You *must* implement
            :meth:`_set_view` if you implement this method.
        ***REMOVED***
        xmin, xmax = self.get_xlim(***REMOVED***
        ymin, ymax = self.get_ylim(***REMOVED***
        return (xmin, xmax, ymin, ymax***REMOVED***

    def _set_view(self, view***REMOVED***:
        ***REMOVED***
        Apply a previously saved view.

        Called when restoring a view, such as with the navigation buttons.

        .. note::

            Intended to be overridden by new projection types, but if not, the
            default implementation restores the view limits. You *must*
            implement :meth:`_get_view` if you implement this method.
        ***REMOVED***
        xmin, xmax, ymin, ymax = view
        self.set_xlim((xmin, xmax***REMOVED******REMOVED***
        self.set_ylim((ymin, ymax***REMOVED******REMOVED***

    def _set_view_from_bbox(self, bbox, direction='in',
                            mode=None, twinx=False, twiny=False***REMOVED***:
        ***REMOVED***
        Update view from a selection bbox.

        .. note::

            Intended to be overridden by new projection types, but if not, the
            default implementation sets the view limits to the bbox directly.

        Parameters
        ----------

        bbox : tuple
            The selected bounding box limits, in *display* coordinates.

        direction : str
            The direction to apply the bounding box.
                * `'in'` - The bounding box describes the view directly, i.e.,
                           it zooms in.
                * `'out'` - The bounding box describes the size to make the
                            existing view, i.e., it zooms out.

        mode : str or None
            The selection mode, whether to apply the bounding box in only the
            `'x'` direction, `'y'` direction or both (`None`***REMOVED***.

        twinx : bool
            Whether this axis is twinned in the *x*-direction.

        twiny : bool
            Whether this axis is twinned in the *y*-direction.
        ***REMOVED***

        lastx, lasty, x, y = bbox

        # zoom to rect
        inverse = self.transData.inverted(***REMOVED***
        lastx, lasty = inverse.transform_point((lastx, lasty***REMOVED******REMOVED***
        x, y = inverse.transform_point((x, y***REMOVED******REMOVED***
        Xmin, Xmax = self.get_xlim(***REMOVED***
        Ymin, Ymax = self.get_ylim(***REMOVED***

        if twinx:
            x0, x1 = Xmin, Xmax
        else:
            if Xmin < Xmax:
                if x < lastx:
                    x0, x1 = x, lastx
                else:
                    x0, x1 = lastx, x
                if x0 < Xmin:
                    x0 = Xmin
                if x1 > Xmax:
                    x1 = Xmax
            else:
                if x > lastx:
                    x0, x1 = x, lastx
                else:
                    x0, x1 = lastx, x
                if x0 > Xmin:
                    x0 = Xmin
                if x1 < Xmax:
                    x1 = Xmax

        if twiny:
            y0, y1 = Ymin, Ymax
        else:
            if Ymin < Ymax:
                if y < lasty:
                    y0, y1 = y, lasty
                else:
                    y0, y1 = lasty, y
                if y0 < Ymin:
                    y0 = Ymin
                if y1 > Ymax:
                    y1 = Ymax
            else:
                if y > lasty:
                    y0, y1 = y, lasty
                else:
                    y0, y1 = lasty, y
                if y0 > Ymin:
                    y0 = Ymin
                if y1 < Ymax:
                    y1 = Ymax

        if direction == 'in':
            if mode == 'x':
                self.set_xlim((x0, x1***REMOVED******REMOVED***
            elif mode == 'y':
                self.set_ylim((y0, y1***REMOVED******REMOVED***
            else:
                self.set_xlim((x0, x1***REMOVED******REMOVED***
                self.set_ylim((y0, y1***REMOVED******REMOVED***
        elif direction == 'out':
            if self.get_xscale(***REMOVED*** == 'log':
                alpha = np.log(Xmax / Xmin***REMOVED*** / np.log(x1 / x0***REMOVED***
                rx1 = pow(Xmin / x0, alpha***REMOVED*** * Xmin
                rx2 = pow(Xmax / x0, alpha***REMOVED*** * Xmin
            else:
                alpha = (Xmax - Xmin***REMOVED*** / (x1 - x0***REMOVED***
                rx1 = alpha * (Xmin - x0***REMOVED*** + Xmin
                rx2 = alpha * (Xmax - x0***REMOVED*** + Xmin
            if self.get_yscale(***REMOVED*** == 'log':
                alpha = np.log(Ymax / Ymin***REMOVED*** / np.log(y1 / y0***REMOVED***
                ry1 = pow(Ymin / y0, alpha***REMOVED*** * Ymin
                ry2 = pow(Ymax / y0, alpha***REMOVED*** * Ymin
            else:
                alpha = (Ymax - Ymin***REMOVED*** / (y1 - y0***REMOVED***
                ry1 = alpha * (Ymin - y0***REMOVED*** + Ymin
                ry2 = alpha * (Ymax - y0***REMOVED*** + Ymin

            if mode == 'x':
                self.set_xlim((rx1, rx2***REMOVED******REMOVED***
            elif mode == 'y':
                self.set_ylim((ry1, ry2***REMOVED******REMOVED***
            else:
                self.set_xlim((rx1, rx2***REMOVED******REMOVED***
                self.set_ylim((ry1, ry2***REMOVED******REMOVED***

    def start_pan(self, x, y, button***REMOVED***:
        ***REMOVED***
        Called when a pan operation has started.

        *x*, *y* are the mouse coordinates in display coords.
        button is the mouse button number:

        * 1: LEFT
        * 2: MIDDLE
        * 3: RIGHT

        .. note::

            Intended to be overridden by new projection types.

        ***REMOVED***
        self._pan_start = cbook.Bunch(
            lim=self.viewLim.frozen(***REMOVED***,
            trans=self.transData.frozen(***REMOVED***,
            trans_inverse=self.transData.inverted(***REMOVED***.frozen(***REMOVED***,
            bbox=self.bbox.frozen(***REMOVED***,
            x=x,
            y=y***REMOVED***

    def end_pan(self***REMOVED***:
        ***REMOVED***
        Called when a pan operation completes (when the mouse button
        is up.***REMOVED***

        .. note::

            Intended to be overridden by new projection types.

        ***REMOVED***
        del self._pan_start

    def drag_pan(self, button, key, x, y***REMOVED***:
        ***REMOVED***
        Called when the mouse moves during a pan operation.

        *button* is the mouse button number:

        * 1: LEFT
        * 2: MIDDLE
        * 3: RIGHT

        *key* is a "shift" key

        *x*, *y* are the mouse coordinates in display coords.

        .. note::

            Intended to be overridden by new projection types.

        ***REMOVED***
        def format_deltas(key, dx, dy***REMOVED***:
            if key == 'control':
                if abs(dx***REMOVED*** > abs(dy***REMOVED***:
                    dy = dx
                else:
                    dx = dy
            elif key == 'x':
                dy = 0
            elif key == 'y':
                dx = 0
            elif key == 'shift':
                if 2 * abs(dx***REMOVED*** < abs(dy***REMOVED***:
                    dx = 0
                elif 2 * abs(dy***REMOVED*** < abs(dx***REMOVED***:
                    dy = 0
                elif abs(dx***REMOVED*** > abs(dy***REMOVED***:
                    dy = dy / abs(dy***REMOVED*** * abs(dx***REMOVED***
                else:
                    dx = dx / abs(dx***REMOVED*** * abs(dy***REMOVED***
            return (dx, dy***REMOVED***

        p = self._pan_start
        dx = x - p.x
        dy = y - p.y
        if dx == 0 and dy == 0:
            return
        if button == 1:
            dx, dy = format_deltas(key, dx, dy***REMOVED***
            result = p.bbox.translated(-dx, -dy***REMOVED*** \
                .transformed(p.trans_inverse***REMOVED***
        elif button == 3:
            ***REMOVED***
                dx = -dx / float(self.bbox.width***REMOVED***
                dy = -dy / float(self.bbox.height***REMOVED***
                dx, dy = format_deltas(key, dx, dy***REMOVED***
                if self.get_aspect(***REMOVED*** != 'auto':
                    dx = 0.5 * (dx + dy***REMOVED***
                    dy = dx

                alpha = np.power(10.0, (dx, dy***REMOVED******REMOVED***
                start = np.array([p.x, p.y***REMOVED******REMOVED***
                oldpoints = p.lim.transformed(p.trans***REMOVED***
                newpoints = start + alpha * (oldpoints - start***REMOVED***
                result = mtransforms.Bbox(newpoints***REMOVED*** \
                    .transformed(p.trans_inverse***REMOVED***
            except OverflowError:
                warnings.warn('Overflow while panning'***REMOVED***
                return

        self.set_xlim(*result.intervalx***REMOVED***
        self.set_ylim(*result.intervaly***REMOVED***

    def get_cursor_props(self***REMOVED***:
        ***REMOVED***
        Return the cursor propertiess as a (*linewidth*, *color****REMOVED***
        tuple, where *linewidth* is a float and *color* is an RGBA
        tuple
        ***REMOVED***
        return self._cursorProps

    def set_cursor_props(self, *args***REMOVED***:
        ***REMOVED***
        Set the cursor property as::

          ax.set_cursor_props(linewidth, color***REMOVED***

        or::

          ax.set_cursor_props((linewidth, color***REMOVED******REMOVED***

        ACCEPTS: a (*float*, *color****REMOVED*** tuple
        ***REMOVED***
        if len(args***REMOVED*** == 1:
            lw, c = args[0***REMOVED***
        elif len(args***REMOVED*** == 2:
            lw, c = args
        else:
            raise ValueError('args must be a (linewidth, color***REMOVED*** tuple'***REMOVED***
        c = mcolors.colorConverter.to_rgba(c***REMOVED***
        self._cursorProps = lw, c

    def get_children(self***REMOVED***:
        ***REMOVED***return a list of child artists***REMOVED***
        children = [***REMOVED***
        children.extend(self.collections***REMOVED***
        children.extend(self.patches***REMOVED***
        children.extend(self.lines***REMOVED***
        children.extend(self.texts***REMOVED***
        children.extend(self.artists***REMOVED***
        children.extend(six.itervalues(self.spines***REMOVED******REMOVED***
        children.append(self.xaxis***REMOVED***
        children.append(self.yaxis***REMOVED***
        children.append(self.title***REMOVED***
        children.append(self._left_title***REMOVED***
        children.append(self._right_title***REMOVED***
        children.extend(self.tables***REMOVED***
        children.extend(self.images***REMOVED***
        if self.legend_ is not None:
            children.append(self.legend_***REMOVED***
        children.append(self.patch***REMOVED***
        return children

    def contains(self, mouseevent***REMOVED***:
        ***REMOVED***
        Test whether the mouse event occured in the axes.

        Returns *True* / *False*, {***REMOVED***
        ***REMOVED***
        if six.callable(self._contains***REMOVED***:
            return self._contains(self, mouseevent***REMOVED***

        return self.patch.contains(mouseevent***REMOVED***

    def contains_point(self, point***REMOVED***:
        ***REMOVED***
        Returns *True* if the point (tuple of x,y***REMOVED*** is inside the axes
        (the area defined by the its patch***REMOVED***. A pixel coordinate is
        required.

        ***REMOVED***
        return self.patch.contains_point(point, radius=1.0***REMOVED***

    def pick(self, *args***REMOVED***:
        ***REMOVED***
        Call signature::

            pick(mouseevent***REMOVED***

        each child artist will fire a pick event if mouseevent is over
        the artist and the artist has picker set
        ***REMOVED***
        martist.Artist.pick(self, args[0***REMOVED******REMOVED***

    def get_default_bbox_extra_artists(self***REMOVED***:
        return [artist for artist in self.get_children(***REMOVED***
                if artist.get_visible(***REMOVED******REMOVED***

    def get_tightbbox(self, renderer, call_axes_locator=True***REMOVED***:
        ***REMOVED***
        Return the tight bounding box of the axes.
        The dimension of the Bbox in canvas coordinate.

        If *call_axes_locator* is *False*, it does not call the
        _axes_locator attribute, which is necessary to get the correct
        bounding box. ``call_axes_locator==False`` can be used if the
        caller is only intereted in the relative size of the tightbbox
        compared to the axes bbox.
        ***REMOVED***

        bb = [***REMOVED***

        if not self.get_visible(***REMOVED***:
            return None

        locator = self.get_axes_locator(***REMOVED***
        if locator and call_axes_locator:
            pos = locator(self, renderer***REMOVED***
            self.apply_aspect(pos***REMOVED***
        else:
            self.apply_aspect(***REMOVED***

        bb.append(self.get_window_extent(renderer***REMOVED******REMOVED***

        if self.title.get_visible(***REMOVED***:
            bb.append(self.title.get_window_extent(renderer***REMOVED******REMOVED***
        if self._left_title.get_visible(***REMOVED***:
            bb.append(self._left_title.get_window_extent(renderer***REMOVED******REMOVED***
        if self._right_title.get_visible(***REMOVED***:
            bb.append(self._right_title.get_window_extent(renderer***REMOVED******REMOVED***

        bb_xaxis = self.xaxis.get_tightbbox(renderer***REMOVED***
        if bb_xaxis:
            bb.append(bb_xaxis***REMOVED***

        bb_yaxis = self.yaxis.get_tightbbox(renderer***REMOVED***
        if bb_yaxis:
            bb.append(bb_yaxis***REMOVED***

        for child in self.get_children(***REMOVED***:
            if isinstance(child, OffsetBox***REMOVED*** and child.get_visible(***REMOVED***:
                bb.append(child.get_window_extent(renderer***REMOVED******REMOVED***

        _bbox = mtransforms.Bbox.union(
            [b for b in bb if b.width != 0 or b.height != 0***REMOVED******REMOVED***

        return _bbox

    def _make_twin_axes(self, *kl, **kwargs***REMOVED***:
        ***REMOVED***
        make a twinx axes of self. This is used for twinx and twiny.
        ***REMOVED***
        ax2 = self.figure.add_axes(self.get_position(True***REMOVED***, *kl, **kwargs***REMOVED***
        return ax2

    def twinx(self***REMOVED***:
        ***REMOVED***
        Call signature::

          ax = twinx(***REMOVED***

        create a twin of Axes for generating a plot with a sharex
        x-axis but independent y axis.  The y-axis of self will have
        ticks on left and the returned axes will have ticks on the
        right.

        .. note::
            For those who are 'picking' artists while using twinx, pick
            events are only called for the artists in the top-most axes.
        ***REMOVED***
        ax2 = self._make_twin_axes(sharex=self***REMOVED***
        ax2.yaxis.tick_right(***REMOVED***
        ax2.yaxis.set_label_position('right'***REMOVED***
        ax2.yaxis.set_offset_position('right'***REMOVED***
        self.yaxis.tick_left(***REMOVED***
        ax2.xaxis.set_visible(False***REMOVED***
        ax2.patch.set_visible(False***REMOVED***
        return ax2

    def twiny(self***REMOVED***:
        ***REMOVED***
        Call signature::

          ax = twiny(***REMOVED***

        create a twin of Axes for generating a plot with a shared
        y-axis but independent x axis.  The x-axis of self will have
        ticks on bottom and the returned axes will have ticks on the
        top.

        .. note::
            For those who are 'picking' artists while using twiny, pick
            events are only called for the artists in the top-most axes.
        ***REMOVED***

        ax2 = self._make_twin_axes(sharey=self***REMOVED***
        ax2.xaxis.tick_top(***REMOVED***
        ax2.xaxis.set_label_position('top'***REMOVED***
        self.xaxis.tick_bottom(***REMOVED***
        ax2.yaxis.set_visible(False***REMOVED***
        ax2.patch.set_visible(False***REMOVED***
        return ax2

    def get_shared_x_axes(self***REMOVED***:
        'Return a copy of the shared axes Grouper object for x axes'
        return self._shared_x_axes

    def get_shared_y_axes(self***REMOVED***:
        'Return a copy of the shared axes Grouper object for y axes'
        return self._shared_y_axes
