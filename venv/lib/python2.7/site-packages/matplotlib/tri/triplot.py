from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six

import numpy as np
from matplotlib.tri.triangulation import Triangulation


def triplot(ax, *args, **kwargs***REMOVED***:
    ***REMOVED***
    Draw a unstructured triangular grid as lines and/or markers.

    The triangulation to plot can be specified in one of two ways;
    either::

      triplot(triangulation, ...***REMOVED***

    where triangulation is a :class:`matplotlib.tri.Triangulation`
    object, or

    ::

      triplot(x, y, ...***REMOVED***
      triplot(x, y, triangles, ...***REMOVED***
      triplot(x, y, triangles=triangles, ...***REMOVED***
      triplot(x, y, mask=mask, ...***REMOVED***
      triplot(x, y, triangles, mask=mask, ...***REMOVED***

    in which case a Triangulation object will be created.  See
    :class:`~matplotlib.tri.Triangulation` for a explanation of these
    possibilities.

    The remaining args and kwargs are the same as for
    :meth:`~matplotlib.axes.Axes.plot`.

    Return a list of 2 :class:`~matplotlib.lines.Line2D` containing
    respectively:

        - the lines plotted for triangles edges
        - the markers plotted for triangles nodes

    **Example:**

        .. plot:: mpl_examples/pylab_examples/triplot_demo.py
    ***REMOVED***
    import matplotlib.axes

    tri, args, kwargs = Triangulation.get_from_args_and_kwargs(*args, **kwargs***REMOVED***
    x, y, edges = (tri.x, tri.y, tri.edges***REMOVED***

    # Decode plot format string, e.g., 'ro-'
    fmt = ""
    if len(args***REMOVED*** > 0:
        fmt = args[0***REMOVED***
    linestyle, marker, color = matplotlib.axes._base._process_plot_format(fmt***REMOVED***

    # Insert plot format string into a copy of kwargs (kwargs values prevail***REMOVED***.
    kw = kwargs.copy(***REMOVED***
    for key, val in zip(('linestyle', 'marker', 'color'***REMOVED***,
                        (linestyle, marker, color***REMOVED******REMOVED***:
        if val is not None:
            kw[key***REMOVED*** = kwargs.get(key, val***REMOVED***

    # Draw lines without markers.
    # Note 1: If we drew markers here, most markers would be drawn more than
    #         once as they belong to several edges.
    # Note 2: We insert nan values in the flattened edges arrays rather than
    #         plotting directly (triang.x[edges***REMOVED***.T, triang.y[edges***REMOVED***.T***REMOVED***
    #         as it considerably speeds-up code execution.
    linestyle = kw['linestyle'***REMOVED***
    kw_lines = kw.copy(***REMOVED***
    kw_lines['marker'***REMOVED*** = 'None'  # No marker to draw.
    kw_lines['zorder'***REMOVED*** = kw.get('zorder', 1***REMOVED***  # Path default zorder is used.
    if (linestyle is not None***REMOVED*** and (linestyle not in ['None', '', ' '***REMOVED******REMOVED***:
        tri_lines_x = np.insert(x[edges***REMOVED***, 2, np.nan, axis=1***REMOVED***
        tri_lines_y = np.insert(y[edges***REMOVED***, 2, np.nan, axis=1***REMOVED***
        tri_lines = ax.plot(tri_lines_x.ravel(***REMOVED***, tri_lines_y.ravel(***REMOVED***,
                            **kw_lines***REMOVED***
    else:
        tri_lines = ax.plot([***REMOVED***, [***REMOVED***, **kw_lines***REMOVED***

    # Draw markers separately.
    marker = kw['marker'***REMOVED***
    kw_markers = kw.copy(***REMOVED***
    kw_markers['linestyle'***REMOVED*** = 'None'  # No line to draw.
    if (marker is not None***REMOVED*** and (marker not in ['None', '', ' '***REMOVED******REMOVED***:
        tri_markers = ax.plot(x, y, **kw_markers***REMOVED***
    else:
        tri_markers = ax.plot([***REMOVED***, [***REMOVED***, **kw_markers***REMOVED***

    return tri_lines + tri_markers
