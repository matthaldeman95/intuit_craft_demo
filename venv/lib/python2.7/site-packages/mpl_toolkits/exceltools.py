***REMOVED***
Some io tools for excel -- requires xlwt

Example usage:

    import matplotlib.mlab as mlab
    import mpl_toolkits.exceltools as exceltools

    r = mlab.csv2rec('somefile.csv', checkrows=0***REMOVED***

    formatd = dict(
        weight = mlab.FormatFloat(2***REMOVED***,
        change = mlab.FormatPercent(2***REMOVED***,
        cost   = mlab.FormatThousands(2***REMOVED***,
        ***REMOVED***


    exceltools.rec2excel(r, 'test.xls', formatd=formatd***REMOVED***
    mlab.rec2csv(r, 'test.csv', formatd=formatd***REMOVED***

***REMOVED***
from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six

import copy
import numpy as np

import xlwt as excel

import matplotlib.cbook as cbook
import matplotlib.mlab as mlab


def xlformat_factory(format***REMOVED***:
    ***REMOVED***
    copy the format, perform any overrides, and attach an xlstyle instance
    copied format is returned
    ***REMOVED***

    #if we have created an excel format already using this format,
    #don't recreate it; mlab.FormatObj override has to make objs with
    #the same props hash to the same value
    key = hash(format***REMOVED***
    fmt_ = xlformat_factory.created_formats.get(key***REMOVED***
    if fmt_ is not None:
        return fmt_

    format = copy.deepcopy(format***REMOVED***

    xlstyle = excel.XFStyle(***REMOVED***
    if isinstance(format, mlab.FormatPercent***REMOVED***:
       zeros = ''.join(['0'***REMOVED****format.precision***REMOVED***
       xlstyle.num_format_str = '0.%s%%;[RED***REMOVED***-0.%s%%'%(zeros, zeros***REMOVED***
       format.scale = 1.
    elif isinstance(format, mlab.FormatFloat***REMOVED***:
        if format.precision>0:
            zeros = ''.join(['0'***REMOVED****format.precision***REMOVED***
            xlstyle.num_format_str = '#,##0.%s;[RED***REMOVED***-#,##0.%s'%(zeros, zeros***REMOVED***
        else:
            xlstyle.num_format_str = '#,##;[RED***REMOVED***-#,##'
    elif isinstance(format, mlab.FormatInt***REMOVED***:
        xlstyle.num_format_str = '#,##;[RED***REMOVED***-#,##'
    else:
        xlstyle = None

    format.xlstyle = xlstyle

    xlformat_factory.created_formats[ key ***REMOVED*** = format

    return format

xlformat_factory.created_formats = {***REMOVED***

def rec2excel(r, ws, formatd=None, rownum=0, colnum=0, nanstr='NaN', infstr='Inf'***REMOVED***:
    ***REMOVED***
    save record array r to excel xlwt worksheet ws
    starting at rownum.  if ws is string like, assume it is a
    filename and save to it

    start writing at rownum, colnum

    formatd is a dictionary mapping dtype name -> mlab.Format instances

    nanstr is the string that mpl will put into excel for np.nan value
    The next rownum after writing is returned
    ***REMOVED***

    autosave = False
    if cbook.is_string_like(ws***REMOVED***:
        filename = ws
        wb = excel.Workbook(***REMOVED***
        ws = wb.add_sheet('worksheet'***REMOVED***
        autosave = True


    if formatd is None:
        formatd = dict(***REMOVED***

    formats = [***REMOVED***
    font = excel.Font(***REMOVED***
    font.bold = True

    stylehdr = excel.XFStyle(***REMOVED***
    stylehdr.font = font

    for i, name in enumerate(r.dtype.names***REMOVED***:
        dt = r.dtype[name***REMOVED***
        format = formatd.get(name***REMOVED***
        if format is None:
            format = mlab.defaultformatd.get(dt.type, mlab.FormatObj(***REMOVED******REMOVED***

        format = xlformat_factory(format***REMOVED***
        ws.write(rownum, colnum+i, name, stylehdr***REMOVED***
        formats.append(format***REMOVED***

    rownum+=1


    ind = np.arange(len(r.dtype.names***REMOVED******REMOVED***
    for row in r:

        for i in ind:
            val = row[i***REMOVED***
            format = formats[i***REMOVED***
            val = format.toval(val***REMOVED***
            if mlab.safe_isnan(val***REMOVED***:
                ws.write(rownum, colnum+i, nanstr***REMOVED***
            elif mlab.safe_isinf(val***REMOVED***:
                sgn = np.sign(val***REMOVED***
                if sgn>0: s = infstr
                else: s = '-%s'%infstr
                ws.write(rownum, colnum+i, s***REMOVED***
            elif format.xlstyle is None:
                ws.write(rownum, colnum+i, val***REMOVED***
            else:
                ws.write(rownum, colnum+i, val, format.xlstyle***REMOVED***
        rownum += 1

    if autosave:
        wb.save(filename***REMOVED***
    return rownum
