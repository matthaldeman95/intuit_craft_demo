from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six

import matplotlib.pyplot as plt
from matplotlib.testing.decorators import image_comparison, cleanup

from mpl_toolkits.axes_grid1 import make_axes_locatable
from mpl_toolkits.axes_grid1 import AxesGrid

from matplotlib.colors import LogNorm

import numpy as np


@image_comparison(baseline_images=['divider_append_axes'***REMOVED******REMOVED***
def test_divider_append_axes(***REMOVED***:

    # the random data
    np.random.seed(0***REMOVED***
    x = np.random.randn(1000***REMOVED***
    y = np.random.randn(1000***REMOVED***

    fig, axScatter = plt.subplots(***REMOVED***

    # the scatter plot:
    axScatter.scatter(x, y***REMOVED***

    # create new axes on the right and on the top of the current axes
    # The first argument of the new_vertical(new_horizontal***REMOVED*** method is
    # the height (width***REMOVED*** of the axes to be created in inches.
    divider = make_axes_locatable(axScatter***REMOVED***
    axHistbot = divider.append_axes("bottom", 1.2, pad=0.1, sharex=axScatter***REMOVED***
    axHistright = divider.append_axes("right", 1.2, pad=0.1, sharey=axScatter***REMOVED***
    axHistleft = divider.append_axes("left", 1.2, pad=0.1, sharey=axScatter***REMOVED***
    axHisttop = divider.append_axes("top", 1.2, pad=0.1, sharex=axScatter***REMOVED***

    # now determine nice limits by hand:
    binwidth = 0.25
    xymax = np.max([np.max(np.fabs(x***REMOVED******REMOVED***, np.max(np.fabs(y***REMOVED******REMOVED******REMOVED******REMOVED***
    lim = (int(xymax/binwidth***REMOVED*** + 1***REMOVED*** * binwidth

    bins = np.arange(-lim, lim + binwidth, binwidth***REMOVED***
    axHisttop.hist(x, bins=bins***REMOVED***
    axHistbot.hist(x, bins=bins***REMOVED***
    axHistleft.hist(y, bins=bins, orientation='horizontal'***REMOVED***
    axHistright.hist(y, bins=bins, orientation='horizontal'***REMOVED***

    axHistbot.invert_yaxis(***REMOVED***
    axHistleft.invert_xaxis(***REMOVED***

    axHisttop.xaxis.set_ticklabels((***REMOVED******REMOVED***
    axHistbot.xaxis.set_ticklabels((***REMOVED******REMOVED***
    axHistleft.yaxis.set_ticklabels((***REMOVED******REMOVED***
    axHistright.yaxis.set_ticklabels((***REMOVED******REMOVED***


@cleanup
def test_axesgrid_colorbar_log_smoketest(***REMOVED***:
    fig = plt.figure(***REMOVED***
    grid = AxesGrid(fig, 111,  # modified to be only subplot
                    nrows_ncols=(1, 1***REMOVED***,
                    label_mode="L",
                    cbar_location="top",
                    cbar_mode="single",
                    ***REMOVED***

    Z = 10000 * np.random.rand(10, 10***REMOVED***
    im = grid[0***REMOVED***.imshow(Z, interpolation="nearest", norm=LogNorm(***REMOVED******REMOVED***

    grid.cbar_axes[0***REMOVED***.colorbar(im***REMOVED***


if __name__ == '__main__':
    import nose
    nose.runmodule(argv=['-s', '--with-doctest'***REMOVED***, exit=False***REMOVED***
