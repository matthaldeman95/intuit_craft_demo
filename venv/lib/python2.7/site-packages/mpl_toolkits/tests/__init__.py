from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six

import difflib
***REMOVED***

from matplotlib import rcParams, rcdefaults, use


_multiprocess_can_split_ = True


# Check that the test directories exist
if not os.path.exists(os.path.join(
        os.path.dirname(__file__***REMOVED***, 'baseline_images'***REMOVED******REMOVED***:
    raise IOError(
        'The baseline image directory does not exist. '
        'This is most likely because the test data is not installed. '
        'You may need to install matplotlib from source to get the '
        'test data.'***REMOVED***


def setup(***REMOVED***:
    # The baseline images are created in this locale, so we should use
    # it during all of the tests.
    import locale
    import warnings
    from matplotlib.backends import backend_agg, backend_pdf, backend_svg

    ***REMOVED***
        locale.setlocale(locale.LC_ALL, str('en_US.UTF-8'***REMOVED******REMOVED***
    except locale.Error:
        ***REMOVED***
            locale.setlocale(locale.LC_ALL, str('English_United States.1252'***REMOVED******REMOVED***
        except locale.Error:
            warnings.warn(
                "Could not set locale to English/United States. "
                "Some date-related tests may fail"***REMOVED***

    use('Agg', warn=False***REMOVED***  # use Agg backend for these tests

    # These settings *must* be hardcoded for running the comparison
    # tests and are not necessarily the default values as specified in
    # rcsetup.py
    rcdefaults(***REMOVED***  # Start with all defaults
    rcParams['font.family'***REMOVED*** = 'Bitstream Vera Sans'
    rcParams['text.hinting'***REMOVED*** = False
    rcParams['text.hinting_factor'***REMOVED*** = 8

    # Clear the font caches.  Otherwise, the hinting mode can travel
    # from one test to another.
    backend_agg.RendererAgg._fontd.clear(***REMOVED***
    backend_pdf.RendererPdf.truetype_font_cache.clear(***REMOVED***
    backend_svg.RendererSVG.fontd.clear(***REMOVED***


def assert_str_equal(reference_str, test_str,
                     format_str=('String {str1***REMOVED*** and {str2***REMOVED*** do not '
                                 'match:\n{differences***REMOVED***'***REMOVED******REMOVED***:
    ***REMOVED***
    Assert the two strings are equal. If not, fail and print their
    diffs using difflib.

    ***REMOVED***
    if reference_str != test_str:
        diff = difflib.unified_diff(reference_str.splitlines(1***REMOVED***,
                                    test_str.splitlines(1***REMOVED***,
                                    'Reference', 'Test result',
                                    '', '', 0***REMOVED***
        raise ValueError(format_str.format(str1=reference_str,
                                           str2=test_str,
                                           differences=''.join(diff***REMOVED******REMOVED******REMOVED***
