import sys
import nose
from nose.tools import assert_raises
from mpl_toolkits.mplot3d import Axes3D, axes3d
from matplotlib import cm
from matplotlib.testing.decorators import image_comparison, cleanup
import matplotlib.pyplot as plt
import numpy as np


@image_comparison(baseline_images=['bar3d'***REMOVED***, remove_text=True***REMOVED***
def test_bar3d(***REMOVED***:
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(111, projection='3d'***REMOVED***
    for c, z in zip(['r', 'g', 'b', 'y'***REMOVED***, [30, 20, 10, 0***REMOVED******REMOVED***:
        xs = np.arange(20***REMOVED***
        ys = np.arange(20***REMOVED***
        cs = [c***REMOVED*** * len(xs***REMOVED***
        cs[0***REMOVED*** = 'c'
        ax.bar(xs, ys, zs=z, zdir='y', color=cs, alpha=0.8***REMOVED***


@image_comparison(baseline_images=['contour3d'***REMOVED***, remove_text=True***REMOVED***
def test_contour3d(***REMOVED***:
    fig = plt.figure(***REMOVED***
    ax = fig.gca(projection='3d'***REMOVED***
    X, Y, Z = axes3d.get_test_data(0.05***REMOVED***
    cset = ax.contour(X, Y, Z, zdir='z', offset=-100, cmap=cm.coolwarm***REMOVED***
    cset = ax.contour(X, Y, Z, zdir='x', offset=-40, cmap=cm.coolwarm***REMOVED***
    cset = ax.contour(X, Y, Z, zdir='y', offset=40, cmap=cm.coolwarm***REMOVED***
    ax.set_xlim(-40, 40***REMOVED***
    ax.set_ylim(-40, 40***REMOVED***
    ax.set_zlim(-100, 100***REMOVED***


@image_comparison(baseline_images=['contourf3d'***REMOVED***, remove_text=True***REMOVED***
def test_contourf3d(***REMOVED***:
    fig = plt.figure(***REMOVED***
    ax = fig.gca(projection='3d'***REMOVED***
    X, Y, Z = axes3d.get_test_data(0.05***REMOVED***
    cset = ax.contourf(X, Y, Z, zdir='z', offset=-100, cmap=cm.coolwarm***REMOVED***
    cset = ax.contourf(X, Y, Z, zdir='x', offset=-40, cmap=cm.coolwarm***REMOVED***
    cset = ax.contourf(X, Y, Z, zdir='y', offset=40, cmap=cm.coolwarm***REMOVED***
    ax.set_xlim(-40, 40***REMOVED***
    ax.set_ylim(-40, 40***REMOVED***
    ax.set_zlim(-100, 100***REMOVED***


@image_comparison(baseline_images=['contourf3d_fill'***REMOVED***, remove_text=True***REMOVED***
def test_contourf3d_fill(***REMOVED***:
    fig = plt.figure(***REMOVED***
    ax = fig.gca(projection='3d'***REMOVED***
    X, Y = np.meshgrid(np.arange(-2, 2, 0.25***REMOVED***, np.arange(-2, 2, 0.25***REMOVED******REMOVED***
    Z = X.clip(0, 0***REMOVED***
    # This produces holes in the z=0 surface that causes rendering errors if
    # the Poly3DCollection is not aware of path code information (issue #4784***REMOVED***
    Z[::5, ::5***REMOVED*** = 0.1
    cset = ax.contourf(X, Y, Z, offset=0, levels=[-0.1, 0***REMOVED***, cmap=cm.coolwarm***REMOVED***
    ax.set_xlim(-2, 2***REMOVED***
    ax.set_ylim(-2, 2***REMOVED***
    ax.set_zlim(-1, 1***REMOVED***


@image_comparison(baseline_images=['lines3d'***REMOVED***, remove_text=True***REMOVED***
def test_lines3d(***REMOVED***:
    fig = plt.figure(***REMOVED***
    ax = fig.gca(projection='3d'***REMOVED***
    theta = np.linspace(-4 * np.pi, 4 * np.pi, 100***REMOVED***
    z = np.linspace(-2, 2, 100***REMOVED***
    r = z ** 2 + 1
    x = r * np.sin(theta***REMOVED***
    y = r * np.cos(theta***REMOVED***
    ax.plot(x, y, z***REMOVED***


@image_comparison(baseline_images=['mixedsubplot'***REMOVED***, remove_text=True***REMOVED***
def test_mixedsubplots(***REMOVED***:
    def f(t***REMOVED***:
        s1 = np.cos(2*np.pi*t***REMOVED***
        e1 = np.exp(-t***REMOVED***
        return np.multiply(s1, e1***REMOVED***

    t1 = np.arange(0.0, 5.0, 0.1***REMOVED***
    t2 = np.arange(0.0, 5.0, 0.02***REMOVED***

    fig = plt.figure(figsize=plt.figaspect(2.***REMOVED******REMOVED***
    ax = fig.add_subplot(2, 1, 1***REMOVED***
    l = ax.plot(t1, f(t1***REMOVED***, 'bo',
                t2, f(t2***REMOVED***, 'k--', markerfacecolor='green'***REMOVED***
    ax.grid(True***REMOVED***

    ax = fig.add_subplot(2, 1, 2, projection='3d'***REMOVED***
    X, Y = np.meshgrid(np.arange(-5, 5, 0.25***REMOVED***, np.arange(-5, 5, 0.25***REMOVED******REMOVED***
    R = np.sqrt(X ** 2 + Y ** 2***REMOVED***
    Z = np.sin(R***REMOVED***

    surf = ax.plot_surface(X, Y, Z, rstride=1, cstride=1,
                           linewidth=0, antialiased=False***REMOVED***

    ax.set_zlim3d(-1, 1***REMOVED***


@image_comparison(baseline_images=['scatter3d'***REMOVED***, remove_text=True***REMOVED***
def test_scatter3d(***REMOVED***:
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(111, projection='3d'***REMOVED***
    ax.scatter(np.arange(10***REMOVED***, np.arange(10***REMOVED***, np.arange(10***REMOVED***,
               c='r', marker='o'***REMOVED***
    ax.scatter(np.arange(10, 20***REMOVED***, np.arange(10, 20***REMOVED***, np.arange(10, 20***REMOVED***,
               c='b', marker='^'***REMOVED***


@image_comparison(baseline_images=['scatter3d_color'***REMOVED***, remove_text=True,
                  extensions=['png'***REMOVED******REMOVED***
def test_scatter3d_color(***REMOVED***:
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(111, projection='3d'***REMOVED***
    ax.scatter(np.arange(10***REMOVED***, np.arange(10***REMOVED***, np.arange(10***REMOVED***,
               color='r', marker='o'***REMOVED***
    ax.scatter(np.arange(10, 20***REMOVED***, np.arange(10, 20***REMOVED***, np.arange(10, 20***REMOVED***,
               color='b', marker='s'***REMOVED***


@image_comparison(baseline_images=['surface3d'***REMOVED***, remove_text=True***REMOVED***
def test_surface3d(***REMOVED***:
    fig = plt.figure(***REMOVED***
    ax = fig.gca(projection='3d'***REMOVED***
    X = np.arange(-5, 5, 0.25***REMOVED***
    Y = np.arange(-5, 5, 0.25***REMOVED***
    X, Y = np.meshgrid(X, Y***REMOVED***
    R = np.sqrt(X ** 2 + Y ** 2***REMOVED***
    Z = np.sin(R***REMOVED***
    surf = ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=cm.coolwarm,
                           lw=0, antialiased=False***REMOVED***
    ax.set_zlim(-1.01, 1.01***REMOVED***
    fig.colorbar(surf, shrink=0.5, aspect=5***REMOVED***


@image_comparison(baseline_images=['text3d'***REMOVED******REMOVED***
def test_text3d(***REMOVED***:
    fig = plt.figure(***REMOVED***
    ax = fig.gca(projection='3d'***REMOVED***

    zdirs = (None, 'x', 'y', 'z', (1, 1, 0***REMOVED***, (1, 1, 1***REMOVED******REMOVED***
    xs = (2, 6, 4, 9, 7, 2***REMOVED***
    ys = (6, 4, 8, 7, 2, 2***REMOVED***
    zs = (4, 2, 5, 6, 1, 7***REMOVED***

    for zdir, x, y, z in zip(zdirs, xs, ys, zs***REMOVED***:
        label = '(%d, %d, %d***REMOVED***, dir=%s' % (x, y, z, zdir***REMOVED***
        ax.text(x, y, z, label, zdir***REMOVED***

    ax.text(1, 1, 1, "red", color='red'***REMOVED***
    ax.text2D(0.05, 0.95, "2D Text", transform=ax.transAxes***REMOVED***
    ax.set_xlim3d(0, 10***REMOVED***
    ax.set_ylim3d(0, 10***REMOVED***
    ax.set_zlim3d(0, 10***REMOVED***
    ax.set_xlabel('X axis'***REMOVED***
    ax.set_ylabel('Y axis'***REMOVED***
    ax.set_zlabel('Z axis'***REMOVED***


@image_comparison(baseline_images=['trisurf3d'***REMOVED***, remove_text=True***REMOVED***
def test_trisurf3d(***REMOVED***:
    n_angles = 36
    n_radii = 8
    radii = np.linspace(0.125, 1.0, n_radii***REMOVED***
    angles = np.linspace(0, 2*np.pi, n_angles, endpoint=False***REMOVED***
    angles = np.repeat(angles[..., np.newaxis***REMOVED***, n_radii, axis=1***REMOVED***
    angles[:, 1::2***REMOVED*** += np.pi/n_angles

    x = np.append(0, (radii*np.cos(angles***REMOVED******REMOVED***.flatten(***REMOVED******REMOVED***
    y = np.append(0, (radii*np.sin(angles***REMOVED******REMOVED***.flatten(***REMOVED******REMOVED***
    z = np.sin(-x*y***REMOVED***

    fig = plt.figure(***REMOVED***
    ax = fig.gca(projection='3d'***REMOVED***
    ax.plot_trisurf(x, y, z, cmap=cm.jet, linewidth=0.2***REMOVED***


@image_comparison(baseline_images=['wireframe3d'***REMOVED***, remove_text=True***REMOVED***
def test_wireframe3d(***REMOVED***:
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(111, projection='3d'***REMOVED***
    X, Y, Z = axes3d.get_test_data(0.05***REMOVED***
    ax.plot_wireframe(X, Y, Z, rstride=10, cstride=10***REMOVED***


@image_comparison(baseline_images=['wireframe3dzerocstride'***REMOVED***, remove_text=True,
                  extensions=['png'***REMOVED******REMOVED***
def test_wireframe3dzerocstride(***REMOVED***:
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(111, projection='3d'***REMOVED***
    X, Y, Z = axes3d.get_test_data(0.05***REMOVED***
    ax.plot_wireframe(X, Y, Z, rstride=10, cstride=0***REMOVED***


@image_comparison(baseline_images=['wireframe3dzerorstride'***REMOVED***, remove_text=True,
                  extensions=['png'***REMOVED******REMOVED***
def test_wireframe3dzerorstride(***REMOVED***:
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(111, projection='3d'***REMOVED***
    X, Y, Z = axes3d.get_test_data(0.05***REMOVED***
    ax.plot_wireframe(X, Y, Z, rstride=0, cstride=10***REMOVED***

@cleanup
def test_wireframe3dzerostrideraises(***REMOVED***:
    if sys.version_info[:2***REMOVED*** < (2, 7***REMOVED***:
        raise nose.SkipTest("assert_raises as context manager "
                            "not supported with Python < 2.7"***REMOVED***
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(111, projection='3d'***REMOVED***
    X, Y, Z = axes3d.get_test_data(0.05***REMOVED***
    with assert_raises(ValueError***REMOVED***:
        ax.plot_wireframe(X, Y, Z, rstride=0, cstride=0***REMOVED***

@image_comparison(baseline_images=['quiver3d'***REMOVED***, remove_text=True***REMOVED***
def test_quiver3d(***REMOVED***:
    fig = plt.figure(***REMOVED***
    ax = fig.gca(projection='3d'***REMOVED***

    x, y, z = np.ogrid[-1:0.8:10j, -1:0.8:10j, -1:0.6:3j***REMOVED***

    u = np.sin(np.pi * x***REMOVED*** * np.cos(np.pi * y***REMOVED*** * np.cos(np.pi * z***REMOVED***
    v = -np.cos(np.pi * x***REMOVED*** * np.sin(np.pi * y***REMOVED*** * np.cos(np.pi * z***REMOVED***
    w = (np.sqrt(2.0 / 3.0***REMOVED*** * np.cos(np.pi * x***REMOVED*** * np.cos(np.pi * y***REMOVED*** *
            np.sin(np.pi * z***REMOVED******REMOVED***

    ax.quiver(x, y, z, u, v, w, length=0.1***REMOVED***

@image_comparison(baseline_images=['quiver3d_empty'***REMOVED***, remove_text=True***REMOVED***
def test_quiver3d_empty(***REMOVED***:
    fig = plt.figure(***REMOVED***
    ax = fig.gca(projection='3d'***REMOVED***

    x, y, z = np.ogrid[-1:0.8:0j, -1:0.8:0j, -1:0.6:0j***REMOVED***

    u = np.sin(np.pi * x***REMOVED*** * np.cos(np.pi * y***REMOVED*** * np.cos(np.pi * z***REMOVED***
    v = -np.cos(np.pi * x***REMOVED*** * np.sin(np.pi * y***REMOVED*** * np.cos(np.pi * z***REMOVED***
    w = (np.sqrt(2.0 / 3.0***REMOVED*** * np.cos(np.pi * x***REMOVED*** * np.cos(np.pi * y***REMOVED*** *
            np.sin(np.pi * z***REMOVED******REMOVED***

    ax.quiver(x, y, z, u, v, w, length=0.1***REMOVED***

@image_comparison(baseline_images=['quiver3d_masked'***REMOVED***, remove_text=True***REMOVED***
def test_quiver3d_masked(***REMOVED***:
    fig = plt.figure(***REMOVED***
    ax = fig.gca(projection='3d'***REMOVED***

    # Using mgrid here instead of ogrid because masked_where doesn't
    # seem to like broadcasting very much...
    x, y, z = np.mgrid[-1:0.8:10j, -1:0.8:10j, -1:0.6:3j***REMOVED***

    u = np.sin(np.pi * x***REMOVED*** * np.cos(np.pi * y***REMOVED*** * np.cos(np.pi * z***REMOVED***
    v = -np.cos(np.pi * x***REMOVED*** * np.sin(np.pi * y***REMOVED*** * np.cos(np.pi * z***REMOVED***
    w = (np.sqrt(2.0 / 3.0***REMOVED*** * np.cos(np.pi * x***REMOVED*** * np.cos(np.pi * y***REMOVED*** *
            np.sin(np.pi * z***REMOVED******REMOVED***
    u = np.ma.masked_where((-0.4 < x***REMOVED*** & (x < 0.1***REMOVED***, u, copy=False***REMOVED***
    v = np.ma.masked_where((0.1 < y***REMOVED*** & (y < 0.7***REMOVED***, v, copy=False***REMOVED***

    ax.quiver(x, y, z, u, v, w, length=0.1***REMOVED***

@image_comparison(baseline_images=['quiver3d_pivot_middle'***REMOVED***, remove_text=True,
                  extensions=['png'***REMOVED******REMOVED***
def test_quiver3d_pivot_middle(***REMOVED***:
    fig = plt.figure(***REMOVED***
    ax = fig.gca(projection='3d'***REMOVED***

    x, y, z = np.ogrid[-1:0.8:10j, -1:0.8:10j, -1:0.6:3j***REMOVED***

    u = np.sin(np.pi * x***REMOVED*** * np.cos(np.pi * y***REMOVED*** * np.cos(np.pi * z***REMOVED***
    v = -np.cos(np.pi * x***REMOVED*** * np.sin(np.pi * y***REMOVED*** * np.cos(np.pi * z***REMOVED***
    w = (np.sqrt(2.0 / 3.0***REMOVED*** * np.cos(np.pi * x***REMOVED*** * np.cos(np.pi * y***REMOVED*** *
            np.sin(np.pi * z***REMOVED******REMOVED***

    ax.quiver(x, y, z, u, v, w, length=0.1, pivot='middle'***REMOVED***

@image_comparison(baseline_images=['quiver3d_pivot_tail'***REMOVED***, remove_text=True,
                  extensions=['png'***REMOVED******REMOVED***
def test_quiver3d_pivot_tail(***REMOVED***:
    fig = plt.figure(***REMOVED***
    ax = fig.gca(projection='3d'***REMOVED***

    x, y, z = np.ogrid[-1:0.8:10j, -1:0.8:10j, -1:0.6:3j***REMOVED***

    u = np.sin(np.pi * x***REMOVED*** * np.cos(np.pi * y***REMOVED*** * np.cos(np.pi * z***REMOVED***
    v = -np.cos(np.pi * x***REMOVED*** * np.sin(np.pi * y***REMOVED*** * np.cos(np.pi * z***REMOVED***
    w = (np.sqrt(2.0 / 3.0***REMOVED*** * np.cos(np.pi * x***REMOVED*** * np.cos(np.pi * y***REMOVED*** *
            np.sin(np.pi * z***REMOVED******REMOVED***

    ax.quiver(x, y, z, u, v, w, length=0.1, pivot='tail'***REMOVED***


@image_comparison(baseline_images=['axes3d_labelpad'***REMOVED***, extensions=['png'***REMOVED******REMOVED***
def test_axes3d_labelpad(***REMOVED***:
    from nose.tools import assert_equal
    from matplotlib import rcParams

    fig = plt.figure(***REMOVED***
    ax = Axes3D(fig***REMOVED***
    # labelpad respects rcParams
    assert_equal(ax.xaxis.labelpad, rcParams['axes.labelpad'***REMOVED******REMOVED***
    # labelpad can be set in set_label
    ax.set_xlabel('X LABEL', labelpad=10***REMOVED***
    assert_equal(ax.xaxis.labelpad, 10***REMOVED***
    ax.set_ylabel('Y LABEL'***REMOVED***
    ax.set_zlabel('Z LABEL'***REMOVED***
    # or manually
    ax.yaxis.labelpad = 20
    ax.zaxis.labelpad = -40

    # Tick labels also respect tick.pad (also from rcParams***REMOVED***
    for i, tick in enumerate(ax.yaxis.get_major_ticks(***REMOVED******REMOVED***:
        tick.set_pad(tick.get_pad(***REMOVED*** - i * 5***REMOVED***


@image_comparison(baseline_images=['axes3d_cla'***REMOVED***, extensions=['png'***REMOVED******REMOVED***
def test_axes3d_cla(***REMOVED***:
    # fixed in pull request 4553
    fig = plt.figure(***REMOVED***
    ax = fig.add_subplot(1,1,1, projection='3d'***REMOVED***
    ax.set_axis_off(***REMOVED***
    ax.cla(***REMOVED***  # make sure the axis displayed is 3D (not 2D***REMOVED***


if __name__ == '__main__':
    import nose
    nose.runmodule(argv=['-s', '--with-doctest'***REMOVED***, exit=False***REMOVED***
