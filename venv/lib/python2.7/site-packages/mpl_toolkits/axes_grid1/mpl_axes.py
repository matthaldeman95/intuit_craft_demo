from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six

import warnings

import matplotlib.axes as maxes
from matplotlib.artist import Artist
from matplotlib.axis import XAxis, YAxis

class SimpleChainedObjects(object***REMOVED***:
    def __init__(self, objects***REMOVED***:
        self._objects = objects

    def __getattr__(self, k***REMOVED***:
        _a = SimpleChainedObjects([getattr(a, k***REMOVED*** for a in self._objects***REMOVED******REMOVED***
        return _a

    def __call__(self, *kl, **kwargs***REMOVED***:
        for m in self._objects:
            m(*kl, **kwargs***REMOVED***


class Axes(maxes.Axes***REMOVED***:
    def toggle_axisline(self, b***REMOVED***:
        warnings.warn("toggle_axisline is not necessary and deprecated in axes_grid1"***REMOVED***

    class AxisDict(dict***REMOVED***:
        def __init__(self, axes***REMOVED***:
            self.axes = axes
            super(Axes.AxisDict, self***REMOVED***.__init__(***REMOVED***

        def __getitem__(self, k***REMOVED***:
            if isinstance(k, tuple***REMOVED***:
                r = SimpleChainedObjects(
                    [super(Axes.AxisDict, self***REMOVED***.__getitem__(k1***REMOVED*** for k1 in k***REMOVED******REMOVED***
                return r
            elif isinstance(k, slice***REMOVED***:
                if k.start is None and k.stop is None and k.step is None:
                    r = SimpleChainedObjects(list(six.itervalues(self***REMOVED******REMOVED******REMOVED***
                    return r
                else:
                    raise ValueError("Unsupported slice"***REMOVED***
            else:
                return dict.__getitem__(self, k***REMOVED***

        def __call__(self, *v, **kwargs***REMOVED***:
            return maxes.Axes.axis(self.axes, *v, **kwargs***REMOVED***

    def __init__(self, *kl, **kw***REMOVED***:
        super(Axes, self***REMOVED***.__init__(*kl, **kw***REMOVED***

    def _init_axis_artists(self, axes=None***REMOVED***:
        if axes is None:
            axes = self

        self._axislines = self.AxisDict(self***REMOVED***

        self._axislines["bottom"***REMOVED*** = SimpleAxisArtist(self.xaxis, 1, self.spines["bottom"***REMOVED******REMOVED***
        self._axislines["top"***REMOVED*** = SimpleAxisArtist(self.xaxis, 2, self.spines["top"***REMOVED******REMOVED***
        self._axislines["left"***REMOVED*** = SimpleAxisArtist(self.yaxis, 1, self.spines["left"***REMOVED******REMOVED***
        self._axislines["right"***REMOVED*** = SimpleAxisArtist(self.yaxis, 2, self.spines["right"***REMOVED******REMOVED***


    def _get_axislines(self***REMOVED***:
        return self._axislines

    axis = property(_get_axislines***REMOVED***

    def cla(self***REMOVED***:

        super(Axes, self***REMOVED***.cla(***REMOVED***
        self._init_axis_artists(***REMOVED***


class SimpleAxisArtist(Artist***REMOVED***:
    def __init__(self, axis, axisnum, spine***REMOVED***:
        self._axis = axis
        self._axisnum = axisnum
        self.line = spine

        if isinstance(axis, XAxis***REMOVED***:
            self._axis_direction = ["bottom", "top"***REMOVED***[axisnum-1***REMOVED***
        elif isinstance(axis, YAxis***REMOVED***:
            self._axis_direction = ["left", "right"***REMOVED***[axisnum-1***REMOVED***
        else:
            raise ValueError("axis must be instance of XAxis or YAxis : %s is provided" % (axis,***REMOVED******REMOVED***
        Artist.__init__(self***REMOVED***


    def _get_major_ticks(self***REMOVED***:
        tickline = "tick%dline" % self._axisnum
        return SimpleChainedObjects([getattr(tick, tickline***REMOVED*** for tick \
                                     in self._axis.get_major_ticks(***REMOVED******REMOVED******REMOVED***

    def _get_major_ticklabels(self***REMOVED***:
        label = "label%d" % self._axisnum
        return SimpleChainedObjects([getattr(tick, label***REMOVED*** for tick \
                                     in self._axis.get_major_ticks(***REMOVED******REMOVED******REMOVED***

    def _get_label(self***REMOVED***:
        return self._axis.label

    major_ticks = property(_get_major_ticks***REMOVED***
    major_ticklabels = property(_get_major_ticklabels***REMOVED***
    label = property(_get_label***REMOVED***

    def set_visible(self, b***REMOVED***:
        self.toggle(all=b***REMOVED***
        self.line.set_visible(b***REMOVED***
        self._axis.set_visible(True***REMOVED***
        Artist.set_visible(self, b***REMOVED***

    def set_label(self, txt***REMOVED***:
        self._axis.set_label_text(txt***REMOVED***

    def toggle(self, all=None, ticks=None, ticklabels=None, label=None***REMOVED***:

        if all:
            _ticks, _ticklabels, _label = True, True, True
        elif all is not None:
            _ticks, _ticklabels, _label = False, False, False
        else:
            _ticks, _ticklabels, _label = None, None, None

        if ticks is not None:
            _ticks = ticks
        if ticklabels is not None:
            _ticklabels = ticklabels
        if label is not None:
            _label = label

        tickOn = "tick%dOn" % self._axisnum
        labelOn = "label%dOn" % self._axisnum

        if _ticks is not None:
            tickparam = {tickOn: _ticks***REMOVED***
            self._axis.set_tick_params(**tickparam***REMOVED***
        if _ticklabels is not None:
            tickparam = {labelOn: _ticklabels***REMOVED***
            self._axis.set_tick_params(**tickparam***REMOVED***

        if _label is not None:
            pos = self._axis.get_label_position(***REMOVED***
            if (pos == self._axis_direction***REMOVED*** and not _label:
                self._axis.label.set_visible(False***REMOVED***
            elif _label:
                self._axis.label.set_visible(True***REMOVED***
                self._axis.set_label_position(self._axis_direction***REMOVED***


if __name__ == '__main__':
    import matplotlib.pyplot as plt
    fig = plt.figure(***REMOVED***
    ax = Axes(fig, [0.1, 0.1, 0.8, 0.8***REMOVED******REMOVED***
    fig.add_axes(ax***REMOVED***
    ax.cla(***REMOVED***
