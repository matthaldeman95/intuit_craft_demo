from __future__ import (absolute_import, division, print_function,
                        unicode_literals***REMOVED***

from matplotlib.externals import six
from matplotlib.externals.six.moves import zip

import numpy as np
from math import degrees
import math
import warnings

def atan2(dy, dx***REMOVED***:
    if dx == 0 and dx == 0:
        warnings.warn("dx and dy is 0"***REMOVED***
        return 0
    else:
        return math.atan2(dy, dx***REMOVED***

# FIXME : The current algorithm seems to return incorrect angle when the line
# ends at the boundary.

def clip(xlines, ylines, x0, clip="right", xdir=True, ydir=True***REMOVED***:

    clipped_xlines = [***REMOVED***
    clipped_ylines = [***REMOVED***

    _pos_angles = [***REMOVED***

    if xdir:
        xsign = 1
    else:
        xsign = -1

    if ydir:
        ysign = 1
    else:
        ysign = -1


    for x, y in zip(xlines, ylines***REMOVED***:

        if clip in ["up", "right"***REMOVED***:
            b = (x < x0***REMOVED***.astype("i"***REMOVED***
            db = b[1:***REMOVED*** - b[:-1***REMOVED***
        else:
            b = (x > x0***REMOVED***.astype("i"***REMOVED***
            db = b[1:***REMOVED*** - b[:-1***REMOVED***


        if b[0***REMOVED***:
            ns = 0
        else:
            ns = -1
        segx, segy = [***REMOVED***, [***REMOVED***
        for (i,***REMOVED*** in np.argwhere(db!=0***REMOVED***:
            c = db[i***REMOVED***
            if c == -1:
                dx = (x0 - x[i***REMOVED******REMOVED***
                dy = (y[i+1***REMOVED*** - y[i***REMOVED******REMOVED*** * (dx/ (x[i+1***REMOVED*** - x[i***REMOVED******REMOVED******REMOVED***
                y0 = y[i***REMOVED*** + dy
                clipped_xlines.append(np.concatenate([segx, x[ns:i+1***REMOVED***, [x0***REMOVED******REMOVED******REMOVED******REMOVED***
                clipped_ylines.append(np.concatenate([segy, y[ns:i+1***REMOVED***, [y0***REMOVED******REMOVED******REMOVED******REMOVED***
                ns = -1
                segx, segy = [***REMOVED***, [***REMOVED***

                if dx == 0. and dy == 0:
                    dx = x[i+1***REMOVED*** - x[i***REMOVED***
                    dy = y[i+1***REMOVED*** - y[i***REMOVED***

                a = degrees(atan2(ysign*dy, xsign*dx***REMOVED******REMOVED***
                _pos_angles.append((x0, y0, a***REMOVED******REMOVED***

            elif c == 1:
                dx = (x0 - x[i***REMOVED******REMOVED***
                dy = (y[i+1***REMOVED*** - y[i***REMOVED******REMOVED*** * (dx / (x[i+1***REMOVED*** - x[i***REMOVED******REMOVED******REMOVED***
                y0 = y[i***REMOVED*** + dy
                segx, segy = [x0***REMOVED***, [y0***REMOVED***
                ns = i+1

                if dx == 0. and dy == 0:
                    dx = x[i+1***REMOVED*** - x[i***REMOVED***
                    dy = y[i+1***REMOVED*** - y[i***REMOVED***

                a = degrees(atan2(ysign*dy, xsign*dx***REMOVED******REMOVED***
                _pos_angles.append((x0, y0, a***REMOVED******REMOVED***

                #print x[i***REMOVED***, x[i+1***REMOVED***

        if ns != -1:
            clipped_xlines.append(np.concatenate([segx, x[ns:***REMOVED******REMOVED******REMOVED******REMOVED***
            clipped_ylines.append(np.concatenate([segy, y[ns:***REMOVED******REMOVED******REMOVED******REMOVED***

        #clipped_pos_angles.append(_pos_angles***REMOVED***


    return clipped_xlines, clipped_ylines, _pos_angles


def clip_line_to_rect(xline, yline, bbox***REMOVED***:

    x0, y0, x1, y1 = bbox.extents

    xdir = x1 > x0
    ydir = y1 > y0

    if x1 > x0:
        lx1, ly1, c_right_ = clip([xline***REMOVED***, [yline***REMOVED***, x1, clip="right", xdir=xdir, ydir=ydir***REMOVED***
        lx2, ly2, c_left_ = clip(lx1, ly1, x0, clip="left", xdir=xdir, ydir=ydir***REMOVED***
    else:
        lx1, ly1, c_right_ = clip([xline***REMOVED***, [yline***REMOVED***, x0, clip="right", xdir=xdir, ydir=ydir***REMOVED***
        lx2, ly2, c_left_ = clip(lx1, ly1, x1, clip="left", xdir=xdir, ydir=ydir***REMOVED***

    if y1 > y0:
        ly3, lx3, c_top_ = clip(ly2, lx2, y1, clip="right", xdir=ydir, ydir=xdir***REMOVED***
        ly4, lx4, c_bottom_ = clip(ly3, lx3, y0, clip="left", xdir=ydir, ydir=xdir***REMOVED***
    else:
        ly3, lx3, c_top_ = clip(ly2, lx2, y0, clip="right", xdir=ydir, ydir=xdir***REMOVED***
        ly4, lx4, c_bottom_ = clip(ly3, lx3, y1, clip="left", xdir=ydir, ydir=xdir***REMOVED***


    # lx1, ly1, c_right_ = clip([xline***REMOVED***, [yline***REMOVED***, x1, clip="right"***REMOVED***
    # lx2, ly2, c_left_ = clip(lx1, ly1, x0, clip="left"***REMOVED***
    # ly3, lx3, c_top_ = clip(ly2, lx2, y1, clip="right"***REMOVED***
    # ly4, lx4, c_bottom_ = clip(ly3, lx3, y0, clip="left"***REMOVED***

    #c_left = [((x, y***REMOVED***, (a+90***REMOVED***%180-180***REMOVED*** for (x, y, a***REMOVED*** in c_left_ \
    #          if bbox.containsy(y***REMOVED******REMOVED***
    c_left = [((x, y***REMOVED***, (a+90***REMOVED***%180-90***REMOVED*** for (x, y, a***REMOVED*** in c_left_ \
              if bbox.containsy(y***REMOVED******REMOVED***
    c_bottom = [((x, y***REMOVED***, (90 - a***REMOVED***%180***REMOVED*** for (y, x, a***REMOVED*** in c_bottom_  \
                if bbox.containsx(x***REMOVED******REMOVED***
    c_right = [((x, y***REMOVED***, (a+90***REMOVED***%180+90***REMOVED*** for (x, y, a***REMOVED*** in c_right_ \
               if bbox.containsy(y***REMOVED******REMOVED***
    c_top = [((x, y***REMOVED***, (90 - a***REMOVED***%180+180***REMOVED*** for (y, x, a***REMOVED*** in c_top_ \
             if bbox.containsx(x***REMOVED******REMOVED***

    return list(zip(lx4, ly4***REMOVED******REMOVED***, [c_left, c_bottom, c_right, c_top***REMOVED***


if __name__ == "__main__":

    import matplotlib.pyplot as plt

    x = np.array([-3, -2, -1, 0., 1, 2, 3, 2, 1, 0, -1, -2, -3, 5***REMOVED******REMOVED***
    #x = np.array([-3, -2, -1, 0., 1, 2, 3***REMOVED******REMOVED***
    y = np.arange(len(x***REMOVED******REMOVED***
    #x0 = 2

    plt.plot(x, y, lw=1***REMOVED***

    from matplotlib.transforms import Bbox
    bb = Bbox.from_extents(-2, 3, 2, 12.5***REMOVED***
    lxy, ticks = clip_line_to_rect(x, y, bb***REMOVED***
    for xx, yy in lxy:
        plt.plot(xx, yy, lw=1, color="g"***REMOVED***

    ccc = iter(["ro", "go", "rx", "bx"***REMOVED******REMOVED***
    for ttt in ticks:
        cc = six.next(ccc***REMOVED***
        for (xx, yy***REMOVED***, aa in ttt:
            plt.plot([xx***REMOVED***, [yy***REMOVED***, cc***REMOVED***

    #xlim(
