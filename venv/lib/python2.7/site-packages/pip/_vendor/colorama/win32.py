# Copyright Jonathan Hartley 2013. BSD 3-Clause license, see LICENSE file.

# from winbase.h
STDOUT = -11
STDERR = -12

***REMOVED***
    import ctypes
    from ctypes import LibraryLoader
    windll = LibraryLoader(ctypes.WinDLL***REMOVED***
    from ctypes import wintypes
except (AttributeError, ImportError***REMOVED***:
    windll = None
    SetConsoleTextAttribute = lambda *_: None
    winapi_test = lambda *_: None
else:
    from ctypes import byref, Structure, c_char, POINTER

    COORD = wintypes._COORD

    class CONSOLE_SCREEN_BUFFER_INFO(Structure***REMOVED***:
        ***REMOVED***struct in wincon.h.***REMOVED***
        _fields_ = [
            ("dwSize", COORD***REMOVED***,
            ("dwCursorPosition", COORD***REMOVED***,
            ("wAttributes", wintypes.WORD***REMOVED***,
            ("srWindow", wintypes.SMALL_RECT***REMOVED***,
            ("dwMaximumWindowSize", COORD***REMOVED***,
        ***REMOVED***
        def __str__(self***REMOVED***:
            return '(%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d***REMOVED***' % (
                self.dwSize.Y, self.dwSize.X
                , self.dwCursorPosition.Y, self.dwCursorPosition.X
                , self.wAttributes
                , self.srWindow.Top, self.srWindow.Left, self.srWindow.Bottom, self.srWindow.Right
                , self.dwMaximumWindowSize.Y, self.dwMaximumWindowSize.X
            ***REMOVED***

    _GetStdHandle = windll.kernel32.GetStdHandle
    _GetStdHandle.argtypes = [
        wintypes.DWORD,
    ***REMOVED***
    _GetStdHandle.restype = wintypes.HANDLE

    _GetConsoleScreenBufferInfo = windll.kernel32.GetConsoleScreenBufferInfo
    _GetConsoleScreenBufferInfo.argtypes = [
        wintypes.HANDLE,
        POINTER(CONSOLE_SCREEN_BUFFER_INFO***REMOVED***,
    ***REMOVED***
    _GetConsoleScreenBufferInfo.restype = wintypes.BOOL

    _SetConsoleTextAttribute = windll.kernel32.SetConsoleTextAttribute
    _SetConsoleTextAttribute.argtypes = [
        wintypes.HANDLE,
        wintypes.WORD,
    ***REMOVED***
    _SetConsoleTextAttribute.restype = wintypes.BOOL

    _SetConsoleCursorPosition = windll.kernel32.SetConsoleCursorPosition
    _SetConsoleCursorPosition.argtypes = [
        wintypes.HANDLE,
        COORD,
    ***REMOVED***
    _SetConsoleCursorPosition.restype = wintypes.BOOL

    _FillConsoleOutputCharacterA = windll.kernel32.FillConsoleOutputCharacterA
    _FillConsoleOutputCharacterA.argtypes = [
        wintypes.HANDLE,
        c_char,
        wintypes.DWORD,
        COORD,
        POINTER(wintypes.DWORD***REMOVED***,
    ***REMOVED***
    _FillConsoleOutputCharacterA.restype = wintypes.BOOL

    _FillConsoleOutputAttribute = windll.kernel32.FillConsoleOutputAttribute
    _FillConsoleOutputAttribute.argtypes = [
        wintypes.HANDLE,
        wintypes.WORD,
        wintypes.DWORD,
        COORD,
        POINTER(wintypes.DWORD***REMOVED***,
    ***REMOVED***
    _FillConsoleOutputAttribute.restype = wintypes.BOOL

    _SetConsoleTitleW = windll.kernel32.SetConsoleTitleA
    _SetConsoleTitleW.argtypes = [
        wintypes.LPCSTR
    ***REMOVED***
    _SetConsoleTitleW.restype = wintypes.BOOL

    handles = {
        STDOUT: _GetStdHandle(STDOUT***REMOVED***,
        STDERR: _GetStdHandle(STDERR***REMOVED***,
***REMOVED***

    def winapi_test(***REMOVED***:
        handle = handles[STDOUT***REMOVED***
        csbi = CONSOLE_SCREEN_BUFFER_INFO(***REMOVED***
        success = _GetConsoleScreenBufferInfo(
            handle, byref(csbi***REMOVED******REMOVED***
        return bool(success***REMOVED***

    def GetConsoleScreenBufferInfo(stream_id=STDOUT***REMOVED***:
        handle = handles[stream_id***REMOVED***
        csbi = CONSOLE_SCREEN_BUFFER_INFO(***REMOVED***
        success = _GetConsoleScreenBufferInfo(
            handle, byref(csbi***REMOVED******REMOVED***
        return csbi

    def SetConsoleTextAttribute(stream_id, attrs***REMOVED***:
        handle = handles[stream_id***REMOVED***
        return _SetConsoleTextAttribute(handle, attrs***REMOVED***

    def SetConsoleCursorPosition(stream_id, position, adjust=True***REMOVED***:
        position = COORD(*position***REMOVED***
        # If the position is out of range, do nothing.
        if position.Y <= 0 or position.X <= 0:
            return
        # Adjust for Windows' SetConsoleCursorPosition:
        #    1. being 0-based, while ANSI is 1-based.
        #    2. expecting (x,y***REMOVED***, while ANSI uses (y,x***REMOVED***.
        adjusted_position = COORD(position.Y - 1, position.X - 1***REMOVED***
        if adjust:
            # Adjust for viewport's scroll position
            sr = GetConsoleScreenBufferInfo(STDOUT***REMOVED***.srWindow
            adjusted_position.Y += sr.Top
            adjusted_position.X += sr.Left
        # Resume normal processing
        handle = handles[stream_id***REMOVED***
        return _SetConsoleCursorPosition(handle, adjusted_position***REMOVED***

    def FillConsoleOutputCharacter(stream_id, char, length, start***REMOVED***:
        handle = handles[stream_id***REMOVED***
        char = c_char(char.encode(***REMOVED******REMOVED***
        length = wintypes.DWORD(length***REMOVED***
        num_written = wintypes.DWORD(0***REMOVED***
        # Note that this is hard-coded for ANSI (vs wide***REMOVED*** bytes.
        success = _FillConsoleOutputCharacterA(
            handle, char, length, start, byref(num_written***REMOVED******REMOVED***
        return num_written.value

    def FillConsoleOutputAttribute(stream_id, attr, length, start***REMOVED***:
        ''' FillConsoleOutputAttribute( hConsole, csbi.wAttributes, dwConSize, coordScreen, &cCharsWritten ***REMOVED***'''
        handle = handles[stream_id***REMOVED***
        attribute = wintypes.WORD(attr***REMOVED***
        length = wintypes.DWORD(length***REMOVED***
        num_written = wintypes.DWORD(0***REMOVED***
        # Note that this is hard-coded for ANSI (vs wide***REMOVED*** bytes.
        return _FillConsoleOutputAttribute(
            handle, attribute, length, start, byref(num_written***REMOVED******REMOVED***

    def SetConsoleTitle(title***REMOVED***:
        return _SetConsoleTitleW(title***REMOVED***
