# Copyright (c***REMOVED*** 2012 Giorgos Verigakis <verigak@gmail.com>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

from __future__ import print_function


HIDE_CURSOR = '\x1b[?25l'
SHOW_CURSOR = '\x1b[?25h'


class WriteMixin(object***REMOVED***:
    hide_cursor = False

    def __init__(self, message=None, **kwargs***REMOVED***:
        super(WriteMixin, self***REMOVED***.__init__(**kwargs***REMOVED***
        self._width = 0
        if message:
            self.message = message

        if self.file.isatty(***REMOVED***:
            if self.hide_cursor:
                print(HIDE_CURSOR, end='', file=self.file***REMOVED***
            print(self.message, end='', file=self.file***REMOVED***
            self.file.flush(***REMOVED***

    def write(self, s***REMOVED***:
        if self.file.isatty(***REMOVED***:
            b = '\b' * self._width
            c = s.ljust(self._width***REMOVED***
            print(b + c, end='', file=self.file***REMOVED***
            self._width = max(self._width, len(s***REMOVED******REMOVED***
            self.file.flush(***REMOVED***

    def finish(self***REMOVED***:
        if self.file.isatty(***REMOVED*** and self.hide_cursor:
            print(SHOW_CURSOR, end='', file=self.file***REMOVED***


class WritelnMixin(object***REMOVED***:
    hide_cursor = False

    def __init__(self, message=None, **kwargs***REMOVED***:
        super(WritelnMixin, self***REMOVED***.__init__(**kwargs***REMOVED***
        if message:
            self.message = message

        if self.file.isatty(***REMOVED*** and self.hide_cursor:
            print(HIDE_CURSOR, end='', file=self.file***REMOVED***

    def clearln(self***REMOVED***:
        if self.file.isatty(***REMOVED***:
            print('\r\x1b[K', end='', file=self.file***REMOVED***

    def writeln(self, line***REMOVED***:
        if self.file.isatty(***REMOVED***:
            self.clearln(***REMOVED***
            print(line, end='', file=self.file***REMOVED***
            self.file.flush(***REMOVED***

    def finish(self***REMOVED***:
        if self.file.isatty(***REMOVED***:
            print(file=self.file***REMOVED***
            if self.hide_cursor:
                print(SHOW_CURSOR, end='', file=self.file***REMOVED***


from signal import signal, SIGINT
from sys import exit


class SigIntMixin(object***REMOVED***:
    ***REMOVED***Registers a signal handler that calls finish on SIGINT***REMOVED***

    def __init__(self, *args, **kwargs***REMOVED***:
        super(SigIntMixin, self***REMOVED***.__init__(*args, **kwargs***REMOVED***
        signal(SIGINT, self._sigint_handler***REMOVED***

    def _sigint_handler(self, signum, frame***REMOVED***:
        self.finish(***REMOVED***
        exit(0***REMOVED***
