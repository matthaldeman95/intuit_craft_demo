# Copyright (c***REMOVED*** 2012 Giorgos Verigakis <verigak@gmail.com>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

from __future__ import division

from collections import deque
from datetime import timedelta
from math import ceil
from sys import stderr
from time import time


__version__ = '1.2'


class Infinite(object***REMOVED***:
    file = stderr
    sma_window = 10

    def __init__(self, *args, **kwargs***REMOVED***:
        self.index = 0
        self.start_ts = time(***REMOVED***
        self._ts = self.start_ts
        self._dt = deque(maxlen=self.sma_window***REMOVED***
        for key, val in kwargs.items(***REMOVED***:
            setattr(self, key, val***REMOVED***

    def __getitem__(self, key***REMOVED***:
        if key.startswith('_'***REMOVED***:
            return None
        return getattr(self, key, None***REMOVED***

    @property
    def avg(self***REMOVED***:
        return sum(self._dt***REMOVED*** / len(self._dt***REMOVED*** if self._dt else 0

    @property
    def elapsed(self***REMOVED***:
        return int(time(***REMOVED*** - self.start_ts***REMOVED***

    @property
    def elapsed_td(self***REMOVED***:
        return timedelta(seconds=self.elapsed***REMOVED***

    def update(self***REMOVED***:
        pass

    def start(self***REMOVED***:
        pass

    def finish(self***REMOVED***:
        pass

    def next(self, n=1***REMOVED***:
        if n > 0:
            now = time(***REMOVED***
            dt = (now - self._ts***REMOVED*** / n
            self._dt.append(dt***REMOVED***
            self._ts = now

        self.index = self.index + n
        self.update(***REMOVED***

    def iter(self, it***REMOVED***:
        for x in it:
            yield x
            self.next(***REMOVED***
        self.finish(***REMOVED***


class Progress(Infinite***REMOVED***:
    def __init__(self, *args, **kwargs***REMOVED***:
        super(Progress, self***REMOVED***.__init__(*args, **kwargs***REMOVED***
        self.max = kwargs.get('max', 100***REMOVED***

    @property
    def eta(self***REMOVED***:
        return int(ceil(self.avg * self.remaining***REMOVED******REMOVED***

    @property
    def eta_td(self***REMOVED***:
        return timedelta(seconds=self.eta***REMOVED***

    @property
    def percent(self***REMOVED***:
        return self.progress * 100

    @property
    def progress(self***REMOVED***:
        return min(1, self.index / self.max***REMOVED***

    @property
    def remaining(self***REMOVED***:
        return max(self.max - self.index, 0***REMOVED***

    def start(self***REMOVED***:
        self.update(***REMOVED***

    def goto(self, index***REMOVED***:
        incr = index - self.index
        self.next(incr***REMOVED***

    def iter(self, it***REMOVED***:
        ***REMOVED***
            self.max = len(it***REMOVED***
        except TypeError:
            pass

        for x in it:
            yield x
            self.next(***REMOVED***
        self.finish(***REMOVED***
