***REMOVED***
pip._vendor is for vendoring dependencies of pip to prevent needing pip to
depend on something external.

Files inside of pip._vendor should be considered immutable and should only be
updated to versions from upstream.
***REMOVED***
from __future__ import absolute_import

import glob
***REMOVED***.path
import sys

# Downstream redistributors which have debundled our dependencies should also
# patch this value to be true. This will trigger the additional patching
# to cause things like "six" to be available as pip.
DEBUNDLED = False

# By default, look in this directory for a bunch of .whl files which we will
# add to the beginning of sys.path before attempting to import anything. This
# is done to support downstream re-distributors like Debian and Fedora who
# wish to create their own Wheels for our dependencies to aid in debundling.
WHEEL_DIR = os.path.abspath(os.path.dirname(__file__***REMOVED******REMOVED***


# Define a small helper function to alias our vendored modules to the real ones
# if the vendored ones do not exist. This idea of this was taken from
# https://github.com/kennethreitz/requests/pull/2567.
def vendored(modulename***REMOVED***:
    vendored_name = "{0***REMOVED***.{1***REMOVED***".format(__name__, modulename***REMOVED***

    ***REMOVED***
        __import__(vendored_name, globals(***REMOVED***, locals(***REMOVED***, level=0***REMOVED***
    except ImportError:
        ***REMOVED***
            __import__(modulename, globals(***REMOVED***, locals(***REMOVED***, level=0***REMOVED***
        except ImportError:
            # We can just silently allow import failures to pass here. If we
            # got to this point it means that ``import pip._vendor.whatever``
            # failed and so did ``import whatever``. Since we're importing this
            # upfront in an attempt to alias imports, not erroring here will
            # just mean we get a regular import error whenever pip *actually*
            # tries to import one of these modules to use it, which actually
            # gives us a better error message than we would have otherwise
            # gotten.
            pass
        else:
            sys.modules[vendored_name***REMOVED*** = sys.modules[modulename***REMOVED***
            base, head = vendored_name.rsplit(".", 1***REMOVED***
            setattr(sys.modules[base***REMOVED***, head, sys.modules[modulename***REMOVED******REMOVED***


# If we're operating in a debundled setup, then we want to go ahead and trigger
# the aliasing of our vendored libraries as well as looking for wheels to add
# to our sys.path. This will cause all of this code to be a no-op typically
# however downstream redistributors can enable it in a consistent way across
# all platforms.
if DEBUNDLED:
    # Actually look inside of WHEEL_DIR to find .whl files and add them to the
    # front of our sys.path.
    sys.path[:***REMOVED*** = glob.glob(os.path.join(WHEEL_DIR, "*.whl"***REMOVED******REMOVED*** + sys.path

    # Actually alias all of our vendored dependencies.
    vendored("cachecontrol"***REMOVED***
    vendored("colorama"***REMOVED***
    vendored("distlib"***REMOVED***
    vendored("html5lib"***REMOVED***
    vendored("lockfile"***REMOVED***
    vendored("six"***REMOVED***
    vendored("six.moves"***REMOVED***
    vendored("six.moves.urllib"***REMOVED***
    vendored("packaging"***REMOVED***
    vendored("packaging.version"***REMOVED***
    vendored("packaging.specifiers"***REMOVED***
    vendored("pkg_resources"***REMOVED***
    vendored("progress"***REMOVED***
    vendored("retrying"***REMOVED***
    vendored("requests"***REMOVED***
    vendored("requests.packages"***REMOVED***
    vendored("requests.packages.urllib3"***REMOVED***
    vendored("requests.packages.urllib3._collections"***REMOVED***
    vendored("requests.packages.urllib3.connection"***REMOVED***
    vendored("requests.packages.urllib3.connectionpool"***REMOVED***
    vendored("requests.packages.urllib3.contrib"***REMOVED***
    vendored("requests.packages.urllib3.contrib.ntlmpool"***REMOVED***
    vendored("requests.packages.urllib3.contrib.pyopenssl"***REMOVED***
    vendored("requests.packages.urllib3.exceptions"***REMOVED***
    vendored("requests.packages.urllib3.fields"***REMOVED***
    vendored("requests.packages.urllib3.filepost"***REMOVED***
    vendored("requests.packages.urllib3.packages"***REMOVED***
    vendored("requests.packages.urllib3.packages.ordered_dict"***REMOVED***
    vendored("requests.packages.urllib3.packages.six"***REMOVED***
    vendored("requests.packages.urllib3.packages.ssl_match_hostname"***REMOVED***
    vendored("requests.packages.urllib3.packages.ssl_match_hostname."
             "_implementation"***REMOVED***
    vendored("requests.packages.urllib3.poolmanager"***REMOVED***
    vendored("requests.packages.urllib3.request"***REMOVED***
    vendored("requests.packages.urllib3.response"***REMOVED***
    vendored("requests.packages.urllib3.util"***REMOVED***
    vendored("requests.packages.urllib3.util.connection"***REMOVED***
    vendored("requests.packages.urllib3.util.request"***REMOVED***
    vendored("requests.packages.urllib3.util.response"***REMOVED***
    vendored("requests.packages.urllib3.util.retry"***REMOVED***
    vendored("requests.packages.urllib3.util.ssl_"***REMOVED***
    vendored("requests.packages.urllib3.util.timeout"***REMOVED***
    vendored("requests.packages.urllib3.util.url"***REMOVED***
