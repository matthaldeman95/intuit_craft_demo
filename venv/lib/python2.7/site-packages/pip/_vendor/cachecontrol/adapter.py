import functools

from pip._vendor.requests.adapters import HTTPAdapter

from .controller import CacheController
from .cache import DictCache
from .filewrapper import CallbackFileWrapper


class CacheControlAdapter(HTTPAdapter***REMOVED***:
    invalidating_methods = set(['PUT', 'DELETE'***REMOVED******REMOVED***

    def __init__(self, cache=None,
                 cache_etags=True,
                 controller_class=None,
                 serializer=None,
                 heuristic=None,
                 *args, **kw***REMOVED***:
        super(CacheControlAdapter, self***REMOVED***.__init__(*args, **kw***REMOVED***
        self.cache = cache or DictCache(***REMOVED***
        self.heuristic = heuristic

        controller_factory = controller_class or CacheController
        self.controller = controller_factory(
            self.cache,
            cache_etags=cache_etags,
            serializer=serializer,
        ***REMOVED***

    def send(self, request, **kw***REMOVED***:
        ***REMOVED***
        Send a request. Use the request information to see if it
        exists in the cache and cache the response if we need to and can.
        ***REMOVED***
        if request.method == 'GET':
            cached_response = self.controller.cached_request(request***REMOVED***
            if cached_response:
                return self.build_response(request, cached_response,
                                           from_cache=True***REMOVED***

            # check for etags and add headers if appropriate
            request.headers.update(
                self.controller.conditional_headers(request***REMOVED***
            ***REMOVED***

        resp = super(CacheControlAdapter, self***REMOVED***.send(request, **kw***REMOVED***

        return resp

    def build_response(self, request, response, from_cache=False***REMOVED***:
        ***REMOVED***
        Build a response by making a request or using the cache.

        This will end up calling send and returning a potentially
        cached response
        ***REMOVED***
        if not from_cache and request.method == 'GET':

            # apply any expiration heuristics
            if response.status == 304:
                # We must have sent an ETag request. This could mean
                # that we've been expired already or that we simply
                # have an etag. In either case, we want to try and
                # update the cache if that is the case.
                cached_response = self.controller.update_cached_response(
                    request, response
                ***REMOVED***

                if cached_response is not response:
                    from_cache = True

                # We are done with the server response, read a
                # possible response body (compliant servers will
                # not return one, but we cannot be 100% sure***REMOVED*** and
                # release the connection back to the pool.
                response.read(decode_content=False***REMOVED***
                response.release_conn(***REMOVED***

                response = cached_response

            # We always cache the 301 responses
            elif response.status == 301:
                self.controller.cache_response(request, response***REMOVED***
            else:
                # Check for any heuristics that might update headers
                # before trying to cache.
                if self.heuristic:
                    response = self.heuristic.apply(response***REMOVED***

                # Wrap the response file with a wrapper that will cache the
                #   response when the stream has been consumed.
                response._fp = CallbackFileWrapper(
                    response._fp,
                    functools.partial(
                        self.controller.cache_response,
                        request,
                        response,
                    ***REMOVED***
                ***REMOVED***

        resp = super(CacheControlAdapter, self***REMOVED***.build_response(
            request, response
        ***REMOVED***

        # See if we should invalidate the cache.
        if request.method in self.invalidating_methods and resp.ok:
            cache_url = self.controller.cache_url(request.url***REMOVED***
            self.cache.delete(cache_url***REMOVED***

        # Give the request a from_cache attr to let people use it
        resp.from_cache = from_cache

        return resp

    def close(self***REMOVED***:
        self.cache.close(***REMOVED***
        super(CacheControlAdapter, self***REMOVED***.close(***REMOVED***
