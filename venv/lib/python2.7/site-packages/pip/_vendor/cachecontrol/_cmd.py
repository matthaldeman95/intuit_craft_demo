import logging

from pip._vendor import requests

from pip._vendor.cachecontrol.adapter import CacheControlAdapter
from pip._vendor.cachecontrol.cache import DictCache
from pip._vendor.cachecontrol.controller import logger

from argparse import ArgumentParser


def setup_logging(***REMOVED***:
    logger.setLevel(logging.DEBUG***REMOVED***
    handler = logging.StreamHandler(***REMOVED***
    logger.addHandler(handler***REMOVED***


def get_session(***REMOVED***:
    adapter = CacheControlAdapter(
        DictCache(***REMOVED***,
        cache_etags=True,
        serializer=None,
        heuristic=None,
    ***REMOVED***
    sess = requests.Session(***REMOVED***
    sess.mount('http://', adapter***REMOVED***
    sess.mount('https://', adapter***REMOVED***

    sess.cache_controller = adapter.controller
    return sess


def get_args(***REMOVED***:
    parser = ArgumentParser(***REMOVED***
    parser.add_argument('url', help='The URL to try and cache'***REMOVED***
    return parser.parse_args(***REMOVED***


def main(args=None***REMOVED***:
    args = get_args(***REMOVED***
    sess = get_session(***REMOVED***

    # Make a request to get a response
    resp = sess.get(args.url***REMOVED***

    # Turn on logging
    setup_logging(***REMOVED***

    # try setting the cache
    sess.cache_controller.cache_response(resp.request, resp.raw***REMOVED***

    # Now try to get it
    if sess.cache_controller.cached_request(resp.request***REMOVED***:
        print('Cached!'***REMOVED***
    else:
        print('Not cached :('***REMOVED***


if __name__ == '__main__':
    main(***REMOVED***
