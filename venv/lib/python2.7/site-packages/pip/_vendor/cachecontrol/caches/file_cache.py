import hashlib
***REMOVED***

from pip._vendor.lockfile import LockFile
from pip._vendor.lockfile.mkdirlockfile import MkdirLockFile

from ..cache import BaseCache
from ..controller import CacheController


def _secure_open_write(filename, fmode***REMOVED***:
    # We only want to write to this file, so open it in write only mode
    flags = os.O_WRONLY

    # os.O_CREAT | os.O_EXCL will fail if the file already exists, so we only
    #  will open *new* files.
    # We specify this because we want to ensure that the mode we pass is the
    # mode of the file.
    flags |= os.O_CREAT | os.O_EXCL

    # Do not follow symlinks to prevent someone from making a symlink that
    # we follow and insecurely open a cache file.
    if hasattr(os, "O_NOFOLLOW"***REMOVED***:
        flags |= os.O_NOFOLLOW

    # On Windows we'll mark this file as binary
    if hasattr(os, "O_BINARY"***REMOVED***:
        flags |= os.O_BINARY

    # Before we open our file, we want to delete any existing file that is
    # there
    ***REMOVED***
        os.remove(filename***REMOVED***
    except (IOError, OSError***REMOVED***:
        # The file must not exist already, so we can just skip ahead to opening
        pass

    # Open our file, the use of os.O_CREAT | os.O_EXCL will ensure that if a
    # race condition happens between the os.remove and this line, that an
    # error will be raised. Because we utilize a lockfile this should only
    # happen if someone is attempting to attack us.
    fd = os.open(filename, flags, fmode***REMOVED***
    ***REMOVED***
        return os.fdopen(fd, "wb"***REMOVED***
    ***REMOVED***
        # An error occurred wrapping our FD in a file object
        os.close(fd***REMOVED***
        raise


class FileCache(BaseCache***REMOVED***:
    def __init__(self, directory, forever=False, filemode=0o0600,
                 dirmode=0o0700, use_dir_lock=None, lock_class=None***REMOVED***:

        if use_dir_lock is not None and lock_class is not None:
            raise ValueError("Cannot use use_dir_lock and lock_class together"***REMOVED***

        if use_dir_lock:
            lock_class = MkdirLockFile

        if lock_class is None:
            lock_class = LockFile

        self.directory = directory
        self.forever = forever
        self.filemode = filemode
        self.dirmode = dirmode
        self.lock_class = lock_class


    @staticmethod
    def encode(x***REMOVED***:
        return hashlib.sha224(x.encode(***REMOVED******REMOVED***.hexdigest(***REMOVED***

    def _fn(self, name***REMOVED***:
        # NOTE: This method should not change as some may depend on it.
        #       See: https://github.com/ionrock/cachecontrol/issues/63
        hashed = self.encode(name***REMOVED***
        parts = list(hashed[:5***REMOVED******REMOVED*** + [hashed***REMOVED***
        return os.path.join(self.directory, *parts***REMOVED***

    def get(self, key***REMOVED***:
        name = self._fn(key***REMOVED***
        if not os.path.exists(name***REMOVED***:
            return None

        with open(name, 'rb'***REMOVED*** as fh:
            return fh.read(***REMOVED***

    def set(self, key, value***REMOVED***:
        name = self._fn(key***REMOVED***

        # Make sure the directory exists
        ***REMOVED***
            os.makedirs(os.path.dirname(name***REMOVED***, self.dirmode***REMOVED***
        except (IOError, OSError***REMOVED***:
            pass

        with self.lock_class(name***REMOVED*** as lock:
            # Write our actual file
            with _secure_open_write(lock.path, self.filemode***REMOVED*** as fh:
                fh.write(value***REMOVED***

    def delete(self, key***REMOVED***:
        name = self._fn(key***REMOVED***
        if not self.forever:
            os.remove(name***REMOVED***


def url_to_file_path(url, filecache***REMOVED***:
    ***REMOVED***Return the file cache path based on the URL.

    This does not ensure the file exists!
    ***REMOVED***
    key = CacheController.cache_url(url***REMOVED***
    return filecache._fn(key***REMOVED***
