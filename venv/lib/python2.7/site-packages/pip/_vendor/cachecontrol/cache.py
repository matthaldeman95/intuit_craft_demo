***REMOVED***
The cache object API for implementing caches. The default is a thread
safe in-memory dictionary.
***REMOVED***
from threading import Lock


class BaseCache(object***REMOVED***:

    def get(self, key***REMOVED***:
        raise NotImplemented(***REMOVED***

    def set(self, key, value***REMOVED***:
        raise NotImplemented(***REMOVED***

    def delete(self, key***REMOVED***:
        raise NotImplemented(***REMOVED***

    def close(self***REMOVED***:
        pass


class DictCache(BaseCache***REMOVED***:

    def __init__(self, init_dict=None***REMOVED***:
        self.lock = Lock(***REMOVED***
        self.data = init_dict or {***REMOVED***

    def get(self, key***REMOVED***:
        return self.data.get(key, None***REMOVED***

    def set(self, key, value***REMOVED***:
        with self.lock:
            self.data.update({key: value***REMOVED******REMOVED***

    def delete(self, key***REMOVED***:
        with self.lock:
            if key in self.data:
                self.data.pop(key***REMOVED***
