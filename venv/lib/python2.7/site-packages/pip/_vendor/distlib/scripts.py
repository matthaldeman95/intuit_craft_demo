# -*- coding: utf-8 -*-
#
# Copyright (C***REMOVED*** 2013-2015 Vinay Sajip.
# Licensed to the Python Software Foundation under a contributor agreement.
# See LICENSE.txt and CONTRIBUTORS.txt.
#
from io import BytesIO
import logging
***REMOVED***
import re
import struct
import sys

from .compat import sysconfig, detect_encoding, ZipFile
from .resources import finder
from .util import (FileOperator, get_export_entry, convert_path,
                   get_executable, in_venv***REMOVED***

logger = logging.getLogger(__name__***REMOVED***

_DEFAULT_MANIFEST = '''
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
 <assemblyIdentity version="1.0.0.0"
 processorArchitecture="X86"
 name="%s"
 type="win32"/>

 <!-- Identify the application security requirements. -->
 <trustInfo xmlns="urn:schemas-microsoft-com:asm.v3">
 <security>
 <requestedPrivileges>
 <requestedExecutionLevel level="asInvoker" uiAccess="false"/>
 </requestedPrivileges>
 </security>
 </trustInfo>
</assembly>'''.strip(***REMOVED***

# check if Python is called on the first line with this expression
FIRST_LINE_RE = re.compile(b'^#!.*pythonw?[0-9.***REMOVED****([ \t***REMOVED***.****REMOVED***?$'***REMOVED***
SCRIPT_TEMPLATE = '''# -*- coding: utf-8 -*-
if __name__ == '__main__':
    import sys, re

    def _resolve(module, func***REMOVED***:
        __import__(module***REMOVED***
        mod = sys.modules[module***REMOVED***
        parts = func.split('.'***REMOVED***
        result = getattr(mod, parts.pop(0***REMOVED******REMOVED***
        for p in parts:
            result = getattr(result, p***REMOVED***
        return result

    ***REMOVED***
        sys.argv[0***REMOVED*** = re.sub(r'(-script\.pyw|\.exe***REMOVED***?$', '', sys.argv[0***REMOVED******REMOVED***

        func = _resolve('%(module***REMOVED***s', '%(func***REMOVED***s'***REMOVED***
        rc = func(***REMOVED*** # None interpreted as 0
    except Exception as e:  # only supporting Python >= 2.6
        sys.stderr.write('%%s\\n' %% e***REMOVED***
        rc = 1
    sys.exit(rc***REMOVED***
'''


def _enquote_executable(executable***REMOVED***:
    if ' ' in executable:
        # make sure we quote only the executable in case of env
        # for example /usr/bin/env "/dir with spaces/bin/jython"
        # instead of "/usr/bin/env /dir with spaces/bin/jython"
        # otherwise whole
        if executable.startswith('/usr/bin/env '***REMOVED***:
            env, _executable = executable.split(' ', 1***REMOVED***
            if ' ' in _executable and not _executable.startswith('"'***REMOVED***:
                executable = '%s "%s"' % (env, _executable***REMOVED***
        else:
            if not executable.startswith('"'***REMOVED***:
                executable = '"%s"' % executable
    return executable


class ScriptMaker(object***REMOVED***:
    ***REMOVED***
    A class to copy or create scripts from source scripts or callable
    specifications.
    ***REMOVED***
    script_template = SCRIPT_TEMPLATE

    executable = None  # for shebangs

    def __init__(self, source_dir, target_dir, add_launchers=True,
                 dry_run=False, fileop=None***REMOVED***:
        self.source_dir = source_dir
        self.target_dir = target_dir
        self.add_launchers = add_launchers
        self.force = False
        self.clobber = False
        # It only makes sense to set mode bits on POSIX.
        self.set_mode = (os.name == 'posix'***REMOVED*** or (os.name == 'java' and
                                                 os._name == 'posix'***REMOVED***
        self.variants = set(('', 'X.Y'***REMOVED******REMOVED***
        self._fileop = fileop or FileOperator(dry_run***REMOVED***

        self._is_nt = os.name == 'nt' or (
            os.name == 'java' and os._name == 'nt'***REMOVED***

    def _get_alternate_executable(self, executable, options***REMOVED***:
        if options.get('gui', False***REMOVED*** and self._is_nt:  # pragma: no cover
            dn, fn = os.path.split(executable***REMOVED***
            fn = fn.replace('python', 'pythonw'***REMOVED***
            executable = os.path.join(dn, fn***REMOVED***
        return executable

    if sys.platform.startswith('java'***REMOVED***:  # pragma: no cover
        def _is_shell(self, executable***REMOVED***:
            ***REMOVED***
            Determine if the specified executable is a script
            (contains a #! line***REMOVED***
            ***REMOVED***
            ***REMOVED***
                with open(executable***REMOVED*** as fp:
                    return fp.read(2***REMOVED*** == '#!'
            except (OSError, IOError***REMOVED***:
                logger.warning('Failed to open %s', executable***REMOVED***
                return False

        def _fix_jython_executable(self, executable***REMOVED***:
            if self._is_shell(executable***REMOVED***:
                # Workaround for Jython is not needed on Linux systems.
                import java

                if java.lang.System.getProperty('os.name'***REMOVED*** == 'Linux':
                    return executable
            elif executable.lower(***REMOVED***.endswith('jython.exe'***REMOVED***:
                # Use wrapper exe for Jython on Windows
                return executable
            return '/usr/bin/env %s' % executable

    def _get_shebang(self, encoding, post_interp=b'', options=None***REMOVED***:
        enquote = True
        if self.executable:
            executable = self.executable
            enquote = False     # assume this will be taken care of
        elif not sysconfig.is_python_build(***REMOVED***:
            executable = get_executable(***REMOVED***
        elif in_venv(***REMOVED***:  # pragma: no cover
            executable = os.path.join(sysconfig.get_path('scripts'***REMOVED***,
                            'python%s' % sysconfig.get_config_var('EXE'***REMOVED******REMOVED***
        else:  # pragma: no cover
            executable = os.path.join(
                sysconfig.get_config_var('BINDIR'***REMOVED***,
               'python%s%s' % (sysconfig.get_config_var('VERSION'***REMOVED***,
                               sysconfig.get_config_var('EXE'***REMOVED******REMOVED******REMOVED***
        if options:
            executable = self._get_alternate_executable(executable, options***REMOVED***

        if sys.platform.startswith('java'***REMOVED***:  # pragma: no cover
            executable = self._fix_jython_executable(executable***REMOVED***
        # Normalise case for Windows
        executable = os.path.normcase(executable***REMOVED***
        # If the user didn't specify an executable, it may be necessary to
        # cater for executable paths with spaces (not uncommon on Windows***REMOVED***
        if enquote:
            executable = _enquote_executable(executable***REMOVED***
        # Issue #51: don't use fsencode, since we later try to
        # check that the shebang is decodable using utf-8.
        executable = executable.encode('utf-8'***REMOVED***
        # in case of IronPython, play safe and enable frames support
        if (sys.platform == 'cli' and '-X:Frames' not in post_interp
            and '-X:FullFrames' not in post_interp***REMOVED***:  # pragma: no cover
            post_interp += b' -X:Frames'
        shebang = b'#!' + executable + post_interp + b'\n'
        # Python parser starts to read a script using UTF-8 until
        # it gets a #coding:xxx cookie. The shebang has to be the
        # first line of a file, the #coding:xxx cookie cannot be
        # written before. So the shebang has to be decodable from
        # UTF-8.
        ***REMOVED***
            shebang.decode('utf-8'***REMOVED***
        except UnicodeDecodeError:  # pragma: no cover
            raise ValueError(
                'The shebang (%r***REMOVED*** is not decodable from utf-8' % shebang***REMOVED***
        # If the script is encoded to a custom encoding (use a
        # #coding:xxx cookie***REMOVED***, the shebang has to be decodable from
        # the script encoding too.
        if encoding != 'utf-8':
            ***REMOVED***
                shebang.decode(encoding***REMOVED***
            except UnicodeDecodeError:  # pragma: no cover
                raise ValueError(
                    'The shebang (%r***REMOVED*** is not decodable '
                    'from the script encoding (%r***REMOVED***' % (shebang, encoding***REMOVED******REMOVED***
        return shebang

    def _get_script_text(self, entry***REMOVED***:
        return self.script_template % dict(module=entry.prefix,
                                           func=entry.suffix***REMOVED***

    manifest = _DEFAULT_MANIFEST

    def get_manifest(self, exename***REMOVED***:
        base = os.path.basename(exename***REMOVED***
        return self.manifest % base

    def _write_script(self, names, shebang, script_bytes, filenames, ext***REMOVED***:
        use_launcher = self.add_launchers and self._is_nt
        linesep = os.linesep.encode('utf-8'***REMOVED***
        if not use_launcher:
            script_bytes = shebang + linesep + script_bytes
        else:  # pragma: no cover
            if ext == 'py':
                launcher = self._get_launcher('t'***REMOVED***
            else:
                launcher = self._get_launcher('w'***REMOVED***
            stream = BytesIO(***REMOVED***
            with ZipFile(stream, 'w'***REMOVED*** as zf:
                zf.writestr('__main__.py', script_bytes***REMOVED***
            zip_data = stream.getvalue(***REMOVED***
            script_bytes = launcher + shebang + linesep + zip_data
        for name in names:
            outname = os.path.join(self.target_dir, name***REMOVED***
            if use_launcher:  # pragma: no cover
                n, e = os.path.splitext(outname***REMOVED***
                if e.startswith('.py'***REMOVED***:
                    outname = n
                outname = '%s.exe' % outname
                ***REMOVED***
                    self._fileop.write_binary_file(outname, script_bytes***REMOVED***
                except Exception:
                    # Failed writing an executable - it might be in use.
                    logger.warning('Failed to write executable - trying to '
                                   'use .deleteme logic'***REMOVED***
                    dfname = '%s.deleteme' % outname
                    if os.path.exists(dfname***REMOVED***:
                        os.remove(dfname***REMOVED***       # Not allowed to fail here
                    os.rename(outname, dfname***REMOVED***  # nor here
                    self._fileop.write_binary_file(outname, script_bytes***REMOVED***
                    logger.debug('Able to replace executable using '
                                 '.deleteme logic'***REMOVED***
                    ***REMOVED***
                        os.remove(dfname***REMOVED***
                    except Exception:
                        pass    # still in use - ignore error
            else:
                if self._is_nt and not outname.endswith('.' + ext***REMOVED***:  # pragma: no cover
                    outname = '%s.%s' % (outname, ext***REMOVED***
                if os.path.exists(outname***REMOVED*** and not self.clobber:
                    logger.warning('Skipping existing file %s', outname***REMOVED***
                    continue
                self._fileop.write_binary_file(outname, script_bytes***REMOVED***
                if self.set_mode:
                    self._fileop.set_executable_mode([outname***REMOVED******REMOVED***
            filenames.append(outname***REMOVED***

    def _make_script(self, entry, filenames, options=None***REMOVED***:
        post_interp = b''
        if options:
            args = options.get('interpreter_args', [***REMOVED******REMOVED***
            if args:
                args = ' %s' % ' '.join(args***REMOVED***
                post_interp = args.encode('utf-8'***REMOVED***
        shebang = self._get_shebang('utf-8', post_interp, options=options***REMOVED***
        script = self._get_script_text(entry***REMOVED***.encode('utf-8'***REMOVED***
        name = entry.name
        scriptnames = set(***REMOVED***
        if '' in self.variants:
            scriptnames.add(name***REMOVED***
        if 'X' in self.variants:
            scriptnames.add('%s%s' % (name, sys.version[0***REMOVED******REMOVED******REMOVED***
        if 'X.Y' in self.variants:
            scriptnames.add('%s-%s' % (name, sys.version[:3***REMOVED******REMOVED******REMOVED***
        if options and options.get('gui', False***REMOVED***:
            ext = 'pyw'
        else:
            ext = 'py'
        self._write_script(scriptnames, shebang, script, filenames, ext***REMOVED***

    def _copy_script(self, script, filenames***REMOVED***:
        adjust = False
        script = os.path.join(self.source_dir, convert_path(script***REMOVED******REMOVED***
        outname = os.path.join(self.target_dir, os.path.basename(script***REMOVED******REMOVED***
        if not self.force and not self._fileop.newer(script, outname***REMOVED***:
            logger.debug('not copying %s (up-to-date***REMOVED***', script***REMOVED***
            return

        # Always open the file, but ignore failures in dry-run mode --
        # that way, we'll get accurate feedback if we can read the
        # script.
        ***REMOVED***
            f = open(script, 'rb'***REMOVED***
        except IOError:  # pragma: no cover
            if not self.dry_run:
                raise
            f = None
        else:
            first_line = f.readline(***REMOVED***
            if not first_line:  # pragma: no cover
                logger.warning('%s: %s is an empty file (skipping***REMOVED***',
                               self.get_command_name(***REMOVED***,  script***REMOVED***
                return

            match = FIRST_LINE_RE.match(first_line.replace(b'\r\n', b'\n'***REMOVED******REMOVED***
            if match:
                adjust = True
                post_interp = match.group(1***REMOVED*** or b''

        if not adjust:
            if f:
                f.close(***REMOVED***
            self._fileop.copy_file(script, outname***REMOVED***
            if self.set_mode:
                self._fileop.set_executable_mode([outname***REMOVED******REMOVED***
            filenames.append(outname***REMOVED***
        else:
            logger.info('copying and adjusting %s -> %s', script,
                        self.target_dir***REMOVED***
            if not self._fileop.dry_run:
                encoding, lines = detect_encoding(f.readline***REMOVED***
                f.seek(0***REMOVED***
                shebang = self._get_shebang(encoding, post_interp***REMOVED***
                if b'pythonw' in first_line:  # pragma: no cover
                    ext = 'pyw'
                else:
                    ext = 'py'
                n = os.path.basename(outname***REMOVED***
                self._write_script([n***REMOVED***, shebang, f.read(***REMOVED***, filenames, ext***REMOVED***
            if f:
                f.close(***REMOVED***

    @property
    def dry_run(self***REMOVED***:
        return self._fileop.dry_run

    @dry_run.setter
    def dry_run(self, value***REMOVED***:
        self._fileop.dry_run = value

    if os.name == 'nt' or (os.name == 'java' and os._name == 'nt'***REMOVED***:  # pragma: no cover
        # Executable launcher support.
        # Launchers are from https://bitbucket.org/vinay.sajip/simple_launcher/

        def _get_launcher(self, kind***REMOVED***:
            if struct.calcsize('P'***REMOVED*** == 8:   # 64-bit
                bits = '64'
            else:
                bits = '32'
            name = '%s%s.exe' % (kind, bits***REMOVED***
            # Issue 31: don't hardcode an absolute package name, but
            # determine it relative to the current package
            distlib_package = __name__.rsplit('.', 1***REMOVED***[0***REMOVED***
            result = finder(distlib_package***REMOVED***.find(name***REMOVED***.bytes
            return result

    # Public API follows

    def make(self, specification, options=None***REMOVED***:
        ***REMOVED***
        Make a script.

        :param specification: The specification, which is either a valid export
                              entry specification (to make a script from a
                              callable***REMOVED*** or a filename (to make a script by
                              copying from a source location***REMOVED***.
        :param options: A dictionary of options controlling script generation.
        :return: A list of all absolute pathnames written to.
        ***REMOVED***
        filenames = [***REMOVED***
        entry = get_export_entry(specification***REMOVED***
        if entry is None:
            self._copy_script(specification, filenames***REMOVED***
        else:
            self._make_script(entry, filenames, options=options***REMOVED***
        return filenames

    def make_multiple(self, specifications, options=None***REMOVED***:
        ***REMOVED***
        Take a list of specifications and make scripts from them,
        :param specifications: A list of specifications.
        :return: A list of all absolute pathnames written to,
        ***REMOVED***
        filenames = [***REMOVED***
        for specification in specifications:
            filenames.extend(self.make(specification, options***REMOVED******REMOVED***
        return filenames
