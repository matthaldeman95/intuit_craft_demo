from __future__ import absolute_import, division, unicode_literals

from collections import Mapping


class Trie(Mapping***REMOVED***:
    ***REMOVED***Abstract base class for tries***REMOVED***

    def keys(self, prefix=None***REMOVED***:
        keys = super(***REMOVED***.keys(***REMOVED***

        if prefix is None:
            return set(keys***REMOVED***

        # Python 2.6: no set comprehensions
        return set([x for x in keys if x.startswith(prefix***REMOVED******REMOVED******REMOVED***

    def has_keys_with_prefix(self, prefix***REMOVED***:
        for key in self.keys(***REMOVED***:
            if key.startswith(prefix***REMOVED***:
                return True

        return False

    def longest_prefix(self, prefix***REMOVED***:
        if prefix in self:
            return prefix

        for i in range(1, len(prefix***REMOVED*** + 1***REMOVED***:
            if prefix[:-i***REMOVED*** in self:
                return prefix[:-i***REMOVED***

        raise KeyError(prefix***REMOVED***

    def longest_prefix_item(self, prefix***REMOVED***:
        lprefix = self.longest_prefix(prefix***REMOVED***
        return (lprefix, self[lprefix***REMOVED******REMOVED***
