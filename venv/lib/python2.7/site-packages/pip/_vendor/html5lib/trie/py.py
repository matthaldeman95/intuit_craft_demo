from __future__ import absolute_import, division, unicode_literals
from pip._vendor.six import text_type

from bisect import bisect_left

from ._base import Trie as ABCTrie


class Trie(ABCTrie***REMOVED***:
    def __init__(self, data***REMOVED***:
        if not all(isinstance(x, text_type***REMOVED*** for x in data.keys(***REMOVED******REMOVED***:
            raise TypeError("All keys must be strings"***REMOVED***

        self._data = data
        self._keys = sorted(data.keys(***REMOVED******REMOVED***
        self._cachestr = ""
        self._cachepoints = (0, len(data***REMOVED******REMOVED***

    def __contains__(self, key***REMOVED***:
        return key in self._data

    def __len__(self***REMOVED***:
        return len(self._data***REMOVED***

    def __iter__(self***REMOVED***:
        return iter(self._data***REMOVED***

    def __getitem__(self, key***REMOVED***:
        return self._data[key***REMOVED***

    def keys(self, prefix=None***REMOVED***:
        if prefix is None or prefix == "" or not self._keys:
            return set(self._keys***REMOVED***

        if prefix.startswith(self._cachestr***REMOVED***:
            lo, hi = self._cachepoints
            start = i = bisect_left(self._keys, prefix, lo, hi***REMOVED***
        else:
            start = i = bisect_left(self._keys, prefix***REMOVED***

        keys = set(***REMOVED***
        if start == len(self._keys***REMOVED***:
            return keys

        while self._keys[i***REMOVED***.startswith(prefix***REMOVED***:
            keys.add(self._keys[i***REMOVED******REMOVED***
            i += 1

        self._cachestr = prefix
        self._cachepoints = (start, i***REMOVED***

        return keys

    def has_keys_with_prefix(self, prefix***REMOVED***:
        if prefix in self._data:
            return True

        if prefix.startswith(self._cachestr***REMOVED***:
            lo, hi = self._cachepoints
            i = bisect_left(self._keys, prefix, lo, hi***REMOVED***
        else:
            i = bisect_left(self._keys, prefix***REMOVED***

        if i == len(self._keys***REMOVED***:
            return False

        return self._keys[i***REMOVED***.startswith(prefix***REMOVED***
