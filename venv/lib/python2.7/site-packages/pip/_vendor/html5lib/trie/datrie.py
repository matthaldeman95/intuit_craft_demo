from __future__ import absolute_import, division, unicode_literals

from datrie import Trie as DATrie
from pip._vendor.six import text_type

from ._base import Trie as ABCTrie


class Trie(ABCTrie***REMOVED***:
    def __init__(self, data***REMOVED***:
        chars = set(***REMOVED***
        for key in data.keys(***REMOVED***:
            if not isinstance(key, text_type***REMOVED***:
                raise TypeError("All keys must be strings"***REMOVED***
            for char in key:
                chars.add(char***REMOVED***

        self._data = DATrie("".join(chars***REMOVED******REMOVED***
        for key, value in data.items(***REMOVED***:
            self._data[key***REMOVED*** = value

    def __contains__(self, key***REMOVED***:
        return key in self._data

    def __len__(self***REMOVED***:
        return len(self._data***REMOVED***

    def __iter__(self***REMOVED***:
        raise NotImplementedError(***REMOVED***

    def __getitem__(self, key***REMOVED***:
        return self._data[key***REMOVED***

    def keys(self, prefix=None***REMOVED***:
        return self._data.keys(prefix***REMOVED***

    def has_keys_with_prefix(self, prefix***REMOVED***:
        return self._data.has_keys_with_prefix(prefix***REMOVED***

    def longest_prefix(self, prefix***REMOVED***:
        return self._data.longest_prefix(prefix***REMOVED***

    def longest_prefix_item(self, prefix***REMOVED***:
        return self._data.longest_prefix_item(prefix***REMOVED***
