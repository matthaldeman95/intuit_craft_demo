from __future__ import absolute_import, division, unicode_literals
from pip._vendor.six import text_type, string_types

__all__ = ["DOCUMENT", "DOCTYPE", "TEXT", "ELEMENT", "COMMENT", "ENTITY", "UNKNOWN",
           "TreeWalker", "NonRecursiveTreeWalker"***REMOVED***

from xml.dom import Node

DOCUMENT = Node.DOCUMENT_NODE
DOCTYPE = Node.DOCUMENT_TYPE_NODE
TEXT = Node.TEXT_NODE
ELEMENT = Node.ELEMENT_NODE
COMMENT = Node.COMMENT_NODE
ENTITY = Node.ENTITY_NODE
UNKNOWN = "<#UNKNOWN#>"

from ..constants import voidElements, spaceCharacters
spaceCharacters = "".join(spaceCharacters***REMOVED***


def to_text(s, blank_if_none=True***REMOVED***:
    ***REMOVED***Wrapper around six.text_type to convert None to empty string***REMOVED***
    if s is None:
        if blank_if_none:
            return ""
        else:
            return None
    elif isinstance(s, text_type***REMOVED***:
        return s
    else:
        return text_type(s***REMOVED***


def is_text_or_none(string***REMOVED***:
    ***REMOVED***Wrapper around isinstance(string_types***REMOVED*** or is None***REMOVED***
    return string is None or isinstance(string, string_types***REMOVED***


class TreeWalker(object***REMOVED***:
    def __init__(self, tree***REMOVED***:
        self.tree = tree

    def __iter__(self***REMOVED***:
        raise NotImplementedError

    def error(self, msg***REMOVED***:
        return {"type": "SerializeError", "data": msg***REMOVED***

    def emptyTag(self, namespace, name, attrs, hasChildren=False***REMOVED***:
        assert namespace is None or isinstance(namespace, string_types***REMOVED***, type(namespace***REMOVED***
        assert isinstance(name, string_types***REMOVED***, type(name***REMOVED***
        assert all((namespace is None or isinstance(namespace, string_types***REMOVED******REMOVED*** and
                   isinstance(name, string_types***REMOVED*** and
                   isinstance(value, string_types***REMOVED***
                   for (namespace, name***REMOVED***, value in attrs.items(***REMOVED******REMOVED***

        yield {"type": "EmptyTag", "name": to_text(name, False***REMOVED***,
               "namespace": to_text(namespace***REMOVED***,
               "data": attrs***REMOVED***
        if hasChildren:
            yield self.error("Void element has children"***REMOVED***

    def startTag(self, namespace, name, attrs***REMOVED***:
        assert namespace is None or isinstance(namespace, string_types***REMOVED***, type(namespace***REMOVED***
        assert isinstance(name, string_types***REMOVED***, type(name***REMOVED***
        assert all((namespace is None or isinstance(namespace, string_types***REMOVED******REMOVED*** and
                   isinstance(name, string_types***REMOVED*** and
                   isinstance(value, string_types***REMOVED***
                   for (namespace, name***REMOVED***, value in attrs.items(***REMOVED******REMOVED***

        return {"type": "StartTag",
                "name": text_type(name***REMOVED***,
                "namespace": to_text(namespace***REMOVED***,
                "data": dict(((to_text(namespace, False***REMOVED***, to_text(name***REMOVED******REMOVED***,
                              to_text(value, False***REMOVED******REMOVED***
                             for (namespace, name***REMOVED***, value in attrs.items(***REMOVED******REMOVED******REMOVED***

    def endTag(self, namespace, name***REMOVED***:
        assert namespace is None or isinstance(namespace, string_types***REMOVED***, type(namespace***REMOVED***
        assert isinstance(name, string_types***REMOVED***, type(namespace***REMOVED***

        return {"type": "EndTag",
                "name": to_text(name, False***REMOVED***,
                "namespace": to_text(namespace***REMOVED***,
                "data": {***REMOVED******REMOVED***

    def text(self, data***REMOVED***:
        assert isinstance(data, string_types***REMOVED***, type(data***REMOVED***

        data = to_text(data***REMOVED***
        middle = data.lstrip(spaceCharacters***REMOVED***
        left = data[:len(data***REMOVED*** - len(middle***REMOVED******REMOVED***
        if left:
            yield {"type": "SpaceCharacters", "data": left***REMOVED***
        data = middle
        middle = data.rstrip(spaceCharacters***REMOVED***
        right = data[len(middle***REMOVED***:***REMOVED***
        if middle:
            yield {"type": "Characters", "data": middle***REMOVED***
        if right:
            yield {"type": "SpaceCharacters", "data": right***REMOVED***

    def comment(self, data***REMOVED***:
        assert isinstance(data, string_types***REMOVED***, type(data***REMOVED***

        return {"type": "Comment", "data": text_type(data***REMOVED******REMOVED***

    def doctype(self, name, publicId=None, systemId=None, correct=True***REMOVED***:
        assert is_text_or_none(name***REMOVED***, type(name***REMOVED***
        assert is_text_or_none(publicId***REMOVED***, type(publicId***REMOVED***
        assert is_text_or_none(systemId***REMOVED***, type(systemId***REMOVED***

        return {"type": "Doctype",
                "name": to_text(name***REMOVED***,
                "publicId": to_text(publicId***REMOVED***,
                "systemId": to_text(systemId***REMOVED***,
                "correct": to_text(correct***REMOVED******REMOVED***

    def entity(self, name***REMOVED***:
        assert isinstance(name, string_types***REMOVED***, type(name***REMOVED***

        return {"type": "Entity", "name": text_type(name***REMOVED******REMOVED***

    def unknown(self, nodeType***REMOVED***:
        return self.error("Unknown node type: " + nodeType***REMOVED***


class NonRecursiveTreeWalker(TreeWalker***REMOVED***:
    def getNodeDetails(self, node***REMOVED***:
        raise NotImplementedError

    def getFirstChild(self, node***REMOVED***:
        raise NotImplementedError

    def getNextSibling(self, node***REMOVED***:
        raise NotImplementedError

    def getParentNode(self, node***REMOVED***:
        raise NotImplementedError

    def __iter__(self***REMOVED***:
        currentNode = self.tree
        while currentNode is not None:
            details = self.getNodeDetails(currentNode***REMOVED***
            type, details = details[0***REMOVED***, details[1:***REMOVED***
            hasChildren = False

            if type == DOCTYPE:
                yield self.doctype(*details***REMOVED***

            elif type == TEXT:
                for token in self.text(*details***REMOVED***:
                    yield token

            elif type == ELEMENT:
                namespace, name, attributes, hasChildren = details
                if name in voidElements:
                    for token in self.emptyTag(namespace, name, attributes,
                                               hasChildren***REMOVED***:
                        yield token
                    hasChildren = False
                else:
                    yield self.startTag(namespace, name, attributes***REMOVED***

            elif type == COMMENT:
                yield self.comment(details[0***REMOVED******REMOVED***

            elif type == ENTITY:
                yield self.entity(details[0***REMOVED******REMOVED***

            elif type == DOCUMENT:
                hasChildren = True

            else:
                yield self.unknown(details[0***REMOVED******REMOVED***

            if hasChildren:
                firstChild = self.getFirstChild(currentNode***REMOVED***
            else:
                firstChild = None

            if firstChild is not None:
                currentNode = firstChild
            else:
                while currentNode is not None:
                    details = self.getNodeDetails(currentNode***REMOVED***
                    type, details = details[0***REMOVED***, details[1:***REMOVED***
                    if type == ELEMENT:
                        namespace, name, attributes, hasChildren = details
                        if name not in voidElements:
                            yield self.endTag(namespace, name***REMOVED***
                    if self.tree is currentNode:
                        currentNode = None
                        break
                    nextSibling = self.getNextSibling(currentNode***REMOVED***
                    if nextSibling is not None:
                        currentNode = nextSibling
                        break
                    else:
                        currentNode = self.getParentNode(currentNode***REMOVED***
