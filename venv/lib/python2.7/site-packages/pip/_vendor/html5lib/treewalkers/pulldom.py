from __future__ import absolute_import, division, unicode_literals

from xml.dom.pulldom import START_ELEMENT, END_ELEMENT, \
    COMMENT, IGNORABLE_WHITESPACE, CHARACTERS

from . import _base

from ..constants import voidElements


class TreeWalker(_base.TreeWalker***REMOVED***:
    def __iter__(self***REMOVED***:
        ignore_until = None
        previous = None
        for event in self.tree:
            if previous is not None and \
                    (ignore_until is None or previous[1***REMOVED*** is ignore_until***REMOVED***:
                if previous[1***REMOVED*** is ignore_until:
                    ignore_until = None
                for token in self.tokens(previous, event***REMOVED***:
                    yield token
                    if token["type"***REMOVED*** == "EmptyTag":
                        ignore_until = previous[1***REMOVED***
            previous = event
        if ignore_until is None or previous[1***REMOVED*** is ignore_until:
            for token in self.tokens(previous, None***REMOVED***:
                yield token
        elif ignore_until is not None:
            raise ValueError("Illformed DOM event stream: void element without END_ELEMENT"***REMOVED***

    def tokens(self, event, next***REMOVED***:
        type, node = event
        if type == START_ELEMENT:
            name = node.nodeName
            namespace = node.namespaceURI
            attrs = {***REMOVED***
            for attr in list(node.attributes.keys(***REMOVED******REMOVED***:
                attr = node.getAttributeNode(attr***REMOVED***
                attrs[(attr.namespaceURI, attr.localName***REMOVED******REMOVED*** = attr.value
            if name in voidElements:
                for token in self.emptyTag(namespace,
                                           name,
                                           attrs,
                                           not next or next[1***REMOVED*** is not node***REMOVED***:
                    yield token
            else:
                yield self.startTag(namespace, name, attrs***REMOVED***

        elif type == END_ELEMENT:
            name = node.nodeName
            namespace = node.namespaceURI
            if name not in voidElements:
                yield self.endTag(namespace, name***REMOVED***

        elif type == COMMENT:
            yield self.comment(node.nodeValue***REMOVED***

        elif type in (IGNORABLE_WHITESPACE, CHARACTERS***REMOVED***:
            for token in self.text(node.nodeValue***REMOVED***:
                yield token

        else:
            yield self.unknown(type***REMOVED***
