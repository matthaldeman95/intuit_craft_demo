from __future__ import absolute_import, division, unicode_literals

import re

from . import _base
from ..constants import rcdataElements, spaceCharacters
spaceCharacters = "".join(spaceCharacters***REMOVED***

SPACES_REGEX = re.compile("[%s***REMOVED***+" % spaceCharacters***REMOVED***


class Filter(_base.Filter***REMOVED***:

    spacePreserveElements = frozenset(["pre", "textarea"***REMOVED*** + list(rcdataElements***REMOVED******REMOVED***

    def __iter__(self***REMOVED***:
        preserve = 0
        for token in _base.Filter.__iter__(self***REMOVED***:
            type = token["type"***REMOVED***
            if type == "StartTag" \
                    and (preserve or token["name"***REMOVED*** in self.spacePreserveElements***REMOVED***:
                preserve += 1

            elif type == "EndTag" and preserve:
                preserve -= 1

            elif not preserve and type == "SpaceCharacters" and token["data"***REMOVED***:
                # Test on token["data"***REMOVED*** above to not introduce spaces where there were not
                token["data"***REMOVED*** = " "

            elif not preserve and type == "Characters":
                token["data"***REMOVED*** = collapse_spaces(token["data"***REMOVED******REMOVED***

            yield token


def collapse_spaces(text***REMOVED***:
    return SPACES_REGEX.sub(' ', text***REMOVED***
