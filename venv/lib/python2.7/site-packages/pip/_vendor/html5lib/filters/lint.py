from __future__ import absolute_import, division, unicode_literals

from . import _base
from ..constants import cdataElements, rcdataElements, voidElements

from ..constants import spaceCharacters
spaceCharacters = "".join(spaceCharacters***REMOVED***


class LintError(Exception***REMOVED***:
    pass


class Filter(_base.Filter***REMOVED***:
    def __iter__(self***REMOVED***:
        open_elements = [***REMOVED***
        contentModelFlag = "PCDATA"
        for token in _base.Filter.__iter__(self***REMOVED***:
            type = token["type"***REMOVED***
            if type in ("StartTag", "EmptyTag"***REMOVED***:
                name = token["name"***REMOVED***
                if contentModelFlag != "PCDATA":
                    raise LintError("StartTag not in PCDATA content model flag: %(tag***REMOVED***s" % {"tag": name***REMOVED******REMOVED***
                if not isinstance(name, str***REMOVED***:
                    raise LintError("Tag name is not a string: %(tag***REMOVED***r" % {"tag": name***REMOVED******REMOVED***
                if not name:
                    raise LintError("Empty tag name"***REMOVED***
                if type == "StartTag" and name in voidElements:
                    raise LintError("Void element reported as StartTag token: %(tag***REMOVED***s" % {"tag": name***REMOVED******REMOVED***
                elif type == "EmptyTag" and name not in voidElements:
                    raise LintError("Non-void element reported as EmptyTag token: %(tag***REMOVED***s" % {"tag": token["name"***REMOVED******REMOVED******REMOVED***
                if type == "StartTag":
                    open_elements.append(name***REMOVED***
                for name, value in token["data"***REMOVED***:
                    if not isinstance(name, str***REMOVED***:
                        raise LintError("Attribute name is not a string: %(name***REMOVED***r" % {"name": name***REMOVED******REMOVED***
                    if not name:
                        raise LintError("Empty attribute name"***REMOVED***
                    if not isinstance(value, str***REMOVED***:
                        raise LintError("Attribute value is not a string: %(value***REMOVED***r" % {"value": value***REMOVED******REMOVED***
                if name in cdataElements:
                    contentModelFlag = "CDATA"
                elif name in rcdataElements:
                    contentModelFlag = "RCDATA"
                elif name == "plaintext":
                    contentModelFlag = "PLAINTEXT"

            elif type == "EndTag":
                name = token["name"***REMOVED***
                if not isinstance(name, str***REMOVED***:
                    raise LintError("Tag name is not a string: %(tag***REMOVED***r" % {"tag": name***REMOVED******REMOVED***
                if not name:
                    raise LintError("Empty tag name"***REMOVED***
                if name in voidElements:
                    raise LintError("Void element reported as EndTag token: %(tag***REMOVED***s" % {"tag": name***REMOVED******REMOVED***
                start_name = open_elements.pop(***REMOVED***
                if start_name != name:
                    raise LintError("EndTag (%(end***REMOVED***s***REMOVED*** does not match StartTag (%(start***REMOVED***s***REMOVED***" % {"end": name, "start": start_name***REMOVED******REMOVED***
                contentModelFlag = "PCDATA"

            elif type == "Comment":
                if contentModelFlag != "PCDATA":
                    raise LintError("Comment not in PCDATA content model flag"***REMOVED***

            elif type in ("Characters", "SpaceCharacters"***REMOVED***:
                data = token["data"***REMOVED***
                if not isinstance(data, str***REMOVED***:
                    raise LintError("Attribute name is not a string: %(name***REMOVED***r" % {"name": data***REMOVED******REMOVED***
                if not data:
                    raise LintError("%(type***REMOVED***s token with empty data" % {"type": type***REMOVED******REMOVED***
                if type == "SpaceCharacters":
                    data = data.strip(spaceCharacters***REMOVED***
                    if data:
                        raise LintError("Non-space character(s***REMOVED*** found in SpaceCharacters token: %(token***REMOVED***r" % {"token": data***REMOVED******REMOVED***

            elif type == "Doctype":
                name = token["name"***REMOVED***
                if contentModelFlag != "PCDATA":
                    raise LintError("Doctype not in PCDATA content model flag: %(name***REMOVED***s" % {"name": name***REMOVED******REMOVED***
                if not isinstance(name, str***REMOVED***:
                    raise LintError("Tag name is not a string: %(tag***REMOVED***r" % {"tag": name***REMOVED******REMOVED***
                # XXX: what to do with token["data"***REMOVED*** ?

            elif type in ("ParseError", "SerializeError"***REMOVED***:
                pass

            else:
                raise LintError("Unknown token type: %(type***REMOVED***s" % {"type": type***REMOVED******REMOVED***

            yield token
