from __future__ import absolute_import, division, unicode_literals

from . import _base


class Filter(_base.Filter***REMOVED***:
    def __init__(self, source, encoding***REMOVED***:
        _base.Filter.__init__(self, source***REMOVED***
        self.encoding = encoding

    def __iter__(self***REMOVED***:
        state = "pre_head"
        meta_found = (self.encoding is None***REMOVED***
        pending = [***REMOVED***

        for token in _base.Filter.__iter__(self***REMOVED***:
            type = token["type"***REMOVED***
            if type == "StartTag":
                if token["name"***REMOVED***.lower(***REMOVED*** == "head":
                    state = "in_head"

            elif type == "EmptyTag":
                if token["name"***REMOVED***.lower(***REMOVED*** == "meta":
                    # replace charset with actual encoding
                    has_http_equiv_content_type = False
                    for (namespace, name***REMOVED***, value in token["data"***REMOVED***.items(***REMOVED***:
                        if namespace is not None:
                            continue
                        elif name.lower(***REMOVED*** == 'charset':
                            token["data"***REMOVED***[(namespace, name***REMOVED******REMOVED*** = self.encoding
                            meta_found = True
                            break
                        elif name == 'http-equiv' and value.lower(***REMOVED*** == 'content-type':
                            has_http_equiv_content_type = True
                    else:
                        if has_http_equiv_content_type and (None, "content"***REMOVED*** in token["data"***REMOVED***:
                            token["data"***REMOVED***[(None, "content"***REMOVED******REMOVED*** = 'text/html; charset=%s' % self.encoding
                            meta_found = True

                elif token["name"***REMOVED***.lower(***REMOVED*** == "head" and not meta_found:
                    # insert meta into empty head
                    yield {"type": "StartTag", "name": "head",
                           "data": token["data"***REMOVED******REMOVED***
                    yield {"type": "EmptyTag", "name": "meta",
                           "data": {(None, "charset"***REMOVED***: self.encoding***REMOVED******REMOVED***
                    yield {"type": "EndTag", "name": "head"***REMOVED***
                    meta_found = True
                    continue

            elif type == "EndTag":
                if token["name"***REMOVED***.lower(***REMOVED*** == "head" and pending:
                    # insert meta into head (if necessary***REMOVED*** and flush pending queue
                    yield pending.pop(0***REMOVED***
                    if not meta_found:
                        yield {"type": "EmptyTag", "name": "meta",
                               "data": {(None, "charset"***REMOVED***: self.encoding***REMOVED******REMOVED***
                    while pending:
                        yield pending.pop(0***REMOVED***
                    meta_found = True
                    state = "post_head"

            if state == "in_head":
                pending.append(token***REMOVED***
            else:
                yield token
