from __future__ import absolute_import, division, unicode_literals


from xml.dom import minidom, Node
import weakref

from . import _base
from .. import constants
from ..constants import namespaces
from ..utils import moduleFactoryFactory


def getDomBuilder(DomImplementation***REMOVED***:
    Dom = DomImplementation

    class AttrList(object***REMOVED***:
        def __init__(self, element***REMOVED***:
            self.element = element

        def __iter__(self***REMOVED***:
            return list(self.element.attributes.items(***REMOVED******REMOVED***.__iter__(***REMOVED***

        def __setitem__(self, name, value***REMOVED***:
            self.element.setAttribute(name, value***REMOVED***

        def __len__(self***REMOVED***:
            return len(list(self.element.attributes.items(***REMOVED******REMOVED******REMOVED***

        def items(self***REMOVED***:
            return [(item[0***REMOVED***, item[1***REMOVED******REMOVED*** for item in
                    list(self.element.attributes.items(***REMOVED******REMOVED******REMOVED***

        def keys(self***REMOVED***:
            return list(self.element.attributes.keys(***REMOVED******REMOVED***

        def __getitem__(self, name***REMOVED***:
            return self.element.getAttribute(name***REMOVED***

        def __contains__(self, name***REMOVED***:
            if isinstance(name, tuple***REMOVED***:
                raise NotImplementedError
            else:
                return self.element.hasAttribute(name***REMOVED***

    class NodeBuilder(_base.Node***REMOVED***:
        def __init__(self, element***REMOVED***:
            _base.Node.__init__(self, element.nodeName***REMOVED***
            self.element = element

        namespace = property(lambda self: hasattr(self.element, "namespaceURI"***REMOVED***
                             and self.element.namespaceURI or None***REMOVED***

        def appendChild(self, node***REMOVED***:
            node.parent = self
            self.element.appendChild(node.element***REMOVED***

        def insertText(self, data, insertBefore=None***REMOVED***:
            text = self.element.ownerDocument.createTextNode(data***REMOVED***
            if insertBefore:
                self.element.insertBefore(text, insertBefore.element***REMOVED***
            else:
                self.element.appendChild(text***REMOVED***

        def insertBefore(self, node, refNode***REMOVED***:
            self.element.insertBefore(node.element, refNode.element***REMOVED***
            node.parent = self

        def removeChild(self, node***REMOVED***:
            if node.element.parentNode == self.element:
                self.element.removeChild(node.element***REMOVED***
            node.parent = None

        def reparentChildren(self, newParent***REMOVED***:
            while self.element.hasChildNodes(***REMOVED***:
                child = self.element.firstChild
                self.element.removeChild(child***REMOVED***
                newParent.element.appendChild(child***REMOVED***
            self.childNodes = [***REMOVED***

        def getAttributes(self***REMOVED***:
            return AttrList(self.element***REMOVED***

        def setAttributes(self, attributes***REMOVED***:
            if attributes:
                for name, value in list(attributes.items(***REMOVED******REMOVED***:
                    if isinstance(name, tuple***REMOVED***:
                        if name[0***REMOVED*** is not None:
                            qualifiedName = (name[0***REMOVED*** + ":" + name[1***REMOVED******REMOVED***
                        else:
                            qualifiedName = name[1***REMOVED***
                        self.element.setAttributeNS(name[2***REMOVED***, qualifiedName,
                                                    value***REMOVED***
                    else:
                        self.element.setAttribute(
                            name, value***REMOVED***
        attributes = property(getAttributes, setAttributes***REMOVED***

        def cloneNode(self***REMOVED***:
            return NodeBuilder(self.element.cloneNode(False***REMOVED******REMOVED***

        def hasContent(self***REMOVED***:
            return self.element.hasChildNodes(***REMOVED***

        def getNameTuple(self***REMOVED***:
            if self.namespace is None:
                return namespaces["html"***REMOVED***, self.name
            else:
                return self.namespace, self.name

        nameTuple = property(getNameTuple***REMOVED***

    class TreeBuilder(_base.TreeBuilder***REMOVED***:
        def documentClass(self***REMOVED***:
            self.dom = Dom.getDOMImplementation(***REMOVED***.createDocument(None, None, None***REMOVED***
            return weakref.proxy(self***REMOVED***

        def insertDoctype(self, token***REMOVED***:
            name = token["name"***REMOVED***
            publicId = token["publicId"***REMOVED***
            systemId = token["systemId"***REMOVED***

            domimpl = Dom.getDOMImplementation(***REMOVED***
            doctype = domimpl.createDocumentType(name, publicId, systemId***REMOVED***
            self.document.appendChild(NodeBuilder(doctype***REMOVED******REMOVED***
            if Dom == minidom:
                doctype.ownerDocument = self.dom

        def elementClass(self, name, namespace=None***REMOVED***:
            if namespace is None and self.defaultNamespace is None:
                node = self.dom.createElement(name***REMOVED***
            else:
                node = self.dom.createElementNS(namespace, name***REMOVED***

            return NodeBuilder(node***REMOVED***

        def commentClass(self, data***REMOVED***:
            return NodeBuilder(self.dom.createComment(data***REMOVED******REMOVED***

        def fragmentClass(self***REMOVED***:
            return NodeBuilder(self.dom.createDocumentFragment(***REMOVED******REMOVED***

        def appendChild(self, node***REMOVED***:
            self.dom.appendChild(node.element***REMOVED***

        def testSerializer(self, element***REMOVED***:
            return testSerializer(element***REMOVED***

        def getDocument(self***REMOVED***:
            return self.dom

        def getFragment(self***REMOVED***:
            return _base.TreeBuilder.getFragment(self***REMOVED***.element

        def insertText(self, data, parent=None***REMOVED***:
            data = data
            if parent != self:
                _base.TreeBuilder.insertText(self, data, parent***REMOVED***
            else:
                # HACK: allow text nodes as children of the document node
                if hasattr(self.dom, '_child_node_types'***REMOVED***:
                    if Node.TEXT_NODE not in self.dom._child_node_types:
                        self.dom._child_node_types = list(self.dom._child_node_types***REMOVED***
                        self.dom._child_node_types.append(Node.TEXT_NODE***REMOVED***
                self.dom.appendChild(self.dom.createTextNode(data***REMOVED******REMOVED***

        implementation = DomImplementation
        name = None

    def testSerializer(element***REMOVED***:
        element.normalize(***REMOVED***
        rv = [***REMOVED***

        def serializeElement(element, indent=0***REMOVED***:
            if element.nodeType == Node.DOCUMENT_TYPE_NODE:
                if element.name:
                    if element.publicId or element.systemId:
                        publicId = element.publicId or ""
                        systemId = element.systemId or ""
                        rv.append(***REMOVED***|%s<!DOCTYPE %s "%s" "%s">***REMOVED*** %
                                  (' ' * indent, element.name, publicId, systemId***REMOVED******REMOVED***
                    else:
                        rv.append("|%s<!DOCTYPE %s>" % (' ' * indent, element.name***REMOVED******REMOVED***
                else:
                    rv.append("|%s<!DOCTYPE >" % (' ' * indent,***REMOVED******REMOVED***
            elif element.nodeType == Node.DOCUMENT_NODE:
                rv.append("#document"***REMOVED***
            elif element.nodeType == Node.DOCUMENT_FRAGMENT_NODE:
                rv.append("#document-fragment"***REMOVED***
            elif element.nodeType == Node.COMMENT_NODE:
                rv.append("|%s<!-- %s -->" % (' ' * indent, element.nodeValue***REMOVED******REMOVED***
            elif element.nodeType == Node.TEXT_NODE:
                rv.append("|%s\"%s\"" % (' ' * indent, element.nodeValue***REMOVED******REMOVED***
            else:
                if (hasattr(element, "namespaceURI"***REMOVED*** and
                        element.namespaceURI is not None***REMOVED***:
                    name = "%s %s" % (constants.prefixes[element.namespaceURI***REMOVED***,
                                      element.nodeName***REMOVED***
                else:
                    name = element.nodeName
                rv.append("|%s<%s>" % (' ' * indent, name***REMOVED******REMOVED***
                if element.hasAttributes(***REMOVED***:
                    attributes = [***REMOVED***
                    for i in range(len(element.attributes***REMOVED******REMOVED***:
                        attr = element.attributes.item(i***REMOVED***
                        name = attr.nodeName
                        value = attr.value
                        ns = attr.namespaceURI
                        if ns:
                            name = "%s %s" % (constants.prefixes[ns***REMOVED***, attr.localName***REMOVED***
                        else:
                            name = attr.nodeName
                        attributes.append((name, value***REMOVED******REMOVED***

                    for name, value in sorted(attributes***REMOVED***:
                        rv.append('|%s%s="%s"' % (' ' * (indent + 2***REMOVED***, name, value***REMOVED******REMOVED***
            indent += 2
            for child in element.childNodes:
                serializeElement(child, indent***REMOVED***
        serializeElement(element, 0***REMOVED***

        return "\n".join(rv***REMOVED***

    return locals(***REMOVED***


# The actual means to get a module!
getDomModule = moduleFactoryFactory(getDomBuilder***REMOVED***
