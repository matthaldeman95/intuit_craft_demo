from __future__ import absolute_import, division, unicode_literals

from xml.sax.xmlreader import AttributesNSImpl

from ..constants import adjustForeignAttributes, unadjustForeignAttributes

prefix_mapping = {***REMOVED***
for prefix, localName, namespace in adjustForeignAttributes.values(***REMOVED***:
    if prefix is not None:
        prefix_mapping[prefix***REMOVED*** = namespace


def to_sax(walker, handler***REMOVED***:
    ***REMOVED***Call SAX-like content handler based on treewalker walker***REMOVED***
    handler.startDocument(***REMOVED***
    for prefix, namespace in prefix_mapping.items(***REMOVED***:
        handler.startPrefixMapping(prefix, namespace***REMOVED***

    for token in walker:
        type = token["type"***REMOVED***
        if type == "Doctype":
            continue
        elif type in ("StartTag", "EmptyTag"***REMOVED***:
            attrs = AttributesNSImpl(token["data"***REMOVED***,
                                     unadjustForeignAttributes***REMOVED***
            handler.startElementNS((token["namespace"***REMOVED***, token["name"***REMOVED******REMOVED***,
                                   token["name"***REMOVED***,
                                   attrs***REMOVED***
            if type == "EmptyTag":
                handler.endElementNS((token["namespace"***REMOVED***, token["name"***REMOVED******REMOVED***,
                                     token["name"***REMOVED******REMOVED***
        elif type == "EndTag":
            handler.endElementNS((token["namespace"***REMOVED***, token["name"***REMOVED******REMOVED***,
                                 token["name"***REMOVED******REMOVED***
        elif type in ("Characters", "SpaceCharacters"***REMOVED***:
            handler.characters(token["data"***REMOVED******REMOVED***
        elif type == "Comment":
            pass
        else:
            assert False, "Unknown token type"

    for prefix, namespace in prefix_mapping.items(***REMOVED***:
        handler.endPrefixMapping(prefix***REMOVED***
    handler.endDocument(***REMOVED***
