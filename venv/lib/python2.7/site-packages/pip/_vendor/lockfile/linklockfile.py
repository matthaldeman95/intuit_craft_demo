from __future__ import absolute_import

import time
***REMOVED***

from . import (LockBase, LockFailed, NotLocked, NotMyLock, LockTimeout,
               AlreadyLocked***REMOVED***


class LinkLockFile(LockBase***REMOVED***:
    ***REMOVED***Lock access to a file using atomic property of link(2***REMOVED***.

    >>> lock = LinkLockFile('somefile'***REMOVED***
    >>> lock = LinkLockFile('somefile', threaded=False***REMOVED***
    ***REMOVED***

    def acquire(self, timeout=None***REMOVED***:
        ***REMOVED***
            open(self.unique_name, "wb"***REMOVED***.close(***REMOVED***
        except IOError:
            raise LockFailed("failed to create %s" % self.unique_name***REMOVED***

        timeout = timeout if timeout is not None else self.timeout
        end_time = time.time(***REMOVED***
        if timeout is not None and timeout > 0:
            end_time += timeout

        while True:
            # Try and create a hard link to it.
            ***REMOVED***
                os.link(self.unique_name, self.lock_file***REMOVED***
            except OSError:
                # Link creation failed.  Maybe we've double-locked?
                nlinks = os.stat(self.unique_name***REMOVED***.st_nlink
                if nlinks == 2:
                    # The original link plus the one I created == 2.  We're
                    # good to go.
                    return
                else:
                    # Otherwise the lock creation failed.
                    if timeout is not None and time.time(***REMOVED*** > end_time:
                        os.unlink(self.unique_name***REMOVED***
                        if timeout > 0:
                            raise LockTimeout("Timeout waiting to acquire"
                                              " lock for %s" %
                                              self.path***REMOVED***
                        else:
                            raise AlreadyLocked("%s is already locked" %
                                                self.path***REMOVED***
                    time.sleep(timeout is not None and timeout / 10 or 0.1***REMOVED***
            else:
                # Link creation succeeded.  We're good to go.
                return

    def release(self***REMOVED***:
        if not self.is_locked(***REMOVED***:
            raise NotLocked("%s is not locked" % self.path***REMOVED***
        elif not os.path.exists(self.unique_name***REMOVED***:
            raise NotMyLock("%s is locked, but not by me" % self.path***REMOVED***
        os.unlink(self.unique_name***REMOVED***
        os.unlink(self.lock_file***REMOVED***

    def is_locked(self***REMOVED***:
        return os.path.exists(self.lock_file***REMOVED***

    def i_am_locking(self***REMOVED***:
        return (self.is_locked(***REMOVED*** and
                os.path.exists(self.unique_name***REMOVED*** and
                os.stat(self.unique_name***REMOVED***.st_nlink == 2***REMOVED***

    def break_lock(self***REMOVED***:
        if os.path.exists(self.lock_file***REMOVED***:
            os.unlink(self.lock_file***REMOVED***
