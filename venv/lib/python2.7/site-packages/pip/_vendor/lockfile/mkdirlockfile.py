from __future__ import absolute_import, division

import time
***REMOVED***
import sys
import errno

from . import (LockBase, LockFailed, NotLocked, NotMyLock, LockTimeout,
               AlreadyLocked***REMOVED***


class MkdirLockFile(LockBase***REMOVED***:
    ***REMOVED***Lock file by creating a directory.***REMOVED***
    def __init__(self, path, threaded=True, timeout=None***REMOVED***:
        ***REMOVED***
        >>> lock = MkdirLockFile('somefile'***REMOVED***
        >>> lock = MkdirLockFile('somefile', threaded=False***REMOVED***
        ***REMOVED***
        LockBase.__init__(self, path, threaded, timeout***REMOVED***
        # Lock file itself is a directory.  Place the unique file name into
        # it.
        self.unique_name = os.path.join(self.lock_file,
                                        "%s.%s%s" % (self.hostname,
                                                     self.tname,
                                                     self.pid***REMOVED******REMOVED***

    def acquire(self, timeout=None***REMOVED***:
        timeout = timeout if timeout is not None else self.timeout
        end_time = time.time(***REMOVED***
        if timeout is not None and timeout > 0:
            end_time += timeout

        if timeout is None:
            wait = 0.1
        else:
            wait = max(0, timeout / 10***REMOVED***

        while True:
            ***REMOVED***
                os.mkdir(self.lock_file***REMOVED***
            except OSError:
                err = sys.exc_info(***REMOVED***[1***REMOVED***
                if err.errno == errno.EEXIST:
                    # Already locked.
                    if os.path.exists(self.unique_name***REMOVED***:
                        # Already locked by me.
                        return
                    if timeout is not None and time.time(***REMOVED*** > end_time:
                        if timeout > 0:
                            raise LockTimeout("Timeout waiting to acquire"
                                              " lock for %s" %
                                              self.path***REMOVED***
                        else:
                            # Someone else has the lock.
                            raise AlreadyLocked("%s is already locked" %
                                                self.path***REMOVED***
                    time.sleep(wait***REMOVED***
                else:
                    # Couldn't create the lock for some other reason
                    raise LockFailed("failed to create %s" % self.lock_file***REMOVED***
            else:
                open(self.unique_name, "wb"***REMOVED***.close(***REMOVED***
                return

    def release(self***REMOVED***:
        if not self.is_locked(***REMOVED***:
            raise NotLocked("%s is not locked" % self.path***REMOVED***
        elif not os.path.exists(self.unique_name***REMOVED***:
            raise NotMyLock("%s is locked, but not by me" % self.path***REMOVED***
        os.unlink(self.unique_name***REMOVED***
        os.rmdir(self.lock_file***REMOVED***

    def is_locked(self***REMOVED***:
        return os.path.exists(self.lock_file***REMOVED***

    def i_am_locking(self***REMOVED***:
        return (self.is_locked(***REMOVED*** and
                os.path.exists(self.unique_name***REMOVED******REMOVED***

    def break_lock(self***REMOVED***:
        if os.path.exists(self.lock_file***REMOVED***:
            for name in os.listdir(self.lock_file***REMOVED***:
                os.unlink(os.path.join(self.lock_file, name***REMOVED******REMOVED***
            os.rmdir(self.lock_file***REMOVED***
