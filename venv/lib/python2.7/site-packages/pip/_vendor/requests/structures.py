# -*- coding: utf-8 -*-

***REMOVED***
requests.structures
~~~~~~~~~~~~~~~~~~~

Data structures that power Requests.

***REMOVED***

import collections

from .compat import OrderedDict


class CaseInsensitiveDict(collections.MutableMapping***REMOVED***:
    ***REMOVED***
    A case-insensitive ``dict``-like object.

    Implements all methods and operations of
    ``collections.MutableMapping`` as well as dict's ``copy``. Also
    provides ``lower_items``.

    All keys are expected to be strings. The structure remembers the
    case of the last key to be set, and ``iter(instance***REMOVED***``,
    ``keys(***REMOVED***``, ``items(***REMOVED***``, ``iterkeys(***REMOVED***``, and ``iteritems(***REMOVED***``
    will contain case-sensitive keys. However, querying and contains
    testing is case insensitive::

        cid = CaseInsensitiveDict(***REMOVED***
        cid['Accept'***REMOVED*** = 'application/json'
        cid['aCCEPT'***REMOVED*** == 'application/json'  # True
        list(cid***REMOVED*** == ['Accept'***REMOVED***  # True

    For example, ``headers['content-encoding'***REMOVED***`` will return the
    value of a ``'Content-Encoding'`` response header, regardless
    of how the header name was originally stored.

    If the constructor, ``.update``, or equality comparison
    operations are given keys that have equal ``.lower(***REMOVED***``s, the
    behavior is undefined.

    ***REMOVED***
    def __init__(self, data=None, **kwargs***REMOVED***:
        self._store = OrderedDict(***REMOVED***
        if data is None:
            data = {***REMOVED***
        self.update(data, **kwargs***REMOVED***

    def __setitem__(self, key, value***REMOVED***:
        # Use the lowercased key for lookups, but store the actual
        # key alongside the value.
        self._store[key.lower(***REMOVED******REMOVED*** = (key, value***REMOVED***

    def __getitem__(self, key***REMOVED***:
        return self._store[key.lower(***REMOVED******REMOVED***[1***REMOVED***

    def __delitem__(self, key***REMOVED***:
        del self._store[key.lower(***REMOVED******REMOVED***

    def __iter__(self***REMOVED***:
        return (casedkey for casedkey, mappedvalue in self._store.values(***REMOVED******REMOVED***

    def __len__(self***REMOVED***:
        return len(self._store***REMOVED***

    def lower_items(self***REMOVED***:
        ***REMOVED***Like iteritems(***REMOVED***, but with all lowercase keys.***REMOVED***
        return (
            (lowerkey, keyval[1***REMOVED******REMOVED***
            for (lowerkey, keyval***REMOVED***
            in self._store.items(***REMOVED***
        ***REMOVED***

    def __eq__(self, other***REMOVED***:
        if isinstance(other, collections.Mapping***REMOVED***:
            other = CaseInsensitiveDict(other***REMOVED***
        else:
            return NotImplemented
        # Compare insensitively
        return dict(self.lower_items(***REMOVED******REMOVED*** == dict(other.lower_items(***REMOVED******REMOVED***

    # Copy is required
    def copy(self***REMOVED***:
        return CaseInsensitiveDict(self._store.values(***REMOVED******REMOVED***

    def __repr__(self***REMOVED***:
        return str(dict(self.items(***REMOVED******REMOVED******REMOVED***

class LookupDict(dict***REMOVED***:
    ***REMOVED***Dictionary lookup object.***REMOVED***

    def __init__(self, name=None***REMOVED***:
        self.name = name
        super(LookupDict, self***REMOVED***.__init__(***REMOVED***

    def __repr__(self***REMOVED***:
        return '<lookup \'%s\'>' % (self.name***REMOVED***

    def __getitem__(self, key***REMOVED***:
        # We allow fall-through here, so values default to None

        return self.__dict__.get(key, None***REMOVED***

    def get(self, key, default=None***REMOVED***:
        return self.__dict__.get(key, default***REMOVED***
