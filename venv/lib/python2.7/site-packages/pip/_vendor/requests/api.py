# -*- coding: utf-8 -*-

***REMOVED***
requests.api
~~~~~~~~~~~~

This module implements the Requests API.

:copyright: (c***REMOVED*** 2012 by Kenneth Reitz.
:license: Apache2, see LICENSE for more details.

***REMOVED***

from . import sessions


def request(method, url, **kwargs***REMOVED***:
    ***REMOVED***Constructs and sends a :class:`Request <Request>`.

    :param method: method for the new :class:`Request` object.
    :param url: URL for the new :class:`Request` object.
    :param params: (optional***REMOVED*** Dictionary or bytes to be sent in the query string for the :class:`Request`.
    :param data: (optional***REMOVED*** Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.
    :param json: (optional***REMOVED*** json data to send in the body of the :class:`Request`.
    :param headers: (optional***REMOVED*** Dictionary of HTTP Headers to send with the :class:`Request`.
    :param cookies: (optional***REMOVED*** Dict or CookieJar object to send with the :class:`Request`.
    :param files: (optional***REMOVED*** Dictionary of ``'name': file-like-objects`` (or ``{'name': file-tuple***REMOVED***``***REMOVED*** for multipart encoding upload.
        ``file-tuple`` can be a 2-tuple ``('filename', fileobj***REMOVED***``, 3-tuple ``('filename', fileobj, 'content_type'***REMOVED***``
        or a 4-tuple ``('filename', fileobj, 'content_type', custom_headers***REMOVED***``, where ``'content-type'`` is a string
        defining the content type of the given file and ``custom_headers`` a dict-like object containing additional headers
        to add for the file.
    :param auth: (optional***REMOVED*** Auth tuple to enable Basic/Digest/Custom HTTP Auth.
    :param timeout: (optional***REMOVED*** How long to wait for the server to send data
        before giving up, as a float, or a :ref:`(connect timeout, read
        timeout***REMOVED*** <timeouts>` tuple.
    :type timeout: float or tuple
    :param allow_redirects: (optional***REMOVED*** Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.
    :type allow_redirects: bool
    :param proxies: (optional***REMOVED*** Dictionary mapping protocol to the URL of the proxy.
    :param verify: (optional***REMOVED*** whether the SSL cert will be verified. A CA_BUNDLE path can also be provided. Defaults to ``True``.
    :param stream: (optional***REMOVED*** if ``False``, the response content will be immediately downloaded.
    :param cert: (optional***REMOVED*** if String, path to ssl client cert file (.pem***REMOVED***. If Tuple, ('cert', 'key'***REMOVED*** pair.
    :return: :class:`Response <Response>` object
    :rtype: requests.Response

    Usage::

      >>> import requests
      >>> req = requests.request('GET', 'http://httpbin.org/get'***REMOVED***
      <Response [200***REMOVED***>
    ***REMOVED***

    # By using the 'with' statement we are sure the session is closed, thus we
    # avoid leaving sockets open which can trigger a ResourceWarning in some
    # cases, and look like a memory leak in others.
    with sessions.Session(***REMOVED*** as session:
        return session.request(method=method, url=url, **kwargs***REMOVED***


def get(url, params=None, **kwargs***REMOVED***:
    ***REMOVED***Sends a GET request.

    :param url: URL for the new :class:`Request` object.
    :param params: (optional***REMOVED*** Dictionary or bytes to be sent in the query string for the :class:`Request`.
    :param \*\*kwargs: Optional arguments that ``request`` takes.
    :return: :class:`Response <Response>` object
    :rtype: requests.Response
    ***REMOVED***

    kwargs.setdefault('allow_redirects', True***REMOVED***
    return request('get', url, params=params, **kwargs***REMOVED***


def options(url, **kwargs***REMOVED***:
    ***REMOVED***Sends a OPTIONS request.

    :param url: URL for the new :class:`Request` object.
    :param \*\*kwargs: Optional arguments that ``request`` takes.
    :return: :class:`Response <Response>` object
    :rtype: requests.Response
    ***REMOVED***

    kwargs.setdefault('allow_redirects', True***REMOVED***
    return request('options', url, **kwargs***REMOVED***


def head(url, **kwargs***REMOVED***:
    ***REMOVED***Sends a HEAD request.

    :param url: URL for the new :class:`Request` object.
    :param \*\*kwargs: Optional arguments that ``request`` takes.
    :return: :class:`Response <Response>` object
    :rtype: requests.Response
    ***REMOVED***

    kwargs.setdefault('allow_redirects', False***REMOVED***
    return request('head', url, **kwargs***REMOVED***


def post(url, data=None, json=None, **kwargs***REMOVED***:
    ***REMOVED***Sends a POST request.

    :param url: URL for the new :class:`Request` object.
    :param data: (optional***REMOVED*** Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.
    :param json: (optional***REMOVED*** json data to send in the body of the :class:`Request`.
    :param \*\*kwargs: Optional arguments that ``request`` takes.
    :return: :class:`Response <Response>` object
    :rtype: requests.Response
    ***REMOVED***

    return request('post', url, data=data, json=json, **kwargs***REMOVED***


def put(url, data=None, **kwargs***REMOVED***:
    ***REMOVED***Sends a PUT request.

    :param url: URL for the new :class:`Request` object.
    :param data: (optional***REMOVED*** Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.
    :param \*\*kwargs: Optional arguments that ``request`` takes.
    :return: :class:`Response <Response>` object
    :rtype: requests.Response
    ***REMOVED***

    return request('put', url, data=data, **kwargs***REMOVED***


def patch(url, data=None, **kwargs***REMOVED***:
    ***REMOVED***Sends a PATCH request.

    :param url: URL for the new :class:`Request` object.
    :param data: (optional***REMOVED*** Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.
    :param \*\*kwargs: Optional arguments that ``request`` takes.
    :return: :class:`Response <Response>` object
    :rtype: requests.Response
    ***REMOVED***

    return request('patch', url,  data=data, **kwargs***REMOVED***


def delete(url, **kwargs***REMOVED***:
    ***REMOVED***Sends a DELETE request.

    :param url: URL for the new :class:`Request` object.
    :param \*\*kwargs: Optional arguments that ``request`` takes.
    :return: :class:`Response <Response>` object
    :rtype: requests.Response
    ***REMOVED***

    return request('delete', url, **kwargs***REMOVED***
