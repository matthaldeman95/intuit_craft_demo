# Backport of OrderedDict(***REMOVED*** class that runs on Python 2.4, 2.5, 2.6, 2.7 and pypy.
# Passes Python2.7's test suite and incorporates all the latest updates.
# Copyright 2009 Raymond Hettinger, released under the MIT License.
# http://code.activestate.com/recipes/576693/
***REMOVED***
    from thread import get_ident as _get_ident
except ImportError:
    from dummy_thread import get_ident as _get_ident

***REMOVED***
    from _abcoll import KeysView, ValuesView, ItemsView
except ImportError:
    pass


class OrderedDict(dict***REMOVED***:
    'Dictionary that remembers insertion order'
    # An inherited dict maps keys to values.
    # The inherited dict provides __getitem__, __len__, __contains__, and get.
    # The remaining methods are order-aware.
    # Big-O running times for all methods are the same as for regular dictionaries.

    # The internal self.__map dictionary maps keys to links in a doubly linked list.
    # The circular doubly linked list starts and ends with a sentinel element.
    # The sentinel element never gets deleted (this simplifies the algorithm***REMOVED***.
    # Each link is stored as a list of length three:  [PREV, NEXT, KEY***REMOVED***.

    def __init__(self, *args, **kwds***REMOVED***:
        '''Initialize an ordered dictionary.  Signature is the same as for
        regular dictionaries, but keyword arguments are not recommended
        because their insertion order is arbitrary.

        '''
        if len(args***REMOVED*** > 1:
            raise TypeError('expected at most 1 arguments, got %d' % len(args***REMOVED******REMOVED***
        ***REMOVED***
            self.__root
        except AttributeError:
            self.__root = root = [***REMOVED***                     # sentinel node
            root[:***REMOVED*** = [root, root, None***REMOVED***
            self.__map = {***REMOVED***
        self.__update(*args, **kwds***REMOVED***

    def __setitem__(self, key, value, dict_setitem=dict.__setitem__***REMOVED***:
        'od.__setitem__(i, y***REMOVED*** <==> od[i***REMOVED***=y'
        # Setting a new item creates a new link which goes at the end of the linked
        # list, and the inherited dictionary is updated with the new key/value pair.
        if key not in self:
            root = self.__root
            last = root[0***REMOVED***
            last[1***REMOVED*** = root[0***REMOVED*** = self.__map[key***REMOVED*** = [last, root, key***REMOVED***
        dict_setitem(self, key, value***REMOVED***

    def __delitem__(self, key, dict_delitem=dict.__delitem__***REMOVED***:
        'od.__delitem__(y***REMOVED*** <==> del od[y***REMOVED***'
        # Deleting an existing item uses self.__map to find the link which is
        # then removed by updating the links in the predecessor and successor nodes.
        dict_delitem(self, key***REMOVED***
        link_prev, link_next, key = self.__map.pop(key***REMOVED***
        link_prev[1***REMOVED*** = link_next
        link_next[0***REMOVED*** = link_prev

    def __iter__(self***REMOVED***:
        'od.__iter__(***REMOVED*** <==> iter(od***REMOVED***'
        root = self.__root
        curr = root[1***REMOVED***
        while curr is not root:
            yield curr[2***REMOVED***
            curr = curr[1***REMOVED***

    def __reversed__(self***REMOVED***:
        'od.__reversed__(***REMOVED*** <==> reversed(od***REMOVED***'
        root = self.__root
        curr = root[0***REMOVED***
        while curr is not root:
            yield curr[2***REMOVED***
            curr = curr[0***REMOVED***

    def clear(self***REMOVED***:
        'od.clear(***REMOVED*** -> None.  Remove all items from od.'
        ***REMOVED***
            for node in self.__map.itervalues(***REMOVED***:
                del node[:***REMOVED***
            root = self.__root
            root[:***REMOVED*** = [root, root, None***REMOVED***
            self.__map.clear(***REMOVED***
        except AttributeError:
            pass
        dict.clear(self***REMOVED***

    def popitem(self, last=True***REMOVED***:
        '''od.popitem(***REMOVED*** -> (k, v***REMOVED***, return and remove a (key, value***REMOVED*** pair.
        Pairs are returned in LIFO order if last is true or FIFO order if false.

        '''
        if not self:
            raise KeyError('dictionary is empty'***REMOVED***
        root = self.__root
        if last:
            link = root[0***REMOVED***
            link_prev = link[0***REMOVED***
            link_prev[1***REMOVED*** = root
            root[0***REMOVED*** = link_prev
        else:
            link = root[1***REMOVED***
            link_next = link[1***REMOVED***
            root[1***REMOVED*** = link_next
            link_next[0***REMOVED*** = root
        key = link[2***REMOVED***
        del self.__map[key***REMOVED***
        value = dict.pop(self, key***REMOVED***
        return key, value

    # -- the following methods do not depend on the internal structure --

    def keys(self***REMOVED***:
        'od.keys(***REMOVED*** -> list of keys in od'
        return list(self***REMOVED***

    def values(self***REMOVED***:
        'od.values(***REMOVED*** -> list of values in od'
        return [self[key***REMOVED*** for key in self***REMOVED***

    def items(self***REMOVED***:
        'od.items(***REMOVED*** -> list of (key, value***REMOVED*** pairs in od'
        return [(key, self[key***REMOVED******REMOVED*** for key in self***REMOVED***

    def iterkeys(self***REMOVED***:
        'od.iterkeys(***REMOVED*** -> an iterator over the keys in od'
        return iter(self***REMOVED***

    def itervalues(self***REMOVED***:
        'od.itervalues -> an iterator over the values in od'
        for k in self:
            yield self[k***REMOVED***

    def iteritems(self***REMOVED***:
        'od.iteritems -> an iterator over the (key, value***REMOVED*** items in od'
        for k in self:
            yield (k, self[k***REMOVED******REMOVED***

    def update(*args, **kwds***REMOVED***:
        '''od.update(E, **F***REMOVED*** -> None.  Update od from dict/iterable E and F.

        If E is a dict instance, does:           for k in E: od[k***REMOVED*** = E[k***REMOVED***
        If E has a .keys(***REMOVED*** method, does:         for k in E.keys(***REMOVED***: od[k***REMOVED*** = E[k***REMOVED***
        Or if E is an iterable of items, does:   for k, v in E: od[k***REMOVED*** = v
        In either case, this is followed by:     for k, v in F.items(***REMOVED***: od[k***REMOVED*** = v

        '''
        if len(args***REMOVED*** > 2:
            raise TypeError('update(***REMOVED*** takes at most 2 positional '
                            'arguments (%d given***REMOVED***' % (len(args***REMOVED***,***REMOVED******REMOVED***
        elif not args:
            raise TypeError('update(***REMOVED*** takes at least 1 argument (0 given***REMOVED***'***REMOVED***
        self = args[0***REMOVED***
        # Make progressively weaker assumptions about "other"
        other = (***REMOVED***
        if len(args***REMOVED*** == 2:
            other = args[1***REMOVED***
        if isinstance(other, dict***REMOVED***:
            for key in other:
                self[key***REMOVED*** = other[key***REMOVED***
        elif hasattr(other, 'keys'***REMOVED***:
            for key in other.keys(***REMOVED***:
                self[key***REMOVED*** = other[key***REMOVED***
        else:
            for key, value in other:
                self[key***REMOVED*** = value
        for key, value in kwds.items(***REMOVED***:
            self[key***REMOVED*** = value

    __update = update  # let subclasses override update without breaking __init__

    __marker = object(***REMOVED***

    def pop(self, key, default=__marker***REMOVED***:
        '''od.pop(k[,d***REMOVED******REMOVED*** -> v, remove specified key and return the corresponding value.
        If key is not found, d is returned if given, otherwise KeyError is raised.

        '''
        if key in self:
            result = self[key***REMOVED***
            del self[key***REMOVED***
            return result
        if default is self.__marker:
            raise KeyError(key***REMOVED***
        return default

    def setdefault(self, key, default=None***REMOVED***:
        'od.setdefault(k[,d***REMOVED******REMOVED*** -> od.get(k,d***REMOVED***, also set od[k***REMOVED***=d if k not in od'
        if key in self:
            return self[key***REMOVED***
        self[key***REMOVED*** = default
        return default

    def __repr__(self, _repr_running={***REMOVED******REMOVED***:
        'od.__repr__(***REMOVED*** <==> repr(od***REMOVED***'
        call_key = id(self***REMOVED***, _get_ident(***REMOVED***
        if call_key in _repr_running:
            return '...'
        _repr_running[call_key***REMOVED*** = 1
        ***REMOVED***
            if not self:
                return '%s(***REMOVED***' % (self.__class__.__name__,***REMOVED***
            return '%s(%r***REMOVED***' % (self.__class__.__name__, self.items(***REMOVED******REMOVED***
        finally:
            del _repr_running[call_key***REMOVED***

    def __reduce__(self***REMOVED***:
        'Return state information for pickling'
        items = [[k, self[k***REMOVED******REMOVED*** for k in self***REMOVED***
        inst_dict = vars(self***REMOVED***.copy(***REMOVED***
        for k in vars(OrderedDict(***REMOVED******REMOVED***:
            inst_dict.pop(k, None***REMOVED***
        if inst_dict:
            return (self.__class__, (items,***REMOVED***, inst_dict***REMOVED***
        return self.__class__, (items,***REMOVED***

    def copy(self***REMOVED***:
        'od.copy(***REMOVED*** -> a shallow copy of od'
        return self.__class__(self***REMOVED***

    @classmethod
    def fromkeys(cls, iterable, value=None***REMOVED***:
        '''OD.fromkeys(S[, v***REMOVED******REMOVED*** -> New ordered dictionary with keys from S
        and values equal to v (which defaults to None***REMOVED***.

        '''
        d = cls(***REMOVED***
        for key in iterable:
            d[key***REMOVED*** = value
        return d

    def __eq__(self, other***REMOVED***:
        '''od.__eq__(y***REMOVED*** <==> od==y.  Comparison to another OD is order-sensitive
        while comparison to a regular mapping is order-insensitive.

        '''
        if isinstance(other, OrderedDict***REMOVED***:
            return len(self***REMOVED***==len(other***REMOVED*** and self.items(***REMOVED*** == other.items(***REMOVED***
        return dict.__eq__(self, other***REMOVED***

    def __ne__(self, other***REMOVED***:
        return not self == other

    # -- the following methods are only used in Python 2.7 --

    def viewkeys(self***REMOVED***:
        "od.viewkeys(***REMOVED*** -> a set-like object providing a view on od's keys"
        return KeysView(self***REMOVED***

    def viewvalues(self***REMOVED***:
        "od.viewvalues(***REMOVED*** -> an object providing a view on od's values"
        return ValuesView(self***REMOVED***

    def viewitems(self***REMOVED***:
        "od.viewitems(***REMOVED*** -> a set-like object providing a view on od's items"
        return ItemsView(self***REMOVED***
