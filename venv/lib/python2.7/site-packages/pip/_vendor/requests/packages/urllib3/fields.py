from __future__ import absolute_import
import email.utils
import mimetypes

from .packages import six


def guess_content_type(filename, default='application/octet-stream'***REMOVED***:
    ***REMOVED***
    Guess the "Content-Type" of a file.

    :param filename:
        The filename to guess the "Content-Type" of using :mod:`mimetypes`.
    :param default:
        If no "Content-Type" can be guessed, default to `default`.
    ***REMOVED***
    if filename:
        return mimetypes.guess_type(filename***REMOVED***[0***REMOVED*** or default
    return default


def format_header_param(name, value***REMOVED***:
    ***REMOVED***
    Helper function to format and quote a single header parameter.

    Particularly useful for header parameters which might contain
    non-ASCII values, like file names. This follows RFC 2231, as
    suggested by RFC 2388 Section 4.4.

    :param name:
        The name of the parameter, a string expected to be ASCII only.
    :param value:
        The value of the parameter, provided as a unicode string.
    ***REMOVED***
    if not any(ch in value for ch in '"\\\r\n'***REMOVED***:
        result = '%s="%s"' % (name, value***REMOVED***
        ***REMOVED***
            result.encode('ascii'***REMOVED***
        except (UnicodeEncodeError, UnicodeDecodeError***REMOVED***:
            pass
        else:
            return result
    if not six.PY3 and isinstance(value, six.text_type***REMOVED***:  # Python 2:
        value = value.encode('utf-8'***REMOVED***
    value = email.utils.encode_rfc2231(value, 'utf-8'***REMOVED***
    value = '%s*=%s' % (name, value***REMOVED***
    return value


class RequestField(object***REMOVED***:
    ***REMOVED***
    A data container for request body parameters.

    :param name:
        The name of this request field.
    :param data:
        The data/value body.
    :param filename:
        An optional filename of the request field.
    :param headers:
        An optional dict-like object of headers to initially use for the field.
    ***REMOVED***
    def __init__(self, name, data, filename=None, headers=None***REMOVED***:
        self._name = name
        self._filename = filename
        self.data = data
        self.headers = {***REMOVED***
        if headers:
            self.headers = dict(headers***REMOVED***

    @classmethod
    def from_tuples(cls, fieldname, value***REMOVED***:
        ***REMOVED***
        A :class:`~urllib3.fields.RequestField` factory from old-style tuple parameters.

        Supports constructing :class:`~urllib3.fields.RequestField` from
        parameter of key/value strings AND key/filetuple. A filetuple is a
        (filename, data, MIME type***REMOVED*** tuple where the MIME type is optional.
        For example::

            'foo': 'bar',
            'fakefile': ('foofile.txt', 'contents of foofile'***REMOVED***,
            'realfile': ('barfile.txt', open('realfile'***REMOVED***.read(***REMOVED******REMOVED***,
            'typedfile': ('bazfile.bin', open('bazfile'***REMOVED***.read(***REMOVED***, 'image/jpeg'***REMOVED***,
            'nonamefile': 'contents of nonamefile field',

        Field names and filenames must be unicode.
        ***REMOVED***
        if isinstance(value, tuple***REMOVED***:
            if len(value***REMOVED*** == 3:
                filename, data, content_type = value
            else:
                filename, data = value
                content_type = guess_content_type(filename***REMOVED***
        else:
            filename = None
            content_type = None
            data = value

        request_param = cls(fieldname, data, filename=filename***REMOVED***
        request_param.make_multipart(content_type=content_type***REMOVED***

        return request_param

    def _render_part(self, name, value***REMOVED***:
        ***REMOVED***
        Overridable helper function to format a single header parameter.

        :param name:
            The name of the parameter, a string expected to be ASCII only.
        :param value:
            The value of the parameter, provided as a unicode string.
        ***REMOVED***
        return format_header_param(name, value***REMOVED***

    def _render_parts(self, header_parts***REMOVED***:
        ***REMOVED***
        Helper function to format and quote a single header.

        Useful for single headers that are composed of multiple items. E.g.,
        'Content-Disposition' fields.

        :param header_parts:
            A sequence of (k, v***REMOVED*** typles or a :class:`dict` of (k, v***REMOVED*** to format
            as `k1="v1"; k2="v2"; ...`.
        ***REMOVED***
        parts = [***REMOVED***
        iterable = header_parts
        if isinstance(header_parts, dict***REMOVED***:
            iterable = header_parts.items(***REMOVED***

        for name, value in iterable:
            if value:
                parts.append(self._render_part(name, value***REMOVED******REMOVED***

        return '; '.join(parts***REMOVED***

    def render_headers(self***REMOVED***:
        ***REMOVED***
        Renders the headers for this request field.
        ***REMOVED***
        lines = [***REMOVED***

        sort_keys = ['Content-Disposition', 'Content-Type', 'Content-Location'***REMOVED***
        for sort_key in sort_keys:
            if self.headers.get(sort_key, False***REMOVED***:
                lines.append('%s: %s' % (sort_key, self.headers[sort_key***REMOVED******REMOVED******REMOVED***

        for header_name, header_value in self.headers.items(***REMOVED***:
            if header_name not in sort_keys:
                if header_value:
                    lines.append('%s: %s' % (header_name, header_value***REMOVED******REMOVED***

        lines.append('\r\n'***REMOVED***
        return '\r\n'.join(lines***REMOVED***

    def make_multipart(self, content_disposition=None, content_type=None,
                       content_location=None***REMOVED***:
        ***REMOVED***
        Makes this request field into a multipart request field.

        This method overrides "Content-Disposition", "Content-Type" and
        "Content-Location" headers to the request parameter.

        :param content_type:
            The 'Content-Type' of the request body.
        :param content_location:
            The 'Content-Location' of the request body.

        ***REMOVED***
        self.headers['Content-Disposition'***REMOVED*** = content_disposition or 'form-data'
        self.headers['Content-Disposition'***REMOVED*** += '; '.join([
            '', self._render_parts(
                (('name', self._name***REMOVED***, ('filename', self._filename***REMOVED******REMOVED***
            ***REMOVED***
        ***REMOVED******REMOVED***
        self.headers['Content-Type'***REMOVED*** = content_type
        self.headers['Content-Location'***REMOVED*** = content_location
