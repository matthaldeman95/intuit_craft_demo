######################## BEGIN LICENSE BLOCK ########################
# The Original Code is mozilla.org code.
#
# The Initial Developer of the Original Code is
# Netscape Communications Corporation.
# Portions created by the Initial Developer are Copyright (C***REMOVED*** 1998
# the Initial Developer. All Rights Reserved.
#
# Contributor(s***REMOVED***:
#   Mark Pilgrim - port to Python
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option***REMOVED*** any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301  USA
######################### END LICENSE BLOCK #########################

import sys
from .mbcharsetprober import MultiByteCharSetProber
from .codingstatemachine import CodingStateMachine
from .chardistribution import SJISDistributionAnalysis
from .jpcntx import SJISContextAnalysis
from .mbcssm import SJISSMModel
from . import constants


class SJISProber(MultiByteCharSetProber***REMOVED***:
    def __init__(self***REMOVED***:
        MultiByteCharSetProber.__init__(self***REMOVED***
        self._mCodingSM = CodingStateMachine(SJISSMModel***REMOVED***
        self._mDistributionAnalyzer = SJISDistributionAnalysis(***REMOVED***
        self._mContextAnalyzer = SJISContextAnalysis(***REMOVED***
        self.reset(***REMOVED***

    def reset(self***REMOVED***:
        MultiByteCharSetProber.reset(self***REMOVED***
        self._mContextAnalyzer.reset(***REMOVED***

    def get_charset_name(self***REMOVED***:
        return self._mContextAnalyzer.get_charset_name(***REMOVED***

    def feed(self, aBuf***REMOVED***:
        aLen = len(aBuf***REMOVED***
        for i in range(0, aLen***REMOVED***:
            codingState = self._mCodingSM.next_state(aBuf[i***REMOVED******REMOVED***
            if codingState == constants.eError:
                if constants._debug:
                    sys.stderr.write(self.get_charset_name(***REMOVED***
                                     + ' prober hit error at byte ' + str(i***REMOVED***
                                     + '\n'***REMOVED***
                self._mState = constants.eNotMe
                break
            elif codingState == constants.eItsMe:
                self._mState = constants.eFoundIt
                break
            elif codingState == constants.eStart:
                charLen = self._mCodingSM.get_current_charlen(***REMOVED***
                if i == 0:
                    self._mLastChar[1***REMOVED*** = aBuf[0***REMOVED***
                    self._mContextAnalyzer.feed(self._mLastChar[2 - charLen:***REMOVED***,
                                                charLen***REMOVED***
                    self._mDistributionAnalyzer.feed(self._mLastChar, charLen***REMOVED***
                else:
                    self._mContextAnalyzer.feed(aBuf[i + 1 - charLen:i + 3
                                                     - charLen***REMOVED***, charLen***REMOVED***
                    self._mDistributionAnalyzer.feed(aBuf[i - 1:i + 1***REMOVED***,
                                                     charLen***REMOVED***

        self._mLastChar[0***REMOVED*** = aBuf[aLen - 1***REMOVED***

        if self.get_state(***REMOVED*** == constants.eDetecting:
            if (self._mContextAnalyzer.got_enough_data(***REMOVED*** and
               (self.get_confidence(***REMOVED*** > constants.SHORTCUT_THRESHOLD***REMOVED******REMOVED***:
                self._mState = constants.eFoundIt

        return self.get_state(***REMOVED***

    def get_confidence(self***REMOVED***:
        contxtCf = self._mContextAnalyzer.get_confidence(***REMOVED***
        distribCf = self._mDistributionAnalyzer.get_confidence(***REMOVED***
        return max(contxtCf, distribCf***REMOVED***
