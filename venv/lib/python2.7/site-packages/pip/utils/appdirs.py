***REMOVED***
This code was taken from https://github.com/ActiveState/appdirs and modified
to suit our purposes.
***REMOVED***
from __future__ import absolute_import

***REMOVED***
import sys

from pip.compat import WINDOWS, expanduser


def user_cache_dir(appname***REMOVED***:
    r***REMOVED***
    Return full path to the user-specific cache dir for this application.

        "appname" is the name of application.

    Typical user cache directories are:
        Mac OS X:   ~/Library/Caches/<AppName>
        Unix:       ~/.cache/<AppName> (XDG default***REMOVED***
        Windows:      C:\Users\<username>\AppData\Local\<AppName>\Cache

    On Windows the only suggestion in the MSDN docs is that local settings go
    in the `CSIDL_LOCAL_APPDATA` directory. This is identical to the
    non-roaming app data dir (the default returned by `user_data_dir`***REMOVED***. Apps
    typically put cache data somewhere *under* the given dir here. Some
    examples:
        ...\Mozilla\Firefox\Profiles\<ProfileName>\Cache
        ...\Acme\SuperApp\Cache\1.0

    OPINION: This function appends "Cache" to the `CSIDL_LOCAL_APPDATA` value.
    ***REMOVED***
    if WINDOWS:
        # Get the base path
        path = os.path.normpath(_get_win_folder("CSIDL_LOCAL_APPDATA"***REMOVED******REMOVED***

        # Add our app name and Cache directory to it
        path = os.path.join(path, appname, "Cache"***REMOVED***
    elif sys.platform == "darwin":
        # Get the base path
        path = expanduser("~/Library/Caches"***REMOVED***

        # Add our app name to it
        path = os.path.join(path, appname***REMOVED***
    else:
        # Get the base path
        path = os.getenv("XDG_CACHE_HOME", expanduser("~/.cache"***REMOVED******REMOVED***

        # Add our app name to it
        path = os.path.join(path, appname***REMOVED***

    return path


def user_data_dir(appname, roaming=False***REMOVED***:
    ***REMOVED***
    Return full path to the user-specific data dir for this application.

        "appname" is the name of application.
            If None, just the system directory is returned.
        "roaming" (boolean, default False***REMOVED*** can be set True to use the Windows
            roaming appdata directory. That means that for users on a Windows
            network setup for roaming profiles, this user data will be
            sync'd on login. See
            <http://technet.microsoft.com/en-us/library/cc766489(WS.10***REMOVED***.aspx>
            for a discussion of issues.

    Typical user data directories are:
        Mac OS X:               ~/Library/Application Support/<AppName>
        Unix:                   ~/.local/share/<AppName>    # or in
                                $XDG_DATA_HOME, if defined
        Win XP (not roaming***REMOVED***:   C:\Documents and Settings\<username>\ ...
                                ...Application Data\<AppName>
        Win XP (roaming***REMOVED***:       C:\Documents and Settings\<username>\Local ...
                                ...Settings\Application Data\<AppName>
        Win 7  (not roaming***REMOVED***:   C:\\Users\<username>\AppData\Local\<AppName>
        Win 7  (roaming***REMOVED***:       C:\\Users\<username>\AppData\Roaming\<AppName>

    For Unix, we follow the XDG spec and support $XDG_DATA_HOME.
    That means, by default "~/.local/share/<AppName>".
    ***REMOVED***
    if WINDOWS:
        const = roaming and "CSIDL_APPDATA" or "CSIDL_LOCAL_APPDATA"
        path = os.path.join(os.path.normpath(_get_win_folder(const***REMOVED******REMOVED***, appname***REMOVED***
    elif sys.platform == "darwin":
        path = os.path.join(
            expanduser('~/Library/Application Support/'***REMOVED***,
            appname,
        ***REMOVED***
    else:
        path = os.path.join(
            os.getenv('XDG_DATA_HOME', expanduser("~/.local/share"***REMOVED******REMOVED***,
            appname,
        ***REMOVED***

    return path


def user_config_dir(appname, roaming=True***REMOVED***:
    ***REMOVED***Return full path to the user-specific config dir for this application.

        "appname" is the name of application.
            If None, just the system directory is returned.
        "roaming" (boolean, default True***REMOVED*** can be set False to not use the
            Windows roaming appdata directory. That means that for users on a
            Windows network setup for roaming profiles, this user data will be
            sync'd on login. See
            <http://technet.microsoft.com/en-us/library/cc766489(WS.10***REMOVED***.aspx>
            for a discussion of issues.

    Typical user data directories are:
        Mac OS X:               same as user_data_dir
        Unix:                   ~/.config/<AppName>
        Win *:                  same as user_data_dir

    For Unix, we follow the XDG spec and support $XDG_CONFIG_HOME.
    That means, by deafult "~/.config/<AppName>".
    ***REMOVED***
    if WINDOWS:
        path = user_data_dir(appname, roaming=roaming***REMOVED***
    elif sys.platform == "darwin":
        path = user_data_dir(appname***REMOVED***
    else:
        path = os.getenv('XDG_CONFIG_HOME', expanduser("~/.config"***REMOVED******REMOVED***
        path = os.path.join(path, appname***REMOVED***

    return path


# for the discussion regarding site_config_dirs locations
# see <https://github.com/pypa/pip/issues/1733>
def site_config_dirs(appname***REMOVED***:
    ***REMOVED***Return a list of potential user-shared config dirs for this application.

        "appname" is the name of application.

    Typical user config directories are:
        Mac OS X:   /Library/Application Support/<AppName>/
        Unix:       /etc or $XDG_CONFIG_DIRS[i***REMOVED***/<AppName>/ for each value in
                    $XDG_CONFIG_DIRS
        Win XP:     C:\Documents and Settings\All Users\Application ...
                    ...Data\<AppName>\
        Vista:      (Fail! "C:\ProgramData" is a hidden *system* directory
                    on Vista.***REMOVED***
        Win 7:      Hidden, but writeable on Win 7:
                    C:\ProgramData\<AppName>\
    ***REMOVED***
    if WINDOWS:
        path = os.path.normpath(_get_win_folder("CSIDL_COMMON_APPDATA"***REMOVED******REMOVED***
        pathlist = [os.path.join(path, appname***REMOVED******REMOVED***
    elif sys.platform == 'darwin':
        pathlist = [os.path.join('/Library/Application Support', appname***REMOVED******REMOVED***
    else:
        # try looking in $XDG_CONFIG_DIRS
        xdg_config_dirs = os.getenv('XDG_CONFIG_DIRS', '/etc/xdg'***REMOVED***
        if xdg_config_dirs:
            pathlist = [
                os.path.join(expanduser(x***REMOVED***, appname***REMOVED***
                for x in xdg_config_dirs.split(os.pathsep***REMOVED***
            ***REMOVED***
        else:
            pathlist = [***REMOVED***

        # always look in /etc directly as well
        pathlist.append('/etc'***REMOVED***

    return pathlist


# -- Windows support functions --

def _get_win_folder_from_registry(csidl_name***REMOVED***:
    ***REMOVED***
    This is a fallback technique at best. I'm not sure if using the
    registry for this guarantees us the correct answer for all CSIDL_*
    names.
    ***REMOVED***
    import _winreg

    shell_folder_name = {
        "CSIDL_APPDATA": "AppData",
        "CSIDL_COMMON_APPDATA": "Common AppData",
        "CSIDL_LOCAL_APPDATA": "Local AppData",
***REMOVED***[csidl_name***REMOVED***

    key = _winreg.OpenKey(
        _winreg.HKEY_CURRENT_USER,
        r"Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders"
    ***REMOVED***
    directory, _type = _winreg.QueryValueEx(key, shell_folder_name***REMOVED***
    return directory


def _get_win_folder_with_ctypes(csidl_name***REMOVED***:
    csidl_const = {
        "CSIDL_APPDATA": 26,
        "CSIDL_COMMON_APPDATA": 35,
        "CSIDL_LOCAL_APPDATA": 28,
***REMOVED***[csidl_name***REMOVED***

    buf = ctypes.create_unicode_buffer(1024***REMOVED***
    ctypes.windll.shell32.SHGetFolderPathW(None, csidl_const, None, 0, buf***REMOVED***

    # Downgrade to short path name if have highbit chars. See
    # <http://bugs.activestate.com/show_bug.cgi?id=85099>.
    has_high_char = False
    for c in buf:
        if ord(c***REMOVED*** > 255:
            has_high_char = True
            break
    if has_high_char:
        buf2 = ctypes.create_unicode_buffer(1024***REMOVED***
        if ctypes.windll.kernel32.GetShortPathNameW(buf.value, buf2, 1024***REMOVED***:
            buf = buf2

    return buf.value

if WINDOWS:
    ***REMOVED***
        import ctypes
        _get_win_folder = _get_win_folder_with_ctypes
    except ImportError:
        _get_win_folder = _get_win_folder_from_registry
