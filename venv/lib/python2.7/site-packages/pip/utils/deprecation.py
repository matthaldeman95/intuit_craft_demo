***REMOVED***
A module that implments tooling to enable easy warnings about deprecations.
***REMOVED***
from __future__ import absolute_import

import logging
import warnings


class PipDeprecationWarning(Warning***REMOVED***:
    pass


class Pending(object***REMOVED***:
    pass


class RemovedInPip9Warning(PipDeprecationWarning***REMOVED***:
    pass


class RemovedInPip10Warning(PipDeprecationWarning, Pending***REMOVED***:
    pass


class Python26DeprecationWarning(PipDeprecationWarning, Pending***REMOVED***:
    pass


# Warnings <-> Logging Integration


_warnings_showwarning = None


def _showwarning(message, category, filename, lineno, file=None, line=None***REMOVED***:
    if file is not None:
        if _warnings_showwarning is not None:
            _warnings_showwarning(
                message, category, filename, lineno, file, line,
            ***REMOVED***
    else:
        if issubclass(category, PipDeprecationWarning***REMOVED***:
            # We use a specially named logger which will handle all of the
            # deprecation messages for pip.
            logger = logging.getLogger("pip.deprecations"***REMOVED***

            # This is purposely using the % formatter here instead of letting
            # the logging module handle the interpolation. This is because we
            # want it to appear as if someone typed this entire message out.
            log_message = "DEPRECATION: %s" % message

            # PipDeprecationWarnings that are Pending still have at least 2
            # versions to go until they are removed so they can just be
            # warnings.  Otherwise, they will be removed in the very next
            # version of pip. We want these to be more obvious so we use the
            # ERROR logging level.
            if issubclass(category, Pending***REMOVED***:
                logger.warning(log_message***REMOVED***
            else:
                logger.error(log_message***REMOVED***
        else:
            _warnings_showwarning(
                message, category, filename, lineno, file, line,
            ***REMOVED***


def install_warning_logger(***REMOVED***:
    # Enable our Deprecation Warnings
    warnings.simplefilter("default", PipDeprecationWarning, append=True***REMOVED***

    global _warnings_showwarning

    if _warnings_showwarning is None:
        _warnings_showwarning = warnings.showwarning
        warnings.showwarning = _showwarning
