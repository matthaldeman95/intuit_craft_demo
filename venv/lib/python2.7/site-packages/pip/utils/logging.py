from __future__ import absolute_import

import contextlib
import logging
import logging.handlers
***REMOVED***

***REMOVED***
    import threading
except ImportError:
    import dummy_threading as threading

from pip.compat import WINDOWS
from pip.utils import ensure_dir

***REMOVED***
    from pip._vendor import colorama
# Lots of different errors can come from this, including SystemError and
# ImportError.
except Exception:
    colorama = None


_log_state = threading.local(***REMOVED***
_log_state.indentation = 0


@contextlib.contextmanager
def indent_log(num=2***REMOVED***:
    ***REMOVED***
    A context manager which will cause the log output to be indented for any
    log messages emitted inside it.
    ***REMOVED***
    _log_state.indentation += num
    ***REMOVED***
        yield
    finally:
        _log_state.indentation -= num


def get_indentation(***REMOVED***:
    return getattr(_log_state, 'indentation', 0***REMOVED***


class IndentingFormatter(logging.Formatter***REMOVED***:

    def format(self, record***REMOVED***:
        ***REMOVED***
        Calls the standard formatter, but will indent all of the log messages
        by our current indentation level.
        ***REMOVED***
        formatted = logging.Formatter.format(self, record***REMOVED***
        formatted = "".join([
            (" " * get_indentation(***REMOVED******REMOVED*** + line
            for line in formatted.splitlines(True***REMOVED***
        ***REMOVED******REMOVED***
        return formatted


def _color_wrap(*colors***REMOVED***:
    def wrapped(inp***REMOVED***:
        return "".join(list(colors***REMOVED*** + [inp, colorama.Style.RESET_ALL***REMOVED******REMOVED***
    return wrapped


class ColorizedStreamHandler(logging.StreamHandler***REMOVED***:

    # Don't build up a list of colors if we don't have colorama
    if colorama:
        COLORS = [
            # This needs to be in order from highest logging level to lowest.
            (logging.ERROR, _color_wrap(colorama.Fore.RED***REMOVED******REMOVED***,
            (logging.WARNING, _color_wrap(colorama.Fore.YELLOW***REMOVED******REMOVED***,
        ***REMOVED***
    else:
        COLORS = [***REMOVED***

    def __init__(self, stream=None***REMOVED***:
        logging.StreamHandler.__init__(self, stream***REMOVED***

        if WINDOWS and colorama:
            self.stream = colorama.AnsiToWin32(self.stream***REMOVED***

    def should_color(self***REMOVED***:
        # Don't colorize things if we do not have colorama
        if not colorama:
            return False

        real_stream = (
            self.stream if not isinstance(self.stream, colorama.AnsiToWin32***REMOVED***
            else self.stream.wrapped
        ***REMOVED***

        # If the stream is a tty we should color it
        if hasattr(real_stream, "isatty"***REMOVED*** and real_stream.isatty(***REMOVED***:
            return True

        # If we have an ASNI term we should color it
        if os.environ.get("TERM"***REMOVED*** == "ANSI":
            return True

        # If anything else we should not color it
        return False

    def format(self, record***REMOVED***:
        msg = logging.StreamHandler.format(self, record***REMOVED***

        if self.should_color(***REMOVED***:
            for level, color in self.COLORS:
                if record.levelno >= level:
                    msg = color(msg***REMOVED***
                    break

        return msg


class BetterRotatingFileHandler(logging.handlers.RotatingFileHandler***REMOVED***:

    def _open(self***REMOVED***:
        ensure_dir(os.path.dirname(self.baseFilename***REMOVED******REMOVED***
        return logging.handlers.RotatingFileHandler._open(self***REMOVED***


class MaxLevelFilter(logging.Filter***REMOVED***:

    def __init__(self, level***REMOVED***:
        self.level = level

    def filter(self, record***REMOVED***:
        return record.levelno < self.level
