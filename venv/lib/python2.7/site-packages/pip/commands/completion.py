from __future__ import absolute_import

import sys
from pip.basecommand import Command

BASE_COMPLETION = ***REMOVED***
# pip %(shell***REMOVED***s completion start%(script***REMOVED***s# pip %(shell***REMOVED***s completion end
***REMOVED***

COMPLETION_SCRIPTS = {
    'bash': ***REMOVED***
_pip_completion(***REMOVED***
{
    COMPREPLY=( $( COMP_WORDS="${COMP_WORDS[****REMOVED******REMOVED***" \\
                   COMP_CWORD=$COMP_CWORD \\
                   PIP_AUTO_COMPLETE=1 $1 ***REMOVED*** ***REMOVED***
***REMOVED***
complete -o default -F _pip_completion pip
***REMOVED***, 'zsh': ***REMOVED***
function _pip_completion {
  local words cword
  read -Ac words
  read -cn cword
  reply=( $( COMP_WORDS="$words[****REMOVED***" \\
             COMP_CWORD=$(( cword-1 ***REMOVED******REMOVED*** \\
             PIP_AUTO_COMPLETE=1 $words[1***REMOVED*** ***REMOVED*** ***REMOVED***
***REMOVED***
compctl -K _pip_completion pip
***REMOVED******REMOVED***


class CompletionCommand(Command***REMOVED***:
    ***REMOVED***A helper command to be used for command completion.***REMOVED***
    name = 'completion'
    summary = 'A helper command used for command completion'

    def __init__(self, *args, **kw***REMOVED***:
        super(CompletionCommand, self***REMOVED***.__init__(*args, **kw***REMOVED***

        cmd_opts = self.cmd_opts

        cmd_opts.add_option(
            '--bash', '-b',
            action='store_const',
            const='bash',
            dest='shell',
            help='Emit completion code for bash'***REMOVED***
        cmd_opts.add_option(
            '--zsh', '-z',
            action='store_const',
            const='zsh',
            dest='shell',
            help='Emit completion code for zsh'***REMOVED***

        self.parser.insert_option_group(0, cmd_opts***REMOVED***

    def run(self, options, args***REMOVED***:
        ***REMOVED***Prints the completion code of the given shell***REMOVED***
        shells = COMPLETION_SCRIPTS.keys(***REMOVED***
        shell_options = ['--' + shell for shell in sorted(shells***REMOVED******REMOVED***
        if options.shell in shells:
            script = COMPLETION_SCRIPTS.get(options.shell, ''***REMOVED***
            print(BASE_COMPLETION % {'script': script, 'shell': options.shell***REMOVED******REMOVED***
        else:
            sys.stderr.write(
                'ERROR: You must pass %s\n' % ' or '.join(shell_options***REMOVED***
            ***REMOVED***
