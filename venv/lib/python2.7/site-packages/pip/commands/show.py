from __future__ import absolute_import

from email.parser import FeedParser
import logging
***REMOVED***

from pip.basecommand import Command
from pip.status_codes import SUCCESS, ERROR
from pip._vendor import pkg_resources


logger = logging.getLogger(__name__***REMOVED***


class ShowCommand(Command***REMOVED***:
    ***REMOVED***Show information about one or more installed packages.***REMOVED***
    name = 'show'
    usage = ***REMOVED***
      %prog [options***REMOVED*** <package> ...***REMOVED***
    summary = 'Show information about installed packages.'

    def __init__(self, *args, **kw***REMOVED***:
        super(ShowCommand, self***REMOVED***.__init__(*args, **kw***REMOVED***
        self.cmd_opts.add_option(
            '-f', '--files',
            dest='files',
            action='store_true',
            default=False,
            help='Show the full list of installed files for each package.'***REMOVED***

        self.parser.insert_option_group(0, self.cmd_opts***REMOVED***

    def run(self, options, args***REMOVED***:
        if not args:
            logger.warning('ERROR: Please provide a package name or names.'***REMOVED***
            return ERROR
        query = args

        results = search_packages_info(query***REMOVED***
        if not print_results(results, options.files***REMOVED***:
            return ERROR
        return SUCCESS


def search_packages_info(query***REMOVED***:
    ***REMOVED***
    Gather details from installed distributions. Print distribution name,
    version, location, and installed files. Installed files requires a
    pip generated 'installed-files.txt' in the distributions '.egg-info'
    directory.
    ***REMOVED***
    installed = dict(
        [(p.project_name.lower(***REMOVED***, p***REMOVED*** for p in pkg_resources.working_set***REMOVED******REMOVED***
    query_names = [name.lower(***REMOVED*** for name in query***REMOVED***
    for dist in [installed[pkg***REMOVED*** for pkg in query_names if pkg in installed***REMOVED***:
        package = {
            'name': dist.project_name,
            'version': dist.version,
            'location': dist.location,
            'requires': [dep.project_name for dep in dist.requires(***REMOVED******REMOVED***,
    ***REMOVED***
        file_list = None
        metadata = None
        if isinstance(dist, pkg_resources.DistInfoDistribution***REMOVED***:
            # RECORDs should be part of .dist-info metadatas
            if dist.has_metadata('RECORD'***REMOVED***:
                lines = dist.get_metadata_lines('RECORD'***REMOVED***
                paths = [l.split(','***REMOVED***[0***REMOVED*** for l in lines***REMOVED***
                paths = [os.path.join(dist.location, p***REMOVED*** for p in paths***REMOVED***
                file_list = [os.path.relpath(p, dist.location***REMOVED*** for p in paths***REMOVED***

            if dist.has_metadata('METADATA'***REMOVED***:
                metadata = dist.get_metadata('METADATA'***REMOVED***
        else:
            # Otherwise use pip's log for .egg-info's
            if dist.has_metadata('installed-files.txt'***REMOVED***:
                paths = dist.get_metadata_lines('installed-files.txt'***REMOVED***
                paths = [os.path.join(dist.egg_info, p***REMOVED*** for p in paths***REMOVED***
                file_list = [os.path.relpath(p, dist.location***REMOVED*** for p in paths***REMOVED***

            if dist.has_metadata('PKG-INFO'***REMOVED***:
                metadata = dist.get_metadata('PKG-INFO'***REMOVED***

        if dist.has_metadata('entry_points.txt'***REMOVED***:
            entry_points = dist.get_metadata_lines('entry_points.txt'***REMOVED***
            package['entry_points'***REMOVED*** = entry_points

        installer = None
        if dist.has_metadata('INSTALLER'***REMOVED***:
            for line in dist.get_metadata_lines('INSTALLER'***REMOVED***:
                if line.strip(***REMOVED***:
                    installer = line.strip(***REMOVED***
                    break
        package['installer'***REMOVED*** = installer

        # @todo: Should pkg_resources.Distribution have a
        # `get_pkg_info` method?
        feed_parser = FeedParser(***REMOVED***
        feed_parser.feed(metadata***REMOVED***
        pkg_info_dict = feed_parser.close(***REMOVED***
        for key in ('metadata-version', 'summary',
                    'home-page', 'author', 'author-email', 'license'***REMOVED***:
            package[key***REMOVED*** = pkg_info_dict.get(key***REMOVED***

        # It looks like FeedParser can not deal with repeated headers
        classifiers = [***REMOVED***
        for line in metadata.splitlines(***REMOVED***:
            if not line:
                break
            # Classifier: License :: OSI Approved :: MIT License
            if line.startswith('Classifier: '***REMOVED***:
                classifiers.append(line[len('Classifier: '***REMOVED***:***REMOVED******REMOVED***
        package['classifiers'***REMOVED*** = classifiers

        if file_list:
            package['files'***REMOVED*** = sorted(file_list***REMOVED***
        yield package


def print_results(distributions, list_all_files***REMOVED***:
    ***REMOVED***
    Print the informations from installed distributions found.
    ***REMOVED***
    results_printed = False
    for dist in distributions:
        results_printed = True
        logger.info("---"***REMOVED***
        logger.info("Metadata-Version: %s", dist.get('metadata-version'***REMOVED******REMOVED***
        logger.info("Name: %s", dist['name'***REMOVED******REMOVED***
        logger.info("Version: %s", dist['version'***REMOVED******REMOVED***
        logger.info("Summary: %s", dist.get('summary'***REMOVED******REMOVED***
        logger.info("Home-page: %s", dist.get('home-page'***REMOVED******REMOVED***
        logger.info("Author: %s", dist.get('author'***REMOVED******REMOVED***
        logger.info("Author-email: %s", dist.get('author-email'***REMOVED******REMOVED***
        if dist['installer'***REMOVED*** is not None:
            logger.info("Installer: %s", dist['installer'***REMOVED******REMOVED***
        logger.info("License: %s", dist.get('license'***REMOVED******REMOVED***
        logger.info("Location: %s", dist['location'***REMOVED******REMOVED***
        logger.info("Requires: %s", ', '.join(dist['requires'***REMOVED******REMOVED******REMOVED***
        logger.info("Classifiers:"***REMOVED***
        for classifier in dist['classifiers'***REMOVED***:
            logger.info("  %s", classifier***REMOVED***
        if list_all_files:
            logger.info("Files:"***REMOVED***
            if 'files' in dist:
                for line in dist['files'***REMOVED***:
                    logger.info("  %s", line.strip(***REMOVED******REMOVED***
            else:
                logger.info("Cannot locate installed-files.txt"***REMOVED***
        if 'entry_points' in dist:
            logger.info("Entry-points:"***REMOVED***
            for line in dist['entry_points'***REMOVED***:
                logger.info("  %s", line.strip(***REMOVED******REMOVED***
    return results_printed
