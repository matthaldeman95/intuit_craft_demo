from __future__ import absolute_import

import logging
***REMOVED***

from pip.req import RequirementSet
from pip.basecommand import RequirementCommand
from pip import cmdoptions
from pip.utils import ensure_dir, normalize_path
from pip.utils.build import BuildDirectory
from pip.utils.filesystem import check_path_owner


logger = logging.getLogger(__name__***REMOVED***


class DownloadCommand(RequirementCommand***REMOVED***:
    ***REMOVED***
    Download packages from:

    - PyPI (and other indexes***REMOVED*** using requirement specifiers.
    - VCS project urls.
    - Local project directories.
    - Local or remote source archives.

    pip also supports downloading from "requirements files", which provide
    an easy way to specify a whole environment to be downloaded.
    ***REMOVED***
    name = 'download'

    usage = ***REMOVED***
      %prog [options***REMOVED*** <requirement specifier> [package-index-options***REMOVED*** ...
      %prog [options***REMOVED*** -r <requirements file> [package-index-options***REMOVED*** ...
      %prog [options***REMOVED*** [-e***REMOVED*** <vcs project url> ...
      %prog [options***REMOVED*** [-e***REMOVED*** <local project path> ...
      %prog [options***REMOVED*** <archive url/path> ...***REMOVED***

    summary = 'Download packages.'

    def __init__(self, *args, **kw***REMOVED***:
        super(DownloadCommand, self***REMOVED***.__init__(*args, **kw***REMOVED***

        cmd_opts = self.cmd_opts

        cmd_opts.add_option(cmdoptions.constraints(***REMOVED******REMOVED***
        cmd_opts.add_option(cmdoptions.editable(***REMOVED******REMOVED***
        cmd_opts.add_option(cmdoptions.requirements(***REMOVED******REMOVED***
        cmd_opts.add_option(cmdoptions.build_dir(***REMOVED******REMOVED***
        cmd_opts.add_option(cmdoptions.no_deps(***REMOVED******REMOVED***
        cmd_opts.add_option(cmdoptions.global_options(***REMOVED******REMOVED***
        cmd_opts.add_option(cmdoptions.no_binary(***REMOVED******REMOVED***
        cmd_opts.add_option(cmdoptions.only_binary(***REMOVED******REMOVED***
        cmd_opts.add_option(cmdoptions.src(***REMOVED******REMOVED***
        cmd_opts.add_option(cmdoptions.pre(***REMOVED******REMOVED***
        cmd_opts.add_option(cmdoptions.no_clean(***REMOVED******REMOVED***
        cmd_opts.add_option(cmdoptions.require_hashes(***REMOVED******REMOVED***

        cmd_opts.add_option(
            '-d', '--dest', '--destination-dir', '--destination-directory',
            dest='download_dir',
            metavar='dir',
            default=os.curdir,
            help=("Download packages into <dir>."***REMOVED***,
        ***REMOVED***

        index_opts = cmdoptions.make_option_group(
            cmdoptions.non_deprecated_index_group,
            self.parser,
        ***REMOVED***

        self.parser.insert_option_group(0, index_opts***REMOVED***
        self.parser.insert_option_group(0, cmd_opts***REMOVED***

    def run(self, options, args***REMOVED***:
        options.ignore_installed = True
        options.src_dir = os.path.abspath(options.src_dir***REMOVED***
        options.download_dir = normalize_path(options.download_dir***REMOVED***

        ensure_dir(options.download_dir***REMOVED***

        with self._build_session(options***REMOVED*** as session:

            finder = self._build_package_finder(options, session***REMOVED***
            build_delete = (not (options.no_clean or options.build_dir***REMOVED******REMOVED***
            if options.cache_dir and not check_path_owner(options.cache_dir***REMOVED***:
                logger.warning(
                    "The directory '%s' or its parent directory is not owned "
                    "by the current user and caching wheels has been "
                    "disabled. check the permissions and owner of that "
                    "directory. If executing pip with sudo, you may want "
                    "sudo's -H flag.",
                    options.cache_dir,
                ***REMOVED***
                options.cache_dir = None

            with BuildDirectory(options.build_dir,
                                delete=build_delete***REMOVED*** as build_dir:

                requirement_set = RequirementSet(
                    build_dir=build_dir,
                    src_dir=options.src_dir,
                    download_dir=options.download_dir,
                    ignore_installed=True,
                    ignore_dependencies=options.ignore_dependencies,
                    session=session,
                    isolated=options.isolated_mode,
                    require_hashes=options.require_hashes
                ***REMOVED***
                self.populate_requirement_set(
                    requirement_set,
                    args,
                    options,
                    finder,
                    session,
                    self.name,
                    None
                ***REMOVED***

                if not requirement_set.has_requirements:
                    return

                requirement_set.prepare_files(finder***REMOVED***

                downloaded = ' '.join([
                    req.name for req in requirement_set.successfully_downloaded
                ***REMOVED******REMOVED***
                if downloaded:
                    logger.info(
                        'Successfully downloaded %s', downloaded
                    ***REMOVED***

                # Clean up
                if not options.no_clean:
                    requirement_set.cleanup_files(***REMOVED***

        return requirement_set
