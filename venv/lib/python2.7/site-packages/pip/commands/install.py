from __future__ import absolute_import

import logging
import operator
***REMOVED***
import tempfile
import shutil
import warnings
***REMOVED***
    import wheel
except ImportError:
    wheel = None

from pip.req import RequirementSet
from pip.basecommand import RequirementCommand
from pip.locations import virtualenv_no_global, distutils_scheme
from pip.exceptions import (
    InstallationError, CommandError, PreviousBuildDirError,
***REMOVED***
from pip import cmdoptions
from pip.utils import ensure_dir
from pip.utils.build import BuildDirectory
from pip.utils.deprecation import RemovedInPip10Warning
from pip.utils.filesystem import check_path_owner
from pip.wheel import WheelCache, WheelBuilder


logger = logging.getLogger(__name__***REMOVED***


class InstallCommand(RequirementCommand***REMOVED***:
    ***REMOVED***
    Install packages from:

    - PyPI (and other indexes***REMOVED*** using requirement specifiers.
    - VCS project urls.
    - Local project directories.
    - Local or remote source archives.

    pip also supports installing from "requirements files", which provide
    an easy way to specify a whole environment to be installed.
    ***REMOVED***
    name = 'install'

    usage = ***REMOVED***
      %prog [options***REMOVED*** <requirement specifier> [package-index-options***REMOVED*** ...
      %prog [options***REMOVED*** -r <requirements file> [package-index-options***REMOVED*** ...
      %prog [options***REMOVED*** [-e***REMOVED*** <vcs project url> ...
      %prog [options***REMOVED*** [-e***REMOVED*** <local project path> ...
      %prog [options***REMOVED*** <archive url/path> ...***REMOVED***

    summary = 'Install packages.'

    def __init__(self, *args, **kw***REMOVED***:
        super(InstallCommand, self***REMOVED***.__init__(*args, **kw***REMOVED***

        cmd_opts = self.cmd_opts

        cmd_opts.add_option(cmdoptions.constraints(***REMOVED******REMOVED***
        cmd_opts.add_option(cmdoptions.editable(***REMOVED******REMOVED***
        cmd_opts.add_option(cmdoptions.requirements(***REMOVED******REMOVED***
        cmd_opts.add_option(cmdoptions.build_dir(***REMOVED******REMOVED***

        cmd_opts.add_option(
            '-t', '--target',
            dest='target_dir',
            metavar='dir',
            default=None,
            help='Install packages into <dir>. '
                 'By default this will not replace existing files/folders in '
                 '<dir>. Use --upgrade to replace existing packages in <dir> '
                 'with new versions.'
        ***REMOVED***

        cmd_opts.add_option(
            '-d', '--download', '--download-dir', '--download-directory',
            dest='download_dir',
            metavar='dir',
            default=None,
            help=("Download packages into <dir> instead of installing them, "
                  "regardless of what's already installed."***REMOVED***,
        ***REMOVED***

        cmd_opts.add_option(cmdoptions.src(***REMOVED******REMOVED***

        cmd_opts.add_option(
            '-U', '--upgrade',
            dest='upgrade',
            action='store_true',
            help='Upgrade all specified packages to the newest available '
                 'version. This process is recursive regardless of whether '
                 'a dependency is already satisfied.'
        ***REMOVED***

        cmd_opts.add_option(
            '--force-reinstall',
            dest='force_reinstall',
            action='store_true',
            help='When upgrading, reinstall all packages even if they are '
                 'already up-to-date.'***REMOVED***

        cmd_opts.add_option(
            '-I', '--ignore-installed',
            dest='ignore_installed',
            action='store_true',
            help='Ignore the installed packages (reinstalling instead***REMOVED***.'***REMOVED***

        cmd_opts.add_option(cmdoptions.no_deps(***REMOVED******REMOVED***

        cmd_opts.add_option(cmdoptions.install_options(***REMOVED******REMOVED***
        cmd_opts.add_option(cmdoptions.global_options(***REMOVED******REMOVED***

        cmd_opts.add_option(
            '--user',
            dest='use_user_site',
            action='store_true',
            help="Install to the Python user install directory for your "
                 "platform. Typically ~/.local/, or %APPDATA%\Python on "
                 "Windows. (See the Python documentation for site.USER_BASE "
                 "for full details.***REMOVED***"***REMOVED***

        cmd_opts.add_option(
            '--egg',
            dest='as_egg',
            action='store_true',
            help="Install packages as eggs, not 'flat', like pip normally "
                 "does. This option is not about installing *from* eggs. "
                 "(WARNING: Because this option overrides pip's normal install"
                 " logic, requirements files may not behave as expected.***REMOVED***"***REMOVED***

        cmd_opts.add_option(
            '--root',
            dest='root_path',
            metavar='dir',
            default=None,
            help="Install everything relative to this alternate root "
                 "directory."***REMOVED***

        cmd_opts.add_option(
            '--prefix',
            dest='prefix_path',
            metavar='dir',
            default=None,
            help="Installation prefix where lib, bin and other top-level "
                 "folders are placed"***REMOVED***

        cmd_opts.add_option(
            "--compile",
            action="store_true",
            dest="compile",
            default=True,
            help="Compile py files to pyc",
        ***REMOVED***

        cmd_opts.add_option(
            "--no-compile",
            action="store_false",
            dest="compile",
            help="Do not compile py files to pyc",
        ***REMOVED***

        cmd_opts.add_option(cmdoptions.use_wheel(***REMOVED******REMOVED***
        cmd_opts.add_option(cmdoptions.no_use_wheel(***REMOVED******REMOVED***
        cmd_opts.add_option(cmdoptions.no_binary(***REMOVED******REMOVED***
        cmd_opts.add_option(cmdoptions.only_binary(***REMOVED******REMOVED***
        cmd_opts.add_option(cmdoptions.pre(***REMOVED******REMOVED***
        cmd_opts.add_option(cmdoptions.no_clean(***REMOVED******REMOVED***
        cmd_opts.add_option(cmdoptions.require_hashes(***REMOVED******REMOVED***

        index_opts = cmdoptions.make_option_group(
            cmdoptions.index_group,
            self.parser,
        ***REMOVED***

        self.parser.insert_option_group(0, index_opts***REMOVED***
        self.parser.insert_option_group(0, cmd_opts***REMOVED***

    def run(self, options, args***REMOVED***:
        cmdoptions.resolve_wheel_no_use_binary(options***REMOVED***
        cmdoptions.check_install_build_global(options***REMOVED***

        if options.allow_external:
            warnings.warn(
                "--allow-external has been deprecated and will be removed in "
                "the future. Due to changes in the repository protocol, it no "
                "longer has any effect.",
                RemovedInPip10Warning,
            ***REMOVED***

        if options.allow_all_external:
            warnings.warn(
                "--allow-all-external has been deprecated and will be removed "
                "in the future. Due to changes in the repository protocol, it "
                "no longer has any effect.",
                RemovedInPip10Warning,
            ***REMOVED***

        if options.allow_unverified:
            warnings.warn(
                "--allow-unverified has been deprecated and will be removed "
                "in the future. Due to changes in the repository protocol, it "
                "no longer has any effect.",
                RemovedInPip10Warning,
            ***REMOVED***

        if options.download_dir:
            warnings.warn(
                "pip install --download has been deprecated and will be "
                "removed in the future. Pip now has a download command that "
                "should be used instead.",
                RemovedInPip10Warning,
            ***REMOVED***
            options.ignore_installed = True

        if options.build_dir:
            options.build_dir = os.path.abspath(options.build_dir***REMOVED***

        options.src_dir = os.path.abspath(options.src_dir***REMOVED***
        install_options = options.install_options or [***REMOVED***
        if options.use_user_site:
            if options.prefix_path:
                raise CommandError(
                    "Can not combine '--user' and '--prefix' as they imply "
                    "different installation locations"
                ***REMOVED***
            if virtualenv_no_global(***REMOVED***:
                raise InstallationError(
                    "Can not perform a '--user' install. User site-packages "
                    "are not visible in this virtualenv."
                ***REMOVED***
            install_options.append('--user'***REMOVED***
            install_options.append('--prefix='***REMOVED***

        temp_target_dir = None
        if options.target_dir:
            options.ignore_installed = True
            temp_target_dir = tempfile.mkdtemp(***REMOVED***
            options.target_dir = os.path.abspath(options.target_dir***REMOVED***
            if (os.path.exists(options.target_dir***REMOVED*** and not
                    os.path.isdir(options.target_dir***REMOVED******REMOVED***:
                raise CommandError(
                    "Target path exists but is not a directory, will not "
                    "continue."
                ***REMOVED***
            install_options.append('--home=' + temp_target_dir***REMOVED***

        global_options = options.global_options or [***REMOVED***

        with self._build_session(options***REMOVED*** as session:

            finder = self._build_package_finder(options, session***REMOVED***
            build_delete = (not (options.no_clean or options.build_dir***REMOVED******REMOVED***
            wheel_cache = WheelCache(options.cache_dir, options.format_control***REMOVED***
            if options.cache_dir and not check_path_owner(options.cache_dir***REMOVED***:
                logger.warning(
                    "The directory '%s' or its parent directory is not owned "
                    "by the current user and caching wheels has been "
                    "disabled. check the permissions and owner of that "
                    "directory. If executing pip with sudo, you may want "
                    "sudo's -H flag.",
                    options.cache_dir,
                ***REMOVED***
                options.cache_dir = None

            with BuildDirectory(options.build_dir,
                                delete=build_delete***REMOVED*** as build_dir:
                requirement_set = RequirementSet(
                    build_dir=build_dir,
                    src_dir=options.src_dir,
                    download_dir=options.download_dir,
                    upgrade=options.upgrade,
                    as_egg=options.as_egg,
                    ignore_installed=options.ignore_installed,
                    ignore_dependencies=options.ignore_dependencies,
                    force_reinstall=options.force_reinstall,
                    use_user_site=options.use_user_site,
                    target_dir=temp_target_dir,
                    session=session,
                    pycompile=options.compile,
                    isolated=options.isolated_mode,
                    wheel_cache=wheel_cache,
                    require_hashes=options.require_hashes,
                ***REMOVED***

                self.populate_requirement_set(
                    requirement_set, args, options, finder, session, self.name,
                    wheel_cache
                ***REMOVED***

                if not requirement_set.has_requirements:
                    return

                ***REMOVED***
                    if (options.download_dir or not wheel or not
                            options.cache_dir***REMOVED***:
                        # on -d don't do complex things like building
                        # wheels, and don't try to build wheels when wheel is
                        # not installed.
                        requirement_set.prepare_files(finder***REMOVED***
                    else:
                        # build wheels before install.
                        wb = WheelBuilder(
                            requirement_set,
                            finder,
                            build_options=[***REMOVED***,
                            global_options=[***REMOVED***,
                        ***REMOVED***
                        # Ignore the result: a failed wheel will be
                        # installed from the sdist/vcs whatever.
                        wb.build(autobuilding=True***REMOVED***

                    if not options.download_dir:
                        requirement_set.install(
                            install_options,
                            global_options,
                            root=options.root_path,
                            prefix=options.prefix_path,
                        ***REMOVED***
                        reqs = sorted(
                            requirement_set.successfully_installed,
                            key=operator.attrgetter('name'***REMOVED******REMOVED***
                        items = [***REMOVED***
                        for req in reqs:
                            item = req.name
                            ***REMOVED***
                                if hasattr(req, 'installed_version'***REMOVED***:
                                    if req.installed_version:
                                        item += '-' + req.installed_version
                            except Exception:
                                pass
                            items.append(item***REMOVED***
                        installed = ' '.join(items***REMOVED***
                        if installed:
                            logger.info('Successfully installed %s', installed***REMOVED***
                    else:
                        downloaded = ' '.join([
                            req.name
                            for req in requirement_set.successfully_downloaded
                        ***REMOVED******REMOVED***
                        if downloaded:
                            logger.info(
                                'Successfully downloaded %s', downloaded
                            ***REMOVED***
                except PreviousBuildDirError:
                    options.no_clean = True
                    raise
                finally:
                    # Clean up
                    if not options.no_clean:
                        requirement_set.cleanup_files(***REMOVED***

        if options.target_dir:
            ensure_dir(options.target_dir***REMOVED***

            lib_dir = distutils_scheme('', home=temp_target_dir***REMOVED***['purelib'***REMOVED***

            for item in os.listdir(lib_dir***REMOVED***:
                target_item_dir = os.path.join(options.target_dir, item***REMOVED***
                if os.path.exists(target_item_dir***REMOVED***:
                    if not options.upgrade:
                        logger.warning(
                            'Target directory %s already exists. Specify '
                            '--upgrade to force replacement.',
                            target_item_dir
                        ***REMOVED***
                        continue
                    if os.path.islink(target_item_dir***REMOVED***:
                        logger.warning(
                            'Target directory %s already exists and is '
                            'a link. Pip will not automatically replace '
                            'links, please remove if replacement is '
                            'desired.',
                            target_item_dir
                        ***REMOVED***
                        continue
                    if os.path.isdir(target_item_dir***REMOVED***:
                        shutil.rmtree(target_item_dir***REMOVED***
                    else:
                        os.remove(target_item_dir***REMOVED***

                shutil.move(
                    os.path.join(lib_dir, item***REMOVED***,
                    target_item_dir
                ***REMOVED***
            shutil.rmtree(temp_target_dir***REMOVED***
        return requirement_set
