from __future__ import absolute_import

import hashlib
import logging
import sys

from pip.basecommand import Command
from pip.status_codes import ERROR
from pip.utils import read_chunks
from pip.utils.hashes import FAVORITE_HASH, STRONG_HASHES


logger = logging.getLogger(__name__***REMOVED***


class HashCommand(Command***REMOVED***:
    ***REMOVED***
    Compute a hash of a local package archive.

    These can be used with --hash in a requirements file to do repeatable
    installs.

    ***REMOVED***
    name = 'hash'
    usage = '%prog [options***REMOVED*** <file> ...'
    summary = 'Compute hashes of package archives.'

    def __init__(self, *args, **kw***REMOVED***:
        super(HashCommand, self***REMOVED***.__init__(*args, **kw***REMOVED***
        self.cmd_opts.add_option(
            '-a', '--algorithm',
            dest='algorithm',
            choices=STRONG_HASHES,
            action='store',
            default=FAVORITE_HASH,
            help='The hash algorithm to use: one of %s' %
                 ', '.join(STRONG_HASHES***REMOVED******REMOVED***
        self.parser.insert_option_group(0, self.cmd_opts***REMOVED***

    def run(self, options, args***REMOVED***:
        if not args:
            self.parser.print_usage(sys.stderr***REMOVED***
            return ERROR

        algorithm = options.algorithm
        for path in args:
            logger.info('%s:\n--hash=%s:%s',
                        path, algorithm, _hash_of_file(path, algorithm***REMOVED******REMOVED***


def _hash_of_file(path, algorithm***REMOVED***:
    ***REMOVED***Return the hash digest of a file.***REMOVED***
    with open(path, 'rb'***REMOVED*** as archive:
        hash = hashlib.new(algorithm***REMOVED***
        for chunk in read_chunks(archive***REMOVED***:
            hash.update(chunk***REMOVED***
    return hash.hexdigest(***REMOVED***
