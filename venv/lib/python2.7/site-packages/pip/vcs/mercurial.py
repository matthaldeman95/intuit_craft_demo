from __future__ import absolute_import

import logging
***REMOVED***
import tempfile

from pip.utils import display_path, rmtree
from pip.vcs import vcs, VersionControl
from pip.download import path_to_url
from pip._vendor.six.moves import configparser


logger = logging.getLogger(__name__***REMOVED***


class Mercurial(VersionControl***REMOVED***:
    name = 'hg'
    dirname = '.hg'
    repo_name = 'clone'
    schemes = ('hg', 'hg+http', 'hg+https', 'hg+ssh', 'hg+static-http'***REMOVED***

    def export(self, location***REMOVED***:
        ***REMOVED***Export the Hg repository at the url to the destination location***REMOVED***
        temp_dir = tempfile.mkdtemp('-export', 'pip-'***REMOVED***
        self.unpack(temp_dir***REMOVED***
        ***REMOVED***
            self.run_command(
                ['archive', location***REMOVED***, show_stdout=False, cwd=temp_dir***REMOVED***
        finally:
            rmtree(temp_dir***REMOVED***

    def switch(self, dest, url, rev_options***REMOVED***:
        repo_config = os.path.join(dest, self.dirname, 'hgrc'***REMOVED***
        config = configparser.SafeConfigParser(***REMOVED***
        ***REMOVED***
            config.read(repo_config***REMOVED***
            config.set('paths', 'default', url***REMOVED***
            with open(repo_config, 'w'***REMOVED*** as config_file:
                config.write(config_file***REMOVED***
        except (OSError, configparser.NoSectionError***REMOVED*** as exc:
            logger.warning(
                'Could not switch Mercurial repository to %s: %s', url, exc,
            ***REMOVED***
        else:
            self.run_command(['update', '-q'***REMOVED*** + rev_options, cwd=dest***REMOVED***

    def update(self, dest, rev_options***REMOVED***:
        self.run_command(['pull', '-q'***REMOVED***, cwd=dest***REMOVED***
        self.run_command(['update', '-q'***REMOVED*** + rev_options, cwd=dest***REMOVED***

    def obtain(self, dest***REMOVED***:
        url, rev = self.get_url_rev(***REMOVED***
        if rev:
            rev_options = [rev***REMOVED***
            rev_display = ' (to revision %s***REMOVED***' % rev
        else:
            rev_options = [***REMOVED***
            rev_display = ''
        if self.check_destination(dest, url, rev_options, rev_display***REMOVED***:
            logger.info(
                'Cloning hg %s%s to %s',
                url,
                rev_display,
                display_path(dest***REMOVED***,
            ***REMOVED***
            self.run_command(['clone', '--noupdate', '-q', url, dest***REMOVED******REMOVED***
            self.run_command(['update', '-q'***REMOVED*** + rev_options, cwd=dest***REMOVED***

    def get_url(self, location***REMOVED***:
        url = self.run_command(
            ['showconfig', 'paths.default'***REMOVED***,
            show_stdout=False, cwd=location***REMOVED***.strip(***REMOVED***
        if self._is_local_repository(url***REMOVED***:
            url = path_to_url(url***REMOVED***
        return url.strip(***REMOVED***

    def get_revision(self, location***REMOVED***:
        current_revision = self.run_command(
            ['parents', '--template={rev***REMOVED***'***REMOVED***,
            show_stdout=False, cwd=location***REMOVED***.strip(***REMOVED***
        return current_revision

    def get_revision_hash(self, location***REMOVED***:
        current_rev_hash = self.run_command(
            ['parents', '--template={node***REMOVED***'***REMOVED***,
            show_stdout=False, cwd=location***REMOVED***.strip(***REMOVED***
        return current_rev_hash

    def get_src_requirement(self, dist, location***REMOVED***:
        repo = self.get_url(location***REMOVED***
        if not repo.lower(***REMOVED***.startswith('hg:'***REMOVED***:
            repo = 'hg+' + repo
        egg_project_name = dist.egg_name(***REMOVED***.split('-', 1***REMOVED***[0***REMOVED***
        if not repo:
            return None
        current_rev_hash = self.get_revision_hash(location***REMOVED***
        return '%s@%s#egg=%s' % (repo, current_rev_hash, egg_project_name***REMOVED***

    def check_version(self, dest, rev_options***REMOVED***:
        ***REMOVED***Always assume the versions don't match***REMOVED***
        return False

vcs.register(Mercurial***REMOVED***
