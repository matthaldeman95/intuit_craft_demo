from __future__ import absolute_import

import logging
***REMOVED***
import tempfile

# TODO: Get this into six.moves.urllib.parse
***REMOVED***
    from urllib import parse as urllib_parse
except ImportError:
    import urlparse as urllib_parse

from pip.utils import rmtree, display_path
from pip.vcs import vcs, VersionControl
from pip.download import path_to_url


logger = logging.getLogger(__name__***REMOVED***


class Bazaar(VersionControl***REMOVED***:
    name = 'bzr'
    dirname = '.bzr'
    repo_name = 'branch'
    schemes = (
        'bzr', 'bzr+http', 'bzr+https', 'bzr+ssh', 'bzr+sftp', 'bzr+ftp',
        'bzr+lp',
    ***REMOVED***

    def __init__(self, url=None, *args, **kwargs***REMOVED***:
        super(Bazaar, self***REMOVED***.__init__(url, *args, **kwargs***REMOVED***
        # Python >= 2.7.4, 3.3 doesn't have uses_fragment or non_hierarchical
        # Register lp but do not expose as a scheme to support bzr+lp.
        if getattr(urllib_parse, 'uses_fragment', None***REMOVED***:
            urllib_parse.uses_fragment.extend(['lp'***REMOVED******REMOVED***
            urllib_parse.non_hierarchical.extend(['lp'***REMOVED******REMOVED***

    def export(self, location***REMOVED***:
        ***REMOVED***
        Export the Bazaar repository at the url to the destination location
        ***REMOVED***
        temp_dir = tempfile.mkdtemp('-export', 'pip-'***REMOVED***
        self.unpack(temp_dir***REMOVED***
        if os.path.exists(location***REMOVED***:
            # Remove the location to make sure Bazaar can export it correctly
            rmtree(location***REMOVED***
        ***REMOVED***
            self.run_command(['export', location***REMOVED***, cwd=temp_dir,
                             show_stdout=False***REMOVED***
        finally:
            rmtree(temp_dir***REMOVED***

    def switch(self, dest, url, rev_options***REMOVED***:
        self.run_command(['switch', url***REMOVED***, cwd=dest***REMOVED***

    def update(self, dest, rev_options***REMOVED***:
        self.run_command(['pull', '-q'***REMOVED*** + rev_options, cwd=dest***REMOVED***

    def obtain(self, dest***REMOVED***:
        url, rev = self.get_url_rev(***REMOVED***
        if rev:
            rev_options = ['-r', rev***REMOVED***
            rev_display = ' (to revision %s***REMOVED***' % rev
        else:
            rev_options = [***REMOVED***
            rev_display = ''
        if self.check_destination(dest, url, rev_options, rev_display***REMOVED***:
            logger.info(
                'Checking out %s%s to %s',
                url,
                rev_display,
                display_path(dest***REMOVED***,
            ***REMOVED***
            self.run_command(['branch', '-q'***REMOVED*** + rev_options + [url, dest***REMOVED******REMOVED***

    def get_url_rev(self***REMOVED***:
        # hotfix the URL scheme after removing bzr+ from bzr+ssh:// readd it
        url, rev = super(Bazaar, self***REMOVED***.get_url_rev(***REMOVED***
        if url.startswith('ssh://'***REMOVED***:
            url = 'bzr+' + url
        return url, rev

    def get_url(self, location***REMOVED***:
        urls = self.run_command(['info'***REMOVED***, show_stdout=False, cwd=location***REMOVED***
        for line in urls.splitlines(***REMOVED***:
            line = line.strip(***REMOVED***
            for x in ('checkout of branch: ',
                      'parent branch: '***REMOVED***:
                if line.startswith(x***REMOVED***:
                    repo = line.split(x***REMOVED***[1***REMOVED***
                    if self._is_local_repository(repo***REMOVED***:
                        return path_to_url(repo***REMOVED***
                    return repo
        return None

    def get_revision(self, location***REMOVED***:
        revision = self.run_command(
            ['revno'***REMOVED***, show_stdout=False, cwd=location***REMOVED***
        return revision.splitlines(***REMOVED***[-1***REMOVED***

    def get_src_requirement(self, dist, location***REMOVED***:
        repo = self.get_url(location***REMOVED***
        if not repo:
            return None
        if not repo.lower(***REMOVED***.startswith('bzr:'***REMOVED***:
            repo = 'bzr+' + repo
        egg_project_name = dist.egg_name(***REMOVED***.split('-', 1***REMOVED***[0***REMOVED***
        current_rev = self.get_revision(location***REMOVED***
        return '%s@%s#egg=%s' % (repo, current_rev, egg_project_name***REMOVED***

    def check_version(self, dest, rev_options***REMOVED***:
        ***REMOVED***Always assume the versions don't match***REMOVED***
        return False


vcs.register(Bazaar***REMOVED***
