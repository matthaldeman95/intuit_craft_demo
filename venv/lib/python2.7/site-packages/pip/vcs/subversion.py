from __future__ import absolute_import

import logging
***REMOVED***
import re

from pip._vendor.six.moves.urllib import parse as urllib_parse

from pip.index import Link
from pip.utils import rmtree, display_path
from pip.utils.logging import indent_log
from pip.vcs import vcs, VersionControl

_svn_xml_url_re = re.compile('url="([^"***REMOVED***+***REMOVED***"'***REMOVED***
_svn_rev_re = re.compile('committed-rev="(\d+***REMOVED***"'***REMOVED***
_svn_url_re = re.compile(r'URL: (.+***REMOVED***'***REMOVED***
_svn_revision_re = re.compile(r'Revision: (.+***REMOVED***'***REMOVED***
_svn_info_xml_rev_re = re.compile(r'\s*revision="(\d+***REMOVED***"'***REMOVED***
_svn_info_xml_url_re = re.compile(r'<url>(.****REMOVED***</url>'***REMOVED***


logger = logging.getLogger(__name__***REMOVED***


class Subversion(VersionControl***REMOVED***:
    name = 'svn'
    dirname = '.svn'
    repo_name = 'checkout'
    schemes = ('svn', 'svn+ssh', 'svn+http', 'svn+https', 'svn+svn'***REMOVED***

    def get_info(self, location***REMOVED***:
        ***REMOVED***Returns (url, revision***REMOVED***, where both are strings***REMOVED***
        assert not location.rstrip('/'***REMOVED***.endswith(self.dirname***REMOVED***, \
            'Bad directory: %s' % location
        output = self.run_command(
            ['info', location***REMOVED***,
            show_stdout=False,
            extra_environ={'LANG': 'C'***REMOVED***,
        ***REMOVED***
        match = _svn_url_re.search(output***REMOVED***
        if not match:
            logger.warning(
                'Cannot determine URL of svn checkout %s',
                display_path(location***REMOVED***,
            ***REMOVED***
            logger.debug('Output that cannot be parsed: \n%s', output***REMOVED***
            return None, None
        url = match.group(1***REMOVED***.strip(***REMOVED***
        match = _svn_revision_re.search(output***REMOVED***
        if not match:
            logger.warning(
                'Cannot determine revision of svn checkout %s',
                display_path(location***REMOVED***,
            ***REMOVED***
            logger.debug('Output that cannot be parsed: \n%s', output***REMOVED***
            return url, None
        return url, match.group(1***REMOVED***

    def export(self, location***REMOVED***:
        ***REMOVED***Export the svn repository at the url to the destination location***REMOVED***
        url, rev = self.get_url_rev(***REMOVED***
        rev_options = get_rev_options(url, rev***REMOVED***
        logger.info('Exporting svn repository %s to %s', url, location***REMOVED***
        with indent_log(***REMOVED***:
            if os.path.exists(location***REMOVED***:
                # Subversion doesn't like to check out over an existing
                # directory --force fixes this, but was only added in svn 1.5
                rmtree(location***REMOVED***
            self.run_command(
                ['export'***REMOVED*** + rev_options + [url, location***REMOVED***,
                show_stdout=False***REMOVED***

    def switch(self, dest, url, rev_options***REMOVED***:
        self.run_command(['switch'***REMOVED*** + rev_options + [url, dest***REMOVED******REMOVED***

    def update(self, dest, rev_options***REMOVED***:
        self.run_command(['update'***REMOVED*** + rev_options + [dest***REMOVED******REMOVED***

    def obtain(self, dest***REMOVED***:
        url, rev = self.get_url_rev(***REMOVED***
        rev_options = get_rev_options(url, rev***REMOVED***
        if rev:
            rev_display = ' (to revision %s***REMOVED***' % rev
        else:
            rev_display = ''
        if self.check_destination(dest, url, rev_options, rev_display***REMOVED***:
            logger.info(
                'Checking out %s%s to %s',
                url,
                rev_display,
                display_path(dest***REMOVED***,
            ***REMOVED***
            self.run_command(['checkout', '-q'***REMOVED*** + rev_options + [url, dest***REMOVED******REMOVED***

    def get_location(self, dist, dependency_links***REMOVED***:
        for url in dependency_links:
            egg_fragment = Link(url***REMOVED***.egg_fragment
            if not egg_fragment:
                continue
            if '-' in egg_fragment:
                # FIXME: will this work when a package has - in the name?
                key = '-'.join(egg_fragment.split('-'***REMOVED***[:-1***REMOVED******REMOVED***.lower(***REMOVED***
            else:
                key = egg_fragment
            if key == dist.key:
                return url.split('#', 1***REMOVED***[0***REMOVED***
        return None

    def get_revision(self, location***REMOVED***:
        ***REMOVED***
        Return the maximum revision for all files under a given location
        ***REMOVED***
        # Note: taken from setuptools.command.egg_info
        revision = 0

        for base, dirs, files in os.walk(location***REMOVED***:
            if self.dirname not in dirs:
                dirs[:***REMOVED*** = [***REMOVED***
                continue    # no sense walking uncontrolled subdirs
            dirs.remove(self.dirname***REMOVED***
            entries_fn = os.path.join(base, self.dirname, 'entries'***REMOVED***
            if not os.path.exists(entries_fn***REMOVED***:
                # FIXME: should we warn?
                continue

            dirurl, localrev = self._get_svn_url_rev(base***REMOVED***

            if base == location:
                base_url = dirurl + '/'   # save the root url
            elif not dirurl or not dirurl.startswith(base_url***REMOVED***:
                dirs[:***REMOVED*** = [***REMOVED***
                continue    # not part of the same svn tree, skip it
            revision = max(revision, localrev***REMOVED***
        return revision

    def get_url_rev(self***REMOVED***:
        # hotfix the URL scheme after removing svn+ from svn+ssh:// readd it
        url, rev = super(Subversion, self***REMOVED***.get_url_rev(***REMOVED***
        if url.startswith('ssh://'***REMOVED***:
            url = 'svn+' + url
        return url, rev

    def get_url(self, location***REMOVED***:
        # In cases where the source is in a subdirectory, not alongside
        # setup.py we have to look up in the location until we find a real
        # setup.py
        orig_location = location
        while not os.path.exists(os.path.join(location, 'setup.py'***REMOVED******REMOVED***:
            last_location = location
            location = os.path.dirname(location***REMOVED***
            if location == last_location:
                # We've traversed up to the root of the filesystem without
                # finding setup.py
                logger.warning(
                    "Could not find setup.py for directory %s (tried all "
                    "parent directories***REMOVED***",
                    orig_location,
                ***REMOVED***
                return None

        return self._get_svn_url_rev(location***REMOVED***[0***REMOVED***

    def _get_svn_url_rev(self, location***REMOVED***:
        from pip.exceptions import InstallationError

        entries_path = os.path.join(location, self.dirname, 'entries'***REMOVED***
        if os.path.exists(entries_path***REMOVED***:
            with open(entries_path***REMOVED*** as f:
                data = f.read(***REMOVED***
        else:  # subversion >= 1.7 does not have the 'entries' file
            data = ''

        if (data.startswith('8'***REMOVED*** or
                data.startswith('9'***REMOVED*** or
                data.startswith('10'***REMOVED******REMOVED***:
            data = list(map(str.splitlines, data.split('\n\x0c\n'***REMOVED******REMOVED******REMOVED***
            del data[0***REMOVED***[0***REMOVED***  # get rid of the '8'
            url = data[0***REMOVED***[3***REMOVED***
            revs = [int(d[9***REMOVED******REMOVED*** for d in data if len(d***REMOVED*** > 9 and d[9***REMOVED******REMOVED*** + [0***REMOVED***
        elif data.startswith('<?xml'***REMOVED***:
            match = _svn_xml_url_re.search(data***REMOVED***
            if not match:
                raise ValueError('Badly formatted data: %r' % data***REMOVED***
            url = match.group(1***REMOVED***    # get repository URL
            revs = [int(m.group(1***REMOVED******REMOVED*** for m in _svn_rev_re.finditer(data***REMOVED******REMOVED*** + [0***REMOVED***
        else:
            ***REMOVED***
                # subversion >= 1.7
                xml = self.run_command(
                    ['info', '--xml', location***REMOVED***,
                    show_stdout=False,
                ***REMOVED***
                url = _svn_info_xml_url_re.search(xml***REMOVED***.group(1***REMOVED***
                revs = [
                    int(m.group(1***REMOVED******REMOVED*** for m in _svn_info_xml_rev_re.finditer(xml***REMOVED***
                ***REMOVED***
            except InstallationError:
                url, revs = None, [***REMOVED***

        if revs:
            rev = max(revs***REMOVED***
        else:
            rev = 0

        return url, rev

    def get_src_requirement(self, dist, location***REMOVED***:
        repo = self.get_url(location***REMOVED***
        if repo is None:
            return None
        # FIXME: why not project name?
        egg_project_name = dist.egg_name(***REMOVED***.split('-', 1***REMOVED***[0***REMOVED***
        rev = self.get_revision(location***REMOVED***
        return 'svn+%s@%s#egg=%s' % (repo, rev, egg_project_name***REMOVED***

    def check_version(self, dest, rev_options***REMOVED***:
        ***REMOVED***Always assume the versions don't match***REMOVED***
        return False


def get_rev_options(url, rev***REMOVED***:
    if rev:
        rev_options = ['-r', rev***REMOVED***
    else:
        rev_options = [***REMOVED***

    r = urllib_parse.urlsplit(url***REMOVED***
    if hasattr(r, 'username'***REMOVED***:
        # >= Python-2.5
        username, password = r.username, r.password
    else:
        netloc = r[1***REMOVED***
        if '@' in netloc:
            auth = netloc.split('@'***REMOVED***[0***REMOVED***
            if ':' in auth:
                username, password = auth.split(':', 1***REMOVED***
            else:
                username, password = auth, None
        else:
            username, password = None, None

    if username:
        rev_options += ['--username', username***REMOVED***
    if password:
        rev_options += ['--password', password***REMOVED***
    return rev_options


vcs.register(Subversion***REMOVED***
