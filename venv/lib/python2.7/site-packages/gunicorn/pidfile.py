# -*- coding: utf-8 -
#
# This file is part of gunicorn released under the MIT license.
# See the NOTICE for more information.

import errno
***REMOVED***
import tempfile


class Pidfile(object***REMOVED***:
    ***REMOVED***\
    Manage a PID file. If a specific name is provided
    it and '"%s.oldpid" % name' will be used. Otherwise
    we create a temp file using os.mkstemp.
    ***REMOVED***

    def __init__(self, fname***REMOVED***:
        self.fname = fname
        self.pid = None

    def create(self, pid***REMOVED***:
        oldpid = self.validate(***REMOVED***
        if oldpid:
            if oldpid == os.getpid(***REMOVED***:
                return
            msg = "Already running on PID %s (or pid file '%s' is stale***REMOVED***"
            raise RuntimeError(msg % (oldpid, self.fname***REMOVED******REMOVED***

        self.pid = pid

        # Write pidfile
        fdir = os.path.dirname(self.fname***REMOVED***
        if fdir and not os.path.isdir(fdir***REMOVED***:
            raise RuntimeError("%s doesn't exist. Can't create pidfile." % fdir***REMOVED***
        fd, fname = tempfile.mkstemp(dir=fdir***REMOVED***
        os.write(fd, ("%s\n" % self.pid***REMOVED***.encode('utf-8'***REMOVED******REMOVED***
        if self.fname:
            os.rename(fname, self.fname***REMOVED***
        else:
            self.fname = fname
        os.close(fd***REMOVED***

        # set permissions to -rw-r--r--
        os.chmod(self.fname, 420***REMOVED***

    def rename(self, path***REMOVED***:
        self.unlink(***REMOVED***
        self.fname = path
        self.create(self.pid***REMOVED***

    def unlink(self***REMOVED***:
        ***REMOVED*** delete pidfile***REMOVED***
        ***REMOVED***
            with open(self.fname, "r"***REMOVED*** as f:
                pid1 = int(f.read(***REMOVED*** or 0***REMOVED***

            if pid1 == self.pid:
                os.unlink(self.fname***REMOVED***
        ***REMOVED***
            pass

    def validate(self***REMOVED***:
        ***REMOVED*** Validate pidfile and make it stale if needed***REMOVED***
        if not self.fname:
            return
        ***REMOVED***
            with open(self.fname, "r"***REMOVED*** as f:
                ***REMOVED***
                    wpid = int(f.read(***REMOVED******REMOVED***
                except ValueError:
                    return

                ***REMOVED***
                    os.kill(wpid, 0***REMOVED***
                    return wpid
                except OSError as e:
                    if e.args[0***REMOVED*** == errno.ESRCH:
                        return
                    raise
        except IOError as e:
            if e.args[0***REMOVED*** == errno.ENOENT:
                return
            raise
