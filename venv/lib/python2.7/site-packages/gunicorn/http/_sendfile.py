# -*- coding: utf-8 -
#
# This file is part of gunicorn released under the MIT license.
# See the NOTICE for more information.

import errno
***REMOVED***
import sys

***REMOVED***
    import ctypes
    import ctypes.util
except MemoryError:
    # selinux execmem denial
    # https://bugzilla.redhat.com/show_bug.cgi?id=488396
    raise ImportError

SUPPORTED_PLATFORMS = (
    'darwin',
    'freebsd',
    'dragonfly',
    'linux2'***REMOVED***

if sys.version_info < (2, 6***REMOVED*** or \
        sys.platform not in SUPPORTED_PLATFORMS:
    raise ImportError("sendfile isn't supported on this platform"***REMOVED***

_libc = ctypes.CDLL(ctypes.util.find_library("c"***REMOVED***, use_errno=True***REMOVED***
_sendfile = _libc.sendfile


def sendfile(fdout, fdin, offset, nbytes***REMOVED***:
    if sys.platform == 'darwin':
        _sendfile.argtypes = [ctypes.c_int, ctypes.c_int, ctypes.c_uint64,
                              ctypes.POINTER(ctypes.c_uint64***REMOVED***, ctypes.c_voidp,
                              ctypes.c_int***REMOVED***
        _nbytes = ctypes.c_uint64(nbytes***REMOVED***
        result = _sendfile(fdin, fdout, offset, _nbytes, None, 0***REMOVED***

        if result == -1:
            e = ctypes.get_errno(***REMOVED***
            if e == errno.EAGAIN and _nbytes.value is not None:
                return _nbytes.value
            raise OSError(e, os.strerror(e***REMOVED******REMOVED***
        return _nbytes.value
    elif sys.platform in ('freebsd', 'dragonfly',***REMOVED***:
        _sendfile.argtypes = [ctypes.c_int, ctypes.c_int, ctypes.c_uint64,
                              ctypes.c_uint64, ctypes.c_voidp,
                              ctypes.POINTER(ctypes.c_uint64***REMOVED***, ctypes.c_int***REMOVED***
        _sbytes = ctypes.c_uint64(***REMOVED***
        result = _sendfile(fdin, fdout, offset, nbytes, None, _sbytes, 0***REMOVED***
        if result == -1:
            e = ctypes.get_errno(***REMOVED***
            if e == errno.EAGAIN and _sbytes.value is not None:
                return _sbytes.value
            raise OSError(e, os.strerror(e***REMOVED******REMOVED***
        return _sbytes.value

    else:
        _sendfile.argtypes = [ctypes.c_int, ctypes.c_int,
                ctypes.POINTER(ctypes.c_uint64***REMOVED***, ctypes.c_size_t***REMOVED***

        _offset = ctypes.c_uint64(offset***REMOVED***
        sent = _sendfile(fdout, fdin, _offset, nbytes***REMOVED***
        if sent == -1:
            e = ctypes.get_errno(***REMOVED***
            raise OSError(e, os.strerror(e***REMOVED******REMOVED***
        return sent
