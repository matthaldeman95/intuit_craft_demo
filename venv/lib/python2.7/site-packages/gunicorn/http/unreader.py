# -*- coding: utf-8 -
#
# This file is part of gunicorn released under the MIT license.
# See the NOTICE for more information.

***REMOVED***

from gunicorn import six

# Classes that can undo reading data from
# a given type of data source.


class Unreader(object***REMOVED***:
    def __init__(self***REMOVED***:
        self.buf = six.BytesIO(***REMOVED***

    def chunk(self***REMOVED***:
        raise NotImplementedError(***REMOVED***

    def read(self, size=None***REMOVED***:
        if size is not None and not isinstance(size, six.integer_types***REMOVED***:
            raise TypeError("size parameter must be an int or long."***REMOVED***

        if size is not None:
            if size == 0:
                return b""
            if size < 0:
                size = None

        self.buf.seek(0, os.SEEK_END***REMOVED***

        if size is None and self.buf.tell(***REMOVED***:
            ret = self.buf.getvalue(***REMOVED***
            self.buf = six.BytesIO(***REMOVED***
            return ret
        if size is None:
            d = self.chunk(***REMOVED***
            return d

        while self.buf.tell(***REMOVED*** < size:
            chunk = self.chunk(***REMOVED***
            if not len(chunk***REMOVED***:
                ret = self.buf.getvalue(***REMOVED***
                self.buf = six.BytesIO(***REMOVED***
                return ret
            self.buf.write(chunk***REMOVED***
        data = self.buf.getvalue(***REMOVED***
        self.buf = six.BytesIO(***REMOVED***
        self.buf.write(data[size:***REMOVED******REMOVED***
        return data[:size***REMOVED***

    def unread(self, data***REMOVED***:
        self.buf.seek(0, os.SEEK_END***REMOVED***
        self.buf.write(data***REMOVED***


class SocketUnreader(Unreader***REMOVED***:
    def __init__(self, sock, max_chunk=8192***REMOVED***:
        super(SocketUnreader, self***REMOVED***.__init__(***REMOVED***
        self.sock = sock
        self.mxchunk = max_chunk

    def chunk(self***REMOVED***:
        return self.sock.recv(self.mxchunk***REMOVED***


class IterUnreader(Unreader***REMOVED***:
    def __init__(self, iterable***REMOVED***:
        super(IterUnreader, self***REMOVED***.__init__(***REMOVED***
        self.iter = iter(iterable***REMOVED***

    def chunk(self***REMOVED***:
        if not self.iter:
            return b""
        ***REMOVED***
            return six.next(self.iter***REMOVED***
        except StopIteration:
            self.iter = None
            return b""
