# -*- coding: utf-8 -
#
# This file is part of gunicorn released under the MIT license.
# See the NOTICE for more information.

from gunicorn.http.message import Request
from gunicorn.http.unreader import SocketUnreader, IterUnreader


class Parser(object***REMOVED***:

    mesg_class = None

    def __init__(self, cfg, source***REMOVED***:
        self.cfg = cfg
        if hasattr(source, "recv"***REMOVED***:
            self.unreader = SocketUnreader(source***REMOVED***
        else:
            self.unreader = IterUnreader(source***REMOVED***
        self.mesg = None

        # request counter (for keepalive connetions***REMOVED***
        self.req_count = 0

    def __iter__(self***REMOVED***:
        return self

    def __next__(self***REMOVED***:
        # Stop if HTTP dictates a stop.
        if self.mesg and self.mesg.should_close(***REMOVED***:
            raise StopIteration(***REMOVED***

        # Discard any unread body of the previous message
        if self.mesg:
            data = self.mesg.body.read(8192***REMOVED***
            while data:
                data = self.mesg.body.read(8192***REMOVED***

        # Parse the next request
        self.req_count += 1
        self.mesg = self.mesg_class(self.cfg, self.unreader, self.req_count***REMOVED***
        if not self.mesg:
            raise StopIteration(***REMOVED***
        return self.mesg

    next = __next__


class RequestParser(Parser***REMOVED***:

    mesg_class = Request
