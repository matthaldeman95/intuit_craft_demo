# -*- coding: utf-8 -
#
# This file is part of gunicorn released under the MIT license.
# See the NOTICE for more information.

***REMOVED***The debug module contains utilities and functions for better
debugging Gunicorn.***REMOVED***

import sys
import linecache
import re
import inspect

__all__ = ['spew', 'unspew'***REMOVED***

_token_spliter = re.compile('\W+'***REMOVED***


class Spew(object***REMOVED***:
    ***REMOVED***
    ***REMOVED***
    def __init__(self, trace_names=None, show_values=True***REMOVED***:
        self.trace_names = trace_names
        self.show_values = show_values

    def __call__(self, frame, event, arg***REMOVED***:
        if event == 'line':
            lineno = frame.f_lineno
            if '__file__' in frame.f_globals:
                filename = frame.f_globals['__file__'***REMOVED***
                if (filename.endswith('.pyc'***REMOVED*** or
                    filename.endswith('.pyo'***REMOVED******REMOVED***:
                    filename = filename[:-1***REMOVED***
                name = frame.f_globals['__name__'***REMOVED***
                line = linecache.getline(filename, lineno***REMOVED***
            else:
                name = '[unknown***REMOVED***'
                ***REMOVED***
                    src = inspect.getsourcelines(frame***REMOVED***
                    line = src[lineno***REMOVED***
                except IOError:
                    line = 'Unknown code named [%s***REMOVED***.  VM instruction #%d' % (
                        frame.f_code.co_name, frame.f_lasti***REMOVED***
            if self.trace_names is None or name in self.trace_names:
                print('%s:%s: %s' % (name, lineno, line.rstrip(***REMOVED******REMOVED******REMOVED***
                if not self.show_values:
                    return self
                details = [***REMOVED***
                tokens = _token_spliter.split(line***REMOVED***
                for tok in tokens:
                    if tok in frame.f_globals:
                        details.append('%s=%r' % (tok, frame.f_globals[tok***REMOVED******REMOVED******REMOVED***
                    if tok in frame.f_locals:
                        details.append('%s=%r' % (tok, frame.f_locals[tok***REMOVED******REMOVED******REMOVED***
                if details:
                    print("\t%s" % ' '.join(details***REMOVED******REMOVED***
        return self


def spew(trace_names=None, show_values=False***REMOVED***:
    ***REMOVED***Install a trace hook which writes incredibly detailed logs
    about what code is being executed to stdout.
    ***REMOVED***
    sys.settrace(Spew(trace_names, show_values***REMOVED******REMOVED***


def unspew(***REMOVED***:
    ***REMOVED***Remove the trace hook installed by spew.
    ***REMOVED***
    sys.settrace(None***REMOVED***
