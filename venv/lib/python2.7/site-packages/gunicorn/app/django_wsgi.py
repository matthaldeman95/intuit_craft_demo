# -*- coding: utf-8 -
#
# This file is part of gunicorn released under the MIT license.
# See the NOTICE for more information.

***REMOVED*** module used to build the django wsgi application ***REMOVED***
from __future__ import print_function

***REMOVED***
import re
import sys
import time
***REMOVED***
    from StringIO import StringIO
***REMOVED***
    from io import StringIO
    from imp import reload


from django.conf import settings
from django.core.management.validation import get_validation_errors
from django.utils import translation

***REMOVED***
    from django.core.servers.basehttp import get_internal_wsgi_application
    django14 = True
except ImportError:
    from django.core.handlers.wsgi import WSGIHandler
    django14 = False

from gunicorn import util


def make_wsgi_application(***REMOVED***:
    # validate models
    s = StringIO(***REMOVED***
    if get_validation_errors(s***REMOVED***:
        s.seek(0***REMOVED***
        error = s.read(***REMOVED***
        msg = "One or more models did not validate:\n%s" % error
        print(msg, file=sys.stderr***REMOVED***
        sys.stderr.flush(***REMOVED***
        sys.exit(1***REMOVED***

    translation.activate(settings.LANGUAGE_CODE***REMOVED***
    if django14:
        return get_internal_wsgi_application(***REMOVED***
    return WSGIHandler(***REMOVED***


def reload_django_settings(***REMOVED***:
        mod = util.import_module(os.environ['DJANGO_SETTINGS_MODULE'***REMOVED******REMOVED***

        # Reload module.
        reload(mod***REMOVED***

        # Reload settings.
        # Use code from django.settings.Settings module.

        # Settings that should be converted into tuples if they're mistakenly entered
        # as strings.
        tuple_settings = ("INSTALLED_APPS", "TEMPLATE_DIRS"***REMOVED***

        for setting in dir(mod***REMOVED***:
            if setting == setting.upper(***REMOVED***:
                setting_value = getattr(mod, setting***REMOVED***
                if setting in tuple_settings and type(setting_value***REMOVED*** == str:
                    setting_value = (setting_value,***REMOVED***  # In case the user forgot the comma.
                setattr(settings, setting, setting_value***REMOVED***

        # Expand entries in INSTALLED_APPS like "django.contrib.*" to a list
        # of all those apps.
        new_installed_apps = [***REMOVED***
        for app in settings.INSTALLED_APPS:
            if app.endswith('.*'***REMOVED***:
                app_mod = util.import_module(app[:-2***REMOVED******REMOVED***
                appdir = os.path.dirname(app_mod.__file__***REMOVED***
                app_subdirs = os.listdir(appdir***REMOVED***
                name_pattern = re.compile(r'[a-zA-Z***REMOVED***\w*'***REMOVED***
                for d in sorted(app_subdirs***REMOVED***:
                    if (name_pattern.match(d***REMOVED*** and
                            os.path.isdir(os.path.join(appdir, d***REMOVED******REMOVED******REMOVED***:
                        new_installed_apps.append('%s.%s' % (app[:-2***REMOVED***, d***REMOVED******REMOVED***
            else:
                new_installed_apps.append(app***REMOVED***
        setattr(settings, "INSTALLED_APPS", new_installed_apps***REMOVED***

        if hasattr(time, 'tzset'***REMOVED*** and settings.TIME_ZONE:
            # When we can, attempt to validate the timezone. If we can't find
            # this file, no check happens and it's harmless.
            zoneinfo_root = '/usr/share/zoneinfo'
            if (os.path.exists(zoneinfo_root***REMOVED*** and not
                    os.path.exists(os.path.join(zoneinfo_root,
                        *(settings.TIME_ZONE.split('/'***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***:
                raise ValueError("Incorrect timezone setting: %s" %
                        settings.TIME_ZONE***REMOVED***
            # Move the time zone info into os.environ. See ticket #2315 for why
            # we don't do this unconditionally (breaks Windows***REMOVED***.
            os.environ['TZ'***REMOVED*** = settings.TIME_ZONE
            time.tzset(***REMOVED***

        # Settings are configured, so we can set up the logger if required
        if getattr(settings, 'LOGGING_CONFIG', False***REMOVED***:
            # First find the logging configuration function ...
            logging_config_path, logging_config_func_name = settings.LOGGING_CONFIG.rsplit('.', 1***REMOVED***
            logging_config_module = util.import_module(logging_config_path***REMOVED***
            logging_config_func = getattr(logging_config_module, logging_config_func_name***REMOVED***

            # ... then invoke it with the logging settings
            logging_config_func(settings.LOGGING***REMOVED***


def make_command_wsgi_application(admin_mediapath***REMOVED***:
    reload_django_settings(***REMOVED***

    ***REMOVED***
        from django.core.servers.basehttp import AdminMediaHandler
        return AdminMediaHandler(make_wsgi_application(***REMOVED***, admin_mediapath***REMOVED***
    except ImportError:
        return make_wsgi_application(***REMOVED***
