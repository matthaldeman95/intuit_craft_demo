# -*- coding: utf-8 -
#
# This file is part of gunicorn released under the MIT license.
# See the NOTICE for more information.

***REMOVED***
import sys

from gunicorn.app.base import Application
from gunicorn import util


def is_setting_mod(path***REMOVED***:
    return (os.path.isfile(os.path.join(path, "settings.py"***REMOVED******REMOVED*** or
            os.path.isfile(os.path.join(path, "settings.pyc"***REMOVED******REMOVED******REMOVED***


def find_settings_module(path***REMOVED***:
    path = os.path.abspath(path***REMOVED***
    project_path = None
    settings_name = "settings"

    if os.path.isdir(path***REMOVED***:
        project_path = None
        if not is_setting_mod(path***REMOVED***:
            for d in os.listdir(path***REMOVED***:
                if d in ('..', '.'***REMOVED***:
                    continue

                root = os.path.join(path, d***REMOVED***
                if is_setting_mod(root***REMOVED***:
                    project_path = root
                    break
        else:
            project_path = path
    elif os.path.isfile(path***REMOVED***:
        project_path = os.path.dirname(path***REMOVED***
        settings_name, _ = os.path.splitext(os.path.basename(path***REMOVED******REMOVED***

    return project_path, settings_name


def make_default_env(cfg***REMOVED***:
    if cfg.django_settings:
        os.environ['DJANGO_SETTINGS_MODULE'***REMOVED*** = cfg.django_settings

    if cfg.pythonpath and cfg.pythonpath is not None:
        paths = cfg.pythonpath.split(","***REMOVED***
        for path in paths:
            pythonpath = os.path.abspath(cfg.pythonpath***REMOVED***
            if pythonpath not in sys.path:
                sys.path.insert(0, pythonpath***REMOVED***

    ***REMOVED***
        os.environ['DJANGO_SETTINGS_MODULE'***REMOVED***
    except KeyError:
        # not settings env set, try to build one.
        cwd = util.getcwd(***REMOVED***
        project_path, settings_name = find_settings_module(cwd***REMOVED***

        if not project_path:
            raise RuntimeError("django project not found"***REMOVED***

        pythonpath, project_name = os.path.split(project_path***REMOVED***
        os.environ['DJANGO_SETTINGS_MODULE'***REMOVED*** = "%s.%s" % (project_name,
                settings_name***REMOVED***
        if pythonpath not in sys.path:
            sys.path.insert(0, pythonpath***REMOVED***

        if project_path not in sys.path:
            sys.path.insert(0, project_path***REMOVED***


class DjangoApplication(Application***REMOVED***:

    def init(self, parser, opts, args***REMOVED***:
        if args:
            if ("." in args[0***REMOVED*** and not (os.path.isfile(args[0***REMOVED******REMOVED***
                    or os.path.isdir(args[0***REMOVED******REMOVED******REMOVED******REMOVED***:
                self.cfg.set("django_settings", args[0***REMOVED******REMOVED***
            else:
                # not settings env set, try to build one.
                project_path, settings_name = find_settings_module(
                        os.path.abspath(args[0***REMOVED******REMOVED******REMOVED***
                if project_path not in sys.path:
                    sys.path.insert(0, project_path***REMOVED***

                if not project_path:
                    raise RuntimeError("django project not found"***REMOVED***

                pythonpath, project_name = os.path.split(project_path***REMOVED***
                self.cfg.set("django_settings", "%s.%s" % (project_name,
                        settings_name***REMOVED******REMOVED***
                self.cfg.set("pythonpath", pythonpath***REMOVED***

    def load(self***REMOVED***:
        # chdir to the configured path before loading,
        # default is the current dir
        os.chdir(self.cfg.chdir***REMOVED***

        # set settings
        make_default_env(self.cfg***REMOVED***

        # load wsgi application and return it.
        mod = util.import_module("gunicorn.app.django_wsgi"***REMOVED***
        return mod.make_wsgi_application(***REMOVED***


class DjangoApplicationCommand(Application***REMOVED***:

    def __init__(self, options, admin_media_path***REMOVED***:
        self.usage = None
        self.prog = None
        self.cfg = None
        self.config_file = options.get("config"***REMOVED*** or ""
        self.options = options
        self.admin_media_path = admin_media_path
        self.callable = None
        self.project_path = None
        self.do_load_config(***REMOVED***

    def init(self, *args***REMOVED***:
        if 'settings' in self.options:
            self.options['django_settings'***REMOVED*** = self.options.pop('settings'***REMOVED***

        cfg = {***REMOVED***
        for k, v in self.options.items(***REMOVED***:
            if k.lower(***REMOVED*** in self.cfg.settings and v is not None:
                cfg[k.lower(***REMOVED******REMOVED*** = v
        return cfg

    def load(self***REMOVED***:
        # chdir to the configured path before loading,
        # default is the current dir
        os.chdir(self.cfg.chdir***REMOVED***

        # set settings
        make_default_env(self.cfg***REMOVED***

        # load wsgi application and return it.
        mod = util.import_module("gunicorn.app.django_wsgi"***REMOVED***
        return mod.make_command_wsgi_application(self.admin_media_path***REMOVED***


def run(***REMOVED***:
    ***REMOVED***\
    The ``gunicorn_django`` command line runner for launching Django
    applications.
    ***REMOVED***
    util.warn(***REMOVED***This command is deprecated.

    You should now run your application with the WSGI interface
    installed with your project. Ex.:

        gunicorn myproject.wsgi:application

    See https://docs.djangoproject.com/en/1.8/howto/deployment/wsgi/gunicorn/
    for more info.***REMOVED******REMOVED***
    from gunicorn.app.djangoapp import DjangoApplication
    DjangoApplication("%(prog***REMOVED***s [OPTIONS***REMOVED*** [SETTINGS_PATH***REMOVED***"***REMOVED***.run(***REMOVED***
