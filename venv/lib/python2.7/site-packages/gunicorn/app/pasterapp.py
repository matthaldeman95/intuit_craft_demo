# -*- coding: utf-8 -
#
# This file is part of gunicorn released under the MIT license.
# See the NOTICE for more information.
from __future__ import print_function

***REMOVED***
import pkg_resources
import sys

***REMOVED***
    import configparser as ConfigParser
except ImportError:
    import ConfigParser

from paste.deploy import loadapp, loadwsgi
SERVER = loadwsgi.SERVER

from gunicorn.app.base import Application
from gunicorn.config import Config, get_default_config_file
from gunicorn import util


def _has_logging_config(paste_file***REMOVED***:
    cfg_parser = ConfigParser.ConfigParser(***REMOVED***
    cfg_parser.read([paste_file***REMOVED******REMOVED***
    return cfg_parser.has_section('loggers'***REMOVED***


def paste_config(gconfig, config_url, relative_to, global_conf=None***REMOVED***:
    # add entry to pkg_resources
    sys.path.insert(0, relative_to***REMOVED***
    pkg_resources.working_set.add_entry(relative_to***REMOVED***

    config_url = config_url.split('#'***REMOVED***[0***REMOVED***
    cx = loadwsgi.loadcontext(SERVER, config_url, relative_to=relative_to,
                              global_conf=global_conf***REMOVED***
    gc, lc = cx.global_conf.copy(***REMOVED***, cx.local_conf.copy(***REMOVED***
    cfg = {***REMOVED***

    host, port = lc.pop('host', ''***REMOVED***, lc.pop('port', ''***REMOVED***
    if host and port:
        cfg['bind'***REMOVED*** = '%s:%s' % (host, port***REMOVED***
    elif host:
        cfg['bind'***REMOVED*** = host.split(','***REMOVED***

    cfg['default_proc_name'***REMOVED*** = gc.get('__file__'***REMOVED***

    # init logging configuration
    config_file = config_url.split(':'***REMOVED***[1***REMOVED***
    if _has_logging_config(config_file***REMOVED***:
        cfg.setdefault('logconfig', config_file***REMOVED***

    for k, v in gc.items(***REMOVED***:
        if k not in gconfig.settings:
            continue
        cfg[k***REMOVED*** = v

    for k, v in lc.items(***REMOVED***:
        if k not in gconfig.settings:
            continue
        cfg[k***REMOVED*** = v

    return cfg


def load_pasteapp(config_url, relative_to, global_conf=None***REMOVED***:
    return loadapp(config_url, relative_to=relative_to,
            global_conf=global_conf***REMOVED***

class PasterBaseApplication(Application***REMOVED***:
    gcfg = None

    def app_config(self***REMOVED***:
        return paste_config(self.cfg, self.cfgurl, self.relpath,
                global_conf=self.gcfg***REMOVED***

    def load_config(self***REMOVED***:
        super(PasterBaseApplication, self***REMOVED***.load_config(***REMOVED***

        # reload logging conf
        if hasattr(self, "cfgfname"***REMOVED***:
            parser = ConfigParser.ConfigParser(***REMOVED***
            parser.read([self.cfgfname***REMOVED******REMOVED***
            if parser.has_section('loggers'***REMOVED***:
                from logging.config import fileConfig
                config_file = os.path.abspath(self.cfgfname***REMOVED***
                fileConfig(config_file, dict(__file__=config_file,
                                             here=os.path.dirname(config_file***REMOVED******REMOVED******REMOVED***


class PasterApplication(PasterBaseApplication***REMOVED***:

    def init(self, parser, opts, args***REMOVED***:
        if len(args***REMOVED*** != 1:
            parser.error("No application name specified."***REMOVED***

        cwd = util.getcwd(***REMOVED***
        cfgfname = os.path.normpath(os.path.join(cwd, args[0***REMOVED******REMOVED******REMOVED***
        cfgfname = os.path.abspath(cfgfname***REMOVED***
        if not os.path.exists(cfgfname***REMOVED***:
            parser.error("Config file not found: %s" % cfgfname***REMOVED***

        self.cfgurl = 'config:%s' % cfgfname
        self.relpath = os.path.dirname(cfgfname***REMOVED***
        self.cfgfname = cfgfname

        sys.path.insert(0, self.relpath***REMOVED***
        pkg_resources.working_set.add_entry(self.relpath***REMOVED***

        return self.app_config(***REMOVED***

    def load(self***REMOVED***:
        # chdir to the configured path before loading,
        # default is the current dir
        os.chdir(self.cfg.chdir***REMOVED***

        return load_pasteapp(self.cfgurl, self.relpath, global_conf=self.gcfg***REMOVED***


class PasterServerApplication(PasterBaseApplication***REMOVED***:

    def __init__(self, app, gcfg=None, host="127.0.0.1", port=None, *args, **kwargs***REMOVED***:
        self.cfg = Config(***REMOVED***
        self.gcfg = gcfg  # need to hold this for app_config
        self.app = app
        self.callable = None

        gcfg = gcfg or {***REMOVED***
        cfgfname = gcfg.get("__file__"***REMOVED***
        if cfgfname is not None:
            self.cfgurl = 'config:%s' % cfgfname
            self.relpath = os.path.dirname(cfgfname***REMOVED***
            self.cfgfname = cfgfname

        cfg = kwargs.copy(***REMOVED***

        if port and not host.startswith("unix:"***REMOVED***:
            bind = "%s:%s" % (host, port***REMOVED***
        else:
            bind = host
        cfg["bind"***REMOVED*** = bind.split(','***REMOVED***

        if gcfg:
            for k, v in gcfg.items(***REMOVED***:
                cfg[k***REMOVED*** = v
            cfg["default_proc_name"***REMOVED*** = cfg['__file__'***REMOVED***

        ***REMOVED***
            for k, v in cfg.items(***REMOVED***:
                if k.lower(***REMOVED*** in self.cfg.settings and v is not None:
                    self.cfg.set(k.lower(***REMOVED***, v***REMOVED***
        except Exception as e:
            print("\nConfig error: %s" % str(e***REMOVED***, file=sys.stderr***REMOVED***
            sys.stderr.flush(***REMOVED***
            sys.exit(1***REMOVED***

        if cfg.get("config"***REMOVED***:
            self.load_config_from_file(cfg["config"***REMOVED******REMOVED***
        else:
            default_config = get_default_config_file(***REMOVED***
            if default_config is not None:
                self.load_config_from_file(default_config***REMOVED***

    def load(self***REMOVED***:
        # chdir to the configured path before loading,
        # default is the current dir
        os.chdir(self.cfg.chdir***REMOVED***

        return self.app


def run(***REMOVED***:
    ***REMOVED***\
    The ``gunicorn_paster`` command for launching Paster compatible
    applications like Pylons or Turbogears2
    ***REMOVED***
    util.warn(***REMOVED***This command is deprecated.

    You should now use the `--paste` option. Ex.:

        gunicorn --paste development.ini
    ***REMOVED******REMOVED***

    from gunicorn.app.pasterapp import PasterApplication
    PasterApplication("%(prog***REMOVED***s [OPTIONS***REMOVED*** pasteconfig.ini"***REMOVED***.run(***REMOVED***


def paste_server(app, gcfg=None, host="127.0.0.1", port=None, *args, **kwargs***REMOVED***:
    ***REMOVED***\
    A paster server.

    Then entry point in your paster ini file should looks like this:

    [server:main***REMOVED***
    use = egg:gunicorn#main
    host = 127.0.0.1
    port = 5000

    ***REMOVED***

    util.warn(***REMOVED***This command is deprecated.

    You should now use the `--paste` option. Ex.:

        gunicorn --paste development.ini
    ***REMOVED******REMOVED***

    from gunicorn.app.pasterapp import PasterServerApplication
    PasterServerApplication(app, gcfg=gcfg, host=host, port=port, *args, **kwargs***REMOVED***.run(***REMOVED***
