# -*- coding: utf-8 -
#
# This file is part of gunicorn released under the MIT license.
# See the NOTICE for more information.

from datetime import datetime
import errno
import socket
import ssl
import sys

import gunicorn.http as http
import gunicorn.http.wsgi as wsgi
import gunicorn.util as util
import gunicorn.workers.base as base
from gunicorn import six

ALREADY_HANDLED = object(***REMOVED***


class AsyncWorker(base.Worker***REMOVED***:

    def __init__(self, *args, **kwargs***REMOVED***:
        super(AsyncWorker, self***REMOVED***.__init__(*args, **kwargs***REMOVED***
        self.worker_connections = self.cfg.worker_connections

    def timeout_ctx(self***REMOVED***:
        raise NotImplementedError(***REMOVED***

    def handle(self, listener, client, addr***REMOVED***:
        req = None
        ***REMOVED***
            parser = http.RequestParser(self.cfg, client***REMOVED***
            ***REMOVED***
                listener_name = listener.getsockname(***REMOVED***
                if not self.cfg.keepalive:
                    req = six.next(parser***REMOVED***
                    self.handle_request(listener_name, req, client, addr***REMOVED***
                else:
                    # keepalive loop
                    proxy_protocol_info = {***REMOVED***
                    while True:
                        req = None
                        with self.timeout_ctx(***REMOVED***:
                            req = six.next(parser***REMOVED***
                        if not req:
                            break
                        if req.proxy_protocol_info:
                            proxy_protocol_info = req.proxy_protocol_info
                        else:
                            req.proxy_protocol_info = proxy_protocol_info
                        self.handle_request(listener_name, req, client, addr***REMOVED***
            except http.errors.NoMoreData as e:
                self.log.debug("Ignored premature client disconnection. %s", e***REMOVED***
            except StopIteration as e:
                self.log.debug("Closing connection. %s", e***REMOVED***
            except ssl.SSLError:
                # pass to next try-except level
                six.reraise(*sys.exc_info(***REMOVED******REMOVED***
            except EnvironmentError:
                # pass to next try-except level
                six.reraise(*sys.exc_info(***REMOVED******REMOVED***
            except Exception as e:
                self.handle_error(req, client, addr, e***REMOVED***
        except ssl.SSLError as e:
            if e.args[0***REMOVED*** == ssl.SSL_ERROR_EOF:
                self.log.debug("ssl connection closed"***REMOVED***
                client.close(***REMOVED***
            else:
                self.log.debug("Error processing SSL request."***REMOVED***
                self.handle_error(req, client, addr, e***REMOVED***
        except EnvironmentError as e:
            if e.errno not in (errno.EPIPE, errno.ECONNRESET***REMOVED***:
                self.log.exception("Socket error processing request."***REMOVED***
            else:
                if e.errno == errno.ECONNRESET:
                    self.log.debug("Ignoring connection reset"***REMOVED***
                else:
                    self.log.debug("Ignoring EPIPE"***REMOVED***
        except Exception as e:
            self.handle_error(req, client, addr, e***REMOVED***
        finally:
            util.close(client***REMOVED***

    def handle_request(self, listener_name, req, sock, addr***REMOVED***:
        request_start = datetime.now(***REMOVED***
        environ = {***REMOVED***
        resp = None
        ***REMOVED***
            self.cfg.pre_request(self, req***REMOVED***
            resp, environ = wsgi.create(req, sock, addr,
                    listener_name, self.cfg***REMOVED***
            environ["wsgi.multithread"***REMOVED*** = True
            self.nr += 1
            if self.alive and self.nr >= self.max_requests:
                self.log.info("Autorestarting worker after current request."***REMOVED***
                resp.force_close(***REMOVED***
                self.alive = False

            if not self.cfg.keepalive:
                resp.force_close(***REMOVED***

            respiter = self.wsgi(environ, resp.start_response***REMOVED***
            if respiter == ALREADY_HANDLED:
                return False
            ***REMOVED***
                if isinstance(respiter, environ['wsgi.file_wrapper'***REMOVED******REMOVED***:
                    resp.write_file(respiter***REMOVED***
                else:
                    for item in respiter:
                        resp.write(item***REMOVED***
                resp.close(***REMOVED***
                request_time = datetime.now(***REMOVED*** - request_start
                self.log.access(resp, req, environ, request_time***REMOVED***
            finally:
                if hasattr(respiter, "close"***REMOVED***:
                    respiter.close(***REMOVED***
            if resp.should_close(***REMOVED***:
                raise StopIteration(***REMOVED***
        except StopIteration:
            raise
        except EnvironmentError:
            # If the original exception was a socket.error we delegate
            # handling it to the caller (where handle(***REMOVED*** might ignore it***REMOVED***
            six.reraise(*sys.exc_info(***REMOVED******REMOVED***
        except Exception:
            if resp and resp.headers_sent:
                # If the requests have already been sent, we should close the
                # connection to indicate the error.
                self.log.exception("Error handling request"***REMOVED***
                ***REMOVED***
                    sock.shutdown(socket.SHUT_RDWR***REMOVED***
                    sock.close(***REMOVED***
                except EnvironmentError:
                    pass
                raise StopIteration(***REMOVED***
            raise
        finally:
            ***REMOVED***
                self.cfg.post_request(self, req, environ, resp***REMOVED***
            except Exception:
                self.log.exception("Exception in post_request hook"***REMOVED***
        return True
