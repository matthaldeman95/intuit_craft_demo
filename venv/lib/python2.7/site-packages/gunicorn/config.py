# -*- coding: utf-8 -
#
# This file is part of gunicorn released under the MIT license.
# See the NOTICE for more information.

# Please remember to run "make -C docs html" after update "desc" attributes.

import copy
import grp
import inspect
***REMOVED***
    import argparse
except ImportError:  # python 2.6
    from . import argparse_compat as argparse
***REMOVED***
import pwd
import ssl
import sys
import textwrap

from gunicorn import __version__
from gunicorn import _compat
from gunicorn.errors import ConfigError
from gunicorn import six
from gunicorn import util

KNOWN_SETTINGS = [***REMOVED***
PLATFORM = sys.platform


def wrap_method(func***REMOVED***:
    def _wrapped(instance, *args, **kwargs***REMOVED***:
        return func(*args, **kwargs***REMOVED***
    return _wrapped


def make_settings(ignore=None***REMOVED***:
    settings = {***REMOVED***
    ignore = ignore or (***REMOVED***
    for s in KNOWN_SETTINGS:
        setting = s(***REMOVED***
        if setting.name in ignore:
            continue
        settings[setting.name***REMOVED*** = setting.copy(***REMOVED***
    return settings


class Config(object***REMOVED***:

    def __init__(self, usage=None, prog=None***REMOVED***:
        self.settings = make_settings(***REMOVED***
        self.usage = usage
        self.prog = prog or os.path.basename(sys.argv[0***REMOVED******REMOVED***
        self.env_orig = os.environ.copy(***REMOVED***

    def __getattr__(self, name***REMOVED***:
        if name not in self.settings:
            raise AttributeError("No configuration setting for: %s" % name***REMOVED***
        return self.settings[name***REMOVED***.get(***REMOVED***

    def __setattr__(self, name, value***REMOVED***:
        if name != "settings" and name in self.settings:
            raise AttributeError("Invalid access!"***REMOVED***
        super(Config, self***REMOVED***.__setattr__(name, value***REMOVED***

    def set(self, name, value***REMOVED***:
        if name not in self.settings:
            raise AttributeError("No configuration setting for: %s" % name***REMOVED***
        self.settings[name***REMOVED***.set(value***REMOVED***

    def parser(self***REMOVED***:
        kwargs = {
            "usage": self.usage,
            "prog": self.prog
    ***REMOVED***
        parser = argparse.ArgumentParser(**kwargs***REMOVED***
        parser.add_argument("-v", "--version",
                action="version", default=argparse.SUPPRESS,
                version="%(prog***REMOVED***s (version " + __version__ + "***REMOVED***\n",
                help="show program's version number and exit"***REMOVED***
        parser.add_argument("args", nargs="*", help=argparse.SUPPRESS***REMOVED***

        keys = sorted(self.settings, key=self.settings.__getitem__***REMOVED***
        for k in keys:
            self.settings[k***REMOVED***.add_option(parser***REMOVED***

        return parser

    @property
    def worker_class_str(self***REMOVED***:
        uri = self.settings['worker_class'***REMOVED***.get(***REMOVED***

        ## are we using a threaded worker?
        is_sync = uri.endswith('SyncWorker'***REMOVED*** or uri == 'sync'
        if is_sync and self.threads > 1:
            return "threads"
        return uri

    @property
    def worker_class(self***REMOVED***:
        uri = self.settings['worker_class'***REMOVED***.get(***REMOVED***

        ## are we using a threaded worker?
        is_sync = uri.endswith('SyncWorker'***REMOVED*** or uri == 'sync'
        if is_sync and self.threads > 1:
            uri = "gunicorn.workers.gthread.ThreadWorker"

        worker_class = util.load_class(uri***REMOVED***
        if hasattr(worker_class, "setup"***REMOVED***:
            worker_class.setup(***REMOVED***
        return worker_class

    @property
    def threads(self***REMOVED***:
        return self.settings['threads'***REMOVED***.get(***REMOVED***

    @property
    def workers(self***REMOVED***:
        return self.settings['workers'***REMOVED***.get(***REMOVED***

    @property
    def address(self***REMOVED***:
        s = self.settings['bind'***REMOVED***.get(***REMOVED***
        return [util.parse_address(_compat.bytes_to_str(bind***REMOVED******REMOVED*** for bind in s***REMOVED***

    @property
    def uid(self***REMOVED***:
        return self.settings['user'***REMOVED***.get(***REMOVED***

    @property
    def gid(self***REMOVED***:
        return self.settings['group'***REMOVED***.get(***REMOVED***

    @property
    def proc_name(self***REMOVED***:
        pn = self.settings['proc_name'***REMOVED***.get(***REMOVED***
        if pn is not None:
            return pn
        else:
            return self.settings['default_proc_name'***REMOVED***.get(***REMOVED***

    @property
    def logger_class(self***REMOVED***:
        uri = self.settings['logger_class'***REMOVED***.get(***REMOVED***
        if uri == "simple":
            # support the default
            uri = LoggerClass.default

        # if default logger is in use, and statsd is on, automagically switch
        # to the statsd logger
        if uri == LoggerClass.default:
            if 'statsd_host' in self.settings and self.settings['statsd_host'***REMOVED***.value is not None:
                uri = "gunicorn.instrument.statsd.Statsd"

        logger_class = util.load_class(
            uri,
            default="gunicorn.glogging.Logger",
            section="gunicorn.loggers"***REMOVED***

        if hasattr(logger_class, "install"***REMOVED***:
            logger_class.install(***REMOVED***
        return logger_class

    @property
    def is_ssl(self***REMOVED***:
        return self.certfile or self.keyfile

    @property
    def ssl_options(self***REMOVED***:
        opts = {***REMOVED***
        for name, value in self.settings.items(***REMOVED***:
            if value.section == 'SSL':
                opts[name***REMOVED*** = value.get(***REMOVED***
        return opts

    @property
    def env(self***REMOVED***:
        raw_env = self.settings['raw_env'***REMOVED***.get(***REMOVED***
        env = {***REMOVED***

        if not raw_env:
            return env

        for e in raw_env:
            s = _compat.bytes_to_str(e***REMOVED***
            ***REMOVED***
                k, v = s.split('=', 1***REMOVED***
            except ValueError:
                raise RuntimeError("environment setting %r invalid" % s***REMOVED***

            env[k***REMOVED*** = v

        return env

    @property
    def sendfile(self***REMOVED***:
        if self.settings['sendfile'***REMOVED***.get(***REMOVED*** is not None:
            return False

        if 'SENDFILE' in os.environ:
            sendfile = os.environ['SENDFILE'***REMOVED***.lower(***REMOVED***
            return sendfile in ['y', '1', 'yes', 'true'***REMOVED***

        return True


class SettingMeta(type***REMOVED***:
    def __new__(cls, name, bases, attrs***REMOVED***:
        super_new = super(SettingMeta, cls***REMOVED***.__new__
        parents = [b for b in bases if isinstance(b, SettingMeta***REMOVED******REMOVED***
        if not parents:
            return super_new(cls, name, bases, attrs***REMOVED***

        attrs["order"***REMOVED*** = len(KNOWN_SETTINGS***REMOVED***
        attrs["validator"***REMOVED*** = wrap_method(attrs["validator"***REMOVED******REMOVED***

        new_class = super_new(cls, name, bases, attrs***REMOVED***
        new_class.fmt_desc(attrs.get("desc", ""***REMOVED******REMOVED***
        KNOWN_SETTINGS.append(new_class***REMOVED***
        return new_class

    def fmt_desc(cls, desc***REMOVED***:
        desc = textwrap.dedent(desc***REMOVED***.strip(***REMOVED***
        setattr(cls, "desc", desc***REMOVED***
        setattr(cls, "short", desc.splitlines(***REMOVED***[0***REMOVED******REMOVED***


class Setting(object***REMOVED***:
    name = None
    value = None
    section = None
    cli = None
    validator = None
    type = None
    meta = None
    action = None
    default = None
    short = None
    desc = None
    nargs = None
    const = None

    def __init__(self***REMOVED***:
        if self.default is not None:
            self.set(self.default***REMOVED***

    def add_option(self, parser***REMOVED***:
        if not self.cli:
            return
        args = tuple(self.cli***REMOVED***

        help_txt = "%s [%s***REMOVED***" % (self.short, self.default***REMOVED***
        help_txt = help_txt.replace("%", "%%"***REMOVED***

        kwargs = {
            "dest": self.name,
            "action": self.action or "store",
            "type": self.type or str,
            "default": None,
            "help": help_txt
    ***REMOVED***

        if self.meta is not None:
            kwargs['metavar'***REMOVED*** = self.meta

        if kwargs["action"***REMOVED*** != "store":
            kwargs.pop("type"***REMOVED***

        if self.nargs is not None:
            kwargs["nargs"***REMOVED*** = self.nargs

        if self.const is not None:
            kwargs["const"***REMOVED*** = self.const

        parser.add_argument(*args, **kwargs***REMOVED***

    def copy(self***REMOVED***:
        return copy.copy(self***REMOVED***

    def get(self***REMOVED***:
        return self.value

    def set(self, val***REMOVED***:
        if not six.callable(self.validator***REMOVED***:
            raise TypeError('Invalid validator: %s' % self.name***REMOVED***
        self.value = self.validator(val***REMOVED***

    def __lt__(self, other***REMOVED***:
        return (self.section == other.section and
                self.order < other.order***REMOVED***
    __cmp__ = __lt__

Setting = SettingMeta('Setting', (Setting,***REMOVED***, {***REMOVED******REMOVED***


def validate_bool(val***REMOVED***:
    if val is None:
        return

    if isinstance(val, bool***REMOVED***:
        return val
    if not isinstance(val, six.string_types***REMOVED***:
        raise TypeError("Invalid type for casting: %s" % val***REMOVED***
    if val.lower(***REMOVED***.strip(***REMOVED*** == "true":
        return True
    elif val.lower(***REMOVED***.strip(***REMOVED*** == "false":
        return False
    else:
        raise ValueError("Invalid boolean: %s" % val***REMOVED***


def validate_dict(val***REMOVED***:
    if not isinstance(val, dict***REMOVED***:
        raise TypeError("Value is not a dictionary: %s " % val***REMOVED***
    return val


def validate_pos_int(val***REMOVED***:
    if not isinstance(val, six.integer_types***REMOVED***:
        val = int(val, 0***REMOVED***
    else:
        # Booleans are ints!
        val = int(val***REMOVED***
    if val < 0:
        raise ValueError("Value must be positive: %s" % val***REMOVED***
    return val


def validate_string(val***REMOVED***:
    if val is None:
        return None
    if not isinstance(val, six.string_types***REMOVED***:
        raise TypeError("Not a string: %s" % val***REMOVED***
    return val.strip(***REMOVED***


def validate_list_string(val***REMOVED***:
    if not val:
        return [***REMOVED***

    # legacy syntax
    if isinstance(val, six.string_types***REMOVED***:
        val = [val***REMOVED***

    return [validate_string(v***REMOVED*** for v in val***REMOVED***


def validate_string_to_list(val***REMOVED***:
    val = validate_string(val***REMOVED***

    if not val:
        return [***REMOVED***

    return [v.strip(***REMOVED*** for v in val.split(","***REMOVED*** if v***REMOVED***


def validate_class(val***REMOVED***:
    if inspect.isfunction(val***REMOVED*** or inspect.ismethod(val***REMOVED***:
        val = val(***REMOVED***
    if inspect.isclass(val***REMOVED***:
        return val
    return validate_string(val***REMOVED***


def validate_callable(arity***REMOVED***:
    def _validate_callable(val***REMOVED***:
        if isinstance(val, six.string_types***REMOVED***:
            ***REMOVED***
                mod_name, obj_name = val.rsplit(".", 1***REMOVED***
            except ValueError:
                raise TypeError("Value '%s' is not import string. "
                                "Format: module[.submodules...***REMOVED***.object" % val***REMOVED***
            ***REMOVED***
                mod = __import__(mod_name, fromlist=[obj_name***REMOVED******REMOVED***
                val = getattr(mod, obj_name***REMOVED***
            except ImportError as e:
                raise TypeError(str(e***REMOVED******REMOVED***
            except AttributeError:
                raise TypeError("Can not load '%s' from '%s'"
                    "" % (obj_name, mod_name***REMOVED******REMOVED***
        if not six.callable(val***REMOVED***:
            raise TypeError("Value is not six.callable: %s" % val***REMOVED***
        if arity != -1 and arity != len(inspect.getargspec(val***REMOVED***[0***REMOVED******REMOVED***:
            raise TypeError("Value must have an arity of: %s" % arity***REMOVED***
        return val
    return _validate_callable


def validate_user(val***REMOVED***:
    if val is None:
        return os.geteuid(***REMOVED***
    if isinstance(val, int***REMOVED***:
        return val
    elif val.isdigit(***REMOVED***:
        return int(val***REMOVED***
    else:
        ***REMOVED***
            return pwd.getpwnam(val***REMOVED***.pw_uid
        except KeyError:
            raise ConfigError("No such user: '%s'" % val***REMOVED***


def validate_group(val***REMOVED***:
    if val is None:
        return os.getegid(***REMOVED***

    if isinstance(val, int***REMOVED***:
        return val
    elif val.isdigit(***REMOVED***:
        return int(val***REMOVED***
    else:
        ***REMOVED***
            return grp.getgrnam(val***REMOVED***.gr_gid
        except KeyError:
            raise ConfigError("No such group: '%s'" % val***REMOVED***


def validate_post_request(val***REMOVED***:
    val = validate_callable(-1***REMOVED***(val***REMOVED***

    largs = len(inspect.getargspec(val***REMOVED***[0***REMOVED******REMOVED***
    if largs == 4:
        return val
    elif largs == 3:
        return lambda worker, req, env, _r: val(worker, req, env***REMOVED***
    elif largs == 2:
        return lambda worker, req, _e, _r: val(worker, req***REMOVED***
    else:
        raise TypeError("Value must have an arity of: 4"***REMOVED***


def validate_chdir(val***REMOVED***:
    # valid if the value is a string
    val = validate_string(val***REMOVED***

    # transform relative paths
    path = os.path.abspath(os.path.normpath(os.path.join(util.getcwd(***REMOVED***, val***REMOVED******REMOVED******REMOVED***

    # test if the path exists
    if not os.path.exists(path***REMOVED***:
        raise ConfigError("can't chdir to %r" % val***REMOVED***

    return path


def validate_file(val***REMOVED***:
    if val is None:
        return None

    # valid if the value is a string
    val = validate_string(val***REMOVED***

    # transform relative paths
    path = os.path.abspath(os.path.normpath(os.path.join(util.getcwd(***REMOVED***, val***REMOVED******REMOVED******REMOVED***

    # test if the path exists
    if not os.path.exists(path***REMOVED***:
        raise ConfigError("%r not found" % val***REMOVED***

    return path

def validate_hostport(val***REMOVED***:
    val = validate_string(val***REMOVED***
    if val is None:
        return None
    elements = val.split(":"***REMOVED***
    if len(elements***REMOVED*** == 2:
        return (elements[0***REMOVED***, int(elements[1***REMOVED******REMOVED******REMOVED***
    else:
        raise TypeError("Value must consist of: hostname:port"***REMOVED***

def get_default_config_file(***REMOVED***:
    config_path = os.path.join(os.path.abspath(os.getcwd(***REMOVED******REMOVED***,
            'gunicorn.conf.py'***REMOVED***
    if os.path.exists(config_path***REMOVED***:
        return config_path
    return None


class ConfigFile(Setting***REMOVED***:
    name = "config"
    section = "Config File"
    cli = ["-c", "--config"***REMOVED***
    meta = "CONFIG"
    validator = validate_string
    default = None
    desc = ***REMOVED***\
        The Gunicorn config file.

        A string of the form ``PATH``, ``file:PATH``, or ``python:MODULE_NAME``.

        Only has an effect when specified on the command line or as part of an
        application specific configuration.

        .. versionchanged:: 19.4
           Loading the config from a Python module requires the ``python:``
           prefix.
        ***REMOVED***

class Bind(Setting***REMOVED***:
    name = "bind"
    action = "append"
    section = "Server Socket"
    cli = ["-b", "--bind"***REMOVED***
    meta = "ADDRESS"
    validator = validate_list_string

    if 'PORT' in os.environ:
        default = ['0.0.0.0:{0***REMOVED***'.format(os.environ.get('PORT'***REMOVED******REMOVED******REMOVED***
    else:
        default = ['127.0.0.1:8000'***REMOVED***

    desc = ***REMOVED***\
        The socket to bind.

        A string of the form: ``HOST``, ``HOST:PORT``, ``unix:PATH``. An IP is
        a valid ``HOST``.

        Multiple addresses can be bound. ex.::

            $ gunicorn -b 127.0.0.1:8000 -b [::1***REMOVED***:8000 test:app

        will bind the `test:app` application on localhost both on ipv6
        and ipv4 interfaces.
        ***REMOVED***


class Backlog(Setting***REMOVED***:
    name = "backlog"
    section = "Server Socket"
    cli = ["--backlog"***REMOVED***
    meta = "INT"
    validator = validate_pos_int
    type = int
    default = 2048
    desc = ***REMOVED***\
        The maximum number of pending connections.

        This refers to the number of clients that can be waiting to be served.
        Exceeding this number results in the client getting an error when
        attempting to connect. It should only affect servers under significant
        load.

        Must be a positive integer. Generally set in the 64-2048 range.
        ***REMOVED***


class Workers(Setting***REMOVED***:
    name = "workers"
    section = "Worker Processes"
    cli = ["-w", "--workers"***REMOVED***
    meta = "INT"
    validator = validate_pos_int
    type = int
    default = int(os.environ.get("WEB_CONCURRENCY", 1***REMOVED******REMOVED***
    desc = ***REMOVED***\
        The number of worker processes for handling requests.

        A positive integer generally in the ``2-4 x $(NUM_CORES***REMOVED***`` range.
        You'll want to vary this a bit to find the best for your particular
        application's work load.

        By default, the value of the ``WEB_CONCURRENCY`` environment variable.
        If it is not defined, the default is ``1``.
        ***REMOVED***


class WorkerClass(Setting***REMOVED***:
    name = "worker_class"
    section = "Worker Processes"
    cli = ["-k", "--worker-class"***REMOVED***
    meta = "STRING"
    validator = validate_class
    default = "sync"
    desc = ***REMOVED***\
        The type of workers to use.

        The default class (``sync``***REMOVED*** should handle most "normal" types of
        workloads. You'll want to read :doc:`design` for information on when
        you might want to choose one of the other worker classes.

        A string referring to one of the following bundled classes:

        * ``sync``
        * ``eventlet`` - Requires eventlet >= 0.9.7
        * ``gevent``   - Requires gevent >= 0.13
        * ``tornado``  - Requires tornado >= 0.2
        * ``gthread``  - Python 2 requires the futures package to be installed
        * ``gaiohttp`` - Requires Python 3.4 and aiohttp >= 0.21.5

        Optionally, you can provide your own worker by giving Gunicorn a
        Python path to a subclass of ``gunicorn.workers.base.Worker``.
        This alternative syntax will load the gevent class:
        ``gunicorn.workers.ggevent.GeventWorker``. Alternatively, the syntax
        can also load the gevent class with ``egg:gunicorn#gevent``.
        ***REMOVED***

class WorkerThreads(Setting***REMOVED***:
    name = "threads"
    section = "Worker Processes"
    cli = ["--threads"***REMOVED***
    meta = "INT"
    validator = validate_pos_int
    type = int
    default = 1
    desc = ***REMOVED***\
        The number of worker threads for handling requests.

        Run each worker with the specified number of threads.

        A positive integer generally in the ``2-4 x $(NUM_CORES***REMOVED***`` range.
        You'll want to vary this a bit to find the best for your particular
        application's work load.

        If it is not defined, the default is 1.
        ***REMOVED***


class WorkerConnections(Setting***REMOVED***:
    name = "worker_connections"
    section = "Worker Processes"
    cli = ["--worker-connections"***REMOVED***
    meta = "INT"
    validator = validate_pos_int
    type = int
    default = 1000
    desc = ***REMOVED***\
        The maximum number of simultaneous clients.

        This setting only affects the Eventlet and Gevent worker types.
        ***REMOVED***


class MaxRequests(Setting***REMOVED***:
    name = "max_requests"
    section = "Worker Processes"
    cli = ["--max-requests"***REMOVED***
    meta = "INT"
    validator = validate_pos_int
    type = int
    default = 0
    desc = ***REMOVED***\
        The maximum number of requests a worker will process before restarting.

        Any value greater than zero will limit the number of requests a work
        will process before automatically restarting. This is a simple method
        to help limit the damage of memory leaks.

        If this is set to zero (the default***REMOVED*** then the automatic worker
        restarts are disabled.
        ***REMOVED***


class MaxRequestsJitter(Setting***REMOVED***:
    name = "max_requests_jitter"
    section = "Worker Processes"
    cli = ["--max-requests-jitter"***REMOVED***
    meta = "INT"
    validator = validate_pos_int
    type = int
    default = 0
    desc = ***REMOVED***\
        The maximum jitter to add to the *max_requests* setting.

        The jitter causes the restart per worker to be randomized by
        ``randint(0, max_requests_jitter***REMOVED***``. This is intended to stagger worker
        restarts to avoid all workers restarting at the same time.

        .. versionadded:: 19.2
        ***REMOVED***


class Timeout(Setting***REMOVED***:
    name = "timeout"
    section = "Worker Processes"
    cli = ["-t", "--timeout"***REMOVED***
    meta = "INT"
    validator = validate_pos_int
    type = int
    default = 30
    desc = ***REMOVED***\
        Workers silent for more than this many seconds are killed and restarted.

        Generally set to thirty seconds. Only set this noticeably higher if
        you're sure of the repercussions for sync workers. For the non sync
        workers it just means that the worker process is still communicating and
        is not tied to the length of time required to handle a single request.
        ***REMOVED***


class GracefulTimeout(Setting***REMOVED***:
    name = "graceful_timeout"
    section = "Worker Processes"
    cli = ["--graceful-timeout"***REMOVED***
    meta = "INT"
    validator = validate_pos_int
    type = int
    default = 30
    desc = ***REMOVED***\
        Timeout for graceful workers restart.

        After receiving a restart signal, workers have this much time to finish
        serving requests. Workers still alive after the timeout (starting from
        the receipt of the restart signal***REMOVED*** are force killed.
        ***REMOVED***


class Keepalive(Setting***REMOVED***:
    name = "keepalive"
    section = "Worker Processes"
    cli = ["--keep-alive"***REMOVED***
    meta = "INT"
    validator = validate_pos_int
    type = int
    default = 2
    desc = ***REMOVED***\
        The number of seconds to wait for requests on a Keep-Alive connection.

        Generally set in the 1-5 seconds range.
        ***REMOVED***


class LimitRequestLine(Setting***REMOVED***:
    name = "limit_request_line"
    section = "Security"
    cli = ["--limit-request-line"***REMOVED***
    meta = "INT"
    validator = validate_pos_int
    type = int
    default = 4094
    desc = ***REMOVED***\
        The maximum size of HTTP request line in bytes.

        This parameter is used to limit the allowed size of a client's
        HTTP request-line. Since the request-line consists of the HTTP
        method, URI, and protocol version, this directive places a
        restriction on the length of a request-URI allowed for a request
        on the server. A server needs this value to be large enough to
        hold any of its resource names, including any information that
        might be passed in the query part of a GET request. Value is a number
        from 0 (unlimited***REMOVED*** to 8190.

        This parameter can be used to prevent any DDOS attack.
        ***REMOVED***


class LimitRequestFields(Setting***REMOVED***:
    name = "limit_request_fields"
    section = "Security"
    cli = ["--limit-request-fields"***REMOVED***
    meta = "INT"
    validator = validate_pos_int
    type = int
    default = 100
    desc = ***REMOVED***\
        Limit the number of HTTP headers fields in a request.

        This parameter is used to limit the number of headers in a request to
        prevent DDOS attack. Used with the *limit_request_field_size* it allows
        more safety. By default this value is 100 and can't be larger than
        32768.
        ***REMOVED***


class LimitRequestFieldSize(Setting***REMOVED***:
    name = "limit_request_field_size"
    section = "Security"
    cli = ["--limit-request-field_size"***REMOVED***
    meta = "INT"
    validator = validate_pos_int
    type = int
    default = 8190
    desc = ***REMOVED***\
        Limit the allowed size of an HTTP request header field.

        Value is a number from 0 (unlimited***REMOVED*** to 8190. to set the limit
        on the allowed size of an HTTP request header field.
        ***REMOVED***


class Reload(Setting***REMOVED***:
    name = "reload"
    section = 'Debugging'
    cli = ['--reload'***REMOVED***
    validator = validate_bool
    action = 'store_true'
    default = False
    desc = '''\
        Restart workers when code changes.

        This setting is intended for development. It will cause workers to be
        restarted whenever application code changes.

        The reloader is incompatible with application preloading. When using a
        paste configuration be sure that the server block does not import any
        application code or the reload will not work as designed.
        '''


class Spew(Setting***REMOVED***:
    name = "spew"
    section = "Debugging"
    cli = ["--spew"***REMOVED***
    validator = validate_bool
    action = "store_true"
    default = False
    desc = ***REMOVED***\
        Install a trace function that spews every line executed by the server.

        This is the nuclear option.
        ***REMOVED***


class ConfigCheck(Setting***REMOVED***:
    name = "check_config"
    section = "Debugging"
    cli = ["--check-config", ***REMOVED***
    validator = validate_bool
    action = "store_true"
    default = False
    desc = ***REMOVED***\
        Check the configuration.
        ***REMOVED***


class PreloadApp(Setting***REMOVED***:
    name = "preload_app"
    section = "Server Mechanics"
    cli = ["--preload"***REMOVED***
    validator = validate_bool
    action = "store_true"
    default = False
    desc = ***REMOVED***\
        Load application code before the worker processes are forked.

        By preloading an application you can save some RAM resources as well as
        speed up server boot times. Although, if you defer application loading
        to each worker process, you can reload your application code easily by
        restarting workers.
        ***REMOVED***


class Sendfile(Setting***REMOVED***:
    name = "sendfile"
    section = "Server Mechanics"
    cli = ["--no-sendfile"***REMOVED***
    validator = validate_bool
    action = "store_const"
    const = False

    desc = ***REMOVED***\
        Disables the use of ``sendfile(***REMOVED***``.

        If not set, the value of the ``SENDFILE`` environment variable is used
        to enable or disable its usage.

        .. versionadded:: 19.2
        .. versionchanged:: 19.4
           Swapped ``--sendfile`` with ``--no-sendfile`` to actually allow
           disabling.
        .. versionchanged:: 19.6
           added support for the ``SENDFILE`` environment variable
        ***REMOVED***


class Chdir(Setting***REMOVED***:
    name = "chdir"
    section = "Server Mechanics"
    cli = ["--chdir"***REMOVED***
    validator = validate_chdir
    default = util.getcwd(***REMOVED***
    desc = ***REMOVED***\
        Chdir to specified directory before apps loading.
        ***REMOVED***


class Daemon(Setting***REMOVED***:
    name = "daemon"
    section = "Server Mechanics"
    cli = ["-D", "--daemon"***REMOVED***
    validator = validate_bool
    action = "store_true"
    default = False
    desc = ***REMOVED***\
        Daemonize the Gunicorn process.

        Detaches the server from the controlling terminal and enters the
        background.
        ***REMOVED***

class Env(Setting***REMOVED***:
    name = "raw_env"
    action = "append"
    section = "Server Mechanics"
    cli = ["-e", "--env"***REMOVED***
    meta = "ENV"
    validator = validate_list_string
    default = [***REMOVED***

    desc = ***REMOVED***\
        Set environment variable (key=value***REMOVED***.

        Pass variables to the execution environment. Ex.::

            $ gunicorn -b 127.0.0.1:8000 --env FOO=1 test:app

        and test for the foo variable environment in your application.
        ***REMOVED***


class Pidfile(Setting***REMOVED***:
    name = "pidfile"
    section = "Server Mechanics"
    cli = ["-p", "--pid"***REMOVED***
    meta = "FILE"
    validator = validate_string
    default = None
    desc = ***REMOVED***\
        A filename to use for the PID file.

        If not set, no PID file will be written.
        ***REMOVED***

class WorkerTmpDir(Setting***REMOVED***:
    name = "worker_tmp_dir"
    section = "Server Mechanics"
    cli = ["--worker-tmp-dir"***REMOVED***
    meta = "DIR"
    validator = validate_string
    default = None
    desc = ***REMOVED***\
        A directory to use for the worker heartbeat temporary file.

        If not set, the default temporary directory will be used.
        ***REMOVED***


class User(Setting***REMOVED***:
    name = "user"
    section = "Server Mechanics"
    cli = ["-u", "--user"***REMOVED***
    meta = "USER"
    validator = validate_user
    default = os.geteuid(***REMOVED***
    desc = ***REMOVED***\
        Switch worker processes to run as this user.

        A valid user id (as an integer***REMOVED*** or the name of a user that can be
        retrieved with a call to ``pwd.getpwnam(value***REMOVED***`` or ``None`` to not
        change the worker process user.
        ***REMOVED***


class Group(Setting***REMOVED***:
    name = "group"
    section = "Server Mechanics"
    cli = ["-g", "--group"***REMOVED***
    meta = "GROUP"
    validator = validate_group
    default = os.getegid(***REMOVED***
    desc = ***REMOVED***\
        Switch worker process to run as this group.

        A valid group id (as an integer***REMOVED*** or the name of a user that can be
        retrieved with a call to ``pwd.getgrnam(value***REMOVED***`` or ``None`` to not
        change the worker processes group.
        ***REMOVED***


class Umask(Setting***REMOVED***:
    name = "umask"
    section = "Server Mechanics"
    cli = ["-m", "--umask"***REMOVED***
    meta = "INT"
    validator = validate_pos_int
    type = int
    default = 0
    desc = ***REMOVED***\
        A bit mask for the file mode on files written by Gunicorn.

        Note that this affects unix socket permissions.

        A valid value for the ``os.umask(mode***REMOVED***`` call or a string compatible
        with ``int(value, 0***REMOVED***`` (``0`` means Python guesses the base, so values
        like ``0``, ``0xFF``, ``0022`` are valid for decimal, hex, and octal
        representations***REMOVED***
        ***REMOVED***


class TmpUploadDir(Setting***REMOVED***:
    name = "tmp_upload_dir"
    section = "Server Mechanics"
    meta = "DIR"
    validator = validate_string
    default = None
    desc = ***REMOVED***\
        Directory to store temporary request data as they are read.

        This may disappear in the near future.

        This path should be writable by the process permissions set for Gunicorn
        workers. If not specified, Gunicorn will choose a system generated
        temporary directory.
        ***REMOVED***


class SecureSchemeHeader(Setting***REMOVED***:
    name = "secure_scheme_headers"
    section = "Server Mechanics"
    validator = validate_dict
    default = {
        "X-FORWARDED-PROTOCOL": "ssl",
        "X-FORWARDED-PROTO": "https",
        "X-FORWARDED-SSL": "on"
***REMOVED***
    desc = ***REMOVED***\

        A dictionary containing headers and values that the front-end proxy
        uses to indicate HTTPS requests. These tell Gunicorn to set
        ``wsgi.url_scheme`` to ``https``, so your application can tell that the
        request is secure.

        The dictionary should map upper-case header names to exact string
        values. The value comparisons are case-sensitive, unlike the header
        names, so make sure they're exactly what your front-end proxy sends
        when handling HTTPS requests.

        It is important that your front-end proxy configuration ensures that
        the headers defined here can not be passed directly from the client.
        ***REMOVED***


class ForwardedAllowIPS(Setting***REMOVED***:
    name = "forwarded_allow_ips"
    section = "Server Mechanics"
    cli = ["--forwarded-allow-ips"***REMOVED***
    meta = "STRING"
    validator = validate_string_to_list
    default = os.environ.get("FORWARDED_ALLOW_IPS", "127.0.0.1"***REMOVED***
    desc = ***REMOVED***\
        Front-end's IPs from which allowed to handle set secure headers.
        (comma separate***REMOVED***.

        Set to ``*`` to disable checking of Front-end IPs (useful for setups
        where you don't know in advance the IP address of Front-end, but
        you still trust the environment***REMOVED***.

        By default, the value of the ``FORWARDED_ALLOW_IPS`` environment
        variable. If it is not defined, the default is ``"127.0.0.1"``.
        ***REMOVED***


class AccessLog(Setting***REMOVED***:
    name = "accesslog"
    section = "Logging"
    cli = ["--access-logfile"***REMOVED***
    meta = "FILE"
    validator = validate_string
    default = None
    desc = ***REMOVED***\
        The Access log file to write to.

        ``'-'`` means log to stderr.
        ***REMOVED***


class AccessLogFormat(Setting***REMOVED***:
    name = "access_log_format"
    section = "Logging"
    cli = ["--access-logformat"***REMOVED***
    meta = "STRING"
    validator = validate_string
    default = '%(h***REMOVED***s %(l***REMOVED***s %(u***REMOVED***s %(t***REMOVED***s "%(r***REMOVED***s" %(s***REMOVED***s %(b***REMOVED***s "%(f***REMOVED***s" "%(a***REMOVED***s"'
    desc = ***REMOVED***\
        The access log format.

        ==========  ===========
        Identifier  Description
        ==========  ===========
        h           remote address
        l           ``'-'``
        u           user name
        t           date of the request
        r           status line (e.g. ``GET / HTTP/1.1``***REMOVED***
        m           request method
        U           URL path without query string
        q           query string
        H           protocol
        s           status
        B           response length
        b           response length or ``'-'`` (CLF format***REMOVED***
        f           referer
        a           user agent
        T           request time in seconds
        D           request time in microseconds
        L           request time in decimal seconds
        p           process ID
    ***REMOVED***Header***REMOVED***i   request header
    ***REMOVED***Header***REMOVED***o   response header
        ==========  ===========
        ***REMOVED***


class ErrorLog(Setting***REMOVED***:
    name = "errorlog"
    section = "Logging"
    cli = ["--error-logfile", "--log-file"***REMOVED***
    meta = "FILE"
    validator = validate_string
    default = '-'
    desc = ***REMOVED***\
        The Error log file to write to.

        Using ``'-'`` for FILE makes gunicorn log to stderr.

        .. versionchanged:: 19.2
           Log to stderr by default.

        ***REMOVED***


class Loglevel(Setting***REMOVED***:
    name = "loglevel"
    section = "Logging"
    cli = ["--log-level"***REMOVED***
    meta = "LEVEL"
    validator = validate_string
    default = "info"
    desc = ***REMOVED***\
        The granularity of Error log outputs.

        Valid level names are:

        * debug
        * info
        * warning
        * error
        * critical
        ***REMOVED***


class CaptureOutput(Setting***REMOVED***:
    name = "capture_output"
    section = "Logging"
    cli = ["--capture-output"***REMOVED***
    validator = validate_bool
    action = 'store_true'
    default = False
    desc = ***REMOVED***\
        Redirect stdout/stderr to Error log.

        .. versionadded:: 19.6
        ***REMOVED***


class LoggerClass(Setting***REMOVED***:
    name = "logger_class"
    section = "Logging"
    cli = ["--logger-class"***REMOVED***
    meta = "STRING"
    validator = validate_class
    default = "gunicorn.glogging.Logger"
    desc = ***REMOVED***\
        The logger you want to use to log events in Gunicorn.

        The default class (``gunicorn.glogging.Logger``***REMOVED*** handle most of
        normal usages in logging. It provides error and access logging.

        You can provide your own worker by giving Gunicorn a
        Python path to a subclass like ``gunicorn.glogging.Logger``.
        Alternatively the syntax can also load the Logger class
        with ``egg:gunicorn#simple``.
        ***REMOVED***


class LogConfig(Setting***REMOVED***:
    name = "logconfig"
    section = "Logging"
    cli = ["--log-config"***REMOVED***
    meta = "FILE"
    validator = validate_string
    default = None
    desc = ***REMOVED***\
    The log config file to use.
    Gunicorn uses the standard Python logging module's Configuration
    file format.
    ***REMOVED***


class SyslogTo(Setting***REMOVED***:
    name = "syslog_addr"
    section = "Logging"
    cli = ["--log-syslog-to"***REMOVED***
    meta = "SYSLOG_ADDR"
    validator = validate_string

    if PLATFORM == "darwin":
        default = "unix:///var/run/syslog"
    elif PLATFORM in ('freebsd', 'dragonfly', ***REMOVED***:
        default = "unix:///var/run/log"
    elif PLATFORM == "openbsd":
        default = "unix:///dev/log"
    else:
        default = "udp://localhost:514"

    desc = ***REMOVED***\
    Address to send syslog messages.

    Address is a string of the form:

    * ``unix://PATH#TYPE`` : for unix domain socket. ``TYPE`` can be ``stream``
      for the stream driver or ``dgram`` for the dgram driver.
      ``stream`` is the default.
    * ``udp://HOST:PORT`` : for UDP sockets
    * ``tcp://HOST:PORT`` : for TCP sockets

    ***REMOVED***


class Syslog(Setting***REMOVED***:
    name = "syslog"
    section = "Logging"
    cli = ["--log-syslog"***REMOVED***
    validator = validate_bool
    action = 'store_true'
    default = False
    desc = ***REMOVED***\
    Send *Gunicorn* logs to syslog.
    ***REMOVED***


class SyslogPrefix(Setting***REMOVED***:
    name = "syslog_prefix"
    section = "Logging"
    cli = ["--log-syslog-prefix"***REMOVED***
    meta = "SYSLOG_PREFIX"
    validator = validate_string
    default = None
    desc = ***REMOVED***\
    Makes Gunicorn use the parameter as program-name in the syslog entries.

    All entries will be prefixed by ``gunicorn.<prefix>``. By default the
    program name is the name of the process.
    ***REMOVED***


class SyslogFacility(Setting***REMOVED***:
    name = "syslog_facility"
    section = "Logging"
    cli = ["--log-syslog-facility"***REMOVED***
    meta = "SYSLOG_FACILITY"
    validator = validate_string
    default = "user"
    desc = ***REMOVED***\
    Syslog facility name
    ***REMOVED***


class EnableStdioInheritance(Setting***REMOVED***:
    name = "enable_stdio_inheritance"
    section = "Logging"
    cli = ["-R", "--enable-stdio-inheritance"***REMOVED***
    validator = validate_bool
    default = False
    action = "store_true"
    desc = ***REMOVED***\
    Enable stdio inheritance.

    Enable inheritance for stdio file descriptors in daemon mode.

    Note: To disable the Python stdout buffering, you can to set the user
    environment variable ``PYTHONUNBUFFERED`` .
    ***REMOVED***


# statsD monitoring
class StatsdHost(Setting***REMOVED***:
    name = "statsd_host"
    section = "Logging"
    cli = ["--statsd-host"***REMOVED***
    meta = "STATSD_ADDR"
    default = None
    validator = validate_hostport
    desc = ***REMOVED***\
    ``host:port`` of the statsd server to log to.

    .. versionadded:: 19.1
    ***REMOVED***

class StatsdPrefix(Setting***REMOVED***:
    name = "statsd_prefix"
    section = "Logging"
    cli = ["--statsd-prefix"***REMOVED***
    meta = "STATSD_PREFIX"
    default = ""
    validator = validate_string
    desc = ***REMOVED***\
    Prefix to use when emitting statsd metrics (a trailing ``.`` is added,
    if not provided***REMOVED***.

    .. versionadded:: 19.2
    ***REMOVED***


class Procname(Setting***REMOVED***:
    name = "proc_name"
    section = "Process Naming"
    cli = ["-n", "--name"***REMOVED***
    meta = "STRING"
    validator = validate_string
    default = None
    desc = ***REMOVED***\
        A base to use with setproctitle for process naming.

        This affects things like ``ps`` and ``top``. If you're going to be
        running more than one instance of Gunicorn you'll probably want to set a
        name to tell them apart. This requires that you install the setproctitle
        module.

        If not set, the *default_proc_name* setting will be used.
        ***REMOVED***


class DefaultProcName(Setting***REMOVED***:
    name = "default_proc_name"
    section = "Process Naming"
    validator = validate_string
    default = "gunicorn"
    desc = ***REMOVED***\
        Internal setting that is adjusted for each type of application.
        ***REMOVED***


class DjangoSettings(Setting***REMOVED***:
    name = "django_settings"
    section = "Django"
    cli = ["--settings"***REMOVED***
    meta = "STRING"
    validator = validate_string
    default = None
    desc = ***REMOVED***\
        The Python path to a Django settings module. (deprecated***REMOVED***

        e.g. ``myproject.settings.main``. If this isn't provided, the
        ``DJANGO_SETTINGS_MODULE`` environment variable will be used.

        **DEPRECATED**: use the ``--env`` argument instead.
        ***REMOVED***


class PythonPath(Setting***REMOVED***:
    name = "pythonpath"
    section = "Server Mechanics"
    cli = ["--pythonpath"***REMOVED***
    meta = "STRING"
    validator = validate_string
    default = None
    desc = ***REMOVED***\
        A comma-separated list of directories to add to the Python path.

        e.g.
        ``'/home/djangoprojects/myproject,/home/python/mylibrary'``.
        ***REMOVED***


class Paste(Setting***REMOVED***:
    name = "paste"
    section = "Server Mechanics"
    cli = ["--paste", "--paster"***REMOVED***
    meta = "STRING"
    validator = validate_string
    default = None
    desc = ***REMOVED***\
        Load a PasteDeploy config file. The argument may contain a ``#``
        symbol followed by the name of an app section from the config file,
        e.g. ``production.ini#admin``.

        At this time, using alternate server blocks is not supported. Use the
        command line arguments to control server configuration instead.
        ***REMOVED***


class OnStarting(Setting***REMOVED***:
    name = "on_starting"
    section = "Server Hooks"
    validator = validate_callable(1***REMOVED***
    type = six.callable

    def on_starting(server***REMOVED***:
        pass
    default = staticmethod(on_starting***REMOVED***
    desc = ***REMOVED***\
        Called just before the master process is initialized.

        The callable needs to accept a single instance variable for the Arbiter.
        ***REMOVED***


class OnReload(Setting***REMOVED***:
    name = "on_reload"
    section = "Server Hooks"
    validator = validate_callable(1***REMOVED***
    type = six.callable

    def on_reload(server***REMOVED***:
        pass
    default = staticmethod(on_reload***REMOVED***
    desc = ***REMOVED***\
        Called to recycle workers during a reload via SIGHUP.

        The callable needs to accept a single instance variable for the Arbiter.
        ***REMOVED***


class WhenReady(Setting***REMOVED***:
    name = "when_ready"
    section = "Server Hooks"
    validator = validate_callable(1***REMOVED***
    type = six.callable

    def when_ready(server***REMOVED***:
        pass
    default = staticmethod(when_ready***REMOVED***
    desc = ***REMOVED***\
        Called just after the server is started.

        The callable needs to accept a single instance variable for the Arbiter.
        ***REMOVED***


class Prefork(Setting***REMOVED***:
    name = "pre_fork"
    section = "Server Hooks"
    validator = validate_callable(2***REMOVED***
    type = six.callable

    def pre_fork(server, worker***REMOVED***:
        pass
    default = staticmethod(pre_fork***REMOVED***
    desc = ***REMOVED***\
        Called just before a worker is forked.

        The callable needs to accept two instance variables for the Arbiter and
        new Worker.
        ***REMOVED***


class Postfork(Setting***REMOVED***:
    name = "post_fork"
    section = "Server Hooks"
    validator = validate_callable(2***REMOVED***
    type = six.callable

    def post_fork(server, worker***REMOVED***:
        pass
    default = staticmethod(post_fork***REMOVED***
    desc = ***REMOVED***\
        Called just after a worker has been forked.

        The callable needs to accept two instance variables for the Arbiter and
        new Worker.
        ***REMOVED***


class PostWorkerInit(Setting***REMOVED***:
    name = "post_worker_init"
    section = "Server Hooks"
    validator = validate_callable(1***REMOVED***
    type = six.callable

    def post_worker_init(worker***REMOVED***:
        pass

    default = staticmethod(post_worker_init***REMOVED***
    desc = ***REMOVED***\
        Called just after a worker has initialized the application.

        The callable needs to accept one instance variable for the initialized
        Worker.
        ***REMOVED***

class WorkerInt(Setting***REMOVED***:
    name = "worker_int"
    section = "Server Hooks"
    validator = validate_callable(1***REMOVED***
    type = six.callable

    def worker_int(worker***REMOVED***:
        pass

    default = staticmethod(worker_int***REMOVED***
    desc = ***REMOVED***\
        Called just after a worker exited on SIGINT or SIGQUIT.

        The callable needs to accept one instance variable for the initialized
        Worker.
        ***REMOVED***


class WorkerAbort(Setting***REMOVED***:
    name = "worker_abort"
    section = "Server Hooks"
    validator = validate_callable(1***REMOVED***
    type = six.callable

    def worker_abort(worker***REMOVED***:
        pass

    default = staticmethod(worker_abort***REMOVED***
    desc = ***REMOVED***\
        Called when a worker received the SIGABRT signal.

        This call generally happens on timeout.

        The callable needs to accept one instance variable for the initialized
        Worker.
        ***REMOVED***


class PreExec(Setting***REMOVED***:
    name = "pre_exec"
    section = "Server Hooks"
    validator = validate_callable(1***REMOVED***
    type = six.callable

    def pre_exec(server***REMOVED***:
        pass
    default = staticmethod(pre_exec***REMOVED***
    desc = ***REMOVED***\
        Called just before a new master process is forked.

        The callable needs to accept a single instance variable for the Arbiter.
        ***REMOVED***


class PreRequest(Setting***REMOVED***:
    name = "pre_request"
    section = "Server Hooks"
    validator = validate_callable(2***REMOVED***
    type = six.callable

    def pre_request(worker, req***REMOVED***:
        worker.log.debug("%s %s" % (req.method, req.path***REMOVED******REMOVED***
    default = staticmethod(pre_request***REMOVED***
    desc = ***REMOVED***\
        Called just before a worker processes the request.

        The callable needs to accept two instance variables for the Worker and
        the Request.
        ***REMOVED***


class PostRequest(Setting***REMOVED***:
    name = "post_request"
    section = "Server Hooks"
    validator = validate_post_request
    type = six.callable

    def post_request(worker, req, environ, resp***REMOVED***:
        pass
    default = staticmethod(post_request***REMOVED***
    desc = ***REMOVED***\
        Called after a worker processes the request.

        The callable needs to accept two instance variables for the Worker and
        the Request.
        ***REMOVED***


class WorkerExit(Setting***REMOVED***:
    name = "worker_exit"
    section = "Server Hooks"
    validator = validate_callable(2***REMOVED***
    type = six.callable

    def worker_exit(server, worker***REMOVED***:
        pass
    default = staticmethod(worker_exit***REMOVED***
    desc = ***REMOVED***\
        Called just after a worker has been exited.

        The callable needs to accept two instance variables for the Arbiter and
        the just-exited Worker.
        ***REMOVED***


class NumWorkersChanged(Setting***REMOVED***:
    name = "nworkers_changed"
    section = "Server Hooks"
    validator = validate_callable(3***REMOVED***
    type = six.callable

    def nworkers_changed(server, new_value, old_value***REMOVED***:
        pass
    default = staticmethod(nworkers_changed***REMOVED***
    desc = ***REMOVED***\
        Called just after *num_workers* has been changed.

        The callable needs to accept an instance variable of the Arbiter and
        two integers of number of workers after and before change.

        If the number of workers is set for the first time, *old_value* would
        be ``None``.
        ***REMOVED***

class OnExit(Setting***REMOVED***:
    name = "on_exit"
    section = "Server Hooks"
    validator = validate_callable(1***REMOVED***

    def on_exit(server***REMOVED***:
        pass

    default = staticmethod(on_exit***REMOVED***
    desc = ***REMOVED***\
        Called just before exiting Gunicorn.

        The callable needs to accept a single instance variable for the Arbiter.
        ***REMOVED***


class ProxyProtocol(Setting***REMOVED***:
    name = "proxy_protocol"
    section = "Server Mechanics"
    cli = ["--proxy-protocol"***REMOVED***
    validator = validate_bool
    default = False
    action = "store_true"
    desc = ***REMOVED***\
        Enable detect PROXY protocol (PROXY mode***REMOVED***.

        Allow using HTTP and Proxy together. It may be useful for work with
        stunnel as HTTPS frontend and Gunicorn as HTTP server.

        PROXY protocol: http://haproxy.1wt.eu/download/1.5/doc/proxy-protocol.txt

        Example for stunnel config::

            [https***REMOVED***
            protocol = proxy
            accept  = 443
            connect = 80
            cert = /etc/ssl/certs/stunnel.pem
            key = /etc/ssl/certs/stunnel.key
        ***REMOVED***


class ProxyAllowFrom(Setting***REMOVED***:
    name = "proxy_allow_ips"
    section = "Server Mechanics"
    cli = ["--proxy-allow-from"***REMOVED***
    validator = validate_string_to_list
    default = "127.0.0.1"
    desc = ***REMOVED***\
        Front-end's IPs from which allowed accept proxy requests (comma separate***REMOVED***.

        Set to ``*`` to disable checking of Front-end IPs (useful for setups
        where you don't know in advance the IP address of Front-end, but
        you still trust the environment***REMOVED***
        ***REMOVED***


class KeyFile(Setting***REMOVED***:
    name = "keyfile"
    section = "SSL"
    cli = ["--keyfile"***REMOVED***
    meta = "FILE"
    validator = validate_string
    default = None
    desc = ***REMOVED***\
    SSL key file
    ***REMOVED***


class CertFile(Setting***REMOVED***:
    name = "certfile"
    section = "SSL"
    cli = ["--certfile"***REMOVED***
    meta = "FILE"
    validator = validate_string
    default = None
    desc = ***REMOVED***\
    SSL certificate file
    ***REMOVED***

class SSLVersion(Setting***REMOVED***:
    name = "ssl_version"
    section = "SSL"
    cli = ["--ssl-version"***REMOVED***
    validator = validate_pos_int
    default = ssl.PROTOCOL_TLSv1
    desc = ***REMOVED***\
    SSL version to use (see stdlib ssl module's***REMOVED***
    ***REMOVED***

class CertReqs(Setting***REMOVED***:
    name = "cert_reqs"
    section = "SSL"
    cli = ["--cert-reqs"***REMOVED***
    validator = validate_pos_int
    default = ssl.CERT_NONE
    desc = ***REMOVED***\
    Whether client certificate is required (see stdlib ssl module's***REMOVED***
    ***REMOVED***

class CACerts(Setting***REMOVED***:
    name = "ca_certs"
    section = "SSL"
    cli = ["--ca-certs"***REMOVED***
    meta = "FILE"
    validator = validate_string
    default = None
    desc = ***REMOVED***\
    CA certificates file
    ***REMOVED***

class SuppressRaggedEOFs(Setting***REMOVED***:
    name = "suppress_ragged_eofs"
    section = "SSL"
    cli = ["--suppress-ragged-eofs"***REMOVED***
    action = "store_true"
    default = True
    validator = validate_bool
    desc = ***REMOVED***\
    Suppress ragged EOFs (see stdlib ssl module's***REMOVED***
    ***REMOVED***

class DoHandshakeOnConnect(Setting***REMOVED***:
    name = "do_handshake_on_connect"
    section = "SSL"
    cli = ["--do-handshake-on-connect"***REMOVED***
    validator = validate_bool
    action = "store_true"
    default = False
    desc = ***REMOVED***\
    Whether to perform SSL handshake on socket connect (see stdlib ssl module's***REMOVED***
    ***REMOVED***


if sys.version_info >= (2, 7***REMOVED***:
    class Ciphers(Setting***REMOVED***:
        name = "ciphers"
        section = "SSL"
        cli = ["--ciphers"***REMOVED***
        validator = validate_string
        default = 'TLSv1'
        desc = ***REMOVED***\
        Ciphers to use (see stdlib ssl module's***REMOVED***
        ***REMOVED***
