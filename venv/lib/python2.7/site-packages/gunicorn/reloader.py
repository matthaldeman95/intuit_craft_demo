# -*- coding: utf-8 -
#
# This file is part of gunicorn released under the MIT license.
# See the NOTICE for more information.

***REMOVED***
import re
import sys
import time
import threading


class Reloader(threading.Thread***REMOVED***:
    def __init__(self, extra_files=None, interval=1, callback=None***REMOVED***:
        super(Reloader, self***REMOVED***.__init__(***REMOVED***
        self.setDaemon(True***REMOVED***
        self._extra_files = set(extra_files or (***REMOVED******REMOVED***
        self._extra_files_lock = threading.RLock(***REMOVED***
        self._interval = interval
        self._callback = callback

    def add_extra_file(self, filename***REMOVED***:
        with self._extra_files_lock:
            self._extra_files.add(filename***REMOVED***

    def get_files(self***REMOVED***:
        fnames = [
            re.sub('py[co***REMOVED***$', 'py', module.__file__***REMOVED***
            for module in list(sys.modules.values(***REMOVED******REMOVED***
            if hasattr(module, '__file__'***REMOVED***
        ***REMOVED***

        with self._extra_files_lock:
            fnames.extend(self._extra_files***REMOVED***

        return fnames

    def run(self***REMOVED***:
        mtimes = {***REMOVED***
        while True:
            for filename in self.get_files(***REMOVED***:
                ***REMOVED***
                    mtime = os.stat(filename***REMOVED***.st_mtime
                except OSError:
                    continue
                old_time = mtimes.get(filename***REMOVED***
                if old_time is None:
                    mtimes[filename***REMOVED*** = mtime
                    continue
                elif mtime > old_time:
                    if self._callback:
                        self._callback(filename***REMOVED***
            time.sleep(self._interval***REMOVED***
