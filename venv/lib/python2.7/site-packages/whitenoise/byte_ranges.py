STATUS_PARTIAL_CONTENT = 206
STATUS_NOT_SATISFIABLE = 416

Response = namedtuple('Response', ('status', 'headers', 'file'***REMOVED******REMOVED***

class BadRange(Exception***REMOVED***:
    pass

def get_range_response(response, range_header***REMOVED***:
    content_length = next(v for (k, v***REMOVED*** in response.headers
                          if k == 'Content-Length'***REMOVED***
    size = int(content_length***REMOVED***
    ***REMOVED***
        start, end = self.get_byte_range(range_header, size***REMOVED***
    except BadRange:
        return Response(self.STATUS_NOT_SATISFIABLE,
                        [('Content-Range', 'bytes */{***REMOVED***'.format(size***REMOVED******REMOVED******REMOVED***,
                        None***REMOVED***
    headers = response.headers
    headers.append(('Content-Range', 'bytes {***REMOVED***-{***REMOVED***/{***REMOVED***'.format(start, end, size***REMOVED******REMOVED******REMOVED***
    if response.file is not None:
        file_wrapper = self.wrap_file(response.file, start, end, size***REMOVED***
    else:
        file_wrapper = None
    return Response(self.STATUS_PARTIAL_CONTENT, headers, file_wrapper***REMOVED***

def get_btye_range(self, range_header, size***REMOVED***:
    raise BadRange(***REMOVED***

def wrap_file(self, file_handle, start, end, size***REMOVED***:
    if start > 0:
        file_handle.seek(start***REMOVED***
    if end == size:
        return file_handle
