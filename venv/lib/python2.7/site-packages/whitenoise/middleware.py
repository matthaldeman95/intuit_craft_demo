from __future__ import absolute_import

from django.http import FileResponse

from whitenoise.django import DjangoWhiteNoise


class WhiteNoiseMiddleware(DjangoWhiteNoise***REMOVED***:
    ***REMOVED***
    Wrap DjangoWhiteNoise to allow it to function as Django middleware, rather
    than WSGI middleware

    This functions as both old- and new-style middleware, so can be included in
    either MIDDLEWARE or MIDDLEWARE_CLASSES.
    ***REMOVED***

    def __init__(self, get_response=None***REMOVED***:
        self.get_response = get_response
        # We pass None for `application`
        super(WhiteNoiseMiddleware, self***REMOVED***.__init__(None***REMOVED***

    def __call__(self, request***REMOVED***:
        response = self.process_request(request***REMOVED***
        if response is None:
            response = self.get_response(request***REMOVED***
        return response

    def process_request(self, request***REMOVED***:
        if self.autorefresh:
            static_file = self.find_file(request.path_info***REMOVED***
        else:
            static_file = self.files.get(request.path_info***REMOVED***
        if static_file is not None:
            return self.serve(static_file, request***REMOVED***

    def serve(self, static_file, request***REMOVED***:
        response = static_file.get_response(request.method, request.META***REMOVED***
        status = int(response.status***REMOVED***
        http_response = FileResponse(response.file or (***REMOVED***, status=status***REMOVED***
        # Remove default content-type
        del http_response['content-type'***REMOVED***
        for key, value in response.headers:
            http_response[key***REMOVED*** = value
        return http_response
