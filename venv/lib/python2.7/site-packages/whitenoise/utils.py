import errno
***REMOVED***
import stat
import sys


if sys.version_info[0***REMOVED*** >= 3:
    BINARY_TYPE = bytes
else:
    BINARY_TYPE = str


class NotARegularFileError(Exception***REMOVED***:
    pass


class MissingFileError(NotARegularFileError***REMOVED***:
    pass


class IsDirectoryError(MissingFileError***REMOVED***:
    pass


def decode_if_byte_string(s***REMOVED***:
    if isinstance(s, BINARY_TYPE***REMOVED***:
        s = s.decode('utf-8'***REMOVED***
    return s


# Follow Django in treating URLs as UTF-8 encoded (which requires undoing the
# implicit ISO-8859-1 decoding applied in Python 3***REMOVED***. Strictly speaking, URLs
# should only be ASCII anyway, but UTF-8 can be found in the wild.
if sys.version_info[0***REMOVED*** >= 3:
    def decode_path_info(path_info***REMOVED***:
        return path_info.encode('iso-8859-1'***REMOVED***.decode('utf-8'***REMOVED***
else:
    def decode_path_info(path_info***REMOVED***:
        return path_info.decode('utf-8'***REMOVED***


def stat_regular_file(path***REMOVED***:
    ***REMOVED***
    Wrap os.stat to raise appropriate errors if `path` is not a regular file
    ***REMOVED***
    ***REMOVED***
        file_stat = os.stat(path***REMOVED***
    except OSError as e:
        if e.errno == errno.ENOENT:
            raise MissingFileError(path***REMOVED***
        else:
            raise
    if not stat.S_ISREG(file_stat.st_mode***REMOVED***:
        if stat.S_ISDIR(file_stat.st_mode***REMOVED***:
            raise IsDirectoryError(u'Path is a directory: {0***REMOVED***'.format(path***REMOVED******REMOVED***
        else:
            raise NotARegularFileError(u'Not a regular file: {0***REMOVED***'.format(path***REMOVED******REMOVED***
    return file_stat


def ensure_leading_trailing_slash(path***REMOVED***:
    path = (path or u''***REMOVED***.strip(u'/'***REMOVED***
    return u'/{0***REMOVED***/'.format(path***REMOVED*** if path else u'/'
