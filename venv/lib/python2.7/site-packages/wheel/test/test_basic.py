***REMOVED***
Basic wheel tests.
***REMOVED***

***REMOVED***
import pkg_resources
import json
import sys

from pkg_resources import resource_filename

import wheel.util
import wheel.tool

from wheel import egg2wheel
from wheel.install import WheelFile
from zipfile import ZipFile
from shutil import rmtree

test_distributions = ("complex-dist", "simple.dist", "headers.dist"***REMOVED***

def teardown_module(***REMOVED***:
    ***REMOVED***Delete eggs/wheels created by tests.***REMOVED***
    base = pkg_resources.resource_filename('wheel.test', ''***REMOVED***
    for dist in test_distributions:
        for subdir in ('build', 'dist'***REMOVED***:
            ***REMOVED***
                rmtree(os.path.join(base, dist, subdir***REMOVED******REMOVED***
            except OSError:
                pass

def setup_module(***REMOVED***:
    build_wheel(***REMOVED***
    build_egg(***REMOVED***

def build_wheel(***REMOVED***:
    ***REMOVED***Build wheels from test distributions.***REMOVED***
    for dist in test_distributions:
        pwd = os.path.abspath(os.curdir***REMOVED***
        distdir = pkg_resources.resource_filename('wheel.test', dist***REMOVED***
        os.chdir(distdir***REMOVED***
        ***REMOVED***
            sys.argv = ['', 'bdist_wheel'***REMOVED***
            exec(compile(open('setup.py'***REMOVED***.read(***REMOVED***, 'setup.py', 'exec'***REMOVED******REMOVED***
        finally:
            os.chdir(pwd***REMOVED***

def build_egg(***REMOVED***:
    ***REMOVED***Build eggs from test distributions.***REMOVED***
    for dist in test_distributions:
        pwd = os.path.abspath(os.curdir***REMOVED***
        distdir = pkg_resources.resource_filename('wheel.test', dist***REMOVED***
        os.chdir(distdir***REMOVED***
        ***REMOVED***
            sys.argv = ['', 'bdist_egg'***REMOVED***
            exec(compile(open('setup.py'***REMOVED***.read(***REMOVED***, 'setup.py', 'exec'***REMOVED******REMOVED***
        finally:
            os.chdir(pwd***REMOVED***

def test_findable(***REMOVED***:
    ***REMOVED***Make sure pkg_resources can find us.***REMOVED***
    assert pkg_resources.working_set.by_key['wheel'***REMOVED***.version

def test_egg_re(***REMOVED***:
    ***REMOVED***Make sure egg_info_re matches.***REMOVED***
    egg_names_path = pkg_resources.resource_filename('wheel', 'eggnames.txt'***REMOVED***
    with open(egg_names_path***REMOVED*** as egg_names:
        for line in egg_names:
            line = line.strip(***REMOVED***
            if not line:
                continue
            assert egg2wheel.egg_info_re.match(line***REMOVED***, line

def test_compatibility_tags(***REMOVED***:
    ***REMOVED***Test compatibilty tags are working.***REMOVED***
    wf = WheelFile("package-1.0.0-cp32.cp33-noabi-noarch.whl"***REMOVED***
    assert (list(wf.compatibility_tags***REMOVED*** ==
                 [('cp32', 'noabi', 'noarch'***REMOVED***, ('cp33', 'noabi', 'noarch'***REMOVED******REMOVED******REMOVED***
    assert (wf.arity == 2***REMOVED***

    wf2 = WheelFile("package-1.0.0-1st-cp33-noabi-noarch.whl"***REMOVED***
    wf2_info = wf2.parsed_filename.groupdict(***REMOVED***
    assert wf2_info['build'***REMOVED*** == '1st', wf2_info

def test_convert_egg(***REMOVED***:
    base = pkg_resources.resource_filename('wheel.test', ''***REMOVED***
    for dist in test_distributions:
        distdir = os.path.join(base, dist, 'dist'***REMOVED***
        eggs = [e for e in os.listdir(distdir***REMOVED*** if e.endswith('.egg'***REMOVED******REMOVED***
        wheel.tool.convert(eggs, distdir, verbose=False***REMOVED***

def test_unpack(***REMOVED***:
    ***REMOVED***
    Make sure 'wheel unpack' works.
    This also verifies the integrity of our testing wheel files.
    ***REMOVED***
    for dist in test_distributions:
        distdir = pkg_resources.resource_filename('wheel.test',
                                                  os.path.join(dist, 'dist'***REMOVED******REMOVED***
        for wheelfile in (w for w in os.listdir(distdir***REMOVED*** if w.endswith('.whl'***REMOVED******REMOVED***:
            wheel.tool.unpack(os.path.join(distdir, wheelfile***REMOVED***, distdir***REMOVED***

def test_no_scripts(***REMOVED***:
    ***REMOVED***Make sure entry point scripts are not generated.***REMOVED***
    dist = "complex-dist"
    basedir = pkg_resources.resource_filename('wheel.test', dist***REMOVED***
    for (dirname, subdirs, filenames***REMOVED*** in os.walk(basedir***REMOVED***:
        for filename in filenames:
            if filename.endswith('.whl'***REMOVED***:
                whl = ZipFile(os.path.join(dirname, filename***REMOVED******REMOVED***
                for entry in whl.infolist(***REMOVED***:
                    assert not '.data/scripts/' in entry.filename

def test_pydist(***REMOVED***:
    ***REMOVED***Make sure pydist.json exists and validates against our schema.***REMOVED***
    # XXX this test may need manual cleanup of older wheels

    import jsonschema

    def open_json(filename***REMOVED***:
        with open(filename, 'rb'***REMOVED*** as json_file:
            return json.loads(json_file.read(***REMOVED***.decode('utf-8'***REMOVED******REMOVED***

    pymeta_schema = open_json(resource_filename('wheel.test',
                                                'pydist-schema.json'***REMOVED******REMOVED***
    valid = 0
    for dist in ("simple.dist", "complex-dist"***REMOVED***:
        basedir = pkg_resources.resource_filename('wheel.test', dist***REMOVED***
        for (dirname, subdirs, filenames***REMOVED*** in os.walk(basedir***REMOVED***:
            for filename in filenames:
                if filename.endswith('.whl'***REMOVED***:
                    whl = ZipFile(os.path.join(dirname, filename***REMOVED******REMOVED***
                    for entry in whl.infolist(***REMOVED***:
                        if entry.filename.endswith('/metadata.json'***REMOVED***:
                            pymeta = json.loads(whl.read(entry***REMOVED***.decode('utf-8'***REMOVED******REMOVED***
                            jsonschema.validate(pymeta, pymeta_schema***REMOVED***
                            valid += 1
    assert valid > 0, "No metadata.json found"

def test_util(***REMOVED***:
    ***REMOVED***Test functions in util.py.***REMOVED***
    for i in range(10***REMOVED***:
        before = b'*' * i
        encoded = wheel.util.urlsafe_b64encode(before***REMOVED***
        assert not encoded.endswith(b'='***REMOVED***
        after = wheel.util.urlsafe_b64decode(encoded***REMOVED***
        assert before == after


def test_pick_best(***REMOVED***:
    ***REMOVED***Test the wheel ranking algorithm.***REMOVED***
    def get_tags(res***REMOVED***:
        info = res[-1***REMOVED***.parsed_filename.groupdict(***REMOVED***
        return info['pyver'***REMOVED***, info['abi'***REMOVED***, info['plat'***REMOVED***

    cand_tags = [('py27', 'noabi', 'noarch'***REMOVED***, ('py26', 'noabi', 'noarch'***REMOVED***,
                 ('cp27', 'noabi', 'linux_i686'***REMOVED***,
                 ('cp26', 'noabi', 'linux_i686'***REMOVED***,
                 ('cp27', 'noabi', 'linux_x86_64'***REMOVED***,
                 ('cp26', 'noabi', 'linux_x86_64'***REMOVED******REMOVED***
    cand_wheels = [WheelFile('testpkg-1.0-%s-%s-%s.whl' % t***REMOVED***
                   for t in cand_tags***REMOVED***

    supported = [('cp27', 'noabi', 'linux_i686'***REMOVED***, ('py27', 'noabi', 'noarch'***REMOVED******REMOVED***
    supported2 = [('cp27', 'noabi', 'linux_i686'***REMOVED***, ('py27', 'noabi', 'noarch'***REMOVED***,
                  ('cp26', 'noabi', 'linux_i686'***REMOVED***, ('py26', 'noabi', 'noarch'***REMOVED******REMOVED***
    supported3 = [('cp26', 'noabi', 'linux_i686'***REMOVED***, ('py26', 'noabi', 'noarch'***REMOVED***,
                  ('cp27', 'noabi', 'linux_i686'***REMOVED***, ('py27', 'noabi', 'noarch'***REMOVED******REMOVED***

    for supp in (supported, supported2, supported3***REMOVED***:
        context = lambda: list(supp***REMOVED***
        for wheel in cand_wheels:
            wheel.context = context
        best = max(cand_wheels***REMOVED***
        assert list(best.tags***REMOVED***[0***REMOVED*** == supp[0***REMOVED***

        # assert_equal(
        #     list(map(get_tags, pick_best(cand_wheels, supp, top=False***REMOVED******REMOVED******REMOVED***, supp***REMOVED***
