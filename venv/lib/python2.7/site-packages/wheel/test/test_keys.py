import tempfile
***REMOVED***.path
import unittest
import json

from wheel.signatures import keys

wheel_json = ***REMOVED***
{
  "verifiers": [
***REMOVED***
      "scope": "+", 
      "vk": "bp-bjK2fFgtA-8DhKKAAPm9-eAZcX_u03oBv2RlKOBc"
***REMOVED*** 
***REMOVED***
      "scope": "+", 
      "vk": "KAHZBfyqFW3OcFDbLSG4nPCjXxUPy72phP9I4Rn9MAo"
***REMOVED***
***REMOVED***
      "scope": "+", 
      "vk": "tmAYCrSfj8gtJ10v3VkvW7jOndKmQIYE12hgnFu3cvk"
***REMOVED*** 
  ***REMOVED***, 
  "signers": [
***REMOVED***
      "scope": "+", 
      "vk": "tmAYCrSfj8gtJ10v3VkvW7jOndKmQIYE12hgnFu3cvk"
***REMOVED*** 
***REMOVED***
      "scope": "+", 
      "vk": "KAHZBfyqFW3OcFDbLSG4nPCjXxUPy72phP9I4Rn9MAo"
***REMOVED***
  ***REMOVED***, 
  "schema": 1
***REMOVED***
***REMOVED***

class TestWheelKeys(unittest.TestCase***REMOVED***:
    def setUp(self***REMOVED***:
        self.config = tempfile.NamedTemporaryFile(suffix='.json'***REMOVED***
        self.config.close(***REMOVED***
        
        self.config_path, self.config_filename = os.path.split(self.config.name***REMOVED*** 
        def load(*args***REMOVED***:
            return [self.config_path***REMOVED***
        def save(*args***REMOVED***:
            return self.config_path
        keys.load_config_paths = load
        keys.save_config_path = save
        self.wk = keys.WheelKeys(***REMOVED***
        self.wk.CONFIG_NAME = self.config_filename
        
    def tearDown(self***REMOVED***:
        os.unlink(self.config.name***REMOVED***
        
    def test_load_save(self***REMOVED***:
        self.wk.data = json.loads(wheel_json***REMOVED***
        
        self.wk.add_signer('+', '67890'***REMOVED***
        self.wk.add_signer('scope', 'abcdefg'***REMOVED***
        
        self.wk.trust('epocs', 'gfedcba'***REMOVED***
        self.wk.trust('+', '12345'***REMOVED***
        
        self.wk.save(***REMOVED***
        
        del self.wk.data
        self.wk.load(***REMOVED***
        
        signers = self.wk.signers('scope'***REMOVED***
        self.assertTrue(signers[0***REMOVED*** == ('scope', 'abcdefg'***REMOVED***, self.wk.data['signers'***REMOVED******REMOVED***
        self.assertTrue(signers[1***REMOVED***[0***REMOVED*** == '+', self.wk.data['signers'***REMOVED******REMOVED***
        
        trusted = self.wk.trusted('epocs'***REMOVED***
        self.assertTrue(trusted[0***REMOVED*** == ('epocs', 'gfedcba'***REMOVED******REMOVED***
        self.assertTrue(trusted[1***REMOVED***[0***REMOVED*** == '+'***REMOVED***
        
        self.wk.untrust('epocs', 'gfedcba'***REMOVED***
        trusted = self.wk.trusted('epocs'***REMOVED***
        self.assertTrue(('epocs', 'gfedcba'***REMOVED*** not in trusted***REMOVED***
        
    def test_load_save_incomplete(self***REMOVED***:
        self.wk.data = json.loads(wheel_json***REMOVED***
        del self.wk.data['signers'***REMOVED***
        self.wk.data['schema'***REMOVED*** = self.wk.SCHEMA+1
        self.wk.save(***REMOVED***
        ***REMOVED***
            self.wk.load(***REMOVED***
        except ValueError:
            pass
        else:
            raise Exception("Expected ValueError"***REMOVED***
        
        del self.wk.data['schema'***REMOVED***
        self.wk.save(***REMOVED***
        self.wk.load(***REMOVED***
    
    
