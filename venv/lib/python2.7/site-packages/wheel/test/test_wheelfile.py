***REMOVED***
import wheel.install
import wheel.archive
import hashlib
***REMOVED***
    from StringIO import StringIO
except ImportError:
    from io import BytesIO as StringIO
import codecs
import zipfile
import pytest
import shutil
import tempfile
from contextlib import contextmanager

@contextmanager
def environ(key, value***REMOVED***:
    old_value = os.environ.get(key***REMOVED***
    ***REMOVED***
        os.environ[key***REMOVED*** = value
        yield
    finally:
        if old_value is None:
            del os.environ[key***REMOVED***
        else:
            os.environ[key***REMOVED*** = old_value

@contextmanager
def temporary_directory(***REMOVED***:
    # tempfile.TemporaryDirectory doesn't exist in Python 2.
    tempdir = tempfile.mkdtemp(***REMOVED***
    ***REMOVED***
        yield tempdir
    finally:
        shutil.rmtree(tempdir***REMOVED***

@contextmanager
def readable_zipfile(path***REMOVED***:
    # zipfile.ZipFile(***REMOVED*** isn't a context manager under Python 2.
    zf = zipfile.ZipFile(path, 'r'***REMOVED***
    ***REMOVED***
        yield zf
    finally:
        zf.close(***REMOVED***


def test_verifying_zipfile(***REMOVED***:
    if not hasattr(zipfile.ZipExtFile, '_update_crc'***REMOVED***:
        pytest.skip('No ZIP verification. Missing ZipExtFile._update_crc.'***REMOVED***
    
    sio = StringIO(***REMOVED***
    zf = zipfile.ZipFile(sio, 'w'***REMOVED***
    zf.writestr("one", b"first file"***REMOVED***
    zf.writestr("two", b"second file"***REMOVED***
    zf.writestr("three", b"third file"***REMOVED***
    zf.close(***REMOVED***
    
    # In default mode, VerifyingZipFile checks the hash of any read file
    # mentioned with set_expected_hash(***REMOVED***. Files not mentioned with
    # set_expected_hash(***REMOVED*** are not checked.
    vzf = wheel.install.VerifyingZipFile(sio, 'r'***REMOVED***
    vzf.set_expected_hash("one", hashlib.sha256(b"first file"***REMOVED***.digest(***REMOVED******REMOVED***
    vzf.set_expected_hash("three", "blurble"***REMOVED***
    vzf.open("one"***REMOVED***.read(***REMOVED***
    vzf.open("two"***REMOVED***.read(***REMOVED***
    ***REMOVED***
        vzf.open("three"***REMOVED***.read(***REMOVED***
    except wheel.install.BadWheelFile:
        pass
    else:
        raise Exception("expected exception 'BadWheelFile(***REMOVED***'"***REMOVED***
    
    # In strict mode, VerifyingZipFile requires every read file to be
    # mentioned with set_expected_hash(***REMOVED***.
    vzf.strict = True
    ***REMOVED***
        vzf.open("two"***REMOVED***.read(***REMOVED***
    except wheel.install.BadWheelFile:
        pass
    else:
        raise Exception("expected exception 'BadWheelFile(***REMOVED***'"***REMOVED***
        
    vzf.set_expected_hash("two", None***REMOVED***
    vzf.open("two"***REMOVED***.read(***REMOVED***
    
def test_pop_zipfile(***REMOVED***:
    sio = StringIO(***REMOVED***
    zf = wheel.install.VerifyingZipFile(sio, 'w'***REMOVED***
    zf.writestr("one", b"first file"***REMOVED***
    zf.writestr("two", b"second file"***REMOVED***
    zf.close(***REMOVED***
    
    ***REMOVED***
        zf.pop(***REMOVED***
    except RuntimeError:
        pass # already closed
    else:
        raise Exception("expected RuntimeError"***REMOVED***
    
    zf = wheel.install.VerifyingZipFile(sio, 'a'***REMOVED***
    zf.pop(***REMOVED***
    zf.close(***REMOVED***
    
    zf = wheel.install.VerifyingZipFile(sio, 'r'***REMOVED***
    assert len(zf.infolist(***REMOVED******REMOVED*** == 1

def test_zipfile_timestamp(***REMOVED***:
    # An environment variable can be used to influence the timestamp on
    # TarInfo objects inside the zip.  See issue #143.  TemporaryDirectory is
    # not a context manager under Python 3.
    with temporary_directory(***REMOVED*** as tempdir:
        for filename in ('one', 'two', 'three'***REMOVED***:
            path = os.path.join(tempdir, filename***REMOVED***
            with codecs.open(path, 'w', encoding='utf-8'***REMOVED*** as fp:
                fp.write(filename + '\n'***REMOVED***
        zip_base_name = os.path.join(tempdir, 'dummy'***REMOVED***
        # The earliest date representable in TarInfos, 1980-01-01
        with environ('SOURCE_DATE_EPOCH', '315576060'***REMOVED***:
            zip_filename = wheel.archive.make_wheelfile_inner(
                zip_base_name, tempdir***REMOVED***
        with readable_zipfile(zip_filename***REMOVED*** as zf:
            for info in zf.infolist(***REMOVED***:
                assert info.date_time[:3***REMOVED*** == (1980, 1, 1***REMOVED***

def test_zipfile_attributes(***REMOVED***:
    # With the change from ZipFile.write(***REMOVED*** to .writestr(***REMOVED***, we need to manually
    # set member attributes.
    with temporary_directory(***REMOVED*** as tempdir:
        files = (('foo', 0o644***REMOVED***, ('bar', 0o755***REMOVED******REMOVED***
        for filename, mode in files:
            path = os.path.join(tempdir, filename***REMOVED***
            with codecs.open(path, 'w', encoding='utf-8'***REMOVED*** as fp:
                fp.write(filename + '\n'***REMOVED***
            os.chmod(path, mode***REMOVED***
        zip_base_name = os.path.join(tempdir, 'dummy'***REMOVED***
        zip_filename = wheel.archive.make_wheelfile_inner(
            zip_base_name, tempdir***REMOVED***
        with readable_zipfile(zip_filename***REMOVED*** as zf:
            for filename, mode in files:
                info = zf.getinfo(os.path.join(tempdir, filename***REMOVED******REMOVED***
                assert info.external_attr == (mode | 0o100000***REMOVED*** << 16
                assert info.compress_type == zipfile.ZIP_DEFLATED
