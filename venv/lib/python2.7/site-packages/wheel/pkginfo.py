***REMOVED***Tools for reading and writing PKG-INFO / METADATA without caring
about the encoding.***REMOVED***

from email.parser import Parser

***REMOVED***
    unicode
    _PY3 = False
except NameError:
    _PY3 = True

if not _PY3:
    from email.generator import Generator
    
    def read_pkg_info_bytes(bytestr***REMOVED***:
        return Parser(***REMOVED***.parsestr(bytestr***REMOVED***

    def read_pkg_info(path***REMOVED***:
        with open(path, "r"***REMOVED*** as headers:
            message = Parser(***REMOVED***.parse(headers***REMOVED***
        return message

    def write_pkg_info(path, message***REMOVED***:
        with open(path, 'w'***REMOVED*** as metadata:
            Generator(metadata, maxheaderlen=0***REMOVED***.flatten(message***REMOVED*** 

else:
    from email.generator import BytesGenerator
    def read_pkg_info_bytes(bytestr***REMOVED***:
        headers = bytestr.decode(encoding="ascii", errors="surrogateescape"***REMOVED***
        message = Parser(***REMOVED***.parsestr(headers***REMOVED***
        return message

    def read_pkg_info(path***REMOVED***:
        with open(path, "r", 
                  encoding="ascii", 
                  errors="surrogateescape"***REMOVED*** as headers:
            message = Parser(***REMOVED***.parse(headers***REMOVED***
        return message

    def write_pkg_info(path, message***REMOVED***:
        with open(path, "wb"***REMOVED*** as out:
            BytesGenerator(out, maxheaderlen=0***REMOVED***.flatten(message***REMOVED***

