#!/usr/bin/env python
***REMOVED***.path
import re
import sys
import tempfile
import zipfile
import wheel.bdist_wheel
import distutils.dist
from distutils.archive_util import make_archive
from shutil import rmtree
from wheel.archive import archive_wheelfile
from argparse import ArgumentParser
from glob import iglob

egg_info_re = re.compile(r'''(^|/***REMOVED***(?P<name>[^/***REMOVED***+?***REMOVED***-(?P<ver>.+?***REMOVED***
    (-(?P<pyver>.+?***REMOVED******REMOVED***?(-(?P<arch>.+?***REMOVED******REMOVED***?.egg-info(/|$***REMOVED***''', re.VERBOSE***REMOVED***

def parse_info(wininfo_name, egginfo_name***REMOVED***:
    ***REMOVED***Extract metadata from filenames.
    
    Extracts the 4 metadataitems needed (name, version, pyversion, arch***REMOVED*** from
    the installer filename and the name of the egg-info directory embedded in
    the zipfile (if any***REMOVED***.

    The egginfo filename has the format::

        name-ver(-pyver***REMOVED***(-arch***REMOVED***.egg-info

    The installer filename has the format::

        name-ver.arch(-pyver***REMOVED***.exe

    Some things to note:

    1. The installer filename is not definitive. An installer can be renamed
       and work perfectly well as an installer. So more reliable data should
       be used whenever possible.
    2. The egg-info data should be preferred for the name and version, because
       these come straight from the distutils metadata, and are mandatory.
    3. The pyver from the egg-info data should be ignored, as it is
       constructed from the version of Python used to build the installer,
       which is irrelevant - the installer filename is correct here (even to
       the point that when it's not there, any version is implied***REMOVED***.
    4. The architecture must be taken from the installer filename, as it is
       not included in the egg-info data.
    5. Architecture-neutral installers still have an architecture because the
       installer format itself (being executable***REMOVED*** is architecture-specific. We
       should therefore ignore the architecture if the content is pure-python.
    ***REMOVED***

    egginfo = None
    if egginfo_name:
        egginfo = egg_info_re.search(egginfo_name***REMOVED***
        if not egginfo:
            raise ValueError("Egg info filename %s is not valid" %
                    (egginfo_name,***REMOVED******REMOVED***

    # Parse the wininst filename
    # 1. Distribution name (up to the first '-'***REMOVED***
    w_name, sep, rest = wininfo_name.partition('-'***REMOVED***
    if not sep:
        raise ValueError("Installer filename %s is not valid" %
                (wininfo_name,***REMOVED******REMOVED***
    # Strip '.exe'
    rest = rest[:-4***REMOVED***
    # 2. Python version (from the last '-', must start with 'py'***REMOVED***
    rest2, sep, w_pyver = rest.rpartition('-'***REMOVED***
    if sep and w_pyver.startswith('py'***REMOVED***:
        rest = rest2
        w_pyver = w_pyver.replace('.', ''***REMOVED***
    else:
        # Not version specific - use py2.py3. While it is possible that
        # pure-Python code is not compatible with both Python 2 and 3, there
        # is no way of knowing from the wininst format, so we assume the best
        # here (the user can always manually rename the wheel to be more
        # restrictive if needed***REMOVED***.
        w_pyver = 'py2.py3'
    # 3. Version and architecture
    w_ver, sep, w_arch = rest.rpartition('.'***REMOVED***
    if not sep:
        raise ValueError("Installer filename %s is not valid" %
                (wininfo_name,***REMOVED******REMOVED***

    if egginfo:
        w_name = egginfo.group('name'***REMOVED***
        w_ver = egginfo.group('ver'***REMOVED***

    return dict(name=w_name, ver=w_ver, arch=w_arch, pyver=w_pyver***REMOVED***

def bdist_wininst2wheel(path, dest_dir=os.path.curdir***REMOVED***:
    bdw = zipfile.ZipFile(path***REMOVED***

    # Search for egg-info in the archive
    egginfo_name = None
    for filename in bdw.namelist(***REMOVED***:
        if '.egg-info' in filename:
            egginfo_name = filename
            break

    info = parse_info(os.path.basename(path***REMOVED***, egginfo_name***REMOVED***

    root_is_purelib = True
    for zipinfo in bdw.infolist(***REMOVED***:
        if zipinfo.filename.startswith('PLATLIB'***REMOVED***:
            root_is_purelib = False
            break
    if root_is_purelib:
        paths = {'purelib': ''***REMOVED***
    else:
        paths = {'platlib': ''***REMOVED***

    dist_info = "%(name***REMOVED***s-%(ver***REMOVED***s" % info
    datadir = "%s.data/" % dist_info

    # rewrite paths to trick ZipFile into extracting an egg
    # XXX grab wininst .ini - between .exe, padding, and first zip file.
    members = [***REMOVED***
    egginfo_name = ''
    for zipinfo in bdw.infolist(***REMOVED***:
        key, basename = zipinfo.filename.split('/', 1***REMOVED***
        key = key.lower(***REMOVED***
        basepath = paths.get(key, None***REMOVED***
        if basepath is None:
            basepath = datadir + key.lower(***REMOVED*** + '/'
        oldname = zipinfo.filename
        newname = basepath + basename
        zipinfo.filename = newname
        del bdw.NameToInfo[oldname***REMOVED***
        bdw.NameToInfo[newname***REMOVED*** = zipinfo
        # Collect member names, but omit '' (from an entry like "PLATLIB/"
        if newname:
            members.append(newname***REMOVED***
        # Remember egg-info name for the egg2dist call below
        if not egginfo_name:
            if newname.endswith('.egg-info'***REMOVED***:
                egginfo_name = newname
            elif '.egg-info/' in newname:
                egginfo_name, sep, _ = newname.rpartition('/'***REMOVED***
    dir = tempfile.mkdtemp(suffix="_b2w"***REMOVED***
    bdw.extractall(dir, members***REMOVED***

    # egg2wheel
    abi = 'none'
    pyver = info['pyver'***REMOVED***
    arch = (info['arch'***REMOVED*** or 'any'***REMOVED***.replace('.', '_'***REMOVED***.replace('-', '_'***REMOVED***
    # Wininst installers always have arch even if they are not
    # architecture-specific (because the format itself is***REMOVED***.
    # So, assume the content is architecture-neutral if root is purelib.
    if root_is_purelib:
        arch = 'any'
    # If the installer is architecture-specific, it's almost certainly also
    # CPython-specific.
    if arch != 'any':
        pyver = pyver.replace('py', 'cp'***REMOVED***
    wheel_name = '-'.join((
                          dist_info,
                          pyver,
                          abi,
                          arch
                          ***REMOVED******REMOVED***
    if root_is_purelib:
        bw = wheel.bdist_wheel.bdist_wheel(distutils.dist.Distribution(***REMOVED******REMOVED***
    else:
        bw = _bdist_wheel_tag(distutils.dist.Distribution(***REMOVED******REMOVED***

    bw.root_is_pure = root_is_purelib
    bw.python_tag = pyver
    bw.plat_name_supplied = True
    bw.plat_name = info['arch'***REMOVED*** or 'any'

    if not root_is_purelib:
        bw.full_tag_supplied = True
        bw.full_tag = (pyver, abi, arch***REMOVED***

    dist_info_dir = os.path.join(dir, '%s.dist-info' % dist_info***REMOVED***
    bw.egg2dist(os.path.join(dir, egginfo_name***REMOVED***, dist_info_dir***REMOVED***
    bw.write_wheelfile(dist_info_dir, generator='wininst2wheel'***REMOVED***
    bw.write_record(dir, dist_info_dir***REMOVED***
    
    archive_wheelfile(os.path.join(dest_dir, wheel_name***REMOVED***, dir***REMOVED***
    rmtree(dir***REMOVED***


class _bdist_wheel_tag(wheel.bdist_wheel.bdist_wheel***REMOVED***:
    # allow the client to override the default generated wheel tag
    # The default bdist_wheel implementation uses python and abi tags
    # of the running python process. This is not suitable for
    # generating/repackaging prebuild binaries.

    full_tag_supplied = False
    full_tag = None  # None or a (pytag, soabitag, plattag***REMOVED*** triple

    def get_tag(self***REMOVED***:
        if self.full_tag_supplied and self.full_tag is not None:
            return self.full_tag
        else:
            return super(_bdist_wheel_tag, self***REMOVED***.get_tag(***REMOVED***


def main(***REMOVED***:
    parser = ArgumentParser(***REMOVED***
    parser.add_argument('installers', nargs='*', help="Installers to convert"***REMOVED***
    parser.add_argument('--dest-dir', '-d', default=os.path.curdir,
            help="Directory to store wheels (default %(default***REMOVED***s***REMOVED***"***REMOVED***
    parser.add_argument('--verbose', '-v', action='store_true'***REMOVED***
    args = parser.parse_args(***REMOVED***
    for pat in args.installers:
        for installer in iglob(pat***REMOVED***:
            if args.verbose:
                sys.stdout.write("{0***REMOVED***... ".format(installer***REMOVED******REMOVED***
            bdist_wininst2wheel(installer, args.dest_dir***REMOVED***
            if args.verbose:
                sys.stdout.write("OK\n"***REMOVED***

if __name__ == "__main__":
    main(***REMOVED***
