#!/usr/bin/env python
***REMOVED***.path
import re
import sys
import tempfile
import zipfile
import wheel.bdist_wheel
import shutil
import distutils.dist
from distutils.archive_util import make_archive
from argparse import ArgumentParser
from glob import iglob
from wheel.wininst2wheel import _bdist_wheel_tag

egg_info_re = re.compile(r'''(?P<name>.+?***REMOVED***-(?P<ver>.+?***REMOVED***
    (-(?P<pyver>.+?***REMOVED******REMOVED***?(-(?P<arch>.+?***REMOVED******REMOVED***?.egg''', re.VERBOSE***REMOVED***

def egg2wheel(egg_path, dest_dir***REMOVED***:
    egg_info = egg_info_re.match(os.path.basename(egg_path***REMOVED******REMOVED***.groupdict(***REMOVED***
    dir = tempfile.mkdtemp(suffix="_e2w"***REMOVED***
    if os.path.isfile(egg_path***REMOVED***:
        # assume we have a bdist_egg otherwise
        egg = zipfile.ZipFile(egg_path***REMOVED***
        egg.extractall(dir***REMOVED***
    else:
        # support buildout-style installed eggs directories
        for pth in os.listdir(egg_path***REMOVED***:
            src = os.path.join(egg_path, pth***REMOVED***
            if os.path.isfile(src***REMOVED***:
                shutil.copy2(src, dir***REMOVED***
            else:
                shutil.copytree(src, os.path.join(dir, pth***REMOVED******REMOVED***

    dist_info = "%s-%s" % (egg_info['name'***REMOVED***, egg_info['ver'***REMOVED******REMOVED***
    abi = 'none'
    pyver = egg_info['pyver'***REMOVED***.replace('.', ''***REMOVED***
    arch = (egg_info['arch'***REMOVED*** or 'any'***REMOVED***.replace('.', '_'***REMOVED***.replace('-', '_'***REMOVED***
    if arch != 'any':
        # assume all binary eggs are for CPython
        pyver = 'cp' + pyver[2:***REMOVED***
    wheel_name = '-'.join((
                          dist_info,
                          pyver,
                          abi,
                          arch
                          ***REMOVED******REMOVED***
    root_is_purelib = egg_info['arch'***REMOVED*** is None
    if root_is_purelib:
        bw = wheel.bdist_wheel.bdist_wheel(distutils.dist.Distribution(***REMOVED******REMOVED***
    else:
        bw = _bdist_wheel_tag(distutils.dist.Distribution(***REMOVED******REMOVED***

    bw.root_is_pure = root_is_purelib
    bw.python_tag = pyver
    bw.plat_name_supplied = True
    bw.plat_name = egg_info['arch'***REMOVED*** or 'any'
    if not root_is_purelib:
        bw.full_tag_supplied = True
        bw.full_tag = (pyver, abi, arch***REMOVED***

    dist_info_dir = os.path.join(dir, '%s.dist-info' % dist_info***REMOVED***
    bw.egg2dist(os.path.join(dir, 'EGG-INFO'***REMOVED***,
                dist_info_dir***REMOVED***
    bw.write_wheelfile(dist_info_dir, generator='egg2wheel'***REMOVED***
    bw.write_record(dir, dist_info_dir***REMOVED***
    filename = make_archive(os.path.join(dest_dir, wheel_name***REMOVED***, 'zip', root_dir=dir***REMOVED***
    os.rename(filename, filename[:-3***REMOVED*** + 'whl'***REMOVED***
    shutil.rmtree(dir***REMOVED***

def main(***REMOVED***:
    parser = ArgumentParser(***REMOVED***
    parser.add_argument('eggs', nargs='*', help="Eggs to convert"***REMOVED***
    parser.add_argument('--dest-dir', '-d', default=os.path.curdir,
            help="Directory to store wheels (default %(default***REMOVED***s***REMOVED***"***REMOVED***
    parser.add_argument('--verbose', '-v', action='store_true'***REMOVED***
    args = parser.parse_args(***REMOVED***
    for pat in args.eggs:
        for egg in iglob(pat***REMOVED***:
            if args.verbose:
                sys.stdout.write("{0***REMOVED***... ".format(egg***REMOVED******REMOVED***
            egg2wheel(egg, args.dest_dir***REMOVED***
            if args.verbose:
                sys.stdout.write("OK\n"***REMOVED***

if __name__ == "__main__":
    main(***REMOVED***
