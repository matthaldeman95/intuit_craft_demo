# -*- coding: utf-8 -*-

import warnings
***REMOVED***

from collections import namedtuple
from . import djbec

__all__ = ['crypto_sign', 'crypto_sign_open', 'crypto_sign_keypair', 'Keypair',
           'PUBLICKEYBYTES', 'SECRETKEYBYTES', 'SIGNATUREBYTES'***REMOVED***

PUBLICKEYBYTES=32
SECRETKEYBYTES=64
SIGNATUREBYTES=64

Keypair = namedtuple('Keypair', ('vk', 'sk'***REMOVED******REMOVED*** # verifying key, secret key

def crypto_sign_keypair(seed=None***REMOVED***:
    ***REMOVED***Return (verifying, secret***REMOVED*** key from a given seed, or os.urandom(32***REMOVED******REMOVED***    
    if seed is None:
        seed = os.urandom(PUBLICKEYBYTES***REMOVED***
    else:
        warnings.warn("ed25519ll should choose random seed.",
                      RuntimeWarning***REMOVED***
    if len(seed***REMOVED*** != 32:
        raise ValueError("seed must be 32 random bytes or None."***REMOVED***
    skbytes = seed
    vkbytes = djbec.publickey(skbytes***REMOVED***
    return Keypair(vkbytes, skbytes+vkbytes***REMOVED***


def crypto_sign(msg, sk***REMOVED***:
    ***REMOVED***Return signature+message given message and secret key.
    The signature is the first SIGNATUREBYTES bytes of the return value.
    A copy of msg is in the remainder.***REMOVED***
    if len(sk***REMOVED*** != SECRETKEYBYTES:
        raise ValueError("Bad signing key length %d" % len(sk***REMOVED******REMOVED***
    vkbytes = sk[PUBLICKEYBYTES:***REMOVED***
    skbytes = sk[:PUBLICKEYBYTES***REMOVED***
    sig = djbec.signature(msg, skbytes, vkbytes***REMOVED***
    return sig + msg


def crypto_sign_open(signed, vk***REMOVED***:
    ***REMOVED***Return message given signature+message and the verifying key.***REMOVED***
    if len(vk***REMOVED*** != PUBLICKEYBYTES:
        raise ValueError("Bad verifying key length %d" % len(vk***REMOVED******REMOVED***
    rc = djbec.checkvalid(signed[:SIGNATUREBYTES***REMOVED***, signed[SIGNATUREBYTES:***REMOVED***, vk***REMOVED***
    if not rc:
        raise ValueError("rc != True", rc***REMOVED***    
    return signed[SIGNATUREBYTES:***REMOVED***

