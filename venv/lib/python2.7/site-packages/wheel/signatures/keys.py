***REMOVED***Store and retrieve wheel signing / verifying keys.

Given a scope (a package name, + meaning "all packages", or - meaning 
"no packages"***REMOVED***, return a list of verifying keys that are trusted for that 
scope.

Given a package name, return a list of (scope, key***REMOVED*** suggested keys to sign
that package (only the verifying keys; the private signing key is stored
elsewhere***REMOVED***.

Keys here are represented as urlsafe_b64encoded strings with no padding.

Tentative command line interface:

# list trusts
wheel trust
# trust a particular key for all
wheel trust + key
# trust key for beaglevote
wheel trust beaglevote key
# stop trusting a key for all
wheel untrust + key

# generate a key pair
wheel keygen

# import a signing key from a file
wheel import keyfile

# export a signing key
wheel export key
***REMOVED***

import json
***REMOVED***.path
from ..util import native, load_config_paths, save_config_path

class WheelKeys(object***REMOVED***:
    SCHEMA = 1
    CONFIG_NAME = 'wheel.json'
    
    def __init__(self***REMOVED***:
        self.data = {'signers':[***REMOVED***, 'verifiers':[***REMOVED******REMOVED***
        
    def load(self***REMOVED***:
        # XXX JSON is not a great database
        for path in load_config_paths('wheel'***REMOVED***:
            conf = os.path.join(native(path***REMOVED***, self.CONFIG_NAME***REMOVED***
            if os.path.exists(conf***REMOVED***:
                with open(conf, 'r'***REMOVED*** as infile:
                    self.data = json.load(infile***REMOVED***
                    for x in ('signers', 'verifiers'***REMOVED***:
                        if not x in self.data:
                            self.data[x***REMOVED*** = [***REMOVED***
                    if 'schema' not in self.data:
                        self.data['schema'***REMOVED*** = self.SCHEMA
                    elif self.data['schema'***REMOVED*** != self.SCHEMA:
                        raise ValueError(
                            "Bad wheel.json version {0***REMOVED***, expected {1***REMOVED***".format(
                                self.data['schema'***REMOVED***, self.SCHEMA***REMOVED******REMOVED***
                break
        return self

    def save(self***REMOVED***:
        # Try not to call this a very long time after load(***REMOVED*** 
        path = save_config_path('wheel'***REMOVED***
        conf = os.path.join(native(path***REMOVED***, self.CONFIG_NAME***REMOVED***
        with open(conf, 'w+'***REMOVED*** as out:
            json.dump(self.data, out, indent=2***REMOVED***
        return self
    
    def trust(self, scope, vk***REMOVED***:
        ***REMOVED***Start trusting a particular key for given scope.***REMOVED***
        self.data['verifiers'***REMOVED***.append({'scope':scope, 'vk':vk***REMOVED******REMOVED***
        return self
    
    def untrust(self, scope, vk***REMOVED***:
        ***REMOVED***Stop trusting a particular key for given scope.***REMOVED***
        self.data['verifiers'***REMOVED***.remove({'scope':scope, 'vk':vk***REMOVED******REMOVED***
        return self
        
    def trusted(self, scope=None***REMOVED***:
        ***REMOVED***Return list of [(scope, trusted key***REMOVED***, ...***REMOVED*** for given scope.***REMOVED***
        trust = [(x['scope'***REMOVED***, x['vk'***REMOVED******REMOVED*** for x in self.data['verifiers'***REMOVED*** if x['scope'***REMOVED*** in (scope, '+'***REMOVED******REMOVED***
        trust.sort(key=lambda x: x[0***REMOVED******REMOVED***
        trust.reverse(***REMOVED***
        return trust
    
    def signers(self, scope***REMOVED***:
        ***REMOVED***Return list of signing key(s***REMOVED***.***REMOVED***
        sign = [(x['scope'***REMOVED***, x['vk'***REMOVED******REMOVED*** for x in self.data['signers'***REMOVED*** if x['scope'***REMOVED*** in (scope, '+'***REMOVED******REMOVED***
        sign.sort(key=lambda x: x[0***REMOVED******REMOVED***
        sign.reverse(***REMOVED***
        return sign
    
    def add_signer(self, scope, vk***REMOVED***:
        ***REMOVED***Remember verifying key vk as being valid for signing in scope.***REMOVED***
        self.data['signers'***REMOVED***.append({'scope':scope, 'vk':vk***REMOVED******REMOVED***
    
