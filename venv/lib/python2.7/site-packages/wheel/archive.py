***REMOVED***
Archive tools for wheel.
***REMOVED***

***REMOVED***
import time
import logging
***REMOVED***.path
import zipfile

log = logging.getLogger("wheel"***REMOVED***


def archive_wheelfile(base_name, base_dir***REMOVED***:
    '''Archive all files under `base_dir` in a whl file and name it like
    `base_name`.
    '''
    olddir = os.path.abspath(os.curdir***REMOVED***
    base_name = os.path.abspath(base_name***REMOVED***
    ***REMOVED***
        os.chdir(base_dir***REMOVED***
        return make_wheelfile_inner(base_name***REMOVED***
    finally:
        os.chdir(olddir***REMOVED***


def make_wheelfile_inner(base_name, base_dir='.'***REMOVED***:
    ***REMOVED***Create a whl file from all the files under 'base_dir'.

    Places .dist-info at the end of the archive.***REMOVED***

    zip_filename = base_name + ".whl"

    log.info("creating '%s' and adding '%s' to it", zip_filename, base_dir***REMOVED***

    # Some applications need reproducible .whl files, but they can't do this
    # without forcing the timestamp of the individual ZipInfo objects.  See
    # issue #143.
    timestamp = os.environ.get('SOURCE_DATE_EPOCH'***REMOVED***
    if timestamp is None:
        date_time = None
    else:
        date_time = time.gmtime(int(timestamp***REMOVED******REMOVED***[0:6***REMOVED***

    # XXX support bz2, xz when available
    zip = zipfile.ZipFile(zip_filename, "w", compression=zipfile.ZIP_DEFLATED***REMOVED***

    score = {'WHEEL': 1, 'METADATA': 2, 'RECORD': 3***REMOVED***
    deferred = [***REMOVED***

    def writefile(path, date_time***REMOVED***:
        st = os.stat(path***REMOVED***
        if date_time is None:
            mtime = time.gmtime(st.st_mtime***REMOVED***
            date_time = mtime[0:6***REMOVED***
        zinfo = zipfile.ZipInfo(path, date_time***REMOVED***
        zinfo.external_attr = st.st_mode << 16
        zinfo.compress_type = zipfile.ZIP_DEFLATED
        with open(path, 'rb'***REMOVED*** as fp:
            zip.writestr(zinfo, fp.read(***REMOVED******REMOVED***
        log.info("adding '%s'" % path***REMOVED***

    for dirpath, dirnames, filenames in os.walk(base_dir***REMOVED***:
        for name in filenames:
            path = os.path.normpath(os.path.join(dirpath, name***REMOVED******REMOVED***

            if os.path.isfile(path***REMOVED***:
                if dirpath.endswith('.dist-info'***REMOVED***:
                    deferred.append((score.get(name, 0***REMOVED***, path***REMOVED******REMOVED***
                else:
                    writefile(path, date_time***REMOVED***

    deferred.sort(***REMOVED***
    for score, path in deferred:
        writefile(path, date_time***REMOVED***

    zip.close(***REMOVED***

    return zip_filename
