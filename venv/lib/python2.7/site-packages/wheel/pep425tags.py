***REMOVED***Generate and work with PEP 425 Compatibility Tags.***REMOVED***

import sys
import warnings

***REMOVED***
    import sysconfig
except ImportError:  # pragma nocover
    # Python < 2.7
    import distutils.sysconfig as sysconfig
import distutils.util


def get_config_var(var***REMOVED***:
    ***REMOVED***
        return sysconfig.get_config_var(var***REMOVED***
    except IOError as e:  # pip Issue #1074
        warnings.warn("{0***REMOVED***".format(e***REMOVED***, RuntimeWarning***REMOVED***
        return None


def get_abbr_impl(***REMOVED***:
    ***REMOVED***Return abbreviated implementation name.***REMOVED***
    if hasattr(sys, 'pypy_version_info'***REMOVED***:
        pyimpl = 'pp'
    elif sys.platform.startswith('java'***REMOVED***:
        pyimpl = 'jy'
    elif sys.platform == 'cli':
        pyimpl = 'ip'
    else:
        pyimpl = 'cp'
    return pyimpl


def get_impl_ver(***REMOVED***:
    ***REMOVED***Return implementation version.***REMOVED***
    impl_ver = get_config_var("py_version_nodot"***REMOVED***
    if not impl_ver or get_abbr_impl(***REMOVED*** == 'pp':
        impl_ver = ''.join(map(str, get_impl_version_info(***REMOVED******REMOVED******REMOVED***
    return impl_ver


def get_impl_version_info(***REMOVED***:
    ***REMOVED***Return sys.version_info-like tuple for use in decrementing the minor
    version.***REMOVED***
    if get_abbr_impl(***REMOVED*** == 'pp':
        # as per https://github.com/pypa/pip/issues/2882
        return (sys.version_info[0***REMOVED***, sys.pypy_version_info.major,
                sys.pypy_version_info.minor***REMOVED***
    else:
        return sys.version_info[0***REMOVED***, sys.version_info[1***REMOVED***


def get_flag(var, fallback, expected=True, warn=True***REMOVED***:
    ***REMOVED***Use a fallback method for determining SOABI flags if the needed config
    var is unset or unavailable.***REMOVED***
    val = get_config_var(var***REMOVED***
    if val is None:
        if warn:
            warnings.warn("Config variable '{0***REMOVED***' is unset, Python ABI tag may "
                          "be incorrect".format(var***REMOVED***, RuntimeWarning, 2***REMOVED***
        return fallback(***REMOVED***
    return val == expected


def get_abi_tag(***REMOVED***:
    ***REMOVED***Return the ABI tag based on SOABI (if available***REMOVED*** or emulate SOABI
    (CPython 2, PyPy***REMOVED***.***REMOVED***
    soabi = get_config_var('SOABI'***REMOVED***
    impl = get_abbr_impl(***REMOVED***
    if not soabi and impl in ('cp', 'pp'***REMOVED*** and hasattr(sys, 'maxunicode'***REMOVED***:
        d = ''
        m = ''
        u = ''
        if get_flag('Py_DEBUG',
                    lambda: hasattr(sys, 'gettotalrefcount'***REMOVED***,
                    warn=(impl == 'cp'***REMOVED******REMOVED***:
            d = 'd'
        if get_flag('WITH_PYMALLOC',
                    lambda: impl == 'cp',
                    warn=(impl == 'cp'***REMOVED******REMOVED***:
            m = 'm'
        if get_flag('Py_UNICODE_SIZE',
                    lambda: sys.maxunicode == 0x10ffff,
                    expected=4,
                    warn=(impl == 'cp' and
                          sys.version_info < (3, 3***REMOVED******REMOVED******REMOVED*** \
                and sys.version_info < (3, 3***REMOVED***:
            u = 'u'
        abi = '%s%s%s%s%s' % (impl, get_impl_ver(***REMOVED***, d, m, u***REMOVED***
    elif soabi and soabi.startswith('cpython-'***REMOVED***:
        abi = 'cp' + soabi.split('-'***REMOVED***[1***REMOVED***
    elif soabi:
        abi = soabi.replace('.', '_'***REMOVED***.replace('-', '_'***REMOVED***
    else:
        abi = None
    return abi


def get_platform(***REMOVED***:
    ***REMOVED***Return our platform name 'win32', 'linux_x86_64'***REMOVED***
    # XXX remove distutils dependency
    result = distutils.util.get_platform(***REMOVED***.replace('.', '_'***REMOVED***.replace('-', '_'***REMOVED***
    if result == "linux_x86_64" and sys.maxsize == 2147483647:
        # pip pull request #3497
        result = "linux_i686"
    return result


def get_supported(versions=None, supplied_platform=None***REMOVED***:
    ***REMOVED***Return a list of supported tags for each version specified in
    `versions`.

    :param versions: a list of string versions, of the form ["33", "32"***REMOVED***, 
        or None. The first version will be assumed to support our ABI.
    ***REMOVED***
    supported = [***REMOVED***
    
    # Versions must be given with respect to the preference
    if versions is None:
        versions = [***REMOVED***
        version_info = get_impl_version_info(***REMOVED***
        major = version_info[:-1***REMOVED***
        # Support all previous minor Python versions.
        for minor in range(version_info[-1***REMOVED***, -1, -1***REMOVED***:
            versions.append(''.join(map(str, major + (minor,***REMOVED******REMOVED******REMOVED******REMOVED***
            
    impl = get_abbr_impl(***REMOVED***
    
    abis = [***REMOVED***

    abi = get_abi_tag(***REMOVED***
    if abi:
        abis[0:0***REMOVED*** = [abi***REMOVED***
 
    abi3s = set(***REMOVED***
    import imp
    for suffix in imp.get_suffixes(***REMOVED***:
        if suffix[0***REMOVED***.startswith('.abi'***REMOVED***:
            abi3s.add(suffix[0***REMOVED***.split('.', 2***REMOVED***[1***REMOVED******REMOVED***

    abis.extend(sorted(list(abi3s***REMOVED******REMOVED******REMOVED***

    abis.append('none'***REMOVED***

    platforms = [***REMOVED***
    if supplied_platform:
        platforms.append(supplied_platform***REMOVED***
    platforms.append(get_platform(***REMOVED******REMOVED***
    
    # Current version, current API (built specifically for our Python***REMOVED***:
    for abi in abis:
        for arch in platforms:
            supported.append(('%s%s' % (impl, versions[0***REMOVED******REMOVED***, abi, arch***REMOVED******REMOVED***

    # abi3 modules compatible with older version of Python
    for version in versions[1:***REMOVED***:
        # abi3 was introduced in Python 3.2
        if version in ('31', '30'***REMOVED***:
            break
        for abi in abi3s:   # empty set if not Python 3
            for arch in platforms:
                supported.append(("%s%s" % (impl, version***REMOVED***, abi, arch***REMOVED******REMOVED***

    # No abi / arch, but requires our implementation:
    for i, version in enumerate(versions***REMOVED***:
        supported.append(('%s%s' % (impl, version***REMOVED***, 'none', 'any'***REMOVED******REMOVED***
        if i == 0:
            # Tagged specifically as being cross-version compatible 
            # (with just the major version specified***REMOVED***
            supported.append(('%s%s' % (impl, versions[0***REMOVED***[0***REMOVED******REMOVED***, 'none', 'any'***REMOVED******REMOVED*** 
    
    # Major Python version + platform; e.g. binaries not using the Python API
    supported.append(('py%s' % (versions[0***REMOVED***[0***REMOVED******REMOVED***, 'none', arch***REMOVED******REMOVED***

    # No abi / arch, generic Python
    for i, version in enumerate(versions***REMOVED***:
        supported.append(('py%s' % (version,***REMOVED***, 'none', 'any'***REMOVED******REMOVED***
        if i == 0:
            supported.append(('py%s' % (version[0***REMOVED******REMOVED***, 'none', 'any'***REMOVED******REMOVED***
        
    return supported
