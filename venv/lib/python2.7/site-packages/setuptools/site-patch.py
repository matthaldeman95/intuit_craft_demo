def __boot(***REMOVED***:
    import sys
    ***REMOVED***
    PYTHONPATH = os.environ.get('PYTHONPATH'***REMOVED***
    if PYTHONPATH is None or (sys.platform == 'win32' and not PYTHONPATH***REMOVED***:
        PYTHONPATH = [***REMOVED***
    else:
        PYTHONPATH = PYTHONPATH.split(os.pathsep***REMOVED***

    pic = getattr(sys, 'path_importer_cache', {***REMOVED******REMOVED***
    stdpath = sys.path[len(PYTHONPATH***REMOVED***:***REMOVED***
    mydir = os.path.dirname(__file__***REMOVED***

    for item in stdpath:
        if item == mydir or not item:
            continue    # skip if current dir. on Windows, or my own directory
        importer = pic.get(item***REMOVED***
        if importer is not None:
            loader = importer.find_module('site'***REMOVED***
            if loader is not None:
                # This should actually reload the current module
                loader.load_module('site'***REMOVED***
                break
        else:
            ***REMOVED***
                import imp  # Avoid import loop in Python >= 3.3
                stream, path, descr = imp.find_module('site', [item***REMOVED******REMOVED***
            except ImportError:
                continue
            if stream is None:
                continue
            ***REMOVED***
                # This should actually reload the current module
                imp.load_module('site', stream, path, descr***REMOVED***
            finally:
                stream.close(***REMOVED***
            break
    else:
        raise ImportError("Couldn't find the real 'site' module"***REMOVED***

    known_paths = dict([(makepath(item***REMOVED***[1***REMOVED***, 1***REMOVED*** for item in sys.path***REMOVED******REMOVED***  # 2.2 comp

    oldpos = getattr(sys, '__egginsert', 0***REMOVED***  # save old insertion position
    sys.__egginsert = 0  # and reset the current one

    for item in PYTHONPATH:
        addsitedir(item***REMOVED***

    sys.__egginsert += oldpos  # restore effective old position

    d, nd = makepath(stdpath[0***REMOVED******REMOVED***
    insert_at = None
    new_path = [***REMOVED***

    for item in sys.path:
        p, np = makepath(item***REMOVED***

        if np == nd and insert_at is None:
            # We've hit the first 'system' path entry, so added entries go here
            insert_at = len(new_path***REMOVED***

        if np in known_paths or insert_at is None:
            new_path.append(item***REMOVED***
        else:
            # new path after the insert point, back-insert it
            new_path.insert(insert_at, item***REMOVED***
            insert_at += 1

    sys.path[:***REMOVED*** = new_path


if __name__ == 'site':
    __boot(***REMOVED***
    del __boot
