import sys
import unittest

__all__ = ['get_config_vars', 'get_path'***REMOVED***

***REMOVED***
    # Python 2.7 or >=3.2
    from sysconfig import get_config_vars, get_path
except ImportError:
    from distutils.sysconfig import get_config_vars, get_python_lib

    def get_path(name***REMOVED***:
        if name not in ('platlib', 'purelib'***REMOVED***:
            raise ValueError("Name must be purelib or platlib"***REMOVED***
        return get_python_lib(name == 'platlib'***REMOVED***


***REMOVED***
    # Python >=3.2
    from tempfile import TemporaryDirectory
except ImportError:
    import shutil
    import tempfile

    class TemporaryDirectory(object***REMOVED***:
        ***REMOVED***
        Very simple temporary directory context manager.
        Will try to delete afterward, but will also ignore OS and similar
        errors on deletion.
        ***REMOVED***

        def __init__(self***REMOVED***:
            self.name = None  # Handle mkdtemp raising an exception
            self.name = tempfile.mkdtemp(***REMOVED***

        def __enter__(self***REMOVED***:
            return self.name

        def __exit__(self, exctype, excvalue, exctrace***REMOVED***:
            ***REMOVED***
                shutil.rmtree(self.name, True***REMOVED***
            except OSError:  # removal errors are not the only possible
                pass
            self.name = None


unittest_main = unittest.main

_PY31 = (3, 1***REMOVED*** <= sys.version_info[:2***REMOVED*** < (3, 2***REMOVED***
if _PY31:
    # on Python 3.1, translate testRunner==None to TextTestRunner
    # for compatibility with Python 2.6, 2.7, and 3.2+
    def unittest_main(*args, **kwargs***REMOVED***:
        if 'testRunner' in kwargs and kwargs['testRunner'***REMOVED*** is None:
            kwargs['testRunner'***REMOVED*** = unittest.TextTestRunner
        return unittest.main(*args, **kwargs***REMOVED***
