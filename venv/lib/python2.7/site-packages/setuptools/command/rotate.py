from distutils.util import convert_path
from distutils import log
from distutils.errors import DistutilsOptionError
***REMOVED***
import shutil

from setuptools.extern import six

from setuptools import Command


class rotate(Command***REMOVED***:
    ***REMOVED***Delete older distributions***REMOVED***

    description = "delete older distributions, keeping N newest files"
    user_options = [
        ('match=', 'm', "patterns to match (required***REMOVED***"***REMOVED***,
        ('dist-dir=', 'd', "directory where the distributions are"***REMOVED***,
        ('keep=', 'k', "number of matching distributions to keep"***REMOVED***,
    ***REMOVED***

    boolean_options = [***REMOVED***

    def initialize_options(self***REMOVED***:
        self.match = None
        self.dist_dir = None
        self.keep = None

    def finalize_options(self***REMOVED***:
        if self.match is None:
            raise DistutilsOptionError(
                "Must specify one or more (comma-separated***REMOVED*** match patterns "
                "(e.g. '.zip' or '.egg'***REMOVED***"
            ***REMOVED***
        if self.keep is None:
            raise DistutilsOptionError("Must specify number of files to keep"***REMOVED***
        ***REMOVED***
            self.keep = int(self.keep***REMOVED***
        except ValueError:
            raise DistutilsOptionError("--keep must be an integer"***REMOVED***
        if isinstance(self.match, six.string_types***REMOVED***:
            self.match = [
                convert_path(p.strip(***REMOVED******REMOVED*** for p in self.match.split(','***REMOVED***
            ***REMOVED***
        self.set_undefined_options('bdist', ('dist_dir', 'dist_dir'***REMOVED******REMOVED***

    def run(self***REMOVED***:
        self.run_command("egg_info"***REMOVED***
        from glob import glob

        for pattern in self.match:
            pattern = self.distribution.get_name(***REMOVED*** + '*' + pattern
            files = glob(os.path.join(self.dist_dir, pattern***REMOVED******REMOVED***
            files = [(os.path.getmtime(f***REMOVED***, f***REMOVED*** for f in files***REMOVED***
            files.sort(***REMOVED***
            files.reverse(***REMOVED***

            log.info("%d file(s***REMOVED*** matching %s", len(files***REMOVED***, pattern***REMOVED***
            files = files[self.keep:***REMOVED***
            for (t, f***REMOVED*** in files:
                log.info("Deleting %s", f***REMOVED***
                if not self.dry_run:
                    if os.path.isdir(f***REMOVED***:
                        shutil.rmtree(f***REMOVED***
                    else:
                        os.unlink(f***REMOVED***
