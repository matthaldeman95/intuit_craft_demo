from distutils.errors import DistutilsOptionError

from setuptools.extern.six.moves import map

from setuptools.command.setopt import edit_config, option_base, config_file


def shquote(arg***REMOVED***:
    ***REMOVED***Quote an argument for later parsing by shlex.split(***REMOVED******REMOVED***
    for c in '"', "'", "\\", "#":
        if c in arg:
            return repr(arg***REMOVED***
    if arg.split(***REMOVED*** != [arg***REMOVED***:
        return repr(arg***REMOVED***
    return arg


class alias(option_base***REMOVED***:
    ***REMOVED***Define a shortcut that invokes one or more commands***REMOVED***

    description = "define a shortcut to invoke one or more commands"
    command_consumes_arguments = True

    user_options = [
        ('remove', 'r', 'remove (unset***REMOVED*** the alias'***REMOVED***,
    ***REMOVED*** + option_base.user_options

    boolean_options = option_base.boolean_options + ['remove'***REMOVED***

    def initialize_options(self***REMOVED***:
        option_base.initialize_options(self***REMOVED***
        self.args = None
        self.remove = None

    def finalize_options(self***REMOVED***:
        option_base.finalize_options(self***REMOVED***
        if self.remove and len(self.args***REMOVED*** != 1:
            raise DistutilsOptionError(
                "Must specify exactly one argument (the alias name***REMOVED*** when "
                "using --remove"
            ***REMOVED***

    def run(self***REMOVED***:
        aliases = self.distribution.get_option_dict('aliases'***REMOVED***

        if not self.args:
            print("Command Aliases"***REMOVED***
            print("---------------"***REMOVED***
            for alias in aliases:
                print("setup.py alias", format_alias(alias, aliases***REMOVED******REMOVED***
            return

        elif len(self.args***REMOVED*** == 1:
            alias, = self.args
            if self.remove:
                command = None
            elif alias in aliases:
                print("setup.py alias", format_alias(alias, aliases***REMOVED******REMOVED***
                return
            else:
                print("No alias definition found for %r" % alias***REMOVED***
                return
        else:
            alias = self.args[0***REMOVED***
            command = ' '.join(map(shquote, self.args[1:***REMOVED******REMOVED******REMOVED***

        edit_config(self.filename, {'aliases': {alias: command***REMOVED******REMOVED***, self.dry_run***REMOVED***


def format_alias(name, aliases***REMOVED***:
    source, command = aliases[name***REMOVED***
    if source == config_file('global'***REMOVED***:
        source = '--global-config '
    elif source == config_file('user'***REMOVED***:
        source = '--user-config '
    elif source == config_file('local'***REMOVED***:
        source = ''
    else:
        source = '--filename=%r' % source
    return source + name + ' ' + command
