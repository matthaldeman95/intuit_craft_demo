from distutils import log, dir_util
***REMOVED***

from setuptools.extern.six.moves import map

from setuptools import Command
from setuptools.archive_util import unpack_archive
import pkg_resources


class install_egg_info(Command***REMOVED***:
    ***REMOVED***Install an .egg-info directory for the package***REMOVED***

    description = "Install an .egg-info directory for the package"

    user_options = [
        ('install-dir=', 'd', "directory to install to"***REMOVED***,
    ***REMOVED***

    def initialize_options(self***REMOVED***:
        self.install_dir = None

    def finalize_options(self***REMOVED***:
        self.set_undefined_options('install_lib',
                                   ('install_dir', 'install_dir'***REMOVED******REMOVED***
        ei_cmd = self.get_finalized_command("egg_info"***REMOVED***
        basename = pkg_resources.Distribution(
            None, None, ei_cmd.egg_name, ei_cmd.egg_version
        ***REMOVED***.egg_name(***REMOVED*** + '.egg-info'
        self.source = ei_cmd.egg_info
        self.target = os.path.join(self.install_dir, basename***REMOVED***
        self.outputs = [***REMOVED***

    def run(self***REMOVED***:
        self.run_command('egg_info'***REMOVED***
        if os.path.isdir(self.target***REMOVED*** and not os.path.islink(self.target***REMOVED***:
            dir_util.remove_tree(self.target, dry_run=self.dry_run***REMOVED***
        elif os.path.exists(self.target***REMOVED***:
            self.execute(os.unlink, (self.target,***REMOVED***, "Removing " + self.target***REMOVED***
        if not self.dry_run:
            pkg_resources.ensure_directory(self.target***REMOVED***
        self.execute(
            self.copytree, (***REMOVED***, "Copying %s to %s" % (self.source, self.target***REMOVED***
        ***REMOVED***
        self.install_namespaces(***REMOVED***

    def get_outputs(self***REMOVED***:
        return self.outputs

    def copytree(self***REMOVED***:
        # Copy the .egg-info tree to site-packages
        def skimmer(src, dst***REMOVED***:
            # filter out source-control directories; note that 'src' is always
            # a '/'-separated path, regardless of platform.  'dst' is a
            # platform-specific path.
            for skip in '.svn/', 'CVS/':
                if src.startswith(skip***REMOVED*** or '/' + skip in src:
                    return None
            self.outputs.append(dst***REMOVED***
            log.debug("Copying %s to %s", src, dst***REMOVED***
            return dst

        unpack_archive(self.source, self.target, skimmer***REMOVED***

    def install_namespaces(self***REMOVED***:
        nsp = self._get_all_ns_packages(***REMOVED***
        if not nsp:
            return
        filename, ext = os.path.splitext(self.target***REMOVED***
        filename += '-nspkg.pth'
        self.outputs.append(filename***REMOVED***
        log.info("Installing %s", filename***REMOVED***
        lines = map(self._gen_nspkg_line, nsp***REMOVED***

        if self.dry_run:
            # always generate the lines, even in dry run
            list(lines***REMOVED***
            return

        with open(filename, 'wt'***REMOVED*** as f:
            f.writelines(lines***REMOVED***

    _nspkg_tmpl = (
        "import sys, types, os",
        "pep420 = sys.version_info > (3, 3***REMOVED***",
        "p = os.path.join(sys._getframe(1***REMOVED***.f_locals['sitedir'***REMOVED***, *%(pth***REMOVED***r***REMOVED***",
        "ie = os.path.exists(os.path.join(p,'__init__.py'***REMOVED******REMOVED***",
        "m = not ie and not pep420 and "
            "sys.modules.setdefault(%(pkg***REMOVED***r, types.ModuleType(%(pkg***REMOVED***r***REMOVED******REMOVED***",
        "mp = (m or [***REMOVED******REMOVED*** and m.__dict__.setdefault('__path__',[***REMOVED******REMOVED***",
        "(p not in mp***REMOVED*** and mp.append(p***REMOVED***",
    ***REMOVED***
    "lines for the namespace installer"

    _nspkg_tmpl_multi = (
        'm and setattr(sys.modules[%(parent***REMOVED***r***REMOVED***, %(child***REMOVED***r, m***REMOVED***',
    ***REMOVED***
    "additional line(s***REMOVED*** when a parent package is indicated"

    @classmethod
    def _gen_nspkg_line(cls, pkg***REMOVED***:
        # ensure pkg is not a unicode string under Python 2.7
        pkg = str(pkg***REMOVED***
        pth = tuple(pkg.split('.'***REMOVED******REMOVED***
        tmpl_lines = cls._nspkg_tmpl
        parent, sep, child = pkg.rpartition('.'***REMOVED***
        if parent:
            tmpl_lines += cls._nspkg_tmpl_multi
        return ';'.join(tmpl_lines***REMOVED*** % locals(***REMOVED*** + '\n'

    def _get_all_ns_packages(self***REMOVED***:
        ***REMOVED***Return sorted list of all package namespaces***REMOVED***
        nsp = set(***REMOVED***
        for pkg in self.distribution.namespace_packages or [***REMOVED***:
            pkg = pkg.split('.'***REMOVED***
            while pkg:
                nsp.add('.'.join(pkg***REMOVED******REMOVED***
                pkg.pop(***REMOVED***
        return sorted(nsp***REMOVED***
