from distutils.util import convert_path
from distutils import log
from distutils.errors import DistutilsOptionError
import distutils
***REMOVED***

from setuptools.extern.six.moves import configparser

from setuptools import Command

__all__ = ['config_file', 'edit_config', 'option_base', 'setopt'***REMOVED***


def config_file(kind="local"***REMOVED***:
    ***REMOVED***Get the filename of the distutils, local, global, or per-user config

    `kind` must be one of "local", "global", or "user"
    ***REMOVED***
    if kind == 'local':
        return 'setup.cfg'
    if kind == 'global':
        return os.path.join(
            os.path.dirname(distutils.__file__***REMOVED***, 'distutils.cfg'
        ***REMOVED***
    if kind == 'user':
        dot = os.name == 'posix' and '.' or ''
        return os.path.expanduser(convert_path("~/%spydistutils.cfg" % dot***REMOVED******REMOVED***
    raise ValueError(
        "config_file(***REMOVED*** type must be 'local', 'global', or 'user'", kind
    ***REMOVED***


def edit_config(filename, settings, dry_run=False***REMOVED***:
    ***REMOVED***Edit a configuration file to include `settings`

    `settings` is a dictionary of dictionaries or ``None`` values, keyed by
    command/section name.  A ``None`` value means to delete the entire section,
    while a dictionary lists settings to be changed or deleted in that section.
    A setting of ``None`` means to delete that setting.
    ***REMOVED***
    log.debug("Reading configuration from %s", filename***REMOVED***
    opts = configparser.RawConfigParser(***REMOVED***
    opts.read([filename***REMOVED******REMOVED***
    for section, options in settings.items(***REMOVED***:
        if options is None:
            log.info("Deleting section [%s***REMOVED*** from %s", section, filename***REMOVED***
            opts.remove_section(section***REMOVED***
        else:
            if not opts.has_section(section***REMOVED***:
                log.debug("Adding new section [%s***REMOVED*** to %s", section, filename***REMOVED***
                opts.add_section(section***REMOVED***
            for option, value in options.items(***REMOVED***:
                if value is None:
                    log.debug(
                        "Deleting %s.%s from %s",
                        section, option, filename
                    ***REMOVED***
                    opts.remove_option(section, option***REMOVED***
                    if not opts.options(section***REMOVED***:
                        log.info("Deleting empty [%s***REMOVED*** section from %s",
                                 section, filename***REMOVED***
                        opts.remove_section(section***REMOVED***
                else:
                    log.debug(
                        "Setting %s.%s to %r in %s",
                        section, option, value, filename
                    ***REMOVED***
                    opts.set(section, option, value***REMOVED***

    log.info("Writing %s", filename***REMOVED***
    if not dry_run:
        with open(filename, 'w'***REMOVED*** as f:
            opts.write(f***REMOVED***


class option_base(Command***REMOVED***:
    ***REMOVED***Abstract base class for commands that mess with config files***REMOVED***

    user_options = [
        ('global-config', 'g',
         "save options to the site-wide distutils.cfg file"***REMOVED***,
        ('user-config', 'u',
         "save options to the current user's pydistutils.cfg file"***REMOVED***,
        ('filename=', 'f',
         "configuration file to use (default=setup.cfg***REMOVED***"***REMOVED***,
    ***REMOVED***

    boolean_options = [
        'global-config', 'user-config',
    ***REMOVED***

    def initialize_options(self***REMOVED***:
        self.global_config = None
        self.user_config = None
        self.filename = None

    def finalize_options(self***REMOVED***:
        filenames = [***REMOVED***
        if self.global_config:
            filenames.append(config_file('global'***REMOVED******REMOVED***
        if self.user_config:
            filenames.append(config_file('user'***REMOVED******REMOVED***
        if self.filename is not None:
            filenames.append(self.filename***REMOVED***
        if not filenames:
            filenames.append(config_file('local'***REMOVED******REMOVED***
        if len(filenames***REMOVED*** > 1:
            raise DistutilsOptionError(
                "Must specify only one configuration file option",
                filenames
            ***REMOVED***
        self.filename, = filenames


class setopt(option_base***REMOVED***:
    ***REMOVED***Save command-line options to a file***REMOVED***

    description = "set an option in setup.cfg or another config file"

    user_options = [
        ('command=', 'c', 'command to set an option for'***REMOVED***,
        ('option=', 'o', 'option to set'***REMOVED***,
        ('set-value=', 's', 'value of the option'***REMOVED***,
        ('remove', 'r', 'remove (unset***REMOVED*** the value'***REMOVED***,
    ***REMOVED*** + option_base.user_options

    boolean_options = option_base.boolean_options + ['remove'***REMOVED***

    def initialize_options(self***REMOVED***:
        option_base.initialize_options(self***REMOVED***
        self.command = None
        self.option = None
        self.set_value = None
        self.remove = None

    def finalize_options(self***REMOVED***:
        option_base.finalize_options(self***REMOVED***
        if self.command is None or self.option is None:
            raise DistutilsOptionError("Must specify --command *and* --option"***REMOVED***
        if self.set_value is None and not self.remove:
            raise DistutilsOptionError("Must specify --set-value or --remove"***REMOVED***

    def run(self***REMOVED***:
        edit_config(
            self.filename, {
                self.command: {self.option.replace('-', '_'***REMOVED***: self.set_value***REMOVED***
    ***REMOVED***
            self.dry_run
        ***REMOVED***
