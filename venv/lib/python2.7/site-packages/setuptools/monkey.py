***REMOVED***
Monkey patching of distutils.
***REMOVED***

import sys
import distutils.filelist
import platform
import types
import functools

from .py26compat import import_module
from setuptools.extern import six

import setuptools

__all__ = [***REMOVED***
***REMOVED***
Everything is private. Contact the project team
if you think you need this functionality.
***REMOVED***


def get_unpatched(item***REMOVED***:
    lookup = (
        get_unpatched_class if isinstance(item, six.class_types***REMOVED*** else
        get_unpatched_function if isinstance(item, types.FunctionType***REMOVED*** else
        lambda item: None
    ***REMOVED***
    return lookup(item***REMOVED***


def get_unpatched_class(cls***REMOVED***:
    ***REMOVED***Protect against re-patching the distutils if reloaded

    Also ensures that no other distutils extension monkeypatched the distutils
    first.
    ***REMOVED***
    while cls.__module__.startswith('setuptools'***REMOVED***:
        cls, = cls.__bases__
    if not cls.__module__.startswith('distutils'***REMOVED***:
        msg = "distutils has already been patched by %r" % cls
        raise AssertionError(msg***REMOVED***
    return cls


def patch_all(***REMOVED***:
    # we can't patch distutils.cmd, alas
    distutils.core.Command = setuptools.Command

    has_issue_12885 = (
        sys.version_info < (3, 4, 6***REMOVED***
        or
        (3, 5***REMOVED*** < sys.version_info <= (3, 5, 3***REMOVED***
        or
        (3, 6***REMOVED*** < sys.version_info
    ***REMOVED***

    if has_issue_12885:
        # fix findall bug in distutils (http://bugs.python.org/issue12885***REMOVED***
        distutils.filelist.findall = setuptools.findall

    needs_warehouse = (
        sys.version_info < (2, 7, 13***REMOVED***
        or
        (3, 0***REMOVED*** < sys.version_info < (3, 3, 7***REMOVED***
        or
        (3, 4***REMOVED*** < sys.version_info < (3, 4, 6***REMOVED***
        or
        (3, 5***REMOVED*** < sys.version_info <= (3, 5, 3***REMOVED***
        or
        (3, 6***REMOVED*** < sys.version_info
    ***REMOVED***

    if needs_warehouse:
        warehouse = 'https://upload.pypi.org/legacy/'
        distutils.config.PyPIRCCommand.DEFAULT_REPOSITORY = warehouse

    _patch_distribution_metadata_write_pkg_file(***REMOVED***
    _patch_distribution_metadata_write_pkg_info(***REMOVED***

    # Install Distribution throughout the distutils
    for module in distutils.dist, distutils.core, distutils.cmd:
        module.Distribution = setuptools.dist.Distribution

    # Install the patched Extension
    distutils.core.Extension = setuptools.extension.Extension
    distutils.extension.Extension = setuptools.extension.Extension
    if 'distutils.command.build_ext' in sys.modules:
        sys.modules['distutils.command.build_ext'***REMOVED***.Extension = (
            setuptools.extension.Extension
        ***REMOVED***

    patch_for_msvc_specialized_compiler(***REMOVED***


def _patch_distribution_metadata_write_pkg_file(***REMOVED***:
    ***REMOVED***Patch write_pkg_file to also write Requires-Python/Requires-External***REMOVED***
    distutils.dist.DistributionMetadata.write_pkg_file = (
        setuptools.dist.write_pkg_file
    ***REMOVED***


def _patch_distribution_metadata_write_pkg_info(***REMOVED***:
    ***REMOVED***
    Workaround issue #197 - Python 3 prior to 3.2.2 uses an environment-local
    encoding to save the pkg_info. Monkey-patch its write_pkg_info method to
    correct this undesirable behavior.
    ***REMOVED***
    environment_local = (3,***REMOVED*** <= sys.version_info[:3***REMOVED*** < (3, 2, 2***REMOVED***
    if not environment_local:
        return

    distutils.dist.DistributionMetadata.write_pkg_info = (
        setuptools.dist.write_pkg_info
    ***REMOVED***


def patch_func(replacement, target_mod, func_name***REMOVED***:
    ***REMOVED***
    Patch func_name in target_mod with replacement

    Important - original must be resolved by name to avoid
    patching an already patched function.
    ***REMOVED***
    original = getattr(target_mod, func_name***REMOVED***

    # set the 'unpatched' attribute on the replacement to
    # point to the original.
    vars(replacement***REMOVED***.setdefault('unpatched', original***REMOVED***

    # replace the function in the original module
    setattr(target_mod, func_name, replacement***REMOVED***


def get_unpatched_function(candidate***REMOVED***:
    return getattr(candidate, 'unpatched'***REMOVED***


def patch_for_msvc_specialized_compiler(***REMOVED***:
    ***REMOVED***
    Patch functions in distutils to use standalone Microsoft Visual C++
    compilers.
    ***REMOVED***
    # import late to avoid circular imports on Python < 3.5
    msvc = import_module('setuptools.msvc'***REMOVED***

    if platform.system(***REMOVED*** != 'Windows':
        # Compilers only availables on Microsoft Windows
        return

    def patch_params(mod_name, func_name***REMOVED***:
        ***REMOVED***
        Prepare the parameters for patch_func to patch indicated function.
        ***REMOVED***
        repl_prefix = 'msvc9_' if 'msvc9' in mod_name else 'msvc14_'
        repl_name = repl_prefix + func_name.lstrip('_'***REMOVED***
        repl = getattr(msvc, repl_name***REMOVED***
        mod = import_module(mod_name***REMOVED***
        if not hasattr(mod, func_name***REMOVED***:
            raise ImportError(func_name***REMOVED***
        return repl, mod, func_name

    # Python 2.7 to 3.4
    msvc9 = functools.partial(patch_params, 'distutils.msvc9compiler'***REMOVED***

    # Python 3.5+
    msvc14 = functools.partial(patch_params, 'distutils._msvccompiler'***REMOVED***

    ***REMOVED***
        # Patch distutils.msvc9compiler
        patch_func(*msvc9('find_vcvarsall'***REMOVED******REMOVED***
        patch_func(*msvc9('query_vcvarsall'***REMOVED******REMOVED***
    except ImportError:
        pass

    ***REMOVED***
        # Patch distutils._msvccompiler._get_vc_env
        patch_func(*msvc14('_get_vc_env'***REMOVED******REMOVED***
    except ImportError:
        pass

    ***REMOVED***
        # Patch distutils._msvccompiler.gen_lib_options for Numpy
        patch_func(*msvc14('gen_lib_options'***REMOVED******REMOVED***
    except ImportError:
        pass
