import sys


class VendorImporter:
    ***REMOVED***
    A PEP 302 meta path importer for finding optionally-vendored
    or otherwise naturally-installed packages from root_name.
    ***REMOVED***

    def __init__(self, root_name, vendored_names=(***REMOVED***, vendor_pkg=None***REMOVED***:
        self.root_name = root_name
        self.vendored_names = set(vendored_names***REMOVED***
        self.vendor_pkg = vendor_pkg or root_name.replace('extern', '_vendor'***REMOVED***

    @property
    def search_path(self***REMOVED***:
        ***REMOVED***
        Search first the vendor package then as a natural package.
        ***REMOVED***
        yield self.vendor_pkg + '.'
        yield ''

    def find_module(self, fullname, path=None***REMOVED***:
        ***REMOVED***
        Return self when fullname starts with root_name and the
        target module is one vendored through this importer.
        ***REMOVED***
        root, base, target = fullname.partition(self.root_name + '.'***REMOVED***
        if root:
            return
        if not any(map(target.startswith, self.vendored_names***REMOVED******REMOVED***:
            return
        return self

    def load_module(self, fullname***REMOVED***:
        ***REMOVED***
        Iterate over the search path to locate and load fullname.
        ***REMOVED***
        root, base, target = fullname.partition(self.root_name + '.'***REMOVED***
        for prefix in self.search_path:
            ***REMOVED***
                extant = prefix + target
                __import__(extant***REMOVED***
                mod = sys.modules[extant***REMOVED***
                sys.modules[fullname***REMOVED*** = mod
                # mysterious hack:
                # Remove the reference to the extant package/module
                # on later Python versions to cause relative imports
                # in the vendor package to resolve the same modules
                # as those going through this importer.
                if sys.version_info > (3, 3***REMOVED***:
                    del sys.modules[extant***REMOVED***
                return mod
            except ImportError:
                pass
        else:
            raise ImportError(
                "The '{target***REMOVED***' package is required; "
                "normally this is bundled with this package so if you get "
                "this warning, consult the packager of your "
                "distribution.".format(**locals(***REMOVED******REMOVED***
            ***REMOVED***

    def install(self***REMOVED***:
        ***REMOVED***
        Install this importer into sys.meta_path if not already present.
        ***REMOVED***
        if self not in sys.meta_path:
            sys.meta_path.append(self***REMOVED***


names = 'packaging', 'pyparsing', 'six', 'appdirs'
VendorImporter(__name__, names***REMOVED***.install(***REMOVED***
