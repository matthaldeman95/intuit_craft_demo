# This file is dual licensed under the terms of the Apache License, Version
# 2.0, and the BSD License. See the LICENSE file in the root of this repository
# for complete details.
from __future__ import absolute_import, division, print_function

import string
import re

from pkg_resources.extern.pyparsing import stringStart, stringEnd, originalTextFor, ParseException
from pkg_resources.extern.pyparsing import ZeroOrMore, Word, Optional, Regex, Combine
from pkg_resources.extern.pyparsing import Literal as L  # noqa
from pkg_resources.extern.six.moves.urllib import parse as urlparse

from .markers import MARKER_EXPR, Marker
from .specifiers import LegacySpecifier, Specifier, SpecifierSet


class InvalidRequirement(ValueError***REMOVED***:
    ***REMOVED***
    An invalid requirement was found, users should refer to PEP 508.
    ***REMOVED***


ALPHANUM = Word(string.ascii_letters + string.digits***REMOVED***

LBRACKET = L("["***REMOVED***.suppress(***REMOVED***
RBRACKET = L("***REMOVED***"***REMOVED***.suppress(***REMOVED***
LPAREN = L("("***REMOVED***.suppress(***REMOVED***
RPAREN = L("***REMOVED***"***REMOVED***.suppress(***REMOVED***
COMMA = L(","***REMOVED***.suppress(***REMOVED***
SEMICOLON = L(";"***REMOVED***.suppress(***REMOVED***
AT = L("@"***REMOVED***.suppress(***REMOVED***

PUNCTUATION = Word("-_."***REMOVED***
IDENTIFIER_END = ALPHANUM | (ZeroOrMore(PUNCTUATION***REMOVED*** + ALPHANUM***REMOVED***
IDENTIFIER = Combine(ALPHANUM + ZeroOrMore(IDENTIFIER_END***REMOVED******REMOVED***

NAME = IDENTIFIER("name"***REMOVED***
EXTRA = IDENTIFIER

URI = Regex(r'[^ ***REMOVED***+'***REMOVED***("url"***REMOVED***
URL = (AT + URI***REMOVED***

EXTRAS_LIST = EXTRA + ZeroOrMore(COMMA + EXTRA***REMOVED***
EXTRAS = (LBRACKET + Optional(EXTRAS_LIST***REMOVED*** + RBRACKET***REMOVED***("extras"***REMOVED***

VERSION_PEP440 = Regex(Specifier._regex_str, re.VERBOSE | re.IGNORECASE***REMOVED***
VERSION_LEGACY = Regex(LegacySpecifier._regex_str, re.VERBOSE | re.IGNORECASE***REMOVED***

VERSION_ONE = VERSION_PEP440 ^ VERSION_LEGACY
VERSION_MANY = Combine(VERSION_ONE + ZeroOrMore(COMMA + VERSION_ONE***REMOVED***,
                       joinString=",", adjacent=False***REMOVED***("_raw_spec"***REMOVED***
_VERSION_SPEC = Optional(((LPAREN + VERSION_MANY + RPAREN***REMOVED*** | VERSION_MANY***REMOVED******REMOVED***
_VERSION_SPEC.setParseAction(lambda s, l, t: t._raw_spec or ''***REMOVED***

VERSION_SPEC = originalTextFor(_VERSION_SPEC***REMOVED***("specifier"***REMOVED***
VERSION_SPEC.setParseAction(lambda s, l, t: t[1***REMOVED******REMOVED***

MARKER_EXPR = originalTextFor(MARKER_EXPR(***REMOVED******REMOVED***("marker"***REMOVED***
MARKER_EXPR.setParseAction(
    lambda s, l, t: Marker(s[t._original_start:t._original_end***REMOVED******REMOVED***
***REMOVED***
MARKER_SEPERATOR = SEMICOLON
MARKER = MARKER_SEPERATOR + MARKER_EXPR

VERSION_AND_MARKER = VERSION_SPEC + Optional(MARKER***REMOVED***
URL_AND_MARKER = URL + Optional(MARKER***REMOVED***

NAMED_REQUIREMENT = \
    NAME + Optional(EXTRAS***REMOVED*** + (URL_AND_MARKER | VERSION_AND_MARKER***REMOVED***

REQUIREMENT = stringStart + NAMED_REQUIREMENT + stringEnd


class Requirement(object***REMOVED***:
    ***REMOVED***Parse a requirement.

    Parse a given requirement string into its parts, such as name, specifier,
    URL, and extras. Raises InvalidRequirement on a badly-formed requirement
    string.
    ***REMOVED***

    # TODO: Can we test whether something is contained within a requirement?
    #       If so how do we do that? Do we need to test against the _name_ of
    #       the thing as well as the version? What about the markers?
    # TODO: Can we normalize the name and extra name?

    def __init__(self, requirement_string***REMOVED***:
        ***REMOVED***
            req = REQUIREMENT.parseString(requirement_string***REMOVED***
        except ParseException as e:
            raise InvalidRequirement(
                "Invalid requirement, parse error at \"{0!r***REMOVED***\"".format(
                    requirement_string[e.loc:e.loc + 8***REMOVED******REMOVED******REMOVED***

        self.name = req.name
        if req.url:
            parsed_url = urlparse.urlparse(req.url***REMOVED***
            if not (parsed_url.scheme and parsed_url.netloc***REMOVED*** or (
                    not parsed_url.scheme and not parsed_url.netloc***REMOVED***:
                raise InvalidRequirement("Invalid URL given"***REMOVED***
            self.url = req.url
        else:
            self.url = None
        self.extras = set(req.extras.asList(***REMOVED*** if req.extras else [***REMOVED******REMOVED***
        self.specifier = SpecifierSet(req.specifier***REMOVED***
        self.marker = req.marker if req.marker else None

    def __str__(self***REMOVED***:
        parts = [self.name***REMOVED***

        if self.extras:
            parts.append("[{0***REMOVED******REMOVED***".format(",".join(sorted(self.extras***REMOVED******REMOVED******REMOVED******REMOVED***

        if self.specifier:
            parts.append(str(self.specifier***REMOVED******REMOVED***

        if self.url:
            parts.append("@ {0***REMOVED***".format(self.url***REMOVED******REMOVED***

        if self.marker:
            parts.append("; {0***REMOVED***".format(self.marker***REMOVED******REMOVED***

        return "".join(parts***REMOVED***

    def __repr__(self***REMOVED***:
        return "<Requirement({0!r***REMOVED******REMOVED***>".format(str(self***REMOVED******REMOVED***
