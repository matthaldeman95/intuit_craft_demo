# -*- coding: utf-8 -*-

***REMOVED***

***REMOVED***
    import urlparse
except ImportError:
    import urllib.parse as urlparse


# Register database schemes in URLs.
urlparse.uses_netloc.append('postgres'***REMOVED***
urlparse.uses_netloc.append('postgresql'***REMOVED***
urlparse.uses_netloc.append('pgsql'***REMOVED***
urlparse.uses_netloc.append('postgis'***REMOVED***
urlparse.uses_netloc.append('mysql'***REMOVED***
urlparse.uses_netloc.append('mysql2'***REMOVED***
urlparse.uses_netloc.append('mysqlgis'***REMOVED***
urlparse.uses_netloc.append('mysql-connector'***REMOVED***
urlparse.uses_netloc.append('spatialite'***REMOVED***
urlparse.uses_netloc.append('sqlite'***REMOVED***
urlparse.uses_netloc.append('oracle'***REMOVED***
urlparse.uses_netloc.append('oraclegis'***REMOVED***

DEFAULT_ENV = 'DATABASE_URL'

SCHEMES = {
    'postgres': 'django.db.backends.postgresql_psycopg2',
    'postgresql': 'django.db.backends.postgresql_psycopg2',
    'pgsql': 'django.db.backends.postgresql_psycopg2',
    'postgis': 'django.contrib.gis.db.backends.postgis',
    'mysql': 'django.db.backends.mysql',
    'mysql2': 'django.db.backends.mysql',
    'mysqlgis': 'django.contrib.gis.db.backends.mysql',
    'mysql-connector': 'mysql.connector.django',
    'spatialite': 'django.contrib.gis.db.backends.spatialite',
    'sqlite': 'django.db.backends.sqlite3',
    'oracle': 'django.db.backends.oracle',
    'oraclegis': 'django.contrib.gis.db.backends.oracle',
***REMOVED***


def config(env=DEFAULT_ENV, default=None, engine=None, conn_max_age=0***REMOVED***:
    ***REMOVED***Returns configured DATABASE dictionary from DATABASE_URL.***REMOVED***

    config = {***REMOVED***

    s = os.environ.get(env, default***REMOVED***

    if s:
        config = parse(s, engine, conn_max_age***REMOVED***

    return config


def parse(url, engine=None, conn_max_age=0***REMOVED***:
    ***REMOVED***Parses a database URL.***REMOVED***

    if url == 'sqlite://:memory:':
        # this is a special case, because if we pass this URL into
        # urlparse, urlparse will choke trying to interpret "memory"
        # as a port number
        return {
            'ENGINE': SCHEMES['sqlite'***REMOVED***,
            'NAME': ':memory:'
    ***REMOVED***
        # note: no other settings are required for sqlite

    # otherwise parse the url as normal
    config = {***REMOVED***

    url = urlparse.urlparse(url***REMOVED***

    # Split query strings from path.
    path = url.path[1:***REMOVED***
    if '?' in path and not url.query:
        path, query = path.split('?', 2***REMOVED***
    else:
        path, query = path, url.query
    query = urlparse.parse_qs(query***REMOVED***

    # If we are using sqlite and we have no path, then assume we
    # want an in-memory database (this is the behaviour of sqlalchemy***REMOVED***
    if url.scheme == 'sqlite' and path == '':
        path = ':memory:'

    # Handle postgres percent-encoded paths.
    hostname = url.hostname or ''
    if '%2f' in hostname.lower(***REMOVED***:
        hostname = hostname.replace('%2f', '/'***REMOVED***.replace('%2F', '/'***REMOVED***

    # Update with environment configuration.
    config.update({
        'NAME': urlparse.unquote(path or ''***REMOVED***,
        'USER': urlparse.unquote(url.username or ''***REMOVED***,
        'PASSWORD': urlparse.unquote(url.password or ''***REMOVED***,
        'HOST': hostname,
        'PORT': url.port or '',
        'CONN_MAX_AGE': conn_max_age,
***REMOVED******REMOVED***

    # Lookup specified engine.
    engine = SCHEMES[url.scheme***REMOVED*** if engine is None else engine

    # Pass the query string into OPTIONS.
    options = {***REMOVED***
    for key, values in query.items(***REMOVED***:
        if url.scheme == 'mysql' and key == 'ssl-ca':
            options['ssl'***REMOVED*** = {'ca': values[-1***REMOVED******REMOVED***
            continue

        options[key***REMOVED*** = values[-1***REMOVED***

    # Support for Postgres Schema URLs
    if 'currentSchema' in options and engine == 'django.db.backends.postgresql_psycopg2':
        options['options'***REMOVED*** = '-c search_path={0***REMOVED***'.format(options['currentSchema'***REMOVED******REMOVED***

    if options:
        config['OPTIONS'***REMOVED*** = options

    if engine:
        config['ENGINE'***REMOVED*** = engine

    return config
