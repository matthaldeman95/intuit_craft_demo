***REMOVED***
A Simple server used to show mpld3 images.
***REMOVED***
import sys
import threading
import webbrowser
import socket
import itertools
import random

IPYTHON_WARNING = ***REMOVED***
Note: if you're in the IPython notebook, mpld3.show(***REMOVED*** is not the best command
      to use. Consider using mpld3.display(***REMOVED***, or mpld3.enable_notebook(***REMOVED***.
      See more information at http://mpld3.github.io/quickstart.html.

You must interrupt the kernel to end this command
***REMOVED***

***REMOVED***
    # Python 2.x
    import BaseHTTPServer as server
except ImportError:
    # Python 3.x
    from http import server


def generate_handler(html, files=None***REMOVED***:
    if files is None:
        files = {***REMOVED***

    class MyHandler(server.BaseHTTPRequestHandler***REMOVED***:
        def do_GET(self***REMOVED***:
            ***REMOVED***Respond to a GET request.***REMOVED***
            if self.path == '/':
                self.send_response(200***REMOVED***
                self.send_header("Content-type", "text/html"***REMOVED***
                self.end_headers(***REMOVED***
                self.wfile.write("<html><head>"
                                 "<title>mpld3 plot</title>"
                                 "</head><body>\n"***REMOVED***
                self.wfile.write(html***REMOVED***
                self.wfile.write("</body></html>"***REMOVED***
            elif self.path in files:
                content_type, content = files[self.path***REMOVED***
                self.send_response(200***REMOVED***
                self.send_header("Content-type", content_type***REMOVED***
                self.end_headers(***REMOVED***
                self.wfile.write(content***REMOVED***
            else:
                self.send_error(404***REMOVED***

    return MyHandler


def find_open_port(ip, port, n=50***REMOVED***:
    ***REMOVED***Find an open port near the specified port***REMOVED***
    ports = itertools.chain((port + i for i in range(n***REMOVED******REMOVED***,
                            (port + random.randint(-2 * n, 2 * n***REMOVED******REMOVED******REMOVED***

    for port in ports:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM***REMOVED***
        result = s.connect_ex((ip, port***REMOVED******REMOVED***
        s.close(***REMOVED***
        if result != 0:
            return port
    raise ValueError("no open ports found"***REMOVED***


def serve_and_open(html, ip='127.0.0.1', port=8888, n_retries=50, files=None,
                   ipython_warning=True***REMOVED***:
    ***REMOVED***Start a server serving the given HTML, and open a browser

    Parameters
    ----------
    html : string
        HTML to serve
    ip : string (default = '127.0.0.1'***REMOVED***
        ip address at which the HTML will be served.
    port : int (default = 8888***REMOVED***
        the port at which to serve the HTML
    n_retries : int (default = 50***REMOVED***
        the number of nearby ports to search if the specified port is in use.
    files : dictionary (optional***REMOVED***
        dictionary of extra content to serve
    ipython_warning : bool (optional***REMOVED***
        if True (default***REMOVED***, then print a warning if this is used within IPython
    ***REMOVED***
    port = find_open_port(ip, port, n_retries***REMOVED***
    Handler = generate_handler(html, files***REMOVED***
    srvr = server.HTTPServer((ip, port***REMOVED***, Handler***REMOVED***

    if ipython_warning:
        ***REMOVED***
            __IPYTHON__
        ***REMOVED***
            pass
        else:
            print(IPYTHON_WARNING***REMOVED***

    # Start the server
    print("Serving to http://{0***REMOVED***:{1***REMOVED***/    [Ctrl-C to exit***REMOVED***".format(ip, port***REMOVED******REMOVED***
    sys.stdout.flush(***REMOVED***

    # Use a thread to open a web browser pointing to the server
    b = lambda: webbrowser.open('http://{0***REMOVED***:{1***REMOVED***'.format(ip, port***REMOVED******REMOVED***
    threading.Thread(target=b***REMOVED***.start(***REMOVED***

    ***REMOVED***
        srvr.serve_forever(***REMOVED***
    except (KeyboardInterrupt, SystemExit***REMOVED***:
        print("\nstopping Server..."***REMOVED***

    srvr.server_close(***REMOVED***
