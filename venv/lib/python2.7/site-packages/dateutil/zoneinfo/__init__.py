# -*- coding: utf-8 -*-
import logging
***REMOVED***
import warnings
import tempfile
import shutil
import json

from tarfile import TarFile
from pkgutil import get_data
from io import BytesIO
from contextlib import closing

from dateutil.tz import tzfile

__all__ = ["gettz", "gettz_db_metadata", "rebuild"***REMOVED***

ZONEFILENAME = "dateutil-zoneinfo.tar.gz"
METADATA_FN = 'METADATA'

# python2.6 compatability. Note that TarFile.__exit__ != TarFile.close, but
# it's close enough for python2.6
tar_open = TarFile.open
if not hasattr(TarFile, '__exit__'***REMOVED***:
    def tar_open(*args, **kwargs***REMOVED***:
        return closing(TarFile.open(*args, **kwargs***REMOVED******REMOVED***


class tzfile(tzfile***REMOVED***:
    def __reduce__(self***REMOVED***:
        return (gettz, (self._filename,***REMOVED******REMOVED***


def getzoneinfofile_stream(***REMOVED***:
    ***REMOVED***
        return BytesIO(get_data(__name__, ZONEFILENAME***REMOVED******REMOVED***
    except IOError as e:  # TODO  switch to FileNotFoundError?
        warnings.warn("I/O error({0***REMOVED******REMOVED***: {1***REMOVED***".format(e.errno, e.strerror***REMOVED******REMOVED***
        return None


class ZoneInfoFile(object***REMOVED***:
    def __init__(self, zonefile_stream=None***REMOVED***:
        if zonefile_stream is not None:
            with tar_open(fileobj=zonefile_stream, mode='r'***REMOVED*** as tf:
                # dict comprehension does not work on python2.6
                # TODO: get back to the nicer syntax when we ditch python2.6
                # self.zones = {zf.name: tzfile(tf.extractfile(zf***REMOVED***,
                #               filename = zf.name***REMOVED***
                #              for zf in tf.getmembers(***REMOVED*** if zf.isfile(***REMOVED******REMOVED***
                self.zones = dict((zf.name, tzfile(tf.extractfile(zf***REMOVED***,
                                                   filename=zf.name***REMOVED******REMOVED***
                                  for zf in tf.getmembers(***REMOVED***
                                  if zf.isfile(***REMOVED*** and zf.name != METADATA_FN***REMOVED***
                # deal with links: They'll point to their parent object. Less
                # waste of memory
                # links = {zl.name: self.zones[zl.linkname***REMOVED***
                #        for zl in tf.getmembers(***REMOVED*** if zl.islnk(***REMOVED*** or zl.issym(***REMOVED******REMOVED***
                links = dict((zl.name, self.zones[zl.linkname***REMOVED******REMOVED***
                             for zl in tf.getmembers(***REMOVED*** if
                             zl.islnk(***REMOVED*** or zl.issym(***REMOVED******REMOVED***
                self.zones.update(links***REMOVED***
                ***REMOVED***
                    metadata_json = tf.extractfile(tf.getmember(METADATA_FN***REMOVED******REMOVED***
                    metadata_str = metadata_json.read(***REMOVED***.decode('UTF-8'***REMOVED***
                    self.metadata = json.loads(metadata_str***REMOVED***
                except KeyError:
                    # no metadata in tar file
                    self.metadata = None
        else:
            self.zones = dict(***REMOVED***
            self.metadata = None


# The current API has gettz as a module function, although in fact it taps into
# a stateful class. So as a workaround for now, without changing the API, we
# will create a new "global" class instance the first time a user requests a
# timezone. Ugly, but adheres to the api.
#
# TODO: deprecate this.
_CLASS_ZONE_INSTANCE = list(***REMOVED***


def gettz(name***REMOVED***:
    if len(_CLASS_ZONE_INSTANCE***REMOVED*** == 0:
        _CLASS_ZONE_INSTANCE.append(ZoneInfoFile(getzoneinfofile_stream(***REMOVED******REMOVED******REMOVED***
    return _CLASS_ZONE_INSTANCE[0***REMOVED***.zones.get(name***REMOVED***


def gettz_db_metadata(***REMOVED***:
    ***REMOVED*** Get the zonefile metadata

    See `zonefile_metadata`_

    :returns: A dictionary with the database metadata
    ***REMOVED***
    if len(_CLASS_ZONE_INSTANCE***REMOVED*** == 0:
        _CLASS_ZONE_INSTANCE.append(ZoneInfoFile(getzoneinfofile_stream(***REMOVED******REMOVED******REMOVED***
    return _CLASS_ZONE_INSTANCE[0***REMOVED***.metadata


