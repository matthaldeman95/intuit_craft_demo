# This code was originally contributed by Jeffrey Harris.
import datetime
import struct

from six.moves import winreg
from six import text_type

***REMOVED***
    import ctypes
    from ctypes import wintypes
except ValueError:
    # ValueError is raised on non-Windows systems for some horrible reason.
    raise ImportError("Running tzwin on non-Windows system"***REMOVED***

from ._common import tzname_in_python2

__all__ = ["tzwin", "tzwinlocal", "tzres"***REMOVED***

ONEWEEK = datetime.timedelta(7***REMOVED***

TZKEYNAMENT = r"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones"
TZKEYNAME9X = r"SOFTWARE\Microsoft\Windows\CurrentVersion\Time Zones"
TZLOCALKEYNAME = r"SYSTEM\CurrentControlSet\Control\TimeZoneInformation"


def _settzkeyname(***REMOVED***:
    handle = winreg.ConnectRegistry(None, winreg.HKEY_LOCAL_MACHINE***REMOVED***
    ***REMOVED***
        winreg.OpenKey(handle, TZKEYNAMENT***REMOVED***.Close(***REMOVED***
        TZKEYNAME = TZKEYNAMENT
    except WindowsError:
        TZKEYNAME = TZKEYNAME9X
    handle.Close(***REMOVED***
    return TZKEYNAME

TZKEYNAME = _settzkeyname(***REMOVED***


class tzres(object***REMOVED***:
    ***REMOVED***
    Class for accessing `tzres.dll`, which contains timezone name related
    resources.

    ..versionadded:: 2.5.0
    ***REMOVED***
    p_wchar = ctypes.POINTER(wintypes.WCHAR***REMOVED***        # Pointer to a wide char

    def __init__(self, tzres_loc='tzres.dll'***REMOVED***:
        # Load the user32 DLL so we can load strings from tzres
        user32 = ctypes.WinDLL('user32'***REMOVED***
        
        # Specify the LoadStringW function
        user32.LoadStringW.argtypes = (wintypes.HINSTANCE,
                                       wintypes.UINT,
                                       wintypes.LPWSTR,
                                       ctypes.c_int***REMOVED***

        self.LoadStringW = user32.LoadStringW
        self._tzres = ctypes.WinDLL(tzres_loc***REMOVED***
        self.tzres_loc = tzres_loc

    def load_name(self, offset***REMOVED***:
        ***REMOVED***
        Load a timezone name from a DLL offset (integer***REMOVED***.
        
        >>> from dateutil.tzwin import tzres
        >>> tzr = tzres(***REMOVED***
        >>> print(tzr.load_name(112***REMOVED******REMOVED***
        'Eastern Standard Time'

        :param offset:
            A positive integer value referring to a string from the tzres dll.

        ..note:
            Offsets found in the registry are generally of the form
            `@tzres.dll,-114`. The offset in this case if 114, not -114.

        ***REMOVED***
        resource = self.p_wchar(***REMOVED***
        lpBuffer = ctypes.cast(ctypes.byref(resource***REMOVED***, wintypes.LPWSTR***REMOVED***
        nchar = self.LoadStringW(self._tzres._handle, offset, lpBuffer, 0***REMOVED***
        return resource[:nchar***REMOVED***

    def name_from_string(self, tzname_str***REMOVED***:
        ***REMOVED***
        Parse strings as returned from the Windows registry into the time zone
        name as defined in the registry.

        >>> from dateutil.tzwin import tzres
        >>> tzr = tzres(***REMOVED***
        >>> print(tzr.name_from_string('@tzres.dll,-251'***REMOVED******REMOVED***
        'Dateline Daylight Time'
        >>> print(tzr.name_from_string('Eastern Standard Time'***REMOVED******REMOVED***
        'Eastern Standard Time'

        :param tzname_str:
            A timezone name string as returned from a Windows registry key.

        :return:
            Returns the localized timezone string from tzres.dll if the string
            is of the form `@tzres.dll,-offset`, else returns the input string.
        ***REMOVED***
        if not tzname_str.startswith('@'***REMOVED***:
            return tzname_str

        name_splt = tzname_str.split(',-'***REMOVED***
        ***REMOVED***
            offset = int(name_splt[1***REMOVED******REMOVED***
        ***REMOVED***
            raise ValueError("Malformed timezone string."***REMOVED***

        return self.load_name(offset***REMOVED***


class tzwinbase(datetime.tzinfo***REMOVED***:
    ***REMOVED***tzinfo class based on win32's timezones available in the registry.***REMOVED***
    def __eq__(self, other***REMOVED***:
        # Compare on all relevant dimensions, including name.
        return (isinstance(other, tzwinbase***REMOVED*** and
                (self._stdoffset == other._stdoffset and
                 self._dstoffset == other._dstoffset and
                 self._stddayofweek == other._stddayofweek and
                 self._dstdayofweek == other._dstdayofweek and
                 self._stdweeknumber == other._stdweeknumber and
                 self._dstweeknumber == other._dstweeknumber and
                 self._stdhour == other._stdhour and
                 self._dsthour == other._dsthour and
                 self._stdminute == other._stdminute and
                 self._dstminute == other._dstminute and
                 self._stdname == other._stdname and
                 self._dstname == other._dstname***REMOVED******REMOVED***

    def __ne__(self, other***REMOVED***:
        return not self.__eq__(other***REMOVED***

    def utcoffset(self, dt***REMOVED***:
        isdst = self._isdst(dt***REMOVED***

        if isdst is None:
            return None
        elif isdst:
            return datetime.timedelta(minutes=self._dstoffset***REMOVED***
        else:
            return datetime.timedelta(minutes=self._stdoffset***REMOVED***

    def dst(self, dt***REMOVED***:
        isdst = self._isdst(dt***REMOVED***

        if isdst is None:
            return None
        elif isdst:
            minutes = self._dstoffset - self._stdoffset
            return datetime.timedelta(minutes=minutes***REMOVED***
        else:
            return datetime.timedelta(0***REMOVED***

    @tzname_in_python2
    def tzname(self, dt***REMOVED***:
        if self._isdst(dt***REMOVED***:
            return self._dstname
        else:
            return self._stdname

    @staticmethod
    def list(***REMOVED***:
        ***REMOVED***Return a list of all time zones known to the system.***REMOVED***
        handle = winreg.ConnectRegistry(None, winreg.HKEY_LOCAL_MACHINE***REMOVED***
        tzkey = winreg.OpenKey(handle, TZKEYNAME***REMOVED***
        result = [winreg.EnumKey(tzkey, i***REMOVED***
                  for i in range(winreg.QueryInfoKey(tzkey***REMOVED***[0***REMOVED******REMOVED******REMOVED***
        tzkey.Close(***REMOVED***
        handle.Close(***REMOVED***
        return result

    def display(self***REMOVED***:
        return self._display

    def _isdst(self, dt***REMOVED***:
        if not self._dstmonth:
            # dstmonth == 0 signals the zone has no daylight saving time
            return False
        elif dt is None:
            return None

        dston = picknthweekday(dt.year, self._dstmonth, self._dstdayofweek,
                               self._dsthour, self._dstminute,
                               self._dstweeknumber***REMOVED***
        dstoff = picknthweekday(dt.year, self._stdmonth, self._stddayofweek,
                                self._stdhour, self._stdminute,
                                self._stdweeknumber***REMOVED***
        if dston < dstoff:
            return dston <= dt.replace(tzinfo=None***REMOVED*** < dstoff
        else:
            return not dstoff <= dt.replace(tzinfo=None***REMOVED*** < dston


class tzwin(tzwinbase***REMOVED***:

    def __init__(self, name***REMOVED***:
        self._name = name

        # multiple contexts only possible in 2.7 and 3.1, we still support 2.6
        with winreg.ConnectRegistry(None, winreg.HKEY_LOCAL_MACHINE***REMOVED*** as handle:
            tzkeyname = text_type("{kn***REMOVED***\{name***REMOVED***"***REMOVED***.format(kn=TZKEYNAME, name=name***REMOVED***
            with winreg.OpenKey(handle, tzkeyname***REMOVED*** as tzkey:
                keydict = valuestodict(tzkey***REMOVED***

        self._stdname = keydict["Std"***REMOVED***
        self._dstname = keydict["Dlt"***REMOVED***

        self._display = keydict["Display"***REMOVED***

        # See http://ww_winreg.jsiinc.com/SUBA/tip0300/rh0398.htm
        tup = struct.unpack("=3l16h", keydict["TZI"***REMOVED******REMOVED***
        self._stdoffset = -tup[0***REMOVED***-tup[1***REMOVED***          # Bias + StandardBias * -1
        self._dstoffset = self._stdoffset-tup[2***REMOVED***  # + DaylightBias * -1

        # for the meaning see the win32 TIME_ZONE_INFORMATION structure docs
        # http://msdn.microsoft.com/en-us/library/windows/desktop/ms725481(v=vs.85***REMOVED***.aspx
        (self._stdmonth,
         self._stddayofweek,   # Sunday = 0
         self._stdweeknumber,  # Last = 5
         self._stdhour,
         self._stdminute***REMOVED*** = tup[4:9***REMOVED***

        (self._dstmonth,
         self._dstdayofweek,   # Sunday = 0
         self._dstweeknumber,  # Last = 5
         self._dsthour,
         self._dstminute***REMOVED*** = tup[12:17***REMOVED***

    def __repr__(self***REMOVED***:
        return "tzwin(%s***REMOVED***" % repr(self._name***REMOVED***

    def __reduce__(self***REMOVED***:
        return (self.__class__, (self._name,***REMOVED******REMOVED***


class tzwinlocal(tzwinbase***REMOVED***:

    def __init__(self***REMOVED***:
        with winreg.ConnectRegistry(None, winreg.HKEY_LOCAL_MACHINE***REMOVED*** as handle:

            with winreg.OpenKey(handle, TZLOCALKEYNAME***REMOVED*** as tzlocalkey:
                keydict = valuestodict(tzlocalkey***REMOVED***

            self._stdname = keydict["StandardName"***REMOVED***
            self._dstname = keydict["DaylightName"***REMOVED***

            ***REMOVED***
                tzkeyname = text_type('{kn***REMOVED***\{sn***REMOVED***'***REMOVED***.format(kn=TZKEYNAME,
                                                          sn=self._stdname***REMOVED***
                with winreg.OpenKey(handle, tzkeyname***REMOVED*** as tzkey:
                    _keydict = valuestodict(tzkey***REMOVED***
                    self._display = _keydict["Display"***REMOVED***
            except OSError:
                self._display = None

        self._stdoffset = -keydict["Bias"***REMOVED***-keydict["StandardBias"***REMOVED***
        self._dstoffset = self._stdoffset-keydict["DaylightBias"***REMOVED***

        # For reasons unclear, in this particular key, the day of week has been
        # moved to the END of the SYSTEMTIME structure.
        tup = struct.unpack("=8h", keydict["StandardStart"***REMOVED******REMOVED***

        (self._stdmonth,
         self._stdweeknumber,  # Last = 5
         self._stdhour,
         self._stdminute***REMOVED*** = tup[1:5***REMOVED***
        
        self._stddayofweek = tup[7***REMOVED***

        tup = struct.unpack("=8h", keydict["DaylightStart"***REMOVED******REMOVED***

        (self._dstmonth,
         self._dstweeknumber,  # Last = 5
         self._dsthour,
         self._dstminute***REMOVED*** = tup[1:5***REMOVED***

        self._dstdayofweek = tup[7***REMOVED***

    def __repr__(self***REMOVED***:
        return "tzwinlocal(***REMOVED***"

    def __str__(self***REMOVED***:
        # str will return the standard name, not the daylight name.
        return "tzwinlocal(%s***REMOVED***" % repr(self._stdname***REMOVED***

    def __reduce__(self***REMOVED***:
        return (self.__class__, (***REMOVED******REMOVED***


def picknthweekday(year, month, dayofweek, hour, minute, whichweek***REMOVED***:
    ***REMOVED*** dayofweek == 0 means Sunday, whichweek 5 means last instance ***REMOVED***
    first = datetime.datetime(year, month, 1, hour, minute***REMOVED***

    # This will work if dayofweek is ISO weekday (1-7***REMOVED*** or Microsoft-style (0-6***REMOVED***,
    # Because 7 % 7 = 0
    weekdayone = first.replace(day=((dayofweek - first.isoweekday(***REMOVED******REMOVED*** % 7***REMOVED*** + 1***REMOVED***
    wd = weekdayone + ((whichweek - 1***REMOVED*** * ONEWEEK***REMOVED***
    if (wd.month != month***REMOVED***:
        wd -= ONEWEEK

    return wd


def valuestodict(key***REMOVED***:
    ***REMOVED***Convert a registry key's values to a dictionary.***REMOVED***
    dout = {***REMOVED***
    size = winreg.QueryInfoKey(key***REMOVED***[1***REMOVED***
    tz_res = None

    for i in range(size***REMOVED***:
        key_name, value, dtype = winreg.EnumValue(key, i***REMOVED***
        if dtype == winreg.REG_DWORD or dtype == winreg.REG_DWORD_LITTLE_ENDIAN:
            # If it's a DWORD (32-bit integer***REMOVED***, it's stored as unsigned - convert
            # that to a proper signed integer
            if value & (1 << 31***REMOVED***:
                value = value - (1 << 32***REMOVED***
        elif dtype == winreg.REG_SZ:
            # If it's a reference to the tzres DLL, load the actual string
            if value.startswith('@tzres'***REMOVED***:
                tz_res = tz_res or tzres(***REMOVED***
                value = tz_res.name_from_string(value***REMOVED***

            value = value.rstrip('\x00'***REMOVED***    # Remove trailing nulls

        dout[key_name***REMOVED*** = value

    return dout
