# -*- coding: utf-8 -*-
import datetime
import calendar

import operator
from math import copysign

from six import integer_types
from warnings import warn

__all__ = ["relativedelta", "MO", "TU", "WE", "TH", "FR", "SA", "SU"***REMOVED***


class weekday(object***REMOVED***:
    __slots__ = ["weekday", "n"***REMOVED***

    def __init__(self, weekday, n=None***REMOVED***:
        self.weekday = weekday
        self.n = n

    def __call__(self, n***REMOVED***:
        if n == self.n:
            return self
        else:
            return self.__class__(self.weekday, n***REMOVED***

    def __eq__(self, other***REMOVED***:
        ***REMOVED***
            if self.weekday != other.weekday or self.n != other.n:
                return False
        except AttributeError:
            return False
        return True

    def __repr__(self***REMOVED***:
        s = ("MO", "TU", "WE", "TH", "FR", "SA", "SU"***REMOVED***[self.weekday***REMOVED***
        if not self.n:
            return s
        else:
            return "%s(%+d***REMOVED***" % (s, self.n***REMOVED***

MO, TU, WE, TH, FR, SA, SU = weekdays = tuple([weekday(x***REMOVED*** for x in range(7***REMOVED******REMOVED******REMOVED***


class relativedelta(object***REMOVED***:
    ***REMOVED***
    The relativedelta type is based on the specification of the excellent
    work done by M.-A. Lemburg in his
    `mx.DateTime <http://www.egenix.com/files/python/mxDateTime.html>`_ extension.
    However, notice that this type does *NOT* implement the same algorithm as
    his work. Do *NOT* expect it to behave like mx.DateTime's counterpart.

    There are two different ways to build a relativedelta instance. The
    first one is passing it two date/datetime classes::

        relativedelta(datetime1, datetime2***REMOVED***

    The second one is passing it any number of the following keyword arguments::

        relativedelta(arg1=x,arg2=y,arg3=z...***REMOVED***

        year, month, day, hour, minute, second, microsecond:
            Absolute information (argument is singular***REMOVED***; adding or subtracting a
            relativedelta with absolute information does not perform an aritmetic
            operation, but rather REPLACES the corresponding value in the
            original datetime with the value(s***REMOVED*** in relativedelta.

        years, months, weeks, days, hours, minutes, seconds, microseconds:
            Relative information, may be negative (argument is plural***REMOVED***; adding
            or subtracting a relativedelta with relative information performs
            the corresponding aritmetic operation on the original datetime value
            with the information in the relativedelta.  

        weekday:
            One of the weekday instances (MO, TU, etc***REMOVED***. These instances may
            receive a parameter N, specifying the Nth weekday, which could
            be positive or negative (like MO(+1***REMOVED*** or MO(-2***REMOVED***. Not specifying
            it is the same as specifying +1. You can also use an integer,
            where 0=MO.

        leapdays:
            Will add given days to the date found, if year is a leap
            year, and the date found is post 28 of february.

        yearday, nlyearday:
            Set the yearday or the non-leap year day (jump leap days***REMOVED***.
            These are converted to day/month/leapdays information.

    Here is the behavior of operations with relativedelta:

    1. Calculate the absolute year, using the 'year' argument, or the
       original datetime year, if the argument is not present.

    2. Add the relative 'years' argument to the absolute year.

    3. Do steps 1 and 2 for month/months.

    4. Calculate the absolute day, using the 'day' argument, or the
       original datetime day, if the argument is not present. Then,
       subtract from the day until it fits in the year and month
       found after their operations.

    5. Add the relative 'days' argument to the absolute day. Notice
       that the 'weeks' argument is multiplied by 7 and added to
       'days'.

    6. Do steps 1 and 2 for hour/hours, minute/minutes, second/seconds,
       microsecond/microseconds.

    7. If the 'weekday' argument is present, calculate the weekday,
       with the given (wday, nth***REMOVED*** tuple. wday is the index of the
       weekday (0-6, 0=Mon***REMOVED***, and nth is the number of weeks to add
       forward or backward, depending on its signal. Notice that if
       the calculated date is already Monday, for example, using
       (0, 1***REMOVED*** or (0, -1***REMOVED*** won't change the day.
    ***REMOVED***

    def __init__(self, dt1=None, dt2=None,
                 years=0, months=0, days=0, leapdays=0, weeks=0,
                 hours=0, minutes=0, seconds=0, microseconds=0,
                 year=None, month=None, day=None, weekday=None,
                 yearday=None, nlyearday=None,
                 hour=None, minute=None, second=None, microsecond=None***REMOVED***:

        # Check for non-integer values in integer-only quantities
        if any(x is not None and x != int(x***REMOVED*** for x in (years, months***REMOVED******REMOVED***:
            raise ValueError("Non-integer years and months are "
                             "ambiguous and not currently supported."***REMOVED***

        if dt1 and dt2:
            # datetime is a subclass of date. So both must be date
            if not (isinstance(dt1, datetime.date***REMOVED*** and
                    isinstance(dt2, datetime.date***REMOVED******REMOVED***:
                raise TypeError("relativedelta only diffs datetime/date"***REMOVED***

            # We allow two dates, or two datetimes, so we coerce them to be
            # of the same type
            if (isinstance(dt1, datetime.datetime***REMOVED*** !=
                    isinstance(dt2, datetime.datetime***REMOVED******REMOVED***:
                if not isinstance(dt1, datetime.datetime***REMOVED***:
                    dt1 = datetime.datetime.fromordinal(dt1.toordinal(***REMOVED******REMOVED***
                elif not isinstance(dt2, datetime.datetime***REMOVED***:
                    dt2 = datetime.datetime.fromordinal(dt2.toordinal(***REMOVED******REMOVED***

            self.years = 0
            self.months = 0
            self.days = 0
            self.leapdays = 0
            self.hours = 0
            self.minutes = 0
            self.seconds = 0
            self.microseconds = 0
            self.year = None
            self.month = None
            self.day = None
            self.weekday = None
            self.hour = None
            self.minute = None
            self.second = None
            self.microsecond = None
            self._has_time = 0

            # Get year / month delta between the two
            months = (dt1.year - dt2.year***REMOVED*** * 12 + (dt1.month - dt2.month***REMOVED***
            self._set_months(months***REMOVED***

            # Remove the year/month delta so the timedelta is just well-defined
            # time units (seconds, days and microseconds***REMOVED***
            dtm = self.__radd__(dt2***REMOVED***

            # If we've overshot our target, make an adjustment
            if dt1 < dt2:
                compare = operator.gt
                increment = 1
            else:
                compare = operator.lt
                increment = -1

            while compare(dt1, dtm***REMOVED***:
                months += increment
                self._set_months(months***REMOVED***
                dtm = self.__radd__(dt2***REMOVED***

            # Get the timedelta between the "months-adjusted" date and dt1
            delta = dt1 - dtm
            self.seconds = delta.seconds + delta.days * 86400
            self.microseconds = delta.microseconds
        else:
            # Relative information
            self.years = years
            self.months = months
            self.days = days + weeks * 7
            self.leapdays = leapdays
            self.hours = hours
            self.minutes = minutes
            self.seconds = seconds
            self.microseconds = microseconds

            # Absolute information
            self.year = year
            self.month = month
            self.day = day
            self.hour = hour
            self.minute = minute
            self.second = second
            self.microsecond = microsecond

            if any(x is not None and int(x***REMOVED*** != x
                   for x in (year, month, day, hour,
                             minute, second, microsecond***REMOVED******REMOVED***:
                # For now we'll deprecate floats - later it'll be an error.
                warn("Non-integer value passed as absolute information. " +
                     "This is not a well-defined condition and will raise " +
                     "errors in future versions.", DeprecationWarning***REMOVED***


            if isinstance(weekday, integer_types***REMOVED***:
                self.weekday = weekdays[weekday***REMOVED***
            else:
                self.weekday = weekday

            yday = 0
            if nlyearday:
                yday = nlyearday
            elif yearday:
                yday = yearday
                if yearday > 59:
                    self.leapdays = -1
            if yday:
                ydayidx = [31, 59, 90, 120, 151, 181, 212,
                           243, 273, 304, 334, 366***REMOVED***
                for idx, ydays in enumerate(ydayidx***REMOVED***:
                    if yday <= ydays:
                        self.month = idx+1
                        if idx == 0:
                            self.day = yday
                        else:
                            self.day = yday-ydayidx[idx-1***REMOVED***
                        break
                else:
                    raise ValueError("invalid year day (%d***REMOVED***" % yday***REMOVED***

        self._fix(***REMOVED***

    def _fix(self***REMOVED***:
        if abs(self.microseconds***REMOVED*** > 999999:
            s = _sign(self.microseconds***REMOVED***
            div, mod = divmod(self.microseconds * s, 1000000***REMOVED***
            self.microseconds = mod * s
            self.seconds += div * s
        if abs(self.seconds***REMOVED*** > 59:
            s = _sign(self.seconds***REMOVED***
            div, mod = divmod(self.seconds * s, 60***REMOVED***
            self.seconds = mod * s
            self.minutes += div * s
        if abs(self.minutes***REMOVED*** > 59:
            s = _sign(self.minutes***REMOVED***
            div, mod = divmod(self.minutes * s, 60***REMOVED***
            self.minutes = mod * s
            self.hours += div * s
        if abs(self.hours***REMOVED*** > 23:
            s = _sign(self.hours***REMOVED***
            div, mod = divmod(self.hours * s, 24***REMOVED***
            self.hours = mod * s
            self.days += div * s
        if abs(self.months***REMOVED*** > 11:
            s = _sign(self.months***REMOVED***
            div, mod = divmod(self.months * s, 12***REMOVED***
            self.months = mod * s
            self.years += div * s
        if (self.hours or self.minutes or self.seconds or self.microseconds
                or self.hour is not None or self.minute is not None or
                self.second is not None or self.microsecond is not None***REMOVED***:
            self._has_time = 1
        else:
            self._has_time = 0

    @property
    def weeks(self***REMOVED***:
        return self.days // 7
    @weeks.setter
    def weeks(self, value***REMOVED***:
        self.days = self.days - (self.weeks * 7***REMOVED*** + value * 7

    def _set_months(self, months***REMOVED***:
        self.months = months
        if abs(self.months***REMOVED*** > 11:
            s = _sign(self.months***REMOVED***
            div, mod = divmod(self.months * s, 12***REMOVED***
            self.months = mod * s
            self.years = div * s
        else:
            self.years = 0

    def normalized(self***REMOVED***:
        ***REMOVED***
        Return a version of this object represented entirely using integer
        values for the relative attributes.

        >>> relativedelta(days=1.5, hours=2***REMOVED***.normalized(***REMOVED***
        relativedelta(days=1, hours=14***REMOVED***
        
        :return:
            Returns a :class:`dateutil.relativedelta.relativedelta` object.
        ***REMOVED***
        # Cascade remainders down (rounding each to roughly nearest microsecond***REMOVED***
        days = int(self.days***REMOVED***
        
        hours_f = round(self.hours + 24 * (self.days - days***REMOVED***, 11***REMOVED***
        hours = int(hours_f***REMOVED***
        
        minutes_f = round(self.minutes + 60 * (hours_f - hours***REMOVED***, 10***REMOVED***
        minutes = int(minutes_f***REMOVED***

        seconds_f = round(self.seconds + 60 * (minutes_f - minutes***REMOVED***, 8***REMOVED***
        seconds = int(seconds_f***REMOVED***

        microseconds = round(self.microseconds + 1e6 * (seconds_f - seconds***REMOVED******REMOVED***

        # Constructor carries overflow back up with call to _fix(***REMOVED***
        return self.__class__(years=self.years, months=self.months,
                              days=days, hours=hours, minutes=minutes,
                              seconds=seconds, microseconds=microseconds,
                              leapdays=self.leapdays, year=self.year,
                              month=self.month, day=self.day,
                              weekday=self.weekday, hour=self.hour,
                              minute=self.minute, second=self.second,
                              microsecond=self.microsecond***REMOVED***

    def __add__(self, other***REMOVED***:
        if isinstance(other, relativedelta***REMOVED***:
            return self.__class__(years=other.years + self.years,
                                 months=other.months + self.months,
                                 days=other.days + self.days,
                                 hours=other.hours + self.hours,
                                 minutes=other.minutes + self.minutes,
                                 seconds=other.seconds + self.seconds,
                                 microseconds=(other.microseconds +
                                               self.microseconds***REMOVED***,
                                 leapdays=other.leapdays or self.leapdays,
                                 year=other.year or self.year,
                                 month=other.month or self.month,
                                 day=other.day or self.day,
                                 weekday=other.weekday or self.weekday,
                                 hour=other.hour or self.hour,
                                 minute=other.minute or self.minute,
                                 second=other.second or self.second,
                                 microsecond=(other.microsecond or
                                              self.microsecond***REMOVED******REMOVED***
        if not isinstance(other, datetime.date***REMOVED***:
            raise TypeError("unsupported type for add operation"***REMOVED***
        elif self._has_time and not isinstance(other, datetime.datetime***REMOVED***:
            other = datetime.datetime.fromordinal(other.toordinal(***REMOVED******REMOVED***
        year = (self.year or other.year***REMOVED***+self.years
        month = self.month or other.month
        if self.months:
            assert 1 <= abs(self.months***REMOVED*** <= 12
            month += self.months
            if month > 12:
                year += 1
                month -= 12
            elif month < 1:
                year -= 1
                month += 12
        day = min(calendar.monthrange(year, month***REMOVED***[1***REMOVED***,
                  self.day or other.day***REMOVED***
        repl = {"year": year, "month": month, "day": day***REMOVED***
        for attr in ["hour", "minute", "second", "microsecond"***REMOVED***:
            value = getattr(self, attr***REMOVED***
            if value is not None:
                repl[attr***REMOVED*** = value
        days = self.days
        if self.leapdays and month > 2 and calendar.isleap(year***REMOVED***:
            days += self.leapdays
        ret = (other.replace(**repl***REMOVED***
               + datetime.timedelta(days=days,
                                    hours=self.hours,
                                    minutes=self.minutes,
                                    seconds=self.seconds,
                                    microseconds=self.microseconds***REMOVED******REMOVED***
        if self.weekday:
            weekday, nth = self.weekday.weekday, self.weekday.n or 1
            jumpdays = (abs(nth***REMOVED*** - 1***REMOVED*** * 7
            if nth > 0:
                jumpdays += (7 - ret.weekday(***REMOVED*** + weekday***REMOVED*** % 7
            else:
                jumpdays += (ret.weekday(***REMOVED*** - weekday***REMOVED*** % 7
                jumpdays *= -1
            ret += datetime.timedelta(days=jumpdays***REMOVED***
        return ret

    def __radd__(self, other***REMOVED***:
        return self.__add__(other***REMOVED***

    def __rsub__(self, other***REMOVED***:
        return self.__neg__(***REMOVED***.__radd__(other***REMOVED***

    def __sub__(self, other***REMOVED***:
        if not isinstance(other, relativedelta***REMOVED***:
            raise TypeError("unsupported type for sub operation"***REMOVED***
        return self.__class__(years=self.years - other.years,
                             months=self.months - other.months,
                             days=self.days - other.days,
                             hours=self.hours - other.hours,
                             minutes=self.minutes - other.minutes,
                             seconds=self.seconds - other.seconds,
                             microseconds=self.microseconds - other.microseconds,
                             leapdays=self.leapdays or other.leapdays,
                             year=self.year or other.year,
                             month=self.month or other.month,
                             day=self.day or other.day,
                             weekday=self.weekday or other.weekday,
                             hour=self.hour or other.hour,
                             minute=self.minute or other.minute,
                             second=self.second or other.second,
                             microsecond=self.microsecond or other.microsecond***REMOVED***

    def __neg__(self***REMOVED***:
        return self.__class__(years=-self.years,
                             months=-self.months,
                             days=-self.days,
                             hours=-self.hours,
                             minutes=-self.minutes,
                             seconds=-self.seconds,
                             microseconds=-self.microseconds,
                             leapdays=self.leapdays,
                             year=self.year,
                             month=self.month,
                             day=self.day,
                             weekday=self.weekday,
                             hour=self.hour,
                             minute=self.minute,
                             second=self.second,
                             microsecond=self.microsecond***REMOVED***

    def __bool__(self***REMOVED***:
        return not (not self.years and
                    not self.months and
                    not self.days and
                    not self.hours and
                    not self.minutes and
                    not self.seconds and
                    not self.microseconds and
                    not self.leapdays and
                    self.year is None and
                    self.month is None and
                    self.day is None and
                    self.weekday is None and
                    self.hour is None and
                    self.minute is None and
                    self.second is None and
                    self.microsecond is None***REMOVED***
    # Compatibility with Python 2.x
    __nonzero__ = __bool__

    def __mul__(self, other***REMOVED***:
        f = float(other***REMOVED***
        return self.__class__(years=int(self.years * f***REMOVED***,
                             months=int(self.months * f***REMOVED***,
                             days=int(self.days * f***REMOVED***,
                             hours=int(self.hours * f***REMOVED***,
                             minutes=int(self.minutes * f***REMOVED***,
                             seconds=int(self.seconds * f***REMOVED***,
                             microseconds=int(self.microseconds * f***REMOVED***,
                             leapdays=self.leapdays,
                             year=self.year,
                             month=self.month,
                             day=self.day,
                             weekday=self.weekday,
                             hour=self.hour,
                             minute=self.minute,
                             second=self.second,
                             microsecond=self.microsecond***REMOVED***

    __rmul__ = __mul__

    def __eq__(self, other***REMOVED***:
        if not isinstance(other, relativedelta***REMOVED***:
            return False
        if self.weekday or other.weekday:
            if not self.weekday or not other.weekday:
                return False
            if self.weekday.weekday != other.weekday.weekday:
                return False
            n1, n2 = self.weekday.n, other.weekday.n
            if n1 != n2 and not ((not n1 or n1 == 1***REMOVED*** and (not n2 or n2 == 1***REMOVED******REMOVED***:
                return False
        return (self.years == other.years and
                self.months == other.months and
                self.days == other.days and
                self.hours == other.hours and
                self.minutes == other.minutes and
                self.seconds == other.seconds and
                self.microseconds == other.microseconds and
                self.leapdays == other.leapdays and
                self.year == other.year and
                self.month == other.month and
                self.day == other.day and
                self.hour == other.hour and
                self.minute == other.minute and
                self.second == other.second and
                self.microsecond == other.microsecond***REMOVED***

    def __ne__(self, other***REMOVED***:
        return not self.__eq__(other***REMOVED***

    def __div__(self, other***REMOVED***:
        return self.__mul__(1/float(other***REMOVED******REMOVED***

    __truediv__ = __div__

    def __repr__(self***REMOVED***:
        l = [***REMOVED***
        for attr in ["years", "months", "days", "leapdays",
                     "hours", "minutes", "seconds", "microseconds"***REMOVED***:
            value = getattr(self, attr***REMOVED***
            if value:
                l.append("{attr***REMOVED***={value:+g***REMOVED***".format(attr=attr, value=value***REMOVED******REMOVED***
        for attr in ["year", "month", "day", "weekday",
                     "hour", "minute", "second", "microsecond"***REMOVED***:
            value = getattr(self, attr***REMOVED***
            if value is not None:
                l.append("{attr***REMOVED***={value***REMOVED***".format(attr=attr, value=repr(value***REMOVED******REMOVED******REMOVED***
        return "{classname***REMOVED***({attrs***REMOVED******REMOVED***".format(classname=self.__class__.__name__,
                                             attrs=", ".join(l***REMOVED******REMOVED***

def _sign(x***REMOVED***:
    return int(copysign(1, x***REMOVED******REMOVED***

# vim:ts=4:sw=4:et
