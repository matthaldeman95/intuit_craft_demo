***REMOVED***Utility to compare (Numpy***REMOVED*** version strings.

The NumpyVersion class allows properly comparing numpy version strings.
The LooseVersion and StrictVersion classes that distutils provides don't
work; they don't recognize anything like alpha/beta/rc/dev versions.

***REMOVED***
from __future__ import division, absolute_import, print_function

import re

from numpy.compat import basestring


__all__ = ['NumpyVersion'***REMOVED***


class NumpyVersion(***REMOVED***:
    ***REMOVED***Parse and compare numpy version strings.

    Numpy has the following versioning scheme (numbers given are examples; they
    can be > 9***REMOVED*** in principle***REMOVED***:

    - Released version: '1.8.0', '1.8.1', etc.
    - Alpha: '1.8.0a1', '1.8.0a2', etc.
    - Beta: '1.8.0b1', '1.8.0b2', etc.
    - Release candidates: '1.8.0rc1', '1.8.0rc2', etc.
    - Development versions: '1.8.0.dev-f1234afa' (git commit hash appended***REMOVED***
    - Development versions after a1: '1.8.0a1.dev-f1234afa',
                                     '1.8.0b2.dev-f1234afa',
                                     '1.8.1rc1.dev-f1234afa', etc.
    - Development versions (no git hash available***REMOVED***: '1.8.0.dev-Unknown'

    Comparing needs to be done against a valid version string or other
    `NumpyVersion` instance. Note that all development versions of the same
    (pre-***REMOVED***release compare equal.

    .. versionadded:: 1.9.0

    Parameters
    ----------
    vstring : str
        Numpy version string (``np.__version__``***REMOVED***.

    Examples
    --------
    >>> from numpy.lib import NumpyVersion
    >>> if NumpyVersion(np.__version__***REMOVED*** < '1.7.0'***REMOVED***:
    ...     print('skip'***REMOVED***
    skip

    >>> NumpyVersion('1.7'***REMOVED***  # raises ValueError, add ".0"

    ***REMOVED***

    def __init__(self, vstring***REMOVED***:
        self.vstring = vstring
        ver_main = re.match(r'\d[.***REMOVED***\d+[.***REMOVED***\d+', vstring***REMOVED***
        if not ver_main:
            raise ValueError("Not a valid numpy version string"***REMOVED***

        self.version = ver_main.group(***REMOVED***
        self.major, self.minor, self.bugfix = [int(x***REMOVED*** for x in
            self.version.split('.'***REMOVED******REMOVED***
        if len(vstring***REMOVED*** == ver_main.end(***REMOVED***:
            self.pre_release = 'final'
        else:
            alpha = re.match(r'a\d', vstring[ver_main.end(***REMOVED***:***REMOVED******REMOVED***
            beta = re.match(r'b\d', vstring[ver_main.end(***REMOVED***:***REMOVED******REMOVED***
            rc = re.match(r'rc\d', vstring[ver_main.end(***REMOVED***:***REMOVED******REMOVED***
            pre_rel = [m for m in [alpha, beta, rc***REMOVED*** if m is not None***REMOVED***
            if pre_rel:
                self.pre_release = pre_rel[0***REMOVED***.group(***REMOVED***
            else:
                self.pre_release = ''

        self.is_devversion = bool(re.search(r'.dev', vstring***REMOVED******REMOVED***

    def _compare_version(self, other***REMOVED***:
        ***REMOVED***Compare major.minor.bugfix***REMOVED***
        if self.major == other.major:
            if self.minor == other.minor:
                if self.bugfix == other.bugfix:
                    vercmp = 0
                elif self.bugfix > other.bugfix:
                    vercmp = 1
                else:
                    vercmp = -1
            elif self.minor > other.minor:
                vercmp = 1
            else:
                vercmp = -1
        elif self.major > other.major:
            vercmp = 1
        else:
            vercmp = -1

        return vercmp

    def _compare_pre_release(self, other***REMOVED***:
        ***REMOVED***Compare alpha/beta/rc/final.***REMOVED***
        if self.pre_release == other.pre_release:
            vercmp = 0
        elif self.pre_release == 'final':
            vercmp = 1
        elif other.pre_release == 'final':
            vercmp = -1
        elif self.pre_release > other.pre_release:
            vercmp = 1
        else:
            vercmp = -1

        return vercmp

    def _compare(self, other***REMOVED***:
        if not isinstance(other, (basestring, NumpyVersion***REMOVED******REMOVED***:
            raise ValueError("Invalid object to compare with NumpyVersion."***REMOVED***

        if isinstance(other, basestring***REMOVED***:
            other = NumpyVersion(other***REMOVED***

        vercmp = self._compare_version(other***REMOVED***
        if vercmp == 0:
            # Same x.y.z version, check for alpha/beta/rc
            vercmp = self._compare_pre_release(other***REMOVED***
            if vercmp == 0:
                # Same version and same pre-release, check if dev version
                if self.is_devversion is other.is_devversion:
                    vercmp = 0
                elif self.is_devversion:
                    vercmp = -1
                else:
                    vercmp = 1

        return vercmp

    def __lt__(self, other***REMOVED***:
        return self._compare(other***REMOVED*** < 0

    def __le__(self, other***REMOVED***:
        return self._compare(other***REMOVED*** <= 0

    def __eq__(self, other***REMOVED***:
        return self._compare(other***REMOVED*** == 0

    def __ne__(self, other***REMOVED***:
        return self._compare(other***REMOVED*** != 0

    def __gt__(self, other***REMOVED***:
        return self._compare(other***REMOVED*** > 0

    def __ge__(self, other***REMOVED***:
        return self._compare(other***REMOVED*** >= 0

    def __repr(self***REMOVED***:
        return "NumpyVersion(%s***REMOVED***" % self.vstring
