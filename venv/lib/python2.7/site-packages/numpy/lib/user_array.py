***REMOVED***
Standard container-class for easy multiple-inheritance.

Try to inherit from the ndarray instead of using this class as this is not
complete.

***REMOVED***
from __future__ import division, absolute_import, print_function

from numpy.core import (
    array, asarray, absolute, add, subtract, multiply, divide,
    remainder, power, left_shift, right_shift, bitwise_and, bitwise_or,
    bitwise_xor, invert, less, less_equal, not_equal, equal, greater,
    greater_equal, shape, reshape, arange, sin, sqrt, transpose
***REMOVED***
from numpy.compat import long


class container(object***REMOVED***:
    ***REMOVED***
    container(data, dtype=None, copy=True***REMOVED***

    Standard container-class for easy multiple-inheritance.

    Methods
    -------
    copy
    tostring
    byteswap
    astype

    ***REMOVED***
    def __init__(self, data, dtype=None, copy=True***REMOVED***:
        self.array = array(data, dtype, copy=copy***REMOVED***

    def __repr__(self***REMOVED***:
        if len(self.shape***REMOVED*** > 0:
            return self.__class__.__name__ + repr(self.array***REMOVED***[len("array"***REMOVED***:***REMOVED***
        else:
            return self.__class__.__name__ + "(" + repr(self.array***REMOVED*** + "***REMOVED***"

    def __array__(self, t=None***REMOVED***:
        if t:
            return self.array.astype(t***REMOVED***
        return self.array

    # Array as sequence
    def __len__(self***REMOVED***:
        return len(self.array***REMOVED***

    def __getitem__(self, index***REMOVED***:
        return self._rc(self.array[index***REMOVED******REMOVED***

    def __getslice__(self, i, j***REMOVED***:
        return self._rc(self.array[i:j***REMOVED******REMOVED***

    def __setitem__(self, index, value***REMOVED***:
        self.array[index***REMOVED*** = asarray(value, self.dtype***REMOVED***

    def __setslice__(self, i, j, value***REMOVED***:
        self.array[i:j***REMOVED*** = asarray(value, self.dtype***REMOVED***

    def __abs__(self***REMOVED***:
        return self._rc(absolute(self.array***REMOVED******REMOVED***

    def __neg__(self***REMOVED***:
        return self._rc(-self.array***REMOVED***

    def __add__(self, other***REMOVED***:
        return self._rc(self.array + asarray(other***REMOVED******REMOVED***

    __radd__ = __add__

    def __iadd__(self, other***REMOVED***:
        add(self.array, other, self.array***REMOVED***
        return self

    def __sub__(self, other***REMOVED***:
        return self._rc(self.array - asarray(other***REMOVED******REMOVED***

    def __rsub__(self, other***REMOVED***:
        return self._rc(asarray(other***REMOVED*** - self.array***REMOVED***

    def __isub__(self, other***REMOVED***:
        subtract(self.array, other, self.array***REMOVED***
        return self

    def __mul__(self, other***REMOVED***:
        return self._rc(multiply(self.array, asarray(other***REMOVED******REMOVED******REMOVED***

    __rmul__ = __mul__

    def __imul__(self, other***REMOVED***:
        multiply(self.array, other, self.array***REMOVED***
        return self

    def __div__(self, other***REMOVED***:
        return self._rc(divide(self.array, asarray(other***REMOVED******REMOVED******REMOVED***

    def __rdiv__(self, other***REMOVED***:
        return self._rc(divide(asarray(other***REMOVED***, self.array***REMOVED******REMOVED***

    def __idiv__(self, other***REMOVED***:
        divide(self.array, other, self.array***REMOVED***
        return self

    def __mod__(self, other***REMOVED***:
        return self._rc(remainder(self.array, other***REMOVED******REMOVED***

    def __rmod__(self, other***REMOVED***:
        return self._rc(remainder(other, self.array***REMOVED******REMOVED***

    def __imod__(self, other***REMOVED***:
        remainder(self.array, other, self.array***REMOVED***
        return self

    def __divmod__(self, other***REMOVED***:
        return (self._rc(divide(self.array, other***REMOVED******REMOVED***,
                self._rc(remainder(self.array, other***REMOVED******REMOVED******REMOVED***

    def __rdivmod__(self, other***REMOVED***:
        return (self._rc(divide(other, self.array***REMOVED******REMOVED***,
                self._rc(remainder(other, self.array***REMOVED******REMOVED******REMOVED***

    def __pow__(self, other***REMOVED***:
        return self._rc(power(self.array, asarray(other***REMOVED******REMOVED******REMOVED***

    def __rpow__(self, other***REMOVED***:
        return self._rc(power(asarray(other***REMOVED***, self.array***REMOVED******REMOVED***

    def __ipow__(self, other***REMOVED***:
        power(self.array, other, self.array***REMOVED***
        return self

    def __lshift__(self, other***REMOVED***:
        return self._rc(left_shift(self.array, other***REMOVED******REMOVED***

    def __rshift__(self, other***REMOVED***:
        return self._rc(right_shift(self.array, other***REMOVED******REMOVED***

    def __rlshift__(self, other***REMOVED***:
        return self._rc(left_shift(other, self.array***REMOVED******REMOVED***

    def __rrshift__(self, other***REMOVED***:
        return self._rc(right_shift(other, self.array***REMOVED******REMOVED***

    def __ilshift__(self, other***REMOVED***:
        left_shift(self.array, other, self.array***REMOVED***
        return self

    def __irshift__(self, other***REMOVED***:
        right_shift(self.array, other, self.array***REMOVED***
        return self

    def __and__(self, other***REMOVED***:
        return self._rc(bitwise_and(self.array, other***REMOVED******REMOVED***

    def __rand__(self, other***REMOVED***:
        return self._rc(bitwise_and(other, self.array***REMOVED******REMOVED***

    def __iand__(self, other***REMOVED***:
        bitwise_and(self.array, other, self.array***REMOVED***
        return self

    def __xor__(self, other***REMOVED***:
        return self._rc(bitwise_xor(self.array, other***REMOVED******REMOVED***

    def __rxor__(self, other***REMOVED***:
        return self._rc(bitwise_xor(other, self.array***REMOVED******REMOVED***

    def __ixor__(self, other***REMOVED***:
        bitwise_xor(self.array, other, self.array***REMOVED***
        return self

    def __or__(self, other***REMOVED***:
        return self._rc(bitwise_or(self.array, other***REMOVED******REMOVED***

    def __ror__(self, other***REMOVED***:
        return self._rc(bitwise_or(other, self.array***REMOVED******REMOVED***

    def __ior__(self, other***REMOVED***:
        bitwise_or(self.array, other, self.array***REMOVED***
        return self

    def __pos__(self***REMOVED***:
        return self._rc(self.array***REMOVED***

    def __invert__(self***REMOVED***:
        return self._rc(invert(self.array***REMOVED******REMOVED***

    def _scalarfunc(self, func***REMOVED***:
        if len(self.shape***REMOVED*** == 0:
            return func(self[0***REMOVED******REMOVED***
        else:
            raise TypeError(
                "only rank-0 arrays can be converted to Python scalars."***REMOVED***

    def __complex__(self***REMOVED***:
        return self._scalarfunc(complex***REMOVED***

    def __float__(self***REMOVED***:
        return self._scalarfunc(float***REMOVED***

    def __int__(self***REMOVED***:
        return self._scalarfunc(int***REMOVED***

    def __long__(self***REMOVED***:
        return self._scalarfunc(long***REMOVED***

    def __hex__(self***REMOVED***:
        return self._scalarfunc(hex***REMOVED***

    def __oct__(self***REMOVED***:
        return self._scalarfunc(oct***REMOVED***

    def __lt__(self, other***REMOVED***:
        return self._rc(less(self.array, other***REMOVED******REMOVED***

    def __le__(self, other***REMOVED***:
        return self._rc(less_equal(self.array, other***REMOVED******REMOVED***

    def __eq__(self, other***REMOVED***:
        return self._rc(equal(self.array, other***REMOVED******REMOVED***

    def __ne__(self, other***REMOVED***:
        return self._rc(not_equal(self.array, other***REMOVED******REMOVED***

    def __gt__(self, other***REMOVED***:
        return self._rc(greater(self.array, other***REMOVED******REMOVED***

    def __ge__(self, other***REMOVED***:
        return self._rc(greater_equal(self.array, other***REMOVED******REMOVED***

    def copy(self***REMOVED***:
        ""
        return self._rc(self.array.copy(***REMOVED******REMOVED***

    def tostring(self***REMOVED***:
        ""
        return self.array.tostring(***REMOVED***

    def byteswap(self***REMOVED***:
        ""
        return self._rc(self.array.byteswap(***REMOVED******REMOVED***

    def astype(self, typecode***REMOVED***:
        ""
        return self._rc(self.array.astype(typecode***REMOVED******REMOVED***

    def _rc(self, a***REMOVED***:
        if len(shape(a***REMOVED******REMOVED*** == 0:
            return a
        else:
            return self.__class__(a***REMOVED***

    def __array_wrap__(self, *args***REMOVED***:
        return self.__class__(args[0***REMOVED******REMOVED***

    def __setattr__(self, attr, value***REMOVED***:
        if attr == 'array':
            object.__setattr__(self, attr, value***REMOVED***
            return
        ***REMOVED***
            self.array.__setattr__(attr, value***REMOVED***
        except AttributeError:
            object.__setattr__(self, attr, value***REMOVED***

    # Only called after other approaches fail.
    def __getattr__(self, attr***REMOVED***:
        if (attr == 'array'***REMOVED***:
            return object.__getattribute__(self, attr***REMOVED***
        return self.array.__getattribute__(attr***REMOVED***

#############################################################
# Test of class container
#############################################################
if __name__ == '__main__':
    temp = reshape(arange(10000***REMOVED***, (100, 100***REMOVED******REMOVED***

    ua = container(temp***REMOVED***
    # new object created begin test
    print(dir(ua***REMOVED******REMOVED***
    print(shape(ua***REMOVED***, ua.shape***REMOVED***  # I have changed Numeric.py

    ua_small = ua[:3, :5***REMOVED***
    print(ua_small***REMOVED***
    # this did not change ua[0,0***REMOVED***, which is not normal behavior
    ua_small[0, 0***REMOVED*** = 10
    print(ua_small[0, 0***REMOVED***, ua[0, 0***REMOVED******REMOVED***
    print(sin(ua_small***REMOVED*** / 3. * 6. + sqrt(ua_small ** 2***REMOVED******REMOVED***
    print(less(ua_small, 103***REMOVED***, type(less(ua_small, 103***REMOVED******REMOVED******REMOVED***
    print(type(ua_small * reshape(arange(15***REMOVED***, shape(ua_small***REMOVED******REMOVED******REMOVED******REMOVED***
    print(reshape(ua_small, (5, 3***REMOVED******REMOVED******REMOVED***
    print(transpose(ua_small***REMOVED******REMOVED***
