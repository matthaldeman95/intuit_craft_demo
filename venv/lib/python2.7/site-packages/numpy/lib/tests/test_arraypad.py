***REMOVED***Tests for the array padding functions.

***REMOVED***
from __future__ import division, absolute_import, print_function

import numpy as np
from numpy.testing import (assert_array_equal, assert_raises, assert_allclose,
                           TestCase***REMOVED***
from numpy.lib import pad


class TestConditionalShortcuts(TestCase***REMOVED***:
    def test_zero_padding_shortcuts(self***REMOVED***:
        test = np.arange(120***REMOVED***.reshape(4, 5, 6***REMOVED***
        pad_amt = [(0, 0***REMOVED*** for axis in test.shape***REMOVED***
        modes = ['constant',
                 'edge',
                 'linear_ramp',
                 'maximum',
                 'mean',
                 'median',
                 'minimum',
                 'reflect',
                 'symmetric',
                 'wrap',
                 ***REMOVED***
        for mode in modes:
            assert_array_equal(test, pad(test, pad_amt, mode=mode***REMOVED******REMOVED***

    def test_shallow_statistic_range(self***REMOVED***:
        test = np.arange(120***REMOVED***.reshape(4, 5, 6***REMOVED***
        pad_amt = [(1, 1***REMOVED*** for axis in test.shape***REMOVED***
        modes = ['maximum',
                 'mean',
                 'median',
                 'minimum',
                 ***REMOVED***
        for mode in modes:
            assert_array_equal(pad(test, pad_amt, mode='edge'***REMOVED***,
                               pad(test, pad_amt, mode=mode, stat_length=1***REMOVED******REMOVED***

    def test_clip_statistic_range(self***REMOVED***:
        test = np.arange(30***REMOVED***.reshape(5, 6***REMOVED***
        pad_amt = [(3, 3***REMOVED*** for axis in test.shape***REMOVED***
        modes = ['maximum',
                 'mean',
                 'median',
                 'minimum',
                 ***REMOVED***
        for mode in modes:
            assert_array_equal(pad(test, pad_amt, mode=mode***REMOVED***,
                               pad(test, pad_amt, mode=mode, stat_length=30***REMOVED******REMOVED***


class TestStatistic(TestCase***REMOVED***:
    def test_check_mean_stat_length(self***REMOVED***:
        a = np.arange(100***REMOVED***.astype('f'***REMOVED***
        a = pad(a, ((25, 20***REMOVED***, ***REMOVED***, 'mean', stat_length=((2, 3***REMOVED***, ***REMOVED******REMOVED***
        b = np.array(
            [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
             0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
             0.5, 0.5, 0.5, 0.5, 0.5,

             0., 1., 2., 3., 4., 5., 6., 7., 8., 9.,
             10., 11., 12., 13., 14., 15., 16., 17., 18., 19.,
             20., 21., 22., 23., 24., 25., 26., 27., 28., 29.,
             30., 31., 32., 33., 34., 35., 36., 37., 38., 39.,
             40., 41., 42., 43., 44., 45., 46., 47., 48., 49.,
             50., 51., 52., 53., 54., 55., 56., 57., 58., 59.,
             60., 61., 62., 63., 64., 65., 66., 67., 68., 69.,
             70., 71., 72., 73., 74., 75., 76., 77., 78., 79.,
             80., 81., 82., 83., 84., 85., 86., 87., 88., 89.,
             90., 91., 92., 93., 94., 95., 96., 97., 98., 99.,

             98., 98., 98., 98., 98., 98., 98., 98., 98., 98.,
             98., 98., 98., 98., 98., 98., 98., 98., 98., 98.
             ***REMOVED******REMOVED***
        assert_array_equal(a, b***REMOVED***

    def test_check_maximum_1(self***REMOVED***:
        a = np.arange(100***REMOVED***
        a = pad(a, (25, 20***REMOVED***, 'maximum'***REMOVED***
        b = np.array(
            [99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
             99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
             99, 99, 99, 99, 99,

             0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
             10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
             20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
             30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
             40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
             50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
             60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
             70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
             80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
             90, 91, 92, 93, 94, 95, 96, 97, 98, 99,

             99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
             99, 99, 99, 99, 99, 99, 99, 99, 99, 99***REMOVED***
            ***REMOVED***
        assert_array_equal(a, b***REMOVED***

    def test_check_maximum_2(self***REMOVED***:
        a = np.arange(100***REMOVED*** + 1
        a = pad(a, (25, 20***REMOVED***, 'maximum'***REMOVED***
        b = np.array(
            [100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
             100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
             100, 100, 100, 100, 100,

             1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
             11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
             21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
             31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
             41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
             51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
             61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
             71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
             81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
             91, 92, 93, 94, 95, 96, 97, 98, 99, 100,

             100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
             100, 100, 100, 100, 100, 100, 100, 100, 100, 100***REMOVED***
            ***REMOVED***
        assert_array_equal(a, b***REMOVED***

    def test_check_maximum_stat_length(self***REMOVED***:
        a = np.arange(100***REMOVED*** + 1
        a = pad(a, (25, 20***REMOVED***, 'maximum', stat_length=10***REMOVED***
        b = np.array(
            [10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
             10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
             10, 10, 10, 10, 10,

              1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
             11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
             21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
             31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
             41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
             51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
             61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
             71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
             81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
             91, 92, 93, 94, 95, 96, 97, 98, 99, 100,

             100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
             100, 100, 100, 100, 100, 100, 100, 100, 100, 100***REMOVED***
            ***REMOVED***
        assert_array_equal(a, b***REMOVED***

    def test_check_minimum_1(self***REMOVED***:
        a = np.arange(100***REMOVED***
        a = pad(a, (25, 20***REMOVED***, 'minimum'***REMOVED***
        b = np.array(
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0, 0,

             0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
             10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
             20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
             30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
             40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
             50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
             60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
             70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
             80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
             90, 91, 92, 93, 94, 95, 96, 97, 98, 99,

             0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0, 0, 0, 0, 0, 0, 0***REMOVED***
            ***REMOVED***
        assert_array_equal(a, b***REMOVED***

    def test_check_minimum_2(self***REMOVED***:
        a = np.arange(100***REMOVED*** + 2
        a = pad(a, (25, 20***REMOVED***, 'minimum'***REMOVED***
        b = np.array(
            [2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
             2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
             2, 2, 2, 2, 2,

             2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
             12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
             22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
             32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
             42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
             52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
             62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
             72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
             82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
             92, 93, 94, 95, 96, 97, 98, 99, 100, 101,

             2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
             2, 2, 2, 2, 2, 2, 2, 2, 2, 2***REMOVED***
            ***REMOVED***
        assert_array_equal(a, b***REMOVED***

    def test_check_minimum_stat_length(self***REMOVED***:
        a = np.arange(100***REMOVED*** + 1
        a = pad(a, (25, 20***REMOVED***, 'minimum', stat_length=10***REMOVED***
        b = np.array(
            [ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
              1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
              1,  1,  1,  1,  1,

              1,  2,  3,  4,  5,  6,  7,  8,  9, 10,
             11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
             21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
             31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
             41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
             51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
             61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
             71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
             81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
             91, 92, 93, 94, 95, 96, 97, 98, 99, 100,

             91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
             91, 91, 91, 91, 91, 91, 91, 91, 91, 91***REMOVED***
            ***REMOVED***
        assert_array_equal(a, b***REMOVED***

    def test_check_median(self***REMOVED***:
        a = np.arange(100***REMOVED***.astype('f'***REMOVED***
        a = pad(a, (25, 20***REMOVED***, 'median'***REMOVED***
        b = np.array(
            [49.5, 49.5, 49.5, 49.5, 49.5, 49.5, 49.5, 49.5, 49.5, 49.5,
             49.5, 49.5, 49.5, 49.5, 49.5, 49.5, 49.5, 49.5, 49.5, 49.5,
             49.5, 49.5, 49.5, 49.5, 49.5,

             0., 1., 2., 3., 4., 5., 6., 7., 8., 9.,
             10., 11., 12., 13., 14., 15., 16., 17., 18., 19.,
             20., 21., 22., 23., 24., 25., 26., 27., 28., 29.,
             30., 31., 32., 33., 34., 35., 36., 37., 38., 39.,
             40., 41., 42., 43., 44., 45., 46., 47., 48., 49.,
             50., 51., 52., 53., 54., 55., 56., 57., 58., 59.,
             60., 61., 62., 63., 64., 65., 66., 67., 68., 69.,
             70., 71., 72., 73., 74., 75., 76., 77., 78., 79.,
             80., 81., 82., 83., 84., 85., 86., 87., 88., 89.,
             90., 91., 92., 93., 94., 95., 96., 97., 98., 99.,

             49.5, 49.5, 49.5, 49.5, 49.5, 49.5, 49.5, 49.5, 49.5, 49.5,
             49.5, 49.5, 49.5, 49.5, 49.5, 49.5, 49.5, 49.5, 49.5, 49.5***REMOVED***
            ***REMOVED***
        assert_array_equal(a, b***REMOVED***

    def test_check_median_01(self***REMOVED***:
        a = np.array([[3, 1, 4***REMOVED***, [4, 5, 9***REMOVED***, [9, 8, 2***REMOVED******REMOVED******REMOVED***
        a = pad(a, 1, 'median'***REMOVED***
        b = np.array(
            [[4, 4, 5, 4, 4***REMOVED***,

             [3, 3, 1, 4, 3***REMOVED***,
             [5, 4, 5, 9, 5***REMOVED***,
             [8, 9, 8, 2, 8***REMOVED***,

             [4, 4, 5, 4, 4***REMOVED******REMOVED***
            ***REMOVED***
        assert_array_equal(a, b***REMOVED***

    def test_check_median_02(self***REMOVED***:
        a = np.array([[3, 1, 4***REMOVED***, [4, 5, 9***REMOVED***, [9, 8, 2***REMOVED******REMOVED******REMOVED***
        a = pad(a.T, 1, 'median'***REMOVED***.T
        b = np.array(
            [[5, 4, 5, 4, 5***REMOVED***,

             [3, 3, 1, 4, 3***REMOVED***,
             [5, 4, 5, 9, 5***REMOVED***,
             [8, 9, 8, 2, 8***REMOVED***,

             [5, 4, 5, 4, 5***REMOVED******REMOVED***
            ***REMOVED***
        assert_array_equal(a, b***REMOVED***

    def test_check_median_stat_length(self***REMOVED***:
        a = np.arange(100***REMOVED***.astype('f'***REMOVED***
        a[1***REMOVED*** = 2.
        a[97***REMOVED*** = 96.
        a = pad(a, (25, 20***REMOVED***, 'median', stat_length=(3, 5***REMOVED******REMOVED***
        b = np.array(
            [ 2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,
              2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,
              2.,  2.,  2.,  2.,  2.,

              0.,  2.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9.,
             10., 11., 12., 13., 14., 15., 16., 17., 18., 19.,
             20., 21., 22., 23., 24., 25., 26., 27., 28., 29.,
             30., 31., 32., 33., 34., 35., 36., 37., 38., 39.,
             40., 41., 42., 43., 44., 45., 46., 47., 48., 49.,
             50., 51., 52., 53., 54., 55., 56., 57., 58., 59.,
             60., 61., 62., 63., 64., 65., 66., 67., 68., 69.,
             70., 71., 72., 73., 74., 75., 76., 77., 78., 79.,
             80., 81., 82., 83., 84., 85., 86., 87., 88., 89.,
             90., 91., 92., 93., 94., 95., 96., 96., 98., 99.,

             96., 96., 96., 96., 96., 96., 96., 96., 96., 96.,
             96., 96., 96., 96., 96., 96., 96., 96., 96., 96.***REMOVED***
            ***REMOVED***
        assert_array_equal(a, b***REMOVED***

    def test_check_mean_shape_one(self***REMOVED***:
        a = [[4, 5, 6***REMOVED******REMOVED***
        a = pad(a, (5, 7***REMOVED***, 'mean', stat_length=2***REMOVED***
        b = np.array(
            [[4, 4, 4, 4, 4, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6***REMOVED***,
             [4, 4, 4, 4, 4, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6***REMOVED***,
             [4, 4, 4, 4, 4, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6***REMOVED***,
             [4, 4, 4, 4, 4, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6***REMOVED***,
             [4, 4, 4, 4, 4, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6***REMOVED***,

             [4, 4, 4, 4, 4, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6***REMOVED***,

             [4, 4, 4, 4, 4, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6***REMOVED***,
             [4, 4, 4, 4, 4, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6***REMOVED***,
             [4, 4, 4, 4, 4, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6***REMOVED***,
             [4, 4, 4, 4, 4, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6***REMOVED***,
             [4, 4, 4, 4, 4, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6***REMOVED***,
             [4, 4, 4, 4, 4, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6***REMOVED***,
             [4, 4, 4, 4, 4, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6***REMOVED******REMOVED***
            ***REMOVED***
        assert_array_equal(a, b***REMOVED***

    def test_check_mean_2(self***REMOVED***:
        a = np.arange(100***REMOVED***.astype('f'***REMOVED***
        a = pad(a, (25, 20***REMOVED***, 'mean'***REMOVED***
        b = np.array(
            [49.5, 49.5, 49.5, 49.5, 49.5, 49.5, 49.5, 49.5, 49.5, 49.5,
             49.5, 49.5, 49.5, 49.5, 49.5, 49.5, 49.5, 49.5, 49.5, 49.5,
             49.5, 49.5, 49.5, 49.5, 49.5,

             0., 1., 2., 3., 4., 5., 6., 7., 8., 9.,
             10., 11., 12., 13., 14., 15., 16., 17., 18., 19.,
             20., 21., 22., 23., 24., 25., 26., 27., 28., 29.,
             30., 31., 32., 33., 34., 35., 36., 37., 38., 39.,
             40., 41., 42., 43., 44., 45., 46., 47., 48., 49.,
             50., 51., 52., 53., 54., 55., 56., 57., 58., 59.,
             60., 61., 62., 63., 64., 65., 66., 67., 68., 69.,
             70., 71., 72., 73., 74., 75., 76., 77., 78., 79.,
             80., 81., 82., 83., 84., 85., 86., 87., 88., 89.,
             90., 91., 92., 93., 94., 95., 96., 97., 98., 99.,

             49.5, 49.5, 49.5, 49.5, 49.5, 49.5, 49.5, 49.5, 49.5, 49.5,
             49.5, 49.5, 49.5, 49.5, 49.5, 49.5, 49.5, 49.5, 49.5, 49.5***REMOVED***
            ***REMOVED***
        assert_array_equal(a, b***REMOVED***


class TestConstant(TestCase***REMOVED***:
    def test_check_constant(self***REMOVED***:
        a = np.arange(100***REMOVED***
        a = pad(a, (25, 20***REMOVED***, 'constant', constant_values=(10, 20***REMOVED******REMOVED***
        b = np.array(
            [10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
             10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
             10, 10, 10, 10, 10,

             0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
             10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
             20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
             30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
             40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
             50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
             60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
             70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
             80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
             90, 91, 92, 93, 94, 95, 96, 97, 98, 99,

             20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
             20, 20, 20, 20, 20, 20, 20, 20, 20, 20***REMOVED***
            ***REMOVED***
        assert_array_equal(a, b***REMOVED***

    def test_check_constant_zeros(self***REMOVED***:
        a = np.arange(100***REMOVED***
        a = pad(a, (25, 20***REMOVED***, 'constant'***REMOVED***
        b = np.array(
            [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
              0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
              0,  0,  0,  0,  0,

             0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
             10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
             20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
             30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
             40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
             50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
             60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
             70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
             80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
             90, 91, 92, 93, 94, 95, 96, 97, 98, 99,

              0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
              0,  0,  0,  0,  0,  0,  0,  0,  0,  0***REMOVED***
            ***REMOVED***
        assert_array_equal(a, b***REMOVED***

    def test_check_constant_float(self***REMOVED***:
        # If input array is int, but constant_values are float, the dtype of
        # the array to be padded is kept
        arr = np.arange(30***REMOVED***.reshape(5, 6***REMOVED***
        test = pad(arr, (1, 2***REMOVED***, mode='constant',
                   constant_values=1.1***REMOVED***
        expected = np.array(
            [[ 1,  1,  1,  1,  1,  1,  1,  1,  1***REMOVED***,

             [ 1,  0,  1,  2,  3,  4,  5,  1,  1***REMOVED***,
             [ 1,  6,  7,  8,  9, 10, 11,  1,  1***REMOVED***,
             [ 1, 12, 13, 14, 15, 16, 17,  1,  1***REMOVED***,
             [ 1, 18, 19, 20, 21, 22, 23,  1,  1***REMOVED***,
             [ 1, 24, 25, 26, 27, 28, 29,  1,  1***REMOVED***,

             [ 1,  1,  1,  1,  1,  1,  1,  1,  1***REMOVED***,
             [ 1,  1,  1,  1,  1,  1,  1,  1,  1***REMOVED******REMOVED***
            ***REMOVED***
        assert_allclose(test, expected***REMOVED***

    def test_check_constant_float2(self***REMOVED***:
        # If input array is float, and constant_values are float, the dtype of
        # the array to be padded is kept - here retaining the float constants
        arr = np.arange(30***REMOVED***.reshape(5, 6***REMOVED***
        arr_float = arr.astype(np.float64***REMOVED***
        test = pad(arr_float, ((1, 2***REMOVED***, (1, 2***REMOVED******REMOVED***, mode='constant',
                   constant_values=1.1***REMOVED***
        expected = np.array(
            [[  1.1,   1.1,   1.1,   1.1,   1.1,   1.1,   1.1,   1.1,   1.1***REMOVED***,

             [  1.1,   0. ,   1. ,   2. ,   3. ,   4. ,   5. ,   1.1,   1.1***REMOVED***,
             [  1.1,   6. ,   7. ,   8. ,   9. ,  10. ,  11. ,   1.1,   1.1***REMOVED***,
             [  1.1,  12. ,  13. ,  14. ,  15. ,  16. ,  17. ,   1.1,   1.1***REMOVED***,
             [  1.1,  18. ,  19. ,  20. ,  21. ,  22. ,  23. ,   1.1,   1.1***REMOVED***,
             [  1.1,  24. ,  25. ,  26. ,  27. ,  28. ,  29. ,   1.1,   1.1***REMOVED***,

             [  1.1,   1.1,   1.1,   1.1,   1.1,   1.1,   1.1,   1.1,   1.1***REMOVED***,
             [  1.1,   1.1,   1.1,   1.1,   1.1,   1.1,   1.1,   1.1,   1.1***REMOVED******REMOVED***
            ***REMOVED***
        assert_allclose(test, expected***REMOVED***

    def test_check_constant_float3(self***REMOVED***:
        a = np.arange(100, dtype=float***REMOVED***
        a = pad(a, (25, 20***REMOVED***, 'constant', constant_values=(-1.1, -1.2***REMOVED******REMOVED***
        b = np.array(
            [-1.1, -1.1, -1.1, -1.1, -1.1, -1.1, -1.1, -1.1, -1.1, -1.1,
             -1.1, -1.1, -1.1, -1.1, -1.1, -1.1, -1.1, -1.1, -1.1, -1.1,
             -1.1, -1.1, -1.1, -1.1, -1.1,

             0,  1,  2,  3,  4,  5,  6,  7,  8,  9,
             10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
             20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
             30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
             40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
             50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
             60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
             70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
             80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
             90, 91, 92, 93, 94, 95, 96, 97, 98, 99,

             -1.2, -1.2, -1.2, -1.2, -1.2, -1.2, -1.2, -1.2, -1.2, -1.2,
             -1.2, -1.2, -1.2, -1.2, -1.2, -1.2, -1.2, -1.2, -1.2, -1.2***REMOVED***
            ***REMOVED***
        assert_allclose(a, b***REMOVED***

    def test_check_constant_odd_pad_amount(self***REMOVED***:
        arr = np.arange(30***REMOVED***.reshape(5, 6***REMOVED***
        test = pad(arr, ((1,***REMOVED***, (2,***REMOVED******REMOVED***, mode='constant',
                   constant_values=3***REMOVED***
        expected = np.array(
            [[ 3,  3,  3,  3,  3,  3,  3,  3,  3,  3***REMOVED***,

             [ 3,  3,  0,  1,  2,  3,  4,  5,  3,  3***REMOVED***,
             [ 3,  3,  6,  7,  8,  9, 10, 11,  3,  3***REMOVED***,
             [ 3,  3, 12, 13, 14, 15, 16, 17,  3,  3***REMOVED***,
             [ 3,  3, 18, 19, 20, 21, 22, 23,  3,  3***REMOVED***,
             [ 3,  3, 24, 25, 26, 27, 28, 29,  3,  3***REMOVED***,

             [ 3,  3,  3,  3,  3,  3,  3,  3,  3,  3***REMOVED******REMOVED***
            ***REMOVED***
        assert_allclose(test, expected***REMOVED***

    def test_check_constant_pad_2d(self***REMOVED***:
        arr = np.arange(4***REMOVED***.reshape(2, 2***REMOVED***
        test = np.lib.pad(arr, ((1, 2***REMOVED***, (1, 3***REMOVED******REMOVED***, mode='constant',
                          constant_values=((1, 2***REMOVED***, (3, 4***REMOVED******REMOVED******REMOVED***
        expected = np.array(
            [[3, 1, 1, 4, 4, 4***REMOVED***,
             [3, 0, 1, 4, 4, 4***REMOVED***,
             [3, 2, 3, 4, 4, 4***REMOVED***,
             [3, 2, 2, 4, 4, 4***REMOVED***,
             [3, 2, 2, 4, 4, 4***REMOVED******REMOVED***
        ***REMOVED***
        assert_allclose(test, expected***REMOVED***


class TestLinearRamp(TestCase***REMOVED***:
    def test_check_simple(self***REMOVED***:
        a = np.arange(100***REMOVED***.astype('f'***REMOVED***
        a = pad(a, (25, 20***REMOVED***, 'linear_ramp', end_values=(4, 5***REMOVED******REMOVED***
        b = np.array(
            [4.00, 3.84, 3.68, 3.52, 3.36, 3.20, 3.04, 2.88, 2.72, 2.56,
             2.40, 2.24, 2.08, 1.92, 1.76, 1.60, 1.44, 1.28, 1.12, 0.96,
             0.80, 0.64, 0.48, 0.32, 0.16,

             0.00, 1.00, 2.00, 3.00, 4.00, 5.00, 6.00, 7.00, 8.00, 9.00,
             10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0,
             20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0,
             30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0,
             40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0,
             50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0,
             60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0,
             70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0,
             80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0,
             90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0,

             94.3, 89.6, 84.9, 80.2, 75.5, 70.8, 66.1, 61.4, 56.7, 52.0,
             47.3, 42.6, 37.9, 33.2, 28.5, 23.8, 19.1, 14.4, 9.7, 5.***REMOVED***
            ***REMOVED***
        assert_allclose(a, b, rtol=1e-5, atol=1e-5***REMOVED***

    def test_check_2d(self***REMOVED***:
        arr = np.arange(20***REMOVED***.reshape(4, 5***REMOVED***.astype(np.float64***REMOVED***
        test = pad(arr, (2, 2***REMOVED***, mode='linear_ramp', end_values=(0, 0***REMOVED******REMOVED***
        expected = np.array(
            [[0.,   0.,   0.,   0.,   0.,   0.,   0.,    0.,   0.***REMOVED***,
             [0.,   0.,   0.,  0.5,   1.,  1.5,   2.,    1.,   0.***REMOVED***,
             [0.,   0.,   0.,   1.,   2.,   3.,   4.,    2.,   0.***REMOVED***,
             [0.,  2.5,   5.,   6.,   7.,   8.,   9.,   4.5,   0.***REMOVED***,
             [0.,   5.,  10.,  11.,  12.,  13.,  14.,    7.,   0.***REMOVED***,
             [0.,  7.5,  15.,  16.,  17.,  18.,  19.,   9.5,   0.***REMOVED***,
             [0., 3.75,  7.5,   8.,  8.5,   9.,  9.5,  4.75,   0.***REMOVED***,
             [0.,   0.,   0.,   0.,   0.,   0.,   0.,    0.,   0.***REMOVED******REMOVED******REMOVED***
        assert_allclose(test, expected***REMOVED***


class TestReflect(TestCase***REMOVED***:
    def test_check_simple(self***REMOVED***:
        a = np.arange(100***REMOVED***
        a = pad(a, (25, 20***REMOVED***, 'reflect'***REMOVED***
        b = np.array(
            [25, 24, 23, 22, 21, 20, 19, 18, 17, 16,
             15, 14, 13, 12, 11, 10, 9, 8, 7, 6,
             5, 4, 3, 2, 1,

             0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
             10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
             20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
             30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
             40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
             50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
             60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
             70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
             80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
             90, 91, 92, 93, 94, 95, 96, 97, 98, 99,

             98, 97, 96, 95, 94, 93, 92, 91, 90, 89,
             88, 87, 86, 85, 84, 83, 82, 81, 80, 79***REMOVED***
            ***REMOVED***
        assert_array_equal(a, b***REMOVED***

    def test_check_odd_method(self***REMOVED***:
        a = np.arange(100***REMOVED***
        a = pad(a, (25, 20***REMOVED***, 'reflect', reflect_type='odd'***REMOVED***
        b = np.array(
            [-25, -24, -23, -22, -21, -20, -19, -18, -17, -16,
             -15, -14, -13, -12, -11, -10, -9, -8, -7, -6,
             -5, -4, -3, -2, -1,

             0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
             10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
             20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
             30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
             40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
             50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
             60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
             70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
             80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
             90, 91, 92, 93, 94, 95, 96, 97, 98, 99,

             100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
             110, 111, 112, 113, 114, 115, 116, 117, 118, 119***REMOVED***
            ***REMOVED***
        assert_array_equal(a, b***REMOVED***

    def test_check_large_pad(self***REMOVED***:
        a = [[4, 5, 6***REMOVED***, [6, 7, 8***REMOVED******REMOVED***
        a = pad(a, (5, 7***REMOVED***, 'reflect'***REMOVED***
        b = np.array(
            [[7, 6, 7, 8, 7, 6, 7, 8, 7, 6, 7, 8, 7, 6, 7***REMOVED***,
             [5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5***REMOVED***,
             [7, 6, 7, 8, 7, 6, 7, 8, 7, 6, 7, 8, 7, 6, 7***REMOVED***,
             [5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5***REMOVED***,
             [7, 6, 7, 8, 7, 6, 7, 8, 7, 6, 7, 8, 7, 6, 7***REMOVED***,

             [5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5***REMOVED***,
             [7, 6, 7, 8, 7, 6, 7, 8, 7, 6, 7, 8, 7, 6, 7***REMOVED***,

             [5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5***REMOVED***,
             [7, 6, 7, 8, 7, 6, 7, 8, 7, 6, 7, 8, 7, 6, 7***REMOVED***,
             [5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5***REMOVED***,
             [7, 6, 7, 8, 7, 6, 7, 8, 7, 6, 7, 8, 7, 6, 7***REMOVED***,
             [5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5***REMOVED***,
             [7, 6, 7, 8, 7, 6, 7, 8, 7, 6, 7, 8, 7, 6, 7***REMOVED***,
             [5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5***REMOVED******REMOVED***
            ***REMOVED***
        assert_array_equal(a, b***REMOVED***

    def test_check_shape(self***REMOVED***:
        a = [[4, 5, 6***REMOVED******REMOVED***
        a = pad(a, (5, 7***REMOVED***, 'reflect'***REMOVED***
        b = np.array(
            [[5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5***REMOVED***,
             [5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5***REMOVED***,
             [5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5***REMOVED***,
             [5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5***REMOVED***,
             [5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5***REMOVED***,

             [5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5***REMOVED***,

             [5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5***REMOVED***,
             [5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5***REMOVED***,
             [5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5***REMOVED***,
             [5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5***REMOVED***,
             [5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5***REMOVED***,
             [5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5***REMOVED***,
             [5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5, 6, 5, 4, 5***REMOVED******REMOVED***
            ***REMOVED***
        assert_array_equal(a, b***REMOVED***

    def test_check_01(self***REMOVED***:
        a = pad([1, 2, 3***REMOVED***, 2, 'reflect'***REMOVED***
        b = np.array([3, 2, 1, 2, 3, 2, 1***REMOVED******REMOVED***
        assert_array_equal(a, b***REMOVED***

    def test_check_02(self***REMOVED***:
        a = pad([1, 2, 3***REMOVED***, 3, 'reflect'***REMOVED***
        b = np.array([2, 3, 2, 1, 2, 3, 2, 1, 2***REMOVED******REMOVED***
        assert_array_equal(a, b***REMOVED***

    def test_check_03(self***REMOVED***:
        a = pad([1, 2, 3***REMOVED***, 4, 'reflect'***REMOVED***
        b = np.array([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3***REMOVED******REMOVED***
        assert_array_equal(a, b***REMOVED***


class TestSymmetric(TestCase***REMOVED***:
    def test_check_simple(self***REMOVED***:
        a = np.arange(100***REMOVED***
        a = pad(a, (25, 20***REMOVED***, 'symmetric'***REMOVED***
        b = np.array(
            [24, 23, 22, 21, 20, 19, 18, 17, 16, 15,
             14, 13, 12, 11, 10, 9, 8, 7, 6, 5,
             4, 3, 2, 1, 0,

             0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
             10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
             20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
             30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
             40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
             50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
             60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
             70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
             80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
             90, 91, 92, 93, 94, 95, 96, 97, 98, 99,

             99, 98, 97, 96, 95, 94, 93, 92, 91, 90,
             89, 88, 87, 86, 85, 84, 83, 82, 81, 80***REMOVED***
            ***REMOVED***
        assert_array_equal(a, b***REMOVED***

    def test_check_odd_method(self***REMOVED***:
        a = np.arange(100***REMOVED***
        a = pad(a, (25, 20***REMOVED***, 'symmetric', reflect_type='odd'***REMOVED***
        b = np.array(
            [-24, -23, -22, -21, -20, -19, -18, -17, -16, -15,
             -14, -13, -12, -11, -10, -9, -8, -7, -6, -5,
             -4, -3, -2, -1, 0,

             0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
             10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
             20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
             30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
             40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
             50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
             60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
             70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
             80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
             90, 91, 92, 93, 94, 95, 96, 97, 98, 99,

             99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
             109, 110, 111, 112, 113, 114, 115, 116, 117, 118***REMOVED***
            ***REMOVED***
        assert_array_equal(a, b***REMOVED***

    def test_check_large_pad(self***REMOVED***:
        a = [[4, 5, 6***REMOVED***, [6, 7, 8***REMOVED******REMOVED***
        a = pad(a, (5, 7***REMOVED***, 'symmetric'***REMOVED***
        b = np.array(
            [[5, 6, 6, 5, 4, 4, 5, 6, 6, 5, 4, 4, 5, 6, 6***REMOVED***,
             [5, 6, 6, 5, 4, 4, 5, 6, 6, 5, 4, 4, 5, 6, 6***REMOVED***,
             [7, 8, 8, 7, 6, 6, 7, 8, 8, 7, 6, 6, 7, 8, 8***REMOVED***,
             [7, 8, 8, 7, 6, 6, 7, 8, 8, 7, 6, 6, 7, 8, 8***REMOVED***,
             [5, 6, 6, 5, 4, 4, 5, 6, 6, 5, 4, 4, 5, 6, 6***REMOVED***,

             [5, 6, 6, 5, 4, 4, 5, 6, 6, 5, 4, 4, 5, 6, 6***REMOVED***,
             [7, 8, 8, 7, 6, 6, 7, 8, 8, 7, 6, 6, 7, 8, 8***REMOVED***,

             [7, 8, 8, 7, 6, 6, 7, 8, 8, 7, 6, 6, 7, 8, 8***REMOVED***,
             [5, 6, 6, 5, 4, 4, 5, 6, 6, 5, 4, 4, 5, 6, 6***REMOVED***,
             [5, 6, 6, 5, 4, 4, 5, 6, 6, 5, 4, 4, 5, 6, 6***REMOVED***,
             [7, 8, 8, 7, 6, 6, 7, 8, 8, 7, 6, 6, 7, 8, 8***REMOVED***,
             [7, 8, 8, 7, 6, 6, 7, 8, 8, 7, 6, 6, 7, 8, 8***REMOVED***,
             [5, 6, 6, 5, 4, 4, 5, 6, 6, 5, 4, 4, 5, 6, 6***REMOVED***,
             [5, 6, 6, 5, 4, 4, 5, 6, 6, 5, 4, 4, 5, 6, 6***REMOVED******REMOVED***
            ***REMOVED***

        assert_array_equal(a, b***REMOVED***

    def test_check_large_pad_odd(self***REMOVED***:
        a = [[4, 5, 6***REMOVED***, [6, 7, 8***REMOVED******REMOVED***
        a = pad(a, (5, 7***REMOVED***, 'symmetric', reflect_type='odd'***REMOVED***
        b = np.array(
            [[-3, -2, -2, -1,  0,  0,  1,  2,  2,  3,  4,  4,  5,  6,  6***REMOVED***,
             [-3, -2, -2, -1,  0,  0,  1,  2,  2,  3,  4,  4,  5,  6,  6***REMOVED***,
             [-1,  0,  0,  1,  2,  2,  3,  4,  4,  5,  6,  6,  7,  8,  8***REMOVED***,
             [-1,  0,  0,  1,  2,  2,  3,  4,  4,  5,  6,  6,  7,  8,  8***REMOVED***,
             [ 1,  2,  2,  3,  4,  4,  5,  6,  6,  7,  8,  8,  9, 10, 10***REMOVED***,

             [ 1,  2,  2,  3,  4,  4,  5,  6,  6,  7,  8,  8,  9, 10, 10***REMOVED***,
             [ 3,  4,  4,  5,  6,  6,  7,  8,  8,  9, 10, 10, 11, 12, 12***REMOVED***,

             [ 3,  4,  4,  5,  6,  6,  7,  8,  8,  9, 10, 10, 11, 12, 12***REMOVED***,
             [ 5,  6,  6,  7,  8,  8,  9, 10, 10, 11, 12, 12, 13, 14, 14***REMOVED***,
             [ 5,  6,  6,  7,  8,  8,  9, 10, 10, 11, 12, 12, 13, 14, 14***REMOVED***,
             [ 7,  8,  8,  9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16***REMOVED***,
             [ 7,  8,  8,  9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16***REMOVED***,
             [ 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18***REMOVED***,
             [ 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18***REMOVED******REMOVED***
            ***REMOVED***
        assert_array_equal(a, b***REMOVED***

    def test_check_shape(self***REMOVED***:
        a = [[4, 5, 6***REMOVED******REMOVED***
        a = pad(a, (5, 7***REMOVED***, 'symmetric'***REMOVED***
        b = np.array(
            [[5, 6, 6, 5, 4, 4, 5, 6, 6, 5, 4, 4, 5, 6, 6***REMOVED***,
             [5, 6, 6, 5, 4, 4, 5, 6, 6, 5, 4, 4, 5, 6, 6***REMOVED***,
             [5, 6, 6, 5, 4, 4, 5, 6, 6, 5, 4, 4, 5, 6, 6***REMOVED***,
             [5, 6, 6, 5, 4, 4, 5, 6, 6, 5, 4, 4, 5, 6, 6***REMOVED***,
             [5, 6, 6, 5, 4, 4, 5, 6, 6, 5, 4, 4, 5, 6, 6***REMOVED***,

             [5, 6, 6, 5, 4, 4, 5, 6, 6, 5, 4, 4, 5, 6, 6***REMOVED***,
             [5, 6, 6, 5, 4, 4, 5, 6, 6, 5, 4, 4, 5, 6, 6***REMOVED***,

             [5, 6, 6, 5, 4, 4, 5, 6, 6, 5, 4, 4, 5, 6, 6***REMOVED***,
             [5, 6, 6, 5, 4, 4, 5, 6, 6, 5, 4, 4, 5, 6, 6***REMOVED***,
             [5, 6, 6, 5, 4, 4, 5, 6, 6, 5, 4, 4, 5, 6, 6***REMOVED***,
             [5, 6, 6, 5, 4, 4, 5, 6, 6, 5, 4, 4, 5, 6, 6***REMOVED***,
             [5, 6, 6, 5, 4, 4, 5, 6, 6, 5, 4, 4, 5, 6, 6***REMOVED***,
             [5, 6, 6, 5, 4, 4, 5, 6, 6, 5, 4, 4, 5, 6, 6***REMOVED******REMOVED***
            ***REMOVED***
        assert_array_equal(a, b***REMOVED***

    def test_check_01(self***REMOVED***:
        a = pad([1, 2, 3***REMOVED***, 2, 'symmetric'***REMOVED***
        b = np.array([2, 1, 1, 2, 3, 3, 2***REMOVED******REMOVED***
        assert_array_equal(a, b***REMOVED***

    def test_check_02(self***REMOVED***:
        a = pad([1, 2, 3***REMOVED***, 3, 'symmetric'***REMOVED***
        b = np.array([3, 2, 1, 1, 2, 3, 3, 2, 1***REMOVED******REMOVED***
        assert_array_equal(a, b***REMOVED***

    def test_check_03(self***REMOVED***:
        a = pad([1, 2, 3***REMOVED***, 6, 'symmetric'***REMOVED***
        b = np.array([1, 2, 3, 3, 2, 1, 1, 2, 3, 3, 2, 1, 1, 2, 3***REMOVED******REMOVED***
        assert_array_equal(a, b***REMOVED***


class TestWrap(TestCase***REMOVED***:
    def test_check_simple(self***REMOVED***:
        a = np.arange(100***REMOVED***
        a = pad(a, (25, 20***REMOVED***, 'wrap'***REMOVED***
        b = np.array(
            [75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
             85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
             95, 96, 97, 98, 99,

             0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
             10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
             20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
             30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
             40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
             50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
             60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
             70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
             80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
             90, 91, 92, 93, 94, 95, 96, 97, 98, 99,

             0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
             10, 11, 12, 13, 14, 15, 16, 17, 18, 19***REMOVED***
            ***REMOVED***
        assert_array_equal(a, b***REMOVED***

    def test_check_large_pad(self***REMOVED***:
        a = np.arange(12***REMOVED***
        a = np.reshape(a, (3, 4***REMOVED******REMOVED***
        a = pad(a, (10, 12***REMOVED***, 'wrap'***REMOVED***
        b = np.array(
            [[10, 11, 8, 9, 10, 11, 8, 9, 10, 11, 8, 9, 10, 11, 8, 9, 10,
              11, 8, 9, 10, 11, 8, 9, 10, 11***REMOVED***,
             [2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2,
              3, 0, 1, 2, 3, 0, 1, 2, 3***REMOVED***,
             [6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6,
              7, 4, 5, 6, 7, 4, 5, 6, 7***REMOVED***,
             [10, 11, 8, 9, 10, 11, 8, 9, 10, 11, 8, 9, 10, 11, 8, 9, 10,
              11, 8, 9, 10, 11, 8, 9, 10, 11***REMOVED***,
             [2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2,
              3, 0, 1, 2, 3, 0, 1, 2, 3***REMOVED***,
             [6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6,
              7, 4, 5, 6, 7, 4, 5, 6, 7***REMOVED***,
             [10, 11, 8, 9, 10, 11, 8, 9, 10, 11, 8, 9, 10, 11, 8, 9, 10,
              11, 8, 9, 10, 11, 8, 9, 10, 11***REMOVED***,
             [2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2,
              3, 0, 1, 2, 3, 0, 1, 2, 3***REMOVED***,
             [6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6,
              7, 4, 5, 6, 7, 4, 5, 6, 7***REMOVED***,
             [10, 11, 8, 9, 10, 11, 8, 9, 10, 11, 8, 9, 10, 11, 8, 9, 10,
              11, 8, 9, 10, 11, 8, 9, 10, 11***REMOVED***,

             [2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2,
              3, 0, 1, 2, 3, 0, 1, 2, 3***REMOVED***,
             [6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6,
              7, 4, 5, 6, 7, 4, 5, 6, 7***REMOVED***,
             [10, 11, 8, 9, 10, 11, 8, 9, 10, 11, 8, 9, 10, 11, 8, 9, 10,
              11, 8, 9, 10, 11, 8, 9, 10, 11***REMOVED***,

             [2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2,
              3, 0, 1, 2, 3, 0, 1, 2, 3***REMOVED***,
             [6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6,
              7, 4, 5, 6, 7, 4, 5, 6, 7***REMOVED***,
             [10, 11, 8, 9, 10, 11, 8, 9, 10, 11, 8, 9, 10, 11, 8, 9, 10,
              11, 8, 9, 10, 11, 8, 9, 10, 11***REMOVED***,
             [2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2,
              3, 0, 1, 2, 3, 0, 1, 2, 3***REMOVED***,
             [6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6,
              7, 4, 5, 6, 7, 4, 5, 6, 7***REMOVED***,
             [10, 11, 8, 9, 10, 11, 8, 9, 10, 11, 8, 9, 10, 11, 8, 9, 10,
              11, 8, 9, 10, 11, 8, 9, 10, 11***REMOVED***,
             [2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2,
              3, 0, 1, 2, 3, 0, 1, 2, 3***REMOVED***,
             [6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6,
              7, 4, 5, 6, 7, 4, 5, 6, 7***REMOVED***,
             [10, 11, 8, 9, 10, 11, 8, 9, 10, 11, 8, 9, 10, 11, 8, 9, 10,
              11, 8, 9, 10, 11, 8, 9, 10, 11***REMOVED***,
             [2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2,
              3, 0, 1, 2, 3, 0, 1, 2, 3***REMOVED***,
             [6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6,
              7, 4, 5, 6, 7, 4, 5, 6, 7***REMOVED***,
             [10, 11, 8, 9, 10, 11, 8, 9, 10, 11, 8, 9, 10, 11, 8, 9, 10,
              11, 8, 9, 10, 11, 8, 9, 10, 11***REMOVED******REMOVED***
            ***REMOVED***
        assert_array_equal(a, b***REMOVED***

    def test_check_01(self***REMOVED***:
        a = pad([1, 2, 3***REMOVED***, 3, 'wrap'***REMOVED***
        b = np.array([1, 2, 3, 1, 2, 3, 1, 2, 3***REMOVED******REMOVED***
        assert_array_equal(a, b***REMOVED***

    def test_check_02(self***REMOVED***:
        a = pad([1, 2, 3***REMOVED***, 4, 'wrap'***REMOVED***
        b = np.array([3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1***REMOVED******REMOVED***
        assert_array_equal(a, b***REMOVED***


class TestStatLen(TestCase***REMOVED***:
    def test_check_simple(self***REMOVED***:
        a = np.arange(30***REMOVED***
        a = np.reshape(a, (6, 5***REMOVED******REMOVED***
        a = pad(a, ((2, 3***REMOVED***, (3, 2***REMOVED******REMOVED***, mode='mean', stat_length=(3,***REMOVED******REMOVED***
        b = np.array(
            [[6, 6, 6, 5, 6, 7, 8, 9, 8, 8***REMOVED***,
             [6, 6, 6, 5, 6, 7, 8, 9, 8, 8***REMOVED***,

             [1, 1, 1, 0, 1, 2, 3, 4, 3, 3***REMOVED***,
             [6, 6, 6, 5, 6, 7, 8, 9, 8, 8***REMOVED***,
             [11, 11, 11, 10, 11, 12, 13, 14, 13, 13***REMOVED***,
             [16, 16, 16, 15, 16, 17, 18, 19, 18, 18***REMOVED***,
             [21, 21, 21, 20, 21, 22, 23, 24, 23, 23***REMOVED***,
             [26, 26, 26, 25, 26, 27, 28, 29, 28, 28***REMOVED***,

             [21, 21, 21, 20, 21, 22, 23, 24, 23, 23***REMOVED***,
             [21, 21, 21, 20, 21, 22, 23, 24, 23, 23***REMOVED***,
             [21, 21, 21, 20, 21, 22, 23, 24, 23, 23***REMOVED******REMOVED***
            ***REMOVED***
        assert_array_equal(a, b***REMOVED***


class TestEdge(TestCase***REMOVED***:
    def test_check_simple(self***REMOVED***:
        a = np.arange(12***REMOVED***
        a = np.reshape(a, (4, 3***REMOVED******REMOVED***
        a = pad(a, ((2, 3***REMOVED***, (3, 2***REMOVED******REMOVED***, 'edge'***REMOVED***
        b = np.array(
            [[0, 0, 0, 0, 1, 2, 2, 2***REMOVED***,
             [0, 0, 0, 0, 1, 2, 2, 2***REMOVED***,

             [0, 0, 0, 0, 1, 2, 2, 2***REMOVED***,
             [3, 3, 3, 3, 4, 5, 5, 5***REMOVED***,
             [6, 6, 6, 6, 7, 8, 8, 8***REMOVED***,
             [9, 9, 9, 9, 10, 11, 11, 11***REMOVED***,

             [9, 9, 9, 9, 10, 11, 11, 11***REMOVED***,
             [9, 9, 9, 9, 10, 11, 11, 11***REMOVED***,
             [9, 9, 9, 9, 10, 11, 11, 11***REMOVED******REMOVED***
            ***REMOVED***
        assert_array_equal(a, b***REMOVED***


class TestZeroPadWidth(TestCase***REMOVED***:
    def test_zero_pad_width(self***REMOVED***:
        arr = np.arange(30***REMOVED***
        arr = np.reshape(arr, (6, 5***REMOVED******REMOVED***
        for pad_width in (0, (0, 0***REMOVED***, ((0, 0***REMOVED***, (0, 0***REMOVED******REMOVED******REMOVED***:
            assert_array_equal(arr, pad(arr, pad_width, mode='constant'***REMOVED******REMOVED***


class TestLegacyVectorFunction(TestCase***REMOVED***:
    def test_legacy_vector_functionality(self***REMOVED***:
        def _padwithtens(vector, pad_width, iaxis, kwargs***REMOVED***:
            vector[:pad_width[0***REMOVED******REMOVED*** = 10
            vector[-pad_width[1***REMOVED***:***REMOVED*** = 10
            return vector

        a = np.arange(6***REMOVED***.reshape(2, 3***REMOVED***
        a = pad(a, 2, _padwithtens***REMOVED***
        b = np.array(
            [[10, 10, 10, 10, 10, 10, 10***REMOVED***,
             [10, 10, 10, 10, 10, 10, 10***REMOVED***,

             [10, 10,  0,  1,  2, 10, 10***REMOVED***,
             [10, 10,  3,  4,  5, 10, 10***REMOVED***,

             [10, 10, 10, 10, 10, 10, 10***REMOVED***,
             [10, 10, 10, 10, 10, 10, 10***REMOVED******REMOVED***
            ***REMOVED***
        assert_array_equal(a, b***REMOVED***


class TestNdarrayPadWidth(TestCase***REMOVED***:
    def test_check_simple(self***REMOVED***:
        a = np.arange(12***REMOVED***
        a = np.reshape(a, (4, 3***REMOVED******REMOVED***
        a = pad(a, np.array(((2, 3***REMOVED***, (3, 2***REMOVED******REMOVED******REMOVED***, 'edge'***REMOVED***
        b = np.array(
            [[0,  0,  0,    0,  1,  2,    2,  2***REMOVED***,
             [0,  0,  0,    0,  1,  2,    2,  2***REMOVED***,

             [0,  0,  0,    0,  1,  2,    2,  2***REMOVED***,
             [3,  3,  3,    3,  4,  5,    5,  5***REMOVED***,
             [6,  6,  6,    6,  7,  8,    8,  8***REMOVED***,
             [9,  9,  9,    9, 10, 11,   11, 11***REMOVED***,

             [9,  9,  9,    9, 10, 11,   11, 11***REMOVED***,
             [9,  9,  9,    9, 10, 11,   11, 11***REMOVED***,
             [9,  9,  9,    9, 10, 11,   11, 11***REMOVED******REMOVED***
            ***REMOVED***
        assert_array_equal(a, b***REMOVED***


class TestUnicodeInput(TestCase***REMOVED***:
    def test_unicode_mode(self***REMOVED***:
        ***REMOVED***
            constant_mode = unicode('constant'***REMOVED***
        except NameError:
            constant_mode = 'constant'
        a = np.pad([1***REMOVED***, 2, mode=constant_mode***REMOVED***
        b = np.array([0, 0, 1, 0, 0***REMOVED******REMOVED***
        assert_array_equal(a, b***REMOVED***


class ValueError1(TestCase***REMOVED***:
    def test_check_simple(self***REMOVED***:
        arr = np.arange(30***REMOVED***
        arr = np.reshape(arr, (6, 5***REMOVED******REMOVED***
        kwargs = dict(mode='mean', stat_length=(3, ***REMOVED******REMOVED***
        assert_raises(ValueError, pad, arr, ((2, 3***REMOVED***, (3, 2***REMOVED***, (4, 5***REMOVED******REMOVED***,
                      **kwargs***REMOVED***

    def test_check_negative_stat_length(self***REMOVED***:
        arr = np.arange(30***REMOVED***
        arr = np.reshape(arr, (6, 5***REMOVED******REMOVED***
        kwargs = dict(mode='mean', stat_length=(-3, ***REMOVED******REMOVED***
        assert_raises(ValueError, pad, arr, ((2, 3***REMOVED***, (3, 2***REMOVED******REMOVED***,
                      **kwargs***REMOVED***

    def test_check_negative_pad_width(self***REMOVED***:
        arr = np.arange(30***REMOVED***
        arr = np.reshape(arr, (6, 5***REMOVED******REMOVED***
        kwargs = dict(mode='mean', stat_length=(3, ***REMOVED******REMOVED***
        assert_raises(ValueError, pad, arr, ((-2, 3***REMOVED***, (3, 2***REMOVED******REMOVED***,
                      **kwargs***REMOVED***


class ValueError2(TestCase***REMOVED***:
    def test_check_negative_pad_amount(self***REMOVED***:
        arr = np.arange(30***REMOVED***
        arr = np.reshape(arr, (6, 5***REMOVED******REMOVED***
        kwargs = dict(mode='mean', stat_length=(3, ***REMOVED******REMOVED***
        assert_raises(ValueError, pad, arr, ((-2, 3***REMOVED***, (3, 2***REMOVED******REMOVED***,
                      **kwargs***REMOVED***


class ValueError3(TestCase***REMOVED***:
    def test_check_kwarg_not_allowed(self***REMOVED***:
        arr = np.arange(30***REMOVED***.reshape(5, 6***REMOVED***
        assert_raises(ValueError, pad, arr, 4, mode='mean',
                      reflect_type='odd'***REMOVED***

    def test_mode_not_set(self***REMOVED***:
        arr = np.arange(30***REMOVED***.reshape(5, 6***REMOVED***
        assert_raises(TypeError, pad, arr, 4***REMOVED***

    def test_malformed_pad_amount(self***REMOVED***:
        arr = np.arange(30***REMOVED***.reshape(5, 6***REMOVED***
        assert_raises(ValueError, pad, arr, (4, 5, 6, 7***REMOVED***, mode='constant'***REMOVED***

    def test_malformed_pad_amount2(self***REMOVED***:
        arr = np.arange(30***REMOVED***.reshape(5, 6***REMOVED***
        assert_raises(ValueError, pad, arr, ((3, 4, 5***REMOVED***, (0, 1, 2***REMOVED******REMOVED***,
                      mode='constant'***REMOVED***

    def test_pad_too_many_axes(self***REMOVED***:
        arr = np.arange(30***REMOVED***.reshape(5, 6***REMOVED***

        # Attempt to pad using a 3D array equivalent
        bad_shape = (((3,***REMOVED***, (4,***REMOVED***, (5,***REMOVED******REMOVED***, ((0,***REMOVED***, (1,***REMOVED***, (2,***REMOVED******REMOVED******REMOVED***
        assert_raises(ValueError, pad, arr, bad_shape,
                      mode='constant'***REMOVED***


class TypeError1(TestCase***REMOVED***:
    def test_float(self***REMOVED***:
        arr = np.arange(30***REMOVED***
        assert_raises(TypeError, pad, arr, ((-2.1, 3***REMOVED***, (3, 2***REMOVED******REMOVED******REMOVED***
        assert_raises(TypeError, pad, arr, np.array(((-2.1, 3***REMOVED***, (3, 2***REMOVED******REMOVED******REMOVED******REMOVED***

    def test_str(self***REMOVED***:
        arr = np.arange(30***REMOVED***
        assert_raises(TypeError, pad, arr, 'foo'***REMOVED***
        assert_raises(TypeError, pad, arr, np.array('foo'***REMOVED******REMOVED***

    def test_object(self***REMOVED***:
        class FooBar(object***REMOVED***:
            pass
        arr = np.arange(30***REMOVED***
        assert_raises(TypeError, pad, arr, FooBar(***REMOVED******REMOVED***

    def test_complex(self***REMOVED***:
        arr = np.arange(30***REMOVED***
        assert_raises(TypeError, pad, arr, complex(1, -1***REMOVED******REMOVED***
        assert_raises(TypeError, pad, arr, np.array(complex(1, -1***REMOVED******REMOVED******REMOVED***

    def test_check_wrong_pad_amount(self***REMOVED***:
        arr = np.arange(30***REMOVED***
        arr = np.reshape(arr, (6, 5***REMOVED******REMOVED***
        kwargs = dict(mode='mean', stat_length=(3, ***REMOVED******REMOVED***
        assert_raises(TypeError, pad, arr, ((2, 3, 4***REMOVED***, (3, 2***REMOVED******REMOVED***,
                      **kwargs***REMOVED***


if __name__ == "__main__":
    np.testing.run_module_suite(***REMOVED***
