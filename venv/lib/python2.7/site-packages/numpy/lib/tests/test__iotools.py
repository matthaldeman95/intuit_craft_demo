from __future__ import division, absolute_import, print_function

import sys
import time
from datetime import date

import numpy as np
from numpy.compat import asbytes, asbytes_nested
from numpy.testing import (
    run_module_suite, TestCase, assert_, assert_equal, assert_allclose,
    assert_raises
    ***REMOVED***
from numpy.lib._iotools import (
    LineSplitter, NameValidator, StringConverter,
    has_nested_fields, easy_dtype, flatten_dtype
    ***REMOVED***


class TestLineSplitter(TestCase***REMOVED***:
    "Tests the LineSplitter class."

    def test_no_delimiter(self***REMOVED***:
        "Test LineSplitter w/o delimiter"
        strg = asbytes(" 1 2 3 4  5 # test"***REMOVED***
        test = LineSplitter(***REMOVED***(strg***REMOVED***
        assert_equal(test, asbytes_nested(['1', '2', '3', '4', '5'***REMOVED******REMOVED******REMOVED***
        test = LineSplitter(''***REMOVED***(strg***REMOVED***
        assert_equal(test, asbytes_nested(['1', '2', '3', '4', '5'***REMOVED******REMOVED******REMOVED***

    def test_space_delimiter(self***REMOVED***:
        "Test space delimiter"
        strg = asbytes(" 1 2 3 4  5 # test"***REMOVED***
        test = LineSplitter(asbytes(' '***REMOVED******REMOVED***(strg***REMOVED***
        assert_equal(test, asbytes_nested(['1', '2', '3', '4', '', '5'***REMOVED******REMOVED******REMOVED***
        test = LineSplitter(asbytes('  '***REMOVED******REMOVED***(strg***REMOVED***
        assert_equal(test, asbytes_nested(['1 2 3 4', '5'***REMOVED******REMOVED******REMOVED***

    def test_tab_delimiter(self***REMOVED***:
        "Test tab delimiter"
        strg = asbytes(" 1\t 2\t 3\t 4\t 5  6"***REMOVED***
        test = LineSplitter(asbytes('\t'***REMOVED******REMOVED***(strg***REMOVED***
        assert_equal(test, asbytes_nested(['1', '2', '3', '4', '5  6'***REMOVED******REMOVED******REMOVED***
        strg = asbytes(" 1  2\t 3  4\t 5  6"***REMOVED***
        test = LineSplitter(asbytes('\t'***REMOVED******REMOVED***(strg***REMOVED***
        assert_equal(test, asbytes_nested(['1  2', '3  4', '5  6'***REMOVED******REMOVED******REMOVED***

    def test_other_delimiter(self***REMOVED***:
        "Test LineSplitter on delimiter"
        strg = asbytes("1,2,3,4,,5"***REMOVED***
        test = LineSplitter(asbytes(','***REMOVED******REMOVED***(strg***REMOVED***
        assert_equal(test, asbytes_nested(['1', '2', '3', '4', '', '5'***REMOVED******REMOVED******REMOVED***
        #
        strg = asbytes(" 1,2,3,4,,5 # test"***REMOVED***
        test = LineSplitter(asbytes(','***REMOVED******REMOVED***(strg***REMOVED***
        assert_equal(test, asbytes_nested(['1', '2', '3', '4', '', '5'***REMOVED******REMOVED******REMOVED***

    def test_constant_fixed_width(self***REMOVED***:
        "Test LineSplitter w/ fixed-width fields"
        strg = asbytes("  1  2  3  4     5   # test"***REMOVED***
        test = LineSplitter(3***REMOVED***(strg***REMOVED***
        assert_equal(test, asbytes_nested(['1', '2', '3', '4', '', '5', ''***REMOVED******REMOVED******REMOVED***
        #
        strg = asbytes("  1     3  4  5  6# test"***REMOVED***
        test = LineSplitter(20***REMOVED***(strg***REMOVED***
        assert_equal(test, asbytes_nested(['1     3  4  5  6'***REMOVED******REMOVED******REMOVED***
        #
        strg = asbytes("  1     3  4  5  6# test"***REMOVED***
        test = LineSplitter(30***REMOVED***(strg***REMOVED***
        assert_equal(test, asbytes_nested(['1     3  4  5  6'***REMOVED******REMOVED******REMOVED***

    def test_variable_fixed_width(self***REMOVED***:
        strg = asbytes("  1     3  4  5  6# test"***REMOVED***
        test = LineSplitter((3, 6, 6, 3***REMOVED******REMOVED***(strg***REMOVED***
        assert_equal(test, asbytes_nested(['1', '3', '4  5', '6'***REMOVED******REMOVED******REMOVED***
        #
        strg = asbytes("  1     3  4  5  6# test"***REMOVED***
        test = LineSplitter((6, 6, 9***REMOVED******REMOVED***(strg***REMOVED***
        assert_equal(test, asbytes_nested(['1', '3  4', '5  6'***REMOVED******REMOVED******REMOVED***

# -----------------------------------------------------------------------------


class TestNameValidator(TestCase***REMOVED***:

    def test_case_sensitivity(self***REMOVED***:
        "Test case sensitivity"
        names = ['A', 'a', 'b', 'c'***REMOVED***
        test = NameValidator(***REMOVED***.validate(names***REMOVED***
        assert_equal(test, ['A', 'a', 'b', 'c'***REMOVED******REMOVED***
        test = NameValidator(case_sensitive=False***REMOVED***.validate(names***REMOVED***
        assert_equal(test, ['A', 'A_1', 'B', 'C'***REMOVED******REMOVED***
        test = NameValidator(case_sensitive='upper'***REMOVED***.validate(names***REMOVED***
        assert_equal(test, ['A', 'A_1', 'B', 'C'***REMOVED******REMOVED***
        test = NameValidator(case_sensitive='lower'***REMOVED***.validate(names***REMOVED***
        assert_equal(test, ['a', 'a_1', 'b', 'c'***REMOVED******REMOVED***

        # check exceptions
        assert_raises(ValueError, NameValidator, case_sensitive='foobar'***REMOVED***

    def test_excludelist(self***REMOVED***:
        "Test excludelist"
        names = ['dates', 'data', 'Other Data', 'mask'***REMOVED***
        validator = NameValidator(excludelist=['dates', 'data', 'mask'***REMOVED******REMOVED***
        test = validator.validate(names***REMOVED***
        assert_equal(test, ['dates_', 'data_', 'Other_Data', 'mask_'***REMOVED******REMOVED***

    def test_missing_names(self***REMOVED***:
        "Test validate missing names"
        namelist = ('a', 'b', 'c'***REMOVED***
        validator = NameValidator(***REMOVED***
        assert_equal(validator(namelist***REMOVED***, ['a', 'b', 'c'***REMOVED******REMOVED***
        namelist = ('', 'b', 'c'***REMOVED***
        assert_equal(validator(namelist***REMOVED***, ['f0', 'b', 'c'***REMOVED******REMOVED***
        namelist = ('a', 'b', ''***REMOVED***
        assert_equal(validator(namelist***REMOVED***, ['a', 'b', 'f0'***REMOVED******REMOVED***
        namelist = ('', 'f0', ''***REMOVED***
        assert_equal(validator(namelist***REMOVED***, ['f1', 'f0', 'f2'***REMOVED******REMOVED***

    def test_validate_nb_names(self***REMOVED***:
        "Test validate nb names"
        namelist = ('a', 'b', 'c'***REMOVED***
        validator = NameValidator(***REMOVED***
        assert_equal(validator(namelist, nbfields=1***REMOVED***, ('a',***REMOVED******REMOVED***
        assert_equal(validator(namelist, nbfields=5, defaultfmt="g%i"***REMOVED***,
                     ['a', 'b', 'c', 'g0', 'g1'***REMOVED******REMOVED***

    def test_validate_wo_names(self***REMOVED***:
        "Test validate no names"
        namelist = None
        validator = NameValidator(***REMOVED***
        assert_(validator(namelist***REMOVED*** is None***REMOVED***
        assert_equal(validator(namelist, nbfields=3***REMOVED***, ['f0', 'f1', 'f2'***REMOVED******REMOVED***

# -----------------------------------------------------------------------------


def _bytes_to_date(s***REMOVED***:
    if sys.version_info[0***REMOVED*** >= 3:
        return date(*time.strptime(s.decode('latin1'***REMOVED***, "%Y-%m-%d"***REMOVED***[:3***REMOVED******REMOVED***
    else:
        return date(*time.strptime(s, "%Y-%m-%d"***REMOVED***[:3***REMOVED******REMOVED***


class TestStringConverter(TestCase***REMOVED***:
    "Test StringConverter"

    def test_creation(self***REMOVED***:
        "Test creation of a StringConverter"
        converter = StringConverter(int, -99999***REMOVED***
        assert_equal(converter._status, 1***REMOVED***
        assert_equal(converter.default, -99999***REMOVED***

    def test_upgrade(self***REMOVED***:
        "Tests the upgrade method."

        converter = StringConverter(***REMOVED***
        assert_equal(converter._status, 0***REMOVED***

        # test int
        assert_equal(converter.upgrade(asbytes('0'***REMOVED******REMOVED***, 0***REMOVED***
        assert_equal(converter._status, 1***REMOVED***

        # On systems where integer defaults to 32-bit, the statuses will be
        # offset by one, so we check for this here.
        import numpy.core.numeric as nx
        status_offset = int(nx.dtype(nx.integer***REMOVED***.itemsize < nx.dtype(nx.int64***REMOVED***.itemsize***REMOVED***

        # test int > 2**32
        assert_equal(converter.upgrade(asbytes('17179869184'***REMOVED******REMOVED***, 17179869184***REMOVED***
        assert_equal(converter._status, 1 + status_offset***REMOVED***

        # test float
        assert_allclose(converter.upgrade(asbytes('0.'***REMOVED******REMOVED***, 0.0***REMOVED***
        assert_equal(converter._status, 2 + status_offset***REMOVED***

        # test complex
        assert_equal(converter.upgrade(asbytes('0j'***REMOVED******REMOVED***, complex('0j'***REMOVED******REMOVED***
        assert_equal(converter._status, 3 + status_offset***REMOVED***

        # test str
        assert_equal(converter.upgrade(asbytes('a'***REMOVED******REMOVED***, asbytes('a'***REMOVED******REMOVED***
        assert_equal(converter._status, len(converter._mapper***REMOVED*** - 1***REMOVED***

    def test_missing(self***REMOVED***:
        "Tests the use of missing values."
        converter = StringConverter(missing_values=(asbytes('missing'***REMOVED***,
                                                    asbytes('missed'***REMOVED******REMOVED******REMOVED***
        converter.upgrade(asbytes('0'***REMOVED******REMOVED***
        assert_equal(converter(asbytes('0'***REMOVED******REMOVED***, 0***REMOVED***
        assert_equal(converter(asbytes(''***REMOVED******REMOVED***, converter.default***REMOVED***
        assert_equal(converter(asbytes('missing'***REMOVED******REMOVED***, converter.default***REMOVED***
        assert_equal(converter(asbytes('missed'***REMOVED******REMOVED***, converter.default***REMOVED***
        ***REMOVED***
            converter('miss'***REMOVED***
        except ValueError:
            pass

    def test_upgrademapper(self***REMOVED***:
        "Tests updatemapper"
        dateparser = _bytes_to_date
        StringConverter.upgrade_mapper(dateparser, date(2000, 1, 1***REMOVED******REMOVED***
        convert = StringConverter(dateparser, date(2000, 1, 1***REMOVED******REMOVED***
        test = convert(asbytes('2001-01-01'***REMOVED******REMOVED***
        assert_equal(test, date(2001, 1, 1***REMOVED******REMOVED***
        test = convert(asbytes('2009-01-01'***REMOVED******REMOVED***
        assert_equal(test, date(2009, 1, 1***REMOVED******REMOVED***
        test = convert(asbytes(''***REMOVED******REMOVED***
        assert_equal(test, date(2000, 1, 1***REMOVED******REMOVED***

    def test_string_to_object(self***REMOVED***:
        "Make sure that string-to-object functions are properly recognized"
        conv = StringConverter(_bytes_to_date***REMOVED***
        assert_equal(conv._mapper[-2***REMOVED***[0***REMOVED***(0***REMOVED***, 0j***REMOVED***
        assert_(hasattr(conv, 'default'***REMOVED******REMOVED***

    def test_keep_default(self***REMOVED***:
        "Make sure we don't lose an explicit default"
        converter = StringConverter(None, missing_values=asbytes(''***REMOVED***,
                                    default=-999***REMOVED***
        converter.upgrade(asbytes('3.14159265'***REMOVED******REMOVED***
        assert_equal(converter.default, -999***REMOVED***
        assert_equal(converter.type, np.dtype(float***REMOVED******REMOVED***
        #
        converter = StringConverter(
            None, missing_values=asbytes(''***REMOVED***, default=0***REMOVED***
        converter.upgrade(asbytes('3.14159265'***REMOVED******REMOVED***
        assert_equal(converter.default, 0***REMOVED***
        assert_equal(converter.type, np.dtype(float***REMOVED******REMOVED***

    def test_keep_default_zero(self***REMOVED***:
        "Check that we don't lose a default of 0"
        converter = StringConverter(int, default=0,
                                    missing_values=asbytes("N/A"***REMOVED******REMOVED***
        assert_equal(converter.default, 0***REMOVED***

    def test_keep_missing_values(self***REMOVED***:
        "Check that we're not losing missing values"
        converter = StringConverter(int, default=0,
                                    missing_values=asbytes("N/A"***REMOVED******REMOVED***
        assert_equal(
            converter.missing_values, set(asbytes_nested(['', 'N/A'***REMOVED******REMOVED******REMOVED******REMOVED***

    def test_int64_dtype(self***REMOVED***:
        "Check that int64 integer types can be specified"
        converter = StringConverter(np.int64, default=0***REMOVED***
        val = asbytes("-9223372036854775807"***REMOVED***
        assert_(converter(val***REMOVED*** == -9223372036854775807***REMOVED***
        val = asbytes("9223372036854775807"***REMOVED***
        assert_(converter(val***REMOVED*** == 9223372036854775807***REMOVED***

    def test_uint64_dtype(self***REMOVED***:
        "Check that uint64 integer types can be specified"
        converter = StringConverter(np.uint64, default=0***REMOVED***
        val = asbytes("9223372043271415339"***REMOVED***
        assert_(converter(val***REMOVED*** == 9223372043271415339***REMOVED***


class TestMiscFunctions(TestCase***REMOVED***:

    def test_has_nested_dtype(self***REMOVED***:
        "Test has_nested_dtype"
        ndtype = np.dtype(np.float***REMOVED***
        assert_equal(has_nested_fields(ndtype***REMOVED***, False***REMOVED***
        ndtype = np.dtype([('A', '|S3'***REMOVED***, ('B', float***REMOVED******REMOVED******REMOVED***
        assert_equal(has_nested_fields(ndtype***REMOVED***, False***REMOVED***
        ndtype = np.dtype([('A', int***REMOVED***, ('B', [('BA', float***REMOVED***, ('BB', '|S1'***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        assert_equal(has_nested_fields(ndtype***REMOVED***, True***REMOVED***

    def test_easy_dtype(self***REMOVED***:
        "Test ndtype on dtypes"
        # Simple case
        ndtype = float
        assert_equal(easy_dtype(ndtype***REMOVED***, np.dtype(float***REMOVED******REMOVED***
        # As string w/o names
        ndtype = "i4, f8"
        assert_equal(easy_dtype(ndtype***REMOVED***,
                     np.dtype([('f0', "i4"***REMOVED***, ('f1', "f8"***REMOVED******REMOVED******REMOVED******REMOVED***
        # As string w/o names but different default format
        assert_equal(easy_dtype(ndtype, defaultfmt="field_%03i"***REMOVED***,
                     np.dtype([('field_000', "i4"***REMOVED***, ('field_001', "f8"***REMOVED******REMOVED******REMOVED******REMOVED***
        # As string w/ names
        ndtype = "i4, f8"
        assert_equal(easy_dtype(ndtype, names="a, b"***REMOVED***,
                     np.dtype([('a', "i4"***REMOVED***, ('b', "f8"***REMOVED******REMOVED******REMOVED******REMOVED***
        # As string w/ names (too many***REMOVED***
        ndtype = "i4, f8"
        assert_equal(easy_dtype(ndtype, names="a, b, c"***REMOVED***,
                     np.dtype([('a', "i4"***REMOVED***, ('b', "f8"***REMOVED******REMOVED******REMOVED******REMOVED***
        # As string w/ names (not enough***REMOVED***
        ndtype = "i4, f8"
        assert_equal(easy_dtype(ndtype, names=", b"***REMOVED***,
                     np.dtype([('f0', "i4"***REMOVED***, ('b', "f8"***REMOVED******REMOVED******REMOVED******REMOVED***
        # ... (with different default format***REMOVED***
        assert_equal(easy_dtype(ndtype, names="a", defaultfmt="f%02i"***REMOVED***,
                     np.dtype([('a', "i4"***REMOVED***, ('f00', "f8"***REMOVED******REMOVED******REMOVED******REMOVED***
        # As list of tuples w/o names
        ndtype = [('A', int***REMOVED***, ('B', float***REMOVED******REMOVED***
        assert_equal(easy_dtype(ndtype***REMOVED***, np.dtype([('A', int***REMOVED***, ('B', float***REMOVED******REMOVED******REMOVED******REMOVED***
        # As list of tuples w/ names
        assert_equal(easy_dtype(ndtype, names="a,b"***REMOVED***,
                     np.dtype([('a', int***REMOVED***, ('b', float***REMOVED******REMOVED******REMOVED******REMOVED***
        # As list of tuples w/ not enough names
        assert_equal(easy_dtype(ndtype, names="a"***REMOVED***,
                     np.dtype([('a', int***REMOVED***, ('f0', float***REMOVED******REMOVED******REMOVED******REMOVED***
        # As list of tuples w/ too many names
        assert_equal(easy_dtype(ndtype, names="a,b,c"***REMOVED***,
                     np.dtype([('a', int***REMOVED***, ('b', float***REMOVED******REMOVED******REMOVED******REMOVED***
        # As list of types w/o names
        ndtype = (int, float, float***REMOVED***
        assert_equal(easy_dtype(ndtype***REMOVED***,
                     np.dtype([('f0', int***REMOVED***, ('f1', float***REMOVED***, ('f2', float***REMOVED******REMOVED******REMOVED******REMOVED***
        # As list of types w names
        ndtype = (int, float, float***REMOVED***
        assert_equal(easy_dtype(ndtype, names="a, b, c"***REMOVED***,
                     np.dtype([('a', int***REMOVED***, ('b', float***REMOVED***, ('c', float***REMOVED******REMOVED******REMOVED******REMOVED***
        # As simple dtype w/ names
        ndtype = np.dtype(float***REMOVED***
        assert_equal(easy_dtype(ndtype, names="a, b, c"***REMOVED***,
                     np.dtype([(_, float***REMOVED*** for _ in ('a', 'b', 'c'***REMOVED******REMOVED******REMOVED******REMOVED***
        # As simple dtype w/o names (but multiple fields***REMOVED***
        ndtype = np.dtype(float***REMOVED***
        assert_equal(
            easy_dtype(ndtype, names=['', '', ''***REMOVED***, defaultfmt="f%02i"***REMOVED***,
            np.dtype([(_, float***REMOVED*** for _ in ('f00', 'f01', 'f02'***REMOVED******REMOVED******REMOVED******REMOVED***

    def test_flatten_dtype(self***REMOVED***:
        "Testing flatten_dtype"
        # Standard dtype
        dt = np.dtype([("a", "f8"***REMOVED***, ("b", "f8"***REMOVED******REMOVED******REMOVED***
        dt_flat = flatten_dtype(dt***REMOVED***
        assert_equal(dt_flat, [float, float***REMOVED******REMOVED***
        # Recursive dtype
        dt = np.dtype([("a", [("aa", '|S1'***REMOVED***, ("ab", '|S2'***REMOVED******REMOVED******REMOVED***, ("b", int***REMOVED******REMOVED******REMOVED***
        dt_flat = flatten_dtype(dt***REMOVED***
        assert_equal(dt_flat, [np.dtype('|S1'***REMOVED***, np.dtype('|S2'***REMOVED***, int***REMOVED******REMOVED***
        # dtype with shaped fields
        dt = np.dtype([("a", (float, 2***REMOVED******REMOVED***, ("b", (int, 3***REMOVED******REMOVED******REMOVED******REMOVED***
        dt_flat = flatten_dtype(dt***REMOVED***
        assert_equal(dt_flat, [float, int***REMOVED******REMOVED***
        dt_flat = flatten_dtype(dt, True***REMOVED***
        assert_equal(dt_flat, [float***REMOVED*** * 2 + [int***REMOVED*** * 3***REMOVED***
        # dtype w/ titles
        dt = np.dtype([(("a", "A"***REMOVED***, "f8"***REMOVED***, (("b", "B"***REMOVED***, "f8"***REMOVED******REMOVED******REMOVED***
        dt_flat = flatten_dtype(dt***REMOVED***
        assert_equal(dt_flat, [float, float***REMOVED******REMOVED***

if __name__ == "__main__":
    run_module_suite(***REMOVED***
