from __future__ import division, absolute_import, print_function

import numpy as np
from numpy.compat import long
from numpy.testing import (
    TestCase, assert_, assert_equal, assert_array_equal, run_module_suite
    ***REMOVED***
from numpy.lib.type_check import (
    common_type, mintypecode, isreal, iscomplex, isposinf, isneginf,
    nan_to_num, isrealobj, iscomplexobj, asfarray, real_if_close
    ***REMOVED***


def assert_all(x***REMOVED***:
    assert_(np.all(x***REMOVED***, x***REMOVED***


class TestCommonType(TestCase***REMOVED***:
    def test_basic(self***REMOVED***:
        ai32 = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED***, dtype=np.int32***REMOVED***
        af16 = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED***, dtype=np.float16***REMOVED***
        af32 = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED***, dtype=np.float32***REMOVED***
        af64 = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED***, dtype=np.float64***REMOVED***
        acs = np.array([[1+5j, 2+6j***REMOVED***, [3+7j, 4+8j***REMOVED******REMOVED***, dtype=np.csingle***REMOVED***
        acd = np.array([[1+5j, 2+6j***REMOVED***, [3+7j, 4+8j***REMOVED******REMOVED***, dtype=np.cdouble***REMOVED***
        assert_(common_type(ai32***REMOVED*** == np.float64***REMOVED***
        assert_(common_type(af16***REMOVED*** == np.float16***REMOVED***
        assert_(common_type(af32***REMOVED*** == np.float32***REMOVED***
        assert_(common_type(af64***REMOVED*** == np.float64***REMOVED***
        assert_(common_type(acs***REMOVED*** == np.csingle***REMOVED***
        assert_(common_type(acd***REMOVED*** == np.cdouble***REMOVED***


class TestMintypecode(TestCase***REMOVED***:

    def test_default_1(self***REMOVED***:
        for itype in '1bcsuwil':
            assert_equal(mintypecode(itype***REMOVED***, 'd'***REMOVED***
        assert_equal(mintypecode('f'***REMOVED***, 'f'***REMOVED***
        assert_equal(mintypecode('d'***REMOVED***, 'd'***REMOVED***
        assert_equal(mintypecode('F'***REMOVED***, 'F'***REMOVED***
        assert_equal(mintypecode('D'***REMOVED***, 'D'***REMOVED***

    def test_default_2(self***REMOVED***:
        for itype in '1bcsuwil':
            assert_equal(mintypecode(itype+'f'***REMOVED***, 'f'***REMOVED***
            assert_equal(mintypecode(itype+'d'***REMOVED***, 'd'***REMOVED***
            assert_equal(mintypecode(itype+'F'***REMOVED***, 'F'***REMOVED***
            assert_equal(mintypecode(itype+'D'***REMOVED***, 'D'***REMOVED***
        assert_equal(mintypecode('ff'***REMOVED***, 'f'***REMOVED***
        assert_equal(mintypecode('fd'***REMOVED***, 'd'***REMOVED***
        assert_equal(mintypecode('fF'***REMOVED***, 'F'***REMOVED***
        assert_equal(mintypecode('fD'***REMOVED***, 'D'***REMOVED***
        assert_equal(mintypecode('df'***REMOVED***, 'd'***REMOVED***
        assert_equal(mintypecode('dd'***REMOVED***, 'd'***REMOVED***
        #assert_equal(mintypecode('dF',savespace=1***REMOVED***,'F'***REMOVED***
        assert_equal(mintypecode('dF'***REMOVED***, 'D'***REMOVED***
        assert_equal(mintypecode('dD'***REMOVED***, 'D'***REMOVED***
        assert_equal(mintypecode('Ff'***REMOVED***, 'F'***REMOVED***
        #assert_equal(mintypecode('Fd',savespace=1***REMOVED***,'F'***REMOVED***
        assert_equal(mintypecode('Fd'***REMOVED***, 'D'***REMOVED***
        assert_equal(mintypecode('FF'***REMOVED***, 'F'***REMOVED***
        assert_equal(mintypecode('FD'***REMOVED***, 'D'***REMOVED***
        assert_equal(mintypecode('Df'***REMOVED***, 'D'***REMOVED***
        assert_equal(mintypecode('Dd'***REMOVED***, 'D'***REMOVED***
        assert_equal(mintypecode('DF'***REMOVED***, 'D'***REMOVED***
        assert_equal(mintypecode('DD'***REMOVED***, 'D'***REMOVED***

    def test_default_3(self***REMOVED***:
        assert_equal(mintypecode('fdF'***REMOVED***, 'D'***REMOVED***
        #assert_equal(mintypecode('fdF',savespace=1***REMOVED***,'F'***REMOVED***
        assert_equal(mintypecode('fdD'***REMOVED***, 'D'***REMOVED***
        assert_equal(mintypecode('fFD'***REMOVED***, 'D'***REMOVED***
        assert_equal(mintypecode('dFD'***REMOVED***, 'D'***REMOVED***

        assert_equal(mintypecode('ifd'***REMOVED***, 'd'***REMOVED***
        assert_equal(mintypecode('ifF'***REMOVED***, 'F'***REMOVED***
        assert_equal(mintypecode('ifD'***REMOVED***, 'D'***REMOVED***
        assert_equal(mintypecode('idF'***REMOVED***, 'D'***REMOVED***
        #assert_equal(mintypecode('idF',savespace=1***REMOVED***,'F'***REMOVED***
        assert_equal(mintypecode('idD'***REMOVED***, 'D'***REMOVED***


class TestIsscalar(TestCase***REMOVED***:

    def test_basic(self***REMOVED***:
        assert_(np.isscalar(3***REMOVED******REMOVED***
        assert_(not np.isscalar([3***REMOVED******REMOVED******REMOVED***
        assert_(not np.isscalar((3,***REMOVED******REMOVED******REMOVED***
        assert_(np.isscalar(3j***REMOVED******REMOVED***
        assert_(np.isscalar(long(10***REMOVED******REMOVED******REMOVED***
        assert_(np.isscalar(4.0***REMOVED******REMOVED***


class TestReal(TestCase***REMOVED***:

    def test_real(self***REMOVED***:
        y = np.random.rand(10,***REMOVED***
        assert_array_equal(y, np.real(y***REMOVED******REMOVED***

    def test_cmplx(self***REMOVED***:
        y = np.random.rand(10,***REMOVED***+1j*np.random.rand(10,***REMOVED***
        assert_array_equal(y.real, np.real(y***REMOVED******REMOVED***


class TestImag(TestCase***REMOVED***:

    def test_real(self***REMOVED***:
        y = np.random.rand(10,***REMOVED***
        assert_array_equal(0, np.imag(y***REMOVED******REMOVED***

    def test_cmplx(self***REMOVED***:
        y = np.random.rand(10,***REMOVED***+1j*np.random.rand(10,***REMOVED***
        assert_array_equal(y.imag, np.imag(y***REMOVED******REMOVED***


class TestIscomplex(TestCase***REMOVED***:

    def test_fail(self***REMOVED***:
        z = np.array([-1, 0, 1***REMOVED******REMOVED***
        res = iscomplex(z***REMOVED***
        assert_(not np.sometrue(res, axis=0***REMOVED******REMOVED***

    def test_pass(self***REMOVED***:
        z = np.array([-1j, 1, 0***REMOVED******REMOVED***
        res = iscomplex(z***REMOVED***
        assert_array_equal(res, [1, 0, 0***REMOVED******REMOVED***


class TestIsreal(TestCase***REMOVED***:

    def test_pass(self***REMOVED***:
        z = np.array([-1, 0, 1j***REMOVED******REMOVED***
        res = isreal(z***REMOVED***
        assert_array_equal(res, [1, 1, 0***REMOVED******REMOVED***

    def test_fail(self***REMOVED***:
        z = np.array([-1j, 1, 0***REMOVED******REMOVED***
        res = isreal(z***REMOVED***
        assert_array_equal(res, [0, 1, 1***REMOVED******REMOVED***


class TestIscomplexobj(TestCase***REMOVED***:

    def test_basic(self***REMOVED***:
        z = np.array([-1, 0, 1***REMOVED******REMOVED***
        assert_(not iscomplexobj(z***REMOVED******REMOVED***
        z = np.array([-1j, 0, -1***REMOVED******REMOVED***
        assert_(iscomplexobj(z***REMOVED******REMOVED***


class TestIsrealobj(TestCase***REMOVED***:
    def test_basic(self***REMOVED***:
        z = np.array([-1, 0, 1***REMOVED******REMOVED***
        assert_(isrealobj(z***REMOVED******REMOVED***
        z = np.array([-1j, 0, -1***REMOVED******REMOVED***
        assert_(not isrealobj(z***REMOVED******REMOVED***


class TestIsnan(TestCase***REMOVED***:

    def test_goodvalues(self***REMOVED***:
        z = np.array((-1., 0., 1.***REMOVED******REMOVED***
        res = np.isnan(z***REMOVED*** == 0
        assert_all(np.all(res, axis=0***REMOVED******REMOVED***

    def test_posinf(self***REMOVED***:
        with np.errstate(divide='ignore'***REMOVED***:
            assert_all(np.isnan(np.array((1.,***REMOVED******REMOVED***/0.***REMOVED*** == 0***REMOVED***

    def test_neginf(self***REMOVED***:
        with np.errstate(divide='ignore'***REMOVED***:
            assert_all(np.isnan(np.array((-1.,***REMOVED******REMOVED***/0.***REMOVED*** == 0***REMOVED***

    def test_ind(self***REMOVED***:
        with np.errstate(divide='ignore', invalid='ignore'***REMOVED***:
            assert_all(np.isnan(np.array((0.,***REMOVED******REMOVED***/0.***REMOVED*** == 1***REMOVED***

    def test_integer(self***REMOVED***:
        assert_all(np.isnan(1***REMOVED*** == 0***REMOVED***

    def test_complex(self***REMOVED***:
        assert_all(np.isnan(1+1j***REMOVED*** == 0***REMOVED***

    def test_complex1(self***REMOVED***:
        with np.errstate(divide='ignore', invalid='ignore'***REMOVED***:
            assert_all(np.isnan(np.array(0+0j***REMOVED***/0.***REMOVED*** == 1***REMOVED***


class TestIsfinite(TestCase***REMOVED***:
    # Fixme, wrong place, isfinite now ufunc

    def test_goodvalues(self***REMOVED***:
        z = np.array((-1., 0., 1.***REMOVED******REMOVED***
        res = np.isfinite(z***REMOVED*** == 1
        assert_all(np.all(res, axis=0***REMOVED******REMOVED***

    def test_posinf(self***REMOVED***:
        with np.errstate(divide='ignore', invalid='ignore'***REMOVED***:
            assert_all(np.isfinite(np.array((1.,***REMOVED******REMOVED***/0.***REMOVED*** == 0***REMOVED***

    def test_neginf(self***REMOVED***:
        with np.errstate(divide='ignore', invalid='ignore'***REMOVED***:
            assert_all(np.isfinite(np.array((-1.,***REMOVED******REMOVED***/0.***REMOVED*** == 0***REMOVED***

    def test_ind(self***REMOVED***:
        with np.errstate(divide='ignore', invalid='ignore'***REMOVED***:
            assert_all(np.isfinite(np.array((0.,***REMOVED******REMOVED***/0.***REMOVED*** == 0***REMOVED***

    def test_integer(self***REMOVED***:
        assert_all(np.isfinite(1***REMOVED*** == 1***REMOVED***

    def test_complex(self***REMOVED***:
        assert_all(np.isfinite(1+1j***REMOVED*** == 1***REMOVED***

    def test_complex1(self***REMOVED***:
        with np.errstate(divide='ignore', invalid='ignore'***REMOVED***:
            assert_all(np.isfinite(np.array(1+1j***REMOVED***/0.***REMOVED*** == 0***REMOVED***


class TestIsinf(TestCase***REMOVED***:
    # Fixme, wrong place, isinf now ufunc

    def test_goodvalues(self***REMOVED***:
        z = np.array((-1., 0., 1.***REMOVED******REMOVED***
        res = np.isinf(z***REMOVED*** == 0
        assert_all(np.all(res, axis=0***REMOVED******REMOVED***

    def test_posinf(self***REMOVED***:
        with np.errstate(divide='ignore', invalid='ignore'***REMOVED***:
            assert_all(np.isinf(np.array((1.,***REMOVED******REMOVED***/0.***REMOVED*** == 1***REMOVED***

    def test_posinf_scalar(self***REMOVED***:
        with np.errstate(divide='ignore', invalid='ignore'***REMOVED***:
            assert_all(np.isinf(np.array(1.,***REMOVED***/0.***REMOVED*** == 1***REMOVED***

    def test_neginf(self***REMOVED***:
        with np.errstate(divide='ignore', invalid='ignore'***REMOVED***:
            assert_all(np.isinf(np.array((-1.,***REMOVED******REMOVED***/0.***REMOVED*** == 1***REMOVED***

    def test_neginf_scalar(self***REMOVED***:
        with np.errstate(divide='ignore', invalid='ignore'***REMOVED***:
            assert_all(np.isinf(np.array(-1.***REMOVED***/0.***REMOVED*** == 1***REMOVED***

    def test_ind(self***REMOVED***:
        with np.errstate(divide='ignore', invalid='ignore'***REMOVED***:
            assert_all(np.isinf(np.array((0.,***REMOVED******REMOVED***/0.***REMOVED*** == 0***REMOVED***


class TestIsposinf(TestCase***REMOVED***:

    def test_generic(self***REMOVED***:
        with np.errstate(divide='ignore', invalid='ignore'***REMOVED***:
            vals = isposinf(np.array((-1., 0, 1***REMOVED******REMOVED***/0.***REMOVED***
        assert_(vals[0***REMOVED*** == 0***REMOVED***
        assert_(vals[1***REMOVED*** == 0***REMOVED***
        assert_(vals[2***REMOVED*** == 1***REMOVED***


class TestIsneginf(TestCase***REMOVED***:

    def test_generic(self***REMOVED***:
        with np.errstate(divide='ignore', invalid='ignore'***REMOVED***:
            vals = isneginf(np.array((-1., 0, 1***REMOVED******REMOVED***/0.***REMOVED***
        assert_(vals[0***REMOVED*** == 1***REMOVED***
        assert_(vals[1***REMOVED*** == 0***REMOVED***
        assert_(vals[2***REMOVED*** == 0***REMOVED***


class TestNanToNum(TestCase***REMOVED***:

    def test_generic(self***REMOVED***:
        with np.errstate(divide='ignore', invalid='ignore'***REMOVED***:
            vals = nan_to_num(np.array((-1., 0, 1***REMOVED******REMOVED***/0.***REMOVED***
        assert_all(vals[0***REMOVED*** < -1e10***REMOVED*** and assert_all(np.isfinite(vals[0***REMOVED******REMOVED******REMOVED***
        assert_(vals[1***REMOVED*** == 0***REMOVED***
        assert_all(vals[2***REMOVED*** > 1e10***REMOVED*** and assert_all(np.isfinite(vals[2***REMOVED******REMOVED******REMOVED***

    def test_integer(self***REMOVED***:
        vals = nan_to_num(1***REMOVED***
        assert_all(vals == 1***REMOVED***
        vals = nan_to_num([1***REMOVED******REMOVED***
        assert_array_equal(vals, np.array([1***REMOVED***, np.int***REMOVED******REMOVED***

    def test_complex_good(self***REMOVED***:
        vals = nan_to_num(1+1j***REMOVED***
        assert_all(vals == 1+1j***REMOVED***

    def test_complex_bad(self***REMOVED***:
        with np.errstate(divide='ignore', invalid='ignore'***REMOVED***:
            v = 1 + 1j
            v += np.array(0+1.j***REMOVED***/0.
        vals = nan_to_num(v***REMOVED***
        # !! This is actually (unexpectedly***REMOVED*** zero
        assert_all(np.isfinite(vals***REMOVED******REMOVED***

    def test_complex_bad2(self***REMOVED***:
        with np.errstate(divide='ignore', invalid='ignore'***REMOVED***:
            v = 1 + 1j
            v += np.array(-1+1.j***REMOVED***/0.
        vals = nan_to_num(v***REMOVED***
        assert_all(np.isfinite(vals***REMOVED******REMOVED***
        # Fixme
        #assert_all(vals.imag > 1e10***REMOVED***  and assert_all(np.isfinite(vals***REMOVED******REMOVED***
        # !! This is actually (unexpectedly***REMOVED*** positive
        # !! inf.  Comment out for now, and see if it
        # !! changes
        #assert_all(vals.real < -1e10***REMOVED*** and assert_all(np.isfinite(vals***REMOVED******REMOVED***


class TestRealIfClose(TestCase***REMOVED***:

    def test_basic(self***REMOVED***:
        a = np.random.rand(10***REMOVED***
        b = real_if_close(a+1e-15j***REMOVED***
        assert_all(isrealobj(b***REMOVED******REMOVED***
        assert_array_equal(a, b***REMOVED***
        b = real_if_close(a+1e-7j***REMOVED***
        assert_all(iscomplexobj(b***REMOVED******REMOVED***
        b = real_if_close(a+1e-7j, tol=1e-6***REMOVED***
        assert_all(isrealobj(b***REMOVED******REMOVED***


class TestArrayConversion(TestCase***REMOVED***:

    def test_asfarray(self***REMOVED***:
        a = asfarray(np.array([1, 2, 3***REMOVED******REMOVED******REMOVED***
        assert_equal(a.__class__, np.ndarray***REMOVED***
        assert_(np.issubdtype(a.dtype, np.float***REMOVED******REMOVED***

if __name__ == "__main__":
    run_module_suite(***REMOVED***
