***REMOVED***Test functions for matrix module

***REMOVED***
from __future__ import division, absolute_import, print_function

from numpy.testing import (
    TestCase, run_module_suite, assert_equal, assert_array_equal,
    assert_array_max_ulp, assert_array_almost_equal, assert_raises, rand,
    ***REMOVED***

from numpy import (
    arange, rot90, add, fliplr, flipud, zeros, ones, eye, array, diag,
    histogram2d, tri, mask_indices, triu_indices, triu_indices_from,
    tril_indices, tril_indices_from, vander,
    ***REMOVED***

import numpy as np
from numpy.compat import asbytes_nested


def get_mat(n***REMOVED***:
    data = arange(n***REMOVED***
    data = add.outer(data, data***REMOVED***
    return data


class TestEye(TestCase***REMOVED***:
    def test_basic(self***REMOVED***:
        assert_equal(eye(4***REMOVED***,
                     array([[1, 0, 0, 0***REMOVED***,
                            [0, 1, 0, 0***REMOVED***,
                            [0, 0, 1, 0***REMOVED***,
                            [0, 0, 0, 1***REMOVED******REMOVED******REMOVED******REMOVED***

        assert_equal(eye(4, dtype='f'***REMOVED***,
                     array([[1, 0, 0, 0***REMOVED***,
                            [0, 1, 0, 0***REMOVED***,
                            [0, 0, 1, 0***REMOVED***,
                            [0, 0, 0, 1***REMOVED******REMOVED***, 'f'***REMOVED******REMOVED***

        assert_equal(eye(3***REMOVED*** == 1,
                     eye(3, dtype=bool***REMOVED******REMOVED***

    def test_diag(self***REMOVED***:
        assert_equal(eye(4, k=1***REMOVED***,
                     array([[0, 1, 0, 0***REMOVED***,
                            [0, 0, 1, 0***REMOVED***,
                            [0, 0, 0, 1***REMOVED***,
                            [0, 0, 0, 0***REMOVED******REMOVED******REMOVED******REMOVED***

        assert_equal(eye(4, k=-1***REMOVED***,
                     array([[0, 0, 0, 0***REMOVED***,
                            [1, 0, 0, 0***REMOVED***,
                            [0, 1, 0, 0***REMOVED***,
                            [0, 0, 1, 0***REMOVED******REMOVED******REMOVED******REMOVED***

    def test_2d(self***REMOVED***:
        assert_equal(eye(4, 3***REMOVED***,
                     array([[1, 0, 0***REMOVED***,
                            [0, 1, 0***REMOVED***,
                            [0, 0, 1***REMOVED***,
                            [0, 0, 0***REMOVED******REMOVED******REMOVED******REMOVED***

        assert_equal(eye(3, 4***REMOVED***,
                     array([[1, 0, 0, 0***REMOVED***,
                            [0, 1, 0, 0***REMOVED***,
                            [0, 0, 1, 0***REMOVED******REMOVED******REMOVED******REMOVED***

    def test_diag2d(self***REMOVED***:
        assert_equal(eye(3, 4, k=2***REMOVED***,
                     array([[0, 0, 1, 0***REMOVED***,
                            [0, 0, 0, 1***REMOVED***,
                            [0, 0, 0, 0***REMOVED******REMOVED******REMOVED******REMOVED***

        assert_equal(eye(4, 3, k=-2***REMOVED***,
                     array([[0, 0, 0***REMOVED***,
                            [0, 0, 0***REMOVED***,
                            [1, 0, 0***REMOVED***,
                            [0, 1, 0***REMOVED******REMOVED******REMOVED******REMOVED***

    def test_eye_bounds(self***REMOVED***:
        assert_equal(eye(2, 2, 1***REMOVED***, [[0, 1***REMOVED***, [0, 0***REMOVED******REMOVED******REMOVED***
        assert_equal(eye(2, 2, -1***REMOVED***, [[0, 0***REMOVED***, [1, 0***REMOVED******REMOVED******REMOVED***
        assert_equal(eye(2, 2, 2***REMOVED***, [[0, 0***REMOVED***, [0, 0***REMOVED******REMOVED******REMOVED***
        assert_equal(eye(2, 2, -2***REMOVED***, [[0, 0***REMOVED***, [0, 0***REMOVED******REMOVED******REMOVED***
        assert_equal(eye(3, 2, 2***REMOVED***, [[0, 0***REMOVED***, [0, 0***REMOVED***, [0, 0***REMOVED******REMOVED******REMOVED***
        assert_equal(eye(3, 2, 1***REMOVED***, [[0, 1***REMOVED***, [0, 0***REMOVED***, [0, 0***REMOVED******REMOVED******REMOVED***
        assert_equal(eye(3, 2, -1***REMOVED***, [[0, 0***REMOVED***, [1, 0***REMOVED***, [0, 1***REMOVED******REMOVED******REMOVED***
        assert_equal(eye(3, 2, -2***REMOVED***, [[0, 0***REMOVED***, [0, 0***REMOVED***, [1, 0***REMOVED******REMOVED******REMOVED***
        assert_equal(eye(3, 2, -3***REMOVED***, [[0, 0***REMOVED***, [0, 0***REMOVED***, [0, 0***REMOVED******REMOVED******REMOVED***

    def test_strings(self***REMOVED***:
        assert_equal(eye(2, 2, dtype='S3'***REMOVED***,
                     asbytes_nested([['1', ''***REMOVED***, ['', '1'***REMOVED******REMOVED******REMOVED******REMOVED***

    def test_bool(self***REMOVED***:
        assert_equal(eye(2, 2, dtype=bool***REMOVED***, [[True, False***REMOVED***, [False, True***REMOVED******REMOVED******REMOVED***


class TestDiag(TestCase***REMOVED***:
    def test_vector(self***REMOVED***:
        vals = (100 * arange(5***REMOVED******REMOVED***.astype('l'***REMOVED***
        b = zeros((5, 5***REMOVED******REMOVED***
        for k in range(5***REMOVED***:
            b[k, k***REMOVED*** = vals[k***REMOVED***
        assert_equal(diag(vals***REMOVED***, b***REMOVED***
        b = zeros((7, 7***REMOVED******REMOVED***
        c = b.copy(***REMOVED***
        for k in range(5***REMOVED***:
            b[k, k + 2***REMOVED*** = vals[k***REMOVED***
            c[k + 2, k***REMOVED*** = vals[k***REMOVED***
        assert_equal(diag(vals, k=2***REMOVED***, b***REMOVED***
        assert_equal(diag(vals, k=-2***REMOVED***, c***REMOVED***

    def test_matrix(self, vals=None***REMOVED***:
        if vals is None:
            vals = (100 * get_mat(5***REMOVED*** + 1***REMOVED***.astype('l'***REMOVED***
        b = zeros((5,***REMOVED******REMOVED***
        for k in range(5***REMOVED***:
            b[k***REMOVED*** = vals[k, k***REMOVED***
        assert_equal(diag(vals***REMOVED***, b***REMOVED***
        b = b * 0
        for k in range(3***REMOVED***:
            b[k***REMOVED*** = vals[k, k + 2***REMOVED***
        assert_equal(diag(vals, 2***REMOVED***, b[:3***REMOVED******REMOVED***
        for k in range(3***REMOVED***:
            b[k***REMOVED*** = vals[k + 2, k***REMOVED***
        assert_equal(diag(vals, -2***REMOVED***, b[:3***REMOVED******REMOVED***

    def test_fortran_order(self***REMOVED***:
        vals = array((100 * get_mat(5***REMOVED*** + 1***REMOVED***, order='F', dtype='l'***REMOVED***
        self.test_matrix(vals***REMOVED***

    def test_diag_bounds(self***REMOVED***:
        A = [[1, 2***REMOVED***, [3, 4***REMOVED***, [5, 6***REMOVED******REMOVED***
        assert_equal(diag(A, k=2***REMOVED***, [***REMOVED******REMOVED***
        assert_equal(diag(A, k=1***REMOVED***, [2***REMOVED******REMOVED***
        assert_equal(diag(A, k=0***REMOVED***, [1, 4***REMOVED******REMOVED***
        assert_equal(diag(A, k=-1***REMOVED***, [3, 6***REMOVED******REMOVED***
        assert_equal(diag(A, k=-2***REMOVED***, [5***REMOVED******REMOVED***
        assert_equal(diag(A, k=-3***REMOVED***, [***REMOVED******REMOVED***

    def test_failure(self***REMOVED***:
        self.assertRaises(ValueError, diag, [[[1***REMOVED******REMOVED******REMOVED******REMOVED***


class TestFliplr(TestCase***REMOVED***:
    def test_basic(self***REMOVED***:
        self.assertRaises(ValueError, fliplr, ones(4***REMOVED******REMOVED***
        a = get_mat(4***REMOVED***
        b = a[:, ::-1***REMOVED***
        assert_equal(fliplr(a***REMOVED***, b***REMOVED***
        a = [[0, 1, 2***REMOVED***,
             [3, 4, 5***REMOVED******REMOVED***
        b = [[2, 1, 0***REMOVED***,
             [5, 4, 3***REMOVED******REMOVED***
        assert_equal(fliplr(a***REMOVED***, b***REMOVED***


class TestFlipud(TestCase***REMOVED***:
    def test_basic(self***REMOVED***:
        a = get_mat(4***REMOVED***
        b = a[::-1, :***REMOVED***
        assert_equal(flipud(a***REMOVED***, b***REMOVED***
        a = [[0, 1, 2***REMOVED***,
             [3, 4, 5***REMOVED******REMOVED***
        b = [[3, 4, 5***REMOVED***,
             [0, 1, 2***REMOVED******REMOVED***
        assert_equal(flipud(a***REMOVED***, b***REMOVED***


class TestRot90(TestCase***REMOVED***:
    def test_basic(self***REMOVED***:
        self.assertRaises(ValueError, rot90, ones(4***REMOVED******REMOVED***

        a = [[0, 1, 2***REMOVED***,
             [3, 4, 5***REMOVED******REMOVED***
        b1 = [[2, 5***REMOVED***,
              [1, 4***REMOVED***,
              [0, 3***REMOVED******REMOVED***
        b2 = [[5, 4, 3***REMOVED***,
              [2, 1, 0***REMOVED******REMOVED***
        b3 = [[3, 0***REMOVED***,
              [4, 1***REMOVED***,
              [5, 2***REMOVED******REMOVED***
        b4 = [[0, 1, 2***REMOVED***,
              [3, 4, 5***REMOVED******REMOVED***

        for k in range(-3, 13, 4***REMOVED***:
            assert_equal(rot90(a, k=k***REMOVED***, b1***REMOVED***
        for k in range(-2, 13, 4***REMOVED***:
            assert_equal(rot90(a, k=k***REMOVED***, b2***REMOVED***
        for k in range(-1, 13, 4***REMOVED***:
            assert_equal(rot90(a, k=k***REMOVED***, b3***REMOVED***
        for k in range(0, 13, 4***REMOVED***:
            assert_equal(rot90(a, k=k***REMOVED***, b4***REMOVED***

    def test_axes(self***REMOVED***:
        a = ones((50, 40, 3***REMOVED******REMOVED***
        assert_equal(rot90(a***REMOVED***.shape, (40, 50, 3***REMOVED******REMOVED***


class TestHistogram2d(TestCase***REMOVED***:
    def test_simple(self***REMOVED***:
        x = array(
            [0.41702200, 0.72032449, 1.1437481e-4, 0.302332573, 0.146755891***REMOVED******REMOVED***
        y = array(
            [0.09233859, 0.18626021, 0.34556073, 0.39676747, 0.53881673***REMOVED******REMOVED***
        xedges = np.linspace(0, 1, 10***REMOVED***
        yedges = np.linspace(0, 1, 10***REMOVED***
        H = histogram2d(x, y, (xedges, yedges***REMOVED******REMOVED***[0***REMOVED***
        answer = array(
            [[0, 0, 0, 1, 0, 0, 0, 0, 0***REMOVED***,
             [0, 0, 0, 0, 0, 0, 1, 0, 0***REMOVED***,
             [0, 0, 0, 0, 0, 0, 0, 0, 0***REMOVED***,
             [1, 0, 1, 0, 0, 0, 0, 0, 0***REMOVED***,
             [0, 1, 0, 0, 0, 0, 0, 0, 0***REMOVED***,
             [0, 0, 0, 0, 0, 0, 0, 0, 0***REMOVED***,
             [0, 0, 0, 0, 0, 0, 0, 0, 0***REMOVED***,
             [0, 0, 0, 0, 0, 0, 0, 0, 0***REMOVED***,
             [0, 0, 0, 0, 0, 0, 0, 0, 0***REMOVED******REMOVED******REMOVED***
        assert_array_equal(H.T, answer***REMOVED***
        H = histogram2d(x, y, xedges***REMOVED***[0***REMOVED***
        assert_array_equal(H.T, answer***REMOVED***
        H, xedges, yedges = histogram2d(list(range(10***REMOVED******REMOVED***, list(range(10***REMOVED******REMOVED******REMOVED***
        assert_array_equal(H, eye(10, 10***REMOVED******REMOVED***
        assert_array_equal(xedges, np.linspace(0, 9, 11***REMOVED******REMOVED***
        assert_array_equal(yedges, np.linspace(0, 9, 11***REMOVED******REMOVED***

    def test_asym(self***REMOVED***:
        x = array([1, 1, 2, 3, 4, 4, 4, 5***REMOVED******REMOVED***
        y = array([1, 3, 2, 0, 1, 2, 3, 4***REMOVED******REMOVED***
        H, xed, yed = histogram2d(
            x, y, (6, 5***REMOVED***, range=[[0, 6***REMOVED***, [0, 5***REMOVED******REMOVED***, normed=True***REMOVED***
        answer = array(
            [[0., 0, 0, 0, 0***REMOVED***,
             [0, 1, 0, 1, 0***REMOVED***,
             [0, 0, 1, 0, 0***REMOVED***,
             [1, 0, 0, 0, 0***REMOVED***,
             [0, 1, 1, 1, 0***REMOVED***,
             [0, 0, 0, 0, 1***REMOVED******REMOVED******REMOVED***
        assert_array_almost_equal(H, answer/8., 3***REMOVED***
        assert_array_equal(xed, np.linspace(0, 6, 7***REMOVED******REMOVED***
        assert_array_equal(yed, np.linspace(0, 5, 6***REMOVED******REMOVED***

    def test_norm(self***REMOVED***:
        x = array([1, 2, 3, 1, 2, 3, 1, 2, 3***REMOVED******REMOVED***
        y = array([1, 1, 1, 2, 2, 2, 3, 3, 3***REMOVED******REMOVED***
        H, xed, yed = histogram2d(
            x, y, [[1, 2, 3, 5***REMOVED***, [1, 2, 3, 5***REMOVED******REMOVED***, normed=True***REMOVED***
        answer = array([[1, 1, .5***REMOVED***,
                        [1, 1, .5***REMOVED***,
                        [.5, .5, .25***REMOVED******REMOVED******REMOVED***/9.
        assert_array_almost_equal(H, answer, 3***REMOVED***

    def test_all_outliers(self***REMOVED***:
        r = rand(100***REMOVED*** + 1. + 1e6  # histogramdd rounds by decimal=6
        H, xed, yed = histogram2d(r, r, (4, 5***REMOVED***, range=([0, 1***REMOVED***, [0, 1***REMOVED******REMOVED******REMOVED***
        assert_array_equal(H, 0***REMOVED***

    def test_empty(self***REMOVED***:
        a, edge1, edge2 = histogram2d([***REMOVED***, [***REMOVED***, bins=([0, 1***REMOVED***, [0, 1***REMOVED******REMOVED******REMOVED***
        assert_array_max_ulp(a, array([[0.***REMOVED******REMOVED******REMOVED******REMOVED***

        a, edge1, edge2 = histogram2d([***REMOVED***, [***REMOVED***, bins=4***REMOVED***
        assert_array_max_ulp(a, np.zeros((4, 4***REMOVED******REMOVED******REMOVED***

    def test_binparameter_combination(self***REMOVED***:
        x = array(
            [0, 0.09207008,  0.64575234,  0.12875982,  0.47390599,  
             0.59944483, 1***REMOVED******REMOVED***
        y = array(
            [0, 0.14344267,  0.48988575,  0.30558665,  0.44700682,  
             0.15886423, 1***REMOVED******REMOVED***
        edges = (0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1***REMOVED***
        H, xe, ye = histogram2d(x, y, (edges, 4***REMOVED******REMOVED***
        answer = array(
            [[ 2.,  0.,  0.,  0.***REMOVED***,
             [ 0.,  1.,  0.,  0.***REMOVED***,
             [ 0.,  0.,  0.,  0.***REMOVED***,
             [ 0.,  0.,  0.,  0.***REMOVED***,
             [ 0.,  1.,  0.,  0.***REMOVED***,
             [ 1.,  0.,  0.,  0.***REMOVED***,
             [ 0.,  1.,  0.,  0.***REMOVED***,
             [ 0.,  0.,  0.,  0.***REMOVED***,
             [ 0.,  0.,  0.,  0.***REMOVED***,
             [ 0.,  0.,  0.,  1.***REMOVED******REMOVED******REMOVED***
        assert_array_equal(H, answer***REMOVED***
        assert_array_equal(ye, array([0., 0.25, 0.5, 0.75, 1***REMOVED******REMOVED******REMOVED***
        H, xe, ye = histogram2d(x, y, (4, edges***REMOVED******REMOVED***
        answer = array(
            [[ 1.,  1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.***REMOVED***,
             [ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.***REMOVED***,
             [ 0.,  1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.***REMOVED***,
             [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.***REMOVED******REMOVED******REMOVED***
        assert_array_equal(H, answer***REMOVED***
        assert_array_equal(xe, array([0., 0.25, 0.5, 0.75, 1***REMOVED******REMOVED******REMOVED***


class TestTri(TestCase***REMOVED***:
    def test_dtype(self***REMOVED***:
        out = array([[1, 0, 0***REMOVED***,
                     [1, 1, 0***REMOVED***,
                     [1, 1, 1***REMOVED******REMOVED******REMOVED***
        assert_array_equal(tri(3***REMOVED***, out***REMOVED***
        assert_array_equal(tri(3, dtype=bool***REMOVED***, out.astype(bool***REMOVED******REMOVED***


def test_tril_triu_ndim2(***REMOVED***:
    for dtype in np.typecodes['AllFloat'***REMOVED*** + np.typecodes['AllInteger'***REMOVED***:
        a = np.ones((2, 2***REMOVED***, dtype=dtype***REMOVED***
        b = np.tril(a***REMOVED***
        c = np.triu(a***REMOVED***
        yield assert_array_equal, b, [[1, 0***REMOVED***, [1, 1***REMOVED******REMOVED***
        yield assert_array_equal, c, b.T
        # should return the same dtype as the original array
        yield assert_equal, b.dtype, a.dtype
        yield assert_equal, c.dtype, a.dtype


def test_tril_triu_ndim3(***REMOVED***:
    for dtype in np.typecodes['AllFloat'***REMOVED*** + np.typecodes['AllInteger'***REMOVED***:
        a = np.array([
            [[1, 1***REMOVED***, [1, 1***REMOVED******REMOVED***,
            [[1, 1***REMOVED***, [1, 0***REMOVED******REMOVED***,
            [[1, 1***REMOVED***, [0, 0***REMOVED******REMOVED***,
            ***REMOVED***, dtype=dtype***REMOVED***
        a_tril_desired = np.array([
            [[1, 0***REMOVED***, [1, 1***REMOVED******REMOVED***,
            [[1, 0***REMOVED***, [1, 0***REMOVED******REMOVED***,
            [[1, 0***REMOVED***, [0, 0***REMOVED******REMOVED***,
            ***REMOVED***, dtype=dtype***REMOVED***
        a_triu_desired = np.array([
            [[1, 1***REMOVED***, [0, 1***REMOVED******REMOVED***,
            [[1, 1***REMOVED***, [0, 0***REMOVED******REMOVED***,
            [[1, 1***REMOVED***, [0, 0***REMOVED******REMOVED***,
            ***REMOVED***, dtype=dtype***REMOVED***
        a_triu_observed = np.triu(a***REMOVED***
        a_tril_observed = np.tril(a***REMOVED***
        yield assert_array_equal, a_triu_observed, a_triu_desired
        yield assert_array_equal, a_tril_observed, a_tril_desired
        yield assert_equal, a_triu_observed.dtype, a.dtype
        yield assert_equal, a_tril_observed.dtype, a.dtype

def test_tril_triu_with_inf(***REMOVED***:
    # Issue 4859
    arr = np.array([[1, 1, np.inf***REMOVED***,
                    [1, 1, 1***REMOVED***,
                    [np.inf, 1, 1***REMOVED******REMOVED******REMOVED***
    out_tril = np.array([[1, 0, 0***REMOVED***,
                         [1, 1, 0***REMOVED***,
                         [np.inf, 1, 1***REMOVED******REMOVED******REMOVED***
    out_triu = out_tril.T
    assert_array_equal(np.triu(arr***REMOVED***, out_triu***REMOVED***
    assert_array_equal(np.tril(arr***REMOVED***, out_tril***REMOVED***


def test_tril_triu_dtype(***REMOVED***:
    # Issue 4916
    # tril and triu should return the same dtype as input
    for c in np.typecodes['All'***REMOVED***:
        if c == 'V':
            continue
        arr = np.zeros((3, 3***REMOVED***, dtype=c***REMOVED***
        assert_equal(np.triu(arr***REMOVED***.dtype, arr.dtype***REMOVED***
        assert_equal(np.tril(arr***REMOVED***.dtype, arr.dtype***REMOVED***

    # check special cases
    arr = np.array([['2001-01-01T12:00', '2002-02-03T13:56'***REMOVED***,
                    ['2004-01-01T12:00', '2003-01-03T13:45'***REMOVED******REMOVED***,
                   dtype='datetime64'***REMOVED***
    assert_equal(np.triu(arr***REMOVED***.dtype, arr.dtype***REMOVED***
    assert_equal(np.tril(arr***REMOVED***.dtype, arr.dtype***REMOVED***

    arr = np.zeros((3,3***REMOVED***, dtype='f4,f4'***REMOVED***
    assert_equal(np.triu(arr***REMOVED***.dtype, arr.dtype***REMOVED***
    assert_equal(np.tril(arr***REMOVED***.dtype, arr.dtype***REMOVED***


def test_mask_indices(***REMOVED***:
    # simple test without offset
    iu = mask_indices(3, np.triu***REMOVED***
    a = np.arange(9***REMOVED***.reshape(3, 3***REMOVED***
    yield (assert_array_equal, a[iu***REMOVED***, array([0, 1, 2, 4, 5, 8***REMOVED******REMOVED******REMOVED***
    # Now with an offset
    iu1 = mask_indices(3, np.triu, 1***REMOVED***
    yield (assert_array_equal, a[iu1***REMOVED***, array([1, 2, 5***REMOVED******REMOVED******REMOVED***


def test_tril_indices(***REMOVED***:
    # indices without and with offset
    il1 = tril_indices(4***REMOVED***
    il2 = tril_indices(4, k=2***REMOVED***
    il3 = tril_indices(4, m=5***REMOVED***
    il4 = tril_indices(4, k=2, m=5***REMOVED***

    a = np.array([[1, 2, 3, 4***REMOVED***,
                  [5, 6, 7, 8***REMOVED***,
                  [9, 10, 11, 12***REMOVED***,
                  [13, 14, 15, 16***REMOVED******REMOVED******REMOVED***
    b = np.arange(1, 21***REMOVED***.reshape(4, 5***REMOVED***

    # indexing:
    yield (assert_array_equal, a[il1***REMOVED***,
           array([1, 5, 6, 9, 10, 11, 13, 14, 15, 16***REMOVED******REMOVED******REMOVED***
    yield (assert_array_equal, b[il3***REMOVED***,
           array([1, 6, 7, 11, 12, 13, 16, 17, 18, 19***REMOVED******REMOVED******REMOVED***

    # And for assigning values:
    a[il1***REMOVED*** = -1
    yield (assert_array_equal, a,
           array([[-1, 2, 3, 4***REMOVED***,
                  [-1, -1, 7, 8***REMOVED***,
                  [-1, -1, -1, 12***REMOVED***,
                  [-1, -1, -1, -1***REMOVED******REMOVED******REMOVED******REMOVED***
    b[il3***REMOVED*** = -1
    yield (assert_array_equal, b,
           array([[-1, 2, 3, 4, 5***REMOVED***,
                  [-1, -1, 8, 9, 10***REMOVED***,
                  [-1, -1, -1, 14, 15***REMOVED***,
                  [-1, -1, -1, -1, 20***REMOVED******REMOVED******REMOVED******REMOVED***
    # These cover almost the whole array (two diagonals right of the main one***REMOVED***:
    a[il2***REMOVED*** = -10
    yield (assert_array_equal, a,
           array([[-10, -10, -10, 4***REMOVED***,
                  [-10, -10, -10, -10***REMOVED***,
                  [-10, -10, -10, -10***REMOVED***,
                  [-10, -10, -10, -10***REMOVED******REMOVED******REMOVED******REMOVED***
    b[il4***REMOVED*** = -10
    yield (assert_array_equal, b,
           array([[-10, -10, -10, 4, 5***REMOVED***,
                  [-10, -10, -10, -10, 10***REMOVED***,
                  [-10, -10, -10, -10, -10***REMOVED***,
                  [-10, -10, -10, -10, -10***REMOVED******REMOVED******REMOVED******REMOVED***


class TestTriuIndices(object***REMOVED***:
    def test_triu_indices(self***REMOVED***:
        iu1 = triu_indices(4***REMOVED***
        iu2 = triu_indices(4, k=2***REMOVED***
        iu3 = triu_indices(4, m=5***REMOVED***
        iu4 = triu_indices(4, k=2, m=5***REMOVED***

        a = np.array([[1, 2, 3, 4***REMOVED***,
                      [5, 6, 7, 8***REMOVED***,
                      [9, 10, 11, 12***REMOVED***,
                      [13, 14, 15, 16***REMOVED******REMOVED******REMOVED***
        b = np.arange(1, 21***REMOVED***.reshape(4, 5***REMOVED***

        # Both for indexing:
        yield (assert_array_equal, a[iu1***REMOVED***,
               array([1, 2, 3, 4, 6, 7, 8, 11, 12, 16***REMOVED******REMOVED******REMOVED***
        yield (assert_array_equal, b[iu3***REMOVED***,
               array([1, 2, 3, 4, 5, 7, 8, 9, 10, 13, 14, 15, 19, 20***REMOVED******REMOVED******REMOVED***

        # And for assigning values:
        a[iu1***REMOVED*** = -1
        yield (assert_array_equal, a,
               array([[-1, -1, -1, -1***REMOVED***,
                      [5, -1, -1, -1***REMOVED***,
                      [9, 10, -1, -1***REMOVED***,
                      [13, 14, 15, -1***REMOVED******REMOVED******REMOVED******REMOVED***
        b[iu3***REMOVED*** = -1
        yield (assert_array_equal, b,
               array([[-1, -1, -1, -1, -1***REMOVED***,
                      [6, -1, -1, -1, -1***REMOVED***,
                      [11, 12, -1, -1, -1***REMOVED***,
                      [16, 17, 18, -1, -1***REMOVED******REMOVED******REMOVED******REMOVED***

        # These cover almost the whole array (two diagonals right of the
        # main one***REMOVED***:
        a[iu2***REMOVED*** = -10
        yield (assert_array_equal, a,
               array([[-1, -1, -10, -10***REMOVED***,
                      [5, -1, -1, -10***REMOVED***,
                      [9, 10, -1, -1***REMOVED***,
                      [13, 14, 15, -1***REMOVED******REMOVED******REMOVED******REMOVED***
        b[iu4***REMOVED*** = -10
        yield (assert_array_equal, b,
               array([[-1, -1, -10, -10, -10***REMOVED***,
                      [6, -1, -1, -10, -10***REMOVED***,
                      [11, 12, -1, -1, -10***REMOVED***,
                      [16, 17, 18, -1, -1***REMOVED******REMOVED******REMOVED******REMOVED***


class TestTrilIndicesFrom(object***REMOVED***:
    def test_exceptions(self***REMOVED***:
        assert_raises(ValueError, tril_indices_from, np.ones((2,***REMOVED******REMOVED******REMOVED***
        assert_raises(ValueError, tril_indices_from, np.ones((2, 2, 2***REMOVED******REMOVED******REMOVED***
        # assert_raises(ValueError, tril_indices_from, np.ones((2, 3***REMOVED******REMOVED******REMOVED***


class TestTriuIndicesFrom(object***REMOVED***:
    def test_exceptions(self***REMOVED***:
        assert_raises(ValueError, triu_indices_from, np.ones((2,***REMOVED******REMOVED******REMOVED***
        assert_raises(ValueError, triu_indices_from, np.ones((2, 2, 2***REMOVED******REMOVED******REMOVED***
        # assert_raises(ValueError, triu_indices_from, np.ones((2, 3***REMOVED******REMOVED******REMOVED***


class TestVander(object***REMOVED***:
    def test_basic(self***REMOVED***:
        c = np.array([0, 1, -2, 3***REMOVED******REMOVED***
        v = vander(c***REMOVED***
        powers = np.array([[0, 0, 0, 0, 1***REMOVED***,
                           [1, 1, 1, 1, 1***REMOVED***,
                           [16, -8, 4, -2, 1***REMOVED***,
                           [81, 27, 9, 3, 1***REMOVED******REMOVED******REMOVED***
        # Check default value of N:
        yield (assert_array_equal, v, powers[:, 1:***REMOVED******REMOVED***
        # Check a range of N values, including 0 and 5 (greater than default***REMOVED***
        m = powers.shape[1***REMOVED***
        for n in range(6***REMOVED***:
            v = vander(c, N=n***REMOVED***
            yield (assert_array_equal, v, powers[:, m-n:m***REMOVED******REMOVED***

    def test_dtypes(self***REMOVED***:
        c = array([11, -12, 13***REMOVED***, dtype=np.int8***REMOVED***
        v = vander(c***REMOVED***
        expected = np.array([[121, 11, 1***REMOVED***,
                             [144, -12, 1***REMOVED***,
                             [169, 13, 1***REMOVED******REMOVED******REMOVED***
        yield (assert_array_equal, v, expected***REMOVED***

        c = array([1.0+1j, 1.0-1j***REMOVED******REMOVED***
        v = vander(c, N=3***REMOVED***
        expected = np.array([[2j, 1+1j, 1***REMOVED***,
                             [-2j, 1-1j, 1***REMOVED******REMOVED******REMOVED***
        # The data is floating point, but the values are small integers,
        # so assert_array_equal *should* be safe here (rather than, say,
        # assert_array_almost_equal***REMOVED***.
        yield (assert_array_equal, v, expected***REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
