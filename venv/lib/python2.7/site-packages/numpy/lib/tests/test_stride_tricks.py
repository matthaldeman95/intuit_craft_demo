from __future__ import division, absolute_import, print_function

import numpy as np
from numpy.testing import (
    run_module_suite, assert_equal, assert_array_equal,
    assert_raises, assert_
    ***REMOVED***
from numpy.lib.stride_tricks import (
    as_strided, broadcast_arrays, _broadcast_shape, broadcast_to
***REMOVED***

def assert_shapes_correct(input_shapes, expected_shape***REMOVED***:
    # Broadcast a list of arrays with the given input shapes and check the
    # common output shape.

    inarrays = [np.zeros(s***REMOVED*** for s in input_shapes***REMOVED***
    outarrays = broadcast_arrays(*inarrays***REMOVED***
    outshapes = [a.shape for a in outarrays***REMOVED***
    expected = [expected_shape***REMOVED*** * len(inarrays***REMOVED***
    assert_equal(outshapes, expected***REMOVED***


def assert_incompatible_shapes_raise(input_shapes***REMOVED***:
    # Broadcast a list of arrays with the given (incompatible***REMOVED*** input shapes
    # and check that they raise a ValueError.

    inarrays = [np.zeros(s***REMOVED*** for s in input_shapes***REMOVED***
    assert_raises(ValueError, broadcast_arrays, *inarrays***REMOVED***


def assert_same_as_ufunc(shape0, shape1, transposed=False, flipped=False***REMOVED***:
    # Broadcast two shapes against each other and check that the data layout
    # is the same as if a ufunc did the broadcasting.

    x0 = np.zeros(shape0, dtype=int***REMOVED***
    # Note that multiply.reduce's identity element is 1.0, so when shape1==(***REMOVED***,
    # this gives the desired n==1.
    n = int(np.multiply.reduce(shape1***REMOVED******REMOVED***
    x1 = np.arange(n***REMOVED***.reshape(shape1***REMOVED***
    if transposed:
        x0 = x0.T
        x1 = x1.T
    if flipped:
        x0 = x0[::-1***REMOVED***
        x1 = x1[::-1***REMOVED***
    # Use the add ufunc to do the broadcasting. Since we're adding 0s to x1, the
    # result should be exactly the same as the broadcasted view of x1.
    y = x0 + x1
    b0, b1 = broadcast_arrays(x0, x1***REMOVED***
    assert_array_equal(y, b1***REMOVED***


def test_same(***REMOVED***:
    x = np.arange(10***REMOVED***
    y = np.arange(10***REMOVED***
    bx, by = broadcast_arrays(x, y***REMOVED***
    assert_array_equal(x, bx***REMOVED***
    assert_array_equal(y, by***REMOVED***


def test_one_off(***REMOVED***:
    x = np.array([[1, 2, 3***REMOVED******REMOVED******REMOVED***
    y = np.array([[1***REMOVED***, [2***REMOVED***, [3***REMOVED******REMOVED******REMOVED***
    bx, by = broadcast_arrays(x, y***REMOVED***
    bx0 = np.array([[1, 2, 3***REMOVED***, [1, 2, 3***REMOVED***, [1, 2, 3***REMOVED******REMOVED******REMOVED***
    by0 = bx0.T
    assert_array_equal(bx0, bx***REMOVED***
    assert_array_equal(by0, by***REMOVED***


def test_same_input_shapes(***REMOVED***:
    # Check that the final shape is just the input shape.

    data = [
        (***REMOVED***,
        (1,***REMOVED***,
        (3,***REMOVED***,
        (0, 1***REMOVED***,
        (0, 3***REMOVED***,
        (1, 0***REMOVED***,
        (3, 0***REMOVED***,
        (1, 3***REMOVED***,
        (3, 1***REMOVED***,
        (3, 3***REMOVED***,
    ***REMOVED***
    for shape in data:
        input_shapes = [shape***REMOVED***
        # Single input.
        assert_shapes_correct(input_shapes, shape***REMOVED***
        # Double input.
        input_shapes2 = [shape, shape***REMOVED***
        assert_shapes_correct(input_shapes2, shape***REMOVED***
        # Triple input.
        input_shapes3 = [shape, shape, shape***REMOVED***
        assert_shapes_correct(input_shapes3, shape***REMOVED***


def test_two_compatible_by_ones_input_shapes(***REMOVED***:
    # Check that two different input shapes of the same length, but some have
    # ones, broadcast to the correct shape.

    data = [
        [[(1,***REMOVED***, (3,***REMOVED******REMOVED***, (3,***REMOVED******REMOVED***,
        [[(1, 3***REMOVED***, (3, 3***REMOVED******REMOVED***, (3, 3***REMOVED******REMOVED***,
        [[(3, 1***REMOVED***, (3, 3***REMOVED******REMOVED***, (3, 3***REMOVED******REMOVED***,
        [[(1, 3***REMOVED***, (3, 1***REMOVED******REMOVED***, (3, 3***REMOVED******REMOVED***,
        [[(1, 1***REMOVED***, (3, 3***REMOVED******REMOVED***, (3, 3***REMOVED******REMOVED***,
        [[(1, 1***REMOVED***, (1, 3***REMOVED******REMOVED***, (1, 3***REMOVED******REMOVED***,
        [[(1, 1***REMOVED***, (3, 1***REMOVED******REMOVED***, (3, 1***REMOVED******REMOVED***,
        [[(1, 0***REMOVED***, (0, 0***REMOVED******REMOVED***, (0, 0***REMOVED******REMOVED***,
        [[(0, 1***REMOVED***, (0, 0***REMOVED******REMOVED***, (0, 0***REMOVED******REMOVED***,
        [[(1, 0***REMOVED***, (0, 1***REMOVED******REMOVED***, (0, 0***REMOVED******REMOVED***,
        [[(1, 1***REMOVED***, (0, 0***REMOVED******REMOVED***, (0, 0***REMOVED******REMOVED***,
        [[(1, 1***REMOVED***, (1, 0***REMOVED******REMOVED***, (1, 0***REMOVED******REMOVED***,
        [[(1, 1***REMOVED***, (0, 1***REMOVED******REMOVED***, (0, 1***REMOVED******REMOVED***,
    ***REMOVED***
    for input_shapes, expected_shape in data:
        assert_shapes_correct(input_shapes, expected_shape***REMOVED***
        # Reverse the input shapes since broadcasting should be symmetric.
        assert_shapes_correct(input_shapes[::-1***REMOVED***, expected_shape***REMOVED***


def test_two_compatible_by_prepending_ones_input_shapes(***REMOVED***:
    # Check that two different input shapes (of different lengths***REMOVED*** broadcast
    # to the correct shape.

    data = [
        [[(***REMOVED***, (3,***REMOVED******REMOVED***, (3,***REMOVED******REMOVED***,
        [[(3,***REMOVED***, (3, 3***REMOVED******REMOVED***, (3, 3***REMOVED******REMOVED***,
        [[(3,***REMOVED***, (3, 1***REMOVED******REMOVED***, (3, 3***REMOVED******REMOVED***,
        [[(1,***REMOVED***, (3, 3***REMOVED******REMOVED***, (3, 3***REMOVED******REMOVED***,
        [[(***REMOVED***, (3, 3***REMOVED******REMOVED***, (3, 3***REMOVED******REMOVED***,
        [[(1, 1***REMOVED***, (3,***REMOVED******REMOVED***, (1, 3***REMOVED******REMOVED***,
        [[(1,***REMOVED***, (3, 1***REMOVED******REMOVED***, (3, 1***REMOVED******REMOVED***,
        [[(1,***REMOVED***, (1, 3***REMOVED******REMOVED***, (1, 3***REMOVED******REMOVED***,
        [[(***REMOVED***, (1, 3***REMOVED******REMOVED***, (1, 3***REMOVED******REMOVED***,
        [[(***REMOVED***, (3, 1***REMOVED******REMOVED***, (3, 1***REMOVED******REMOVED***,
        [[(***REMOVED***, (0,***REMOVED******REMOVED***, (0,***REMOVED******REMOVED***,
        [[(0,***REMOVED***, (0, 0***REMOVED******REMOVED***, (0, 0***REMOVED******REMOVED***,
        [[(0,***REMOVED***, (0, 1***REMOVED******REMOVED***, (0, 0***REMOVED******REMOVED***,
        [[(1,***REMOVED***, (0, 0***REMOVED******REMOVED***, (0, 0***REMOVED******REMOVED***,
        [[(***REMOVED***, (0, 0***REMOVED******REMOVED***, (0, 0***REMOVED******REMOVED***,
        [[(1, 1***REMOVED***, (0,***REMOVED******REMOVED***, (1, 0***REMOVED******REMOVED***,
        [[(1,***REMOVED***, (0, 1***REMOVED******REMOVED***, (0, 1***REMOVED******REMOVED***,
        [[(1,***REMOVED***, (1, 0***REMOVED******REMOVED***, (1, 0***REMOVED******REMOVED***,
        [[(***REMOVED***, (1, 0***REMOVED******REMOVED***, (1, 0***REMOVED******REMOVED***,
        [[(***REMOVED***, (0, 1***REMOVED******REMOVED***, (0, 1***REMOVED******REMOVED***,
    ***REMOVED***
    for input_shapes, expected_shape in data:
        assert_shapes_correct(input_shapes, expected_shape***REMOVED***
        # Reverse the input shapes since broadcasting should be symmetric.
        assert_shapes_correct(input_shapes[::-1***REMOVED***, expected_shape***REMOVED***


def test_incompatible_shapes_raise_valueerror(***REMOVED***:
    # Check that a ValueError is raised for incompatible shapes.

    data = [
        [(3,***REMOVED***, (4,***REMOVED******REMOVED***,
        [(2, 3***REMOVED***, (2,***REMOVED******REMOVED***,
        [(3,***REMOVED***, (3,***REMOVED***, (4,***REMOVED******REMOVED***,
        [(1, 3, 4***REMOVED***, (2, 3, 3***REMOVED******REMOVED***,
    ***REMOVED***
    for input_shapes in data:
        assert_incompatible_shapes_raise(input_shapes***REMOVED***
        # Reverse the input shapes since broadcasting should be symmetric.
        assert_incompatible_shapes_raise(input_shapes[::-1***REMOVED******REMOVED***


def test_same_as_ufunc(***REMOVED***:
    # Check that the data layout is the same as if a ufunc did the operation.

    data = [
        [[(1,***REMOVED***, (3,***REMOVED******REMOVED***, (3,***REMOVED******REMOVED***,
        [[(1, 3***REMOVED***, (3, 3***REMOVED******REMOVED***, (3, 3***REMOVED******REMOVED***,
        [[(3, 1***REMOVED***, (3, 3***REMOVED******REMOVED***, (3, 3***REMOVED******REMOVED***,
        [[(1, 3***REMOVED***, (3, 1***REMOVED******REMOVED***, (3, 3***REMOVED******REMOVED***,
        [[(1, 1***REMOVED***, (3, 3***REMOVED******REMOVED***, (3, 3***REMOVED******REMOVED***,
        [[(1, 1***REMOVED***, (1, 3***REMOVED******REMOVED***, (1, 3***REMOVED******REMOVED***,
        [[(1, 1***REMOVED***, (3, 1***REMOVED******REMOVED***, (3, 1***REMOVED******REMOVED***,
        [[(1, 0***REMOVED***, (0, 0***REMOVED******REMOVED***, (0, 0***REMOVED******REMOVED***,
        [[(0, 1***REMOVED***, (0, 0***REMOVED******REMOVED***, (0, 0***REMOVED******REMOVED***,
        [[(1, 0***REMOVED***, (0, 1***REMOVED******REMOVED***, (0, 0***REMOVED******REMOVED***,
        [[(1, 1***REMOVED***, (0, 0***REMOVED******REMOVED***, (0, 0***REMOVED******REMOVED***,
        [[(1, 1***REMOVED***, (1, 0***REMOVED******REMOVED***, (1, 0***REMOVED******REMOVED***,
        [[(1, 1***REMOVED***, (0, 1***REMOVED******REMOVED***, (0, 1***REMOVED******REMOVED***,
        [[(***REMOVED***, (3,***REMOVED******REMOVED***, (3,***REMOVED******REMOVED***,
        [[(3,***REMOVED***, (3, 3***REMOVED******REMOVED***, (3, 3***REMOVED******REMOVED***,
        [[(3,***REMOVED***, (3, 1***REMOVED******REMOVED***, (3, 3***REMOVED******REMOVED***,
        [[(1,***REMOVED***, (3, 3***REMOVED******REMOVED***, (3, 3***REMOVED******REMOVED***,
        [[(***REMOVED***, (3, 3***REMOVED******REMOVED***, (3, 3***REMOVED******REMOVED***,
        [[(1, 1***REMOVED***, (3,***REMOVED******REMOVED***, (1, 3***REMOVED******REMOVED***,
        [[(1,***REMOVED***, (3, 1***REMOVED******REMOVED***, (3, 1***REMOVED******REMOVED***,
        [[(1,***REMOVED***, (1, 3***REMOVED******REMOVED***, (1, 3***REMOVED******REMOVED***,
        [[(***REMOVED***, (1, 3***REMOVED******REMOVED***, (1, 3***REMOVED******REMOVED***,
        [[(***REMOVED***, (3, 1***REMOVED******REMOVED***, (3, 1***REMOVED******REMOVED***,
        [[(***REMOVED***, (0,***REMOVED******REMOVED***, (0,***REMOVED******REMOVED***,
        [[(0,***REMOVED***, (0, 0***REMOVED******REMOVED***, (0, 0***REMOVED******REMOVED***,
        [[(0,***REMOVED***, (0, 1***REMOVED******REMOVED***, (0, 0***REMOVED******REMOVED***,
        [[(1,***REMOVED***, (0, 0***REMOVED******REMOVED***, (0, 0***REMOVED******REMOVED***,
        [[(***REMOVED***, (0, 0***REMOVED******REMOVED***, (0, 0***REMOVED******REMOVED***,
        [[(1, 1***REMOVED***, (0,***REMOVED******REMOVED***, (1, 0***REMOVED******REMOVED***,
        [[(1,***REMOVED***, (0, 1***REMOVED******REMOVED***, (0, 1***REMOVED******REMOVED***,
        [[(1,***REMOVED***, (1, 0***REMOVED******REMOVED***, (1, 0***REMOVED******REMOVED***,
        [[(***REMOVED***, (1, 0***REMOVED******REMOVED***, (1, 0***REMOVED******REMOVED***,
        [[(***REMOVED***, (0, 1***REMOVED******REMOVED***, (0, 1***REMOVED******REMOVED***,
    ***REMOVED***
    for input_shapes, expected_shape in data:
        assert_same_as_ufunc(input_shapes[0***REMOVED***, input_shapes[1***REMOVED***,
                             "Shapes: %s %s" % (input_shapes[0***REMOVED***, input_shapes[1***REMOVED******REMOVED******REMOVED***
        # Reverse the input shapes since broadcasting should be symmetric.
        assert_same_as_ufunc(input_shapes[1***REMOVED***, input_shapes[0***REMOVED******REMOVED***
        # Try them transposed, too.
        assert_same_as_ufunc(input_shapes[0***REMOVED***, input_shapes[1***REMOVED***, True***REMOVED***
        # ... and flipped for non-rank-0 inputs in order to test negative
        # strides.
        if (***REMOVED*** not in input_shapes:
            assert_same_as_ufunc(input_shapes[0***REMOVED***, input_shapes[1***REMOVED***, False, True***REMOVED***
            assert_same_as_ufunc(input_shapes[0***REMOVED***, input_shapes[1***REMOVED***, True, True***REMOVED***


def test_broadcast_to_succeeds(***REMOVED***:
    data = [
        [np.array(0***REMOVED***, (0,***REMOVED***, np.array(0***REMOVED******REMOVED***,
        [np.array(0***REMOVED***, (1,***REMOVED***, np.zeros(1***REMOVED******REMOVED***,
        [np.array(0***REMOVED***, (3,***REMOVED***, np.zeros(3***REMOVED******REMOVED***,
        [np.ones(1***REMOVED***, (1,***REMOVED***, np.ones(1***REMOVED******REMOVED***,
        [np.ones(1***REMOVED***, (2,***REMOVED***, np.ones(2***REMOVED******REMOVED***,
        [np.ones(1***REMOVED***, (1, 2, 3***REMOVED***, np.ones((1, 2, 3***REMOVED******REMOVED******REMOVED***,
        [np.arange(3***REMOVED***, (3,***REMOVED***, np.arange(3***REMOVED******REMOVED***,
        [np.arange(3***REMOVED***, (1, 3***REMOVED***, np.arange(3***REMOVED***.reshape(1, -1***REMOVED******REMOVED***,
        [np.arange(3***REMOVED***, (2, 3***REMOVED***, np.array([[0, 1, 2***REMOVED***, [0, 1, 2***REMOVED******REMOVED******REMOVED******REMOVED***,
        # test if shape is not a tuple
        [np.ones(0***REMOVED***, 0, np.ones(0***REMOVED******REMOVED***,
        [np.ones(1***REMOVED***, 1, np.ones(1***REMOVED******REMOVED***,
        [np.ones(1***REMOVED***, 2, np.ones(2***REMOVED******REMOVED***,
        # these cases with size 0 are strange, but they reproduce the behavior
        # of broadcasting with ufuncs (see test_same_as_ufunc above***REMOVED***
        [np.ones(1***REMOVED***, (0,***REMOVED***, np.ones(0***REMOVED******REMOVED***,
        [np.ones((1, 2***REMOVED******REMOVED***, (0, 2***REMOVED***, np.ones((0, 2***REMOVED******REMOVED******REMOVED***,
        [np.ones((2, 1***REMOVED******REMOVED***, (2, 0***REMOVED***, np.ones((2, 0***REMOVED******REMOVED******REMOVED***,
    ***REMOVED***
    for input_array, shape, expected in data:
        actual = broadcast_to(input_array, shape***REMOVED***
        assert_array_equal(expected, actual***REMOVED***


def test_broadcast_to_raises(***REMOVED***:
    data = [
        [(0,***REMOVED***, (***REMOVED******REMOVED***,
        [(1,***REMOVED***, (***REMOVED******REMOVED***,
        [(3,***REMOVED***, (***REMOVED******REMOVED***,
        [(3,***REMOVED***, (1,***REMOVED******REMOVED***,
        [(3,***REMOVED***, (2,***REMOVED******REMOVED***,
        [(3,***REMOVED***, (4,***REMOVED******REMOVED***,
        [(1, 2***REMOVED***, (2, 1***REMOVED******REMOVED***,
        [(1, 1***REMOVED***, (1,***REMOVED******REMOVED***,
        [(1,***REMOVED***, -1***REMOVED***,
        [(1,***REMOVED***, (-1,***REMOVED******REMOVED***,
        [(1, 2***REMOVED***, (-1, 2***REMOVED******REMOVED***,
    ***REMOVED***
    for orig_shape, target_shape in data:
        arr = np.zeros(orig_shape***REMOVED***
        assert_raises(ValueError, lambda: broadcast_to(arr, target_shape***REMOVED******REMOVED***


def test_broadcast_shape(***REMOVED***:
    # broadcast_shape is already exercized indirectly by broadcast_arrays
    assert_raises(ValueError, _broadcast_shape***REMOVED***
    assert_equal(_broadcast_shape([1, 2***REMOVED******REMOVED***, (2,***REMOVED******REMOVED***
    assert_equal(_broadcast_shape(np.ones((1, 1***REMOVED******REMOVED******REMOVED***, (1, 1***REMOVED******REMOVED***
    assert_equal(_broadcast_shape(np.ones((1, 1***REMOVED******REMOVED***, np.ones((3, 4***REMOVED******REMOVED******REMOVED***, (3, 4***REMOVED******REMOVED***
    assert_equal(_broadcast_shape(*([np.ones((1, 2***REMOVED******REMOVED******REMOVED*** * 32***REMOVED******REMOVED***, (1, 2***REMOVED******REMOVED***
    assert_equal(_broadcast_shape(*([np.ones((1, 2***REMOVED******REMOVED******REMOVED*** * 100***REMOVED******REMOVED***, (1, 2***REMOVED******REMOVED***

    # regression tests for gh-5862
    assert_equal(_broadcast_shape(*([np.ones(2***REMOVED******REMOVED*** * 32 + [1***REMOVED******REMOVED******REMOVED***, (2,***REMOVED******REMOVED***
    bad_args = [np.ones(2***REMOVED******REMOVED*** * 32 + [np.ones(3***REMOVED******REMOVED*** * 32
    assert_raises(ValueError, lambda: _broadcast_shape(*bad_args***REMOVED******REMOVED***


def test_as_strided(***REMOVED***:
    a = np.array([None***REMOVED******REMOVED***
    a_view = as_strided(a***REMOVED***
    expected = np.array([None***REMOVED******REMOVED***
    assert_array_equal(a_view, np.array([None***REMOVED******REMOVED******REMOVED***

    a = np.array([1, 2, 3, 4***REMOVED******REMOVED***
    a_view = as_strided(a, shape=(2,***REMOVED***, strides=(2 * a.itemsize,***REMOVED******REMOVED***
    expected = np.array([1, 3***REMOVED******REMOVED***
    assert_array_equal(a_view, expected***REMOVED***

    a = np.array([1, 2, 3, 4***REMOVED******REMOVED***
    a_view = as_strided(a, shape=(3, 4***REMOVED***, strides=(0, 1 * a.itemsize***REMOVED******REMOVED***
    expected = np.array([[1, 2, 3, 4***REMOVED***, [1, 2, 3, 4***REMOVED***, [1, 2, 3, 4***REMOVED******REMOVED******REMOVED***
    assert_array_equal(a_view, expected***REMOVED***

    # Regression test for gh-5081
    dt = np.dtype([('num', 'i4'***REMOVED***, ('obj', 'O'***REMOVED******REMOVED******REMOVED***
    a = np.empty((4,***REMOVED***, dtype=dt***REMOVED***
    a['num'***REMOVED*** = np.arange(1, 5***REMOVED***
    a_view = as_strided(a, shape=(3, 4***REMOVED***, strides=(0, a.itemsize***REMOVED******REMOVED***
    expected_num = [[1, 2, 3, 4***REMOVED******REMOVED*** * 3
    expected_obj = [[None***REMOVED****4***REMOVED****3
    assert_equal(a_view.dtype, dt***REMOVED***
    assert_array_equal(expected_num, a_view['num'***REMOVED******REMOVED***
    assert_array_equal(expected_obj, a_view['obj'***REMOVED******REMOVED***

    # Make sure that void types without fields are kept unchanged
    a = np.empty((4,***REMOVED***, dtype='V4'***REMOVED***
    a_view = as_strided(a, shape=(3, 4***REMOVED***, strides=(0, a.itemsize***REMOVED******REMOVED***
    assert_equal(a.dtype, a_view.dtype***REMOVED***

    # Make sure that the only type that could fail is properly handled
    dt = np.dtype({'names': [''***REMOVED***, 'formats': ['V4'***REMOVED******REMOVED******REMOVED***
    a = np.empty((4,***REMOVED***, dtype=dt***REMOVED***
    a_view = as_strided(a, shape=(3, 4***REMOVED***, strides=(0, a.itemsize***REMOVED******REMOVED***
    assert_equal(a.dtype, a_view.dtype***REMOVED***


class VerySimpleSubClass(np.ndarray***REMOVED***:
    def __new__(cls, *args, **kwargs***REMOVED***:
        kwargs['subok'***REMOVED*** = True
        return np.array(*args, **kwargs***REMOVED***.view(cls***REMOVED***


class SimpleSubClass(VerySimpleSubClass***REMOVED***:
    def __new__(cls, *args, **kwargs***REMOVED***:
        kwargs['subok'***REMOVED*** = True
        self = np.array(*args, **kwargs***REMOVED***.view(cls***REMOVED***
        self.info = 'simple'
        return self

    def __array_finalize__(self, obj***REMOVED***:
        self.info = getattr(obj, 'info', ''***REMOVED*** + ' finalized'


def test_subclasses(***REMOVED***:
    # test that subclass is preserved only if subok=True
    a = VerySimpleSubClass([1, 2, 3, 4***REMOVED******REMOVED***
    assert_(type(a***REMOVED*** is VerySimpleSubClass***REMOVED***
    a_view = as_strided(a, shape=(2,***REMOVED***, strides=(2 * a.itemsize,***REMOVED******REMOVED***
    assert_(type(a_view***REMOVED*** is np.ndarray***REMOVED***
    a_view = as_strided(a, shape=(2,***REMOVED***, strides=(2 * a.itemsize,***REMOVED***, subok=True***REMOVED***
    assert_(type(a_view***REMOVED*** is VerySimpleSubClass***REMOVED***
    # test that if a subclass has __array_finalize__, it is used
    a = SimpleSubClass([1, 2, 3, 4***REMOVED******REMOVED***
    a_view = as_strided(a, shape=(2,***REMOVED***, strides=(2 * a.itemsize,***REMOVED***, subok=True***REMOVED***
    assert_(type(a_view***REMOVED*** is SimpleSubClass***REMOVED***
    assert_(a_view.info == 'simple finalized'***REMOVED***

    # similar tests for broadcast_arrays
    b = np.arange(len(a***REMOVED******REMOVED***.reshape(-1, 1***REMOVED***
    a_view, b_view = broadcast_arrays(a, b***REMOVED***
    assert_(type(a_view***REMOVED*** is np.ndarray***REMOVED***
    assert_(type(b_view***REMOVED*** is np.ndarray***REMOVED***
    assert_(a_view.shape == b_view.shape***REMOVED***
    a_view, b_view = broadcast_arrays(a, b, subok=True***REMOVED***
    assert_(type(a_view***REMOVED*** is SimpleSubClass***REMOVED***
    assert_(a_view.info == 'simple finalized'***REMOVED***
    assert_(type(b_view***REMOVED*** is np.ndarray***REMOVED***
    assert_(a_view.shape == b_view.shape***REMOVED***

    # and for broadcast_to
    shape = (2, 4***REMOVED***
    a_view = broadcast_to(a, shape***REMOVED***
    assert_(type(a_view***REMOVED*** is np.ndarray***REMOVED***
    assert_(a_view.shape == shape***REMOVED***
    a_view = broadcast_to(a, shape, subok=True***REMOVED***
    assert_(type(a_view***REMOVED*** is SimpleSubClass***REMOVED***
    assert_(a_view.info == 'simple finalized'***REMOVED***
    assert_(a_view.shape == shape***REMOVED***


def test_writeable(***REMOVED***:
    # broadcast_to should return a readonly array
    original = np.array([1, 2, 3***REMOVED******REMOVED***
    result = broadcast_to(original, (2, 3***REMOVED******REMOVED***
    assert_equal(result.flags.writeable, False***REMOVED***
    assert_raises(ValueError, result.__setitem__, slice(None***REMOVED***, 0***REMOVED***

    # but the result of broadcast_arrays needs to be writeable (for now***REMOVED***, to
    # preserve backwards compatibility
    for results in [broadcast_arrays(original***REMOVED***,
                    broadcast_arrays(0, original***REMOVED******REMOVED***:
        for result in results:
            assert_equal(result.flags.writeable, True***REMOVED***
    # keep readonly input readonly
    original.flags.writeable = False
    _, result = broadcast_arrays(0, original***REMOVED***
    assert_equal(result.flags.writeable, False***REMOVED***

    # regresssion test for GH6491
    shape = (2,***REMOVED***
    strides = [0***REMOVED***
    tricky_array = as_strided(np.array(0***REMOVED***, shape, strides***REMOVED***
    other = np.zeros((1,***REMOVED******REMOVED***
    first, second = broadcast_arrays(tricky_array, other***REMOVED***
    assert_(first.shape == second.shape***REMOVED***


def test_reference_types(***REMOVED***:
    input_array = np.array('a', dtype=object***REMOVED***
    expected = np.array(['a'***REMOVED*** * 3, dtype=object***REMOVED***
    actual = broadcast_to(input_array, (3,***REMOVED******REMOVED***
    assert_array_equal(expected, actual***REMOVED***

    actual, _ = broadcast_arrays(input_array, np.ones(3***REMOVED******REMOVED***
    assert_array_equal(expected, actual***REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
