from __future__ import division, absolute_import, print_function

from operator import mul
from functools import reduce

import numpy as np
from numpy.random import randint
from numpy.lib import Arrayterator
from numpy.testing import assert_


def test(***REMOVED***:
    np.random.seed(np.arange(10***REMOVED******REMOVED***

    # Create a random array
    ndims = randint(5***REMOVED***+1
    shape = tuple(randint(10***REMOVED***+1 for dim in range(ndims***REMOVED******REMOVED***
    els = reduce(mul, shape***REMOVED***
    a = np.arange(els***REMOVED***
    a.shape = shape

    buf_size = randint(2*els***REMOVED***
    b = Arrayterator(a, buf_size***REMOVED***

    # Check that each block has at most ``buf_size`` elements
    for block in b:
        assert_(len(block.flat***REMOVED*** <= (buf_size or els***REMOVED******REMOVED***

    # Check that all elements are iterated correctly
    assert_(list(b.flat***REMOVED*** == list(a.flat***REMOVED******REMOVED***

    # Slice arrayterator
    start = [randint(dim***REMOVED*** for dim in shape***REMOVED***
    stop = [randint(dim***REMOVED***+1 for dim in shape***REMOVED***
    step = [randint(dim***REMOVED***+1 for dim in shape***REMOVED***
    slice_ = tuple(slice(*t***REMOVED*** for t in zip(start, stop, step***REMOVED******REMOVED***
    c = b[slice_***REMOVED***
    d = a[slice_***REMOVED***

    # Check that each block has at most ``buf_size`` elements
    for block in c:
        assert_(len(block.flat***REMOVED*** <= (buf_size or els***REMOVED******REMOVED***

    # Check that the arrayterator is sliced correctly
    assert_(np.all(c.__array__(***REMOVED*** == d***REMOVED******REMOVED***

    # Check that all elements are iterated correctly
    assert_(list(c.flat***REMOVED*** == list(d.flat***REMOVED******REMOVED***

if __name__ == '__main__':
    from numpy.testing import run_module_suite
    run_module_suite(***REMOVED***
