from __future__ import division, absolute_import, print_function

r''' Test the .npy file format.

Set up:

    >>> import sys
    >>> from io import BytesIO
    >>> from numpy.lib import format
    >>>
    >>> scalars = [
    ...     np.uint8,
    ...     np.int8,
    ...     np.uint16,
    ...     np.int16,
    ...     np.uint32,
    ...     np.int32,
    ...     np.uint64,
    ...     np.int64,
    ...     np.float32,
    ...     np.float64,
    ...     np.complex64,
    ...     np.complex128,
    ...     object,
    ... ***REMOVED***
    >>>
    >>> basic_arrays = [***REMOVED***
    >>>
    >>> for scalar in scalars:
    ...     for endian in '<>':
    ...         dtype = np.dtype(scalar***REMOVED***.newbyteorder(endian***REMOVED***
    ...         basic = np.arange(15***REMOVED***.astype(dtype***REMOVED***
    ...         basic_arrays.extend([
    ...             np.array([***REMOVED***, dtype=dtype***REMOVED***,
    ...             np.array(10, dtype=dtype***REMOVED***,
    ...             basic,
    ...             basic.reshape((3,5***REMOVED******REMOVED***,
    ...             basic.reshape((3,5***REMOVED******REMOVED***.T,
    ...             basic.reshape((3,5***REMOVED******REMOVED***[::-1,::2***REMOVED***,
    ...         ***REMOVED******REMOVED***
    ...
    >>>
    >>> Pdescr = [
    ...     ('x', 'i4', (2,***REMOVED******REMOVED***,
    ...     ('y', 'f8', (2, 2***REMOVED******REMOVED***,
    ...     ('z', 'u1'***REMOVED******REMOVED***
    >>>
    >>>
    >>> PbufferT = [
    ...     ([3,2***REMOVED***, [[6.,4.***REMOVED***,[6.,4.***REMOVED******REMOVED***, 8***REMOVED***,
    ...     ([4,3***REMOVED***, [[7.,5.***REMOVED***,[7.,5.***REMOVED******REMOVED***, 9***REMOVED***,
    ...     ***REMOVED***
    >>>
    >>>
    >>> Ndescr = [
    ...     ('x', 'i4', (2,***REMOVED******REMOVED***,
    ...     ('Info', [
    ...         ('value', 'c16'***REMOVED***,
    ...         ('y2', 'f8'***REMOVED***,
    ...         ('Info2', [
    ...             ('name', 'S2'***REMOVED***,
    ...             ('value', 'c16', (2,***REMOVED******REMOVED***,
    ...             ('y3', 'f8', (2,***REMOVED******REMOVED***,
    ...             ('z3', 'u4', (2,***REMOVED******REMOVED******REMOVED******REMOVED***,
    ...         ('name', 'S2'***REMOVED***,
    ...         ('z2', 'b1'***REMOVED******REMOVED******REMOVED***,
    ...     ('color', 'S2'***REMOVED***,
    ...     ('info', [
    ...         ('Name', 'U8'***REMOVED***,
    ...         ('Value', 'c16'***REMOVED******REMOVED******REMOVED***,
    ...     ('y', 'f8', (2, 2***REMOVED******REMOVED***,
    ...     ('z', 'u1'***REMOVED******REMOVED***
    >>>
    >>>
    >>> NbufferT = [
    ...     ([3,2***REMOVED***, (6j, 6., ('nn', [6j,4j***REMOVED***, [6.,4.***REMOVED***, [1,2***REMOVED******REMOVED***, 'NN', True***REMOVED***, 'cc', ('NN', 6j***REMOVED***, [[6.,4.***REMOVED***,[6.,4.***REMOVED******REMOVED***, 8***REMOVED***,
    ...     ([4,3***REMOVED***, (7j, 7., ('oo', [7j,5j***REMOVED***, [7.,5.***REMOVED***, [2,1***REMOVED******REMOVED***, 'OO', False***REMOVED***, 'dd', ('OO', 7j***REMOVED***, [[7.,5.***REMOVED***,[7.,5.***REMOVED******REMOVED***, 9***REMOVED***,
    ...     ***REMOVED***
    >>>
    >>>
    >>> record_arrays = [
    ...     np.array(PbufferT, dtype=np.dtype(Pdescr***REMOVED***.newbyteorder('<'***REMOVED******REMOVED***,
    ...     np.array(NbufferT, dtype=np.dtype(Ndescr***REMOVED***.newbyteorder('<'***REMOVED******REMOVED***,
    ...     np.array(PbufferT, dtype=np.dtype(Pdescr***REMOVED***.newbyteorder('>'***REMOVED******REMOVED***,
    ...     np.array(NbufferT, dtype=np.dtype(Ndescr***REMOVED***.newbyteorder('>'***REMOVED******REMOVED***,
    ... ***REMOVED***

Test the magic string writing.

    >>> format.magic(1, 0***REMOVED***
    '\x93NUMPY\x01\x00'
    >>> format.magic(0, 0***REMOVED***
    '\x93NUMPY\x00\x00'
    >>> format.magic(255, 255***REMOVED***
    '\x93NUMPY\xff\xff'
    >>> format.magic(2, 5***REMOVED***
    '\x93NUMPY\x02\x05'

Test the magic string reading.

    >>> format.read_magic(BytesIO(format.magic(1, 0***REMOVED******REMOVED******REMOVED***
    (1, 0***REMOVED***
    >>> format.read_magic(BytesIO(format.magic(0, 0***REMOVED******REMOVED******REMOVED***
    (0, 0***REMOVED***
    >>> format.read_magic(BytesIO(format.magic(255, 255***REMOVED******REMOVED******REMOVED***
    (255, 255***REMOVED***
    >>> format.read_magic(BytesIO(format.magic(2, 5***REMOVED******REMOVED******REMOVED***
    (2, 5***REMOVED***

Test the header writing.

    >>> for arr in basic_arrays + record_arrays:
    ...     f = BytesIO(***REMOVED***
    ...     format.write_array_header_1_0(f, arr***REMOVED***   # XXX: arr is not a dict, items gets called on it
    ...     print(repr(f.getvalue(***REMOVED******REMOVED******REMOVED***
    ...
    "F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (0,***REMOVED******REMOVED***              \n"
    "F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (***REMOVED******REMOVED***                \n"
    "F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (15,***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (3, 5***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '|u1', 'fortran_order': True, 'shape': (5, 3***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (3, 3***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (0,***REMOVED******REMOVED***              \n"
    "F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (***REMOVED******REMOVED***                \n"
    "F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (15,***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (3, 5***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '|u1', 'fortran_order': True, 'shape': (5, 3***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (3, 3***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (0,***REMOVED******REMOVED***              \n"
    "F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (***REMOVED******REMOVED***                \n"
    "F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (15,***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (3, 5***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '|i1', 'fortran_order': True, 'shape': (5, 3***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (3, 3***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (0,***REMOVED******REMOVED***              \n"
    "F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (***REMOVED******REMOVED***                \n"
    "F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (15,***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (3, 5***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '|i1', 'fortran_order': True, 'shape': (5, 3***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (3, 3***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '<u2', 'fortran_order': False, 'shape': (0,***REMOVED******REMOVED***              \n"
    "F\x00{'descr': '<u2', 'fortran_order': False, 'shape': (***REMOVED******REMOVED***                \n"
    "F\x00{'descr': '<u2', 'fortran_order': False, 'shape': (15,***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '<u2', 'fortran_order': False, 'shape': (3, 5***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '<u2', 'fortran_order': True, 'shape': (5, 3***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '<u2', 'fortran_order': False, 'shape': (3, 3***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '>u2', 'fortran_order': False, 'shape': (0,***REMOVED******REMOVED***              \n"
    "F\x00{'descr': '>u2', 'fortran_order': False, 'shape': (***REMOVED******REMOVED***                \n"
    "F\x00{'descr': '>u2', 'fortran_order': False, 'shape': (15,***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '>u2', 'fortran_order': False, 'shape': (3, 5***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '>u2', 'fortran_order': True, 'shape': (5, 3***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '>u2', 'fortran_order': False, 'shape': (3, 3***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '<i2', 'fortran_order': False, 'shape': (0,***REMOVED******REMOVED***              \n"
    "F\x00{'descr': '<i2', 'fortran_order': False, 'shape': (***REMOVED******REMOVED***                \n"
    "F\x00{'descr': '<i2', 'fortran_order': False, 'shape': (15,***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '<i2', 'fortran_order': False, 'shape': (3, 5***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '<i2', 'fortran_order': True, 'shape': (5, 3***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '<i2', 'fortran_order': False, 'shape': (3, 3***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '>i2', 'fortran_order': False, 'shape': (0,***REMOVED******REMOVED***              \n"
    "F\x00{'descr': '>i2', 'fortran_order': False, 'shape': (***REMOVED******REMOVED***                \n"
    "F\x00{'descr': '>i2', 'fortran_order': False, 'shape': (15,***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '>i2', 'fortran_order': False, 'shape': (3, 5***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '>i2', 'fortran_order': True, 'shape': (5, 3***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '>i2', 'fortran_order': False, 'shape': (3, 3***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '<u4', 'fortran_order': False, 'shape': (0,***REMOVED******REMOVED***              \n"
    "F\x00{'descr': '<u4', 'fortran_order': False, 'shape': (***REMOVED******REMOVED***                \n"
    "F\x00{'descr': '<u4', 'fortran_order': False, 'shape': (15,***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '<u4', 'fortran_order': False, 'shape': (3, 5***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '<u4', 'fortran_order': True, 'shape': (5, 3***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '<u4', 'fortran_order': False, 'shape': (3, 3***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '>u4', 'fortran_order': False, 'shape': (0,***REMOVED******REMOVED***              \n"
    "F\x00{'descr': '>u4', 'fortran_order': False, 'shape': (***REMOVED******REMOVED***                \n"
    "F\x00{'descr': '>u4', 'fortran_order': False, 'shape': (15,***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '>u4', 'fortran_order': False, 'shape': (3, 5***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '>u4', 'fortran_order': True, 'shape': (5, 3***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '>u4', 'fortran_order': False, 'shape': (3, 3***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '<i4', 'fortran_order': False, 'shape': (0,***REMOVED******REMOVED***              \n"
    "F\x00{'descr': '<i4', 'fortran_order': False, 'shape': (***REMOVED******REMOVED***                \n"
    "F\x00{'descr': '<i4', 'fortran_order': False, 'shape': (15,***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '<i4', 'fortran_order': False, 'shape': (3, 5***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '<i4', 'fortran_order': True, 'shape': (5, 3***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '<i4', 'fortran_order': False, 'shape': (3, 3***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '>i4', 'fortran_order': False, 'shape': (0,***REMOVED******REMOVED***              \n"
    "F\x00{'descr': '>i4', 'fortran_order': False, 'shape': (***REMOVED******REMOVED***                \n"
    "F\x00{'descr': '>i4', 'fortran_order': False, 'shape': (15,***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '>i4', 'fortran_order': False, 'shape': (3, 5***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '>i4', 'fortran_order': True, 'shape': (5, 3***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '>i4', 'fortran_order': False, 'shape': (3, 3***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '<u8', 'fortran_order': False, 'shape': (0,***REMOVED******REMOVED***              \n"
    "F\x00{'descr': '<u8', 'fortran_order': False, 'shape': (***REMOVED******REMOVED***                \n"
    "F\x00{'descr': '<u8', 'fortran_order': False, 'shape': (15,***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '<u8', 'fortran_order': False, 'shape': (3, 5***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '<u8', 'fortran_order': True, 'shape': (5, 3***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '<u8', 'fortran_order': False, 'shape': (3, 3***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '>u8', 'fortran_order': False, 'shape': (0,***REMOVED******REMOVED***              \n"
    "F\x00{'descr': '>u8', 'fortran_order': False, 'shape': (***REMOVED******REMOVED***                \n"
    "F\x00{'descr': '>u8', 'fortran_order': False, 'shape': (15,***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '>u8', 'fortran_order': False, 'shape': (3, 5***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '>u8', 'fortran_order': True, 'shape': (5, 3***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '>u8', 'fortran_order': False, 'shape': (3, 3***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '<i8', 'fortran_order': False, 'shape': (0,***REMOVED******REMOVED***              \n"
    "F\x00{'descr': '<i8', 'fortran_order': False, 'shape': (***REMOVED******REMOVED***                \n"
    "F\x00{'descr': '<i8', 'fortran_order': False, 'shape': (15,***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '<i8', 'fortran_order': False, 'shape': (3, 5***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '<i8', 'fortran_order': True, 'shape': (5, 3***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '<i8', 'fortran_order': False, 'shape': (3, 3***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '>i8', 'fortran_order': False, 'shape': (0,***REMOVED******REMOVED***              \n"
    "F\x00{'descr': '>i8', 'fortran_order': False, 'shape': (***REMOVED******REMOVED***                \n"
    "F\x00{'descr': '>i8', 'fortran_order': False, 'shape': (15,***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '>i8', 'fortran_order': False, 'shape': (3, 5***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '>i8', 'fortran_order': True, 'shape': (5, 3***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '>i8', 'fortran_order': False, 'shape': (3, 3***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '<f4', 'fortran_order': False, 'shape': (0,***REMOVED******REMOVED***              \n"
    "F\x00{'descr': '<f4', 'fortran_order': False, 'shape': (***REMOVED******REMOVED***                \n"
    "F\x00{'descr': '<f4', 'fortran_order': False, 'shape': (15,***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '<f4', 'fortran_order': False, 'shape': (3, 5***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '<f4', 'fortran_order': True, 'shape': (5, 3***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '<f4', 'fortran_order': False, 'shape': (3, 3***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '>f4', 'fortran_order': False, 'shape': (0,***REMOVED******REMOVED***              \n"
    "F\x00{'descr': '>f4', 'fortran_order': False, 'shape': (***REMOVED******REMOVED***                \n"
    "F\x00{'descr': '>f4', 'fortran_order': False, 'shape': (15,***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '>f4', 'fortran_order': False, 'shape': (3, 5***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '>f4', 'fortran_order': True, 'shape': (5, 3***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '>f4', 'fortran_order': False, 'shape': (3, 3***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '<f8', 'fortran_order': False, 'shape': (0,***REMOVED******REMOVED***              \n"
    "F\x00{'descr': '<f8', 'fortran_order': False, 'shape': (***REMOVED******REMOVED***                \n"
    "F\x00{'descr': '<f8', 'fortran_order': False, 'shape': (15,***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '<f8', 'fortran_order': False, 'shape': (3, 5***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '<f8', 'fortran_order': True, 'shape': (5, 3***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '<f8', 'fortran_order': False, 'shape': (3, 3***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '>f8', 'fortran_order': False, 'shape': (0,***REMOVED******REMOVED***              \n"
    "F\x00{'descr': '>f8', 'fortran_order': False, 'shape': (***REMOVED******REMOVED***                \n"
    "F\x00{'descr': '>f8', 'fortran_order': False, 'shape': (15,***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '>f8', 'fortran_order': False, 'shape': (3, 5***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '>f8', 'fortran_order': True, 'shape': (5, 3***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '>f8', 'fortran_order': False, 'shape': (3, 3***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '<c8', 'fortran_order': False, 'shape': (0,***REMOVED******REMOVED***              \n"
    "F\x00{'descr': '<c8', 'fortran_order': False, 'shape': (***REMOVED******REMOVED***                \n"
    "F\x00{'descr': '<c8', 'fortran_order': False, 'shape': (15,***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '<c8', 'fortran_order': False, 'shape': (3, 5***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '<c8', 'fortran_order': True, 'shape': (5, 3***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '<c8', 'fortran_order': False, 'shape': (3, 3***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '>c8', 'fortran_order': False, 'shape': (0,***REMOVED******REMOVED***              \n"
    "F\x00{'descr': '>c8', 'fortran_order': False, 'shape': (***REMOVED******REMOVED***                \n"
    "F\x00{'descr': '>c8', 'fortran_order': False, 'shape': (15,***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '>c8', 'fortran_order': False, 'shape': (3, 5***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '>c8', 'fortran_order': True, 'shape': (5, 3***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '>c8', 'fortran_order': False, 'shape': (3, 3***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '<c16', 'fortran_order': False, 'shape': (0,***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '<c16', 'fortran_order': False, 'shape': (***REMOVED******REMOVED***               \n"
    "F\x00{'descr': '<c16', 'fortran_order': False, 'shape': (15,***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '<c16', 'fortran_order': False, 'shape': (3, 5***REMOVED******REMOVED***           \n"
    "F\x00{'descr': '<c16', 'fortran_order': True, 'shape': (5, 3***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '<c16', 'fortran_order': False, 'shape': (3, 3***REMOVED******REMOVED***           \n"
    "F\x00{'descr': '>c16', 'fortran_order': False, 'shape': (0,***REMOVED******REMOVED***             \n"
    "F\x00{'descr': '>c16', 'fortran_order': False, 'shape': (***REMOVED******REMOVED***               \n"
    "F\x00{'descr': '>c16', 'fortran_order': False, 'shape': (15,***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '>c16', 'fortran_order': False, 'shape': (3, 5***REMOVED******REMOVED***           \n"
    "F\x00{'descr': '>c16', 'fortran_order': True, 'shape': (5, 3***REMOVED******REMOVED***            \n"
    "F\x00{'descr': '>c16', 'fortran_order': False, 'shape': (3, 3***REMOVED******REMOVED***           \n"
    "F\x00{'descr': 'O', 'fortran_order': False, 'shape': (0,***REMOVED******REMOVED***              \n"
    "F\x00{'descr': 'O', 'fortran_order': False, 'shape': (***REMOVED******REMOVED***                \n"
    "F\x00{'descr': 'O', 'fortran_order': False, 'shape': (15,***REMOVED******REMOVED***             \n"
    "F\x00{'descr': 'O', 'fortran_order': False, 'shape': (3, 5***REMOVED******REMOVED***            \n"
    "F\x00{'descr': 'O', 'fortran_order': True, 'shape': (5, 3***REMOVED******REMOVED***             \n"
    "F\x00{'descr': 'O', 'fortran_order': False, 'shape': (3, 3***REMOVED******REMOVED***            \n"
    "F\x00{'descr': 'O', 'fortran_order': False, 'shape': (0,***REMOVED******REMOVED***              \n"
    "F\x00{'descr': 'O', 'fortran_order': False, 'shape': (***REMOVED******REMOVED***                \n"
    "F\x00{'descr': 'O', 'fortran_order': False, 'shape': (15,***REMOVED******REMOVED***             \n"
    "F\x00{'descr': 'O', 'fortran_order': False, 'shape': (3, 5***REMOVED******REMOVED***            \n"
    "F\x00{'descr': 'O', 'fortran_order': True, 'shape': (5, 3***REMOVED******REMOVED***             \n"
    "F\x00{'descr': 'O', 'fortran_order': False, 'shape': (3, 3***REMOVED******REMOVED***            \n"
    "v\x00{'descr': [('x', '<i4', (2,***REMOVED******REMOVED***, ('y', '<f8', (2, 2***REMOVED******REMOVED***, ('z', '|u1'***REMOVED******REMOVED***,\n 'fortran_order': False,\n 'shape': (2,***REMOVED******REMOVED***         \n"
    "\x16\x02{'descr': [('x', '<i4', (2,***REMOVED******REMOVED***,\n           ('Info',\n            [('value', '<c16'***REMOVED***,\n             ('y2', '<f8'***REMOVED***,\n             ('Info2',\n              [('name', '|S2'***REMOVED***,\n               ('value', '<c16', (2,***REMOVED******REMOVED***,\n               ('y3', '<f8', (2,***REMOVED******REMOVED***,\n               ('z3', '<u4', (2,***REMOVED******REMOVED******REMOVED******REMOVED***,\n             ('name', '|S2'***REMOVED***,\n             ('z2', '|b1'***REMOVED******REMOVED******REMOVED***,\n           ('color', '|S2'***REMOVED***,\n           ('info', [('Name', '<U8'***REMOVED***, ('Value', '<c16'***REMOVED******REMOVED******REMOVED***,\n           ('y', '<f8', (2, 2***REMOVED******REMOVED***,\n           ('z', '|u1'***REMOVED******REMOVED***,\n 'fortran_order': False,\n 'shape': (2,***REMOVED******REMOVED***      \n"
    "v\x00{'descr': [('x', '>i4', (2,***REMOVED******REMOVED***, ('y', '>f8', (2, 2***REMOVED******REMOVED***, ('z', '|u1'***REMOVED******REMOVED***,\n 'fortran_order': False,\n 'shape': (2,***REMOVED******REMOVED***         \n"
    "\x16\x02{'descr': [('x', '>i4', (2,***REMOVED******REMOVED***,\n           ('Info',\n            [('value', '>c16'***REMOVED***,\n             ('y2', '>f8'***REMOVED***,\n             ('Info2',\n              [('name', '|S2'***REMOVED***,\n               ('value', '>c16', (2,***REMOVED******REMOVED***,\n               ('y3', '>f8', (2,***REMOVED******REMOVED***,\n               ('z3', '>u4', (2,***REMOVED******REMOVED******REMOVED******REMOVED***,\n             ('name', '|S2'***REMOVED***,\n             ('z2', '|b1'***REMOVED******REMOVED******REMOVED***,\n           ('color', '|S2'***REMOVED***,\n           ('info', [('Name', '>U8'***REMOVED***, ('Value', '>c16'***REMOVED******REMOVED******REMOVED***,\n           ('y', '>f8', (2, 2***REMOVED******REMOVED***,\n           ('z', '|u1'***REMOVED******REMOVED***,\n 'fortran_order': False,\n 'shape': (2,***REMOVED******REMOVED***      \n"
'''

import sys
***REMOVED***
import shutil
import tempfile
import warnings
from io import BytesIO

import numpy as np
from numpy.compat import asbytes, asbytes_nested, sixu
from numpy.testing import (
    run_module_suite, assert_, assert_array_equal, assert_raises, raises,
    dec, SkipTest
    ***REMOVED***
from numpy.lib import format


tempdir = None

# Module-level setup.


def setup_module(***REMOVED***:
    global tempdir
    tempdir = tempfile.mkdtemp(***REMOVED***


def teardown_module(***REMOVED***:
    global tempdir
    if tempdir is not None and os.path.isdir(tempdir***REMOVED***:
        shutil.rmtree(tempdir***REMOVED***
        tempdir = None


# Generate some basic arrays to test with.
scalars = [
    np.uint8,
    np.int8,
    np.uint16,
    np.int16,
    np.uint32,
    np.int32,
    np.uint64,
    np.int64,
    np.float32,
    np.float64,
    np.complex64,
    np.complex128,
    object,
***REMOVED***
basic_arrays = [***REMOVED***
for scalar in scalars:
    for endian in '<>':
        dtype = np.dtype(scalar***REMOVED***.newbyteorder(endian***REMOVED***
        basic = np.arange(1500***REMOVED***.astype(dtype***REMOVED***
        basic_arrays.extend([
            # Empty
            np.array([***REMOVED***, dtype=dtype***REMOVED***,
            # Rank-0
            np.array(10, dtype=dtype***REMOVED***,
            # 1-D
            basic,
            # 2-D C-contiguous
            basic.reshape((30, 50***REMOVED******REMOVED***,
            # 2-D F-contiguous
            basic.reshape((30, 50***REMOVED******REMOVED***.T,
            # 2-D non-contiguous
            basic.reshape((30, 50***REMOVED******REMOVED***[::-1, ::2***REMOVED***,
        ***REMOVED******REMOVED***

# More complicated record arrays.
# This is the structure of the table used for plain objects:
#
# +-+-+-+
# |x|y|z|
# +-+-+-+

# Structure of a plain array description:
Pdescr = [
    ('x', 'i4', (2,***REMOVED******REMOVED***,
    ('y', 'f8', (2, 2***REMOVED******REMOVED***,
    ('z', 'u1'***REMOVED******REMOVED***

# A plain list of tuples with values for testing:
PbufferT = [
    # x     y                  z
    ([3, 2***REMOVED***, [[6., 4.***REMOVED***, [6., 4.***REMOVED******REMOVED***, 8***REMOVED***,
    ([4, 3***REMOVED***, [[7., 5.***REMOVED***, [7., 5.***REMOVED******REMOVED***, 9***REMOVED***,
    ***REMOVED***


# This is the structure of the table used for nested objects (DON'T PANIC!***REMOVED***:
#
# +-+---------------------------------+-----+----------+-+-+
# |x|Info                             |color|info      |y|z|
# | +-----+--+----------------+----+--+     +----+-----+ | |
# | |value|y2|Info2           |name|z2|     |Name|Value| | |
# | |     |  +----+-----+--+--+    |  |     |    |     | | |
# | |     |  |name|value|y3|z3|    |  |     |    |     | | |
# +-+-----+--+----+-----+--+--+----+--+-----+----+-----+-+-+
#

# The corresponding nested array description:
Ndescr = [
    ('x', 'i4', (2,***REMOVED******REMOVED***,
    ('Info', [
        ('value', 'c16'***REMOVED***,
        ('y2', 'f8'***REMOVED***,
        ('Info2', [
            ('name', 'S2'***REMOVED***,
            ('value', 'c16', (2,***REMOVED******REMOVED***,
            ('y3', 'f8', (2,***REMOVED******REMOVED***,
            ('z3', 'u4', (2,***REMOVED******REMOVED******REMOVED******REMOVED***,
        ('name', 'S2'***REMOVED***,
        ('z2', 'b1'***REMOVED******REMOVED******REMOVED***,
    ('color', 'S2'***REMOVED***,
    ('info', [
        ('Name', 'U8'***REMOVED***,
        ('Value', 'c16'***REMOVED******REMOVED******REMOVED***,
    ('y', 'f8', (2, 2***REMOVED******REMOVED***,
    ('z', 'u1'***REMOVED******REMOVED***

NbufferT = [
    # x     Info                                                color info        y                  z
    #       value y2 Info2                            name z2         Name Value
    #                name   value    y3       z3
    ([3, 2***REMOVED***, (6j, 6., ('nn', [6j, 4j***REMOVED***, [6., 4.***REMOVED***, [1, 2***REMOVED******REMOVED***, 'NN', True***REMOVED***,
     'cc', ('NN', 6j***REMOVED***, [[6., 4.***REMOVED***, [6., 4.***REMOVED******REMOVED***, 8***REMOVED***,
    ([4, 3***REMOVED***, (7j, 7., ('oo', [7j, 5j***REMOVED***, [7., 5.***REMOVED***, [2, 1***REMOVED******REMOVED***, 'OO', False***REMOVED***,
     'dd', ('OO', 7j***REMOVED***, [[7., 5.***REMOVED***, [7., 5.***REMOVED******REMOVED***, 9***REMOVED***,
    ***REMOVED***

record_arrays = [
    np.array(PbufferT, dtype=np.dtype(Pdescr***REMOVED***.newbyteorder('<'***REMOVED******REMOVED***,
    np.array(NbufferT, dtype=np.dtype(Ndescr***REMOVED***.newbyteorder('<'***REMOVED******REMOVED***,
    np.array(PbufferT, dtype=np.dtype(Pdescr***REMOVED***.newbyteorder('>'***REMOVED******REMOVED***,
    np.array(NbufferT, dtype=np.dtype(Ndescr***REMOVED***.newbyteorder('>'***REMOVED******REMOVED***,
***REMOVED***


#BytesIO that reads a random number of bytes at a time
class BytesIOSRandomSize(BytesIO***REMOVED***:
    def read(self, size=None***REMOVED***:
        import random
        size = random.randint(1, size***REMOVED***
        return super(BytesIOSRandomSize, self***REMOVED***.read(size***REMOVED***


def roundtrip(arr***REMOVED***:
    f = BytesIO(***REMOVED***
    format.write_array(f, arr***REMOVED***
    f2 = BytesIO(f.getvalue(***REMOVED******REMOVED***
    arr2 = format.read_array(f2***REMOVED***
    return arr2


def roundtrip_randsize(arr***REMOVED***:
    f = BytesIO(***REMOVED***
    format.write_array(f, arr***REMOVED***
    f2 = BytesIOSRandomSize(f.getvalue(***REMOVED******REMOVED***
    arr2 = format.read_array(f2***REMOVED***
    return arr2


def roundtrip_truncated(arr***REMOVED***:
    f = BytesIO(***REMOVED***
    format.write_array(f, arr***REMOVED***
    #BytesIO is one byte short
    f2 = BytesIO(f.getvalue(***REMOVED***[0:-1***REMOVED******REMOVED***
    arr2 = format.read_array(f2***REMOVED***
    return arr2


def assert_equal_(o1, o2***REMOVED***:
    assert_(o1 == o2***REMOVED***


def test_roundtrip(***REMOVED***:
    for arr in basic_arrays + record_arrays:
        arr2 = roundtrip(arr***REMOVED***
        yield assert_array_equal, arr, arr2


def test_roundtrip_randsize(***REMOVED***:
    for arr in basic_arrays + record_arrays:
        if arr.dtype != object:
            arr2 = roundtrip_randsize(arr***REMOVED***
            yield assert_array_equal, arr, arr2


def test_roundtrip_truncated(***REMOVED***:
    for arr in basic_arrays:
        if arr.dtype != object:
            yield assert_raises, ValueError, roundtrip_truncated, arr


def test_long_str(***REMOVED***:
    # check items larger than internal buffer size, gh-4027
    long_str_arr = np.ones(1, dtype=np.dtype((str, format.BUFFER_SIZE + 1***REMOVED******REMOVED******REMOVED***
    long_str_arr2 = roundtrip(long_str_arr***REMOVED***
    assert_array_equal(long_str_arr, long_str_arr2***REMOVED***


@dec.slow
def test_memmap_roundtrip(***REMOVED***:
    # Fixme: test crashes nose on windows.
    if not (sys.platform == 'win32' or sys.platform == 'cygwin'***REMOVED***:
        for arr in basic_arrays + record_arrays:
            if arr.dtype.hasobject:
                # Skip these since they can't be mmap'ed.
                continue
            # Write it out normally and through mmap.
            nfn = os.path.join(tempdir, 'normal.npy'***REMOVED***
            mfn = os.path.join(tempdir, 'memmap.npy'***REMOVED***
            fp = open(nfn, 'wb'***REMOVED***
            ***REMOVED***
                format.write_array(fp, arr***REMOVED***
            finally:
                fp.close(***REMOVED***

            fortran_order = (
                arr.flags.f_contiguous and not arr.flags.c_contiguous***REMOVED***
            ma = format.open_memmap(mfn, mode='w+', dtype=arr.dtype,
                                    shape=arr.shape, fortran_order=fortran_order***REMOVED***
            ma[...***REMOVED*** = arr
            del ma

            # Check that both of these files' contents are the same.
            fp = open(nfn, 'rb'***REMOVED***
            normal_bytes = fp.read(***REMOVED***
            fp.close(***REMOVED***
            fp = open(mfn, 'rb'***REMOVED***
            memmap_bytes = fp.read(***REMOVED***
            fp.close(***REMOVED***
            yield assert_equal_, normal_bytes, memmap_bytes

            # Check that reading the file using memmap works.
            ma = format.open_memmap(nfn, mode='r'***REMOVED***
            del ma


def test_compressed_roundtrip(***REMOVED***:
    arr = np.random.rand(200, 200***REMOVED***
    npz_file = os.path.join(tempdir, 'compressed.npz'***REMOVED***
    np.savez_compressed(npz_file, arr=arr***REMOVED***
    arr1 = np.load(npz_file***REMOVED***['arr'***REMOVED***
    assert_array_equal(arr, arr1***REMOVED***


def test_python2_python3_interoperability(***REMOVED***:
    if sys.version_info[0***REMOVED*** >= 3:
        fname = 'win64python2.npy'
    else:
        fname = 'python3.npy'
    path = os.path.join(os.path.dirname(__file__***REMOVED***, 'data', fname***REMOVED***
    data = np.load(path***REMOVED***
    assert_array_equal(data, np.ones(2***REMOVED******REMOVED***


def test_pickle_python2_python3(***REMOVED***:
    # Test that loading object arrays saved on Python 2 works both on
    # Python 2 and Python 3 and vice versa
    data_dir = os.path.join(os.path.dirname(__file__***REMOVED***, 'data'***REMOVED***

    if sys.version_info[0***REMOVED*** >= 3:
        xrange = range
    else:
        import __builtin__
        xrange = __builtin__.xrange

    expected = np.array([None, xrange, sixu('\u512a\u826f'***REMOVED***,
                         asbytes('\xe4\xb8\x8d\xe8\x89\xaf'***REMOVED******REMOVED***,
                        dtype=object***REMOVED***

    for fname in ['py2-objarr.npy', 'py2-objarr.npz',
                  'py3-objarr.npy', 'py3-objarr.npz'***REMOVED***:
        path = os.path.join(data_dir, fname***REMOVED***

        if (fname.endswith('.npz'***REMOVED*** and sys.version_info[0***REMOVED*** == 2 and
                sys.version_info[1***REMOVED*** < 7***REMOVED***:
            # Reading object arrays directly from zipfile appears to fail
            # on Py2.6, see cfae0143b4
            continue

        for encoding in ['bytes', 'latin1'***REMOVED***:
            if (sys.version_info[0***REMOVED*** >= 3 and sys.version_info[1***REMOVED*** < 4 and
                    encoding == 'bytes'***REMOVED***:
                # The bytes encoding is available starting from Python 3.4
                continue

            data_f = np.load(path, encoding=encoding***REMOVED***
            if fname.endswith('.npz'***REMOVED***:
                data = data_f['x'***REMOVED***
                data_f.close(***REMOVED***
            else:
                data = data_f

            if sys.version_info[0***REMOVED*** >= 3:
                if encoding == 'latin1' and fname.startswith('py2'***REMOVED***:
                    assert_(isinstance(data[3***REMOVED***, str***REMOVED******REMOVED***
                    assert_array_equal(data[:-1***REMOVED***, expected[:-1***REMOVED******REMOVED***
                    # mojibake occurs
                    assert_array_equal(data[-1***REMOVED***.encode(encoding***REMOVED***, expected[-1***REMOVED******REMOVED***
                else:
                    assert_(isinstance(data[3***REMOVED***, bytes***REMOVED******REMOVED***
                    assert_array_equal(data, expected***REMOVED***
            else:
                assert_array_equal(data, expected***REMOVED***

        if sys.version_info[0***REMOVED*** >= 3:
            if fname.startswith('py2'***REMOVED***:
                if fname.endswith('.npz'***REMOVED***:
                    data = np.load(path***REMOVED***
                    assert_raises(UnicodeError, data.__getitem__, 'x'***REMOVED***
                    data.close(***REMOVED***
                    data = np.load(path, fix_imports=False, encoding='latin1'***REMOVED***
                    assert_raises(ImportError, data.__getitem__, 'x'***REMOVED***
                    data.close(***REMOVED***
                else:
                    assert_raises(UnicodeError, np.load, path***REMOVED***
                    assert_raises(ImportError, np.load, path,
                                  encoding='latin1', fix_imports=False***REMOVED***


def test_pickle_disallow(***REMOVED***:
    data_dir = os.path.join(os.path.dirname(__file__***REMOVED***, 'data'***REMOVED***

    path = os.path.join(data_dir, 'py2-objarr.npy'***REMOVED***
    assert_raises(ValueError, np.load, path,
                  allow_pickle=False, encoding='latin1'***REMOVED***

    path = os.path.join(data_dir, 'py2-objarr.npz'***REMOVED***
    f = np.load(path, allow_pickle=False, encoding='latin1'***REMOVED***
    assert_raises(ValueError, f.__getitem__, 'x'***REMOVED***

    path = os.path.join(tempdir, 'pickle-disabled.npy'***REMOVED***
    assert_raises(ValueError, np.save, path, np.array([None***REMOVED***, dtype=object***REMOVED***,
                  allow_pickle=False***REMOVED***


def test_version_2_0(***REMOVED***:
    f = BytesIO(***REMOVED***
    # requires more than 2 byte for header
    dt = [(("%d" % i***REMOVED*** * 100, float***REMOVED*** for i in range(500***REMOVED******REMOVED***
    d = np.ones(1000, dtype=dt***REMOVED***

    format.write_array(f, d, version=(2, 0***REMOVED******REMOVED***
    with warnings.catch_warnings(record=True***REMOVED*** as w:
        warnings.filterwarnings('always', '', UserWarning***REMOVED***
        format.write_array(f, d***REMOVED***
        assert_(w[0***REMOVED***.category is UserWarning***REMOVED***

    f.seek(0***REMOVED***
    n = format.read_array(f***REMOVED***
    assert_array_equal(d, n***REMOVED***

    # 1.0 requested but data cannot be saved this way
    assert_raises(ValueError, format.write_array, f, d, (1, 0***REMOVED******REMOVED***


def test_version_2_0_memmap(***REMOVED***:
    # requires more than 2 byte for header
    dt = [(("%d" % i***REMOVED*** * 100, float***REMOVED*** for i in range(500***REMOVED******REMOVED***
    d = np.ones(1000, dtype=dt***REMOVED***
    tf = tempfile.mktemp('', 'mmap', dir=tempdir***REMOVED***

    # 1.0 requested but data cannot be saved this way
    assert_raises(ValueError, format.open_memmap, tf, mode='w+', dtype=d.dtype,
                            shape=d.shape, version=(1, 0***REMOVED******REMOVED***

    ma = format.open_memmap(tf, mode='w+', dtype=d.dtype,
                            shape=d.shape, version=(2, 0***REMOVED******REMOVED***
    ma[...***REMOVED*** = d
    del ma

    with warnings.catch_warnings(record=True***REMOVED*** as w:
        warnings.filterwarnings('always', '', UserWarning***REMOVED***
        ma = format.open_memmap(tf, mode='w+', dtype=d.dtype,
                                shape=d.shape, version=None***REMOVED***
        assert_(w[0***REMOVED***.category is UserWarning***REMOVED***
        ma[...***REMOVED*** = d
        del ma

    ma = format.open_memmap(tf, mode='r'***REMOVED***
    assert_array_equal(ma, d***REMOVED***


def test_write_version(***REMOVED***:
    f = BytesIO(***REMOVED***
    arr = np.arange(1***REMOVED***
    # These should pass.
    format.write_array(f, arr, version=(1, 0***REMOVED******REMOVED***
    format.write_array(f, arr***REMOVED***

    format.write_array(f, arr, version=None***REMOVED***
    format.write_array(f, arr***REMOVED***

    format.write_array(f, arr, version=(2, 0***REMOVED******REMOVED***
    format.write_array(f, arr***REMOVED***

    # These should all fail.
    bad_versions = [
        (1, 1***REMOVED***,
        (0, 0***REMOVED***,
        (0, 1***REMOVED***,
        (2, 2***REMOVED***,
        (255, 255***REMOVED***,
    ***REMOVED***
    for version in bad_versions:
        ***REMOVED***
            format.write_array(f, arr, version=version***REMOVED***
        except ValueError:
            pass
        else:
            raise AssertionError("we should have raised a ValueError for the bad version %r" % (version,***REMOVED******REMOVED***


bad_version_magic = asbytes_nested([
    '\x93NUMPY\x01\x01',
    '\x93NUMPY\x00\x00',
    '\x93NUMPY\x00\x01',
    '\x93NUMPY\x02\x00',
    '\x93NUMPY\x02\x02',
    '\x93NUMPY\xff\xff',
***REMOVED******REMOVED***
malformed_magic = asbytes_nested([
    '\x92NUMPY\x01\x00',
    '\x00NUMPY\x01\x00',
    '\x93numpy\x01\x00',
    '\x93MATLB\x01\x00',
    '\x93NUMPY\x01',
    '\x93NUMPY',
    '',
***REMOVED******REMOVED***

def test_read_magic(***REMOVED***:
    s1 = BytesIO(***REMOVED***
    s2 = BytesIO(***REMOVED***

    arr = np.ones((3, 6***REMOVED***, dtype=float***REMOVED***

    format.write_array(s1, arr, version=(1, 0***REMOVED******REMOVED***
    format.write_array(s2, arr, version=(2, 0***REMOVED******REMOVED***

    s1.seek(0***REMOVED***
    s2.seek(0***REMOVED***

    version1 = format.read_magic(s1***REMOVED***
    version2 = format.read_magic(s2***REMOVED***

    assert_(version1 == (1, 0***REMOVED******REMOVED***
    assert_(version2 == (2, 0***REMOVED******REMOVED***

    assert_(s1.tell(***REMOVED*** == format.MAGIC_LEN***REMOVED***
    assert_(s2.tell(***REMOVED*** == format.MAGIC_LEN***REMOVED***

def test_read_magic_bad_magic(***REMOVED***:
    for magic in malformed_magic:
        f = BytesIO(magic***REMOVED***
        yield raises(ValueError***REMOVED***(format.read_magic***REMOVED***, f


def test_read_version_1_0_bad_magic(***REMOVED***:
    for magic in bad_version_magic + malformed_magic:
        f = BytesIO(magic***REMOVED***
        yield raises(ValueError***REMOVED***(format.read_array***REMOVED***, f


def test_bad_magic_args(***REMOVED***:
    assert_raises(ValueError, format.magic, -1, 1***REMOVED***
    assert_raises(ValueError, format.magic, 256, 1***REMOVED***
    assert_raises(ValueError, format.magic, 1, -1***REMOVED***
    assert_raises(ValueError, format.magic, 1, 256***REMOVED***


def test_large_header(***REMOVED***:
    s = BytesIO(***REMOVED***
    d = {'a': 1, 'b': 2***REMOVED***
    format.write_array_header_1_0(s, d***REMOVED***

    s = BytesIO(***REMOVED***
    d = {'a': 1, 'b': 2, 'c': 'x'*256*256***REMOVED***
    assert_raises(ValueError, format.write_array_header_1_0, s, d***REMOVED***


def test_read_array_header_1_0(***REMOVED***:
    s = BytesIO(***REMOVED***

    arr = np.ones((3, 6***REMOVED***, dtype=float***REMOVED***
    format.write_array(s, arr, version=(1, 0***REMOVED******REMOVED***

    s.seek(format.MAGIC_LEN***REMOVED***
    shape, fortran, dtype = format.read_array_header_1_0(s***REMOVED***

    assert_((shape, fortran, dtype***REMOVED*** == ((3, 6***REMOVED***, False, float***REMOVED******REMOVED***


def test_read_array_header_2_0(***REMOVED***:
    s = BytesIO(***REMOVED***

    arr = np.ones((3, 6***REMOVED***, dtype=float***REMOVED***
    format.write_array(s, arr, version=(2, 0***REMOVED******REMOVED***

    s.seek(format.MAGIC_LEN***REMOVED***
    shape, fortran, dtype = format.read_array_header_2_0(s***REMOVED***

    assert_((shape, fortran, dtype***REMOVED*** == ((3, 6***REMOVED***, False, float***REMOVED******REMOVED***


def test_bad_header(***REMOVED***:
    # header of length less than 2 should fail
    s = BytesIO(***REMOVED***
    assert_raises(ValueError, format.read_array_header_1_0, s***REMOVED***
    s = BytesIO(asbytes('1'***REMOVED******REMOVED***
    assert_raises(ValueError, format.read_array_header_1_0, s***REMOVED***

    # header shorter than indicated size should fail
    s = BytesIO(asbytes('\x01\x00'***REMOVED******REMOVED***
    assert_raises(ValueError, format.read_array_header_1_0, s***REMOVED***

    # headers without the exact keys required should fail
    d = {"shape": (1, 2***REMOVED***,
         "descr": "x"***REMOVED***
    s = BytesIO(***REMOVED***
    format.write_array_header_1_0(s, d***REMOVED***
    assert_raises(ValueError, format.read_array_header_1_0, s***REMOVED***

    d = {"shape": (1, 2***REMOVED***,
         "fortran_order": False,
         "descr": "x",
         "extrakey": -1***REMOVED***
    s = BytesIO(***REMOVED***
    format.write_array_header_1_0(s, d***REMOVED***
    assert_raises(ValueError, format.read_array_header_1_0, s***REMOVED***


def test_large_file_support(***REMOVED***:
    if (sys.platform == 'win32' or sys.platform == 'cygwin'***REMOVED***:
        raise SkipTest("Unknown if Windows has sparse filesystems"***REMOVED***
    # try creating a large sparse file
    tf_name = os.path.join(tempdir, 'sparse_file'***REMOVED***
    ***REMOVED***
        # seek past end would work too, but linux truncate somewhat
        # increases the chances that we have a sparse filesystem and can
        # avoid actually writing 5GB
        import subprocess as sp
        sp.check_call(["truncate", "-s", "5368709120", tf_name***REMOVED******REMOVED***
    ***REMOVED***
        raise SkipTest("Could not create 5GB large file"***REMOVED***
    # write a small array to the end
    with open(tf_name, "wb"***REMOVED*** as f:
        f.seek(5368709120***REMOVED***
        d = np.arange(5***REMOVED***
        np.save(f, d***REMOVED***
    # read it back
    with open(tf_name, "rb"***REMOVED*** as f:
        f.seek(5368709120***REMOVED***
        r = np.load(f***REMOVED***
    assert_array_equal(r, d***REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
