from __future__ import division, absolute_import, print_function

'''
>>> p = np.poly1d([1.,2,3***REMOVED******REMOVED***
>>> p
poly1d([ 1.,  2.,  3.***REMOVED******REMOVED***
>>> print(p***REMOVED***
   2
1 x + 2 x + 3
>>> q = np.poly1d([3.,2,1***REMOVED******REMOVED***
>>> q
poly1d([ 3.,  2.,  1.***REMOVED******REMOVED***
>>> print(q***REMOVED***
   2
3 x + 2 x + 1
>>> print(np.poly1d([1.89999+2j, -3j, -5.12345678, 2+1j***REMOVED******REMOVED******REMOVED***
            3      2
(1.9 + 2j***REMOVED*** x - 3j x - 5.123 x + (2 + 1j***REMOVED***
>>> print(np.poly1d([-3, -2, -1***REMOVED******REMOVED******REMOVED***
    2
-3 x - 2 x - 1

>>> p(0***REMOVED***
3.0
>>> p(5***REMOVED***
38.0
>>> q(0***REMOVED***
1.0
>>> q(5***REMOVED***
86.0

>>> p * q
poly1d([  3.,   8.,  14.,   8.,   3.***REMOVED******REMOVED***
>>> p / q
(poly1d([ 0.33333333***REMOVED******REMOVED***, poly1d([ 1.33333333,  2.66666667***REMOVED******REMOVED******REMOVED***
>>> p + q
poly1d([ 4.,  4.,  4.***REMOVED******REMOVED***
>>> p - q
poly1d([-2.,  0.,  2.***REMOVED******REMOVED***
>>> p ** 4
poly1d([   1.,    8.,   36.,  104.,  214.,  312.,  324.,  216.,   81.***REMOVED******REMOVED***

>>> p(q***REMOVED***
poly1d([  9.,  12.,  16.,   8.,   6.***REMOVED******REMOVED***
>>> q(p***REMOVED***
poly1d([  3.,  12.,  32.,  40.,  34.***REMOVED******REMOVED***

>>> np.asarray(p***REMOVED***
array([ 1.,  2.,  3.***REMOVED******REMOVED***
>>> len(p***REMOVED***
2

>>> p[0***REMOVED***, p[1***REMOVED***, p[2***REMOVED***, p[3***REMOVED***
(3.0, 2.0, 1.0, 0***REMOVED***

>>> p.integ(***REMOVED***
poly1d([ 0.33333333,  1.        ,  3.        ,  0.        ***REMOVED******REMOVED***
>>> p.integ(1***REMOVED***
poly1d([ 0.33333333,  1.        ,  3.        ,  0.        ***REMOVED******REMOVED***
>>> p.integ(5***REMOVED***
poly1d([ 0.00039683,  0.00277778,  0.025     ,  0.        ,  0.        ,
        0.        ,  0.        ,  0.        ***REMOVED******REMOVED***
>>> p.deriv(***REMOVED***
poly1d([ 2.,  2.***REMOVED******REMOVED***
>>> p.deriv(2***REMOVED***
poly1d([ 2.***REMOVED******REMOVED***

>>> q = np.poly1d([1.,2,3***REMOVED***, variable='y'***REMOVED***
>>> print(q***REMOVED***
   2
1 y + 2 y + 3
>>> q = np.poly1d([1.,2,3***REMOVED***, variable='lambda'***REMOVED***
>>> print(q***REMOVED***
        2
1 lambda + 2 lambda + 3

>>> np.polydiv(np.poly1d([1,0,-1***REMOVED******REMOVED***, np.poly1d([1,1***REMOVED******REMOVED******REMOVED***
(poly1d([ 1., -1.***REMOVED******REMOVED***, poly1d([ 0.***REMOVED******REMOVED******REMOVED***

'''
import numpy as np
from numpy.testing import (
    run_module_suite, TestCase, assert_, assert_equal, assert_array_equal,
    assert_almost_equal, rundocs
    ***REMOVED***


class TestDocs(TestCase***REMOVED***:
    def test_doctests(self***REMOVED***:
        return rundocs(***REMOVED***

    def test_roots(self***REMOVED***:
        assert_array_equal(np.roots([1, 0, 0***REMOVED******REMOVED***, [0, 0***REMOVED******REMOVED***

    def test_str_leading_zeros(self***REMOVED***:
        p = np.poly1d([4, 3, 2, 1***REMOVED******REMOVED***
        p[3***REMOVED*** = 0
        assert_equal(str(p***REMOVED***,
                     "   2\n"
                     "3 x + 2 x + 1"***REMOVED***

        p = np.poly1d([1, 2***REMOVED******REMOVED***
        p[0***REMOVED*** = 0
        p[1***REMOVED*** = 0
        assert_equal(str(p***REMOVED***, " \n0"***REMOVED***

    def test_polyfit(self***REMOVED***:
        c = np.array([3., 2., 1.***REMOVED******REMOVED***
        x = np.linspace(0, 2, 7***REMOVED***
        y = np.polyval(c, x***REMOVED***
        err = [1, -1, 1, -1, 1, -1, 1***REMOVED***
        weights = np.arange(8, 1, -1***REMOVED*****2/7.0

        # check 1D case
        m, cov = np.polyfit(x, y+err, 2, cov=True***REMOVED***
        est = [3.8571, 0.2857, 1.619***REMOVED***
        assert_almost_equal(est, m, decimal=4***REMOVED***
        val0 = [[2.9388, -5.8776, 1.6327***REMOVED***,
                [-5.8776, 12.7347, -4.2449***REMOVED***,
                [1.6327, -4.2449, 2.3220***REMOVED******REMOVED***
        assert_almost_equal(val0, cov, decimal=4***REMOVED***

        m2, cov2 = np.polyfit(x, y+err, 2, w=weights, cov=True***REMOVED***
        assert_almost_equal([4.8927, -1.0177, 1.7768***REMOVED***, m2, decimal=4***REMOVED***
        val = [[8.7929, -10.0103, 0.9756***REMOVED***,
               [-10.0103, 13.6134, -1.8178***REMOVED***,
               [0.9756, -1.8178, 0.6674***REMOVED******REMOVED***
        assert_almost_equal(val, cov2, decimal=4***REMOVED***

        # check 2D (n,1***REMOVED*** case
        y = y[:, np.newaxis***REMOVED***
        c = c[:, np.newaxis***REMOVED***
        assert_almost_equal(c, np.polyfit(x, y, 2***REMOVED******REMOVED***
        # check 2D (n,2***REMOVED*** case
        yy = np.concatenate((y, y***REMOVED***, axis=1***REMOVED***
        cc = np.concatenate((c, c***REMOVED***, axis=1***REMOVED***
        assert_almost_equal(cc, np.polyfit(x, yy, 2***REMOVED******REMOVED***

        m, cov = np.polyfit(x, yy + np.array(err***REMOVED***[:, np.newaxis***REMOVED***, 2, cov=True***REMOVED***
        assert_almost_equal(est, m[:, 0***REMOVED***, decimal=4***REMOVED***
        assert_almost_equal(est, m[:, 1***REMOVED***, decimal=4***REMOVED***
        assert_almost_equal(val0, cov[:, :, 0***REMOVED***, decimal=4***REMOVED***
        assert_almost_equal(val0, cov[:, :, 1***REMOVED***, decimal=4***REMOVED***

    def test_objects(self***REMOVED***:
        from decimal import Decimal
        p = np.poly1d([Decimal('4.0'***REMOVED***, Decimal('3.0'***REMOVED***, Decimal('2.0'***REMOVED******REMOVED******REMOVED***
        p2 = p * Decimal('1.333333333333333'***REMOVED***
        assert_(p2[1***REMOVED*** == Decimal("3.9999999999999990"***REMOVED******REMOVED***
        p2 = p.deriv(***REMOVED***
        assert_(p2[1***REMOVED*** == Decimal('8.0'***REMOVED******REMOVED***
        p2 = p.integ(***REMOVED***
        assert_(p2[3***REMOVED*** == Decimal("1.333333333333333333333333333"***REMOVED******REMOVED***
        assert_(p2[2***REMOVED*** == Decimal('1.5'***REMOVED******REMOVED***
        assert_(np.issubdtype(p2.coeffs.dtype, np.object_***REMOVED******REMOVED***
        p = np.poly([Decimal(1***REMOVED***, Decimal(2***REMOVED******REMOVED******REMOVED***
        assert_equal(np.poly([Decimal(1***REMOVED***, Decimal(2***REMOVED******REMOVED******REMOVED***,
                     [1, Decimal(-3***REMOVED***, Decimal(2***REMOVED******REMOVED******REMOVED***

    def test_complex(self***REMOVED***:
        p = np.poly1d([3j, 2j, 1j***REMOVED******REMOVED***
        p2 = p.integ(***REMOVED***
        assert_((p2.coeffs == [1j, 1j, 1j, 0***REMOVED******REMOVED***.all(***REMOVED******REMOVED***
        p2 = p.deriv(***REMOVED***
        assert_((p2.coeffs == [6j, 2j***REMOVED******REMOVED***.all(***REMOVED******REMOVED***

    def test_integ_coeffs(self***REMOVED***:
        p = np.poly1d([3, 2, 1***REMOVED******REMOVED***
        p2 = p.integ(3, k=[9, 7, 6***REMOVED******REMOVED***
        assert_(
            (p2.coeffs == [1/4./5., 1/3./4., 1/2./3., 9/1./2., 7, 6***REMOVED******REMOVED***.all(***REMOVED******REMOVED***

    def test_zero_dims(self***REMOVED***:
        ***REMOVED***
            np.poly(np.zeros((0, 0***REMOVED******REMOVED******REMOVED***
        except ValueError:
            pass

    def test_poly_int_overflow(self***REMOVED***:
        ***REMOVED***
        Regression test for gh-5096.
        ***REMOVED***
        v = np.arange(1, 21***REMOVED***
        assert_almost_equal(np.poly(v***REMOVED***, np.poly(np.diag(v***REMOVED******REMOVED******REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
