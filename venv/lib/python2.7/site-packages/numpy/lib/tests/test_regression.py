from __future__ import division, absolute_import, print_function

***REMOVED***
import sys

import numpy as np
from numpy.testing import (
    run_module_suite, TestCase, assert_, assert_equal, assert_array_equal,
    assert_array_almost_equal, assert_raises
    ***REMOVED***
from numpy.testing.utils import _assert_valid_refcount
from numpy.compat import unicode

rlevel = 1


class TestRegression(TestCase***REMOVED***:
    def test_poly1d(self, level=rlevel***REMOVED***:
        # Ticket #28
        assert_equal(np.poly1d([1***REMOVED******REMOVED*** - np.poly1d([1, 0***REMOVED******REMOVED***,
                     np.poly1d([-1, 1***REMOVED******REMOVED******REMOVED***

    def test_cov_parameters(self, level=rlevel***REMOVED***:
        # Ticket #91
        x = np.random.random((3, 3***REMOVED******REMOVED***
        y = x.copy(***REMOVED***
        np.cov(x, rowvar=1***REMOVED***
        np.cov(y, rowvar=0***REMOVED***
        assert_array_equal(x, y***REMOVED***

    def test_mem_digitize(self, level=rlevel***REMOVED***:
        # Ticket #95
        for i in range(100***REMOVED***:
            np.digitize([1, 2, 3, 4***REMOVED***, [1, 3***REMOVED******REMOVED***
            np.digitize([0, 1, 2, 3, 4***REMOVED***, [1, 3***REMOVED******REMOVED***

    def test_unique_zero_sized(self, level=rlevel***REMOVED***:
        # Ticket #205
        assert_array_equal([***REMOVED***, np.unique(np.array([***REMOVED******REMOVED******REMOVED******REMOVED***

    def test_mem_vectorise(self, level=rlevel***REMOVED***:
        # Ticket #325
        vt = np.vectorize(lambda *args: args***REMOVED***
        vt(np.zeros((1, 2, 1***REMOVED******REMOVED***, np.zeros((2, 1, 1***REMOVED******REMOVED***, np.zeros((1, 1, 2***REMOVED******REMOVED******REMOVED***
        vt(np.zeros((1, 2, 1***REMOVED******REMOVED***, np.zeros((2, 1, 1***REMOVED******REMOVED***, np.zeros((1,
           1, 2***REMOVED******REMOVED***, np.zeros((2, 2***REMOVED******REMOVED******REMOVED***

    def test_mgrid_single_element(self, level=rlevel***REMOVED***:
        # Ticket #339
        assert_array_equal(np.mgrid[0:0:1j***REMOVED***, [0***REMOVED******REMOVED***
        assert_array_equal(np.mgrid[0:0***REMOVED***, [***REMOVED******REMOVED***

    def test_refcount_vectorize(self, level=rlevel***REMOVED***:
        # Ticket #378
        def p(x, y***REMOVED***:
            return 123
        v = np.vectorize(p***REMOVED***
        _assert_valid_refcount(v***REMOVED***

    def test_poly1d_nan_roots(self, level=rlevel***REMOVED***:
        # Ticket #396
        p = np.poly1d([np.nan, np.nan, 1***REMOVED***, r=0***REMOVED***
        self.assertRaises(np.linalg.LinAlgError, getattr, p, "r"***REMOVED***

    def test_mem_polymul(self, level=rlevel***REMOVED***:
        # Ticket #448
        np.polymul([***REMOVED***, [1.***REMOVED******REMOVED***

    def test_mem_string_concat(self, level=rlevel***REMOVED***:
        # Ticket #469
        x = np.array([***REMOVED******REMOVED***
        np.append(x, 'asdasd\tasdasd'***REMOVED***

    def test_poly_div(self, level=rlevel***REMOVED***:
        # Ticket #553
        u = np.poly1d([1, 2, 3***REMOVED******REMOVED***
        v = np.poly1d([1, 2, 3, 4, 5***REMOVED******REMOVED***
        q, r = np.polydiv(u, v***REMOVED***
        assert_equal(q*v + r, u***REMOVED***

    def test_poly_eq(self, level=rlevel***REMOVED***:
        # Ticket #554
        x = np.poly1d([1, 2, 3***REMOVED******REMOVED***
        y = np.poly1d([3, 4***REMOVED******REMOVED***
        assert_(x != y***REMOVED***
        assert_(x == x***REMOVED***

    def test_polyfit_build(self***REMOVED***:
        # Ticket #628
        ref = [-1.06123820e-06, 5.70886914e-04, -1.13822012e-01,
               9.95368241e+00, -3.14526520e+02***REMOVED***
        x = [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
             104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
             116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129,
             130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
             146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157,
             158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169,
             170, 171, 172, 173, 174, 175, 176***REMOVED***
        y = [9.0, 3.0, 7.0, 4.0, 4.0, 8.0, 6.0, 11.0, 9.0, 8.0, 11.0, 5.0,
             6.0, 5.0, 9.0, 8.0, 6.0, 10.0, 6.0, 10.0, 7.0, 6.0, 6.0, 6.0,
             13.0, 4.0, 9.0, 11.0, 4.0, 5.0, 8.0, 5.0, 7.0, 7.0, 6.0, 12.0,
             7.0, 7.0, 9.0, 4.0, 12.0, 6.0, 6.0, 4.0, 3.0, 9.0, 8.0, 8.0,
             6.0, 7.0, 9.0, 10.0, 6.0, 8.0, 4.0, 7.0, 7.0, 10.0, 8.0, 8.0,
             6.0, 3.0, 8.0, 4.0, 5.0, 7.0, 8.0, 6.0, 6.0, 4.0, 12.0, 9.0,
             8.0, 8.0, 8.0, 6.0, 7.0, 4.0, 4.0, 5.0, 7.0***REMOVED***
        tested = np.polyfit(x, y, 4***REMOVED***
        assert_array_almost_equal(ref, tested***REMOVED***

    def test_polydiv_type(self***REMOVED***:
        # Make polydiv work for complex types
        msg = "Wrong type, should be complex"
        x = np.ones(3, dtype=np.complex***REMOVED***
        q, r = np.polydiv(x, x***REMOVED***
        assert_(q.dtype == np.complex, msg***REMOVED***
        msg = "Wrong type, should be float"
        x = np.ones(3, dtype=np.int***REMOVED***
        q, r = np.polydiv(x, x***REMOVED***
        assert_(q.dtype == np.float, msg***REMOVED***

    def test_histogramdd_too_many_bins(self***REMOVED***:
        # Ticket 928.
        assert_raises(ValueError, np.histogramdd, np.ones((1, 10***REMOVED******REMOVED***, bins=2**10***REMOVED***

    def test_polyint_type(self***REMOVED***:
        # Ticket #944
        msg = "Wrong type, should be complex"
        x = np.ones(3, dtype=np.complex***REMOVED***
        assert_(np.polyint(x***REMOVED***.dtype == np.complex, msg***REMOVED***
        msg = "Wrong type, should be float"
        x = np.ones(3, dtype=np.int***REMOVED***
        assert_(np.polyint(x***REMOVED***.dtype == np.float, msg***REMOVED***

    def test_ndenumerate_crash(self***REMOVED***:
        # Ticket 1140
        # Shouldn't crash:
        list(np.ndenumerate(np.array([[***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***

    def test_asfarray_none(self, level=rlevel***REMOVED***:
        # Test for changeset r5065
        assert_array_equal(np.array([np.nan***REMOVED******REMOVED***, np.asfarray([None***REMOVED******REMOVED******REMOVED***

    def test_large_fancy_indexing(self, level=rlevel***REMOVED***:
        # Large enough to fail on 64-bit.
        nbits = np.dtype(np.intp***REMOVED***.itemsize * 8
        thesize = int((2**nbits***REMOVED*****(1.0/5.0***REMOVED***+1***REMOVED***

        def dp(***REMOVED***:
            n = 3
            a = np.ones((n,***REMOVED****5***REMOVED***
            i = np.random.randint(0, n, size=thesize***REMOVED***
            a[np.ix_(i, i, i, i, i***REMOVED******REMOVED*** = 0

        def dp2(***REMOVED***:
            n = 3
            a = np.ones((n,***REMOVED****5***REMOVED***
            i = np.random.randint(0, n, size=thesize***REMOVED***
            a[np.ix_(i, i, i, i, i***REMOVED******REMOVED***

        self.assertRaises(ValueError, dp***REMOVED***
        self.assertRaises(ValueError, dp2***REMOVED***

    def test_void_coercion(self, level=rlevel***REMOVED***:
        dt = np.dtype([('a', 'f4'***REMOVED***, ('b', 'i4'***REMOVED******REMOVED******REMOVED***
        x = np.zeros((1,***REMOVED***, dt***REMOVED***
        assert_(np.r_[x, x***REMOVED***.dtype == dt***REMOVED***

    def test_who_with_0dim_array(self, level=rlevel***REMOVED***:
        # ticket #1243
        ***REMOVED***
        import sys

        oldstdout = sys.stdout
        sys.stdout = open(os.devnull, 'w'***REMOVED***
        ***REMOVED***
            ***REMOVED***
                np.who({'foo': np.array(1***REMOVED******REMOVED******REMOVED***
            ***REMOVED***
                raise AssertionError("ticket #1243"***REMOVED***
        finally:
            sys.stdout.close(***REMOVED***
            sys.stdout = oldstdout

    def test_include_dirs(self***REMOVED***:
        # As a sanity check, just test that get_include
        # includes something reasonable.  Somewhat
        # related to ticket #1405.
        include_dirs = [np.get_include(***REMOVED******REMOVED***
        for path in include_dirs:
            assert_(isinstance(path, (str, unicode***REMOVED******REMOVED******REMOVED***
            assert_(path != ''***REMOVED***

    def test_polyder_return_type(self***REMOVED***:
        # Ticket #1249
        assert_(isinstance(np.polyder(np.poly1d([1***REMOVED******REMOVED***, 0***REMOVED***, np.poly1d***REMOVED******REMOVED***
        assert_(isinstance(np.polyder([1***REMOVED***, 0***REMOVED***, np.ndarray***REMOVED******REMOVED***
        assert_(isinstance(np.polyder(np.poly1d([1***REMOVED******REMOVED***, 1***REMOVED***, np.poly1d***REMOVED******REMOVED***
        assert_(isinstance(np.polyder([1***REMOVED***, 1***REMOVED***, np.ndarray***REMOVED******REMOVED***

    def test_append_fields_dtype_list(self***REMOVED***:
        # Ticket #1676
        from numpy.lib.recfunctions import append_fields

        base = np.array([1, 2, 3***REMOVED***, dtype=np.int32***REMOVED***
        names = ['a', 'b', 'c'***REMOVED***
        data = np.eye(3***REMOVED***.astype(np.int32***REMOVED***
        dlist = [np.float64, np.int32, np.int32***REMOVED***
        ***REMOVED***
            append_fields(base, names, data, dlist***REMOVED***
        ***REMOVED***
            raise AssertionError(***REMOVED***

    def test_loadtxt_fields_subarrays(self***REMOVED***:
        # For ticket #1936
        if sys.version_info[0***REMOVED*** >= 3:
            from io import StringIO
        else:
            from StringIO import StringIO

        dt = [("a", 'u1', 2***REMOVED***, ("b", 'u1', 2***REMOVED******REMOVED***
        x = np.loadtxt(StringIO("0 1 2 3"***REMOVED***, dtype=dt***REMOVED***
        assert_equal(x, np.array([((0, 1***REMOVED***, (2, 3***REMOVED******REMOVED******REMOVED***, dtype=dt***REMOVED******REMOVED***

        dt = [("a", [("a", 'u1', (1, 3***REMOVED******REMOVED***, ("b", 'u1'***REMOVED******REMOVED******REMOVED******REMOVED***
        x = np.loadtxt(StringIO("0 1 2 3"***REMOVED***, dtype=dt***REMOVED***
        assert_equal(x, np.array([(((0, 1, 2***REMOVED***, 3***REMOVED***,***REMOVED******REMOVED***, dtype=dt***REMOVED******REMOVED***

        dt = [("a", 'u1', (2, 2***REMOVED******REMOVED******REMOVED***
        x = np.loadtxt(StringIO("0 1 2 3"***REMOVED***, dtype=dt***REMOVED***
        assert_equal(x, np.array([(((0, 1***REMOVED***, (2, 3***REMOVED******REMOVED***,***REMOVED******REMOVED***, dtype=dt***REMOVED******REMOVED***

        dt = [("a", 'u1', (2, 3, 2***REMOVED******REMOVED******REMOVED***
        x = np.loadtxt(StringIO("0 1 2 3 4 5 6 7 8 9 10 11"***REMOVED***, dtype=dt***REMOVED***
        data = [((((0, 1***REMOVED***, (2, 3***REMOVED***, (4, 5***REMOVED******REMOVED***, ((6, 7***REMOVED***, (8, 9***REMOVED***, (10, 11***REMOVED******REMOVED******REMOVED***,***REMOVED******REMOVED***
        assert_equal(x, np.array(data, dtype=dt***REMOVED******REMOVED***

    def test_nansum_with_boolean(self***REMOVED***:
        # gh-2978
        a = np.zeros(2, dtype=np.bool***REMOVED***
        ***REMOVED***
            np.nansum(a***REMOVED***
        ***REMOVED***
            raise AssertionError(***REMOVED***

    def test_py3_compat(self***REMOVED***:
        # gh-2561
        # Test if the oldstyle class test is bypassed in python3
        class C(***REMOVED***:
            ***REMOVED***Old-style class in python2, normal class in python3***REMOVED***
            pass

        out = open(os.devnull, 'w'***REMOVED***
        ***REMOVED***
            np.info(C(***REMOVED***, output=out***REMOVED***
        except AttributeError:
            raise AssertionError(***REMOVED***
        finally:
            out.close(***REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
