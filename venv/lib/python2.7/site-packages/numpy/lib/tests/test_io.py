from __future__ import division, absolute_import, print_function

import sys
import gzip
***REMOVED***
import threading
from tempfile import NamedTemporaryFile
import time
import warnings
import gc
from io import BytesIO
from datetime import datetime

import numpy as np
import numpy.ma as ma
from numpy.lib._iotools import ConverterError, ConversionWarning
from numpy.compat import asbytes, bytes, unicode
from numpy.ma.testutils import assert_equal
from numpy.testing import (
    TestCase, run_module_suite, assert_warns, assert_,
    assert_raises_regex, assert_raises, assert_allclose,
    assert_array_equal,temppath
***REMOVED***
from numpy.testing.utils import tempdir


class TextIO(BytesIO***REMOVED***:
    ***REMOVED***Helper IO class.

    Writes encode strings to bytes if needed, reads return bytes.
    This makes it easier to emulate files opened in binary mode
    without needing to explicitly convert strings to bytes in
    setting up the test data.

    ***REMOVED***
    def __init__(self, s=""***REMOVED***:
        BytesIO.__init__(self, asbytes(s***REMOVED******REMOVED***

    def write(self, s***REMOVED***:
        BytesIO.write(self, asbytes(s***REMOVED******REMOVED***

    def writelines(self, lines***REMOVED***:
        BytesIO.writelines(self, [asbytes(s***REMOVED*** for s in lines***REMOVED******REMOVED***


MAJVER, MINVER = sys.version_info[:2***REMOVED***
IS_64BIT = sys.maxsize > 2**32


def strptime(s, fmt=None***REMOVED***:
    ***REMOVED***
    This function is available in the datetime module only from Python >=
    2.5.

    ***REMOVED***
    if sys.version_info[0***REMOVED*** >= 3:
        return datetime(*time.strptime(s.decode('latin1'***REMOVED***, fmt***REMOVED***[:3***REMOVED******REMOVED***
    else:
        return datetime(*time.strptime(s, fmt***REMOVED***[:3***REMOVED******REMOVED***


class RoundtripTest(object***REMOVED***:
    def roundtrip(self, save_func, *args, **kwargs***REMOVED***:
        ***REMOVED***
        save_func : callable
            Function used to save arrays to file.
        file_on_disk : bool
            If true, store the file on disk, instead of in a
            string buffer.
        save_kwds : dict
            Parameters passed to `save_func`.
        load_kwds : dict
            Parameters passed to `numpy.load`.
        args : tuple of arrays
            Arrays stored to file.

        ***REMOVED***
        save_kwds = kwargs.get('save_kwds', {***REMOVED******REMOVED***
        load_kwds = kwargs.get('load_kwds', {***REMOVED******REMOVED***
        file_on_disk = kwargs.get('file_on_disk', False***REMOVED***

        if file_on_disk:
            target_file = NamedTemporaryFile(delete=False***REMOVED***
            load_file = target_file.name
        else:
            target_file = BytesIO(***REMOVED***
            load_file = target_file

        ***REMOVED***
            arr = args

            save_func(target_file, *arr, **save_kwds***REMOVED***
            target_file.flush(***REMOVED***
            target_file.seek(0***REMOVED***

            if sys.platform == 'win32' and not isinstance(target_file, BytesIO***REMOVED***:
                target_file.close(***REMOVED***

            arr_reloaded = np.load(load_file, **load_kwds***REMOVED***

            self.arr = arr
            self.arr_reloaded = arr_reloaded
        finally:
            if not isinstance(target_file, BytesIO***REMOVED***:
                target_file.close(***REMOVED***
                # holds an open file descriptor so it can't be deleted on win
                if not isinstance(arr_reloaded, np.lib.npyio.NpzFile***REMOVED***:
                    os.remove(target_file.name***REMOVED***

    def check_roundtrips(self, a***REMOVED***:
        self.roundtrip(a***REMOVED***
        self.roundtrip(a, file_on_disk=True***REMOVED***
        self.roundtrip(np.asfortranarray(a***REMOVED******REMOVED***
        self.roundtrip(np.asfortranarray(a***REMOVED***, file_on_disk=True***REMOVED***
        if a.shape[0***REMOVED*** > 1:
            # neither C nor Fortran contiguous for 2D arrays or more
            self.roundtrip(np.asfortranarray(a***REMOVED***[1:***REMOVED******REMOVED***
            self.roundtrip(np.asfortranarray(a***REMOVED***[1:***REMOVED***, file_on_disk=True***REMOVED***

    def test_array(self***REMOVED***:
        a = np.array([***REMOVED***, float***REMOVED***
        self.check_roundtrips(a***REMOVED***

        a = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED***, float***REMOVED***
        self.check_roundtrips(a***REMOVED***

        a = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED***, int***REMOVED***
        self.check_roundtrips(a***REMOVED***

        a = np.array([[1 + 5j, 2 + 6j***REMOVED***, [3 + 7j, 4 + 8j***REMOVED******REMOVED***, dtype=np.csingle***REMOVED***
        self.check_roundtrips(a***REMOVED***

        a = np.array([[1 + 5j, 2 + 6j***REMOVED***, [3 + 7j, 4 + 8j***REMOVED******REMOVED***, dtype=np.cdouble***REMOVED***
        self.check_roundtrips(a***REMOVED***

    def test_array_object(self***REMOVED***:
        if sys.version_info[:2***REMOVED*** >= (2, 7***REMOVED***:
            a = np.array([***REMOVED***, object***REMOVED***
            self.check_roundtrips(a***REMOVED***

            a = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED***, object***REMOVED***
            self.check_roundtrips(a***REMOVED***
        # Fails with UnpicklingError: could not find MARK on Python 2.6

    def test_1D(self***REMOVED***:
        a = np.array([1, 2, 3, 4***REMOVED***, int***REMOVED***
        self.roundtrip(a***REMOVED***

    @np.testing.dec.knownfailureif(sys.platform == 'win32', "Fail on Win32"***REMOVED***
    def test_mmap(self***REMOVED***:
        a = np.array([[1, 2.5***REMOVED***, [4, 7.3***REMOVED******REMOVED******REMOVED***
        self.roundtrip(a, file_on_disk=True, load_kwds={'mmap_mode': 'r'***REMOVED******REMOVED***

        a = np.asfortranarray([[1, 2.5***REMOVED***, [4, 7.3***REMOVED******REMOVED******REMOVED***
        self.roundtrip(a, file_on_disk=True, load_kwds={'mmap_mode': 'r'***REMOVED******REMOVED***

    def test_record(self***REMOVED***:
        a = np.array([(1, 2***REMOVED***, (3, 4***REMOVED******REMOVED***, dtype=[('x', 'i4'***REMOVED***, ('y', 'i4'***REMOVED******REMOVED******REMOVED***
        self.check_roundtrips(a***REMOVED***

    def test_format_2_0(self***REMOVED***:
        dt = [(("%d" % i***REMOVED*** * 100, float***REMOVED*** for i in range(500***REMOVED******REMOVED***
        a = np.ones(1000, dtype=dt***REMOVED***
        with warnings.catch_warnings(record=True***REMOVED***:
            warnings.filterwarnings('always', '', UserWarning***REMOVED***
            self.check_roundtrips(a***REMOVED***


class TestSaveLoad(RoundtripTest, TestCase***REMOVED***:
    def roundtrip(self, *args, **kwargs***REMOVED***:
        RoundtripTest.roundtrip(self, np.save, *args, **kwargs***REMOVED***
        assert_equal(self.arr[0***REMOVED***, self.arr_reloaded***REMOVED***
        assert_equal(self.arr[0***REMOVED***.dtype, self.arr_reloaded.dtype***REMOVED***
        assert_equal(self.arr[0***REMOVED***.flags.fnc, self.arr_reloaded.flags.fnc***REMOVED***


class TestSavezLoad(RoundtripTest, TestCase***REMOVED***:
    def roundtrip(self, *args, **kwargs***REMOVED***:
        RoundtripTest.roundtrip(self, np.savez, *args, **kwargs***REMOVED***
        ***REMOVED***
            for n, arr in enumerate(self.arr***REMOVED***:
                reloaded = self.arr_reloaded['arr_%d' % n***REMOVED***
                assert_equal(arr, reloaded***REMOVED***
                assert_equal(arr.dtype, reloaded.dtype***REMOVED***
                assert_equal(arr.flags.fnc, reloaded.flags.fnc***REMOVED***
        finally:
            # delete tempfile, must be done here on windows
            if self.arr_reloaded.fid:
                self.arr_reloaded.fid.close(***REMOVED***
                os.remove(self.arr_reloaded.fid.name***REMOVED***

    @np.testing.dec.skipif(not IS_64BIT, "Works only with 64bit systems"***REMOVED***
    @np.testing.dec.slow
    def test_big_arrays(self***REMOVED***:
        L = (1 << 31***REMOVED*** + 100000
        a = np.empty(L, dtype=np.uint8***REMOVED***
        with temppath(prefix="numpy_test_big_arrays_", suffix=".npz"***REMOVED*** as tmp:
            np.savez(tmp, a=a***REMOVED***
            del a
            npfile = np.load(tmp***REMOVED***
            a = npfile['a'***REMOVED***  # Should succeed
            npfile.close(***REMOVED***
            del a  # Avoid pyflakes unused variable warning.

    def test_multiple_arrays(self***REMOVED***:
        a = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED***, float***REMOVED***
        b = np.array([[1 + 2j, 2 + 7j***REMOVED***, [3 - 6j, 4 + 12j***REMOVED******REMOVED***, complex***REMOVED***
        self.roundtrip(a, b***REMOVED***

    def test_named_arrays(self***REMOVED***:
        a = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED***, float***REMOVED***
        b = np.array([[1 + 2j, 2 + 7j***REMOVED***, [3 - 6j, 4 + 12j***REMOVED******REMOVED***, complex***REMOVED***
        c = BytesIO(***REMOVED***
        np.savez(c, file_a=a, file_b=b***REMOVED***
        c.seek(0***REMOVED***
        l = np.load(c***REMOVED***
        assert_equal(a, l['file_a'***REMOVED******REMOVED***
        assert_equal(b, l['file_b'***REMOVED******REMOVED***

    def test_BagObj(self***REMOVED***:
        a = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED***, float***REMOVED***
        b = np.array([[1 + 2j, 2 + 7j***REMOVED***, [3 - 6j, 4 + 12j***REMOVED******REMOVED***, complex***REMOVED***
        c = BytesIO(***REMOVED***
        np.savez(c, file_a=a, file_b=b***REMOVED***
        c.seek(0***REMOVED***
        l = np.load(c***REMOVED***
        assert_equal(sorted(dir(l.f***REMOVED******REMOVED***, ['file_a','file_b'***REMOVED******REMOVED***
        assert_equal(a, l.f.file_a***REMOVED***
        assert_equal(b, l.f.file_b***REMOVED***

    def test_savez_filename_clashes(self***REMOVED***:
        # Test that issue #852 is fixed
        # and savez functions in multithreaded environment

        def writer(error_list***REMOVED***:
            with temppath(suffix='.npz'***REMOVED*** as tmp:
                arr = np.random.randn(500, 500***REMOVED***
                ***REMOVED***
                    np.savez(tmp, arr=arr***REMOVED***
                except OSError as err:
                    error_list.append(err***REMOVED***

        errors = [***REMOVED***
        threads = [threading.Thread(target=writer, args=(errors,***REMOVED******REMOVED***
                   for j in range(3***REMOVED******REMOVED***
        for t in threads:
            t.start(***REMOVED***
        for t in threads:
            t.join(***REMOVED***

        if errors:
            raise AssertionError(errors***REMOVED***

    def test_not_closing_opened_fid(self***REMOVED***:
        # Test that issue #2178 is fixed:
        # verify could seek on 'loaded' file
        with temppath(suffix='.npz'***REMOVED*** as tmp:
            with open(tmp, 'wb'***REMOVED*** as fp:
                np.savez(fp, data='LOVELY LOAD'***REMOVED***
            with open(tmp, 'rb', 10000***REMOVED*** as fp:
                fp.seek(0***REMOVED***
                assert_(not fp.closed***REMOVED***
                np.load(fp***REMOVED***['data'***REMOVED***
                # fp must not get closed by .load
                assert_(not fp.closed***REMOVED***
                fp.seek(0***REMOVED***
                assert_(not fp.closed***REMOVED***

    def test_closing_fid(self***REMOVED***:
        # Test that issue #1517 (too many opened files***REMOVED*** remains closed
        # It might be a "weak" test since failed to get triggered on
        # e.g. Debian sid of 2012 Jul 05 but was reported to
        # trigger the failure on Ubuntu 10.04:
        # http://projects.scipy.org/numpy/ticket/1517#comment:2
        with temppath(suffix='.npz'***REMOVED*** as tmp:
            np.savez(tmp, data='LOVELY LOAD'***REMOVED***
            # We need to check if the garbage collector can properly close
            # numpy npz file returned by np.load when their reference count
            # goes to zero.  Python 3 running in debug mode raises a
            # ResourceWarning when file closing is left to the garbage
            # collector, so we catch the warnings.  Because ResourceWarning
            # is unknown in Python < 3.x, we take the easy way out and
            # catch all warnings.
            with warnings.catch_warnings(***REMOVED***:
                warnings.simplefilter("ignore"***REMOVED***
                for i in range(1, 1025***REMOVED***:
                    ***REMOVED***
                        np.load(tmp***REMOVED***["data"***REMOVED***
                    except Exception as e:
                        msg = "Failed to load data from a file: %s" % e
                        raise AssertionError(msg***REMOVED***

    def test_closing_zipfile_after_load(self***REMOVED***:
        # Check that zipfile owns file and can close it.  This needs to
        # pass a file name to load for the test. On windows failure will
        # cause a second error will be raised when the attempt to remove
        # the open file is made.
        prefix = 'numpy_test_closing_zipfile_after_load_'
        with temppath(suffix='.npz', prefix=prefix***REMOVED*** as tmp:
            np.savez(tmp, lab='place holder'***REMOVED***
            data = np.load(tmp***REMOVED***
            fp = data.zip.fp
            data.close(***REMOVED***
            assert_(fp.closed***REMOVED***


class TestSaveTxt(TestCase***REMOVED***:
    def test_array(self***REMOVED***:
        a = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED***, float***REMOVED***
        fmt = "%.18e"
        c = BytesIO(***REMOVED***
        np.savetxt(c, a, fmt=fmt***REMOVED***
        c.seek(0***REMOVED***
        assert_equal(c.readlines(***REMOVED***,
                     [asbytes((fmt + ' ' + fmt + '\n'***REMOVED*** % (1, 2***REMOVED******REMOVED***,
                      asbytes((fmt + ' ' + fmt + '\n'***REMOVED*** % (3, 4***REMOVED******REMOVED******REMOVED******REMOVED***

        a = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED***, int***REMOVED***
        c = BytesIO(***REMOVED***
        np.savetxt(c, a, fmt='%d'***REMOVED***
        c.seek(0***REMOVED***
        assert_equal(c.readlines(***REMOVED***, [b'1 2\n', b'3 4\n'***REMOVED******REMOVED***

    def test_1D(self***REMOVED***:
        a = np.array([1, 2, 3, 4***REMOVED***, int***REMOVED***
        c = BytesIO(***REMOVED***
        np.savetxt(c, a, fmt='%d'***REMOVED***
        c.seek(0***REMOVED***
        lines = c.readlines(***REMOVED***
        assert_equal(lines, [b'1\n', b'2\n', b'3\n', b'4\n'***REMOVED******REMOVED***

    def test_record(self***REMOVED***:
        a = np.array([(1, 2***REMOVED***, (3, 4***REMOVED******REMOVED***, dtype=[('x', 'i4'***REMOVED***, ('y', 'i4'***REMOVED******REMOVED******REMOVED***
        c = BytesIO(***REMOVED***
        np.savetxt(c, a, fmt='%d'***REMOVED***
        c.seek(0***REMOVED***
        assert_equal(c.readlines(***REMOVED***, [b'1 2\n', b'3 4\n'***REMOVED******REMOVED***

    def test_delimiter(self***REMOVED***:
        a = np.array([[1., 2.***REMOVED***, [3., 4.***REMOVED******REMOVED******REMOVED***
        c = BytesIO(***REMOVED***
        np.savetxt(c, a, delimiter=',', fmt='%d'***REMOVED***
        c.seek(0***REMOVED***
        assert_equal(c.readlines(***REMOVED***, [b'1,2\n', b'3,4\n'***REMOVED******REMOVED***

    def test_format(self***REMOVED***:
        a = np.array([(1, 2***REMOVED***, (3, 4***REMOVED******REMOVED******REMOVED***
        c = BytesIO(***REMOVED***
        # Sequence of formats
        np.savetxt(c, a, fmt=['%02d', '%3.1f'***REMOVED******REMOVED***
        c.seek(0***REMOVED***
        assert_equal(c.readlines(***REMOVED***, [b'01 2.0\n', b'03 4.0\n'***REMOVED******REMOVED***

        # A single multiformat string
        c = BytesIO(***REMOVED***
        np.savetxt(c, a, fmt='%02d : %3.1f'***REMOVED***
        c.seek(0***REMOVED***
        lines = c.readlines(***REMOVED***
        assert_equal(lines, [b'01 : 2.0\n', b'03 : 4.0\n'***REMOVED******REMOVED***

        # Specify delimiter, should be overiden
        c = BytesIO(***REMOVED***
        np.savetxt(c, a, fmt='%02d : %3.1f', delimiter=','***REMOVED***
        c.seek(0***REMOVED***
        lines = c.readlines(***REMOVED***
        assert_equal(lines, [b'01 : 2.0\n', b'03 : 4.0\n'***REMOVED******REMOVED***

        # Bad fmt, should raise a ValueError
        c = BytesIO(***REMOVED***
        assert_raises(ValueError, np.savetxt, c, a, fmt=99***REMOVED***

    def test_header_footer(self***REMOVED***:
        # Test the functionality of the header and footer keyword argument.

        c = BytesIO(***REMOVED***
        a = np.array([(1, 2***REMOVED***, (3, 4***REMOVED******REMOVED***, dtype=np.int***REMOVED***
        test_header_footer = 'Test header / footer'
        # Test the header keyword argument
        np.savetxt(c, a, fmt='%1d', header=test_header_footer***REMOVED***
        c.seek(0***REMOVED***
        assert_equal(c.read(***REMOVED***,
                     asbytes('# ' + test_header_footer + '\n1 2\n3 4\n'***REMOVED******REMOVED***
        # Test the footer keyword argument
        c = BytesIO(***REMOVED***
        np.savetxt(c, a, fmt='%1d', footer=test_header_footer***REMOVED***
        c.seek(0***REMOVED***
        assert_equal(c.read(***REMOVED***,
                     asbytes('1 2\n3 4\n# ' + test_header_footer + '\n'***REMOVED******REMOVED***
        # Test the commentstr keyword argument used on the header
        c = BytesIO(***REMOVED***
        commentstr = '% '
        np.savetxt(c, a, fmt='%1d',
                   header=test_header_footer, comments=commentstr***REMOVED***
        c.seek(0***REMOVED***
        assert_equal(c.read(***REMOVED***,
                     asbytes(commentstr + test_header_footer + '\n' + '1 2\n3 4\n'***REMOVED******REMOVED***
        # Test the commentstr keyword argument used on the footer
        c = BytesIO(***REMOVED***
        commentstr = '% '
        np.savetxt(c, a, fmt='%1d',
                   footer=test_header_footer, comments=commentstr***REMOVED***
        c.seek(0***REMOVED***
        assert_equal(c.read(***REMOVED***,
                     asbytes('1 2\n3 4\n' + commentstr + test_header_footer + '\n'***REMOVED******REMOVED***

    def test_file_roundtrip(self***REMOVED***:
        with temppath(***REMOVED*** as name:
            a = np.array([(1, 2***REMOVED***, (3, 4***REMOVED******REMOVED******REMOVED***
            np.savetxt(name, a***REMOVED***
            b = np.loadtxt(name***REMOVED***
            assert_array_equal(a, b***REMOVED***

    def test_complex_arrays(self***REMOVED***:
        ncols = 2
        nrows = 2
        a = np.zeros((ncols, nrows***REMOVED***, dtype=np.complex128***REMOVED***
        re = np.pi
        im = np.e
        a[:***REMOVED*** = re + 1.0j * im

        # One format only
        c = BytesIO(***REMOVED***
        np.savetxt(c, a, fmt=' %+.3e'***REMOVED***
        c.seek(0***REMOVED***
        lines = c.readlines(***REMOVED***
        assert_equal(
            lines,
            [b' ( +3.142e+00+ +2.718e+00j***REMOVED***  ( +3.142e+00+ +2.718e+00j***REMOVED***\n',
             b' ( +3.142e+00+ +2.718e+00j***REMOVED***  ( +3.142e+00+ +2.718e+00j***REMOVED***\n'***REMOVED******REMOVED***

        # One format for each real and imaginary part
        c = BytesIO(***REMOVED***
        np.savetxt(c, a, fmt='  %+.3e' * 2 * ncols***REMOVED***
        c.seek(0***REMOVED***
        lines = c.readlines(***REMOVED***
        assert_equal(
            lines,
            [b'  +3.142e+00  +2.718e+00  +3.142e+00  +2.718e+00\n',
             b'  +3.142e+00  +2.718e+00  +3.142e+00  +2.718e+00\n'***REMOVED******REMOVED***

        # One format for each complex number
        c = BytesIO(***REMOVED***
        np.savetxt(c, a, fmt=['(%.3e%+.3ej***REMOVED***'***REMOVED*** * ncols***REMOVED***
        c.seek(0***REMOVED***
        lines = c.readlines(***REMOVED***
        assert_equal(
            lines,
            [b'(3.142e+00+2.718e+00j***REMOVED*** (3.142e+00+2.718e+00j***REMOVED***\n',
             b'(3.142e+00+2.718e+00j***REMOVED*** (3.142e+00+2.718e+00j***REMOVED***\n'***REMOVED******REMOVED***

    def test_custom_writer(self***REMOVED***:

        class CustomWriter(list***REMOVED***:
            def write(self, text***REMOVED***:
                self.extend(text.split(b'\n'***REMOVED******REMOVED***

        w = CustomWriter(***REMOVED***
        a = np.array([(1, 2***REMOVED***, (3, 4***REMOVED******REMOVED******REMOVED***
        np.savetxt(w, a***REMOVED***
        b = np.loadtxt(w***REMOVED***
        assert_array_equal(a, b***REMOVED***


class TestLoadTxt(TestCase***REMOVED***:
    def test_record(self***REMOVED***:
        c = TextIO(***REMOVED***
        c.write('1 2\n3 4'***REMOVED***
        c.seek(0***REMOVED***
        x = np.loadtxt(c, dtype=[('x', np.int32***REMOVED***, ('y', np.int32***REMOVED******REMOVED******REMOVED***
        a = np.array([(1, 2***REMOVED***, (3, 4***REMOVED******REMOVED***, dtype=[('x', 'i4'***REMOVED***, ('y', 'i4'***REMOVED******REMOVED******REMOVED***
        assert_array_equal(x, a***REMOVED***

        d = TextIO(***REMOVED***
        d.write('M 64.0 75.0\nF 25.0 60.0'***REMOVED***
        d.seek(0***REMOVED***
        mydescriptor = {'names': ('gender', 'age', 'weight'***REMOVED***,
                        'formats': ('S1', 'i4', 'f4'***REMOVED******REMOVED***
        b = np.array([('M', 64.0, 75.0***REMOVED***,
                      ('F', 25.0, 60.0***REMOVED******REMOVED***, dtype=mydescriptor***REMOVED***
        y = np.loadtxt(d, dtype=mydescriptor***REMOVED***
        assert_array_equal(y, b***REMOVED***

    def test_array(self***REMOVED***:
        c = TextIO(***REMOVED***
        c.write('1 2\n3 4'***REMOVED***

        c.seek(0***REMOVED***
        x = np.loadtxt(c, dtype=np.int***REMOVED***
        a = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED***, int***REMOVED***
        assert_array_equal(x, a***REMOVED***

        c.seek(0***REMOVED***
        x = np.loadtxt(c, dtype=float***REMOVED***
        a = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED***, float***REMOVED***
        assert_array_equal(x, a***REMOVED***

    def test_1D(self***REMOVED***:
        c = TextIO(***REMOVED***
        c.write('1\n2\n3\n4\n'***REMOVED***
        c.seek(0***REMOVED***
        x = np.loadtxt(c, dtype=int***REMOVED***
        a = np.array([1, 2, 3, 4***REMOVED***, int***REMOVED***
        assert_array_equal(x, a***REMOVED***

        c = TextIO(***REMOVED***
        c.write('1,2,3,4\n'***REMOVED***
        c.seek(0***REMOVED***
        x = np.loadtxt(c, dtype=int, delimiter=','***REMOVED***
        a = np.array([1, 2, 3, 4***REMOVED***, int***REMOVED***
        assert_array_equal(x, a***REMOVED***

    def test_missing(self***REMOVED***:
        c = TextIO(***REMOVED***
        c.write('1,2,3,,5\n'***REMOVED***
        c.seek(0***REMOVED***
        x = np.loadtxt(c, dtype=int, delimiter=',',
                       converters={3: lambda s: int(s or - 999***REMOVED******REMOVED******REMOVED***
        a = np.array([1, 2, 3, -999, 5***REMOVED***, int***REMOVED***
        assert_array_equal(x, a***REMOVED***

    def test_converters_with_usecols(self***REMOVED***:
        c = TextIO(***REMOVED***
        c.write('1,2,3,,5\n6,7,8,9,10\n'***REMOVED***
        c.seek(0***REMOVED***
        x = np.loadtxt(c, dtype=int, delimiter=',',
                       converters={3: lambda s: int(s or - 999***REMOVED******REMOVED***,
                       usecols=(1, 3,***REMOVED******REMOVED***
        a = np.array([[2, -999***REMOVED***, [7, 9***REMOVED******REMOVED***, int***REMOVED***
        assert_array_equal(x, a***REMOVED***

    def test_comments_unicode(self***REMOVED***:
        c = TextIO(***REMOVED***
        c.write('# comment\n1,2,3,5\n'***REMOVED***
        c.seek(0***REMOVED***
        x = np.loadtxt(c, dtype=int, delimiter=',',
                       comments=unicode('#'***REMOVED******REMOVED***
        a = np.array([1, 2, 3, 5***REMOVED***, int***REMOVED***
        assert_array_equal(x, a***REMOVED***

    def test_comments_byte(self***REMOVED***:
        c = TextIO(***REMOVED***
        c.write('# comment\n1,2,3,5\n'***REMOVED***
        c.seek(0***REMOVED***
        x = np.loadtxt(c, dtype=int, delimiter=',',
                       comments=b'#'***REMOVED***
        a = np.array([1, 2, 3, 5***REMOVED***, int***REMOVED***
        assert_array_equal(x, a***REMOVED***

    def test_comments_multiple(self***REMOVED***:
        c = TextIO(***REMOVED***
        c.write('# comment\n1,2,3\n@ comment2\n4,5,6 // comment3'***REMOVED***
        c.seek(0***REMOVED***
        x = np.loadtxt(c, dtype=int, delimiter=',',
                       comments=['#', '@', '//'***REMOVED******REMOVED***
        a = np.array([[1, 2, 3***REMOVED***, [4, 5, 6***REMOVED******REMOVED***, int***REMOVED***
        assert_array_equal(x, a***REMOVED***

    def test_comments_multi_chars(self***REMOVED***:
        c = TextIO(***REMOVED***
        c.write('/* comment\n1,2,3,5\n'***REMOVED***
        c.seek(0***REMOVED***
        x = np.loadtxt(c, dtype=int, delimiter=',',
                       comments='/*'***REMOVED***
        a = np.array([1, 2, 3, 5***REMOVED***, int***REMOVED***
        assert_array_equal(x, a***REMOVED***

        # Check that '/*' is not transformed to ['/', '*'***REMOVED***
        c = TextIO(***REMOVED***
        c.write('*/ comment\n1,2,3,5\n'***REMOVED***
        c.seek(0***REMOVED***
        assert_raises(ValueError, np.loadtxt, c, dtype=int, delimiter=',',
                      comments='/*'***REMOVED***

    def test_skiprows(self***REMOVED***:
        c = TextIO(***REMOVED***
        c.write('comment\n1,2,3,5\n'***REMOVED***
        c.seek(0***REMOVED***
        x = np.loadtxt(c, dtype=int, delimiter=',',
                       skiprows=1***REMOVED***
        a = np.array([1, 2, 3, 5***REMOVED***, int***REMOVED***
        assert_array_equal(x, a***REMOVED***

        c = TextIO(***REMOVED***
        c.write('# comment\n1,2,3,5\n'***REMOVED***
        c.seek(0***REMOVED***
        x = np.loadtxt(c, dtype=int, delimiter=',',
                       skiprows=1***REMOVED***
        a = np.array([1, 2, 3, 5***REMOVED***, int***REMOVED***
        assert_array_equal(x, a***REMOVED***

    def test_usecols(self***REMOVED***:
        a = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED***, float***REMOVED***
        c = BytesIO(***REMOVED***
        np.savetxt(c, a***REMOVED***
        c.seek(0***REMOVED***
        x = np.loadtxt(c, dtype=float, usecols=(1,***REMOVED******REMOVED***
        assert_array_equal(x, a[:, 1***REMOVED******REMOVED***

        a = np.array([[1, 2, 3***REMOVED***, [3, 4, 5***REMOVED******REMOVED***, float***REMOVED***
        c = BytesIO(***REMOVED***
        np.savetxt(c, a***REMOVED***
        c.seek(0***REMOVED***
        x = np.loadtxt(c, dtype=float, usecols=(1, 2***REMOVED******REMOVED***
        assert_array_equal(x, a[:, 1:***REMOVED******REMOVED***

        # Testing with arrays instead of tuples.
        c.seek(0***REMOVED***
        x = np.loadtxt(c, dtype=float, usecols=np.array([1, 2***REMOVED******REMOVED******REMOVED***
        assert_array_equal(x, a[:, 1:***REMOVED******REMOVED***

        # Checking with dtypes defined converters.
        data = '''JOE 70.1 25.3
                BOB 60.5 27.9
                '''
        c = TextIO(data***REMOVED***
        names = ['stid', 'temp'***REMOVED***
        dtypes = ['S4', 'f8'***REMOVED***
        arr = np.loadtxt(c, usecols=(0, 2***REMOVED***, dtype=list(zip(names, dtypes***REMOVED******REMOVED******REMOVED***
        assert_equal(arr['stid'***REMOVED***, [b"JOE", b"BOB"***REMOVED******REMOVED***
        assert_equal(arr['temp'***REMOVED***, [25.3, 27.9***REMOVED******REMOVED***

    def test_fancy_dtype(self***REMOVED***:
        c = TextIO(***REMOVED***
        c.write('1,2,3.0\n4,5,6.0\n'***REMOVED***
        c.seek(0***REMOVED***
        dt = np.dtype([('x', int***REMOVED***, ('y', [('t', int***REMOVED***, ('s', float***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        x = np.loadtxt(c, dtype=dt, delimiter=','***REMOVED***
        a = np.array([(1, (2, 3.0***REMOVED******REMOVED***, (4, (5, 6.0***REMOVED******REMOVED******REMOVED***, dt***REMOVED***
        assert_array_equal(x, a***REMOVED***

    def test_shaped_dtype(self***REMOVED***:
        c = TextIO("aaaa  1.0  8.0  1 2 3 4 5 6"***REMOVED***
        dt = np.dtype([('name', 'S4'***REMOVED***, ('x', float***REMOVED***, ('y', float***REMOVED***,
                       ('block', int, (2, 3***REMOVED******REMOVED******REMOVED******REMOVED***
        x = np.loadtxt(c, dtype=dt***REMOVED***
        a = np.array([('aaaa', 1.0, 8.0, [[1, 2, 3***REMOVED***, [4, 5, 6***REMOVED******REMOVED******REMOVED******REMOVED***,
                     dtype=dt***REMOVED***
        assert_array_equal(x, a***REMOVED***

    def test_3d_shaped_dtype(self***REMOVED***:
        c = TextIO("aaaa  1.0  8.0  1 2 3 4 5 6 7 8 9 10 11 12"***REMOVED***
        dt = np.dtype([('name', 'S4'***REMOVED***, ('x', float***REMOVED***, ('y', float***REMOVED***,
                       ('block', int, (2, 2, 3***REMOVED******REMOVED******REMOVED******REMOVED***
        x = np.loadtxt(c, dtype=dt***REMOVED***
        a = np.array([('aaaa', 1.0, 8.0,
                       [[[1, 2, 3***REMOVED***, [4, 5, 6***REMOVED******REMOVED***, [[7, 8, 9***REMOVED***, [10, 11, 12***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***,
                     dtype=dt***REMOVED***
        assert_array_equal(x, a***REMOVED***

    def test_empty_file(self***REMOVED***:
        with warnings.catch_warnings(***REMOVED***:
            warnings.filterwarnings("ignore",
                                    message="loadtxt: Empty input file:"***REMOVED***
            c = TextIO(***REMOVED***
            x = np.loadtxt(c***REMOVED***
            assert_equal(x.shape, (0,***REMOVED******REMOVED***
            x = np.loadtxt(c, dtype=np.int64***REMOVED***
            assert_equal(x.shape, (0,***REMOVED******REMOVED***
            assert_(x.dtype == np.int64***REMOVED***

    def test_unused_converter(self***REMOVED***:
        c = TextIO(***REMOVED***
        c.writelines(['1 21\n', '3 42\n'***REMOVED******REMOVED***
        c.seek(0***REMOVED***
        data = np.loadtxt(c, usecols=(1,***REMOVED***,
                          converters={0: lambda s: int(s, 16***REMOVED******REMOVED******REMOVED***
        assert_array_equal(data, [21, 42***REMOVED******REMOVED***

        c.seek(0***REMOVED***
        data = np.loadtxt(c, usecols=(1,***REMOVED***,
                          converters={1: lambda s: int(s, 16***REMOVED******REMOVED******REMOVED***
        assert_array_equal(data, [33, 66***REMOVED******REMOVED***

    def test_dtype_with_object(self***REMOVED***:
        # Test using an explicit dtype with an object
        data = ***REMOVED*** 1; 2001-01-01
                   2; 2002-01-31 ***REMOVED***
        ndtype = [('idx', int***REMOVED***, ('code', np.object***REMOVED******REMOVED***
        func = lambda s: strptime(s.strip(***REMOVED***, "%Y-%m-%d"***REMOVED***
        converters = {1: func***REMOVED***
        test = np.loadtxt(TextIO(data***REMOVED***, delimiter=";", dtype=ndtype,
                          converters=converters***REMOVED***
        control = np.array(
            [(1, datetime(2001, 1, 1***REMOVED******REMOVED***, (2, datetime(2002, 1, 31***REMOVED******REMOVED******REMOVED***,
            dtype=ndtype***REMOVED***
        assert_equal(test, control***REMOVED***

    def test_uint64_type(self***REMOVED***:
        tgt = (9223372043271415339, 9223372043271415853***REMOVED***
        c = TextIO(***REMOVED***
        c.write("%s %s" % tgt***REMOVED***
        c.seek(0***REMOVED***
        res = np.loadtxt(c, dtype=np.uint64***REMOVED***
        assert_equal(res, tgt***REMOVED***

    def test_int64_type(self***REMOVED***:
        tgt = (-9223372036854775807, 9223372036854775807***REMOVED***
        c = TextIO(***REMOVED***
        c.write("%s %s" % tgt***REMOVED***
        c.seek(0***REMOVED***
        res = np.loadtxt(c, dtype=np.int64***REMOVED***
        assert_equal(res, tgt***REMOVED***

    def test_from_float_hex(self***REMOVED***:
        # IEEE doubles and floats only, otherwise the float32
        # conversion may fail.
        tgt = np.logspace(-10, 10, 5***REMOVED***.astype(np.float32***REMOVED***
        tgt = np.hstack((tgt, -tgt***REMOVED******REMOVED***.astype(np.float***REMOVED***
        inp = '\n'.join(map(float.hex, tgt***REMOVED******REMOVED***
        c = TextIO(***REMOVED***
        c.write(inp***REMOVED***
        for dt in [np.float, np.float32***REMOVED***:
            c.seek(0***REMOVED***
            res = np.loadtxt(c, dtype=dt***REMOVED***
            assert_equal(res, tgt, err_msg="%s" % dt***REMOVED***

    def test_from_complex(self***REMOVED***:
        tgt = (complex(1, 1***REMOVED***, complex(1, -1***REMOVED******REMOVED***
        c = TextIO(***REMOVED***
        c.write("%s %s" % tgt***REMOVED***
        c.seek(0***REMOVED***
        res = np.loadtxt(c, dtype=np.complex***REMOVED***
        assert_equal(res, tgt***REMOVED***

    def test_universal_newline(self***REMOVED***:
        with temppath(***REMOVED*** as name:
            with open(name, 'w'***REMOVED*** as f:
                f.write('1 21\r3 42\r'***REMOVED***
            data = np.loadtxt(name***REMOVED***
        assert_array_equal(data, [[1, 21***REMOVED***, [3, 42***REMOVED******REMOVED******REMOVED***

    def test_empty_field_after_tab(self***REMOVED***:
        c = TextIO(***REMOVED***
        c.write('1 \t2 \t3\tstart \n4\t5\t6\t  \n7\t8\t9.5\t'***REMOVED***
        c.seek(0***REMOVED***
        dt = {'names': ('x', 'y', 'z', 'comment'***REMOVED***,
              'formats': ('<i4', '<i4', '<f4', '|S8'***REMOVED******REMOVED***
        x = np.loadtxt(c, dtype=dt, delimiter='\t'***REMOVED***
        a = np.array([b'start ', b'  ', b''***REMOVED******REMOVED***
        assert_array_equal(x['comment'***REMOVED***, a***REMOVED***

    def test_structure_unpack(self***REMOVED***:
        txt = TextIO("M 21 72\nF 35 58"***REMOVED***
        dt = {'names': ('a', 'b', 'c'***REMOVED***, 'formats': ('|S1', '<i4', '<f4'***REMOVED******REMOVED***
        a, b, c = np.loadtxt(txt, dtype=dt, unpack=True***REMOVED***
        assert_(a.dtype.str == '|S1'***REMOVED***
        assert_(b.dtype.str == '<i4'***REMOVED***
        assert_(c.dtype.str == '<f4'***REMOVED***
        assert_array_equal(a, np.array([b'M', b'F'***REMOVED******REMOVED******REMOVED***
        assert_array_equal(b, np.array([21, 35***REMOVED******REMOVED******REMOVED***
        assert_array_equal(c, np.array([72.,  58.***REMOVED******REMOVED******REMOVED***

    def test_ndmin_keyword(self***REMOVED***:
        c = TextIO(***REMOVED***
        c.write('1,2,3\n4,5,6'***REMOVED***
        c.seek(0***REMOVED***
        assert_raises(ValueError, np.loadtxt, c, ndmin=3***REMOVED***
        c.seek(0***REMOVED***
        assert_raises(ValueError, np.loadtxt, c, ndmin=1.5***REMOVED***
        c.seek(0***REMOVED***
        x = np.loadtxt(c, dtype=int, delimiter=',', ndmin=1***REMOVED***
        a = np.array([[1, 2, 3***REMOVED***, [4, 5, 6***REMOVED******REMOVED******REMOVED***
        assert_array_equal(x, a***REMOVED***

        d = TextIO(***REMOVED***
        d.write('0,1,2'***REMOVED***
        d.seek(0***REMOVED***
        x = np.loadtxt(d, dtype=int, delimiter=',', ndmin=2***REMOVED***
        assert_(x.shape == (1, 3***REMOVED******REMOVED***
        d.seek(0***REMOVED***
        x = np.loadtxt(d, dtype=int, delimiter=',', ndmin=1***REMOVED***
        assert_(x.shape == (3,***REMOVED******REMOVED***
        d.seek(0***REMOVED***
        x = np.loadtxt(d, dtype=int, delimiter=',', ndmin=0***REMOVED***
        assert_(x.shape == (3,***REMOVED******REMOVED***

        e = TextIO(***REMOVED***
        e.write('0\n1\n2'***REMOVED***
        e.seek(0***REMOVED***
        x = np.loadtxt(e, dtype=int, delimiter=',', ndmin=2***REMOVED***
        assert_(x.shape == (3, 1***REMOVED******REMOVED***
        e.seek(0***REMOVED***
        x = np.loadtxt(e, dtype=int, delimiter=',', ndmin=1***REMOVED***
        assert_(x.shape == (3,***REMOVED******REMOVED***
        e.seek(0***REMOVED***
        x = np.loadtxt(e, dtype=int, delimiter=',', ndmin=0***REMOVED***
        assert_(x.shape == (3,***REMOVED******REMOVED***

        # Test ndmin kw with empty file.
        with warnings.catch_warnings(***REMOVED***:
            warnings.filterwarnings("ignore",
                                    message="loadtxt: Empty input file:"***REMOVED***
            f = TextIO(***REMOVED***
            assert_(np.loadtxt(f, ndmin=2***REMOVED***.shape == (0, 1,***REMOVED******REMOVED***
            assert_(np.loadtxt(f, ndmin=1***REMOVED***.shape == (0,***REMOVED******REMOVED***

    def test_generator_source(self***REMOVED***:
        def count(***REMOVED***:
            for i in range(10***REMOVED***:
                yield "%d" % i

        res = np.loadtxt(count(***REMOVED******REMOVED***
        assert_array_equal(res, np.arange(10***REMOVED******REMOVED***

    def test_bad_line(self***REMOVED***:
        c = TextIO(***REMOVED***
        c.write('1 2 3\n4 5 6\n2 3'***REMOVED***
        c.seek(0***REMOVED***

        # Check for exception and that exception contains line number
        assert_raises_regex(ValueError, "3", np.loadtxt, c***REMOVED***

    def test_none_as_string(self***REMOVED***:
        # gh-5155, None should work as string when format demands it
        c = TextIO(***REMOVED***
        c.write('100,foo,200\n300,None,400'***REMOVED***
        c.seek(0***REMOVED***
        dt = np.dtype([('x', int***REMOVED***, ('a', 'S10'***REMOVED***, ('y', int***REMOVED******REMOVED******REMOVED***
        np.loadtxt(c, delimiter=',', dtype=dt, comments=None***REMOVED***  # Should succeed


class Testfromregex(TestCase***REMOVED***:
    # np.fromregex expects files opened in binary mode.
    def test_record(self***REMOVED***:
        c = TextIO(***REMOVED***
        c.write('1.312 foo\n1.534 bar\n4.444 qux'***REMOVED***
        c.seek(0***REMOVED***

        dt = [('num', np.float64***REMOVED***, ('val', 'S3'***REMOVED******REMOVED***
        x = np.fromregex(c, r"([0-9.***REMOVED***+***REMOVED***\s+(...***REMOVED***", dt***REMOVED***
        a = np.array([(1.312, 'foo'***REMOVED***, (1.534, 'bar'***REMOVED***, (4.444, 'qux'***REMOVED******REMOVED***,
                     dtype=dt***REMOVED***
        assert_array_equal(x, a***REMOVED***

    def test_record_2(self***REMOVED***:
        c = TextIO(***REMOVED***
        c.write('1312 foo\n1534 bar\n4444 qux'***REMOVED***
        c.seek(0***REMOVED***

        dt = [('num', np.int32***REMOVED***, ('val', 'S3'***REMOVED******REMOVED***
        x = np.fromregex(c, r"(\d+***REMOVED***\s+(...***REMOVED***", dt***REMOVED***
        a = np.array([(1312, 'foo'***REMOVED***, (1534, 'bar'***REMOVED***, (4444, 'qux'***REMOVED******REMOVED***,
                     dtype=dt***REMOVED***
        assert_array_equal(x, a***REMOVED***

    def test_record_3(self***REMOVED***:
        c = TextIO(***REMOVED***
        c.write('1312 foo\n1534 bar\n4444 qux'***REMOVED***
        c.seek(0***REMOVED***

        dt = [('num', np.float64***REMOVED******REMOVED***
        x = np.fromregex(c, r"(\d+***REMOVED***\s+...", dt***REMOVED***
        a = np.array([(1312,***REMOVED***, (1534,***REMOVED***, (4444,***REMOVED******REMOVED***, dtype=dt***REMOVED***
        assert_array_equal(x, a***REMOVED***


#####--------------------------------------------------------------------------


class TestFromTxt(TestCase***REMOVED***:
    #
    def test_record(self***REMOVED***:
        # Test w/ explicit dtype
        data = TextIO('1 2\n3 4'***REMOVED***
        test = np.ndfromtxt(data, dtype=[('x', np.int32***REMOVED***, ('y', np.int32***REMOVED******REMOVED******REMOVED***
        control = np.array([(1, 2***REMOVED***, (3, 4***REMOVED******REMOVED***, dtype=[('x', 'i4'***REMOVED***, ('y', 'i4'***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        #
        data = TextIO('M 64.0 75.0\nF 25.0 60.0'***REMOVED***
        descriptor = {'names': ('gender', 'age', 'weight'***REMOVED***,
                      'formats': ('S1', 'i4', 'f4'***REMOVED******REMOVED***
        control = np.array([('M', 64.0, 75.0***REMOVED***, ('F', 25.0, 60.0***REMOVED******REMOVED***,
                           dtype=descriptor***REMOVED***
        test = np.ndfromtxt(data, dtype=descriptor***REMOVED***
        assert_equal(test, control***REMOVED***

    def test_array(self***REMOVED***:
        # Test outputing a standard ndarray
        data = TextIO('1 2\n3 4'***REMOVED***
        control = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED***, dtype=int***REMOVED***
        test = np.ndfromtxt(data, dtype=int***REMOVED***
        assert_array_equal(test, control***REMOVED***
        #
        data.seek(0***REMOVED***
        control = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED***, dtype=float***REMOVED***
        test = np.loadtxt(data, dtype=float***REMOVED***
        assert_array_equal(test, control***REMOVED***

    def test_1D(self***REMOVED***:
        # Test squeezing to 1D
        control = np.array([1, 2, 3, 4***REMOVED***, int***REMOVED***
        #
        data = TextIO('1\n2\n3\n4\n'***REMOVED***
        test = np.ndfromtxt(data, dtype=int***REMOVED***
        assert_array_equal(test, control***REMOVED***
        #
        data = TextIO('1,2,3,4\n'***REMOVED***
        test = np.ndfromtxt(data, dtype=int, delimiter=','***REMOVED***
        assert_array_equal(test, control***REMOVED***

    def test_comments(self***REMOVED***:
        # Test the stripping of comments
        control = np.array([1, 2, 3, 5***REMOVED***, int***REMOVED***
        # Comment on its own line
        data = TextIO('# comment\n1,2,3,5\n'***REMOVED***
        test = np.ndfromtxt(data, dtype=int, delimiter=',', comments='#'***REMOVED***
        assert_equal(test, control***REMOVED***
        # Comment at the end of a line
        data = TextIO('1,2,3,5# comment\n'***REMOVED***
        test = np.ndfromtxt(data, dtype=int, delimiter=',', comments='#'***REMOVED***
        assert_equal(test, control***REMOVED***

    def test_skiprows(self***REMOVED***:
        # Test row skipping
        control = np.array([1, 2, 3, 5***REMOVED***, int***REMOVED***
        kwargs = dict(dtype=int, delimiter=','***REMOVED***
        #
        data = TextIO('comment\n1,2,3,5\n'***REMOVED***
        test = np.ndfromtxt(data, skip_header=1, **kwargs***REMOVED***
        assert_equal(test, control***REMOVED***
        #
        data = TextIO('# comment\n1,2,3,5\n'***REMOVED***
        test = np.loadtxt(data, skiprows=1, **kwargs***REMOVED***
        assert_equal(test, control***REMOVED***

    def test_skip_footer(self***REMOVED***:
        data = ["# %i" % i for i in range(1, 6***REMOVED******REMOVED***
        data.append("A, B, C"***REMOVED***
        data.extend(["%i,%3.1f,%03s" % (i, i, i***REMOVED*** for i in range(51***REMOVED******REMOVED******REMOVED***
        data[-1***REMOVED*** = "99,99"
        kwargs = dict(delimiter=",", names=True, skip_header=5, skip_footer=10***REMOVED***
        test = np.genfromtxt(TextIO("\n".join(data***REMOVED******REMOVED***, **kwargs***REMOVED***
        ctrl = np.array([("%f" % i, "%f" % i, "%f" % i***REMOVED*** for i in range(41***REMOVED******REMOVED***,
                        dtype=[(_, float***REMOVED*** for _ in "ABC"***REMOVED******REMOVED***
        assert_equal(test, ctrl***REMOVED***

    def test_skip_footer_with_invalid(self***REMOVED***:
        with warnings.catch_warnings(***REMOVED***:
            warnings.filterwarnings("ignore"***REMOVED***
            basestr = '1 1\n2 2\n3 3\n4 4\n5  \n6  \n7  \n'
            # Footer too small to get rid of all invalid values
            assert_raises(ValueError, np.genfromtxt,
                          TextIO(basestr***REMOVED***, skip_footer=1***REMOVED***
    #        except ValueError:
    #            pass
            a = np.genfromtxt(
                TextIO(basestr***REMOVED***, skip_footer=1, invalid_raise=False***REMOVED***
            assert_equal(a, np.array([[1., 1.***REMOVED***, [2., 2.***REMOVED***, [3., 3.***REMOVED***, [4., 4.***REMOVED******REMOVED******REMOVED******REMOVED***
            #
            a = np.genfromtxt(TextIO(basestr***REMOVED***, skip_footer=3***REMOVED***
            assert_equal(a, np.array([[1., 1.***REMOVED***, [2., 2.***REMOVED***, [3., 3.***REMOVED***, [4., 4.***REMOVED******REMOVED******REMOVED******REMOVED***
            #
            basestr = '1 1\n2  \n3 3\n4 4\n5  \n6 6\n7 7\n'
            a = np.genfromtxt(
                TextIO(basestr***REMOVED***, skip_footer=1, invalid_raise=False***REMOVED***
            assert_equal(a, np.array([[1., 1.***REMOVED***, [3., 3.***REMOVED***, [4., 4.***REMOVED***, [6., 6.***REMOVED******REMOVED******REMOVED******REMOVED***
            a = np.genfromtxt(
                TextIO(basestr***REMOVED***, skip_footer=3, invalid_raise=False***REMOVED***
            assert_equal(a, np.array([[1., 1.***REMOVED***, [3., 3.***REMOVED***, [4., 4.***REMOVED******REMOVED******REMOVED******REMOVED***

    def test_header(self***REMOVED***:
        # Test retrieving a header
        data = TextIO('gender age weight\nM 64.0 75.0\nF 25.0 60.0'***REMOVED***
        test = np.ndfromtxt(data, dtype=None, names=True***REMOVED***
        control = {'gender': np.array([b'M', b'F'***REMOVED******REMOVED***,
                   'age': np.array([64.0, 25.0***REMOVED******REMOVED***,
                   'weight': np.array([75.0, 60.0***REMOVED******REMOVED******REMOVED***
        assert_equal(test['gender'***REMOVED***, control['gender'***REMOVED******REMOVED***
        assert_equal(test['age'***REMOVED***, control['age'***REMOVED******REMOVED***
        assert_equal(test['weight'***REMOVED***, control['weight'***REMOVED******REMOVED***

    def test_auto_dtype(self***REMOVED***:
        # Test the automatic definition of the output dtype
        data = TextIO('A 64 75.0 3+4j True\nBCD 25 60.0 5+6j False'***REMOVED***
        test = np.ndfromtxt(data, dtype=None***REMOVED***
        control = [np.array([b'A', b'BCD'***REMOVED******REMOVED***,
                   np.array([64, 25***REMOVED******REMOVED***,
                   np.array([75.0, 60.0***REMOVED******REMOVED***,
                   np.array([3 + 4j, 5 + 6j***REMOVED******REMOVED***,
                   np.array([True, False***REMOVED******REMOVED***, ***REMOVED***
        assert_equal(test.dtype.names, ['f0', 'f1', 'f2', 'f3', 'f4'***REMOVED******REMOVED***
        for (i, ctrl***REMOVED*** in enumerate(control***REMOVED***:
            assert_equal(test['f%i' % i***REMOVED***, ctrl***REMOVED***

    def test_auto_dtype_uniform(self***REMOVED***:
        # Tests whether the output dtype can be uniformized
        data = TextIO('1 2 3 4\n5 6 7 8\n'***REMOVED***
        test = np.ndfromtxt(data, dtype=None***REMOVED***
        control = np.array([[1, 2, 3, 4***REMOVED***, [5, 6, 7, 8***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

    def test_fancy_dtype(self***REMOVED***:
        # Check that a nested dtype isn't MIA
        data = TextIO('1,2,3.0\n4,5,6.0\n'***REMOVED***
        fancydtype = np.dtype([('x', int***REMOVED***, ('y', [('t', int***REMOVED***, ('s', float***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        test = np.ndfromtxt(data, dtype=fancydtype, delimiter=','***REMOVED***
        control = np.array([(1, (2, 3.0***REMOVED******REMOVED***, (4, (5, 6.0***REMOVED******REMOVED******REMOVED***, dtype=fancydtype***REMOVED***
        assert_equal(test, control***REMOVED***

    def test_names_overwrite(self***REMOVED***:
        # Test overwriting the names of the dtype
        descriptor = {'names': ('g', 'a', 'w'***REMOVED***,
                      'formats': ('S1', 'i4', 'f4'***REMOVED******REMOVED***
        data = TextIO(b'M 64.0 75.0\nF 25.0 60.0'***REMOVED***
        names = ('gender', 'age', 'weight'***REMOVED***
        test = np.ndfromtxt(data, dtype=descriptor, names=names***REMOVED***
        descriptor['names'***REMOVED*** = names
        control = np.array([('M', 64.0, 75.0***REMOVED***,
                            ('F', 25.0, 60.0***REMOVED******REMOVED***, dtype=descriptor***REMOVED***
        assert_equal(test, control***REMOVED***

    def test_commented_header(self***REMOVED***:
        # Check that names can be retrieved even if the line is commented out.
        data = TextIO(***REMOVED***
#gender age weight
M   21  72.100000
F   35  58.330000
M   33  21.99
        ***REMOVED******REMOVED***
        # The # is part of the first name and should be deleted automatically.
        test = np.genfromtxt(data, names=True, dtype=None***REMOVED***
        ctrl = np.array([('M', 21, 72.1***REMOVED***, ('F', 35, 58.33***REMOVED***, ('M', 33, 21.99***REMOVED******REMOVED***,
                        dtype=[('gender', '|S1'***REMOVED***, ('age', int***REMOVED***, ('weight', float***REMOVED******REMOVED******REMOVED***
        assert_equal(test, ctrl***REMOVED***
        # Ditto, but we should get rid of the first element
        data = TextIO(b***REMOVED***
# gender age weight
M   21  72.100000
F   35  58.330000
M   33  21.99
        ***REMOVED******REMOVED***
        test = np.genfromtxt(data, names=True, dtype=None***REMOVED***
        assert_equal(test, ctrl***REMOVED***

    def test_autonames_and_usecols(self***REMOVED***:
        # Tests names and usecols
        data = TextIO('A B C D\n aaaa 121 45 9.1'***REMOVED***
        test = np.ndfromtxt(data, usecols=('A', 'C', 'D'***REMOVED***,
                            names=True, dtype=None***REMOVED***
        control = np.array(('aaaa', 45, 9.1***REMOVED***,
                           dtype=[('A', '|S4'***REMOVED***, ('C', int***REMOVED***, ('D', float***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

    def test_converters_with_usecols(self***REMOVED***:
        # Test the combination user-defined converters and usecol
        data = TextIO('1,2,3,,5\n6,7,8,9,10\n'***REMOVED***
        test = np.ndfromtxt(data, dtype=int, delimiter=',',
                            converters={3: lambda s: int(s or - 999***REMOVED******REMOVED***,
                            usecols=(1, 3,***REMOVED******REMOVED***
        control = np.array([[2, -999***REMOVED***, [7, 9***REMOVED******REMOVED***, int***REMOVED***
        assert_equal(test, control***REMOVED***

    def test_converters_with_usecols_and_names(self***REMOVED***:
        # Tests names and usecols
        data = TextIO('A B C D\n aaaa 121 45 9.1'***REMOVED***
        test = np.ndfromtxt(data, usecols=('A', 'C', 'D'***REMOVED***, names=True,
                            dtype=None, converters={'C': lambda s: 2 * int(s***REMOVED******REMOVED******REMOVED***
        control = np.array(('aaaa', 90, 9.1***REMOVED***,
                           dtype=[('A', '|S4'***REMOVED***, ('C', int***REMOVED***, ('D', float***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

    def test_converters_cornercases(self***REMOVED***:
        # Test the conversion to datetime.
        converter = {
            'date': lambda s: strptime(s, '%Y-%m-%d %H:%M:%SZ'***REMOVED******REMOVED***
        data = TextIO('2009-02-03 12:00:00Z, 72214.0'***REMOVED***
        test = np.ndfromtxt(data, delimiter=',', dtype=None,
                            names=['date', 'stid'***REMOVED***, converters=converter***REMOVED***
        control = np.array((datetime(2009, 2, 3***REMOVED***, 72214.***REMOVED***,
                           dtype=[('date', np.object_***REMOVED***, ('stid', float***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

    def test_converters_cornercases2(self***REMOVED***:
        # Test the conversion to datetime64.
        converter = {
            'date': lambda s: np.datetime64(strptime(s, '%Y-%m-%d %H:%M:%SZ'***REMOVED******REMOVED******REMOVED***
        data = TextIO('2009-02-03 12:00:00Z, 72214.0'***REMOVED***
        test = np.ndfromtxt(data, delimiter=',', dtype=None,
                            names=['date', 'stid'***REMOVED***, converters=converter***REMOVED***
        control = np.array((datetime(2009, 2, 3***REMOVED***, 72214.***REMOVED***,
                           dtype=[('date', 'datetime64[us***REMOVED***'***REMOVED***, ('stid', float***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

    def test_unused_converter(self***REMOVED***:
        # Test whether unused converters are forgotten
        data = TextIO("1 21\n  3 42\n"***REMOVED***
        test = np.ndfromtxt(data, usecols=(1,***REMOVED***,
                            converters={0: lambda s: int(s, 16***REMOVED******REMOVED******REMOVED***
        assert_equal(test, [21, 42***REMOVED******REMOVED***
        #
        data.seek(0***REMOVED***
        test = np.ndfromtxt(data, usecols=(1,***REMOVED***,
                            converters={1: lambda s: int(s, 16***REMOVED******REMOVED******REMOVED***
        assert_equal(test, [33, 66***REMOVED******REMOVED***

    def test_invalid_converter(self***REMOVED***:
        strip_rand = lambda x: float((b'r' in x.lower(***REMOVED*** and x.split(***REMOVED***[-1***REMOVED******REMOVED*** or
                                     (b'r' not in x.lower(***REMOVED*** and x.strip(***REMOVED*** or 0.0***REMOVED******REMOVED***
        strip_per = lambda x: float((b'%' in x.lower(***REMOVED*** and x.split(***REMOVED***[0***REMOVED******REMOVED*** or
                                    (b'%' not in x.lower(***REMOVED*** and x.strip(***REMOVED*** or 0.0***REMOVED******REMOVED***
        s = TextIO("D01N01,10/1/2003 ,1 %,R 75,400,600\r\n"
                   "L24U05,12/5/2003, 2 %,1,300, 150.5\r\n"
                   "D02N03,10/10/2004,R 1,,7,145.55"***REMOVED***
        kwargs = dict(
            converters={2: strip_per, 3: strip_rand***REMOVED***, delimiter=",",
            dtype=None***REMOVED***
        assert_raises(ConverterError, np.genfromtxt, s, **kwargs***REMOVED***

    def test_tricky_converter_bug1666(self***REMOVED***:
        # Test some corner cases
        s = TextIO('q1,2\nq3,4'***REMOVED***
        cnv = lambda s: float(s[1:***REMOVED******REMOVED***
        test = np.genfromtxt(s, delimiter=',', converters={0: cnv***REMOVED******REMOVED***
        control = np.array([[1., 2.***REMOVED***, [3., 4.***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

    def test_dtype_with_converters(self***REMOVED***:
        dstr = "2009; 23; 46"
        test = np.ndfromtxt(TextIO(dstr,***REMOVED***,
                            delimiter=";", dtype=float, converters={0: bytes***REMOVED******REMOVED***
        control = np.array([('2009', 23., 46***REMOVED******REMOVED***,
                           dtype=[('f0', '|S4'***REMOVED***, ('f1', float***REMOVED***, ('f2', float***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        test = np.ndfromtxt(TextIO(dstr,***REMOVED***,
                            delimiter=";", dtype=float, converters={0: float***REMOVED******REMOVED***
        control = np.array([2009., 23., 46***REMOVED***,***REMOVED***
        assert_equal(test, control***REMOVED***

    def test_dtype_with_converters_and_usecols(self***REMOVED***:
        dstr = "1,5,-1,1:1\n2,8,-1,1:n\n3,3,-2,m:n\n"
        dmap = {'1:1':0, '1:n':1, 'm:1':2, 'm:n':3***REMOVED***
        dtyp = [('e1','i4'***REMOVED***,('e2','i4'***REMOVED***,('e3','i2'***REMOVED***,('n', 'i1'***REMOVED******REMOVED***
        conv = {0: int, 1: int, 2: int, 3: lambda r: dmap[r.decode(***REMOVED******REMOVED******REMOVED***
        test = np.recfromcsv(TextIO(dstr,***REMOVED***, dtype=dtyp, delimiter=',',
                             names=None, converters=conv***REMOVED***
        control = np.rec.array([[1,5,-1,0***REMOVED***, [2,8,-1,1***REMOVED***, [3,3,-2,3***REMOVED******REMOVED***, dtype=dtyp***REMOVED***
        assert_equal(test, control***REMOVED***
        dtyp = [('e1','i4'***REMOVED***,('e2','i4'***REMOVED***,('n', 'i1'***REMOVED******REMOVED***
        test = np.recfromcsv(TextIO(dstr,***REMOVED***, dtype=dtyp, delimiter=',',
                             usecols=(0,1,3***REMOVED***, names=None, converters=conv***REMOVED***
        control = np.rec.array([[1,5,0***REMOVED***, [2,8,1***REMOVED***, [3,3,3***REMOVED******REMOVED***, dtype=dtyp***REMOVED***
        assert_equal(test, control***REMOVED***

    def test_dtype_with_object(self***REMOVED***:
        # Test using an explicit dtype with an object
        data = ***REMOVED*** 1; 2001-01-01
                   2; 2002-01-31 ***REMOVED***
        ndtype = [('idx', int***REMOVED***, ('code', np.object***REMOVED******REMOVED***
        func = lambda s: strptime(s.strip(***REMOVED***, "%Y-%m-%d"***REMOVED***
        converters = {1: func***REMOVED***
        test = np.genfromtxt(TextIO(data***REMOVED***, delimiter=";", dtype=ndtype,
                             converters=converters***REMOVED***
        control = np.array(
            [(1, datetime(2001, 1, 1***REMOVED******REMOVED***, (2, datetime(2002, 1, 31***REMOVED******REMOVED******REMOVED***,
            dtype=ndtype***REMOVED***
        assert_equal(test, control***REMOVED***

        ndtype = [('nest', [('idx', int***REMOVED***, ('code', np.object***REMOVED******REMOVED******REMOVED******REMOVED***
        ***REMOVED***
            test = np.genfromtxt(TextIO(data***REMOVED***, delimiter=";",
                                 dtype=ndtype, converters=converters***REMOVED***
        except NotImplementedError:
            pass
        else:
            errmsg = "Nested dtype involving objects should be supported."
            raise AssertionError(errmsg***REMOVED***

    def test_userconverters_with_explicit_dtype(self***REMOVED***:
        # Test user_converters w/ explicit (standard***REMOVED*** dtype
        data = TextIO('skip,skip,2001-01-01,1.0,skip'***REMOVED***
        test = np.genfromtxt(data, delimiter=",", names=None, dtype=float,
                             usecols=(2, 3***REMOVED***, converters={2: bytes***REMOVED******REMOVED***
        control = np.array([('2001-01-01', 1.***REMOVED******REMOVED***,
                           dtype=[('', '|S10'***REMOVED***, ('', float***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

    def test_spacedelimiter(self***REMOVED***:
        # Test space delimiter
        data = TextIO("1  2  3  4   5\n6  7  8  9  10"***REMOVED***
        test = np.ndfromtxt(data***REMOVED***
        control = np.array([[1., 2., 3., 4., 5.***REMOVED***,
                            [6., 7., 8., 9., 10.***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

    def test_integer_delimiter(self***REMOVED***:
        # Test using an integer for delimiter
        data = "  1  2  3\n  4  5 67\n890123  4"
        test = np.genfromtxt(TextIO(data***REMOVED***, delimiter=3***REMOVED***
        control = np.array([[1, 2, 3***REMOVED***, [4, 5, 67***REMOVED***, [890, 123, 4***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

    def test_missing(self***REMOVED***:
        data = TextIO('1,2,3,,5\n'***REMOVED***
        test = np.ndfromtxt(data, dtype=int, delimiter=',',
                            converters={3: lambda s: int(s or - 999***REMOVED******REMOVED******REMOVED***
        control = np.array([1, 2, 3, -999, 5***REMOVED***, int***REMOVED***
        assert_equal(test, control***REMOVED***

    def test_missing_with_tabs(self***REMOVED***:
        # Test w/ a delimiter tab
        txt = "1\t2\t3\n\t2\t\n1\t\t3"
        test = np.genfromtxt(TextIO(txt***REMOVED***, delimiter="\t",
                             usemask=True,***REMOVED***
        ctrl_d = np.array([(1, 2, 3***REMOVED***, (np.nan, 2, np.nan***REMOVED***, (1, np.nan, 3***REMOVED******REMOVED***,***REMOVED***
        ctrl_m = np.array([(0, 0, 0***REMOVED***, (1, 0, 1***REMOVED***, (0, 1, 0***REMOVED******REMOVED***, dtype=bool***REMOVED***
        assert_equal(test.data, ctrl_d***REMOVED***
        assert_equal(test.mask, ctrl_m***REMOVED***

    def test_usecols(self***REMOVED***:
        # Test the selection of columns
        # Select 1 column
        control = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED***, float***REMOVED***
        data = TextIO(***REMOVED***
        np.savetxt(data, control***REMOVED***
        data.seek(0***REMOVED***
        test = np.ndfromtxt(data, dtype=float, usecols=(1,***REMOVED******REMOVED***
        assert_equal(test, control[:, 1***REMOVED******REMOVED***
        #
        control = np.array([[1, 2, 3***REMOVED***, [3, 4, 5***REMOVED******REMOVED***, float***REMOVED***
        data = TextIO(***REMOVED***
        np.savetxt(data, control***REMOVED***
        data.seek(0***REMOVED***
        test = np.ndfromtxt(data, dtype=float, usecols=(1, 2***REMOVED******REMOVED***
        assert_equal(test, control[:, 1:***REMOVED******REMOVED***
        # Testing with arrays instead of tuples.
        data.seek(0***REMOVED***
        test = np.ndfromtxt(data, dtype=float, usecols=np.array([1, 2***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control[:, 1:***REMOVED******REMOVED***

    def test_usecols_as_css(self***REMOVED***:
        # Test giving usecols with a comma-separated string
        data = "1 2 3\n4 5 6"
        test = np.genfromtxt(TextIO(data***REMOVED***,
                             names="a, b, c", usecols="a, c"***REMOVED***
        ctrl = np.array([(1, 3***REMOVED***, (4, 6***REMOVED******REMOVED***, dtype=[(_, float***REMOVED*** for _ in "ac"***REMOVED******REMOVED***
        assert_equal(test, ctrl***REMOVED***

    def test_usecols_with_structured_dtype(self***REMOVED***:
        # Test usecols with an explicit structured dtype
        data = TextIO("JOE 70.1 25.3\nBOB 60.5 27.9"***REMOVED***
        names = ['stid', 'temp'***REMOVED***
        dtypes = ['S4', 'f8'***REMOVED***
        test = np.ndfromtxt(
            data, usecols=(0, 2***REMOVED***, dtype=list(zip(names, dtypes***REMOVED******REMOVED******REMOVED***
        assert_equal(test['stid'***REMOVED***, [b"JOE", b"BOB"***REMOVED******REMOVED***
        assert_equal(test['temp'***REMOVED***, [25.3, 27.9***REMOVED******REMOVED***

    def test_usecols_with_integer(self***REMOVED***:
        # Test usecols with an integer
        test = np.genfromtxt(TextIO(b"1 2 3\n4 5 6"***REMOVED***, usecols=0***REMOVED***
        assert_equal(test, np.array([1., 4.***REMOVED******REMOVED******REMOVED***

    def test_usecols_with_named_columns(self***REMOVED***:
        # Test usecols with named columns
        ctrl = np.array([(1, 3***REMOVED***, (4, 6***REMOVED******REMOVED***, dtype=[('a', float***REMOVED***, ('c', float***REMOVED******REMOVED******REMOVED***
        data = "1 2 3\n4 5 6"
        kwargs = dict(names="a, b, c"***REMOVED***
        test = np.genfromtxt(TextIO(data***REMOVED***, usecols=(0, -1***REMOVED***, **kwargs***REMOVED***
        assert_equal(test, ctrl***REMOVED***
        test = np.genfromtxt(TextIO(data***REMOVED***,
                             usecols=('a', 'c'***REMOVED***, **kwargs***REMOVED***
        assert_equal(test, ctrl***REMOVED***

    def test_empty_file(self***REMOVED***:
        # Test that an empty file raises the proper warning.
        with warnings.catch_warnings(***REMOVED***:
            warnings.filterwarnings("ignore",
                                    message="genfromtxt: Empty input file:"***REMOVED***
            data = TextIO(***REMOVED***
            test = np.genfromtxt(data***REMOVED***
            assert_equal(test, np.array([***REMOVED******REMOVED******REMOVED***

    def test_fancy_dtype_alt(self***REMOVED***:
        # Check that a nested dtype isn't MIA
        data = TextIO('1,2,3.0\n4,5,6.0\n'***REMOVED***
        fancydtype = np.dtype([('x', int***REMOVED***, ('y', [('t', int***REMOVED***, ('s', float***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        test = np.mafromtxt(data, dtype=fancydtype, delimiter=','***REMOVED***
        control = ma.array([(1, (2, 3.0***REMOVED******REMOVED***, (4, (5, 6.0***REMOVED******REMOVED******REMOVED***, dtype=fancydtype***REMOVED***
        assert_equal(test, control***REMOVED***

    def test_shaped_dtype(self***REMOVED***:
        c = TextIO("aaaa  1.0  8.0  1 2 3 4 5 6"***REMOVED***
        dt = np.dtype([('name', 'S4'***REMOVED***, ('x', float***REMOVED***, ('y', float***REMOVED***,
                       ('block', int, (2, 3***REMOVED******REMOVED******REMOVED******REMOVED***
        x = np.ndfromtxt(c, dtype=dt***REMOVED***
        a = np.array([('aaaa', 1.0, 8.0, [[1, 2, 3***REMOVED***, [4, 5, 6***REMOVED******REMOVED******REMOVED******REMOVED***,
                     dtype=dt***REMOVED***
        assert_array_equal(x, a***REMOVED***

    def test_withmissing(self***REMOVED***:
        data = TextIO('A,B\n0,1\n2,N/A'***REMOVED***
        kwargs = dict(delimiter=",", missing_values="N/A", names=True***REMOVED***
        test = np.mafromtxt(data, dtype=None, **kwargs***REMOVED***
        control = ma.array([(0, 1***REMOVED***, (2, -1***REMOVED******REMOVED***,
                           mask=[(False, False***REMOVED***, (False, True***REMOVED******REMOVED***,
                           dtype=[('A', np.int***REMOVED***, ('B', np.int***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        assert_equal(test.mask, control.mask***REMOVED***
        #
        data.seek(0***REMOVED***
        test = np.mafromtxt(data, **kwargs***REMOVED***
        control = ma.array([(0, 1***REMOVED***, (2, -1***REMOVED******REMOVED***,
                           mask=[(False, False***REMOVED***, (False, True***REMOVED******REMOVED***,
                           dtype=[('A', np.float***REMOVED***, ('B', np.float***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        assert_equal(test.mask, control.mask***REMOVED***

    def test_user_missing_values(self***REMOVED***:
        data = "A, B, C\n0, 0., 0j\n1, N/A, 1j\n-9, 2.2, N/A\n3, -99, 3j"
        basekwargs = dict(dtype=None, delimiter=",", names=True,***REMOVED***
        mdtype = [('A', int***REMOVED***, ('B', float***REMOVED***, ('C', complex***REMOVED******REMOVED***
        #
        test = np.mafromtxt(TextIO(data***REMOVED***, missing_values="N/A",
                            **basekwargs***REMOVED***
        control = ma.array([(0, 0.0, 0j***REMOVED***, (1, -999, 1j***REMOVED***,
                            (-9, 2.2, -999j***REMOVED***, (3, -99, 3j***REMOVED******REMOVED***,
                           mask=[(0, 0, 0***REMOVED***, (0, 1, 0***REMOVED***, (0, 0, 1***REMOVED***, (0, 0, 0***REMOVED******REMOVED***,
                           dtype=mdtype***REMOVED***
        assert_equal(test, control***REMOVED***
        #
        basekwargs['dtype'***REMOVED*** = mdtype
        test = np.mafromtxt(TextIO(data***REMOVED***,
                            missing_values={0: -9, 1: -99, 2: -999j***REMOVED***, **basekwargs***REMOVED***
        control = ma.array([(0, 0.0, 0j***REMOVED***, (1, -999, 1j***REMOVED***,
                            (-9, 2.2, -999j***REMOVED***, (3, -99, 3j***REMOVED******REMOVED***,
                           mask=[(0, 0, 0***REMOVED***, (0, 1, 0***REMOVED***, (1, 0, 1***REMOVED***, (0, 1, 0***REMOVED******REMOVED***,
                           dtype=mdtype***REMOVED***
        assert_equal(test, control***REMOVED***
        #
        test = np.mafromtxt(TextIO(data***REMOVED***,
                            missing_values={0: -9, 'B': -99, 'C': -999j***REMOVED***,
                            **basekwargs***REMOVED***
        control = ma.array([(0, 0.0, 0j***REMOVED***, (1, -999, 1j***REMOVED***,
                            (-9, 2.2, -999j***REMOVED***, (3, -99, 3j***REMOVED******REMOVED***,
                           mask=[(0, 0, 0***REMOVED***, (0, 1, 0***REMOVED***, (1, 0, 1***REMOVED***, (0, 1, 0***REMOVED******REMOVED***,
                           dtype=mdtype***REMOVED***
        assert_equal(test, control***REMOVED***

    def test_user_filling_values(self***REMOVED***:
        # Test with missing and filling values
        ctrl = np.array([(0, 3***REMOVED***, (4, -999***REMOVED******REMOVED***, dtype=[('a', int***REMOVED***, ('b', int***REMOVED******REMOVED******REMOVED***
        data = "N/A, 2, 3\n4, ,???"
        kwargs = dict(delimiter=",",
                      dtype=int,
                      names="a,b,c",
                      missing_values={0: "N/A", 'b': " ", 2: "???"***REMOVED***,
                      filling_values={0: 0, 'b': 0, 2: -999***REMOVED******REMOVED***
        test = np.genfromtxt(TextIO(data***REMOVED***, **kwargs***REMOVED***
        ctrl = np.array([(0, 2, 3***REMOVED***, (4, 0, -999***REMOVED******REMOVED***,
                        dtype=[(_, int***REMOVED*** for _ in "abc"***REMOVED******REMOVED***
        assert_equal(test, ctrl***REMOVED***
        #
        test = np.genfromtxt(TextIO(data***REMOVED***, usecols=(0, -1***REMOVED***, **kwargs***REMOVED***
        ctrl = np.array([(0, 3***REMOVED***, (4, -999***REMOVED******REMOVED***, dtype=[(_, int***REMOVED*** for _ in "ac"***REMOVED******REMOVED***
        assert_equal(test, ctrl***REMOVED***

        data2 = "1,2,*,4\n5,*,7,8\n"
        test = np.genfromtxt(TextIO(data2***REMOVED***, delimiter=',', dtype=int,
                             missing_values="*", filling_values=0***REMOVED***
        ctrl = np.array([[1, 2, 0, 4***REMOVED***, [5, 0, 7, 8***REMOVED******REMOVED******REMOVED***
        assert_equal(test, ctrl***REMOVED***
        test = np.genfromtxt(TextIO(data2***REMOVED***, delimiter=',', dtype=int,
                             missing_values="*", filling_values=-1***REMOVED***
        ctrl = np.array([[1, 2, -1, 4***REMOVED***, [5, -1, 7, 8***REMOVED******REMOVED******REMOVED***
        assert_equal(test, ctrl***REMOVED***

    def test_withmissing_float(self***REMOVED***:
        data = TextIO('A,B\n0,1.5\n2,-999.00'***REMOVED***
        test = np.mafromtxt(data, dtype=None, delimiter=',',
                            missing_values='-999.0', names=True,***REMOVED***
        control = ma.array([(0, 1.5***REMOVED***, (2, -1.***REMOVED******REMOVED***,
                           mask=[(False, False***REMOVED***, (False, True***REMOVED******REMOVED***,
                           dtype=[('A', np.int***REMOVED***, ('B', np.float***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        assert_equal(test.mask, control.mask***REMOVED***

    def test_with_masked_column_uniform(self***REMOVED***:
        # Test masked column
        data = TextIO('1 2 3\n4 5 6\n'***REMOVED***
        test = np.genfromtxt(data, dtype=None,
                             missing_values='2,5', usemask=True***REMOVED***
        control = ma.array([[1, 2, 3***REMOVED***, [4, 5, 6***REMOVED******REMOVED***, mask=[[0, 1, 0***REMOVED***, [0, 1, 0***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

    def test_with_masked_column_various(self***REMOVED***:
        # Test masked column
        data = TextIO('True 2 3\nFalse 5 6\n'***REMOVED***
        test = np.genfromtxt(data, dtype=None,
                             missing_values='2,5', usemask=True***REMOVED***
        control = ma.array([(1, 2, 3***REMOVED***, (0, 5, 6***REMOVED******REMOVED***,
                           mask=[(0, 1, 0***REMOVED***, (0, 1, 0***REMOVED******REMOVED***,
                           dtype=[('f0', bool***REMOVED***, ('f1', bool***REMOVED***, ('f2', int***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

    def test_invalid_raise(self***REMOVED***:
        # Test invalid raise
        data = ["1, 1, 1, 1, 1"***REMOVED*** * 50
        for i in range(5***REMOVED***:
            data[10 * i***REMOVED*** = "2, 2, 2, 2 2"
        data.insert(0, "a, b, c, d, e"***REMOVED***
        mdata = TextIO("\n".join(data***REMOVED******REMOVED***
        #
        kwargs = dict(delimiter=",", dtype=None, names=True***REMOVED***
        # XXX: is there a better way to get the return value of the
        # callable in assert_warns ?
        ret = {***REMOVED***

        def f(_ret={***REMOVED******REMOVED***:
            _ret['mtest'***REMOVED*** = np.ndfromtxt(mdata, invalid_raise=False, **kwargs***REMOVED***
        assert_warns(ConversionWarning, f, _ret=ret***REMOVED***
        mtest = ret['mtest'***REMOVED***
        assert_equal(len(mtest***REMOVED***, 45***REMOVED***
        assert_equal(mtest, np.ones(45, dtype=[(_, int***REMOVED*** for _ in 'abcde'***REMOVED******REMOVED******REMOVED***
        #
        mdata.seek(0***REMOVED***
        assert_raises(ValueError, np.ndfromtxt, mdata,
                      delimiter=",", names=True***REMOVED***

    def test_invalid_raise_with_usecols(self***REMOVED***:
        # Test invalid_raise with usecols
        data = ["1, 1, 1, 1, 1"***REMOVED*** * 50
        for i in range(5***REMOVED***:
            data[10 * i***REMOVED*** = "2, 2, 2, 2 2"
        data.insert(0, "a, b, c, d, e"***REMOVED***
        mdata = TextIO("\n".join(data***REMOVED******REMOVED***
        kwargs = dict(delimiter=",", dtype=None, names=True,
                      invalid_raise=False***REMOVED***
        # XXX: is there a better way to get the return value of the
        # callable in assert_warns ?
        ret = {***REMOVED***

        def f(_ret={***REMOVED******REMOVED***:
            _ret['mtest'***REMOVED*** = np.ndfromtxt(mdata, usecols=(0, 4***REMOVED***, **kwargs***REMOVED***
        assert_warns(ConversionWarning, f, _ret=ret***REMOVED***
        mtest = ret['mtest'***REMOVED***
        assert_equal(len(mtest***REMOVED***, 45***REMOVED***
        assert_equal(mtest, np.ones(45, dtype=[(_, int***REMOVED*** for _ in 'ae'***REMOVED******REMOVED******REMOVED***
        #
        mdata.seek(0***REMOVED***
        mtest = np.ndfromtxt(mdata, usecols=(0, 1***REMOVED***, **kwargs***REMOVED***
        assert_equal(len(mtest***REMOVED***, 50***REMOVED***
        control = np.ones(50, dtype=[(_, int***REMOVED*** for _ in 'ab'***REMOVED******REMOVED***
        control[[10 * _ for _ in range(5***REMOVED******REMOVED******REMOVED*** = (2, 2***REMOVED***
        assert_equal(mtest, control***REMOVED***

    def test_inconsistent_dtype(self***REMOVED***:
        # Test inconsistent dtype
        data = ["1, 1, 1, 1, -1.1"***REMOVED*** * 50
        mdata = TextIO("\n".join(data***REMOVED******REMOVED***

        converters = {4: lambda x: "(%s***REMOVED***" % x***REMOVED***
        kwargs = dict(delimiter=",", converters=converters,
                      dtype=[(_, int***REMOVED*** for _ in 'abcde'***REMOVED***,***REMOVED***
        assert_raises(ValueError, np.genfromtxt, mdata, **kwargs***REMOVED***

    def test_default_field_format(self***REMOVED***:
        # Test default format
        data = "0, 1, 2.3\n4, 5, 6.7"
        mtest = np.ndfromtxt(TextIO(data***REMOVED***,
                             delimiter=",", dtype=None, defaultfmt="f%02i"***REMOVED***
        ctrl = np.array([(0, 1, 2.3***REMOVED***, (4, 5, 6.7***REMOVED******REMOVED***,
                        dtype=[("f00", int***REMOVED***, ("f01", int***REMOVED***, ("f02", float***REMOVED******REMOVED******REMOVED***
        assert_equal(mtest, ctrl***REMOVED***

    def test_single_dtype_wo_names(self***REMOVED***:
        # Test single dtype w/o names
        data = "0, 1, 2.3\n4, 5, 6.7"
        mtest = np.ndfromtxt(TextIO(data***REMOVED***,
                             delimiter=",", dtype=float, defaultfmt="f%02i"***REMOVED***
        ctrl = np.array([[0., 1., 2.3***REMOVED***, [4., 5., 6.7***REMOVED******REMOVED***, dtype=float***REMOVED***
        assert_equal(mtest, ctrl***REMOVED***

    def test_single_dtype_w_explicit_names(self***REMOVED***:
        # Test single dtype w explicit names
        data = "0, 1, 2.3\n4, 5, 6.7"
        mtest = np.ndfromtxt(TextIO(data***REMOVED***,
                             delimiter=",", dtype=float, names="a, b, c"***REMOVED***
        ctrl = np.array([(0., 1., 2.3***REMOVED***, (4., 5., 6.7***REMOVED******REMOVED***,
                        dtype=[(_, float***REMOVED*** for _ in "abc"***REMOVED******REMOVED***
        assert_equal(mtest, ctrl***REMOVED***

    def test_single_dtype_w_implicit_names(self***REMOVED***:
        # Test single dtype w implicit names
        data = "a, b, c\n0, 1, 2.3\n4, 5, 6.7"
        mtest = np.ndfromtxt(TextIO(data***REMOVED***,
                             delimiter=",", dtype=float, names=True***REMOVED***
        ctrl = np.array([(0., 1., 2.3***REMOVED***, (4., 5., 6.7***REMOVED******REMOVED***,
                        dtype=[(_, float***REMOVED*** for _ in "abc"***REMOVED******REMOVED***
        assert_equal(mtest, ctrl***REMOVED***

    def test_easy_structured_dtype(self***REMOVED***:
        # Test easy structured dtype
        data = "0, 1, 2.3\n4, 5, 6.7"
        mtest = np.ndfromtxt(TextIO(data***REMOVED***, delimiter=",",
                             dtype=(int, float, float***REMOVED***, defaultfmt="f_%02i"***REMOVED***
        ctrl = np.array([(0, 1., 2.3***REMOVED***, (4, 5., 6.7***REMOVED******REMOVED***,
                        dtype=[("f_00", int***REMOVED***, ("f_01", float***REMOVED***, ("f_02", float***REMOVED******REMOVED******REMOVED***
        assert_equal(mtest, ctrl***REMOVED***

    def test_autostrip(self***REMOVED***:
        # Test autostrip
        data = "01/01/2003  , 1.3,   abcde"
        kwargs = dict(delimiter=",", dtype=None***REMOVED***
        mtest = np.ndfromtxt(TextIO(data***REMOVED***, **kwargs***REMOVED***
        ctrl = np.array([('01/01/2003  ', 1.3, '   abcde'***REMOVED******REMOVED***,
                        dtype=[('f0', '|S12'***REMOVED***, ('f1', float***REMOVED***, ('f2', '|S8'***REMOVED******REMOVED******REMOVED***
        assert_equal(mtest, ctrl***REMOVED***
        mtest = np.ndfromtxt(TextIO(data***REMOVED***, autostrip=True, **kwargs***REMOVED***
        ctrl = np.array([('01/01/2003', 1.3, 'abcde'***REMOVED******REMOVED***,
                        dtype=[('f0', '|S10'***REMOVED***, ('f1', float***REMOVED***, ('f2', '|S5'***REMOVED******REMOVED******REMOVED***
        assert_equal(mtest, ctrl***REMOVED***

    def test_replace_space(self***REMOVED***:
        # Test the 'replace_space' option
        txt = "A.A, B (B***REMOVED***, C:C\n1, 2, 3.14"
        # Test default: replace ' ' by '_' and delete non-alphanum chars
        test = np.genfromtxt(TextIO(txt***REMOVED***,
                             delimiter=",", names=True, dtype=None***REMOVED***
        ctrl_dtype = [("AA", int***REMOVED***, ("B_B", int***REMOVED***, ("CC", float***REMOVED******REMOVED***
        ctrl = np.array((1, 2, 3.14***REMOVED***, dtype=ctrl_dtype***REMOVED***
        assert_equal(test, ctrl***REMOVED***
        # Test: no replace, no delete
        test = np.genfromtxt(TextIO(txt***REMOVED***,
                             delimiter=",", names=True, dtype=None,
                             replace_space='', deletechars=''***REMOVED***
        ctrl_dtype = [("A.A", int***REMOVED***, ("B (B***REMOVED***", int***REMOVED***, ("C:C", float***REMOVED******REMOVED***
        ctrl = np.array((1, 2, 3.14***REMOVED***, dtype=ctrl_dtype***REMOVED***
        assert_equal(test, ctrl***REMOVED***
        # Test: no delete (spaces are replaced by _***REMOVED***
        test = np.genfromtxt(TextIO(txt***REMOVED***,
                             delimiter=",", names=True, dtype=None,
                             deletechars=''***REMOVED***
        ctrl_dtype = [("A.A", int***REMOVED***, ("B_(B***REMOVED***", int***REMOVED***, ("C:C", float***REMOVED******REMOVED***
        ctrl = np.array((1, 2, 3.14***REMOVED***, dtype=ctrl_dtype***REMOVED***
        assert_equal(test, ctrl***REMOVED***

    def test_replace_space_known_dtype(self***REMOVED***:
        # Test the 'replace_space' (and related***REMOVED*** options when dtype != None
        txt = "A.A, B (B***REMOVED***, C:C\n1, 2, 3"
        # Test default: replace ' ' by '_' and delete non-alphanum chars
        test = np.genfromtxt(TextIO(txt***REMOVED***,
                             delimiter=",", names=True, dtype=int***REMOVED***
        ctrl_dtype = [("AA", int***REMOVED***, ("B_B", int***REMOVED***, ("CC", int***REMOVED******REMOVED***
        ctrl = np.array((1, 2, 3***REMOVED***, dtype=ctrl_dtype***REMOVED***
        assert_equal(test, ctrl***REMOVED***
        # Test: no replace, no delete
        test = np.genfromtxt(TextIO(txt***REMOVED***,
                             delimiter=",", names=True, dtype=int,
                             replace_space='', deletechars=''***REMOVED***
        ctrl_dtype = [("A.A", int***REMOVED***, ("B (B***REMOVED***", int***REMOVED***, ("C:C", int***REMOVED******REMOVED***
        ctrl = np.array((1, 2, 3***REMOVED***, dtype=ctrl_dtype***REMOVED***
        assert_equal(test, ctrl***REMOVED***
        # Test: no delete (spaces are replaced by _***REMOVED***
        test = np.genfromtxt(TextIO(txt***REMOVED***,
                             delimiter=",", names=True, dtype=int,
                             deletechars=''***REMOVED***
        ctrl_dtype = [("A.A", int***REMOVED***, ("B_(B***REMOVED***", int***REMOVED***, ("C:C", int***REMOVED******REMOVED***
        ctrl = np.array((1, 2, 3***REMOVED***, dtype=ctrl_dtype***REMOVED***
        assert_equal(test, ctrl***REMOVED***

    def test_incomplete_names(self***REMOVED***:
        # Test w/ incomplete names
        data = "A,,C\n0,1,2\n3,4,5"
        kwargs = dict(delimiter=",", names=True***REMOVED***
        # w/ dtype=None
        ctrl = np.array([(0, 1, 2***REMOVED***, (3, 4, 5***REMOVED******REMOVED***,
                        dtype=[(_, int***REMOVED*** for _ in ('A', 'f0', 'C'***REMOVED******REMOVED******REMOVED***
        test = np.ndfromtxt(TextIO(data***REMOVED***, dtype=None, **kwargs***REMOVED***
        assert_equal(test, ctrl***REMOVED***
        # w/ default dtype
        ctrl = np.array([(0, 1, 2***REMOVED***, (3, 4, 5***REMOVED******REMOVED***,
                        dtype=[(_, float***REMOVED*** for _ in ('A', 'f0', 'C'***REMOVED******REMOVED******REMOVED***
        test = np.ndfromtxt(TextIO(data***REMOVED***, **kwargs***REMOVED***

    def test_names_auto_completion(self***REMOVED***:
        # Make sure that names are properly completed
        data = "1 2 3\n 4 5 6"
        test = np.genfromtxt(TextIO(data***REMOVED***,
                             dtype=(int, float, int***REMOVED***, names="a"***REMOVED***
        ctrl = np.array([(1, 2, 3***REMOVED***, (4, 5, 6***REMOVED******REMOVED***,
                        dtype=[('a', int***REMOVED***, ('f0', float***REMOVED***, ('f1', int***REMOVED******REMOVED******REMOVED***
        assert_equal(test, ctrl***REMOVED***

    def test_names_with_usecols_bug1636(self***REMOVED***:
        # Make sure we pick up the right names w/ usecols
        data = "A,B,C,D,E\n0,1,2,3,4\n0,1,2,3,4\n0,1,2,3,4"
        ctrl_names = ("A", "C", "E"***REMOVED***
        test = np.genfromtxt(TextIO(data***REMOVED***,
                             dtype=(int, int, int***REMOVED***, delimiter=",",
                             usecols=(0, 2, 4***REMOVED***, names=True***REMOVED***
        assert_equal(test.dtype.names, ctrl_names***REMOVED***
        #
        test = np.genfromtxt(TextIO(data***REMOVED***,
                             dtype=(int, int, int***REMOVED***, delimiter=",",
                             usecols=("A", "C", "E"***REMOVED***, names=True***REMOVED***
        assert_equal(test.dtype.names, ctrl_names***REMOVED***
        #
        test = np.genfromtxt(TextIO(data***REMOVED***,
                             dtype=int, delimiter=",",
                             usecols=("A", "C", "E"***REMOVED***, names=True***REMOVED***
        assert_equal(test.dtype.names, ctrl_names***REMOVED***

    def test_fixed_width_names(self***REMOVED***:
        # Test fix-width w/ names
        data = "    A    B   C\n    0    1 2.3\n   45   67   9."
        kwargs = dict(delimiter=(5, 5, 4***REMOVED***, names=True, dtype=None***REMOVED***
        ctrl = np.array([(0, 1, 2.3***REMOVED***, (45, 67, 9.***REMOVED******REMOVED***,
                        dtype=[('A', int***REMOVED***, ('B', int***REMOVED***, ('C', float***REMOVED******REMOVED******REMOVED***
        test = np.ndfromtxt(TextIO(data***REMOVED***, **kwargs***REMOVED***
        assert_equal(test, ctrl***REMOVED***
        #
        kwargs = dict(delimiter=5, names=True, dtype=None***REMOVED***
        ctrl = np.array([(0, 1, 2.3***REMOVED***, (45, 67, 9.***REMOVED******REMOVED***,
                        dtype=[('A', int***REMOVED***, ('B', int***REMOVED***, ('C', float***REMOVED******REMOVED******REMOVED***
        test = np.ndfromtxt(TextIO(data***REMOVED***, **kwargs***REMOVED***
        assert_equal(test, ctrl***REMOVED***

    def test_filling_values(self***REMOVED***:
        # Test missing values
        data = b"1, 2, 3\n1, , 5\n0, 6, \n"
        kwargs = dict(delimiter=",", dtype=None, filling_values=-999***REMOVED***
        ctrl = np.array([[1, 2, 3***REMOVED***, [1, -999, 5***REMOVED***, [0, 6, -999***REMOVED******REMOVED***, dtype=int***REMOVED***
        test = np.ndfromtxt(TextIO(data***REMOVED***, **kwargs***REMOVED***
        assert_equal(test, ctrl***REMOVED***

    def test_comments_is_none(self***REMOVED***:
        # Github issue 329 (None was previously being converted to 'None'***REMOVED***.
        test = np.genfromtxt(TextIO("test1,testNonetherestofthedata"***REMOVED***,
                             dtype=None, comments=None, delimiter=','***REMOVED***
        assert_equal(test[1***REMOVED***, b'testNonetherestofthedata'***REMOVED***
        test = np.genfromtxt(TextIO("test1, testNonetherestofthedata"***REMOVED***,
                             dtype=None, comments=None, delimiter=','***REMOVED***
        assert_equal(test[1***REMOVED***, b' testNonetherestofthedata'***REMOVED***

    def test_recfromtxt(self***REMOVED***:
        #
        data = TextIO('A,B\n0,1\n2,3'***REMOVED***
        kwargs = dict(delimiter=",", missing_values="N/A", names=True***REMOVED***
        test = np.recfromtxt(data, **kwargs***REMOVED***
        control = np.array([(0, 1***REMOVED***, (2, 3***REMOVED******REMOVED***,
                           dtype=[('A', np.int***REMOVED***, ('B', np.int***REMOVED******REMOVED******REMOVED***
        self.assertTrue(isinstance(test, np.recarray***REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        #
        data = TextIO('A,B\n0,1\n2,N/A'***REMOVED***
        test = np.recfromtxt(data, dtype=None, usemask=True, **kwargs***REMOVED***
        control = ma.array([(0, 1***REMOVED***, (2, -1***REMOVED******REMOVED***,
                           mask=[(False, False***REMOVED***, (False, True***REMOVED******REMOVED***,
                           dtype=[('A', np.int***REMOVED***, ('B', np.int***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        assert_equal(test.mask, control.mask***REMOVED***
        assert_equal(test.A, [0, 2***REMOVED******REMOVED***

    def test_recfromcsv(self***REMOVED***:
        #
        data = TextIO('A,B\n0,1\n2,3'***REMOVED***
        kwargs = dict(missing_values="N/A", names=True, case_sensitive=True***REMOVED***
        test = np.recfromcsv(data, dtype=None, **kwargs***REMOVED***
        control = np.array([(0, 1***REMOVED***, (2, 3***REMOVED******REMOVED***,
                           dtype=[('A', np.int***REMOVED***, ('B', np.int***REMOVED******REMOVED******REMOVED***
        self.assertTrue(isinstance(test, np.recarray***REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        #
        data = TextIO('A,B\n0,1\n2,N/A'***REMOVED***
        test = np.recfromcsv(data, dtype=None, usemask=True, **kwargs***REMOVED***
        control = ma.array([(0, 1***REMOVED***, (2, -1***REMOVED******REMOVED***,
                           mask=[(False, False***REMOVED***, (False, True***REMOVED******REMOVED***,
                           dtype=[('A', np.int***REMOVED***, ('B', np.int***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        assert_equal(test.mask, control.mask***REMOVED***
        assert_equal(test.A, [0, 2***REMOVED******REMOVED***
        #
        data = TextIO('A,B\n0,1\n2,3'***REMOVED***
        test = np.recfromcsv(data, missing_values='N/A',***REMOVED***
        control = np.array([(0, 1***REMOVED***, (2, 3***REMOVED******REMOVED***,
                           dtype=[('a', np.int***REMOVED***, ('b', np.int***REMOVED******REMOVED******REMOVED***
        self.assertTrue(isinstance(test, np.recarray***REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        #
        data = TextIO('A,B\n0,1\n2,3'***REMOVED***
        dtype = [('a', np.int***REMOVED***, ('b', np.float***REMOVED******REMOVED***
        test = np.recfromcsv(data, missing_values='N/A', dtype=dtype***REMOVED***
        control = np.array([(0, 1***REMOVED***, (2, 3***REMOVED******REMOVED***,
                           dtype=dtype***REMOVED***
        self.assertTrue(isinstance(test, np.recarray***REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

    def test_max_rows(self***REMOVED***:
        # Test the `max_rows` keyword argument.
        data = '1 2\n3 4\n5 6\n7 8\n9 10\n'
        txt = TextIO(data***REMOVED***
        a1 = np.genfromtxt(txt, max_rows=3***REMOVED***
        a2 = np.genfromtxt(txt***REMOVED***
        assert_equal(a1, [[1, 2***REMOVED***, [3, 4***REMOVED***, [5, 6***REMOVED******REMOVED******REMOVED***
        assert_equal(a2, [[7, 8***REMOVED***, [9, 10***REMOVED******REMOVED******REMOVED***

        # max_rows must be at least 1.
        assert_raises(ValueError, np.genfromtxt, TextIO(data***REMOVED***, max_rows=0***REMOVED***

        # An input with several invalid rows.
        data = '1 1\n2 2\n0 \n3 3\n4 4\n5  \n6  \n7  \n'

        test = np.genfromtxt(TextIO(data***REMOVED***, max_rows=2***REMOVED***
        control = np.array([[1., 1.***REMOVED***, [2., 2.***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

        # Test keywords conflict
        assert_raises(ValueError, np.genfromtxt, TextIO(data***REMOVED***, skip_footer=1,
                      max_rows=4***REMOVED***

        # Test with invalid value
        assert_raises(ValueError, np.genfromtxt, TextIO(data***REMOVED***, max_rows=4***REMOVED***

        # Test with invalid not raise
        with warnings.catch_warnings(***REMOVED***:
            warnings.filterwarnings("ignore"***REMOVED***

            test = np.genfromtxt(TextIO(data***REMOVED***, max_rows=4, invalid_raise=False***REMOVED***
            control = np.array([[1., 1.***REMOVED***, [2., 2.***REMOVED***, [3., 3.***REMOVED***, [4., 4.***REMOVED******REMOVED******REMOVED***
            assert_equal(test, control***REMOVED***

            test = np.genfromtxt(TextIO(data***REMOVED***, max_rows=5, invalid_raise=False***REMOVED***
            control = np.array([[1., 1.***REMOVED***, [2., 2.***REMOVED***, [3., 3.***REMOVED***, [4., 4.***REMOVED******REMOVED******REMOVED***
            assert_equal(test, control***REMOVED***

        # Structured array with field names.
        data = 'a b\n#c d\n1 1\n2 2\n#0 \n3 3\n4 4\n5  5\n'

        # Test with header, names and comments
        txt = TextIO(data***REMOVED***
        test = np.genfromtxt(txt, skip_header=1, max_rows=3, names=True***REMOVED***
        control = np.array([(1.0, 1.0***REMOVED***, (2.0, 2.0***REMOVED***, (3.0, 3.0***REMOVED******REMOVED***,
                      dtype=[('c', '<f8'***REMOVED***, ('d', '<f8'***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        # To continue reading the same "file", don't use skip_header or
        # names, and use the previously determined dtype.
        test = np.genfromtxt(txt, max_rows=None, dtype=test.dtype***REMOVED***
        control = np.array([(4.0, 4.0***REMOVED***, (5.0, 5.0***REMOVED******REMOVED***,
                      dtype=[('c', '<f8'***REMOVED***, ('d', '<f8'***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

    def test_gft_using_filename(self***REMOVED***:
        # Test that we can load data from a filename as well as a file
        # object
        tgt = np.arange(6***REMOVED***.reshape((2, 3***REMOVED******REMOVED***
        if sys.version_info[0***REMOVED*** >= 3:
            # python 3k is known to fail for '\r'
            linesep = ('\n', '\r\n'***REMOVED***
        else:
            linesep = ('\n', '\r\n', '\r'***REMOVED***

        for sep in linesep:
            data = '0 1 2' + sep + '3 4 5'
            with temppath(***REMOVED*** as name:
                with open(name, 'w'***REMOVED*** as f:
                    f.write(data***REMOVED***
                res = np.genfromtxt(name***REMOVED***
            assert_array_equal(res, tgt***REMOVED***

    def test_gft_using_generator(self***REMOVED***:
        # gft doesn't work with unicode.
        def count(***REMOVED***:
            for i in range(10***REMOVED***:
                yield asbytes("%d" % i***REMOVED***

        res = np.genfromtxt(count(***REMOVED******REMOVED***
        assert_array_equal(res, np.arange(10***REMOVED******REMOVED***

    def test_auto_dtype_largeint(self***REMOVED***:
        # Regression test for numpy/numpy#5635 whereby large integers could
        # cause OverflowErrors.

        # Test the automatic definition of the output dtype
        #
        # 2**66 = 73786976294838206464 => should convert to float
        # 2**34 = 17179869184 => should convert to int64
        # 2**10 = 1024 => should convert to int (int32 on 32-bit systems,
        #                 int64 on 64-bit systems***REMOVED***

        data = TextIO('73786976294838206464 17179869184 1024'***REMOVED***

        test = np.ndfromtxt(data, dtype=None***REMOVED***

        assert_equal(test.dtype.names, ['f0', 'f1', 'f2'***REMOVED******REMOVED***

        assert_(test.dtype['f0'***REMOVED*** == np.float***REMOVED***
        assert_(test.dtype['f1'***REMOVED*** == np.int64***REMOVED***
        assert_(test.dtype['f2'***REMOVED*** == np.integer***REMOVED***

        assert_allclose(test['f0'***REMOVED***, 73786976294838206464.***REMOVED***
        assert_equal(test['f1'***REMOVED***, 17179869184***REMOVED***
        assert_equal(test['f2'***REMOVED***, 1024***REMOVED***

def test_gzip_load(***REMOVED***:
    a = np.random.random((5, 5***REMOVED******REMOVED***

    s = BytesIO(***REMOVED***
    f = gzip.GzipFile(fileobj=s, mode="w"***REMOVED***

    np.save(f, a***REMOVED***
    f.close(***REMOVED***
    s.seek(0***REMOVED***

    f = gzip.GzipFile(fileobj=s, mode="r"***REMOVED***
    assert_array_equal(np.load(f***REMOVED***, a***REMOVED***


def test_gzip_loadtxt(***REMOVED***:
    # Thanks to another windows brokeness, we can't use
    # NamedTemporaryFile: a file created from this function cannot be
    # reopened by another open call. So we first put the gzipped string
    # of the test reference array, write it to a securely opened file,
    # which is then read from by the loadtxt function
    s = BytesIO(***REMOVED***
    g = gzip.GzipFile(fileobj=s, mode='w'***REMOVED***
    g.write(b'1 2 3\n'***REMOVED***
    g.close(***REMOVED***

    s.seek(0***REMOVED***
    with temppath(suffix='.gz'***REMOVED*** as name:
        with open(name, 'wb'***REMOVED*** as f:
            f.write(s.read(***REMOVED******REMOVED***
        res = np.loadtxt(name***REMOVED***
    s.close(***REMOVED***

    assert_array_equal(res, [1, 2, 3***REMOVED******REMOVED***


def test_gzip_loadtxt_from_string(***REMOVED***:
    s = BytesIO(***REMOVED***
    f = gzip.GzipFile(fileobj=s, mode="w"***REMOVED***
    f.write(b'1 2 3\n'***REMOVED***
    f.close(***REMOVED***
    s.seek(0***REMOVED***

    f = gzip.GzipFile(fileobj=s, mode="r"***REMOVED***
    assert_array_equal(np.loadtxt(f***REMOVED***, [1, 2, 3***REMOVED******REMOVED***


def test_npzfile_dict(***REMOVED***:
    s = BytesIO(***REMOVED***
    x = np.zeros((3, 3***REMOVED******REMOVED***
    y = np.zeros((3, 3***REMOVED******REMOVED***

    np.savez(s, x=x, y=y***REMOVED***
    s.seek(0***REMOVED***

    z = np.load(s***REMOVED***

    assert_('x' in z***REMOVED***
    assert_('y' in z***REMOVED***
    assert_('x' in z.keys(***REMOVED******REMOVED***
    assert_('y' in z.keys(***REMOVED******REMOVED***

    for f, a in z.items(***REMOVED***:
        assert_(f in ['x', 'y'***REMOVED******REMOVED***
        assert_equal(a.shape, (3, 3***REMOVED******REMOVED***

    assert_(len(z.items(***REMOVED******REMOVED*** == 2***REMOVED***

    for f in z:
        assert_(f in ['x', 'y'***REMOVED******REMOVED***

    assert_('x' in z.keys(***REMOVED******REMOVED***


def test_load_refcount(***REMOVED***:
    # Check that objects returned by np.load are directly freed based on
    # their refcount, rather than needing the gc to collect them.

    f = BytesIO(***REMOVED***
    np.savez(f, [1, 2, 3***REMOVED******REMOVED***
    f.seek(0***REMOVED***

    assert_(gc.isenabled(***REMOVED******REMOVED***
    gc.disable(***REMOVED***
    ***REMOVED***
        gc.collect(***REMOVED***
        np.load(f***REMOVED***
        # gc.collect returns the number of unreachable objects in cycles that
        # were found -- we are checking that no cycles were created by np.load
        n_objects_in_cycles = gc.collect(***REMOVED***
    finally:
        gc.enable(***REMOVED***
    assert_equal(n_objects_in_cycles, 0***REMOVED***

if __name__ == "__main__":
    run_module_suite(***REMOVED***
