from __future__ import division, absolute_import, print_function

import numpy as np
import numpy.ma as ma
from numpy.ma.mrecords import MaskedRecords
from numpy.ma.testutils import assert_equal
from numpy.testing import TestCase, run_module_suite, assert_
from numpy.lib.recfunctions import (
    drop_fields, rename_fields, get_fieldstructure, recursive_fill_fields,
    find_duplicates, merge_arrays, append_fields, stack_arrays, join_by
    ***REMOVED***
get_names = np.lib.recfunctions.get_names
get_names_flat = np.lib.recfunctions.get_names_flat
zip_descr = np.lib.recfunctions.zip_descr


class TestRecFunctions(TestCase***REMOVED***:
    # Misc tests

    def setUp(self***REMOVED***:
        x = np.array([1, 2, ***REMOVED******REMOVED***
        y = np.array([10, 20, 30***REMOVED******REMOVED***
        z = np.array([('A', 1.***REMOVED***, ('B', 2.***REMOVED******REMOVED***,
                     dtype=[('A', '|S3'***REMOVED***, ('B', float***REMOVED******REMOVED******REMOVED***
        w = np.array([(1, (2, 3.0***REMOVED******REMOVED***, (4, (5, 6.0***REMOVED******REMOVED******REMOVED***,
                     dtype=[('a', int***REMOVED***, ('b', [('ba', float***REMOVED***, ('bb', int***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        self.data = (w, x, y, z***REMOVED***

    def test_zip_descr(self***REMOVED***:
        # Test zip_descr
        (w, x, y, z***REMOVED*** = self.data

        # Std array
        test = zip_descr((x, x***REMOVED***, flatten=True***REMOVED***
        assert_equal(test,
                     np.dtype([('', int***REMOVED***, ('', int***REMOVED******REMOVED******REMOVED******REMOVED***
        test = zip_descr((x, x***REMOVED***, flatten=False***REMOVED***
        assert_equal(test,
                     np.dtype([('', int***REMOVED***, ('', int***REMOVED******REMOVED******REMOVED******REMOVED***

        # Std & flexible-dtype
        test = zip_descr((x, z***REMOVED***, flatten=True***REMOVED***
        assert_equal(test,
                     np.dtype([('', int***REMOVED***, ('A', '|S3'***REMOVED***, ('B', float***REMOVED******REMOVED******REMOVED******REMOVED***
        test = zip_descr((x, z***REMOVED***, flatten=False***REMOVED***
        assert_equal(test,
                     np.dtype([('', int***REMOVED***,
                               ('', [('A', '|S3'***REMOVED***, ('B', float***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***

        # Standard & nested dtype
        test = zip_descr((x, w***REMOVED***, flatten=True***REMOVED***
        assert_equal(test,
                     np.dtype([('', int***REMOVED***,
                               ('a', int***REMOVED***,
                               ('ba', float***REMOVED***, ('bb', int***REMOVED******REMOVED******REMOVED******REMOVED***
        test = zip_descr((x, w***REMOVED***, flatten=False***REMOVED***
        assert_equal(test,
                     np.dtype([('', int***REMOVED***,
                               ('', [('a', int***REMOVED***,
                                     ('b', [('ba', float***REMOVED***, ('bb', int***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***

    def test_drop_fields(self***REMOVED***:
        # Test drop_fields
        a = np.array([(1, (2, 3.0***REMOVED******REMOVED***, (4, (5, 6.0***REMOVED******REMOVED******REMOVED***,
                     dtype=[('a', int***REMOVED***, ('b', [('ba', float***REMOVED***, ('bb', int***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***

        # A basic field
        test = drop_fields(a, 'a'***REMOVED***
        control = np.array([((2, 3.0***REMOVED***,***REMOVED***, ((5, 6.0***REMOVED***,***REMOVED******REMOVED***,
                           dtype=[('b', [('ba', float***REMOVED***, ('bb', int***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

        # Another basic field (but nesting two fields***REMOVED***
        test = drop_fields(a, 'b'***REMOVED***
        control = np.array([(1,***REMOVED***, (4,***REMOVED******REMOVED***, dtype=[('a', int***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

        # A nested sub-field
        test = drop_fields(a, ['ba', ***REMOVED******REMOVED***
        control = np.array([(1, (3.0,***REMOVED******REMOVED***, (4, (6.0,***REMOVED******REMOVED******REMOVED***,
                           dtype=[('a', int***REMOVED***, ('b', [('bb', int***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

        # All the nested sub-field from a field: zap that field
        test = drop_fields(a, ['ba', 'bb'***REMOVED******REMOVED***
        control = np.array([(1,***REMOVED***, (4,***REMOVED******REMOVED***, dtype=[('a', int***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

        test = drop_fields(a, ['a', 'b'***REMOVED******REMOVED***
        assert_(test is None***REMOVED***

    def test_rename_fields(self***REMOVED***:
        # Test rename fields
        a = np.array([(1, (2, [3.0, 30.***REMOVED******REMOVED******REMOVED***, (4, (5, [6.0, 60.***REMOVED******REMOVED******REMOVED******REMOVED***,
                     dtype=[('a', int***REMOVED***,
                            ('b', [('ba', float***REMOVED***, ('bb', (float, 2***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        test = rename_fields(a, {'a': 'A', 'bb': 'BB'***REMOVED******REMOVED***
        newdtype = [('A', int***REMOVED***, ('b', [('ba', float***REMOVED***, ('BB', (float, 2***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        control = a.view(newdtype***REMOVED***
        assert_equal(test.dtype, newdtype***REMOVED***
        assert_equal(test, control***REMOVED***

    def test_get_names(self***REMOVED***:
        # Test get_names
        ndtype = np.dtype([('A', '|S3'***REMOVED***, ('B', float***REMOVED******REMOVED******REMOVED***
        test = get_names(ndtype***REMOVED***
        assert_equal(test, ('A', 'B'***REMOVED******REMOVED***

        ndtype = np.dtype([('a', int***REMOVED***, ('b', [('ba', float***REMOVED***, ('bb', int***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        test = get_names(ndtype***REMOVED***
        assert_equal(test, ('a', ('b', ('ba', 'bb'***REMOVED******REMOVED******REMOVED******REMOVED***

    def test_get_names_flat(self***REMOVED***:
        # Test get_names_flat
        ndtype = np.dtype([('A', '|S3'***REMOVED***, ('B', float***REMOVED******REMOVED******REMOVED***
        test = get_names_flat(ndtype***REMOVED***
        assert_equal(test, ('A', 'B'***REMOVED******REMOVED***

        ndtype = np.dtype([('a', int***REMOVED***, ('b', [('ba', float***REMOVED***, ('bb', int***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        test = get_names_flat(ndtype***REMOVED***
        assert_equal(test, ('a', 'b', 'ba', 'bb'***REMOVED******REMOVED***

    def test_get_fieldstructure(self***REMOVED***:
        # Test get_fieldstructure

        # No nested fields
        ndtype = np.dtype([('A', '|S3'***REMOVED***, ('B', float***REMOVED******REMOVED******REMOVED***
        test = get_fieldstructure(ndtype***REMOVED***
        assert_equal(test, {'A': [***REMOVED***, 'B': [***REMOVED******REMOVED******REMOVED***

        # One 1-nested field
        ndtype = np.dtype([('A', int***REMOVED***, ('B', [('BA', float***REMOVED***, ('BB', '|S1'***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        test = get_fieldstructure(ndtype***REMOVED***
        assert_equal(test, {'A': [***REMOVED***, 'B': [***REMOVED***, 'BA': ['B', ***REMOVED***, 'BB': ['B'***REMOVED******REMOVED******REMOVED***

        # One 2-nested fields
        ndtype = np.dtype([('A', int***REMOVED***,
                           ('B', [('BA', int***REMOVED***,
                                  ('BB', [('BBA', int***REMOVED***, ('BBB', int***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        test = get_fieldstructure(ndtype***REMOVED***
        control = {'A': [***REMOVED***, 'B': [***REMOVED***, 'BA': ['B'***REMOVED***, 'BB': ['B'***REMOVED***,
                   'BBA': ['B', 'BB'***REMOVED***, 'BBB': ['B', 'BB'***REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

    def test_find_duplicates(self***REMOVED***:
        # Test find_duplicates
        a = ma.array([(2, (2., 'B'***REMOVED******REMOVED***, (1, (2., 'B'***REMOVED******REMOVED***, (2, (2., 'B'***REMOVED******REMOVED***,
                      (1, (1., 'B'***REMOVED******REMOVED***, (2, (2., 'B'***REMOVED******REMOVED***, (2, (2., 'C'***REMOVED******REMOVED******REMOVED***,
                     mask=[(0, (0, 0***REMOVED******REMOVED***, (0, (0, 0***REMOVED******REMOVED***, (0, (0, 0***REMOVED******REMOVED***,
                           (0, (0, 0***REMOVED******REMOVED***, (1, (0, 0***REMOVED******REMOVED***, (0, (1, 0***REMOVED******REMOVED******REMOVED***,
                     dtype=[('A', int***REMOVED***, ('B', [('BA', float***REMOVED***, ('BB', '|S1'***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***

        test = find_duplicates(a, ignoremask=False, return_index=True***REMOVED***
        control = [0, 2***REMOVED***
        assert_equal(sorted(test[-1***REMOVED******REMOVED***, control***REMOVED***
        assert_equal(test[0***REMOVED***, a[test[-1***REMOVED******REMOVED******REMOVED***

        test = find_duplicates(a, key='A', return_index=True***REMOVED***
        control = [0, 1, 2, 3, 5***REMOVED***
        assert_equal(sorted(test[-1***REMOVED******REMOVED***, control***REMOVED***
        assert_equal(test[0***REMOVED***, a[test[-1***REMOVED******REMOVED******REMOVED***

        test = find_duplicates(a, key='B', return_index=True***REMOVED***
        control = [0, 1, 2, 4***REMOVED***
        assert_equal(sorted(test[-1***REMOVED******REMOVED***, control***REMOVED***
        assert_equal(test[0***REMOVED***, a[test[-1***REMOVED******REMOVED******REMOVED***

        test = find_duplicates(a, key='BA', return_index=True***REMOVED***
        control = [0, 1, 2, 4***REMOVED***
        assert_equal(sorted(test[-1***REMOVED******REMOVED***, control***REMOVED***
        assert_equal(test[0***REMOVED***, a[test[-1***REMOVED******REMOVED******REMOVED***

        test = find_duplicates(a, key='BB', return_index=True***REMOVED***
        control = [0, 1, 2, 3, 4***REMOVED***
        assert_equal(sorted(test[-1***REMOVED******REMOVED***, control***REMOVED***
        assert_equal(test[0***REMOVED***, a[test[-1***REMOVED******REMOVED******REMOVED***

    def test_find_duplicates_ignoremask(self***REMOVED***:
        # Test the ignoremask option of find_duplicates
        ndtype = [('a', int***REMOVED******REMOVED***
        a = ma.array([1, 1, 1, 2, 2, 3, 3***REMOVED***,
                     mask=[0, 0, 1, 0, 0, 0, 1***REMOVED******REMOVED***.view(ndtype***REMOVED***
        test = find_duplicates(a, ignoremask=True, return_index=True***REMOVED***
        control = [0, 1, 3, 4***REMOVED***
        assert_equal(sorted(test[-1***REMOVED******REMOVED***, control***REMOVED***
        assert_equal(test[0***REMOVED***, a[test[-1***REMOVED******REMOVED******REMOVED***

        test = find_duplicates(a, ignoremask=False, return_index=True***REMOVED***
        control = [0, 1, 2, 3, 4, 6***REMOVED***
        assert_equal(sorted(test[-1***REMOVED******REMOVED***, control***REMOVED***
        assert_equal(test[0***REMOVED***, a[test[-1***REMOVED******REMOVED******REMOVED***


class TestRecursiveFillFields(TestCase***REMOVED***:
    # Test recursive_fill_fields.
    def test_simple_flexible(self***REMOVED***:
        # Test recursive_fill_fields on flexible-array
        a = np.array([(1, 10.***REMOVED***, (2, 20.***REMOVED******REMOVED***, dtype=[('A', int***REMOVED***, ('B', float***REMOVED******REMOVED******REMOVED***
        b = np.zeros((3,***REMOVED***, dtype=a.dtype***REMOVED***
        test = recursive_fill_fields(a, b***REMOVED***
        control = np.array([(1, 10.***REMOVED***, (2, 20.***REMOVED***, (0, 0.***REMOVED******REMOVED***,
                           dtype=[('A', int***REMOVED***, ('B', float***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

    def test_masked_flexible(self***REMOVED***:
        # Test recursive_fill_fields on masked flexible-array
        a = ma.array([(1, 10.***REMOVED***, (2, 20.***REMOVED******REMOVED***, mask=[(0, 1***REMOVED***, (1, 0***REMOVED******REMOVED***,
                     dtype=[('A', int***REMOVED***, ('B', float***REMOVED******REMOVED******REMOVED***
        b = ma.zeros((3,***REMOVED***, dtype=a.dtype***REMOVED***
        test = recursive_fill_fields(a, b***REMOVED***
        control = ma.array([(1, 10.***REMOVED***, (2, 20.***REMOVED***, (0, 0.***REMOVED******REMOVED***,
                           mask=[(0, 1***REMOVED***, (1, 0***REMOVED***, (0, 0***REMOVED******REMOVED***,
                           dtype=[('A', int***REMOVED***, ('B', float***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***


class TestMergeArrays(TestCase***REMOVED***:
    # Test merge_arrays

    def setUp(self***REMOVED***:
        x = np.array([1, 2, ***REMOVED******REMOVED***
        y = np.array([10, 20, 30***REMOVED******REMOVED***
        z = np.array(
            [('A', 1.***REMOVED***, ('B', 2.***REMOVED******REMOVED***, dtype=[('A', '|S3'***REMOVED***, ('B', float***REMOVED******REMOVED******REMOVED***
        w = np.array(
            [(1, (2, 3.0***REMOVED******REMOVED***, (4, (5, 6.0***REMOVED******REMOVED******REMOVED***,
            dtype=[('a', int***REMOVED***, ('b', [('ba', float***REMOVED***, ('bb', int***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        self.data = (w, x, y, z***REMOVED***

    def test_solo(self***REMOVED***:
        # Test merge_arrays on a single array.
        (_, x, _, z***REMOVED*** = self.data

        test = merge_arrays(x***REMOVED***
        control = np.array([(1,***REMOVED***, (2,***REMOVED******REMOVED***, dtype=[('f0', int***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        test = merge_arrays((x,***REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

        test = merge_arrays(z, flatten=False***REMOVED***
        assert_equal(test, z***REMOVED***
        test = merge_arrays(z, flatten=True***REMOVED***
        assert_equal(test, z***REMOVED***

    def test_solo_w_flatten(self***REMOVED***:
        # Test merge_arrays on a single array w & w/o flattening
        w = self.data[0***REMOVED***
        test = merge_arrays(w, flatten=False***REMOVED***
        assert_equal(test, w***REMOVED***

        test = merge_arrays(w, flatten=True***REMOVED***
        control = np.array([(1, 2, 3.0***REMOVED***, (4, 5, 6.0***REMOVED******REMOVED***,
                           dtype=[('a', int***REMOVED***, ('ba', float***REMOVED***, ('bb', int***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

    def test_standard(self***REMOVED***:
        # Test standard & standard
        # Test merge arrays
        (_, x, y, _***REMOVED*** = self.data
        test = merge_arrays((x, y***REMOVED***, usemask=False***REMOVED***
        control = np.array([(1, 10***REMOVED***, (2, 20***REMOVED***, (-1, 30***REMOVED******REMOVED***,
                           dtype=[('f0', int***REMOVED***, ('f1', int***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

        test = merge_arrays((x, y***REMOVED***, usemask=True***REMOVED***
        control = ma.array([(1, 10***REMOVED***, (2, 20***REMOVED***, (-1, 30***REMOVED******REMOVED***,
                           mask=[(0, 0***REMOVED***, (0, 0***REMOVED***, (1, 0***REMOVED******REMOVED***,
                           dtype=[('f0', int***REMOVED***, ('f1', int***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        assert_equal(test.mask, control.mask***REMOVED***

    def test_flatten(self***REMOVED***:
        # Test standard & flexible
        (_, x, _, z***REMOVED*** = self.data
        test = merge_arrays((x, z***REMOVED***, flatten=True***REMOVED***
        control = np.array([(1, 'A', 1.***REMOVED***, (2, 'B', 2.***REMOVED******REMOVED***,
                           dtype=[('f0', int***REMOVED***, ('A', '|S3'***REMOVED***, ('B', float***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

        test = merge_arrays((x, z***REMOVED***, flatten=False***REMOVED***
        control = np.array([(1, ('A', 1.***REMOVED******REMOVED***, (2, ('B', 2.***REMOVED******REMOVED******REMOVED***,
                           dtype=[('f0', int***REMOVED***,
                                  ('f1', [('A', '|S3'***REMOVED***, ('B', float***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

    def test_flatten_wflexible(self***REMOVED***:
        # Test flatten standard & nested
        (w, x, _, _***REMOVED*** = self.data
        test = merge_arrays((x, w***REMOVED***, flatten=True***REMOVED***
        control = np.array([(1, 1, 2, 3.0***REMOVED***, (2, 4, 5, 6.0***REMOVED******REMOVED***,
                           dtype=[('f0', int***REMOVED***,
                                  ('a', int***REMOVED***, ('ba', float***REMOVED***, ('bb', int***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

        test = merge_arrays((x, w***REMOVED***, flatten=False***REMOVED***
        controldtype = [('f0', int***REMOVED***,
                                ('f1', [('a', int***REMOVED***,
                                        ('b', [('ba', float***REMOVED***, ('bb', int***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        control = np.array([(1., (1, (2, 3.0***REMOVED******REMOVED******REMOVED***, (2, (4, (5, 6.0***REMOVED******REMOVED******REMOVED******REMOVED***,
                           dtype=controldtype***REMOVED***
        assert_equal(test, control***REMOVED***

    def test_wmasked_arrays(self***REMOVED***:
        # Test merge_arrays masked arrays
        (_, x, _, _***REMOVED*** = self.data
        mx = ma.array([1, 2, 3***REMOVED***, mask=[1, 0, 0***REMOVED******REMOVED***
        test = merge_arrays((x, mx***REMOVED***, usemask=True***REMOVED***
        control = ma.array([(1, 1***REMOVED***, (2, 2***REMOVED***, (-1, 3***REMOVED******REMOVED***,
                           mask=[(0, 1***REMOVED***, (0, 0***REMOVED***, (1, 0***REMOVED******REMOVED***,
                           dtype=[('f0', int***REMOVED***, ('f1', int***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        test = merge_arrays((x, mx***REMOVED***, usemask=True, asrecarray=True***REMOVED***
        assert_equal(test, control***REMOVED***
        assert_(isinstance(test, MaskedRecords***REMOVED******REMOVED***

    def test_w_singlefield(self***REMOVED***:
        # Test single field
        test = merge_arrays((np.array([1, 2***REMOVED******REMOVED***.view([('a', int***REMOVED******REMOVED******REMOVED***,
                             np.array([10., 20., 30.***REMOVED******REMOVED******REMOVED***,***REMOVED***
        control = ma.array([(1, 10.***REMOVED***, (2, 20.***REMOVED***, (-1, 30.***REMOVED******REMOVED***,
                           mask=[(0, 0***REMOVED***, (0, 0***REMOVED***, (1, 0***REMOVED******REMOVED***,
                           dtype=[('a', int***REMOVED***, ('f1', float***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

    def test_w_shorter_flex(self***REMOVED***:
        # Test merge_arrays w/ a shorter flexndarray.
        z = self.data[-1***REMOVED***

        # Fixme, this test looks incomplete and broken
        #test = merge_arrays((z, np.array([10, 20, 30***REMOVED******REMOVED***.view([('C', int***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        #control = np.array([('A', 1., 10***REMOVED***, ('B', 2., 20***REMOVED***, ('-1', -1, 20***REMOVED******REMOVED***,
        #                   dtype=[('A', '|S3'***REMOVED***, ('B', float***REMOVED***, ('C', int***REMOVED******REMOVED******REMOVED***
        #assert_equal(test, control***REMOVED***

        # Hack to avoid pyflakes warnings about unused variables
        merge_arrays((z, np.array([10, 20, 30***REMOVED******REMOVED***.view([('C', int***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        np.array([('A', 1., 10***REMOVED***, ('B', 2., 20***REMOVED***, ('-1', -1, 20***REMOVED******REMOVED***,
                 dtype=[('A', '|S3'***REMOVED***, ('B', float***REMOVED***, ('C', int***REMOVED******REMOVED******REMOVED***

    def test_singlerecord(self***REMOVED***:
        (_, x, y, z***REMOVED*** = self.data
        test = merge_arrays((x[0***REMOVED***, y[0***REMOVED***, z[0***REMOVED******REMOVED***, usemask=False***REMOVED***
        control = np.array([(1, 10, ('A', 1***REMOVED******REMOVED******REMOVED***,
                           dtype=[('f0', int***REMOVED***,
                                  ('f1', int***REMOVED***,
                                  ('f2', [('A', '|S3'***REMOVED***, ('B', float***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***


class TestAppendFields(TestCase***REMOVED***:
    # Test append_fields

    def setUp(self***REMOVED***:
        x = np.array([1, 2, ***REMOVED******REMOVED***
        y = np.array([10, 20, 30***REMOVED******REMOVED***
        z = np.array(
            [('A', 1.***REMOVED***, ('B', 2.***REMOVED******REMOVED***, dtype=[('A', '|S3'***REMOVED***, ('B', float***REMOVED******REMOVED******REMOVED***
        w = np.array([(1, (2, 3.0***REMOVED******REMOVED***, (4, (5, 6.0***REMOVED******REMOVED******REMOVED***,
                     dtype=[('a', int***REMOVED***, ('b', [('ba', float***REMOVED***, ('bb', int***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        self.data = (w, x, y, z***REMOVED***

    def test_append_single(self***REMOVED***:
        # Test simple case
        (_, x, _, _***REMOVED*** = self.data
        test = append_fields(x, 'A', data=[10, 20, 30***REMOVED******REMOVED***
        control = ma.array([(1, 10***REMOVED***, (2, 20***REMOVED***, (-1, 30***REMOVED******REMOVED***,
                           mask=[(0, 0***REMOVED***, (0, 0***REMOVED***, (1, 0***REMOVED******REMOVED***,
                           dtype=[('f0', int***REMOVED***, ('A', int***REMOVED******REMOVED***,***REMOVED***
        assert_equal(test, control***REMOVED***

    def test_append_double(self***REMOVED***:
        # Test simple case
        (_, x, _, _***REMOVED*** = self.data
        test = append_fields(x, ('A', 'B'***REMOVED***, data=[[10, 20, 30***REMOVED***, [100, 200***REMOVED******REMOVED******REMOVED***
        control = ma.array([(1, 10, 100***REMOVED***, (2, 20, 200***REMOVED***, (-1, 30, -1***REMOVED******REMOVED***,
                           mask=[(0, 0, 0***REMOVED***, (0, 0, 0***REMOVED***, (1, 0, 1***REMOVED******REMOVED***,
                           dtype=[('f0', int***REMOVED***, ('A', int***REMOVED***, ('B', int***REMOVED******REMOVED***,***REMOVED***
        assert_equal(test, control***REMOVED***

    def test_append_on_flex(self***REMOVED***:
        # Test append_fields on flexible type arrays
        z = self.data[-1***REMOVED***
        test = append_fields(z, 'C', data=[10, 20, 30***REMOVED******REMOVED***
        control = ma.array([('A', 1., 10***REMOVED***, ('B', 2., 20***REMOVED***, (-1, -1., 30***REMOVED******REMOVED***,
                           mask=[(0, 0, 0***REMOVED***, (0, 0, 0***REMOVED***, (1, 1, 0***REMOVED******REMOVED***,
                           dtype=[('A', '|S3'***REMOVED***, ('B', float***REMOVED***, ('C', int***REMOVED******REMOVED***,***REMOVED***
        assert_equal(test, control***REMOVED***

    def test_append_on_nested(self***REMOVED***:
        # Test append_fields on nested fields
        w = self.data[0***REMOVED***
        test = append_fields(w, 'C', data=[10, 20, 30***REMOVED******REMOVED***
        control = ma.array([(1, (2, 3.0***REMOVED***, 10***REMOVED***,
                            (4, (5, 6.0***REMOVED***, 20***REMOVED***,
                            (-1, (-1, -1.***REMOVED***, 30***REMOVED******REMOVED***,
                           mask=[(
                               0, (0, 0***REMOVED***, 0***REMOVED***, (0, (0, 0***REMOVED***, 0***REMOVED***, (1, (1, 1***REMOVED***, 0***REMOVED******REMOVED***,
                           dtype=[('a', int***REMOVED***,
                                  ('b', [('ba', float***REMOVED***, ('bb', int***REMOVED******REMOVED******REMOVED***,
                                  ('C', int***REMOVED******REMOVED***,***REMOVED***
        assert_equal(test, control***REMOVED***


class TestStackArrays(TestCase***REMOVED***:
    # Test stack_arrays
    def setUp(self***REMOVED***:
        x = np.array([1, 2, ***REMOVED******REMOVED***
        y = np.array([10, 20, 30***REMOVED******REMOVED***
        z = np.array(
            [('A', 1.***REMOVED***, ('B', 2.***REMOVED******REMOVED***, dtype=[('A', '|S3'***REMOVED***, ('B', float***REMOVED******REMOVED******REMOVED***
        w = np.array([(1, (2, 3.0***REMOVED******REMOVED***, (4, (5, 6.0***REMOVED******REMOVED******REMOVED***,
                     dtype=[('a', int***REMOVED***, ('b', [('ba', float***REMOVED***, ('bb', int***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        self.data = (w, x, y, z***REMOVED***

    def test_solo(self***REMOVED***:
        # Test stack_arrays on single arrays
        (_, x, _, _***REMOVED*** = self.data
        test = stack_arrays((x,***REMOVED******REMOVED***
        assert_equal(test, x***REMOVED***
        self.assertTrue(test is x***REMOVED***

        test = stack_arrays(x***REMOVED***
        assert_equal(test, x***REMOVED***
        self.assertTrue(test is x***REMOVED***

    def test_unnamed_fields(self***REMOVED***:
        # Tests combinations of arrays w/o named fields
        (_, x, y, _***REMOVED*** = self.data

        test = stack_arrays((x, x***REMOVED***, usemask=False***REMOVED***
        control = np.array([1, 2, 1, 2***REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

        test = stack_arrays((x, y***REMOVED***, usemask=False***REMOVED***
        control = np.array([1, 2, 10, 20, 30***REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

        test = stack_arrays((y, x***REMOVED***, usemask=False***REMOVED***
        control = np.array([10, 20, 30, 1, 2***REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

    def test_unnamed_and_named_fields(self***REMOVED***:
        # Test combination of arrays w/ & w/o named fields
        (_, x, _, z***REMOVED*** = self.data

        test = stack_arrays((x, z***REMOVED******REMOVED***
        control = ma.array([(1, -1, -1***REMOVED***, (2, -1, -1***REMOVED***,
                            (-1, 'A', 1***REMOVED***, (-1, 'B', 2***REMOVED******REMOVED***,
                           mask=[(0, 1, 1***REMOVED***, (0, 1, 1***REMOVED***,
                                 (1, 0, 0***REMOVED***, (1, 0, 0***REMOVED******REMOVED***,
                           dtype=[('f0', int***REMOVED***, ('A', '|S3'***REMOVED***, ('B', float***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        assert_equal(test.mask, control.mask***REMOVED***

        test = stack_arrays((z, x***REMOVED******REMOVED***
        control = ma.array([('A', 1, -1***REMOVED***, ('B', 2, -1***REMOVED***,
                            (-1, -1, 1***REMOVED***, (-1, -1, 2***REMOVED***, ***REMOVED***,
                           mask=[(0, 0, 1***REMOVED***, (0, 0, 1***REMOVED***,
                                 (1, 1, 0***REMOVED***, (1, 1, 0***REMOVED******REMOVED***,
                           dtype=[('A', '|S3'***REMOVED***, ('B', float***REMOVED***, ('f2', int***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        assert_equal(test.mask, control.mask***REMOVED***

        test = stack_arrays((z, z, x***REMOVED******REMOVED***
        control = ma.array([('A', 1, -1***REMOVED***, ('B', 2, -1***REMOVED***,
                            ('A', 1, -1***REMOVED***, ('B', 2, -1***REMOVED***,
                            (-1, -1, 1***REMOVED***, (-1, -1, 2***REMOVED***, ***REMOVED***,
                           mask=[(0, 0, 1***REMOVED***, (0, 0, 1***REMOVED***,
                                 (0, 0, 1***REMOVED***, (0, 0, 1***REMOVED***,
                                 (1, 1, 0***REMOVED***, (1, 1, 0***REMOVED******REMOVED***,
                           dtype=[('A', '|S3'***REMOVED***, ('B', float***REMOVED***, ('f2', int***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

    def test_matching_named_fields(self***REMOVED***:
        # Test combination of arrays w/ matching field names
        (_, x, _, z***REMOVED*** = self.data
        zz = np.array([('a', 10., 100.***REMOVED***, ('b', 20., 200.***REMOVED***, ('c', 30., 300.***REMOVED******REMOVED***,
                      dtype=[('A', '|S3'***REMOVED***, ('B', float***REMOVED***, ('C', float***REMOVED******REMOVED******REMOVED***
        test = stack_arrays((z, zz***REMOVED******REMOVED***
        control = ma.array([('A', 1, -1***REMOVED***, ('B', 2, -1***REMOVED***,
                            (
                                'a', 10., 100.***REMOVED***, ('b', 20., 200.***REMOVED***, ('c', 30., 300.***REMOVED******REMOVED***,
                           dtype=[('A', '|S3'***REMOVED***, ('B', float***REMOVED***, ('C', float***REMOVED******REMOVED***,
                           mask=[(0, 0, 1***REMOVED***, (0, 0, 1***REMOVED***,
                                 (0, 0, 0***REMOVED***, (0, 0, 0***REMOVED***, (0, 0, 0***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        assert_equal(test.mask, control.mask***REMOVED***

        test = stack_arrays((z, zz, x***REMOVED******REMOVED***
        ndtype = [('A', '|S3'***REMOVED***, ('B', float***REMOVED***, ('C', float***REMOVED***, ('f3', int***REMOVED******REMOVED***
        control = ma.array([('A', 1, -1, -1***REMOVED***, ('B', 2, -1, -1***REMOVED***,
                            ('a', 10., 100., -1***REMOVED***, ('b', 20., 200., -1***REMOVED***,
                            ('c', 30., 300., -1***REMOVED***,
                            (-1, -1, -1, 1***REMOVED***, (-1, -1, -1, 2***REMOVED******REMOVED***,
                           dtype=ndtype,
                           mask=[(0, 0, 1, 1***REMOVED***, (0, 0, 1, 1***REMOVED***,
                                 (0, 0, 0, 1***REMOVED***, (0, 0, 0, 1***REMOVED***, (0, 0, 0, 1***REMOVED***,
                                 (1, 1, 1, 0***REMOVED***, (1, 1, 1, 0***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        assert_equal(test.mask, control.mask***REMOVED***

    def test_defaults(self***REMOVED***:
        # Test defaults: no exception raised if keys of defaults are not fields.
        (_, _, _, z***REMOVED*** = self.data
        zz = np.array([('a', 10., 100.***REMOVED***, ('b', 20., 200.***REMOVED***, ('c', 30., 300.***REMOVED******REMOVED***,
                      dtype=[('A', '|S3'***REMOVED***, ('B', float***REMOVED***, ('C', float***REMOVED******REMOVED******REMOVED***
        defaults = {'A': '???', 'B': -999., 'C': -9999., 'D': -99999.***REMOVED***
        test = stack_arrays((z, zz***REMOVED***, defaults=defaults***REMOVED***
        control = ma.array([('A', 1, -9999.***REMOVED***, ('B', 2, -9999.***REMOVED***,
                            (
                                'a', 10., 100.***REMOVED***, ('b', 20., 200.***REMOVED***, ('c', 30., 300.***REMOVED******REMOVED***,
                           dtype=[('A', '|S3'***REMOVED***, ('B', float***REMOVED***, ('C', float***REMOVED******REMOVED***,
                           mask=[(0, 0, 1***REMOVED***, (0, 0, 1***REMOVED***,
                                 (0, 0, 0***REMOVED***, (0, 0, 0***REMOVED***, (0, 0, 0***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        assert_equal(test.data, control.data***REMOVED***
        assert_equal(test.mask, control.mask***REMOVED***

    def test_autoconversion(self***REMOVED***:
        # Tests autoconversion
        adtype = [('A', int***REMOVED***, ('B', bool***REMOVED***, ('C', float***REMOVED******REMOVED***
        a = ma.array([(1, 2, 3***REMOVED******REMOVED***, mask=[(0, 1, 0***REMOVED******REMOVED***, dtype=adtype***REMOVED***
        bdtype = [('A', int***REMOVED***, ('B', float***REMOVED***, ('C', float***REMOVED******REMOVED***
        b = ma.array([(4, 5, 6***REMOVED******REMOVED***, dtype=bdtype***REMOVED***
        control = ma.array([(1, 2, 3***REMOVED***, (4, 5, 6***REMOVED******REMOVED***, mask=[(0, 1, 0***REMOVED***, (0, 0, 0***REMOVED******REMOVED***,
                           dtype=bdtype***REMOVED***
        test = stack_arrays((a, b***REMOVED***, autoconvert=True***REMOVED***
        assert_equal(test, control***REMOVED***
        assert_equal(test.mask, control.mask***REMOVED***
        ***REMOVED***
            test = stack_arrays((a, b***REMOVED***, autoconvert=False***REMOVED***
        except TypeError:
            pass
        else:
            raise AssertionError

    def test_checktitles(self***REMOVED***:
        # Test using titles in the field names
        adtype = [(('a', 'A'***REMOVED***, int***REMOVED***, (('b', 'B'***REMOVED***, bool***REMOVED***, (('c', 'C'***REMOVED***, float***REMOVED******REMOVED***
        a = ma.array([(1, 2, 3***REMOVED******REMOVED***, mask=[(0, 1, 0***REMOVED******REMOVED***, dtype=adtype***REMOVED***
        bdtype = [(('a', 'A'***REMOVED***, int***REMOVED***, (('b', 'B'***REMOVED***, bool***REMOVED***, (('c', 'C'***REMOVED***, float***REMOVED******REMOVED***
        b = ma.array([(4, 5, 6***REMOVED******REMOVED***, dtype=bdtype***REMOVED***
        test = stack_arrays((a, b***REMOVED******REMOVED***
        control = ma.array([(1, 2, 3***REMOVED***, (4, 5, 6***REMOVED******REMOVED***, mask=[(0, 1, 0***REMOVED***, (0, 0, 0***REMOVED******REMOVED***,
                           dtype=bdtype***REMOVED***
        assert_equal(test, control***REMOVED***
        assert_equal(test.mask, control.mask***REMOVED***


class TestJoinBy(TestCase***REMOVED***:
    def setUp(self***REMOVED***:
        self.a = np.array(list(zip(np.arange(10***REMOVED***, np.arange(50, 60***REMOVED***,
                                   np.arange(100, 110***REMOVED******REMOVED******REMOVED***,
                          dtype=[('a', int***REMOVED***, ('b', int***REMOVED***, ('c', int***REMOVED******REMOVED******REMOVED***
        self.b = np.array(list(zip(np.arange(5, 15***REMOVED***, np.arange(65, 75***REMOVED***,
                                   np.arange(100, 110***REMOVED******REMOVED******REMOVED***,
                          dtype=[('a', int***REMOVED***, ('b', int***REMOVED***, ('d', int***REMOVED******REMOVED******REMOVED***

    def test_inner_join(self***REMOVED***:
        # Basic test of join_by
        a, b = self.a, self.b

        test = join_by('a', a, b, jointype='inner'***REMOVED***
        control = np.array([(5, 55, 65, 105, 100***REMOVED***, (6, 56, 66, 106, 101***REMOVED***,
                            (7, 57, 67, 107, 102***REMOVED***, (8, 58, 68, 108, 103***REMOVED***,
                            (9, 59, 69, 109, 104***REMOVED******REMOVED***,
                           dtype=[('a', int***REMOVED***, ('b1', int***REMOVED***, ('b2', int***REMOVED***,
                                  ('c', int***REMOVED***, ('d', int***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

    def test_join(self***REMOVED***:
        a, b = self.a, self.b

        # Fixme, this test is broken
        #test = join_by(('a', 'b'***REMOVED***, a, b***REMOVED***
        #control = np.array([(5, 55, 105, 100***REMOVED***, (6, 56, 106, 101***REMOVED***,
        #                    (7, 57, 107, 102***REMOVED***, (8, 58, 108, 103***REMOVED***,
        #                    (9, 59, 109, 104***REMOVED******REMOVED***,
        #                   dtype=[('a', int***REMOVED***, ('b', int***REMOVED***,
        #                          ('c', int***REMOVED***, ('d', int***REMOVED******REMOVED******REMOVED***
        #assert_equal(test, control***REMOVED***

        # Hack to avoid pyflakes unused variable warnings
        join_by(('a', 'b'***REMOVED***, a, b***REMOVED***
        np.array([(5, 55, 105, 100***REMOVED***, (6, 56, 106, 101***REMOVED***,
                  (7, 57, 107, 102***REMOVED***, (8, 58, 108, 103***REMOVED***,
                  (9, 59, 109, 104***REMOVED******REMOVED***,
                  dtype=[('a', int***REMOVED***, ('b', int***REMOVED***,
                         ('c', int***REMOVED***, ('d', int***REMOVED******REMOVED******REMOVED***

    def test_outer_join(self***REMOVED***:
        a, b = self.a, self.b

        test = join_by(('a', 'b'***REMOVED***, a, b, 'outer'***REMOVED***
        control = ma.array([(0, 50, 100, -1***REMOVED***, (1, 51, 101, -1***REMOVED***,
                            (2, 52, 102, -1***REMOVED***, (3, 53, 103, -1***REMOVED***,
                            (4, 54, 104, -1***REMOVED***, (5, 55, 105, -1***REMOVED***,
                            (5, 65, -1, 100***REMOVED***, (6, 56, 106, -1***REMOVED***,
                            (6, 66, -1, 101***REMOVED***, (7, 57, 107, -1***REMOVED***,
                            (7, 67, -1, 102***REMOVED***, (8, 58, 108, -1***REMOVED***,
                            (8, 68, -1, 103***REMOVED***, (9, 59, 109, -1***REMOVED***,
                            (9, 69, -1, 104***REMOVED***, (10, 70, -1, 105***REMOVED***,
                            (11, 71, -1, 106***REMOVED***, (12, 72, -1, 107***REMOVED***,
                            (13, 73, -1, 108***REMOVED***, (14, 74, -1, 109***REMOVED******REMOVED***,
                           mask=[(0, 0, 0, 1***REMOVED***, (0, 0, 0, 1***REMOVED***,
                                 (0, 0, 0, 1***REMOVED***, (0, 0, 0, 1***REMOVED***,
                                 (0, 0, 0, 1***REMOVED***, (0, 0, 0, 1***REMOVED***,
                                 (0, 0, 1, 0***REMOVED***, (0, 0, 0, 1***REMOVED***,
                                 (0, 0, 1, 0***REMOVED***, (0, 0, 0, 1***REMOVED***,
                                 (0, 0, 1, 0***REMOVED***, (0, 0, 0, 1***REMOVED***,
                                 (0, 0, 1, 0***REMOVED***, (0, 0, 0, 1***REMOVED***,
                                 (0, 0, 1, 0***REMOVED***, (0, 0, 1, 0***REMOVED***,
                                 (0, 0, 1, 0***REMOVED***, (0, 0, 1, 0***REMOVED***,
                                 (0, 0, 1, 0***REMOVED***, (0, 0, 1, 0***REMOVED******REMOVED***,
                           dtype=[('a', int***REMOVED***, ('b', int***REMOVED***,
                                  ('c', int***REMOVED***, ('d', int***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

    def test_leftouter_join(self***REMOVED***:
        a, b = self.a, self.b

        test = join_by(('a', 'b'***REMOVED***, a, b, 'leftouter'***REMOVED***
        control = ma.array([(0, 50, 100, -1***REMOVED***, (1, 51, 101, -1***REMOVED***,
                            (2, 52, 102, -1***REMOVED***, (3, 53, 103, -1***REMOVED***,
                            (4, 54, 104, -1***REMOVED***, (5, 55, 105, -1***REMOVED***,
                            (6, 56, 106, -1***REMOVED***, (7, 57, 107, -1***REMOVED***,
                            (8, 58, 108, -1***REMOVED***, (9, 59, 109, -1***REMOVED******REMOVED***,
                           mask=[(0, 0, 0, 1***REMOVED***, (0, 0, 0, 1***REMOVED***,
                                 (0, 0, 0, 1***REMOVED***, (0, 0, 0, 1***REMOVED***,
                                 (0, 0, 0, 1***REMOVED***, (0, 0, 0, 1***REMOVED***,
                                 (0, 0, 0, 1***REMOVED***, (0, 0, 0, 1***REMOVED***,
                                 (0, 0, 0, 1***REMOVED***, (0, 0, 0, 1***REMOVED******REMOVED***,
                           dtype=[('a', int***REMOVED***, ('b', int***REMOVED***, ('c', int***REMOVED***, ('d', int***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***


class TestJoinBy2(TestCase***REMOVED***:
    @classmethod
    def setUp(cls***REMOVED***:
        cls.a = np.array(list(zip(np.arange(10***REMOVED***, np.arange(50, 60***REMOVED***,
                                  np.arange(100, 110***REMOVED******REMOVED******REMOVED***,
                         dtype=[('a', int***REMOVED***, ('b', int***REMOVED***, ('c', int***REMOVED******REMOVED******REMOVED***
        cls.b = np.array(list(zip(np.arange(10***REMOVED***, np.arange(65, 75***REMOVED***,
                                  np.arange(100, 110***REMOVED******REMOVED******REMOVED***,
                         dtype=[('a', int***REMOVED***, ('b', int***REMOVED***, ('d', int***REMOVED******REMOVED******REMOVED***

    def test_no_r1postfix(self***REMOVED***:
        # Basic test of join_by no_r1postfix
        a, b = self.a, self.b

        test = join_by(
            'a', a, b, r1postfix='', r2postfix='2', jointype='inner'***REMOVED***
        control = np.array([(0, 50, 65, 100, 100***REMOVED***, (1, 51, 66, 101, 101***REMOVED***,
                            (2, 52, 67, 102, 102***REMOVED***, (3, 53, 68, 103, 103***REMOVED***,
                            (4, 54, 69, 104, 104***REMOVED***, (5, 55, 70, 105, 105***REMOVED***,
                            (6, 56, 71, 106, 106***REMOVED***, (7, 57, 72, 107, 107***REMOVED***,
                            (8, 58, 73, 108, 108***REMOVED***, (9, 59, 74, 109, 109***REMOVED******REMOVED***,
                           dtype=[('a', int***REMOVED***, ('b', int***REMOVED***, ('b2', int***REMOVED***,
                                  ('c', int***REMOVED***, ('d', int***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

    def test_no_postfix(self***REMOVED***:
        self.assertRaises(ValueError, join_by, 'a', self.a, self.b,
                          r1postfix='', r2postfix=''***REMOVED***

    def test_no_r2postfix(self***REMOVED***:
        # Basic test of join_by no_r2postfix
        a, b = self.a, self.b

        test = join_by(
            'a', a, b, r1postfix='1', r2postfix='', jointype='inner'***REMOVED***
        control = np.array([(0, 50, 65, 100, 100***REMOVED***, (1, 51, 66, 101, 101***REMOVED***,
                            (2, 52, 67, 102, 102***REMOVED***, (3, 53, 68, 103, 103***REMOVED***,
                            (4, 54, 69, 104, 104***REMOVED***, (5, 55, 70, 105, 105***REMOVED***,
                            (6, 56, 71, 106, 106***REMOVED***, (7, 57, 72, 107, 107***REMOVED***,
                            (8, 58, 73, 108, 108***REMOVED***, (9, 59, 74, 109, 109***REMOVED******REMOVED***,
                           dtype=[('a', int***REMOVED***, ('b1', int***REMOVED***, ('b', int***REMOVED***,
                                  ('c', int***REMOVED***, ('d', int***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

    def test_two_keys_two_vars(self***REMOVED***:
        a = np.array(list(zip(np.tile([10, 11***REMOVED***, 5***REMOVED***, np.repeat(np.arange(5***REMOVED***, 2***REMOVED***,
                              np.arange(50, 60***REMOVED***, np.arange(10, 20***REMOVED******REMOVED******REMOVED***,
                     dtype=[('k', int***REMOVED***, ('a', int***REMOVED***, ('b', int***REMOVED***, ('c', int***REMOVED******REMOVED******REMOVED***

        b = np.array(list(zip(np.tile([10, 11***REMOVED***, 5***REMOVED***, np.repeat(np.arange(5***REMOVED***, 2***REMOVED***,
                              np.arange(65, 75***REMOVED***, np.arange(0, 10***REMOVED******REMOVED******REMOVED***,
                     dtype=[('k', int***REMOVED***, ('a', int***REMOVED***, ('b', int***REMOVED***, ('c', int***REMOVED******REMOVED******REMOVED***

        control = np.array([(10, 0, 50, 65, 10, 0***REMOVED***, (11, 0, 51, 66, 11, 1***REMOVED***,
                            (10, 1, 52, 67, 12, 2***REMOVED***, (11, 1, 53, 68, 13, 3***REMOVED***,
                            (10, 2, 54, 69, 14, 4***REMOVED***, (11, 2, 55, 70, 15, 5***REMOVED***,
                            (10, 3, 56, 71, 16, 6***REMOVED***, (11, 3, 57, 72, 17, 7***REMOVED***,
                            (10, 4, 58, 73, 18, 8***REMOVED***, (11, 4, 59, 74, 19, 9***REMOVED******REMOVED***,
                           dtype=[('k', int***REMOVED***, ('a', int***REMOVED***, ('b1', int***REMOVED***,
                                  ('b2', int***REMOVED***, ('c1', int***REMOVED***, ('c2', int***REMOVED******REMOVED******REMOVED***
        test = join_by(
            ['a', 'k'***REMOVED***, a, b, r1postfix='1', r2postfix='2', jointype='inner'***REMOVED***
        assert_equal(test.dtype, control.dtype***REMOVED***
        assert_equal(test, control***REMOVED***

class TestAppendFieldsObj(TestCase***REMOVED***:
    ***REMOVED***
    Test append_fields with arrays containing objects
    ***REMOVED***
    # https://github.com/numpy/numpy/issues/2346

    def setUp(self***REMOVED***:
        from datetime import date
        self.data = dict(obj=date(2000, 1, 1***REMOVED******REMOVED***

    def test_append_to_objects(self***REMOVED***:
        "Test append_fields when the base array contains objects"
        obj = self.data['obj'***REMOVED***
        x = np.array([(obj, 1.***REMOVED***, (obj, 2.***REMOVED******REMOVED***,
                      dtype=[('A', object***REMOVED***, ('B', float***REMOVED******REMOVED******REMOVED***
        y = np.array([10, 20***REMOVED***, dtype=int***REMOVED***
        test = append_fields(x, 'C', data=y, usemask=False***REMOVED***
        control = np.array([(obj, 1.0, 10***REMOVED***, (obj, 2.0, 20***REMOVED******REMOVED***,
                           dtype=[('A', object***REMOVED***, ('B', float***REMOVED***, ('C', int***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

if __name__ == '__main__':
    run_module_suite(***REMOVED***
