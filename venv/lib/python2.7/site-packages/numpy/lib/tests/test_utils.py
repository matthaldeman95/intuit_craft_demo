from __future__ import division, absolute_import, print_function

import sys
from numpy.core import arange
from numpy.testing import (
    run_module_suite, assert_, assert_equal, dec
    ***REMOVED***
from numpy.lib import deprecate
import numpy.lib.utils as utils

if sys.version_info[0***REMOVED*** >= 3:
    from io import StringIO
else:
    from StringIO import StringIO


@dec.skipif(sys.flags.optimize == 2***REMOVED***
def test_lookfor(***REMOVED***:
    out = StringIO(***REMOVED***
    utils.lookfor('eigenvalue', module='numpy', output=out,
                  import_modules=False***REMOVED***
    out = out.getvalue(***REMOVED***
    assert_('numpy.linalg.eig' in out***REMOVED***


@deprecate
def old_func(self, x***REMOVED***:
    return x


@deprecate(message="Rather use new_func2"***REMOVED***
def old_func2(self, x***REMOVED***:
    return x


def old_func3(self, x***REMOVED***:
    return x
new_func3 = deprecate(old_func3, old_name="old_func3", new_name="new_func3"***REMOVED***


def test_deprecate_decorator(***REMOVED***:
    assert_('deprecated' in old_func.__doc__***REMOVED***


def test_deprecate_decorator_message(***REMOVED***:
    assert_('Rather use new_func2' in old_func2.__doc__***REMOVED***


def test_deprecate_fn(***REMOVED***:
    assert_('old_func3' in new_func3.__doc__***REMOVED***
    assert_('new_func3' in new_func3.__doc__***REMOVED***


def test_safe_eval_nameconstant(***REMOVED***:
    # Test if safe_eval supports Python 3.4 _ast.NameConstant
    utils.safe_eval('None'***REMOVED***


def test_byte_bounds(***REMOVED***:
    a = arange(12***REMOVED***.reshape(3, 4***REMOVED***
    low, high = utils.byte_bounds(a***REMOVED***
    assert_equal(high - low, a.size * a.itemsize***REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
