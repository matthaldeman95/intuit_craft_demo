from __future__ import division, absolute_import, print_function

import numpy as np
from numpy.testing import (
    run_module_suite, TestCase, assert_, assert_almost_equal,
    assert_allclose
    ***REMOVED***


class TestFinancial(TestCase***REMOVED***:
    def test_rate(self***REMOVED***:
        assert_almost_equal(np.rate(10, 0, -3500, 10000***REMOVED***,
                            0.1107, 4***REMOVED***

    def test_irr(self***REMOVED***:
        v = [-150000, 15000, 25000, 35000, 45000, 60000***REMOVED***
        assert_almost_equal(np.irr(v***REMOVED***, 0.0524, 2***REMOVED***
        v = [-100, 0, 0, 74***REMOVED***
        assert_almost_equal(np.irr(v***REMOVED***, -0.0955, 2***REMOVED***
        v = [-100, 39, 59, 55, 20***REMOVED***
        assert_almost_equal(np.irr(v***REMOVED***, 0.28095, 2***REMOVED***
        v = [-100, 100, 0, -7***REMOVED***
        assert_almost_equal(np.irr(v***REMOVED***, -0.0833, 2***REMOVED***
        v = [-100, 100, 0, 7***REMOVED***
        assert_almost_equal(np.irr(v***REMOVED***, 0.06206, 2***REMOVED***
        v = [-5, 10.5, 1, -8, 1***REMOVED***
        assert_almost_equal(np.irr(v***REMOVED***, 0.0886, 2***REMOVED***

    def test_pv(self***REMOVED***:
        assert_almost_equal(np.pv(0.07, 20, 12000, 0***REMOVED***, -127128.17, 2***REMOVED***

    def test_fv(self***REMOVED***:
        assert_almost_equal(np.fv(0.075, 20, -2000, 0, 0***REMOVED***, 86609.36, 2***REMOVED***

    def test_pmt(self***REMOVED***:
        res = np.pmt(0.08/12, 5*12, 15000***REMOVED***
        tgt = -304.145914
        assert_allclose(res, tgt***REMOVED***
        # Test the edge case where rate == 0.0
        res = np.pmt(0.0, 5*12, 15000***REMOVED***
        tgt = -250.0
        assert_allclose(res, tgt***REMOVED***
        # Test the case where we use broadcast and
        # the arguments passed in are arrays.
        res = np.pmt([[0.0, 0.8***REMOVED***,[0.3, 0.8***REMOVED******REMOVED***,[12, 3***REMOVED***,[2000, 20000***REMOVED******REMOVED***
        tgt = np.array([[-166.66667, -19311.258***REMOVED***,[-626.90814, -19311.258***REMOVED******REMOVED******REMOVED***
        assert_allclose(res, tgt***REMOVED***

    def test_ppmt(self***REMOVED***:
        np.round(np.ppmt(0.1/12, 1, 60, 55000***REMOVED***, 2***REMOVED*** == 710.25

    def test_ipmt(self***REMOVED***:
        np.round(np.ipmt(0.1/12, 1, 24, 2000***REMOVED***, 2***REMOVED*** == 16.67

    def test_nper(self***REMOVED***:
        assert_almost_equal(np.nper(0.075, -2000, 0, 100000.***REMOVED***,
                            21.54, 2***REMOVED***

    def test_nper2(self***REMOVED***:
        assert_almost_equal(np.nper(0.0, -2000, 0, 100000.***REMOVED***,
                            50.0, 1***REMOVED***

    def test_npv(self***REMOVED***:
        assert_almost_equal(
            np.npv(0.05, [-15000, 1500, 2500, 3500, 4500, 6000***REMOVED******REMOVED***,
            122.89, 2***REMOVED***

    def test_mirr(self***REMOVED***:
        val = [-4500, -800, 800, 800, 600, 600, 800, 800, 700, 3000***REMOVED***
        assert_almost_equal(np.mirr(val, 0.08, 0.055***REMOVED***, 0.0666, 4***REMOVED***

        val = [-120000, 39000, 30000, 21000, 37000, 46000***REMOVED***
        assert_almost_equal(np.mirr(val, 0.10, 0.12***REMOVED***, 0.126094, 6***REMOVED***

        val = [100, 200, -50, 300, -200***REMOVED***
        assert_almost_equal(np.mirr(val, 0.05, 0.06***REMOVED***, 0.3428, 4***REMOVED***

        val = [39000, 30000, 21000, 37000, 46000***REMOVED***
        assert_(np.isnan(np.mirr(val, 0.10, 0.12***REMOVED******REMOVED******REMOVED***

    def test_when(self***REMOVED***:
        #begin
        assert_almost_equal(np.rate(10, 20, -3500, 10000, 1***REMOVED***,
                            np.rate(10, 20, -3500, 10000, 'begin'***REMOVED***, 4***REMOVED***
        #end
        assert_almost_equal(np.rate(10, 20, -3500, 10000***REMOVED***,
                            np.rate(10, 20, -3500, 10000, 'end'***REMOVED***, 4***REMOVED***
        assert_almost_equal(np.rate(10, 20, -3500, 10000, 0***REMOVED***,
                            np.rate(10, 20, -3500, 10000, 'end'***REMOVED***, 4***REMOVED***

        # begin
        assert_almost_equal(np.pv(0.07, 20, 12000, 0, 1***REMOVED***,
                            np.pv(0.07, 20, 12000, 0, 'begin'***REMOVED***, 2***REMOVED***
        # end
        assert_almost_equal(np.pv(0.07, 20, 12000, 0***REMOVED***,
                            np.pv(0.07, 20, 12000, 0, 'end'***REMOVED***, 2***REMOVED***
        assert_almost_equal(np.pv(0.07, 20, 12000, 0, 0***REMOVED***,
                            np.pv(0.07, 20, 12000, 0, 'end'***REMOVED***, 2***REMOVED***

        # begin
        assert_almost_equal(np.fv(0.075, 20, -2000, 0, 1***REMOVED***,
                            np.fv(0.075, 20, -2000, 0, 'begin'***REMOVED***, 4***REMOVED***
        # end
        assert_almost_equal(np.fv(0.075, 20, -2000, 0***REMOVED***,
                            np.fv(0.075, 20, -2000, 0, 'end'***REMOVED***, 4***REMOVED***
        assert_almost_equal(np.fv(0.075, 20, -2000, 0, 0***REMOVED***,
                            np.fv(0.075, 20, -2000, 0, 'end'***REMOVED***, 4***REMOVED***

        # begin
        assert_almost_equal(np.pmt(0.08/12, 5*12, 15000., 0, 1***REMOVED***,
                            np.pmt(0.08/12, 5*12, 15000., 0, 'begin'***REMOVED***, 4***REMOVED***
        # end
        assert_almost_equal(np.pmt(0.08/12, 5*12, 15000., 0***REMOVED***,
                            np.pmt(0.08/12, 5*12, 15000., 0, 'end'***REMOVED***, 4***REMOVED***
        assert_almost_equal(np.pmt(0.08/12, 5*12, 15000., 0, 0***REMOVED***,
                            np.pmt(0.08/12, 5*12, 15000., 0, 'end'***REMOVED***, 4***REMOVED***

        # begin
        assert_almost_equal(np.ppmt(0.1/12, 1, 60, 55000, 0, 1***REMOVED***,
                            np.ppmt(0.1/12, 1, 60, 55000, 0, 'begin'***REMOVED***, 4***REMOVED***
        # end
        assert_almost_equal(np.ppmt(0.1/12, 1, 60, 55000, 0***REMOVED***,
                            np.ppmt(0.1/12, 1, 60, 55000, 0, 'end'***REMOVED***, 4***REMOVED***
        assert_almost_equal(np.ppmt(0.1/12, 1, 60, 55000, 0, 0***REMOVED***,
                            np.ppmt(0.1/12, 1, 60, 55000, 0, 'end'***REMOVED***, 4***REMOVED***

        # begin
        assert_almost_equal(np.ipmt(0.1/12, 1, 24, 2000, 0, 1***REMOVED***,
                            np.ipmt(0.1/12, 1, 24, 2000, 0, 'begin'***REMOVED***, 4***REMOVED***
        # end
        assert_almost_equal(np.ipmt(0.1/12, 1, 24, 2000, 0***REMOVED***,
                            np.ipmt(0.1/12, 1, 24, 2000, 0, 'end'***REMOVED***, 4***REMOVED***
        assert_almost_equal(np.ipmt(0.1/12, 1, 24, 2000, 0, 0***REMOVED***,
                            np.ipmt(0.1/12, 1, 24, 2000, 0, 'end'***REMOVED***, 4***REMOVED***

        # begin
        assert_almost_equal(np.nper(0.075, -2000, 0, 100000., 1***REMOVED***,
                            np.nper(0.075, -2000, 0, 100000., 'begin'***REMOVED***, 4***REMOVED***
        # end
        assert_almost_equal(np.nper(0.075, -2000, 0, 100000.***REMOVED***,
                            np.nper(0.075, -2000, 0, 100000., 'end'***REMOVED***, 4***REMOVED***
        assert_almost_equal(np.nper(0.075, -2000, 0, 100000., 0***REMOVED***,
                            np.nper(0.075, -2000, 0, 100000., 'end'***REMOVED***, 4***REMOVED***

    def test_broadcast(self***REMOVED***:
        assert_almost_equal(np.nper(0.075, -2000, 0, 100000., [0, 1***REMOVED******REMOVED***,
                            [21.5449442, 20.76156441***REMOVED***, 4***REMOVED***

        assert_almost_equal(np.ipmt(0.1/12, list(range(5***REMOVED******REMOVED***, 24, 2000***REMOVED***,
                            [-17.29165168, -16.66666667, -16.03647345,
                                -15.40102862, -14.76028842***REMOVED***, 4***REMOVED***

        assert_almost_equal(np.ppmt(0.1/12, list(range(5***REMOVED******REMOVED***, 24, 2000***REMOVED***,
                            [-74.998201, -75.62318601, -76.25337923,
                                -76.88882405, -77.52956425***REMOVED***, 4***REMOVED***

        assert_almost_equal(np.ppmt(0.1/12, list(range(5***REMOVED******REMOVED***, 24, 2000, 0,
                                    [0, 0, 1, 'end', 'begin'***REMOVED******REMOVED***,
                            [-74.998201, -75.62318601, -75.62318601,
                                -76.88882405, -76.88882405***REMOVED***, 4***REMOVED***

if __name__ == "__main__":
    run_module_suite(***REMOVED***
