from __future__ import division, absolute_import, print_function

import numpy.core as nx
import numpy.lib.ufunclike as ufl
from numpy.testing import (
    run_module_suite, TestCase, assert_, assert_equal, assert_array_equal
    ***REMOVED***


class TestUfunclike(TestCase***REMOVED***:

    def test_isposinf(self***REMOVED***:
        a = nx.array([nx.inf, -nx.inf, nx.nan, 0.0, 3.0, -3.0***REMOVED******REMOVED***
        out = nx.zeros(a.shape, bool***REMOVED***
        tgt = nx.array([True, False, False, False, False, False***REMOVED******REMOVED***

        res = ufl.isposinf(a***REMOVED***
        assert_equal(res, tgt***REMOVED***
        res = ufl.isposinf(a, out***REMOVED***
        assert_equal(res, tgt***REMOVED***
        assert_equal(out, tgt***REMOVED***

    def test_isneginf(self***REMOVED***:
        a = nx.array([nx.inf, -nx.inf, nx.nan, 0.0, 3.0, -3.0***REMOVED******REMOVED***
        out = nx.zeros(a.shape, bool***REMOVED***
        tgt = nx.array([False, True, False, False, False, False***REMOVED******REMOVED***

        res = ufl.isneginf(a***REMOVED***
        assert_equal(res, tgt***REMOVED***
        res = ufl.isneginf(a, out***REMOVED***
        assert_equal(res, tgt***REMOVED***
        assert_equal(out, tgt***REMOVED***

    def test_fix(self***REMOVED***:
        a = nx.array([[1.0, 1.1, 1.5, 1.8***REMOVED***, [-1.0, -1.1, -1.5, -1.8***REMOVED******REMOVED******REMOVED***
        out = nx.zeros(a.shape, float***REMOVED***
        tgt = nx.array([[1., 1., 1., 1.***REMOVED***, [-1., -1., -1., -1.***REMOVED******REMOVED******REMOVED***

        res = ufl.fix(a***REMOVED***
        assert_equal(res, tgt***REMOVED***
        res = ufl.fix(a, out***REMOVED***
        assert_equal(res, tgt***REMOVED***
        assert_equal(out, tgt***REMOVED***
        assert_equal(ufl.fix(3.14***REMOVED***, 3***REMOVED***

    def test_fix_with_subclass(self***REMOVED***:
        class MyArray(nx.ndarray***REMOVED***:
            def __new__(cls, data, metadata=None***REMOVED***:
                res = nx.array(data, copy=True***REMOVED***.view(cls***REMOVED***
                res.metadata = metadata
                return res

            def __array_wrap__(self, obj, context=None***REMOVED***:
                obj.metadata = self.metadata
                return obj

        a = nx.array([1.1, -1.1***REMOVED******REMOVED***
        m = MyArray(a, metadata='foo'***REMOVED***
        f = ufl.fix(m***REMOVED***
        assert_array_equal(f, nx.array([1, -1***REMOVED******REMOVED******REMOVED***
        assert_(isinstance(f, MyArray***REMOVED******REMOVED***
        assert_equal(f.metadata, 'foo'***REMOVED***

if __name__ == "__main__":
    run_module_suite(***REMOVED***
