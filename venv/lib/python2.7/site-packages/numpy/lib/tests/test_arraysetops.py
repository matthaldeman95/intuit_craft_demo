***REMOVED***Test functions for 1D array set operations.

***REMOVED***
from __future__ import division, absolute_import, print_function

import numpy as np
from numpy.testing import (
    run_module_suite, TestCase, assert_array_equal, assert_equal
    ***REMOVED***
from numpy.lib.arraysetops import (
    ediff1d, intersect1d, setxor1d, union1d, setdiff1d, unique, in1d
    ***REMOVED***


class TestSetOps(TestCase***REMOVED***:

    def test_unique(self***REMOVED***:

        def check_all(a, b, i1, i2, c, dt***REMOVED***:
            base_msg = 'check {0***REMOVED*** failed for type {1***REMOVED***'

            msg = base_msg.format('values', dt***REMOVED***
            v = unique(a***REMOVED***
            assert_array_equal(v, b, msg***REMOVED***

            msg = base_msg.format('return_index', dt***REMOVED***
            v, j = unique(a, 1, 0, 0***REMOVED***
            assert_array_equal(v, b, msg***REMOVED***
            assert_array_equal(j, i1, msg***REMOVED***

            msg = base_msg.format('return_inverse', dt***REMOVED***
            v, j = unique(a, 0, 1, 0***REMOVED***
            assert_array_equal(v, b, msg***REMOVED***
            assert_array_equal(j, i2, msg***REMOVED***

            msg = base_msg.format('return_counts', dt***REMOVED***
            v, j = unique(a, 0, 0, 1***REMOVED***
            assert_array_equal(v, b, msg***REMOVED***
            assert_array_equal(j, c, msg***REMOVED***

            msg = base_msg.format('return_index and return_inverse', dt***REMOVED***
            v, j1, j2 = unique(a, 1, 1, 0***REMOVED***
            assert_array_equal(v, b, msg***REMOVED***
            assert_array_equal(j1, i1, msg***REMOVED***
            assert_array_equal(j2, i2, msg***REMOVED***

            msg = base_msg.format('return_index and return_counts', dt***REMOVED***
            v, j1, j2 = unique(a, 1, 0, 1***REMOVED***
            assert_array_equal(v, b, msg***REMOVED***
            assert_array_equal(j1, i1, msg***REMOVED***
            assert_array_equal(j2, c, msg***REMOVED***

            msg = base_msg.format('return_inverse and return_counts', dt***REMOVED***
            v, j1, j2 = unique(a, 0, 1, 1***REMOVED***
            assert_array_equal(v, b, msg***REMOVED***
            assert_array_equal(j1, i2, msg***REMOVED***
            assert_array_equal(j2, c, msg***REMOVED***

            msg = base_msg.format(('return_index, return_inverse '
                                   'and return_counts'***REMOVED***, dt***REMOVED***
            v, j1, j2, j3 = unique(a, 1, 1, 1***REMOVED***
            assert_array_equal(v, b, msg***REMOVED***
            assert_array_equal(j1, i1, msg***REMOVED***
            assert_array_equal(j2, i2, msg***REMOVED***
            assert_array_equal(j3, c, msg***REMOVED***

        a = [5, 7, 1, 2, 1, 5, 7***REMOVED****10
        b = [1, 2, 5, 7***REMOVED***
        i1 = [2, 3, 0, 1***REMOVED***
        i2 = [2, 3, 0, 1, 0, 2, 3***REMOVED****10
        c = np.multiply([2, 1, 2, 2***REMOVED***, 10***REMOVED***

        # test for numeric arrays
        types = [***REMOVED***
        types.extend(np.typecodes['AllInteger'***REMOVED******REMOVED***
        types.extend(np.typecodes['AllFloat'***REMOVED******REMOVED***
        types.append('datetime64[D***REMOVED***'***REMOVED***
        types.append('timedelta64[D***REMOVED***'***REMOVED***
        for dt in types:
            aa = np.array(a, dt***REMOVED***
            bb = np.array(b, dt***REMOVED***
            check_all(aa, bb, i1, i2, c, dt***REMOVED***

        # test for object arrays
        dt = 'O'
        aa = np.empty(len(a***REMOVED***, dt***REMOVED***
        aa[:***REMOVED*** = a
        bb = np.empty(len(b***REMOVED***, dt***REMOVED***
        bb[:***REMOVED*** = b
        check_all(aa, bb, i1, i2, c, dt***REMOVED***

        # test for structured arrays
        dt = [('', 'i'***REMOVED***, ('', 'i'***REMOVED******REMOVED***
        aa = np.array(list(zip(a, a***REMOVED******REMOVED***, dt***REMOVED***
        bb = np.array(list(zip(b, b***REMOVED******REMOVED***, dt***REMOVED***
        check_all(aa, bb, i1, i2, c, dt***REMOVED***

        # test for ticket #2799
        aa = [1. + 0.j, 1 - 1.j, 1***REMOVED***
        assert_array_equal(np.unique(aa***REMOVED***, [1. - 1.j, 1. + 0.j***REMOVED******REMOVED***

        # test for ticket #4785
        a = [(1, 2***REMOVED***, (1, 2***REMOVED***, (2, 3***REMOVED******REMOVED***
        unq = [1, 2, 3***REMOVED***
        inv = [0, 1, 0, 1, 1, 2***REMOVED***
        a1 = unique(a***REMOVED***
        assert_array_equal(a1, unq***REMOVED***
        a2, a2_inv = unique(a, return_inverse=True***REMOVED***
        assert_array_equal(a2, unq***REMOVED***
        assert_array_equal(a2_inv, inv***REMOVED***

        # test for chararrays with return_inverse (gh-5099***REMOVED***
        a = np.chararray(5***REMOVED***
        a[...***REMOVED*** = ''
        a2, a2_inv = np.unique(a, return_inverse=True***REMOVED***
        assert_array_equal(a2_inv, np.zeros(5***REMOVED******REMOVED***

    def test_intersect1d(self***REMOVED***:
        # unique inputs
        a = np.array([5, 7, 1, 2***REMOVED******REMOVED***
        b = np.array([2, 4, 3, 1, 5***REMOVED******REMOVED***

        ec = np.array([1, 2, 5***REMOVED******REMOVED***
        c = intersect1d(a, b, assume_unique=True***REMOVED***
        assert_array_equal(c, ec***REMOVED***

        # non-unique inputs
        a = np.array([5, 5, 7, 1, 2***REMOVED******REMOVED***
        b = np.array([2, 1, 4, 3, 3, 1, 5***REMOVED******REMOVED***

        ed = np.array([1, 2, 5***REMOVED******REMOVED***
        c = intersect1d(a, b***REMOVED***
        assert_array_equal(c, ed***REMOVED***

        assert_array_equal([***REMOVED***, intersect1d([***REMOVED***, [***REMOVED******REMOVED******REMOVED***

    def test_setxor1d(self***REMOVED***:
        a = np.array([5, 7, 1, 2***REMOVED******REMOVED***
        b = np.array([2, 4, 3, 1, 5***REMOVED******REMOVED***

        ec = np.array([3, 4, 7***REMOVED******REMOVED***
        c = setxor1d(a, b***REMOVED***
        assert_array_equal(c, ec***REMOVED***

        a = np.array([1, 2, 3***REMOVED******REMOVED***
        b = np.array([6, 5, 4***REMOVED******REMOVED***

        ec = np.array([1, 2, 3, 4, 5, 6***REMOVED******REMOVED***
        c = setxor1d(a, b***REMOVED***
        assert_array_equal(c, ec***REMOVED***

        a = np.array([1, 8, 2, 3***REMOVED******REMOVED***
        b = np.array([6, 5, 4, 8***REMOVED******REMOVED***

        ec = np.array([1, 2, 3, 4, 5, 6***REMOVED******REMOVED***
        c = setxor1d(a, b***REMOVED***
        assert_array_equal(c, ec***REMOVED***

        assert_array_equal([***REMOVED***, setxor1d([***REMOVED***, [***REMOVED******REMOVED******REMOVED***

    def test_ediff1d(self***REMOVED***:
        zero_elem = np.array([***REMOVED******REMOVED***
        one_elem = np.array([1***REMOVED******REMOVED***
        two_elem = np.array([1, 2***REMOVED******REMOVED***

        assert_array_equal([***REMOVED***, ediff1d(zero_elem***REMOVED******REMOVED***
        assert_array_equal([0***REMOVED***, ediff1d(zero_elem, to_begin=0***REMOVED******REMOVED***
        assert_array_equal([0***REMOVED***, ediff1d(zero_elem, to_end=0***REMOVED******REMOVED***
        assert_array_equal([-1, 0***REMOVED***, ediff1d(zero_elem, to_begin=-1, to_end=0***REMOVED******REMOVED***
        assert_array_equal([***REMOVED***, ediff1d(one_elem***REMOVED******REMOVED***
        assert_array_equal([1***REMOVED***, ediff1d(two_elem***REMOVED******REMOVED***

    def test_in1d(self***REMOVED***:
        # we use two different sizes for the b array here to test the
        # two different paths in in1d(***REMOVED***.
        for mult in (1, 10***REMOVED***:
            # One check without np.array, to make sure lists are handled correct
            a = [5, 7, 1, 2***REMOVED***
            b = [2, 4, 3, 1, 5***REMOVED*** * mult
            ec = np.array([True, False, True, True***REMOVED******REMOVED***
            c = in1d(a, b, assume_unique=True***REMOVED***
            assert_array_equal(c, ec***REMOVED***

            a[0***REMOVED*** = 8
            ec = np.array([False, False, True, True***REMOVED******REMOVED***
            c = in1d(a, b, assume_unique=True***REMOVED***
            assert_array_equal(c, ec***REMOVED***

            a[0***REMOVED***, a[3***REMOVED*** = 4, 8
            ec = np.array([True, False, True, False***REMOVED******REMOVED***
            c = in1d(a, b, assume_unique=True***REMOVED***
            assert_array_equal(c, ec***REMOVED***

            a = np.array([5, 4, 5, 3, 4, 4, 3, 4, 3, 5, 2, 1, 5, 5***REMOVED******REMOVED***
            b = [2, 3, 4***REMOVED*** * mult
            ec = [False, True, False, True, True, True, True, True, True, False,
                  True, False, False, False***REMOVED***
            c = in1d(a, b***REMOVED***
            assert_array_equal(c, ec***REMOVED***

            b = b + [5, 5, 4***REMOVED*** * mult
            ec = [True, True, True, True, True, True, True, True, True, True,
                  True, False, True, True***REMOVED***
            c = in1d(a, b***REMOVED***
            assert_array_equal(c, ec***REMOVED***

            a = np.array([5, 7, 1, 2***REMOVED******REMOVED***
            b = np.array([2, 4, 3, 1, 5***REMOVED*** * mult***REMOVED***
            ec = np.array([True, False, True, True***REMOVED******REMOVED***
            c = in1d(a, b***REMOVED***
            assert_array_equal(c, ec***REMOVED***

            a = np.array([5, 7, 1, 1, 2***REMOVED******REMOVED***
            b = np.array([2, 4, 3, 3, 1, 5***REMOVED*** * mult***REMOVED***
            ec = np.array([True, False, True, True, True***REMOVED******REMOVED***
            c = in1d(a, b***REMOVED***
            assert_array_equal(c, ec***REMOVED***

            a = np.array([5, 5***REMOVED******REMOVED***
            b = np.array([2, 2***REMOVED*** * mult***REMOVED***
            ec = np.array([False, False***REMOVED******REMOVED***
            c = in1d(a, b***REMOVED***
            assert_array_equal(c, ec***REMOVED***

        a = np.array([5***REMOVED******REMOVED***
        b = np.array([2***REMOVED******REMOVED***
        ec = np.array([False***REMOVED******REMOVED***
        c = in1d(a, b***REMOVED***
        assert_array_equal(c, ec***REMOVED***

        assert_array_equal(in1d([***REMOVED***, [***REMOVED******REMOVED***, [***REMOVED******REMOVED***

    def test_in1d_char_array(self***REMOVED***:
        a = np.array(['a', 'b', 'c', 'd', 'e', 'c', 'e', 'b'***REMOVED******REMOVED***
        b = np.array(['a', 'c'***REMOVED******REMOVED***

        ec = np.array([True, False, True, False, False, True, False, False***REMOVED******REMOVED***
        c = in1d(a, b***REMOVED***

        assert_array_equal(c, ec***REMOVED***

    def test_in1d_invert(self***REMOVED***:
        "Test in1d's invert parameter"
        # We use two different sizes for the b array here to test the
        # two different paths in in1d(***REMOVED***.
        for mult in (1, 10***REMOVED***:
            a = np.array([5, 4, 5, 3, 4, 4, 3, 4, 3, 5, 2, 1, 5, 5***REMOVED******REMOVED***
            b = [2, 3, 4***REMOVED*** * mult
            assert_array_equal(np.invert(in1d(a, b***REMOVED******REMOVED***, in1d(a, b, invert=True***REMOVED******REMOVED***

    def test_in1d_ravel(self***REMOVED***:
        # Test that in1d ravels its input arrays. This is not documented
        # behavior however. The test is to ensure consistentency.
        a = np.arange(6***REMOVED***.reshape(2, 3***REMOVED***
        b = np.arange(3, 9***REMOVED***.reshape(3, 2***REMOVED***
        long_b = np.arange(3, 63***REMOVED***.reshape(30, 2***REMOVED***
        ec = np.array([False, False, False, True, True, True***REMOVED******REMOVED***

        assert_array_equal(in1d(a, b, assume_unique=True***REMOVED***, ec***REMOVED***
        assert_array_equal(in1d(a, b, assume_unique=False***REMOVED***, ec***REMOVED***
        assert_array_equal(in1d(a, long_b, assume_unique=True***REMOVED***, ec***REMOVED***
        assert_array_equal(in1d(a, long_b, assume_unique=False***REMOVED***, ec***REMOVED***

    def test_union1d(self***REMOVED***:
        a = np.array([5, 4, 7, 1, 2***REMOVED******REMOVED***
        b = np.array([2, 4, 3, 3, 2, 1, 5***REMOVED******REMOVED***

        ec = np.array([1, 2, 3, 4, 5, 7***REMOVED******REMOVED***
        c = union1d(a, b***REMOVED***
        assert_array_equal(c, ec***REMOVED***

        assert_array_equal([***REMOVED***, union1d([***REMOVED***, [***REMOVED******REMOVED******REMOVED***

    def test_setdiff1d(self***REMOVED***:
        a = np.array([6, 5, 4, 7, 1, 2, 7, 4***REMOVED******REMOVED***
        b = np.array([2, 4, 3, 3, 2, 1, 5***REMOVED******REMOVED***

        ec = np.array([6, 7***REMOVED******REMOVED***
        c = setdiff1d(a, b***REMOVED***
        assert_array_equal(c, ec***REMOVED***

        a = np.arange(21***REMOVED***
        b = np.arange(19***REMOVED***
        ec = np.array([19, 20***REMOVED******REMOVED***
        c = setdiff1d(a, b***REMOVED***
        assert_array_equal(c, ec***REMOVED***

        assert_array_equal([***REMOVED***, setdiff1d([***REMOVED***, [***REMOVED******REMOVED******REMOVED***
        a = np.array((***REMOVED***, np.uint32***REMOVED***
        assert_equal(setdiff1d(a, [***REMOVED******REMOVED***.dtype, np.uint32***REMOVED***

    def test_setdiff1d_char_array(self***REMOVED***:
        a = np.array(['a', 'b', 'c'***REMOVED******REMOVED***
        b = np.array(['a', 'b', 's'***REMOVED******REMOVED***
        assert_array_equal(setdiff1d(a, b***REMOVED***, np.array(['c'***REMOVED******REMOVED******REMOVED***

    def test_manyways(self***REMOVED***:
        a = np.array([5, 7, 1, 2, 8***REMOVED******REMOVED***
        b = np.array([9, 8, 2, 4, 3, 1, 5***REMOVED******REMOVED***

        c1 = setxor1d(a, b***REMOVED***
        aux1 = intersect1d(a, b***REMOVED***
        aux2 = union1d(a, b***REMOVED***
        c2 = setdiff1d(aux2, aux1***REMOVED***
        assert_array_equal(c1, c2***REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
