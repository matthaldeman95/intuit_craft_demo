from __future__ import division, absolute_import, print_function

import numpy as np
from numpy.testing import (
    run_module_suite, TestCase, assert_, assert_equal, assert_array_equal,
    assert_almost_equal, assert_array_almost_equal, assert_raises
    ***REMOVED***
from numpy.lib.index_tricks import (
    mgrid, ndenumerate, fill_diagonal, diag_indices, diag_indices_from,
    index_exp, ndindex, r_, s_, ix_
    ***REMOVED***


class TestRavelUnravelIndex(TestCase***REMOVED***:
    def test_basic(self***REMOVED***:
        assert_equal(np.unravel_index(2, (2, 2***REMOVED******REMOVED***, (1, 0***REMOVED******REMOVED***
        assert_equal(np.ravel_multi_index((1, 0***REMOVED***, (2, 2***REMOVED******REMOVED***, 2***REMOVED***
        assert_equal(np.unravel_index(254, (17, 94***REMOVED******REMOVED***, (2, 66***REMOVED******REMOVED***
        assert_equal(np.ravel_multi_index((2, 66***REMOVED***, (17, 94***REMOVED******REMOVED***, 254***REMOVED***
        assert_raises(ValueError, np.unravel_index, -1, (2, 2***REMOVED******REMOVED***
        assert_raises(TypeError, np.unravel_index, 0.5, (2, 2***REMOVED******REMOVED***
        assert_raises(ValueError, np.unravel_index, 4, (2, 2***REMOVED******REMOVED***
        assert_raises(ValueError, np.ravel_multi_index, (-3, 1***REMOVED***, (2, 2***REMOVED******REMOVED***
        assert_raises(ValueError, np.ravel_multi_index, (2, 1***REMOVED***, (2, 2***REMOVED******REMOVED***
        assert_raises(ValueError, np.ravel_multi_index, (0, -3***REMOVED***, (2, 2***REMOVED******REMOVED***
        assert_raises(ValueError, np.ravel_multi_index, (0, 2***REMOVED***, (2, 2***REMOVED******REMOVED***
        assert_raises(TypeError, np.ravel_multi_index, (0.1, 0.***REMOVED***, (2, 2***REMOVED******REMOVED***

        assert_equal(np.unravel_index((2*3 + 1***REMOVED****6 + 4, (4, 3, 6***REMOVED******REMOVED***, [2, 1, 4***REMOVED******REMOVED***
        assert_equal(
            np.ravel_multi_index([2, 1, 4***REMOVED***, (4, 3, 6***REMOVED******REMOVED***, (2*3 + 1***REMOVED****6 + 4***REMOVED***

        arr = np.array([[3, 6, 6***REMOVED***, [4, 5, 1***REMOVED******REMOVED******REMOVED***
        assert_equal(np.ravel_multi_index(arr, (7, 6***REMOVED******REMOVED***, [22, 41, 37***REMOVED******REMOVED***
        assert_equal(
            np.ravel_multi_index(arr, (7, 6***REMOVED***, order='F'***REMOVED***, [31, 41, 13***REMOVED******REMOVED***
        assert_equal(
            np.ravel_multi_index(arr, (4, 6***REMOVED***, mode='clip'***REMOVED***, [22, 23, 19***REMOVED******REMOVED***
        assert_equal(np.ravel_multi_index(arr, (4, 4***REMOVED***, mode=('clip', 'wrap'***REMOVED******REMOVED***,
                     [12, 13, 13***REMOVED******REMOVED***
        assert_equal(np.ravel_multi_index((3, 1, 4, 1***REMOVED***, (6, 7, 8, 9***REMOVED******REMOVED***, 1621***REMOVED***

        assert_equal(np.unravel_index(np.array([22, 41, 37***REMOVED******REMOVED***, (7, 6***REMOVED******REMOVED***,
                     [[3, 6, 6***REMOVED***, [4, 5, 1***REMOVED******REMOVED******REMOVED***
        assert_equal(
            np.unravel_index(np.array([31, 41, 13***REMOVED******REMOVED***, (7, 6***REMOVED***, order='F'***REMOVED***,
            [[3, 6, 6***REMOVED***, [4, 5, 1***REMOVED******REMOVED******REMOVED***
        assert_equal(np.unravel_index(1621, (6, 7, 8, 9***REMOVED******REMOVED***, [3, 1, 4, 1***REMOVED******REMOVED***

    def test_dtypes(self***REMOVED***:
        # Test with different data types
        for dtype in [np.int16, np.uint16, np.int32,
                      np.uint32, np.int64, np.uint64***REMOVED***:
            coords = np.array(
                [[1, 0, 1, 2, 3, 4***REMOVED***, [1, 6, 1, 3, 2, 0***REMOVED******REMOVED***, dtype=dtype***REMOVED***
            shape = (5, 8***REMOVED***
            uncoords = 8*coords[0***REMOVED***+coords[1***REMOVED***
            assert_equal(np.ravel_multi_index(coords, shape***REMOVED***, uncoords***REMOVED***
            assert_equal(coords, np.unravel_index(uncoords, shape***REMOVED******REMOVED***
            uncoords = coords[0***REMOVED***+5*coords[1***REMOVED***
            assert_equal(
                np.ravel_multi_index(coords, shape, order='F'***REMOVED***, uncoords***REMOVED***
            assert_equal(coords, np.unravel_index(uncoords, shape, order='F'***REMOVED******REMOVED***

            coords = np.array(
                [[1, 0, 1, 2, 3, 4***REMOVED***, [1, 6, 1, 3, 2, 0***REMOVED***, [1, 3, 1, 0, 9, 5***REMOVED******REMOVED***,
                dtype=dtype***REMOVED***
            shape = (5, 8, 10***REMOVED***
            uncoords = 10*(8*coords[0***REMOVED***+coords[1***REMOVED******REMOVED***+coords[2***REMOVED***
            assert_equal(np.ravel_multi_index(coords, shape***REMOVED***, uncoords***REMOVED***
            assert_equal(coords, np.unravel_index(uncoords, shape***REMOVED******REMOVED***
            uncoords = coords[0***REMOVED***+5*(coords[1***REMOVED***+8*coords[2***REMOVED******REMOVED***
            assert_equal(
                np.ravel_multi_index(coords, shape, order='F'***REMOVED***, uncoords***REMOVED***
            assert_equal(coords, np.unravel_index(uncoords, shape, order='F'***REMOVED******REMOVED***

    def test_clipmodes(self***REMOVED***:
        # Test clipmodes
        assert_equal(
            np.ravel_multi_index([5, 1, -1, 2***REMOVED***, (4, 3, 7, 12***REMOVED***, mode='wrap'***REMOVED***,
            np.ravel_multi_index([1, 1, 6, 2***REMOVED***, (4, 3, 7, 12***REMOVED******REMOVED******REMOVED***
        assert_equal(np.ravel_multi_index([5, 1, -1, 2***REMOVED***, (4, 3, 7, 12***REMOVED***,
                                          mode=(
                                              'wrap', 'raise', 'clip', 'raise'***REMOVED******REMOVED***,
                     np.ravel_multi_index([1, 1, 0, 2***REMOVED***, (4, 3, 7, 12***REMOVED******REMOVED******REMOVED***
        assert_raises(
            ValueError, np.ravel_multi_index, [5, 1, -1, 2***REMOVED***, (4, 3, 7, 12***REMOVED******REMOVED***


class TestGrid(TestCase***REMOVED***:
    def test_basic(self***REMOVED***:
        a = mgrid[-1:1:10j***REMOVED***
        b = mgrid[-1:1:0.1***REMOVED***
        assert_(a.shape == (10,***REMOVED******REMOVED***
        assert_(b.shape == (20,***REMOVED******REMOVED***
        assert_(a[0***REMOVED*** == -1***REMOVED***
        assert_almost_equal(a[-1***REMOVED***, 1***REMOVED***
        assert_(b[0***REMOVED*** == -1***REMOVED***
        assert_almost_equal(b[1***REMOVED***-b[0***REMOVED***, 0.1, 11***REMOVED***
        assert_almost_equal(b[-1***REMOVED***, b[0***REMOVED***+19*0.1, 11***REMOVED***
        assert_almost_equal(a[1***REMOVED***-a[0***REMOVED***, 2.0/9.0, 11***REMOVED***

    def test_linspace_equivalence(self***REMOVED***:
        y, st = np.linspace(2, 10, retstep=1***REMOVED***
        assert_almost_equal(st, 8/49.0***REMOVED***
        assert_array_almost_equal(y, mgrid[2:10:50j***REMOVED***, 13***REMOVED***

    def test_nd(self***REMOVED***:
        c = mgrid[-1:1:10j, -2:2:10j***REMOVED***
        d = mgrid[-1:1:0.1, -2:2:0.2***REMOVED***
        assert_(c.shape == (2, 10, 10***REMOVED******REMOVED***
        assert_(d.shape == (2, 20, 20***REMOVED******REMOVED***
        assert_array_equal(c[0***REMOVED***[0, :***REMOVED***, -np.ones(10, 'd'***REMOVED******REMOVED***
        assert_array_equal(c[1***REMOVED***[:, 0***REMOVED***, -2*np.ones(10, 'd'***REMOVED******REMOVED***
        assert_array_almost_equal(c[0***REMOVED***[-1, :***REMOVED***, np.ones(10, 'd'***REMOVED***, 11***REMOVED***
        assert_array_almost_equal(c[1***REMOVED***[:, -1***REMOVED***, 2*np.ones(10, 'd'***REMOVED***, 11***REMOVED***
        assert_array_almost_equal(d[0, 1, :***REMOVED*** - d[0, 0, :***REMOVED***,
                                  0.1*np.ones(20, 'd'***REMOVED***, 11***REMOVED***
        assert_array_almost_equal(d[1, :, 1***REMOVED*** - d[1, :, 0***REMOVED***,
                                  0.2*np.ones(20, 'd'***REMOVED***, 11***REMOVED***


class TestConcatenator(TestCase***REMOVED***:
    def test_1d(self***REMOVED***:
        assert_array_equal(r_[1, 2, 3, 4, 5, 6***REMOVED***, np.array([1, 2, 3, 4, 5, 6***REMOVED******REMOVED******REMOVED***
        b = np.ones(5***REMOVED***
        c = r_[b, 0, 0, b***REMOVED***
        assert_array_equal(c, [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1***REMOVED******REMOVED***

    def test_mixed_type(self***REMOVED***:
        g = r_[10.1, 1:10***REMOVED***
        assert_(g.dtype == 'f8'***REMOVED***

    def test_more_mixed_type(self***REMOVED***:
        g = r_[-10.1, np.array([1***REMOVED******REMOVED***, np.array([2, 3, 4***REMOVED******REMOVED***, 10.0***REMOVED***
        assert_(g.dtype == 'f8'***REMOVED***

    def test_2d(self***REMOVED***:
        b = np.random.rand(5, 5***REMOVED***
        c = np.random.rand(5, 5***REMOVED***
        d = r_['1', b, c***REMOVED***  # append columns
        assert_(d.shape == (5, 10***REMOVED******REMOVED***
        assert_array_equal(d[:, :5***REMOVED***, b***REMOVED***
        assert_array_equal(d[:, 5:***REMOVED***, c***REMOVED***
        d = r_[b, c***REMOVED***
        assert_(d.shape == (10, 5***REMOVED******REMOVED***
        assert_array_equal(d[:5, :***REMOVED***, b***REMOVED***
        assert_array_equal(d[5:, :***REMOVED***, c***REMOVED***


class TestNdenumerate(TestCase***REMOVED***:
    def test_basic(self***REMOVED***:
        a = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED******REMOVED***
        assert_equal(list(ndenumerate(a***REMOVED******REMOVED***,
                     [((0, 0***REMOVED***, 1***REMOVED***, ((0, 1***REMOVED***, 2***REMOVED***, ((1, 0***REMOVED***, 3***REMOVED***, ((1, 1***REMOVED***, 4***REMOVED******REMOVED******REMOVED***


class TestIndexExpression(TestCase***REMOVED***:
    def test_regression_1(self***REMOVED***:
        # ticket #1196
        a = np.arange(2***REMOVED***
        assert_equal(a[:-1***REMOVED***, a[s_[:-1***REMOVED******REMOVED******REMOVED***
        assert_equal(a[:-1***REMOVED***, a[index_exp[:-1***REMOVED******REMOVED******REMOVED***

    def test_simple_1(self***REMOVED***:
        a = np.random.rand(4, 5, 6***REMOVED***

        assert_equal(a[:, :3, [1, 2***REMOVED******REMOVED***, a[index_exp[:, :3, [1, 2***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_equal(a[:, :3, [1, 2***REMOVED******REMOVED***, a[s_[:, :3, [1, 2***REMOVED******REMOVED******REMOVED******REMOVED***


class TestIx_(TestCase***REMOVED***:
    def test_regression_1(self***REMOVED***:
        # Test empty inputs create ouputs of indexing type, gh-5804
        # Test both lists and arrays
        for func in (range, np.arange***REMOVED***:
            a, = np.ix_(func(0***REMOVED******REMOVED***
            assert_equal(a.dtype, np.intp***REMOVED***

    def test_shape_and_dtype(self***REMOVED***:
        sizes = (4, 5, 3, 2***REMOVED***
        # Test both lists and arrays
        for func in (range, np.arange***REMOVED***:
            arrays = np.ix_(*[func(sz***REMOVED*** for sz in sizes***REMOVED******REMOVED***
            for k, (a, sz***REMOVED*** in enumerate(zip(arrays, sizes***REMOVED******REMOVED***:
                assert_equal(a.shape[k***REMOVED***, sz***REMOVED***
                assert_(all(sh == 1 for j, sh in enumerate(a.shape***REMOVED*** if j != k***REMOVED******REMOVED***
                assert_(np.issubdtype(a.dtype, int***REMOVED******REMOVED***

    def test_bool(self***REMOVED***:
        bool_a = [True, False, True, True***REMOVED***
        int_a, = np.nonzero(bool_a***REMOVED***
        assert_equal(np.ix_(bool_a***REMOVED***[0***REMOVED***, int_a***REMOVED***

    def test_1d_only(self***REMOVED***:
        idx2d = [[1, 2, 3***REMOVED***, [4, 5, 6***REMOVED******REMOVED***
        assert_raises(ValueError, np.ix_, idx2d***REMOVED***

    def test_repeated_input(self***REMOVED***:
        length_of_vector = 5
        x = np.arange(length_of_vector***REMOVED***
        out = ix_(x, x***REMOVED***
        assert_equal(out[0***REMOVED***.shape, (length_of_vector, 1***REMOVED******REMOVED***
        assert_equal(out[1***REMOVED***.shape, (1, length_of_vector***REMOVED******REMOVED***
        # check that input shape is not modified
        assert_equal(x.shape, (length_of_vector,***REMOVED******REMOVED***


def test_c_(***REMOVED***:
    a = np.c_[np.array([[1, 2, 3***REMOVED******REMOVED******REMOVED***, 0, 0, np.array([[4, 5, 6***REMOVED******REMOVED******REMOVED******REMOVED***
    assert_equal(a, [[1, 2, 3, 0, 0, 4, 5, 6***REMOVED******REMOVED******REMOVED***


def test_fill_diagonal(***REMOVED***:
    a = np.zeros((3, 3***REMOVED***, int***REMOVED***
    fill_diagonal(a, 5***REMOVED***
    yield (assert_array_equal, a,
           np.array([[5, 0, 0***REMOVED***,
                  [0, 5, 0***REMOVED***,
                  [0, 0, 5***REMOVED******REMOVED******REMOVED******REMOVED***

    #Test tall matrix
    a = np.zeros((10, 3***REMOVED***, int***REMOVED***
    fill_diagonal(a, 5***REMOVED***
    yield (assert_array_equal, a,
           np.array([[5, 0, 0***REMOVED***,
                  [0, 5, 0***REMOVED***,
                  [0, 0, 5***REMOVED***,
                  [0, 0, 0***REMOVED***,
                  [0, 0, 0***REMOVED***,
                  [0, 0, 0***REMOVED***,
                  [0, 0, 0***REMOVED***,
                  [0, 0, 0***REMOVED***,
                  [0, 0, 0***REMOVED***,
                  [0, 0, 0***REMOVED******REMOVED******REMOVED******REMOVED***

    #Test tall matrix wrap
    a = np.zeros((10, 3***REMOVED***, int***REMOVED***
    fill_diagonal(a, 5, True***REMOVED***
    yield (assert_array_equal, a,
           np.array([[5, 0, 0***REMOVED***,
                  [0, 5, 0***REMOVED***,
                  [0, 0, 5***REMOVED***,
                  [0, 0, 0***REMOVED***,
                  [5, 0, 0***REMOVED***,
                  [0, 5, 0***REMOVED***,
                  [0, 0, 5***REMOVED***,
                  [0, 0, 0***REMOVED***,
                  [5, 0, 0***REMOVED***,
                  [0, 5, 0***REMOVED******REMOVED******REMOVED******REMOVED***

    #Test wide matrix
    a = np.zeros((3, 10***REMOVED***, int***REMOVED***
    fill_diagonal(a, 5***REMOVED***
    yield (assert_array_equal, a,
           np.array([[5, 0, 0, 0, 0, 0, 0, 0, 0, 0***REMOVED***,
                  [0, 5, 0, 0, 0, 0, 0, 0, 0, 0***REMOVED***,
                  [0, 0, 5, 0, 0, 0, 0, 0, 0, 0***REMOVED******REMOVED******REMOVED******REMOVED***

    # The same function can operate on a 4-d array:
    a = np.zeros((3, 3, 3, 3***REMOVED***, int***REMOVED***
    fill_diagonal(a, 4***REMOVED***
    i = np.array([0, 1, 2***REMOVED******REMOVED***
    yield (assert_equal, np.where(a != 0***REMOVED***, (i, i, i, i***REMOVED******REMOVED***


def test_diag_indices(***REMOVED***:
    di = diag_indices(4***REMOVED***
    a = np.array([[1, 2, 3, 4***REMOVED***,
               [5, 6, 7, 8***REMOVED***,
               [9, 10, 11, 12***REMOVED***,
               [13, 14, 15, 16***REMOVED******REMOVED******REMOVED***
    a[di***REMOVED*** = 100
    yield (assert_array_equal, a,
           np.array([[100, 2, 3, 4***REMOVED***,
                  [5, 100, 7, 8***REMOVED***,
                  [9, 10, 100, 12***REMOVED***,
                  [13, 14, 15, 100***REMOVED******REMOVED******REMOVED******REMOVED***

    # Now, we create indices to manipulate a 3-d array:
    d3 = diag_indices(2, 3***REMOVED***

    # And use it to set the diagonal of a zeros array to 1:
    a = np.zeros((2, 2, 2***REMOVED***, int***REMOVED***
    a[d3***REMOVED*** = 1
    yield (assert_array_equal, a,
           np.array([[[1, 0***REMOVED***,
                   [0, 0***REMOVED******REMOVED***,

                  [[0, 0***REMOVED***,
                   [0, 1***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***


def test_diag_indices_from(***REMOVED***:
    x = np.random.random((4, 4***REMOVED******REMOVED***
    r, c = diag_indices_from(x***REMOVED***
    assert_array_equal(r, np.arange(4***REMOVED******REMOVED***
    assert_array_equal(c, np.arange(4***REMOVED******REMOVED***


def test_ndindex(***REMOVED***:
    x = list(ndindex(1, 2, 3***REMOVED******REMOVED***
    expected = [ix for ix, e in ndenumerate(np.zeros((1, 2, 3***REMOVED******REMOVED******REMOVED******REMOVED***
    assert_array_equal(x, expected***REMOVED***

    x = list(ndindex((1, 2, 3***REMOVED******REMOVED******REMOVED***
    assert_array_equal(x, expected***REMOVED***

    # Test use of scalars and tuples
    x = list(ndindex((3,***REMOVED******REMOVED******REMOVED***
    assert_array_equal(x, list(ndindex(3***REMOVED******REMOVED******REMOVED***

    # Make sure size argument is optional
    x = list(ndindex(***REMOVED******REMOVED***
    assert_equal(x, [(***REMOVED******REMOVED******REMOVED***

    x = list(ndindex((***REMOVED******REMOVED******REMOVED***
    assert_equal(x, [(***REMOVED******REMOVED******REMOVED***

    # Make sure 0-sized ndindex works correctly
    x = list(ndindex(*[0***REMOVED******REMOVED******REMOVED***
    assert_equal(x, [***REMOVED******REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
