from __future__ import division, absolute_import, print_function

import warnings

import numpy as np
from numpy.testing import (
    run_module_suite, TestCase, assert_, assert_equal, assert_almost_equal,
    assert_raises, assert_array_equal
    ***REMOVED***


# Test data
_ndat = np.array([[0.6244, np.nan, 0.2692, 0.0116, np.nan, 0.1170***REMOVED***,
                  [0.5351, -0.9403, np.nan, 0.2100, 0.4759, 0.2833***REMOVED***,
                  [np.nan, np.nan, np.nan, 0.1042, np.nan, -0.5954***REMOVED***,
                  [0.1610, np.nan, np.nan, 0.1859, 0.3146, np.nan***REMOVED******REMOVED******REMOVED***


# Rows of _ndat with nans removed
_rdat = [np.array([0.6244, 0.2692, 0.0116, 0.1170***REMOVED******REMOVED***,
         np.array([0.5351, -0.9403, 0.2100, 0.4759, 0.2833***REMOVED******REMOVED***,
         np.array([0.1042, -0.5954***REMOVED******REMOVED***,
         np.array([0.1610, 0.1859, 0.3146***REMOVED******REMOVED******REMOVED***


class TestNanFunctions_MinMax(TestCase***REMOVED***:

    nanfuncs = [np.nanmin, np.nanmax***REMOVED***
    stdfuncs = [np.min, np.max***REMOVED***

    def test_mutation(self***REMOVED***:
        # Check that passed array is not modified.
        ndat = _ndat.copy(***REMOVED***
        for f in self.nanfuncs:
            f(ndat***REMOVED***
            assert_equal(ndat, _ndat***REMOVED***

    def test_keepdims(self***REMOVED***:
        mat = np.eye(3***REMOVED***
        for nf, rf in zip(self.nanfuncs, self.stdfuncs***REMOVED***:
            for axis in [None, 0, 1***REMOVED***:
                tgt = rf(mat, axis=axis, keepdims=True***REMOVED***
                res = nf(mat, axis=axis, keepdims=True***REMOVED***
                assert_(res.ndim == tgt.ndim***REMOVED***

    def test_out(self***REMOVED***:
        mat = np.eye(3***REMOVED***
        for nf, rf in zip(self.nanfuncs, self.stdfuncs***REMOVED***:
            resout = np.zeros(3***REMOVED***
            tgt = rf(mat, axis=1***REMOVED***
            res = nf(mat, axis=1, out=resout***REMOVED***
            assert_almost_equal(res, resout***REMOVED***
            assert_almost_equal(res, tgt***REMOVED***

    def test_dtype_from_input(self***REMOVED***:
        codes = 'efdgFDG'
        for nf, rf in zip(self.nanfuncs, self.stdfuncs***REMOVED***:
            for c in codes:
                mat = np.eye(3, dtype=c***REMOVED***
                tgt = rf(mat, axis=1***REMOVED***.dtype.type
                res = nf(mat, axis=1***REMOVED***.dtype.type
                assert_(res is tgt***REMOVED***
                # scalar case
                tgt = rf(mat, axis=None***REMOVED***.dtype.type
                res = nf(mat, axis=None***REMOVED***.dtype.type
                assert_(res is tgt***REMOVED***

    def test_result_values(self***REMOVED***:
        for nf, rf in zip(self.nanfuncs, self.stdfuncs***REMOVED***:
            tgt = [rf(d***REMOVED*** for d in _rdat***REMOVED***
            res = nf(_ndat, axis=1***REMOVED***
            assert_almost_equal(res, tgt***REMOVED***

    def test_allnans(self***REMOVED***:
        mat = np.array([np.nan***REMOVED****9***REMOVED***.reshape(3, 3***REMOVED***
        for f in self.nanfuncs:
            for axis in [None, 0, 1***REMOVED***:
                with warnings.catch_warnings(record=True***REMOVED*** as w:
                    warnings.simplefilter('always'***REMOVED***
                    assert_(np.isnan(f(mat, axis=axis***REMOVED******REMOVED***.all(***REMOVED******REMOVED***
                    assert_(len(w***REMOVED*** == 1, 'no warning raised'***REMOVED***
                    assert_(issubclass(w[0***REMOVED***.category, RuntimeWarning***REMOVED******REMOVED***
            # Check scalars
            with warnings.catch_warnings(record=True***REMOVED*** as w:
                warnings.simplefilter('always'***REMOVED***
                assert_(np.isnan(f(np.nan***REMOVED******REMOVED******REMOVED***
                assert_(len(w***REMOVED*** == 1, 'no warning raised'***REMOVED***
                assert_(issubclass(w[0***REMOVED***.category, RuntimeWarning***REMOVED******REMOVED***

    def test_masked(self***REMOVED***:
        mat = np.ma.fix_invalid(_ndat***REMOVED***
        msk = mat._mask.copy(***REMOVED***
        for f in [np.nanmin***REMOVED***:
            res = f(mat, axis=1***REMOVED***
            tgt = f(_ndat, axis=1***REMOVED***
            assert_equal(res, tgt***REMOVED***
            assert_equal(mat._mask, msk***REMOVED***
            assert_(not np.isinf(mat***REMOVED***.any(***REMOVED******REMOVED***

    def test_scalar(self***REMOVED***:
        for f in self.nanfuncs:
            assert_(f(0.***REMOVED*** == 0.***REMOVED***

    def test_matrices(self***REMOVED***:
        # Check that it works and that type and
        # shape are preserved
        mat = np.matrix(np.eye(3***REMOVED******REMOVED***
        for f in self.nanfuncs:
            res = f(mat, axis=0***REMOVED***
            assert_(isinstance(res, np.matrix***REMOVED******REMOVED***
            assert_(res.shape == (1, 3***REMOVED******REMOVED***
            res = f(mat, axis=1***REMOVED***
            assert_(isinstance(res, np.matrix***REMOVED******REMOVED***
            assert_(res.shape == (3, 1***REMOVED******REMOVED***
            res = f(mat***REMOVED***
            assert_(np.isscalar(res***REMOVED******REMOVED***
        # check that rows of nan are dealt with for subclasses (#4628***REMOVED***
        mat[1***REMOVED*** = np.nan
        for f in self.nanfuncs:
            with warnings.catch_warnings(record=True***REMOVED*** as w:
                warnings.simplefilter('always'***REMOVED***
                res = f(mat, axis=0***REMOVED***
                assert_(isinstance(res, np.matrix***REMOVED******REMOVED***
                assert_(not np.any(np.isnan(res***REMOVED******REMOVED******REMOVED***
                assert_(len(w***REMOVED*** == 0***REMOVED***

            with warnings.catch_warnings(record=True***REMOVED*** as w:
                warnings.simplefilter('always'***REMOVED***
                res = f(mat, axis=1***REMOVED***
                assert_(isinstance(res, np.matrix***REMOVED******REMOVED***
                assert_(np.isnan(res[1, 0***REMOVED******REMOVED*** and not np.isnan(res[0, 0***REMOVED******REMOVED***
                        and not np.isnan(res[2, 0***REMOVED******REMOVED******REMOVED***
                assert_(len(w***REMOVED*** == 1, 'no warning raised'***REMOVED***
                assert_(issubclass(w[0***REMOVED***.category, RuntimeWarning***REMOVED******REMOVED***

            with warnings.catch_warnings(record=True***REMOVED*** as w:
                warnings.simplefilter('always'***REMOVED***
                res = f(mat***REMOVED***
                assert_(np.isscalar(res***REMOVED******REMOVED***
                assert_(res != np.nan***REMOVED***
                assert_(len(w***REMOVED*** == 0***REMOVED***


class TestNanFunctions_ArgminArgmax(TestCase***REMOVED***:

    nanfuncs = [np.nanargmin, np.nanargmax***REMOVED***

    def test_mutation(self***REMOVED***:
        # Check that passed array is not modified.
        ndat = _ndat.copy(***REMOVED***
        for f in self.nanfuncs:
            f(ndat***REMOVED***
            assert_equal(ndat, _ndat***REMOVED***

    def test_result_values(self***REMOVED***:
        for f, fcmp in zip(self.nanfuncs, [np.greater, np.less***REMOVED******REMOVED***:
            for row in _ndat:
                with warnings.catch_warnings(record=True***REMOVED***:
                    warnings.simplefilter('always'***REMOVED***
                    ind = f(row***REMOVED***
                    val = row[ind***REMOVED***
                    # comparing with NaN is tricky as the result
                    # is always false except for NaN != NaN
                    assert_(not np.isnan(val***REMOVED******REMOVED***
                    assert_(not fcmp(val, row***REMOVED***.any(***REMOVED******REMOVED***
                    assert_(not np.equal(val, row[:ind***REMOVED******REMOVED***.any(***REMOVED******REMOVED***

    def test_allnans(self***REMOVED***:
        mat = np.array([np.nan***REMOVED****9***REMOVED***.reshape(3, 3***REMOVED***
        for f in self.nanfuncs:
            for axis in [None, 0, 1***REMOVED***:
                assert_raises(ValueError, f, mat, axis=axis***REMOVED***
            assert_raises(ValueError, f, np.nan***REMOVED***

    def test_empty(self***REMOVED***:
        mat = np.zeros((0, 3***REMOVED******REMOVED***
        for f in self.nanfuncs:
            for axis in [0, None***REMOVED***:
                assert_raises(ValueError, f, mat, axis=axis***REMOVED***
            for axis in [1***REMOVED***:
                res = f(mat, axis=axis***REMOVED***
                assert_equal(res, np.zeros(0***REMOVED******REMOVED***

    def test_scalar(self***REMOVED***:
        for f in self.nanfuncs:
            assert_(f(0.***REMOVED*** == 0.***REMOVED***

    def test_matrices(self***REMOVED***:
        # Check that it works and that type and
        # shape are preserved
        mat = np.matrix(np.eye(3***REMOVED******REMOVED***
        for f in self.nanfuncs:
            res = f(mat, axis=0***REMOVED***
            assert_(isinstance(res, np.matrix***REMOVED******REMOVED***
            assert_(res.shape == (1, 3***REMOVED******REMOVED***
            res = f(mat, axis=1***REMOVED***
            assert_(isinstance(res, np.matrix***REMOVED******REMOVED***
            assert_(res.shape == (3, 1***REMOVED******REMOVED***
            res = f(mat***REMOVED***
            assert_(np.isscalar(res***REMOVED******REMOVED***


class TestNanFunctions_IntTypes(TestCase***REMOVED***:

    int_types = (np.int8, np.int16, np.int32, np.int64, np.uint8,
                 np.uint16, np.uint32, np.uint64***REMOVED***

    mat = np.array([127, 39, 93, 87, 46***REMOVED******REMOVED***

    def integer_arrays(self***REMOVED***:
        for dtype in self.int_types:
            yield self.mat.astype(dtype***REMOVED***

    def test_nanmin(self***REMOVED***:
        tgt = np.min(self.mat***REMOVED***
        for mat in self.integer_arrays(***REMOVED***:
            assert_equal(np.nanmin(mat***REMOVED***, tgt***REMOVED***

    def test_nanmax(self***REMOVED***:
        tgt = np.max(self.mat***REMOVED***
        for mat in self.integer_arrays(***REMOVED***:
            assert_equal(np.nanmax(mat***REMOVED***, tgt***REMOVED***

    def test_nanargmin(self***REMOVED***:
        tgt = np.argmin(self.mat***REMOVED***
        for mat in self.integer_arrays(***REMOVED***:
            assert_equal(np.nanargmin(mat***REMOVED***, tgt***REMOVED***

    def test_nanargmax(self***REMOVED***:
        tgt = np.argmax(self.mat***REMOVED***
        for mat in self.integer_arrays(***REMOVED***:
            assert_equal(np.nanargmax(mat***REMOVED***, tgt***REMOVED***

    def test_nansum(self***REMOVED***:
        tgt = np.sum(self.mat***REMOVED***
        for mat in self.integer_arrays(***REMOVED***:
            assert_equal(np.nansum(mat***REMOVED***, tgt***REMOVED***

    def test_nanprod(self***REMOVED***:
        tgt = np.prod(self.mat***REMOVED***
        for mat in self.integer_arrays(***REMOVED***:
            assert_equal(np.nanprod(mat***REMOVED***, tgt***REMOVED***

    def test_nanmean(self***REMOVED***:
        tgt = np.mean(self.mat***REMOVED***
        for mat in self.integer_arrays(***REMOVED***:
            assert_equal(np.nanmean(mat***REMOVED***, tgt***REMOVED***

    def test_nanvar(self***REMOVED***:
        tgt = np.var(self.mat***REMOVED***
        for mat in self.integer_arrays(***REMOVED***:
            assert_equal(np.nanvar(mat***REMOVED***, tgt***REMOVED***

        tgt = np.var(mat, ddof=1***REMOVED***
        for mat in self.integer_arrays(***REMOVED***:
            assert_equal(np.nanvar(mat, ddof=1***REMOVED***, tgt***REMOVED***

    def test_nanstd(self***REMOVED***:
        tgt = np.std(self.mat***REMOVED***
        for mat in self.integer_arrays(***REMOVED***:
            assert_equal(np.nanstd(mat***REMOVED***, tgt***REMOVED***

        tgt = np.std(self.mat, ddof=1***REMOVED***
        for mat in self.integer_arrays(***REMOVED***:
            assert_equal(np.nanstd(mat, ddof=1***REMOVED***, tgt***REMOVED***


class SharedNanFunctionsTestsMixin(object***REMOVED***:
    def test_mutation(self***REMOVED***:
        # Check that passed array is not modified.
        ndat = _ndat.copy(***REMOVED***
        for f in self.nanfuncs:
            f(ndat***REMOVED***
            assert_equal(ndat, _ndat***REMOVED***

    def test_keepdims(self***REMOVED***:
        mat = np.eye(3***REMOVED***
        for nf, rf in zip(self.nanfuncs, self.stdfuncs***REMOVED***:
            for axis in [None, 0, 1***REMOVED***:
                tgt = rf(mat, axis=axis, keepdims=True***REMOVED***
                res = nf(mat, axis=axis, keepdims=True***REMOVED***
                assert_(res.ndim == tgt.ndim***REMOVED***

    def test_out(self***REMOVED***:
        mat = np.eye(3***REMOVED***
        for nf, rf in zip(self.nanfuncs, self.stdfuncs***REMOVED***:
            resout = np.zeros(3***REMOVED***
            tgt = rf(mat, axis=1***REMOVED***
            res = nf(mat, axis=1, out=resout***REMOVED***
            assert_almost_equal(res, resout***REMOVED***
            assert_almost_equal(res, tgt***REMOVED***

    def test_dtype_from_dtype(self***REMOVED***:
        mat = np.eye(3***REMOVED***
        codes = 'efdgFDG'
        for nf, rf in zip(self.nanfuncs, self.stdfuncs***REMOVED***:
            for c in codes:
                tgt = rf(mat, dtype=np.dtype(c***REMOVED***, axis=1***REMOVED***.dtype.type
                res = nf(mat, dtype=np.dtype(c***REMOVED***, axis=1***REMOVED***.dtype.type
                assert_(res is tgt***REMOVED***
                # scalar case
                tgt = rf(mat, dtype=np.dtype(c***REMOVED***, axis=None***REMOVED***.dtype.type
                res = nf(mat, dtype=np.dtype(c***REMOVED***, axis=None***REMOVED***.dtype.type
                assert_(res is tgt***REMOVED***

    def test_dtype_from_char(self***REMOVED***:
        mat = np.eye(3***REMOVED***
        codes = 'efdgFDG'
        for nf, rf in zip(self.nanfuncs, self.stdfuncs***REMOVED***:
            for c in codes:
                tgt = rf(mat, dtype=c, axis=1***REMOVED***.dtype.type
                res = nf(mat, dtype=c, axis=1***REMOVED***.dtype.type
                assert_(res is tgt***REMOVED***
                # scalar case
                tgt = rf(mat, dtype=c, axis=None***REMOVED***.dtype.type
                res = nf(mat, dtype=c, axis=None***REMOVED***.dtype.type
                assert_(res is tgt***REMOVED***

    def test_dtype_from_input(self***REMOVED***:
        codes = 'efdgFDG'
        for nf, rf in zip(self.nanfuncs, self.stdfuncs***REMOVED***:
            for c in codes:
                mat = np.eye(3, dtype=c***REMOVED***
                tgt = rf(mat, axis=1***REMOVED***.dtype.type
                res = nf(mat, axis=1***REMOVED***.dtype.type
                assert_(res is tgt, "res %s, tgt %s" % (res, tgt***REMOVED******REMOVED***
                # scalar case
                tgt = rf(mat, axis=None***REMOVED***.dtype.type
                res = nf(mat, axis=None***REMOVED***.dtype.type
                assert_(res is tgt***REMOVED***

    def test_result_values(self***REMOVED***:
        for nf, rf in zip(self.nanfuncs, self.stdfuncs***REMOVED***:
            tgt = [rf(d***REMOVED*** for d in _rdat***REMOVED***
            res = nf(_ndat, axis=1***REMOVED***
            assert_almost_equal(res, tgt***REMOVED***

    def test_scalar(self***REMOVED***:
        for f in self.nanfuncs:
            assert_(f(0.***REMOVED*** == 0.***REMOVED***

    def test_matrices(self***REMOVED***:
        # Check that it works and that type and
        # shape are preserved
        mat = np.matrix(np.eye(3***REMOVED******REMOVED***
        for f in self.nanfuncs:
            res = f(mat, axis=0***REMOVED***
            assert_(isinstance(res, np.matrix***REMOVED******REMOVED***
            assert_(res.shape == (1, 3***REMOVED******REMOVED***
            res = f(mat, axis=1***REMOVED***
            assert_(isinstance(res, np.matrix***REMOVED******REMOVED***
            assert_(res.shape == (3, 1***REMOVED******REMOVED***
            res = f(mat***REMOVED***
            assert_(np.isscalar(res***REMOVED******REMOVED***


class TestNanFunctions_SumProd(TestCase, SharedNanFunctionsTestsMixin***REMOVED***:

    nanfuncs = [np.nansum, np.nanprod***REMOVED***
    stdfuncs = [np.sum, np.prod***REMOVED***

    def test_allnans(self***REMOVED***:
        # Check for FutureWarning
        with warnings.catch_warnings(record=True***REMOVED*** as w:
            warnings.simplefilter('always'***REMOVED***
            res = np.nansum([np.nan***REMOVED****3, axis=None***REMOVED***
            assert_(res == 0, 'result is not 0'***REMOVED***
            assert_(len(w***REMOVED*** == 0, 'warning raised'***REMOVED***
            # Check scalar
            res = np.nansum(np.nan***REMOVED***
            assert_(res == 0, 'result is not 0'***REMOVED***
            assert_(len(w***REMOVED*** == 0, 'warning raised'***REMOVED***
            # Check there is no warning for not all-nan
            np.nansum([0***REMOVED****3, axis=None***REMOVED***
            assert_(len(w***REMOVED*** == 0, 'unwanted warning raised'***REMOVED***

    def test_empty(self***REMOVED***:
        for f, tgt_value in zip([np.nansum, np.nanprod***REMOVED***, [0, 1***REMOVED******REMOVED***:
            mat = np.zeros((0, 3***REMOVED******REMOVED***
            tgt = [tgt_value***REMOVED****3
            res = f(mat, axis=0***REMOVED***
            assert_equal(res, tgt***REMOVED***
            tgt = [***REMOVED***
            res = f(mat, axis=1***REMOVED***
            assert_equal(res, tgt***REMOVED***
            tgt = tgt_value
            res = f(mat, axis=None***REMOVED***
            assert_equal(res, tgt***REMOVED***


class TestNanFunctions_MeanVarStd(TestCase, SharedNanFunctionsTestsMixin***REMOVED***:

    nanfuncs = [np.nanmean, np.nanvar, np.nanstd***REMOVED***
    stdfuncs = [np.mean, np.var, np.std***REMOVED***

    def test_dtype_error(self***REMOVED***:
        for f in self.nanfuncs:
            for dtype in [np.bool_, np.int_, np.object_***REMOVED***:
                assert_raises(TypeError, f, _ndat, axis=1, dtype=dtype***REMOVED***

    def test_out_dtype_error(self***REMOVED***:
        for f in self.nanfuncs:
            for dtype in [np.bool_, np.int_, np.object_***REMOVED***:
                out = np.empty(_ndat.shape[0***REMOVED***, dtype=dtype***REMOVED***
                assert_raises(TypeError, f, _ndat, axis=1, out=out***REMOVED***

    def test_ddof(self***REMOVED***:
        nanfuncs = [np.nanvar, np.nanstd***REMOVED***
        stdfuncs = [np.var, np.std***REMOVED***
        for nf, rf in zip(nanfuncs, stdfuncs***REMOVED***:
            for ddof in [0, 1***REMOVED***:
                tgt = [rf(d, ddof=ddof***REMOVED*** for d in _rdat***REMOVED***
                res = nf(_ndat, axis=1, ddof=ddof***REMOVED***
                assert_almost_equal(res, tgt***REMOVED***

    def test_ddof_too_big(self***REMOVED***:
        nanfuncs = [np.nanvar, np.nanstd***REMOVED***
        stdfuncs = [np.var, np.std***REMOVED***
        dsize = [len(d***REMOVED*** for d in _rdat***REMOVED***
        for nf, rf in zip(nanfuncs, stdfuncs***REMOVED***:
            for ddof in range(5***REMOVED***:
                with warnings.catch_warnings(record=True***REMOVED*** as w:
                    warnings.simplefilter('always'***REMOVED***
                    tgt = [ddof >= d for d in dsize***REMOVED***
                    res = nf(_ndat, axis=1, ddof=ddof***REMOVED***
                    assert_equal(np.isnan(res***REMOVED***, tgt***REMOVED***
                    if any(tgt***REMOVED***:
                        assert_(len(w***REMOVED*** == 1***REMOVED***
                        assert_(issubclass(w[0***REMOVED***.category, RuntimeWarning***REMOVED******REMOVED***
                    else:
                        assert_(len(w***REMOVED*** == 0***REMOVED***

    def test_allnans(self***REMOVED***:
        mat = np.array([np.nan***REMOVED****9***REMOVED***.reshape(3, 3***REMOVED***
        for f in self.nanfuncs:
            for axis in [None, 0, 1***REMOVED***:
                with warnings.catch_warnings(record=True***REMOVED*** as w:
                    warnings.simplefilter('always'***REMOVED***
                    assert_(np.isnan(f(mat, axis=axis***REMOVED******REMOVED***.all(***REMOVED******REMOVED***
                    assert_(len(w***REMOVED*** == 1***REMOVED***
                    assert_(issubclass(w[0***REMOVED***.category, RuntimeWarning***REMOVED******REMOVED***
                    # Check scalar
                    assert_(np.isnan(f(np.nan***REMOVED******REMOVED******REMOVED***
                    assert_(len(w***REMOVED*** == 2***REMOVED***
                    assert_(issubclass(w[0***REMOVED***.category, RuntimeWarning***REMOVED******REMOVED***

    def test_empty(self***REMOVED***:
        mat = np.zeros((0, 3***REMOVED******REMOVED***
        for f in self.nanfuncs:
            for axis in [0, None***REMOVED***:
                with warnings.catch_warnings(record=True***REMOVED*** as w:
                    warnings.simplefilter('always'***REMOVED***
                    assert_(np.isnan(f(mat, axis=axis***REMOVED******REMOVED***.all(***REMOVED******REMOVED***
                    assert_(len(w***REMOVED*** == 1***REMOVED***
                    assert_(issubclass(w[0***REMOVED***.category, RuntimeWarning***REMOVED******REMOVED***
            for axis in [1***REMOVED***:
                with warnings.catch_warnings(record=True***REMOVED*** as w:
                    warnings.simplefilter('always'***REMOVED***
                    assert_equal(f(mat, axis=axis***REMOVED***, np.zeros([***REMOVED******REMOVED******REMOVED***
                    assert_(len(w***REMOVED*** == 0***REMOVED***


class TestNanFunctions_Median(TestCase***REMOVED***:

    def test_mutation(self***REMOVED***:
        # Check that passed array is not modified.
        ndat = _ndat.copy(***REMOVED***
        np.nanmedian(ndat***REMOVED***
        assert_equal(ndat, _ndat***REMOVED***

    def test_keepdims(self***REMOVED***:
        mat = np.eye(3***REMOVED***
        for axis in [None, 0, 1***REMOVED***:
            tgt = np.median(mat, axis=axis, out=None, overwrite_input=False***REMOVED***
            res = np.nanmedian(mat, axis=axis, out=None, overwrite_input=False***REMOVED***
            assert_(res.ndim == tgt.ndim***REMOVED***

        d = np.ones((3, 5, 7, 11***REMOVED******REMOVED***
        # Randomly set some elements to NaN:
        w = np.random.random((4, 200***REMOVED******REMOVED*** * np.array(d.shape***REMOVED***[:, None***REMOVED***
        w = w.astype(np.intp***REMOVED***
        d[tuple(w***REMOVED******REMOVED*** = np.nan
        with warnings.catch_warnings(record=True***REMOVED*** as w:
            warnings.simplefilter('always', RuntimeWarning***REMOVED***
            res = np.nanmedian(d, axis=None, keepdims=True***REMOVED***
            assert_equal(res.shape, (1, 1, 1, 1***REMOVED******REMOVED***
            res = np.nanmedian(d, axis=(0, 1***REMOVED***, keepdims=True***REMOVED***
            assert_equal(res.shape, (1, 1, 7, 11***REMOVED******REMOVED***
            res = np.nanmedian(d, axis=(0, 3***REMOVED***, keepdims=True***REMOVED***
            assert_equal(res.shape, (1, 5, 7, 1***REMOVED******REMOVED***
            res = np.nanmedian(d, axis=(1,***REMOVED***, keepdims=True***REMOVED***
            assert_equal(res.shape, (3, 1, 7, 11***REMOVED******REMOVED***
            res = np.nanmedian(d, axis=(0, 1, 2, 3***REMOVED***, keepdims=True***REMOVED***
            assert_equal(res.shape, (1, 1, 1, 1***REMOVED******REMOVED***
            res = np.nanmedian(d, axis=(0, 1, 3***REMOVED***, keepdims=True***REMOVED***
            assert_equal(res.shape, (1, 1, 7, 1***REMOVED******REMOVED***

    def test_out(self***REMOVED***:
        mat = np.random.rand(3, 3***REMOVED***
        nan_mat = np.insert(mat, [0, 2***REMOVED***, np.nan, axis=1***REMOVED***
        resout = np.zeros(3***REMOVED***
        tgt = np.median(mat, axis=1***REMOVED***
        res = np.nanmedian(nan_mat, axis=1, out=resout***REMOVED***
        assert_almost_equal(res, resout***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***
        # 0-d output:
        resout = np.zeros((***REMOVED******REMOVED***
        tgt = np.median(mat, axis=None***REMOVED***
        res = np.nanmedian(nan_mat, axis=None, out=resout***REMOVED***
        assert_almost_equal(res, resout***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***
        res = np.nanmedian(nan_mat, axis=(0, 1***REMOVED***, out=resout***REMOVED***
        assert_almost_equal(res, resout***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

    def test_small_large(self***REMOVED***:
        # test the small and large code paths, current cutoff 400 elements
        for s in [5, 20, 51, 200, 1000***REMOVED***:
            d = np.random.randn(4, s***REMOVED***
            # Randomly set some elements to NaN:
            w = np.random.randint(0, d.size, size=d.size // 5***REMOVED***
            d.ravel(***REMOVED***[w***REMOVED*** = np.nan
            d[:,0***REMOVED*** = 1.  # ensure at least one good value
            # use normal median without nans to compare
            tgt = [***REMOVED***
            for x in d:
                nonan = np.compress(~np.isnan(x***REMOVED***, x***REMOVED***
                tgt.append(np.median(nonan, overwrite_input=True***REMOVED******REMOVED***

            assert_array_equal(np.nanmedian(d, axis=-1***REMOVED***, tgt***REMOVED***

    def test_result_values(self***REMOVED***:
            tgt = [np.median(d***REMOVED*** for d in _rdat***REMOVED***
            res = np.nanmedian(_ndat, axis=1***REMOVED***
            assert_almost_equal(res, tgt***REMOVED***

    def test_allnans(self***REMOVED***:
        mat = np.array([np.nan***REMOVED****9***REMOVED***.reshape(3, 3***REMOVED***
        for axis in [None, 0, 1***REMOVED***:
            with warnings.catch_warnings(record=True***REMOVED*** as w:
                warnings.simplefilter('always'***REMOVED***
                warnings.simplefilter('ignore', FutureWarning***REMOVED***
                assert_(np.isnan(np.nanmedian(mat, axis=axis***REMOVED******REMOVED***.all(***REMOVED******REMOVED***
                if axis is None:
                    assert_(len(w***REMOVED*** == 1***REMOVED***
                else:
                    assert_(len(w***REMOVED*** == 3***REMOVED***
                assert_(issubclass(w[0***REMOVED***.category, RuntimeWarning***REMOVED******REMOVED***
                # Check scalar
                assert_(np.isnan(np.nanmedian(np.nan***REMOVED******REMOVED******REMOVED***
                if axis is None:
                    assert_(len(w***REMOVED*** == 2***REMOVED***
                else:
                    assert_(len(w***REMOVED*** == 4***REMOVED***
                assert_(issubclass(w[0***REMOVED***.category, RuntimeWarning***REMOVED******REMOVED***

    def test_empty(self***REMOVED***:
        mat = np.zeros((0, 3***REMOVED******REMOVED***
        for axis in [0, None***REMOVED***:
            with warnings.catch_warnings(record=True***REMOVED*** as w:
                warnings.simplefilter('always'***REMOVED***
                assert_(np.isnan(np.nanmedian(mat, axis=axis***REMOVED******REMOVED***.all(***REMOVED******REMOVED***
                assert_(len(w***REMOVED*** == 1***REMOVED***
                assert_(issubclass(w[0***REMOVED***.category, RuntimeWarning***REMOVED******REMOVED***
        for axis in [1***REMOVED***:
            with warnings.catch_warnings(record=True***REMOVED*** as w:
                warnings.simplefilter('always'***REMOVED***
                assert_equal(np.nanmedian(mat, axis=axis***REMOVED***, np.zeros([***REMOVED******REMOVED******REMOVED***
                assert_(len(w***REMOVED*** == 0***REMOVED***

    def test_scalar(self***REMOVED***:
        assert_(np.nanmedian(0.***REMOVED*** == 0.***REMOVED***

    def test_extended_axis_invalid(self***REMOVED***:
        d = np.ones((3, 5, 7, 11***REMOVED******REMOVED***
        assert_raises(IndexError, np.nanmedian, d, axis=-5***REMOVED***
        assert_raises(IndexError, np.nanmedian, d, axis=(0, -5***REMOVED******REMOVED***
        assert_raises(IndexError, np.nanmedian, d, axis=4***REMOVED***
        assert_raises(IndexError, np.nanmedian, d, axis=(0, 4***REMOVED******REMOVED***
        assert_raises(ValueError, np.nanmedian, d, axis=(1, 1***REMOVED******REMOVED***

    def test_float_special(self***REMOVED***:
        with warnings.catch_warnings(record=True***REMOVED***:
            warnings.simplefilter('ignore', RuntimeWarning***REMOVED***
            a = np.array([[np.inf,  np.nan***REMOVED***, [np.nan, np.nan***REMOVED******REMOVED******REMOVED***
            assert_equal(np.nanmedian(a, axis=0***REMOVED***, [np.inf,  np.nan***REMOVED******REMOVED***
            assert_equal(np.nanmedian(a, axis=1***REMOVED***, [np.inf,  np.nan***REMOVED******REMOVED***
            assert_equal(np.nanmedian(a***REMOVED***, np.inf***REMOVED***

            # minimum fill value check
            a = np.array([[np.nan, np.nan, np.inf***REMOVED***, [np.nan, np.nan, np.inf***REMOVED******REMOVED******REMOVED***
            assert_equal(np.nanmedian(a, axis=1***REMOVED***, np.inf***REMOVED***

            # no mask path
            a = np.array([[np.inf, np.inf***REMOVED***, [np.inf, np.inf***REMOVED******REMOVED******REMOVED***
            assert_equal(np.nanmedian(a, axis=1***REMOVED***, np.inf***REMOVED***


class TestNanFunctions_Percentile(TestCase***REMOVED***:

    def test_mutation(self***REMOVED***:
        # Check that passed array is not modified.
        ndat = _ndat.copy(***REMOVED***
        np.nanpercentile(ndat, 30***REMOVED***
        assert_equal(ndat, _ndat***REMOVED***

    def test_keepdims(self***REMOVED***:
        mat = np.eye(3***REMOVED***
        for axis in [None, 0, 1***REMOVED***:
            tgt = np.percentile(mat, 70, axis=axis, out=None,
                                overwrite_input=False***REMOVED***
            res = np.nanpercentile(mat, 70, axis=axis, out=None,
                                   overwrite_input=False***REMOVED***
            assert_(res.ndim == tgt.ndim***REMOVED***

        d = np.ones((3, 5, 7, 11***REMOVED******REMOVED***
        # Randomly set some elements to NaN:
        w = np.random.random((4, 200***REMOVED******REMOVED*** * np.array(d.shape***REMOVED***[:, None***REMOVED***
        w = w.astype(np.intp***REMOVED***
        d[tuple(w***REMOVED******REMOVED*** = np.nan
        with warnings.catch_warnings(record=True***REMOVED*** as w:
            warnings.simplefilter('always', RuntimeWarning***REMOVED***
            res = np.nanpercentile(d, 90, axis=None, keepdims=True***REMOVED***
            assert_equal(res.shape, (1, 1, 1, 1***REMOVED******REMOVED***
            res = np.nanpercentile(d, 90, axis=(0, 1***REMOVED***, keepdims=True***REMOVED***
            assert_equal(res.shape, (1, 1, 7, 11***REMOVED******REMOVED***
            res = np.nanpercentile(d, 90, axis=(0, 3***REMOVED***, keepdims=True***REMOVED***
            assert_equal(res.shape, (1, 5, 7, 1***REMOVED******REMOVED***
            res = np.nanpercentile(d, 90, axis=(1,***REMOVED***, keepdims=True***REMOVED***
            assert_equal(res.shape, (3, 1, 7, 11***REMOVED******REMOVED***
            res = np.nanpercentile(d, 90, axis=(0, 1, 2, 3***REMOVED***, keepdims=True***REMOVED***
            assert_equal(res.shape, (1, 1, 1, 1***REMOVED******REMOVED***
            res = np.nanpercentile(d, 90, axis=(0, 1, 3***REMOVED***, keepdims=True***REMOVED***
            assert_equal(res.shape, (1, 1, 7, 1***REMOVED******REMOVED***

    def test_out(self***REMOVED***:
        mat = np.random.rand(3, 3***REMOVED***
        nan_mat = np.insert(mat, [0, 2***REMOVED***, np.nan, axis=1***REMOVED***
        resout = np.zeros(3***REMOVED***
        tgt = np.percentile(mat, 42, axis=1***REMOVED***
        res = np.nanpercentile(nan_mat, 42, axis=1, out=resout***REMOVED***
        assert_almost_equal(res, resout***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***
        # 0-d output:
        resout = np.zeros((***REMOVED******REMOVED***
        tgt = np.percentile(mat, 42, axis=None***REMOVED***
        res = np.nanpercentile(nan_mat, 42, axis=None, out=resout***REMOVED***
        assert_almost_equal(res, resout***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***
        res = np.nanpercentile(nan_mat, 42, axis=(0, 1***REMOVED***, out=resout***REMOVED***
        assert_almost_equal(res, resout***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

    def test_result_values(self***REMOVED***:
        tgt = [np.percentile(d, 28***REMOVED*** for d in _rdat***REMOVED***
        res = np.nanpercentile(_ndat, 28, axis=1***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***
        # Transpose the array to fit the output convention of numpy.percentile
        tgt = np.transpose([np.percentile(d, (28, 98***REMOVED******REMOVED*** for d in _rdat***REMOVED******REMOVED***
        res = np.nanpercentile(_ndat, (28, 98***REMOVED***, axis=1***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

    def test_allnans(self***REMOVED***:
        mat = np.array([np.nan***REMOVED****9***REMOVED***.reshape(3, 3***REMOVED***
        for axis in [None, 0, 1***REMOVED***:
            with warnings.catch_warnings(record=True***REMOVED*** as w:
                warnings.simplefilter('always'***REMOVED***
                assert_(np.isnan(np.nanpercentile(mat, 60, axis=axis***REMOVED******REMOVED***.all(***REMOVED******REMOVED***
                if axis is None:
                    assert_(len(w***REMOVED*** == 1***REMOVED***
                else:
                    assert_(len(w***REMOVED*** == 3***REMOVED***
                assert_(issubclass(w[0***REMOVED***.category, RuntimeWarning***REMOVED******REMOVED***
                # Check scalar
                assert_(np.isnan(np.nanpercentile(np.nan, 60***REMOVED******REMOVED******REMOVED***
                if axis is None:
                    assert_(len(w***REMOVED*** == 2***REMOVED***
                else:
                    assert_(len(w***REMOVED*** == 4***REMOVED***
                assert_(issubclass(w[0***REMOVED***.category, RuntimeWarning***REMOVED******REMOVED***

    def test_empty(self***REMOVED***:
        mat = np.zeros((0, 3***REMOVED******REMOVED***
        for axis in [0, None***REMOVED***:
            with warnings.catch_warnings(record=True***REMOVED*** as w:
                warnings.simplefilter('always'***REMOVED***
                assert_(np.isnan(np.nanpercentile(mat, 40, axis=axis***REMOVED******REMOVED***.all(***REMOVED******REMOVED***
                assert_(len(w***REMOVED*** == 1***REMOVED***
                assert_(issubclass(w[0***REMOVED***.category, RuntimeWarning***REMOVED******REMOVED***
        for axis in [1***REMOVED***:
            with warnings.catch_warnings(record=True***REMOVED*** as w:
                warnings.simplefilter('always'***REMOVED***
                assert_equal(np.nanpercentile(mat, 40, axis=axis***REMOVED***, np.zeros([***REMOVED******REMOVED******REMOVED***
                assert_(len(w***REMOVED*** == 0***REMOVED***

    def test_scalar(self***REMOVED***:
        assert_(np.nanpercentile(0., 100***REMOVED*** == 0.***REMOVED***

    def test_extended_axis_invalid(self***REMOVED***:
        d = np.ones((3, 5, 7, 11***REMOVED******REMOVED***
        assert_raises(IndexError, np.nanpercentile, d, q=5, axis=-5***REMOVED***
        assert_raises(IndexError, np.nanpercentile, d, q=5, axis=(0, -5***REMOVED******REMOVED***
        assert_raises(IndexError, np.nanpercentile, d, q=5, axis=4***REMOVED***
        assert_raises(IndexError, np.nanpercentile, d, q=5, axis=(0, 4***REMOVED******REMOVED***
        assert_raises(ValueError, np.nanpercentile, d, q=5, axis=(1, 1***REMOVED******REMOVED***

    def test_multiple_percentiles(self***REMOVED***:
        perc = [50, 100***REMOVED***
        mat = np.ones((4, 3***REMOVED******REMOVED***
        nan_mat = np.nan * mat
        # For checking consistency in higher dimensional case
        large_mat = np.ones((3, 4, 5***REMOVED******REMOVED***
        large_mat[:, 0:2:4, :***REMOVED*** = 0
        large_mat[:, :, 3:***REMOVED*** *= 2
        for axis in [None, 0, 1***REMOVED***:
            for keepdim in [False, True***REMOVED***:
                with warnings.catch_warnings(record=True***REMOVED*** as w:
                    warnings.simplefilter('always'***REMOVED***
                    val = np.percentile(mat, perc, axis=axis, keepdims=keepdim***REMOVED***
                    nan_val = np.nanpercentile(nan_mat, perc, axis=axis,
                                               keepdims=keepdim***REMOVED***
                    assert_equal(nan_val.shape, val.shape***REMOVED***

                    val = np.percentile(large_mat, perc, axis=axis,
                                        keepdims=keepdim***REMOVED***
                    nan_val = np.nanpercentile(large_mat, perc, axis=axis,
                                               keepdims=keepdim***REMOVED***
                    assert_equal(nan_val, val***REMOVED***

        megamat = np.ones((3, 4, 5, 6***REMOVED******REMOVED***
        assert_equal(np.nanpercentile(megamat, perc, axis=(1, 2***REMOVED******REMOVED***.shape, (2, 3, 6***REMOVED******REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
