from __future__ import division, absolute_import, print_function

import numpy as np
from numpy.lib.shape_base import (
    apply_along_axis, apply_over_axes, array_split, split, hsplit, dsplit,
    vsplit, dstack, kron, tile
    ***REMOVED***
from numpy.testing import (
    run_module_suite, TestCase, assert_, assert_equal, assert_array_equal,
    assert_raises, assert_warns
    ***REMOVED***


class TestApplyAlongAxis(TestCase***REMOVED***:
    def test_simple(self***REMOVED***:
        a = np.ones((20, 10***REMOVED***, 'd'***REMOVED***
        assert_array_equal(
            apply_along_axis(len, 0, a***REMOVED***, len(a***REMOVED****np.ones(a.shape[1***REMOVED******REMOVED******REMOVED***

    def test_simple101(self, level=11***REMOVED***:
        a = np.ones((10, 101***REMOVED***, 'd'***REMOVED***
        assert_array_equal(
            apply_along_axis(len, 0, a***REMOVED***, len(a***REMOVED****np.ones(a.shape[1***REMOVED******REMOVED******REMOVED***

    def test_3d(self***REMOVED***:
        a = np.arange(27***REMOVED***.reshape((3, 3, 3***REMOVED******REMOVED***
        assert_array_equal(apply_along_axis(np.sum, 0, a***REMOVED***,
                           [[27, 30, 33***REMOVED***, [36, 39, 42***REMOVED***, [45, 48, 51***REMOVED******REMOVED******REMOVED***


class TestApplyOverAxes(TestCase***REMOVED***:
    def test_simple(self***REMOVED***:
        a = np.arange(24***REMOVED***.reshape(2, 3, 4***REMOVED***
        aoa_a = apply_over_axes(np.sum, a, [0, 2***REMOVED******REMOVED***
        assert_array_equal(aoa_a, np.array([[[60***REMOVED***, [92***REMOVED***, [124***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***


class TestArraySplit(TestCase***REMOVED***:
    def test_integer_0_split(self***REMOVED***:
        a = np.arange(10***REMOVED***
        assert_raises(ValueError, array_split, a, 0***REMOVED***

    def test_integer_split(self***REMOVED***:
        a = np.arange(10***REMOVED***
        res = array_split(a, 1***REMOVED***
        desired = [np.arange(10***REMOVED******REMOVED***
        compare_results(res, desired***REMOVED***

        res = array_split(a, 2***REMOVED***
        desired = [np.arange(5***REMOVED***, np.arange(5, 10***REMOVED******REMOVED***
        compare_results(res, desired***REMOVED***

        res = array_split(a, 3***REMOVED***
        desired = [np.arange(4***REMOVED***, np.arange(4, 7***REMOVED***, np.arange(7, 10***REMOVED******REMOVED***
        compare_results(res, desired***REMOVED***

        res = array_split(a, 4***REMOVED***
        desired = [np.arange(3***REMOVED***, np.arange(3, 6***REMOVED***, np.arange(6, 8***REMOVED***,
                   np.arange(8, 10***REMOVED******REMOVED***
        compare_results(res, desired***REMOVED***

        res = array_split(a, 5***REMOVED***
        desired = [np.arange(2***REMOVED***, np.arange(2, 4***REMOVED***, np.arange(4, 6***REMOVED***,
                   np.arange(6, 8***REMOVED***, np.arange(8, 10***REMOVED******REMOVED***
        compare_results(res, desired***REMOVED***

        res = array_split(a, 6***REMOVED***
        desired = [np.arange(2***REMOVED***, np.arange(2, 4***REMOVED***, np.arange(4, 6***REMOVED***,
                   np.arange(6, 8***REMOVED***, np.arange(8, 9***REMOVED***, np.arange(9, 10***REMOVED******REMOVED***
        compare_results(res, desired***REMOVED***

        res = array_split(a, 7***REMOVED***
        desired = [np.arange(2***REMOVED***, np.arange(2, 4***REMOVED***, np.arange(4, 6***REMOVED***,
                   np.arange(6, 7***REMOVED***, np.arange(7, 8***REMOVED***, np.arange(8, 9***REMOVED***,
                   np.arange(9, 10***REMOVED******REMOVED***
        compare_results(res, desired***REMOVED***

        res = array_split(a, 8***REMOVED***
        desired = [np.arange(2***REMOVED***, np.arange(2, 4***REMOVED***, np.arange(4, 5***REMOVED***,
                   np.arange(5, 6***REMOVED***, np.arange(6, 7***REMOVED***, np.arange(7, 8***REMOVED***,
                   np.arange(8, 9***REMOVED***, np.arange(9, 10***REMOVED******REMOVED***
        compare_results(res, desired***REMOVED***

        res = array_split(a, 9***REMOVED***
        desired = [np.arange(2***REMOVED***, np.arange(2, 3***REMOVED***, np.arange(3, 4***REMOVED***,
                   np.arange(4, 5***REMOVED***, np.arange(5, 6***REMOVED***, np.arange(6, 7***REMOVED***,
                   np.arange(7, 8***REMOVED***, np.arange(8, 9***REMOVED***, np.arange(9, 10***REMOVED******REMOVED***
        compare_results(res, desired***REMOVED***

        res = array_split(a, 10***REMOVED***
        desired = [np.arange(1***REMOVED***, np.arange(1, 2***REMOVED***, np.arange(2, 3***REMOVED***,
                   np.arange(3, 4***REMOVED***, np.arange(4, 5***REMOVED***, np.arange(5, 6***REMOVED***,
                   np.arange(6, 7***REMOVED***, np.arange(7, 8***REMOVED***, np.arange(8, 9***REMOVED***,
                   np.arange(9, 10***REMOVED******REMOVED***
        compare_results(res, desired***REMOVED***

        res = array_split(a, 11***REMOVED***
        desired = [np.arange(1***REMOVED***, np.arange(1, 2***REMOVED***, np.arange(2, 3***REMOVED***,
                   np.arange(3, 4***REMOVED***, np.arange(4, 5***REMOVED***, np.arange(5, 6***REMOVED***,
                   np.arange(6, 7***REMOVED***, np.arange(7, 8***REMOVED***, np.arange(8, 9***REMOVED***,
                   np.arange(9, 10***REMOVED***, np.array([***REMOVED******REMOVED******REMOVED***
        compare_results(res, desired***REMOVED***

    def test_integer_split_2D_rows(self***REMOVED***:
        a = np.array([np.arange(10***REMOVED***, np.arange(10***REMOVED******REMOVED******REMOVED***
        res = array_split(a, 3, axis=0***REMOVED***
        tgt = [np.array([np.arange(10***REMOVED******REMOVED******REMOVED***, np.array([np.arange(10***REMOVED******REMOVED******REMOVED***,
                   np.zeros((0, 10***REMOVED******REMOVED******REMOVED***
        compare_results(res, tgt***REMOVED***
        assert_(a.dtype.type is res[-1***REMOVED***.dtype.type***REMOVED***

        # Same thing for manual splits:
        res = array_split(a, [0, 1, 2***REMOVED***, axis=0***REMOVED***
        tgt = [np.zeros((0, 10***REMOVED******REMOVED***, np.array([np.arange(10***REMOVED******REMOVED******REMOVED***,
               np.array([np.arange(10***REMOVED******REMOVED******REMOVED******REMOVED***
        compare_results(res, tgt***REMOVED***
        assert_(a.dtype.type is res[-1***REMOVED***.dtype.type***REMOVED***

    def test_integer_split_2D_cols(self***REMOVED***:
        a = np.array([np.arange(10***REMOVED***, np.arange(10***REMOVED******REMOVED******REMOVED***
        res = array_split(a, 3, axis=-1***REMOVED***
        desired = [np.array([np.arange(4***REMOVED***, np.arange(4***REMOVED******REMOVED******REMOVED***,
                   np.array([np.arange(4, 7***REMOVED***, np.arange(4, 7***REMOVED******REMOVED******REMOVED***,
                   np.array([np.arange(7, 10***REMOVED***, np.arange(7, 10***REMOVED******REMOVED******REMOVED******REMOVED***
        compare_results(res, desired***REMOVED***

    def test_integer_split_2D_default(self***REMOVED***:
        ***REMOVED*** This will fail if we change default axis
        ***REMOVED***
        a = np.array([np.arange(10***REMOVED***, np.arange(10***REMOVED******REMOVED******REMOVED***
        res = array_split(a, 3***REMOVED***
        tgt = [np.array([np.arange(10***REMOVED******REMOVED******REMOVED***, np.array([np.arange(10***REMOVED******REMOVED******REMOVED***,
                   np.zeros((0, 10***REMOVED******REMOVED******REMOVED***
        compare_results(res, tgt***REMOVED***
        assert_(a.dtype.type is res[-1***REMOVED***.dtype.type***REMOVED***
        # perhaps should check higher dimensions

    def test_index_split_simple(self***REMOVED***:
        a = np.arange(10***REMOVED***
        indices = [1, 5, 7***REMOVED***
        res = array_split(a, indices, axis=-1***REMOVED***
        desired = [np.arange(0, 1***REMOVED***, np.arange(1, 5***REMOVED***, np.arange(5, 7***REMOVED***,
                   np.arange(7, 10***REMOVED******REMOVED***
        compare_results(res, desired***REMOVED***

    def test_index_split_low_bound(self***REMOVED***:
        a = np.arange(10***REMOVED***
        indices = [0, 5, 7***REMOVED***
        res = array_split(a, indices, axis=-1***REMOVED***
        desired = [np.array([***REMOVED******REMOVED***, np.arange(0, 5***REMOVED***, np.arange(5, 7***REMOVED***,
                   np.arange(7, 10***REMOVED******REMOVED***
        compare_results(res, desired***REMOVED***

    def test_index_split_high_bound(self***REMOVED***:
        a = np.arange(10***REMOVED***
        indices = [0, 5, 7, 10, 12***REMOVED***
        res = array_split(a, indices, axis=-1***REMOVED***
        desired = [np.array([***REMOVED******REMOVED***, np.arange(0, 5***REMOVED***, np.arange(5, 7***REMOVED***,
                   np.arange(7, 10***REMOVED***, np.array([***REMOVED******REMOVED***, np.array([***REMOVED******REMOVED******REMOVED***
        compare_results(res, desired***REMOVED***


class TestSplit(TestCase***REMOVED***:
    # The split function is essentially the same as array_split,
    # except that it test if splitting will result in an
    # equal split.  Only test for this case.

    def test_equal_split(self***REMOVED***:
        a = np.arange(10***REMOVED***
        res = split(a, 2***REMOVED***
        desired = [np.arange(5***REMOVED***, np.arange(5, 10***REMOVED******REMOVED***
        compare_results(res, desired***REMOVED***

    def test_unequal_split(self***REMOVED***:
        a = np.arange(10***REMOVED***
        assert_raises(ValueError, split, a, 3***REMOVED***


class TestDstack(TestCase***REMOVED***:
    def test_0D_array(self***REMOVED***:
        a = np.array(1***REMOVED***
        b = np.array(2***REMOVED***
        res = dstack([a, b***REMOVED******REMOVED***
        desired = np.array([[[1, 2***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_array_equal(res, desired***REMOVED***

    def test_1D_array(self***REMOVED***:
        a = np.array([1***REMOVED******REMOVED***
        b = np.array([2***REMOVED******REMOVED***
        res = dstack([a, b***REMOVED******REMOVED***
        desired = np.array([[[1, 2***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_array_equal(res, desired***REMOVED***

    def test_2D_array(self***REMOVED***:
        a = np.array([[1***REMOVED***, [2***REMOVED******REMOVED******REMOVED***
        b = np.array([[1***REMOVED***, [2***REMOVED******REMOVED******REMOVED***
        res = dstack([a, b***REMOVED******REMOVED***
        desired = np.array([[[1, 1***REMOVED******REMOVED***, [[2, 2, ***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_array_equal(res, desired***REMOVED***

    def test_2D_array2(self***REMOVED***:
        a = np.array([1, 2***REMOVED******REMOVED***
        b = np.array([1, 2***REMOVED******REMOVED***
        res = dstack([a, b***REMOVED******REMOVED***
        desired = np.array([[[1, 1***REMOVED***, [2, 2***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_array_equal(res, desired***REMOVED***


# array_split has more comprehensive test of splitting.
# only do simple test on hsplit, vsplit, and dsplit
class TestHsplit(TestCase***REMOVED***:
    ***REMOVED***Only testing for integer splits.

    ***REMOVED***
    def test_0D_array(self***REMOVED***:
        a = np.array(1***REMOVED***
        ***REMOVED***
            hsplit(a, 2***REMOVED***
            assert_(0***REMOVED***
        except ValueError:
            pass

    def test_1D_array(self***REMOVED***:
        a = np.array([1, 2, 3, 4***REMOVED******REMOVED***
        res = hsplit(a, 2***REMOVED***
        desired = [np.array([1, 2***REMOVED******REMOVED***, np.array([3, 4***REMOVED******REMOVED******REMOVED***
        compare_results(res, desired***REMOVED***

    def test_2D_array(self***REMOVED***:
        a = np.array([[1, 2, 3, 4***REMOVED***,
                  [1, 2, 3, 4***REMOVED******REMOVED******REMOVED***
        res = hsplit(a, 2***REMOVED***
        desired = [np.array([[1, 2***REMOVED***, [1, 2***REMOVED******REMOVED******REMOVED***, np.array([[3, 4***REMOVED***, [3, 4***REMOVED******REMOVED******REMOVED******REMOVED***
        compare_results(res, desired***REMOVED***


class TestVsplit(TestCase***REMOVED***:
    ***REMOVED***Only testing for integer splits.

    ***REMOVED***
    def test_1D_array(self***REMOVED***:
        a = np.array([1, 2, 3, 4***REMOVED******REMOVED***
        ***REMOVED***
            vsplit(a, 2***REMOVED***
            assert_(0***REMOVED***
        except ValueError:
            pass

    def test_2D_array(self***REMOVED***:
        a = np.array([[1, 2, 3, 4***REMOVED***,
                  [1, 2, 3, 4***REMOVED******REMOVED******REMOVED***
        res = vsplit(a, 2***REMOVED***
        desired = [np.array([[1, 2, 3, 4***REMOVED******REMOVED******REMOVED***, np.array([[1, 2, 3, 4***REMOVED******REMOVED******REMOVED******REMOVED***
        compare_results(res, desired***REMOVED***


class TestDsplit(TestCase***REMOVED***:
    # Only testing for integer splits.

    def test_2D_array(self***REMOVED***:
        a = np.array([[1, 2, 3, 4***REMOVED***,
                  [1, 2, 3, 4***REMOVED******REMOVED******REMOVED***
        ***REMOVED***
            dsplit(a, 2***REMOVED***
            assert_(0***REMOVED***
        except ValueError:
            pass

    def test_3D_array(self***REMOVED***:
        a = np.array([[[1, 2, 3, 4***REMOVED***,
                   [1, 2, 3, 4***REMOVED******REMOVED***,
                  [[1, 2, 3, 4***REMOVED***,
                   [1, 2, 3, 4***REMOVED******REMOVED******REMOVED******REMOVED***
        res = dsplit(a, 2***REMOVED***
        desired = [np.array([[[1, 2***REMOVED***, [1, 2***REMOVED******REMOVED***, [[1, 2***REMOVED***, [1, 2***REMOVED******REMOVED******REMOVED******REMOVED***,
                   np.array([[[3, 4***REMOVED***, [3, 4***REMOVED******REMOVED***, [[3, 4***REMOVED***, [3, 4***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        compare_results(res, desired***REMOVED***


class TestSqueeze(TestCase***REMOVED***:
    def test_basic(self***REMOVED***:
        from numpy.random import rand

        a = rand(20, 10, 10, 1, 1***REMOVED***
        b = rand(20, 1, 10, 1, 20***REMOVED***
        c = rand(1, 1, 20, 10***REMOVED***
        assert_array_equal(np.squeeze(a***REMOVED***, np.reshape(a, (20, 10, 10***REMOVED******REMOVED******REMOVED***
        assert_array_equal(np.squeeze(b***REMOVED***, np.reshape(b, (20, 10, 20***REMOVED******REMOVED******REMOVED***
        assert_array_equal(np.squeeze(c***REMOVED***, np.reshape(c, (20, 10***REMOVED******REMOVED******REMOVED***

        # Squeezing to 0-dim should still give an ndarray
        a = [[[1.5***REMOVED******REMOVED******REMOVED***
        res = np.squeeze(a***REMOVED***
        assert_equal(res, 1.5***REMOVED***
        assert_equal(res.ndim, 0***REMOVED***
        assert_equal(type(res***REMOVED***, np.ndarray***REMOVED***


class TestKron(TestCase***REMOVED***:
    def test_return_type(self***REMOVED***:
        a = np.ones([2, 2***REMOVED******REMOVED***
        m = np.asmatrix(a***REMOVED***
        assert_equal(type(kron(a, a***REMOVED******REMOVED***, np.ndarray***REMOVED***
        assert_equal(type(kron(m, m***REMOVED******REMOVED***, np.matrix***REMOVED***
        assert_equal(type(kron(a, m***REMOVED******REMOVED***, np.matrix***REMOVED***
        assert_equal(type(kron(m, a***REMOVED******REMOVED***, np.matrix***REMOVED***

        class myarray(np.ndarray***REMOVED***:
            __array_priority__ = 0.0

        ma = myarray(a.shape, a.dtype, a.data***REMOVED***
        assert_equal(type(kron(a, a***REMOVED******REMOVED***, np.ndarray***REMOVED***
        assert_equal(type(kron(ma, ma***REMOVED******REMOVED***, myarray***REMOVED***
        assert_equal(type(kron(a, ma***REMOVED******REMOVED***, np.ndarray***REMOVED***
        assert_equal(type(kron(ma, a***REMOVED******REMOVED***, myarray***REMOVED***


class TestTile(TestCase***REMOVED***:
    def test_basic(self***REMOVED***:
        a = np.array([0, 1, 2***REMOVED******REMOVED***
        b = [[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED***
        assert_equal(tile(a, 2***REMOVED***, [0, 1, 2, 0, 1, 2***REMOVED******REMOVED***
        assert_equal(tile(a, (2, 2***REMOVED******REMOVED***, [[0, 1, 2, 0, 1, 2***REMOVED***, [0, 1, 2, 0, 1, 2***REMOVED******REMOVED******REMOVED***
        assert_equal(tile(a, (1, 2***REMOVED******REMOVED***, [[0, 1, 2, 0, 1, 2***REMOVED******REMOVED******REMOVED***
        assert_equal(tile(b, 2***REMOVED***, [[1, 2, 1, 2***REMOVED***, [3, 4, 3, 4***REMOVED******REMOVED******REMOVED***
        assert_equal(tile(b, (2, 1***REMOVED******REMOVED***, [[1, 2***REMOVED***, [3, 4***REMOVED***, [1, 2***REMOVED***, [3, 4***REMOVED******REMOVED******REMOVED***
        assert_equal(tile(b, (2, 2***REMOVED******REMOVED***, [[1, 2, 1, 2***REMOVED***, [3, 4, 3, 4***REMOVED***,
                                       [1, 2, 1, 2***REMOVED***, [3, 4, 3, 4***REMOVED******REMOVED******REMOVED***

    def test_tile_one_repetition_on_array_gh4679(self***REMOVED***:
        a = np.arange(5***REMOVED***
        b = tile(a, 1***REMOVED***
        b += 2
        assert_equal(a, np.arange(5***REMOVED******REMOVED***

    def test_empty(self***REMOVED***:
        a = np.array([[[***REMOVED******REMOVED******REMOVED******REMOVED***
        b = np.array([[***REMOVED***, [***REMOVED******REMOVED******REMOVED***
        c = tile(b, 2***REMOVED***.shape
        d = tile(a, (3, 2, 5***REMOVED******REMOVED***.shape
        assert_equal(c, (2, 0***REMOVED******REMOVED***
        assert_equal(d, (3, 2, 0***REMOVED******REMOVED***

    def test_kroncompare(self***REMOVED***:
        from numpy.random import randint

        reps = [(2,***REMOVED***, (1, 2***REMOVED***, (2, 1***REMOVED***, (2, 2***REMOVED***, (2, 3, 2***REMOVED***, (3, 2***REMOVED******REMOVED***
        shape = [(3,***REMOVED***, (2, 3***REMOVED***, (3, 4, 3***REMOVED***, (3, 2, 3***REMOVED***, (4, 3, 2, 4***REMOVED***, (2, 2***REMOVED******REMOVED***
        for s in shape:
            b = randint(0, 10, size=s***REMOVED***
            for r in reps:
                a = np.ones(r, b.dtype***REMOVED***
                large = tile(b, r***REMOVED***
                klarge = kron(a, b***REMOVED***
                assert_equal(large, klarge***REMOVED***


class TestMayShareMemory(TestCase***REMOVED***:
    def test_basic(self***REMOVED***:
        d = np.ones((50, 60***REMOVED******REMOVED***
        d2 = np.ones((30, 60, 6***REMOVED******REMOVED***
        self.assertTrue(np.may_share_memory(d, d***REMOVED******REMOVED***
        self.assertTrue(np.may_share_memory(d, d[::-1***REMOVED******REMOVED******REMOVED***
        self.assertTrue(np.may_share_memory(d, d[::2***REMOVED******REMOVED******REMOVED***
        self.assertTrue(np.may_share_memory(d, d[1:, ::-1***REMOVED******REMOVED******REMOVED***

        self.assertFalse(np.may_share_memory(d[::-1***REMOVED***, d2***REMOVED******REMOVED***
        self.assertFalse(np.may_share_memory(d[::2***REMOVED***, d2***REMOVED******REMOVED***
        self.assertFalse(np.may_share_memory(d[1:, ::-1***REMOVED***, d2***REMOVED******REMOVED***
        self.assertTrue(np.may_share_memory(d2[1:, ::-1***REMOVED***, d2***REMOVED******REMOVED***


# Utility
def compare_results(res, desired***REMOVED***:
    for i in range(len(desired***REMOVED******REMOVED***:
        assert_array_equal(res[i***REMOVED***, desired[i***REMOVED******REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
