***REMOVED*** Test scripts

Test that we can run executable scripts that have been installed with numpy.
***REMOVED***
from __future__ import division, print_function, absolute_import

***REMOVED***
from os.path import join as pathjoin, isfile, dirname, basename
import sys
from subprocess import Popen, PIPE
import numpy as np
from numpy.compat.py3k import basestring, asbytes
from nose.tools import assert_equal
from numpy.testing.decorators import skipif
from numpy.testing import assert_

is_inplace = isfile(pathjoin(dirname(np.__file__***REMOVED***,  '..', 'setup.py'***REMOVED******REMOVED***

def run_command(cmd, check_code=True***REMOVED***:
    ***REMOVED*** Run command sequence `cmd` returning exit code, stdout, stderr

    Parameters
    ----------
    cmd : str or sequence
        string with command name or sequence of strings defining command
    check_code : {True, False***REMOVED***, optional
        If True, raise error for non-zero return code

    Returns
    -------
    returncode : int
        return code from execution of `cmd`
    stdout : bytes (python 3***REMOVED*** or str (python 2***REMOVED***
        stdout from `cmd`
    stderr : bytes (python 3***REMOVED*** or str (python 2***REMOVED***
        stderr from `cmd`

    Raises
    ------
    RuntimeError
        If `check_code` is True, and return code !=0
    ***REMOVED***
    cmd = [cmd***REMOVED*** if isinstance(cmd, basestring***REMOVED*** else list(cmd***REMOVED***
    if os.name == 'nt':
        # Quote any arguments with spaces. The quotes delimit the arguments
        # on Windows, and the arguments might be file paths with spaces.
        # On Unix the list elements are each separate arguments.
        cmd = ['"{0***REMOVED***"'.format(c***REMOVED*** if ' ' in c else c for c in cmd***REMOVED***
    proc = Popen(cmd, stdout=PIPE, stderr=PIPE***REMOVED***
    stdout, stderr = proc.communicate(***REMOVED***
    if proc.poll(***REMOVED*** == None:
        proc.terminate(***REMOVED***
    if check_code and proc.returncode != 0:
        raise RuntimeError('\n'.join(
            ['Command "{0***REMOVED***" failed with',
             'stdout', '------', '{1***REMOVED***', '',
             'stderr', '------', '{2***REMOVED***'***REMOVED******REMOVED***.format(cmd, stdout, stderr***REMOVED******REMOVED***
    return proc.returncode, stdout, stderr


@skipif(is_inplace***REMOVED***
def test_f2py(***REMOVED***:
    # test that we can run f2py script
    if sys.platform == 'win32':
        exe_dir = dirname(sys.executable***REMOVED***

        if exe_dir.endswith('Scripts'***REMOVED***: # virtualenv
            f2py_cmd = r"%s\f2py.py" % exe_dir
        else:
            f2py_cmd = r"%s\Scripts\f2py.py" % exe_dir

        code, stdout, stderr = run_command([sys.executable, f2py_cmd, '-v'***REMOVED******REMOVED***
        success = stdout.strip(***REMOVED*** == asbytes('2'***REMOVED***
        assert_(success, "Warning: f2py not found in path"***REMOVED***
    else:
        version = sys.version_info

        # Python 2.6 'sys.version_info'
        # is just a tuple, but this changes
        # in Python 2.7 to have a more user-
        # friendly interface with version[0***REMOVED***
        # being the 'major' version and
        # version[1***REMOVED*** being the minor version
        major = str(version[0***REMOVED******REMOVED***
        minor = str(version[1***REMOVED******REMOVED***

        f2py_cmds = ('f2py', 'f2py' + major, 'f2py' + major + '.' + minor***REMOVED***
        success = False

        for f2py_cmd in f2py_cmds:
            ***REMOVED***
                code, stdout, stderr = run_command([f2py_cmd, '-v'***REMOVED******REMOVED***
                assert_equal(stdout.strip(***REMOVED***, asbytes('2'***REMOVED******REMOVED***
                success = True
                break
            ***REMOVED***
                pass
        msg = "Warning: neither %s nor %s nor %s found in path" % f2py_cmds
        assert_(success, msg***REMOVED***
