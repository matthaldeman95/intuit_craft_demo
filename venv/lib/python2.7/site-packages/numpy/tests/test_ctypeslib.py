from __future__ import division, absolute_import, print_function

import sys

import numpy as np
from numpy.ctypeslib import ndpointer, load_library
from numpy.distutils.misc_util import get_shared_lib_extension
from numpy.testing import TestCase, run_module_suite, dec

***REMOVED***
    cdll = load_library('multiarray', np.core.multiarray.__file__***REMOVED***
    _HAS_CTYPE = True
except ImportError:
    _HAS_CTYPE = False

class TestLoadLibrary(TestCase***REMOVED***:
    @dec.skipif(not _HAS_CTYPE,
                "ctypes not available on this python installation"***REMOVED***
    @dec.knownfailureif(sys.platform ==
                        'cygwin', "This test is known to fail on cygwin"***REMOVED***
    def test_basic(self***REMOVED***:
        ***REMOVED***
            # Should succeed
            load_library('multiarray', np.core.multiarray.__file__***REMOVED***
        except ImportError as e:
            msg = ("ctypes is not available on this python: skipping the test"
                   " (import error was: %s***REMOVED***" % str(e***REMOVED******REMOVED***
            print(msg***REMOVED***

    @dec.skipif(not _HAS_CTYPE,
                "ctypes not available on this python installation"***REMOVED***
    @dec.knownfailureif(sys.platform ==
                        'cygwin', "This test is known to fail on cygwin"***REMOVED***
    def test_basic2(self***REMOVED***:
        # Regression for #801: load_library with a full library name
        # (including extension***REMOVED*** does not work.
        ***REMOVED***
            ***REMOVED***
                so = get_shared_lib_extension(is_python_ext=True***REMOVED***
                # Should succeed
                load_library('multiarray%s' % so, np.core.multiarray.__file__***REMOVED***
            except ImportError:
                print("No distutils available, skipping test."***REMOVED***
        except ImportError as e:
            msg = ("ctypes is not available on this python: skipping the test"
                   " (import error was: %s***REMOVED***" % str(e***REMOVED******REMOVED***
            print(msg***REMOVED***

class TestNdpointer(TestCase***REMOVED***:
    def test_dtype(self***REMOVED***:
        dt = np.intc
        p = ndpointer(dtype=dt***REMOVED***
        self.assertTrue(p.from_param(np.array([1***REMOVED***, dt***REMOVED******REMOVED******REMOVED***
        dt = '<i4'
        p = ndpointer(dtype=dt***REMOVED***
        self.assertTrue(p.from_param(np.array([1***REMOVED***, dt***REMOVED******REMOVED******REMOVED***
        dt = np.dtype('>i4'***REMOVED***
        p = ndpointer(dtype=dt***REMOVED***
        p.from_param(np.array([1***REMOVED***, dt***REMOVED******REMOVED***
        self.assertRaises(TypeError, p.from_param,
                          np.array([1***REMOVED***, dt.newbyteorder('swap'***REMOVED******REMOVED******REMOVED***
        dtnames = ['x', 'y'***REMOVED***
        dtformats = [np.intc, np.float64***REMOVED***
        dtdescr = {'names': dtnames, 'formats': dtformats***REMOVED***
        dt = np.dtype(dtdescr***REMOVED***
        p = ndpointer(dtype=dt***REMOVED***
        self.assertTrue(p.from_param(np.zeros((10,***REMOVED***, dt***REMOVED******REMOVED******REMOVED***
        samedt = np.dtype(dtdescr***REMOVED***
        p = ndpointer(dtype=samedt***REMOVED***
        self.assertTrue(p.from_param(np.zeros((10,***REMOVED***, dt***REMOVED******REMOVED******REMOVED***
        dt2 = np.dtype(dtdescr, align=True***REMOVED***
        if dt.itemsize != dt2.itemsize:
            self.assertRaises(TypeError, p.from_param, np.zeros((10,***REMOVED***, dt2***REMOVED******REMOVED***
        else:
            self.assertTrue(p.from_param(np.zeros((10,***REMOVED***, dt2***REMOVED******REMOVED******REMOVED***

    def test_ndim(self***REMOVED***:
        p = ndpointer(ndim=0***REMOVED***
        self.assertTrue(p.from_param(np.array(1***REMOVED******REMOVED******REMOVED***
        self.assertRaises(TypeError, p.from_param, np.array([1***REMOVED******REMOVED******REMOVED***
        p = ndpointer(ndim=1***REMOVED***
        self.assertRaises(TypeError, p.from_param, np.array(1***REMOVED******REMOVED***
        self.assertTrue(p.from_param(np.array([1***REMOVED******REMOVED******REMOVED******REMOVED***
        p = ndpointer(ndim=2***REMOVED***
        self.assertTrue(p.from_param(np.array([[1***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***

    def test_shape(self***REMOVED***:
        p = ndpointer(shape=(1, 2***REMOVED******REMOVED***
        self.assertTrue(p.from_param(np.array([[1, 2***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        self.assertRaises(TypeError, p.from_param, np.array([[1***REMOVED***, [2***REMOVED******REMOVED******REMOVED******REMOVED***
        p = ndpointer(shape=(***REMOVED******REMOVED***
        self.assertTrue(p.from_param(np.array(1***REMOVED******REMOVED******REMOVED***

    def test_flags(self***REMOVED***:
        x = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED***, order='F'***REMOVED***
        p = ndpointer(flags='FORTRAN'***REMOVED***
        self.assertTrue(p.from_param(x***REMOVED******REMOVED***
        p = ndpointer(flags='CONTIGUOUS'***REMOVED***
        self.assertRaises(TypeError, p.from_param, x***REMOVED***
        p = ndpointer(flags=x.flags.num***REMOVED***
        self.assertTrue(p.from_param(x***REMOVED******REMOVED***
        self.assertRaises(TypeError, p.from_param, np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED******REMOVED******REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
