from __future__ import division, absolute_import, print_function

import numpy as np
from numpy.random import random
from numpy.testing import TestCase, run_module_suite, assert_array_almost_equal
from numpy.testing import assert_array_equal
import threading
import sys
if sys.version_info[0***REMOVED*** >= 3:
    import queue
else:
    import Queue as queue


def fft1(x***REMOVED***:
    L = len(x***REMOVED***
    phase = -2j*np.pi*(np.arange(L***REMOVED***/float(L***REMOVED******REMOVED***
    phase = np.arange(L***REMOVED***.reshape(-1, 1***REMOVED*** * phase
    return np.sum(x*np.exp(phase***REMOVED***, axis=1***REMOVED***


class TestFFTShift(TestCase***REMOVED***:

    def test_fft_n(self***REMOVED***:
        self.assertRaises(ValueError, np.fft.fft, [1, 2, 3***REMOVED***, 0***REMOVED***


class TestFFT1D(TestCase***REMOVED***:

    def test_fft(self***REMOVED***:
        x = random(30***REMOVED*** + 1j*random(30***REMOVED***
        assert_array_almost_equal(fft1(x***REMOVED***, np.fft.fft(x***REMOVED******REMOVED***
        assert_array_almost_equal(fft1(x***REMOVED*** / np.sqrt(30***REMOVED***,
                                  np.fft.fft(x, norm="ortho"***REMOVED******REMOVED***

    def test_ifft(self***REMOVED***:
        x = random(30***REMOVED*** + 1j*random(30***REMOVED***
        assert_array_almost_equal(x, np.fft.ifft(np.fft.fft(x***REMOVED******REMOVED******REMOVED***
        assert_array_almost_equal(
            x, np.fft.ifft(np.fft.fft(x, norm="ortho"***REMOVED***, norm="ortho"***REMOVED******REMOVED***

    def test_fft2(self***REMOVED***:
        x = random((30, 20***REMOVED******REMOVED*** + 1j*random((30, 20***REMOVED******REMOVED***
        assert_array_almost_equal(np.fft.fft(np.fft.fft(x, axis=1***REMOVED***, axis=0***REMOVED***,
                                  np.fft.fft2(x***REMOVED******REMOVED***
        assert_array_almost_equal(np.fft.fft2(x***REMOVED*** / np.sqrt(30 * 20***REMOVED***,
                                  np.fft.fft2(x, norm="ortho"***REMOVED******REMOVED***

    def test_ifft2(self***REMOVED***:
        x = random((30, 20***REMOVED******REMOVED*** + 1j*random((30, 20***REMOVED******REMOVED***
        assert_array_almost_equal(np.fft.ifft(np.fft.ifft(x, axis=1***REMOVED***, axis=0***REMOVED***,
                                  np.fft.ifft2(x***REMOVED******REMOVED***
        assert_array_almost_equal(np.fft.ifft2(x***REMOVED*** * np.sqrt(30 * 20***REMOVED***,
                                  np.fft.ifft2(x, norm="ortho"***REMOVED******REMOVED***

    def test_fftn(self***REMOVED***:
        x = random((30, 20, 10***REMOVED******REMOVED*** + 1j*random((30, 20, 10***REMOVED******REMOVED***
        assert_array_almost_equal(
            np.fft.fft(np.fft.fft(np.fft.fft(x, axis=2***REMOVED***, axis=1***REMOVED***, axis=0***REMOVED***,
            np.fft.fftn(x***REMOVED******REMOVED***
        assert_array_almost_equal(np.fft.fftn(x***REMOVED*** / np.sqrt(30 * 20 * 10***REMOVED***,
                                  np.fft.fftn(x, norm="ortho"***REMOVED******REMOVED***

    def test_ifftn(self***REMOVED***:
        x = random((30, 20, 10***REMOVED******REMOVED*** + 1j*random((30, 20, 10***REMOVED******REMOVED***
        assert_array_almost_equal(
            np.fft.ifft(np.fft.ifft(np.fft.ifft(x, axis=2***REMOVED***, axis=1***REMOVED***, axis=0***REMOVED***,
            np.fft.ifftn(x***REMOVED******REMOVED***
        assert_array_almost_equal(np.fft.ifftn(x***REMOVED*** * np.sqrt(30 * 20 * 10***REMOVED***,
                                  np.fft.ifftn(x, norm="ortho"***REMOVED******REMOVED***

    def test_rfft(self***REMOVED***:
        x = random(30***REMOVED***
        assert_array_almost_equal(np.fft.fft(x***REMOVED***[:16***REMOVED***, np.fft.rfft(x***REMOVED******REMOVED***
        assert_array_almost_equal(np.fft.rfft(x***REMOVED*** / np.sqrt(30***REMOVED***,
                                  np.fft.rfft(x, norm="ortho"***REMOVED******REMOVED***

    def test_irfft(self***REMOVED***:
        x = random(30***REMOVED***
        assert_array_almost_equal(x, np.fft.irfft(np.fft.rfft(x***REMOVED******REMOVED******REMOVED***
        assert_array_almost_equal(
            x, np.fft.irfft(np.fft.rfft(x, norm="ortho"***REMOVED***, norm="ortho"***REMOVED******REMOVED***

    def test_rfft2(self***REMOVED***:
        x = random((30, 20***REMOVED******REMOVED***
        assert_array_almost_equal(np.fft.fft2(x***REMOVED***[:, :11***REMOVED***, np.fft.rfft2(x***REMOVED******REMOVED***
        assert_array_almost_equal(np.fft.rfft2(x***REMOVED*** / np.sqrt(30 * 20***REMOVED***,
                                  np.fft.rfft2(x, norm="ortho"***REMOVED******REMOVED***

    def test_irfft2(self***REMOVED***:
        x = random((30, 20***REMOVED******REMOVED***
        assert_array_almost_equal(x, np.fft.irfft2(np.fft.rfft2(x***REMOVED******REMOVED******REMOVED***
        assert_array_almost_equal(
            x, np.fft.irfft2(np.fft.rfft2(x, norm="ortho"***REMOVED***, norm="ortho"***REMOVED******REMOVED***

    def test_rfftn(self***REMOVED***:
        x = random((30, 20, 10***REMOVED******REMOVED***
        assert_array_almost_equal(np.fft.fftn(x***REMOVED***[:, :, :6***REMOVED***, np.fft.rfftn(x***REMOVED******REMOVED***
        assert_array_almost_equal(np.fft.rfftn(x***REMOVED*** / np.sqrt(30 * 20 * 10***REMOVED***,
                                  np.fft.rfftn(x, norm="ortho"***REMOVED******REMOVED***

    def test_irfftn(self***REMOVED***:
        x = random((30, 20, 10***REMOVED******REMOVED***
        assert_array_almost_equal(x, np.fft.irfftn(np.fft.rfftn(x***REMOVED******REMOVED******REMOVED***
        assert_array_almost_equal(
            x, np.fft.irfftn(np.fft.rfftn(x, norm="ortho"***REMOVED***, norm="ortho"***REMOVED******REMOVED***

    def test_hfft(self***REMOVED***:
        x = random(14***REMOVED*** + 1j*random(14***REMOVED***
        x_herm = np.concatenate((random(1***REMOVED***, x, random(1***REMOVED******REMOVED******REMOVED***
        x = np.concatenate((x_herm, x[::-1***REMOVED***.conj(***REMOVED******REMOVED******REMOVED***
        assert_array_almost_equal(np.fft.fft(x***REMOVED***, np.fft.hfft(x_herm***REMOVED******REMOVED***
        assert_array_almost_equal(np.fft.hfft(x_herm***REMOVED*** / np.sqrt(30***REMOVED***,
                                  np.fft.hfft(x_herm, norm="ortho"***REMOVED******REMOVED***

    def test_ihttf(self***REMOVED***:
        x = random(14***REMOVED*** + 1j*random(14***REMOVED***
        x_herm = np.concatenate((random(1***REMOVED***, x, random(1***REMOVED******REMOVED******REMOVED***
        x = np.concatenate((x_herm, x[::-1***REMOVED***.conj(***REMOVED******REMOVED******REMOVED***
        assert_array_almost_equal(x_herm, np.fft.ihfft(np.fft.hfft(x_herm***REMOVED******REMOVED******REMOVED***
        assert_array_almost_equal(
            x_herm, np.fft.ihfft(np.fft.hfft(x_herm, norm="ortho"***REMOVED***,
                                 norm="ortho"***REMOVED******REMOVED***


class TestFFTThreadSafe(TestCase***REMOVED***:
    threads = 16
    input_shape = (800, 200***REMOVED***

    def _test_mtsame(self, func, *args***REMOVED***:
        def worker(args, q***REMOVED***:
            q.put(func(*args***REMOVED******REMOVED***

        q = queue.Queue(***REMOVED***
        expected = func(*args***REMOVED***

        # Spin off a bunch of threads to call the same function simultaneously
        t = [threading.Thread(target=worker, args=(args, q***REMOVED******REMOVED***
             for i in range(self.threads***REMOVED******REMOVED***
        [x.start(***REMOVED*** for x in t***REMOVED***

        [x.join(***REMOVED*** for x in t***REMOVED***
        # Make sure all threads returned the correct value
        for i in range(self.threads***REMOVED***:
            assert_array_equal(q.get(timeout=5***REMOVED***, expected,
                'Function returned wrong value in multithreaded context'***REMOVED***

    def test_fft(self***REMOVED***:
        a = np.ones(self.input_shape***REMOVED*** * 1+0j
        self._test_mtsame(np.fft.fft, a***REMOVED***

    def test_ifft(self***REMOVED***:
        a = np.ones(self.input_shape***REMOVED*** * 1+0j
        self._test_mtsame(np.fft.ifft, a***REMOVED***

    def test_rfft(self***REMOVED***:
        a = np.ones(self.input_shape***REMOVED***
        self._test_mtsame(np.fft.rfft, a***REMOVED***

    def test_irfft(self***REMOVED***:
        a = np.ones(self.input_shape***REMOVED*** * 1+0j
        self._test_mtsame(np.fft.irfft, a***REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
