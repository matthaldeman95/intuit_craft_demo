#!/usr/bin/env python
***REMOVED***Prints type-coercion tables for the built-in NumPy types

***REMOVED***
from __future__ import division, absolute_import, print_function

import numpy as np

# Generic object that can be added, but doesn't do anything else
class GenericObject(object***REMOVED***:
    def __init__(self, v***REMOVED***:
        self.v = v

    def __add__(self, other***REMOVED***:
        return self

    def __radd__(self, other***REMOVED***:
        return self

    dtype = np.dtype('O'***REMOVED***

def print_cancast_table(ntypes***REMOVED***:
    print('X', end=' '***REMOVED***
    for char in ntypes:
        print(char, end=' '***REMOVED***
    print(***REMOVED***
    for row in ntypes:
        print(row, end=' '***REMOVED***
        for col in ntypes:
            print(int(np.can_cast(row, col***REMOVED******REMOVED***, end=' '***REMOVED***
        print(***REMOVED***

def print_coercion_table(ntypes, inputfirstvalue, inputsecondvalue, firstarray, use_promote_types=False***REMOVED***:
    print('+', end=' '***REMOVED***
    for char in ntypes:
        print(char, end=' '***REMOVED***
    print(***REMOVED***
    for row in ntypes:
        if row == 'O':
            rowtype = GenericObject
        else:
            rowtype = np.obj2sctype(row***REMOVED***

        print(row, end=' '***REMOVED***
        for col in ntypes:
            if col == 'O':
                coltype = GenericObject
            else:
                coltype = np.obj2sctype(col***REMOVED***
            ***REMOVED***
                if firstarray:
                    rowvalue = np.array([rowtype(inputfirstvalue***REMOVED******REMOVED***, dtype=rowtype***REMOVED***
                else:
                    rowvalue = rowtype(inputfirstvalue***REMOVED***
                colvalue = coltype(inputsecondvalue***REMOVED***
                if use_promote_types:
                    char = np.promote_types(rowvalue.dtype, colvalue.dtype***REMOVED***.char
                else:
                    value = np.add(rowvalue, colvalue***REMOVED***
                    if isinstance(value, np.ndarray***REMOVED***:
                        char = value.dtype.char
                    else:
                        char = np.dtype(type(value***REMOVED******REMOVED***.char
            except ValueError:
                char = '!'
            except OverflowError:
                char = '@'
            except TypeError:
                char = '#'
            print(char, end=' '***REMOVED***
        print(***REMOVED***

print("can cast"***REMOVED***
print_cancast_table(np.typecodes['All'***REMOVED******REMOVED***
print(***REMOVED***
print("In these tables, ValueError is '!', OverflowError is '@', TypeError is '#'"***REMOVED***
print(***REMOVED***
print("scalar + scalar"***REMOVED***
print_coercion_table(np.typecodes['All'***REMOVED***, 0, 0, False***REMOVED***
print(***REMOVED***
print("scalar + neg scalar"***REMOVED***
print_coercion_table(np.typecodes['All'***REMOVED***, 0, -1, False***REMOVED***
print(***REMOVED***
print("array + scalar"***REMOVED***
print_coercion_table(np.typecodes['All'***REMOVED***, 0, 0, True***REMOVED***
print(***REMOVED***
print("array + neg scalar"***REMOVED***
print_coercion_table(np.typecodes['All'***REMOVED***, 0, -1, True***REMOVED***
print(***REMOVED***
print("promote_types"***REMOVED***
print_coercion_table(np.typecodes['All'***REMOVED***, 0, 0, False, True***REMOVED***
