from __future__ import division, absolute_import, print_function

from numpy.testing import (dec, assert_, assert_raises, run_module_suite,
                           SkipTest, KnownFailureException***REMOVED***
import nose

def test_slow(***REMOVED***:
    @dec.slow
    def slow_func(x, y, z***REMOVED***:
        pass

    assert_(slow_func.slow***REMOVED***

def test_setastest(***REMOVED***:
    @dec.setastest(***REMOVED***
    def f_default(a***REMOVED***:
        pass

    @dec.setastest(True***REMOVED***
    def f_istest(a***REMOVED***:
        pass

    @dec.setastest(False***REMOVED***
    def f_isnottest(a***REMOVED***:
        pass

    assert_(f_default.__test__***REMOVED***
    assert_(f_istest.__test__***REMOVED***
    assert_(not f_isnottest.__test__***REMOVED***

class DidntSkipException(Exception***REMOVED***:
    pass

def test_skip_functions_hardcoded(***REMOVED***:
    @dec.skipif(True***REMOVED***
    def f1(x***REMOVED***:
        raise DidntSkipException

    ***REMOVED***
        f1('a'***REMOVED***
    except DidntSkipException:
        raise Exception('Failed to skip'***REMOVED***
    except SkipTest:
        pass

    @dec.skipif(False***REMOVED***
    def f2(x***REMOVED***:
        raise DidntSkipException

    ***REMOVED***
        f2('a'***REMOVED***
    except DidntSkipException:
        pass
    except SkipTest:
        raise Exception('Skipped when not expected to'***REMOVED***


def test_skip_functions_callable(***REMOVED***:
    def skip_tester(***REMOVED***:
        return skip_flag == 'skip me!'

    @dec.skipif(skip_tester***REMOVED***
    def f1(x***REMOVED***:
        raise DidntSkipException

    ***REMOVED***
        skip_flag = 'skip me!'
        f1('a'***REMOVED***
    except DidntSkipException:
        raise Exception('Failed to skip'***REMOVED***
    except SkipTest:
        pass

    @dec.skipif(skip_tester***REMOVED***
    def f2(x***REMOVED***:
        raise DidntSkipException

    ***REMOVED***
        skip_flag = 'five is right out!'
        f2('a'***REMOVED***
    except DidntSkipException:
        pass
    except SkipTest:
        raise Exception('Skipped when not expected to'***REMOVED***


def test_skip_generators_hardcoded(***REMOVED***:
    @dec.knownfailureif(True, "This test is known to fail"***REMOVED***
    def g1(x***REMOVED***:
        for i in range(x***REMOVED***:
            yield i

    ***REMOVED***
        for j in g1(10***REMOVED***:
            pass
    except KnownFailureException:
        pass
    else:
        raise Exception('Failed to mark as known failure'***REMOVED***

    @dec.knownfailureif(False, "This test is NOT known to fail"***REMOVED***
    def g2(x***REMOVED***:
        for i in range(x***REMOVED***:
            yield i
        raise DidntSkipException('FAIL'***REMOVED***

    ***REMOVED***
        for j in g2(10***REMOVED***:
            pass
    except KnownFailureException:
        raise Exception('Marked incorretly as known failure'***REMOVED***
    except DidntSkipException:
        pass


def test_skip_generators_callable(***REMOVED***:
    def skip_tester(***REMOVED***:
        return skip_flag == 'skip me!'

    @dec.knownfailureif(skip_tester, "This test is known to fail"***REMOVED***
    def g1(x***REMOVED***:
        for i in range(x***REMOVED***:
            yield i

    ***REMOVED***
        skip_flag = 'skip me!'
        for j in g1(10***REMOVED***:
            pass
    except KnownFailureException:
        pass
    else:
        raise Exception('Failed to mark as known failure'***REMOVED***

    @dec.knownfailureif(skip_tester, "This test is NOT known to fail"***REMOVED***
    def g2(x***REMOVED***:
        for i in range(x***REMOVED***:
            yield i
        raise DidntSkipException('FAIL'***REMOVED***

    ***REMOVED***
        skip_flag = 'do not skip'
        for j in g2(10***REMOVED***:
            pass
    except KnownFailureException:
        raise Exception('Marked incorretly as known failure'***REMOVED***
    except DidntSkipException:
        pass


def test_deprecated(***REMOVED***:
    @dec.deprecated(True***REMOVED***
    def non_deprecated_func(***REMOVED***:
        pass

    @dec.deprecated(***REMOVED***
    def deprecated_func(***REMOVED***:
        import warnings
        warnings.warn("TEST: deprecated func", DeprecationWarning***REMOVED***

    @dec.deprecated(***REMOVED***
    def deprecated_func2(***REMOVED***:
        import warnings
        warnings.warn("AHHHH"***REMOVED***
        raise ValueError

    @dec.deprecated(***REMOVED***
    def deprecated_func3(***REMOVED***:
        import warnings
        warnings.warn("AHHHH"***REMOVED***

    # marked as deprecated, but does not raise DeprecationWarning
    assert_raises(AssertionError, non_deprecated_func***REMOVED***
    # should be silent
    deprecated_func(***REMOVED***
    # fails if deprecated decorator just disables test. See #1453.
    assert_raises(ValueError, deprecated_func2***REMOVED***
    # first warnings is not a DeprecationWarning
    assert_raises(AssertionError, deprecated_func3***REMOVED***


if __name__ == '__main__':
    run_module_suite(***REMOVED***
