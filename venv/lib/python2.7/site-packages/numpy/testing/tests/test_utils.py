from __future__ import division, absolute_import, print_function

import warnings
import sys
***REMOVED***

import numpy as np
from numpy.testing import (
    assert_equal, assert_array_equal, assert_almost_equal,
    assert_array_almost_equal, build_err_msg, raises, assert_raises,
    assert_warns, assert_no_warnings, assert_allclose, assert_approx_equal,
    assert_array_almost_equal_nulp, assert_array_max_ulp,
    clear_and_catch_warnings, run_module_suite,
    assert_string_equal, assert_, tempdir, temppath, 
    ***REMOVED***
import unittest


class _GenericTest(object***REMOVED***:

    def _test_equal(self, a, b***REMOVED***:
        self._assert_func(a, b***REMOVED***

    def _test_not_equal(self, a, b***REMOVED***:
        ***REMOVED***
            self._assert_func(a, b***REMOVED***
        except AssertionError:
            pass
        else:
            raise AssertionError("a and b are found equal but are not"***REMOVED***

    def test_array_rank1_eq(self***REMOVED***:
        ***REMOVED***Test two equal array of rank 1 are found equal.***REMOVED***
        a = np.array([1, 2***REMOVED******REMOVED***
        b = np.array([1, 2***REMOVED******REMOVED***

        self._test_equal(a, b***REMOVED***

    def test_array_rank1_noteq(self***REMOVED***:
        ***REMOVED***Test two different array of rank 1 are found not equal.***REMOVED***
        a = np.array([1, 2***REMOVED******REMOVED***
        b = np.array([2, 2***REMOVED******REMOVED***

        self._test_not_equal(a, b***REMOVED***

    def test_array_rank2_eq(self***REMOVED***:
        ***REMOVED***Test two equal array of rank 2 are found equal.***REMOVED***
        a = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED******REMOVED***
        b = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED******REMOVED***

        self._test_equal(a, b***REMOVED***

    def test_array_diffshape(self***REMOVED***:
        ***REMOVED***Test two arrays with different shapes are found not equal.***REMOVED***
        a = np.array([1, 2***REMOVED******REMOVED***
        b = np.array([[1, 2***REMOVED***, [1, 2***REMOVED******REMOVED******REMOVED***

        self._test_not_equal(a, b***REMOVED***

    def test_objarray(self***REMOVED***:
        ***REMOVED***Test object arrays.***REMOVED***
        a = np.array([1, 1***REMOVED***, dtype=np.object***REMOVED***
        self._test_equal(a, 1***REMOVED***

    def test_array_likes(self***REMOVED***:
        self._test_equal([1, 2, 3***REMOVED***, (1, 2, 3***REMOVED******REMOVED***


class TestArrayEqual(_GenericTest, unittest.TestCase***REMOVED***:

    def setUp(self***REMOVED***:
        self._assert_func = assert_array_equal

    def test_generic_rank1(self***REMOVED***:
        ***REMOVED***Test rank 1 array for all dtypes.***REMOVED***
        def foo(t***REMOVED***:
            a = np.empty(2, t***REMOVED***
            a.fill(1***REMOVED***
            b = a.copy(***REMOVED***
            c = a.copy(***REMOVED***
            c.fill(0***REMOVED***
            self._test_equal(a, b***REMOVED***
            self._test_not_equal(c, b***REMOVED***

        # Test numeric types and object
        for t in '?bhilqpBHILQPfdgFDG':
            foo(t***REMOVED***

        # Test strings
        for t in ['S1', 'U1'***REMOVED***:
            foo(t***REMOVED***

    def test_generic_rank3(self***REMOVED***:
        ***REMOVED***Test rank 3 array for all dtypes.***REMOVED***
        def foo(t***REMOVED***:
            a = np.empty((4, 2, 3***REMOVED***, t***REMOVED***
            a.fill(1***REMOVED***
            b = a.copy(***REMOVED***
            c = a.copy(***REMOVED***
            c.fill(0***REMOVED***
            self._test_equal(a, b***REMOVED***
            self._test_not_equal(c, b***REMOVED***

        # Test numeric types and object
        for t in '?bhilqpBHILQPfdgFDG':
            foo(t***REMOVED***

        # Test strings
        for t in ['S1', 'U1'***REMOVED***:
            foo(t***REMOVED***

    def test_nan_array(self***REMOVED***:
        ***REMOVED***Test arrays with nan values in them.***REMOVED***
        a = np.array([1, 2, np.nan***REMOVED******REMOVED***
        b = np.array([1, 2, np.nan***REMOVED******REMOVED***

        self._test_equal(a, b***REMOVED***

        c = np.array([1, 2, 3***REMOVED******REMOVED***
        self._test_not_equal(c, b***REMOVED***

    def test_string_arrays(self***REMOVED***:
        ***REMOVED***Test two arrays with different shapes are found not equal.***REMOVED***
        a = np.array(['floupi', 'floupa'***REMOVED******REMOVED***
        b = np.array(['floupi', 'floupa'***REMOVED******REMOVED***

        self._test_equal(a, b***REMOVED***

        c = np.array(['floupipi', 'floupa'***REMOVED******REMOVED***

        self._test_not_equal(c, b***REMOVED***

    def test_recarrays(self***REMOVED***:
        ***REMOVED***Test record arrays.***REMOVED***
        a = np.empty(2, [('floupi', np.float***REMOVED***, ('floupa', np.float***REMOVED******REMOVED******REMOVED***
        a['floupi'***REMOVED*** = [1, 2***REMOVED***
        a['floupa'***REMOVED*** = [1, 2***REMOVED***
        b = a.copy(***REMOVED***

        self._test_equal(a, b***REMOVED***

        c = np.empty(2, [('floupipi', np.float***REMOVED***, ('floupa', np.float***REMOVED******REMOVED******REMOVED***
        c['floupipi'***REMOVED*** = a['floupi'***REMOVED***.copy(***REMOVED***
        c['floupa'***REMOVED*** = a['floupa'***REMOVED***.copy(***REMOVED***

        self._test_not_equal(c, b***REMOVED***


class TestBuildErrorMessage(unittest.TestCase***REMOVED***:

    def test_build_err_msg_defaults(self***REMOVED***:
        x = np.array([1.00001, 2.00002, 3.00003***REMOVED******REMOVED***
        y = np.array([1.00002, 2.00003, 3.00004***REMOVED******REMOVED***
        err_msg = 'There is a mismatch'

        a = build_err_msg([x, y***REMOVED***, err_msg***REMOVED***
        b = ('\nItems are not equal: There is a mismatch\n ACTUAL: array([ '
             '1.00001,  2.00002,  3.00003***REMOVED******REMOVED***\n DESIRED: array([ 1.00002,  '
             '2.00003,  3.00004***REMOVED******REMOVED***'***REMOVED***
        self.assertEqual(a, b***REMOVED***

    def test_build_err_msg_no_verbose(self***REMOVED***:
        x = np.array([1.00001, 2.00002, 3.00003***REMOVED******REMOVED***
        y = np.array([1.00002, 2.00003, 3.00004***REMOVED******REMOVED***
        err_msg = 'There is a mismatch'

        a = build_err_msg([x, y***REMOVED***, err_msg, verbose=False***REMOVED***
        b = '\nItems are not equal: There is a mismatch'
        self.assertEqual(a, b***REMOVED***

    def test_build_err_msg_custom_names(self***REMOVED***:
        x = np.array([1.00001, 2.00002, 3.00003***REMOVED******REMOVED***
        y = np.array([1.00002, 2.00003, 3.00004***REMOVED******REMOVED***
        err_msg = 'There is a mismatch'

        a = build_err_msg([x, y***REMOVED***, err_msg, names=('FOO', 'BAR'***REMOVED******REMOVED***
        b = ('\nItems are not equal: There is a mismatch\n FOO: array([ '
             '1.00001,  2.00002,  3.00003***REMOVED******REMOVED***\n BAR: array([ 1.00002,  2.00003,  '
             '3.00004***REMOVED******REMOVED***'***REMOVED***
        self.assertEqual(a, b***REMOVED***

    def test_build_err_msg_custom_precision(self***REMOVED***:
        x = np.array([1.000000001, 2.00002, 3.00003***REMOVED******REMOVED***
        y = np.array([1.000000002, 2.00003, 3.00004***REMOVED******REMOVED***
        err_msg = 'There is a mismatch'

        a = build_err_msg([x, y***REMOVED***, err_msg, precision=10***REMOVED***
        b = ('\nItems are not equal: There is a mismatch\n ACTUAL: array([ '
             '1.000000001,  2.00002    ,  3.00003    ***REMOVED******REMOVED***\n DESIRED: array([ '
             '1.000000002,  2.00003    ,  3.00004    ***REMOVED******REMOVED***'***REMOVED***
        self.assertEqual(a, b***REMOVED***


class TestEqual(TestArrayEqual***REMOVED***:

    def setUp(self***REMOVED***:
        self._assert_func = assert_equal

    def test_nan_items(self***REMOVED***:
        self._assert_func(np.nan, np.nan***REMOVED***
        self._assert_func([np.nan***REMOVED***, [np.nan***REMOVED******REMOVED***
        self._test_not_equal(np.nan, [np.nan***REMOVED******REMOVED***
        self._test_not_equal(np.nan, 1***REMOVED***

    def test_inf_items(self***REMOVED***:
        self._assert_func(np.inf, np.inf***REMOVED***
        self._assert_func([np.inf***REMOVED***, [np.inf***REMOVED******REMOVED***
        self._test_not_equal(np.inf, [np.inf***REMOVED******REMOVED***

    def test_non_numeric(self***REMOVED***:
        self._assert_func('ab', 'ab'***REMOVED***
        self._test_not_equal('ab', 'abb'***REMOVED***

    def test_complex_item(self***REMOVED***:
        self._assert_func(complex(1, 2***REMOVED***, complex(1, 2***REMOVED******REMOVED***
        self._assert_func(complex(1, np.nan***REMOVED***, complex(1, np.nan***REMOVED******REMOVED***
        self._test_not_equal(complex(1, np.nan***REMOVED***, complex(1, 2***REMOVED******REMOVED***
        self._test_not_equal(complex(np.nan, 1***REMOVED***, complex(1, np.nan***REMOVED******REMOVED***
        self._test_not_equal(complex(np.nan, np.inf***REMOVED***, complex(np.nan, 2***REMOVED******REMOVED***

    def test_negative_zero(self***REMOVED***:
        self._test_not_equal(np.PZERO, np.NZERO***REMOVED***

    def test_complex(self***REMOVED***:
        x = np.array([complex(1, 2***REMOVED***, complex(1, np.nan***REMOVED******REMOVED******REMOVED***
        y = np.array([complex(1, 2***REMOVED***, complex(1, 2***REMOVED******REMOVED******REMOVED***
        self._assert_func(x, x***REMOVED***
        self._test_not_equal(x, y***REMOVED***


class TestArrayAlmostEqual(_GenericTest, unittest.TestCase***REMOVED***:

    def setUp(self***REMOVED***:
        self._assert_func = assert_array_almost_equal

    def test_simple(self***REMOVED***:
        x = np.array([1234.2222***REMOVED******REMOVED***
        y = np.array([1234.2223***REMOVED******REMOVED***

        self._assert_func(x, y, decimal=3***REMOVED***
        self._assert_func(x, y, decimal=4***REMOVED***
        self.assertRaises(AssertionError,
                lambda: self._assert_func(x, y, decimal=5***REMOVED******REMOVED***

    def test_nan(self***REMOVED***:
        anan = np.array([np.nan***REMOVED******REMOVED***
        aone = np.array([1***REMOVED******REMOVED***
        ainf = np.array([np.inf***REMOVED******REMOVED***
        self._assert_func(anan, anan***REMOVED***
        self.assertRaises(AssertionError,
                lambda: self._assert_func(anan, aone***REMOVED******REMOVED***
        self.assertRaises(AssertionError,
                lambda: self._assert_func(anan, ainf***REMOVED******REMOVED***
        self.assertRaises(AssertionError,
                lambda: self._assert_func(ainf, anan***REMOVED******REMOVED***

    def test_inf(self***REMOVED***:
        a = np.array([[1., 2.***REMOVED***, [3., 4.***REMOVED******REMOVED******REMOVED***
        b = a.copy(***REMOVED***
        a[0, 0***REMOVED*** = np.inf
        self.assertRaises(AssertionError,
                lambda: self._assert_func(a, b***REMOVED******REMOVED***

    def test_subclass(self***REMOVED***:
        a = np.array([[1., 2.***REMOVED***, [3., 4.***REMOVED******REMOVED******REMOVED***
        b = np.ma.masked_array([[1., 2.***REMOVED***, [0., 4.***REMOVED******REMOVED***,
                               [[False, False***REMOVED***, [True, False***REMOVED******REMOVED******REMOVED***
        assert_array_almost_equal(a, b***REMOVED***
        assert_array_almost_equal(b, a***REMOVED***
        assert_array_almost_equal(b, b***REMOVED***


class TestAlmostEqual(_GenericTest, unittest.TestCase***REMOVED***:

    def setUp(self***REMOVED***:
        self._assert_func = assert_almost_equal

    def test_nan_item(self***REMOVED***:
        self._assert_func(np.nan, np.nan***REMOVED***
        self.assertRaises(AssertionError,
                lambda: self._assert_func(np.nan, 1***REMOVED******REMOVED***
        self.assertRaises(AssertionError,
                lambda: self._assert_func(np.nan, np.inf***REMOVED******REMOVED***
        self.assertRaises(AssertionError,
                lambda: self._assert_func(np.inf, np.nan***REMOVED******REMOVED***

    def test_inf_item(self***REMOVED***:
        self._assert_func(np.inf, np.inf***REMOVED***
        self._assert_func(-np.inf, -np.inf***REMOVED***
        self.assertRaises(AssertionError,
                lambda: self._assert_func(np.inf, 1***REMOVED******REMOVED***

    def test_simple_item(self***REMOVED***:
        self._test_not_equal(1, 2***REMOVED***

    def test_complex_item(self***REMOVED***:
        self._assert_func(complex(1, 2***REMOVED***, complex(1, 2***REMOVED******REMOVED***
        self._assert_func(complex(1, np.nan***REMOVED***, complex(1, np.nan***REMOVED******REMOVED***
        self._assert_func(complex(np.inf, np.nan***REMOVED***, complex(np.inf, np.nan***REMOVED******REMOVED***
        self._test_not_equal(complex(1, np.nan***REMOVED***, complex(1, 2***REMOVED******REMOVED***
        self._test_not_equal(complex(np.nan, 1***REMOVED***, complex(1, np.nan***REMOVED******REMOVED***
        self._test_not_equal(complex(np.nan, np.inf***REMOVED***, complex(np.nan, 2***REMOVED******REMOVED***

    def test_complex(self***REMOVED***:
        x = np.array([complex(1, 2***REMOVED***, complex(1, np.nan***REMOVED******REMOVED******REMOVED***
        z = np.array([complex(1, 2***REMOVED***, complex(np.nan, 1***REMOVED******REMOVED******REMOVED***
        y = np.array([complex(1, 2***REMOVED***, complex(1, 2***REMOVED******REMOVED******REMOVED***
        self._assert_func(x, x***REMOVED***
        self._test_not_equal(x, y***REMOVED***
        self._test_not_equal(x, z***REMOVED***

    def test_error_message(self***REMOVED***:
        ***REMOVED***Check the message is formatted correctly for the decimal value***REMOVED***
        x = np.array([1.00000000001, 2.00000000002, 3.00003***REMOVED******REMOVED***
        y = np.array([1.00000000002, 2.00000000003, 3.00004***REMOVED******REMOVED***

        # test with a different amount of decimal digits
        # note that we only check for the formatting of the arrays themselves
        b = ('x: array([ 1.00000000001,  2.00000000002,  3.00003     '
             ' ***REMOVED******REMOVED***\n y: array([ 1.00000000002,  2.00000000003,  3.00004      ***REMOVED******REMOVED***'***REMOVED***
        ***REMOVED***
            self._assert_func(x, y, decimal=12***REMOVED***
        except AssertionError as e:
            # remove anything that's not the array string
            self.assertEqual(str(e***REMOVED***.split('%***REMOVED***\n '***REMOVED***[1***REMOVED***, b***REMOVED***

        # with the default value of decimal digits, only the 3rd element differs
        # note that we only check for the formatting of the arrays themselves
        b = ('x: array([ 1.     ,  2.     ,  3.00003***REMOVED******REMOVED***\n y: array([ 1.     ,  '
             '2.     ,  3.00004***REMOVED******REMOVED***'***REMOVED***
        ***REMOVED***
            self._assert_func(x, y***REMOVED***
        except AssertionError as e:
            # remove anything that's not the array string
            self.assertEqual(str(e***REMOVED***.split('%***REMOVED***\n '***REMOVED***[1***REMOVED***, b***REMOVED***


class TestApproxEqual(unittest.TestCase***REMOVED***:

    def setUp(self***REMOVED***:
        self._assert_func = assert_approx_equal

    def test_simple_arrays(self***REMOVED***:
        x = np.array([1234.22***REMOVED******REMOVED***
        y = np.array([1234.23***REMOVED******REMOVED***

        self._assert_func(x, y, significant=5***REMOVED***
        self._assert_func(x, y, significant=6***REMOVED***
        self.assertRaises(AssertionError,
                lambda: self._assert_func(x, y, significant=7***REMOVED******REMOVED***

    def test_simple_items(self***REMOVED***:
        x = 1234.22
        y = 1234.23

        self._assert_func(x, y, significant=4***REMOVED***
        self._assert_func(x, y, significant=5***REMOVED***
        self._assert_func(x, y, significant=6***REMOVED***
        self.assertRaises(AssertionError,
                lambda: self._assert_func(x, y, significant=7***REMOVED******REMOVED***

    def test_nan_array(self***REMOVED***:
        anan = np.array(np.nan***REMOVED***
        aone = np.array(1***REMOVED***
        ainf = np.array(np.inf***REMOVED***
        self._assert_func(anan, anan***REMOVED***
        self.assertRaises(AssertionError,
                lambda: self._assert_func(anan, aone***REMOVED******REMOVED***
        self.assertRaises(AssertionError,
                lambda: self._assert_func(anan, ainf***REMOVED******REMOVED***
        self.assertRaises(AssertionError,
                lambda: self._assert_func(ainf, anan***REMOVED******REMOVED***

    def test_nan_items(self***REMOVED***:
        anan = np.array(np.nan***REMOVED***
        aone = np.array(1***REMOVED***
        ainf = np.array(np.inf***REMOVED***
        self._assert_func(anan, anan***REMOVED***
        self.assertRaises(AssertionError,
                lambda: self._assert_func(anan, aone***REMOVED******REMOVED***
        self.assertRaises(AssertionError,
                lambda: self._assert_func(anan, ainf***REMOVED******REMOVED***
        self.assertRaises(AssertionError,
                lambda: self._assert_func(ainf, anan***REMOVED******REMOVED***


class TestRaises(unittest.TestCase***REMOVED***:

    def setUp(self***REMOVED***:
        class MyException(Exception***REMOVED***:
            pass

        self.e = MyException

    def raises_exception(self, e***REMOVED***:
        raise e

    def does_not_raise_exception(self***REMOVED***:
        pass

    def test_correct_catch(self***REMOVED***:
        raises(self.e***REMOVED***(self.raises_exception***REMOVED***(self.e***REMOVED***  # raises?

    def test_wrong_exception(self***REMOVED***:
        ***REMOVED***
            raises(self.e***REMOVED***(self.raises_exception***REMOVED***(RuntimeError***REMOVED***  # raises?
        except RuntimeError:
            return
        else:
            raise AssertionError("should have caught RuntimeError"***REMOVED***

    def test_catch_no_raise(self***REMOVED***:
        ***REMOVED***
            raises(self.e***REMOVED***(self.does_not_raise_exception***REMOVED***(***REMOVED***  # raises?
        except AssertionError:
            return
        else:
            raise AssertionError("should have raised an AssertionError"***REMOVED***


class TestWarns(unittest.TestCase***REMOVED***:

    def test_warn(self***REMOVED***:
        def f(***REMOVED***:
            warnings.warn("yo"***REMOVED***
            return 3

        before_filters = sys.modules['warnings'***REMOVED***.filters[:***REMOVED***
        assert_equal(assert_warns(UserWarning, f***REMOVED***, 3***REMOVED***
        after_filters = sys.modules['warnings'***REMOVED***.filters

        assert_raises(AssertionError, assert_no_warnings, f***REMOVED***
        assert_equal(assert_no_warnings(lambda x: x, 1***REMOVED***, 1***REMOVED***

        # Check that the warnings state is unchanged
        assert_equal(before_filters, after_filters,
                     "assert_warns does not preserver warnings state"***REMOVED***

    def test_context_manager(self***REMOVED***:

        before_filters = sys.modules['warnings'***REMOVED***.filters[:***REMOVED***
        with assert_warns(UserWarning***REMOVED***:
            warnings.warn("yo"***REMOVED***
        after_filters = sys.modules['warnings'***REMOVED***.filters

        def no_warnings(***REMOVED***:
            with assert_no_warnings(***REMOVED***:
                warnings.warn("yo"***REMOVED***

        assert_raises(AssertionError, no_warnings***REMOVED***
        assert_equal(before_filters, after_filters,
                     "assert_warns does not preserver warnings state"***REMOVED***

    def test_warn_wrong_warning(self***REMOVED***:
        def f(***REMOVED***:
            warnings.warn("yo", DeprecationWarning***REMOVED***

        failed = False
        filters = sys.modules['warnings'***REMOVED***.filters[:***REMOVED***
        ***REMOVED***
            ***REMOVED***
                # Should raise an AssertionError
                assert_warns(UserWarning, f***REMOVED***
                failed = True
            except AssertionError:
                pass
        finally:
            sys.modules['warnings'***REMOVED***.filters = filters

        if failed:
            raise AssertionError("wrong warning caught by assert_warn"***REMOVED***


class TestAssertAllclose(unittest.TestCase***REMOVED***:
    
    def test_simple(self***REMOVED***:
        x = 1e-3
        y = 1e-9

        assert_allclose(x, y, atol=1***REMOVED***
        self.assertRaises(AssertionError, assert_allclose, x, y***REMOVED***

        a = np.array([x, y, x, y***REMOVED******REMOVED***
        b = np.array([x, y, x, x***REMOVED******REMOVED***

        assert_allclose(a, b, atol=1***REMOVED***
        self.assertRaises(AssertionError, assert_allclose, a, b***REMOVED***

        b[-1***REMOVED*** = y * (1 + 1e-8***REMOVED***
        assert_allclose(a, b***REMOVED***
        self.assertRaises(AssertionError, assert_allclose, a, b,
                          rtol=1e-9***REMOVED***

        assert_allclose(6, 10, rtol=0.5***REMOVED***
        self.assertRaises(AssertionError, assert_allclose, 10, 6, rtol=0.5***REMOVED***

    def test_min_int(self***REMOVED***:
        a = np.array([np.iinfo(np.int_***REMOVED***.min***REMOVED***, dtype=np.int_***REMOVED***
        # Should not raise:
        assert_allclose(a, a***REMOVED***

    def test_report_fail_percentage(self***REMOVED***:
        a = np.array([1, 1, 1, 1***REMOVED******REMOVED***
        b = np.array([1, 1, 1, 2***REMOVED******REMOVED***
        ***REMOVED***
            assert_allclose(a, b***REMOVED***
            msg = ''
        except AssertionError as exc:
            msg = exc.args[0***REMOVED***
        self.assertTrue("mismatch 25.0%" in msg***REMOVED***


class TestArrayAlmostEqualNulp(unittest.TestCase***REMOVED***:

    def test_float64_pass(self***REMOVED***:
        # The number of units of least precision
        # In this case, use a few places above the lowest level (ie nulp=1***REMOVED***
        nulp = 5
        x = np.linspace(-20, 20, 50, dtype=np.float64***REMOVED***
        x = 10**x
        x = np.r_[-x, x***REMOVED***

        # Addition
        eps = np.finfo(x.dtype***REMOVED***.eps
        y = x + x*eps*nulp/2.
        assert_array_almost_equal_nulp(x, y, nulp***REMOVED***

        # Subtraction
        epsneg = np.finfo(x.dtype***REMOVED***.epsneg
        y = x - x*epsneg*nulp/2.
        assert_array_almost_equal_nulp(x, y, nulp***REMOVED***

    def test_float64_fail(self***REMOVED***:
        nulp = 5
        x = np.linspace(-20, 20, 50, dtype=np.float64***REMOVED***
        x = 10**x
        x = np.r_[-x, x***REMOVED***

        eps = np.finfo(x.dtype***REMOVED***.eps
        y = x + x*eps*nulp*2.
        self.assertRaises(AssertionError, assert_array_almost_equal_nulp,
                          x, y, nulp***REMOVED***

        epsneg = np.finfo(x.dtype***REMOVED***.epsneg
        y = x - x*epsneg*nulp*2.
        self.assertRaises(AssertionError, assert_array_almost_equal_nulp,
                          x, y, nulp***REMOVED***

    def test_float32_pass(self***REMOVED***:
        nulp = 5
        x = np.linspace(-20, 20, 50, dtype=np.float32***REMOVED***
        x = 10**x
        x = np.r_[-x, x***REMOVED***

        eps = np.finfo(x.dtype***REMOVED***.eps
        y = x + x*eps*nulp/2.
        assert_array_almost_equal_nulp(x, y, nulp***REMOVED***

        epsneg = np.finfo(x.dtype***REMOVED***.epsneg
        y = x - x*epsneg*nulp/2.
        assert_array_almost_equal_nulp(x, y, nulp***REMOVED***

    def test_float32_fail(self***REMOVED***:
        nulp = 5
        x = np.linspace(-20, 20, 50, dtype=np.float32***REMOVED***
        x = 10**x
        x = np.r_[-x, x***REMOVED***

        eps = np.finfo(x.dtype***REMOVED***.eps
        y = x + x*eps*nulp*2.
        self.assertRaises(AssertionError, assert_array_almost_equal_nulp,
                          x, y, nulp***REMOVED***

        epsneg = np.finfo(x.dtype***REMOVED***.epsneg
        y = x - x*epsneg*nulp*2.
        self.assertRaises(AssertionError, assert_array_almost_equal_nulp,
                          x, y, nulp***REMOVED***

    def test_complex128_pass(self***REMOVED***:
        nulp = 5
        x = np.linspace(-20, 20, 50, dtype=np.float64***REMOVED***
        x = 10**x
        x = np.r_[-x, x***REMOVED***
        xi = x + x*1j

        eps = np.finfo(x.dtype***REMOVED***.eps
        y = x + x*eps*nulp/2.
        assert_array_almost_equal_nulp(xi, x + y*1j, nulp***REMOVED***
        assert_array_almost_equal_nulp(xi, y + x*1j, nulp***REMOVED***
        # The test condition needs to be at least a factor of sqrt(2***REMOVED*** smaller
        # because the real and imaginary parts both change
        y = x + x*eps*nulp/4.
        assert_array_almost_equal_nulp(xi, y + y*1j, nulp***REMOVED***

        epsneg = np.finfo(x.dtype***REMOVED***.epsneg
        y = x - x*epsneg*nulp/2.
        assert_array_almost_equal_nulp(xi, x + y*1j, nulp***REMOVED***
        assert_array_almost_equal_nulp(xi, y + x*1j, nulp***REMOVED***
        y = x - x*epsneg*nulp/4.
        assert_array_almost_equal_nulp(xi, y + y*1j, nulp***REMOVED***

    def test_complex128_fail(self***REMOVED***:
        nulp = 5
        x = np.linspace(-20, 20, 50, dtype=np.float64***REMOVED***
        x = 10**x
        x = np.r_[-x, x***REMOVED***
        xi = x + x*1j

        eps = np.finfo(x.dtype***REMOVED***.eps
        y = x + x*eps*nulp*2.
        self.assertRaises(AssertionError, assert_array_almost_equal_nulp,
                          xi, x + y*1j, nulp***REMOVED***
        self.assertRaises(AssertionError, assert_array_almost_equal_nulp,
                          xi, y + x*1j, nulp***REMOVED***
        # The test condition needs to be at least a factor of sqrt(2***REMOVED*** smaller
        # because the real and imaginary parts both change
        y = x + x*eps*nulp
        self.assertRaises(AssertionError, assert_array_almost_equal_nulp,
                          xi, y + y*1j, nulp***REMOVED***

        epsneg = np.finfo(x.dtype***REMOVED***.epsneg
        y = x - x*epsneg*nulp*2.
        self.assertRaises(AssertionError, assert_array_almost_equal_nulp,
                          xi, x + y*1j, nulp***REMOVED***
        self.assertRaises(AssertionError, assert_array_almost_equal_nulp,
                          xi, y + x*1j, nulp***REMOVED***
        y = x - x*epsneg*nulp
        self.assertRaises(AssertionError, assert_array_almost_equal_nulp,
                          xi, y + y*1j, nulp***REMOVED***

    def test_complex64_pass(self***REMOVED***:
        nulp = 5
        x = np.linspace(-20, 20, 50, dtype=np.float32***REMOVED***
        x = 10**x
        x = np.r_[-x, x***REMOVED***
        xi = x + x*1j

        eps = np.finfo(x.dtype***REMOVED***.eps
        y = x + x*eps*nulp/2.
        assert_array_almost_equal_nulp(xi, x + y*1j, nulp***REMOVED***
        assert_array_almost_equal_nulp(xi, y + x*1j, nulp***REMOVED***
        y = x + x*eps*nulp/4.
        assert_array_almost_equal_nulp(xi, y + y*1j, nulp***REMOVED***

        epsneg = np.finfo(x.dtype***REMOVED***.epsneg
        y = x - x*epsneg*nulp/2.
        assert_array_almost_equal_nulp(xi, x + y*1j, nulp***REMOVED***
        assert_array_almost_equal_nulp(xi, y + x*1j, nulp***REMOVED***
        y = x - x*epsneg*nulp/4.
        assert_array_almost_equal_nulp(xi, y + y*1j, nulp***REMOVED***

    def test_complex64_fail(self***REMOVED***:
        nulp = 5
        x = np.linspace(-20, 20, 50, dtype=np.float32***REMOVED***
        x = 10**x
        x = np.r_[-x, x***REMOVED***
        xi = x + x*1j

        eps = np.finfo(x.dtype***REMOVED***.eps
        y = x + x*eps*nulp*2.
        self.assertRaises(AssertionError, assert_array_almost_equal_nulp,
                          xi, x + y*1j, nulp***REMOVED***
        self.assertRaises(AssertionError, assert_array_almost_equal_nulp,
                          xi, y + x*1j, nulp***REMOVED***
        y = x + x*eps*nulp
        self.assertRaises(AssertionError, assert_array_almost_equal_nulp,
                          xi, y + y*1j, nulp***REMOVED***

        epsneg = np.finfo(x.dtype***REMOVED***.epsneg
        y = x - x*epsneg*nulp*2.
        self.assertRaises(AssertionError, assert_array_almost_equal_nulp,
                          xi, x + y*1j, nulp***REMOVED***
        self.assertRaises(AssertionError, assert_array_almost_equal_nulp,
                          xi, y + x*1j, nulp***REMOVED***
        y = x - x*epsneg*nulp
        self.assertRaises(AssertionError, assert_array_almost_equal_nulp,
                          xi, y + y*1j, nulp***REMOVED***


class TestULP(unittest.TestCase***REMOVED***:

    def test_equal(self***REMOVED***:
        x = np.random.randn(10***REMOVED***
        assert_array_max_ulp(x, x, maxulp=0***REMOVED***

    def test_single(self***REMOVED***:
        # Generate 1 + small deviation, check that adding eps gives a few UNL
        x = np.ones(10***REMOVED***.astype(np.float32***REMOVED***
        x += 0.01 * np.random.randn(10***REMOVED***.astype(np.float32***REMOVED***
        eps = np.finfo(np.float32***REMOVED***.eps
        assert_array_max_ulp(x, x+eps, maxulp=20***REMOVED***

    def test_double(self***REMOVED***:
        # Generate 1 + small deviation, check that adding eps gives a few UNL
        x = np.ones(10***REMOVED***.astype(np.float64***REMOVED***
        x += 0.01 * np.random.randn(10***REMOVED***.astype(np.float64***REMOVED***
        eps = np.finfo(np.float64***REMOVED***.eps
        assert_array_max_ulp(x, x+eps, maxulp=200***REMOVED***

    def test_inf(self***REMOVED***:
        for dt in [np.float32, np.float64***REMOVED***:
            inf = np.array([np.inf***REMOVED******REMOVED***.astype(dt***REMOVED***
            big = np.array([np.finfo(dt***REMOVED***.max***REMOVED******REMOVED***
            assert_array_max_ulp(inf, big, maxulp=200***REMOVED***

    def test_nan(self***REMOVED***:
        # Test that nan is 'far' from small, tiny, inf, max and min
        for dt in [np.float32, np.float64***REMOVED***:
            if dt == np.float32:
                maxulp = 1e6
            else:
                maxulp = 1e12
            inf = np.array([np.inf***REMOVED******REMOVED***.astype(dt***REMOVED***
            nan = np.array([np.nan***REMOVED******REMOVED***.astype(dt***REMOVED***
            big = np.array([np.finfo(dt***REMOVED***.max***REMOVED******REMOVED***
            tiny = np.array([np.finfo(dt***REMOVED***.tiny***REMOVED******REMOVED***
            zero = np.array([np.PZERO***REMOVED******REMOVED***.astype(dt***REMOVED***
            nzero = np.array([np.NZERO***REMOVED******REMOVED***.astype(dt***REMOVED***
            self.assertRaises(AssertionError,
                                  lambda: assert_array_max_ulp(nan, inf,
                                                               maxulp=maxulp***REMOVED******REMOVED***
            self.assertRaises(AssertionError,
                                  lambda: assert_array_max_ulp(nan, big,
                                                               maxulp=maxulp***REMOVED******REMOVED***
            self.assertRaises(AssertionError,
                                  lambda: assert_array_max_ulp(nan, tiny,
                                                               maxulp=maxulp***REMOVED******REMOVED***
            self.assertRaises(AssertionError,
                                  lambda: assert_array_max_ulp(nan, zero,
                                                               maxulp=maxulp***REMOVED******REMOVED***
            self.assertRaises(AssertionError,
                                  lambda: assert_array_max_ulp(nan, nzero,
                                                               maxulp=maxulp***REMOVED******REMOVED***

class TestStringEqual(unittest.TestCase***REMOVED***:
    def test_simple(self***REMOVED***:
        assert_string_equal("hello", "hello"***REMOVED***
        assert_string_equal("hello\nmultiline", "hello\nmultiline"***REMOVED***

        ***REMOVED***
            assert_string_equal("foo\nbar", "hello\nbar"***REMOVED***
        except AssertionError as exc:
            assert_equal(str(exc***REMOVED***, "Differences in strings:\n- foo\n+ hello"***REMOVED***
        else:
            raise AssertionError("exception not raised"***REMOVED***

        self.assertRaises(AssertionError,
                          lambda: assert_string_equal("foo", "hello"***REMOVED******REMOVED***


def assert_warn_len_equal(mod, n_in_context***REMOVED***:
    mod_warns = mod.__warningregistry__
    # Python 3.4 appears to clear any pre-existing warnings of the same type,
    # when raising warnings inside a catch_warnings block. So, there is a
    # warning generated by the tests within the context manager, but no
    # previous warnings.
    if 'version' in mod_warns:
        assert_equal(len(mod_warns***REMOVED***, 2***REMOVED***  # including 'version'
    else:
        assert_equal(len(mod_warns***REMOVED***, n_in_context***REMOVED***


def _get_fresh_mod(***REMOVED***:
    # Get this module, with warning registry empty
    my_mod = sys.modules[__name__***REMOVED***
    ***REMOVED***
        my_mod.__warningregistry__.clear(***REMOVED***
    except AttributeError:
        pass
    return my_mod


def test_clear_and_catch_warnings(***REMOVED***:
    # Initial state of module, no warnings
    my_mod = _get_fresh_mod(***REMOVED***
    assert_equal(getattr(my_mod, '__warningregistry__', {***REMOVED******REMOVED***, {***REMOVED******REMOVED***
    with clear_and_catch_warnings(modules=[my_mod***REMOVED******REMOVED***:
        warnings.simplefilter('ignore'***REMOVED***
        warnings.warn('Some warning'***REMOVED***
    assert_equal(my_mod.__warningregistry__, {***REMOVED******REMOVED***
    # Without specified modules, don't clear warnings during context
    with clear_and_catch_warnings(***REMOVED***:
        warnings.simplefilter('ignore'***REMOVED***
        warnings.warn('Some warning'***REMOVED***
    assert_warn_len_equal(my_mod, 1***REMOVED***
    # Confirm that specifying module keeps old warning, does not add new
    with clear_and_catch_warnings(modules=[my_mod***REMOVED******REMOVED***:
        warnings.simplefilter('ignore'***REMOVED***
        warnings.warn('Another warning'***REMOVED***
    assert_warn_len_equal(my_mod, 1***REMOVED***
    # Another warning, no module spec does add to warnings dict, except on
    # Python 3.4 (see comments in `assert_warn_len_equal`***REMOVED***
    with clear_and_catch_warnings(***REMOVED***:
        warnings.simplefilter('ignore'***REMOVED***
        warnings.warn('Another warning'***REMOVED***
    assert_warn_len_equal(my_mod, 2***REMOVED***


def test_tempdir(***REMOVED***:
    with tempdir(***REMOVED*** as tdir:
        fpath = os.path.join(tdir, 'tmp'***REMOVED***
        with open(fpath, 'w'***REMOVED***:
            pass
    assert_(not os.path.isdir(tdir***REMOVED******REMOVED***

    raised = False
    ***REMOVED***
        with tempdir(***REMOVED*** as tdir:
            raise ValueError(***REMOVED***
    except ValueError:
        raised = True
    assert_(raised***REMOVED***
    assert_(not os.path.isdir(tdir***REMOVED******REMOVED***



def test_temppath(***REMOVED***:
    with temppath(***REMOVED*** as fpath:
        with open(fpath, 'w'***REMOVED*** as f:
            pass
    assert_(not os.path.isfile(fpath***REMOVED******REMOVED***

    raised = False
    ***REMOVED***
        with temppath(***REMOVED*** as fpath:
            raise ValueError(***REMOVED***
    except ValueError:
        raised = True
    assert_(raised***REMOVED***
    assert_(not os.path.isfile(fpath***REMOVED******REMOVED***


class my_cacw(clear_and_catch_warnings***REMOVED***:

    class_modules = (sys.modules[__name__***REMOVED***,***REMOVED***


def test_clear_and_catch_warnings_inherit(***REMOVED***:
    # Test can subclass and add default modules
    my_mod = _get_fresh_mod(***REMOVED***
    with my_cacw(***REMOVED***:
        warnings.simplefilter('ignore'***REMOVED***
        warnings.warn('Some warning'***REMOVED***
    assert_equal(my_mod.__warningregistry__, {***REMOVED******REMOVED***


if __name__ == '__main__':
    run_module_suite(***REMOVED***
