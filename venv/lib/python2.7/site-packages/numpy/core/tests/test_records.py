from __future__ import division, absolute_import, print_function

import sys
import collections
import pickle
from os import path

import numpy as np
from numpy.compat import asbytes
from numpy.testing import (
    TestCase, run_module_suite, assert_, assert_equal, assert_array_equal,
    assert_array_almost_equal, assert_raises
    ***REMOVED***


class TestFromrecords(TestCase***REMOVED***:
    def test_fromrecords(self***REMOVED***:
        r = np.rec.fromrecords([[456, 'dbe', 1.2***REMOVED***, [2, 'de', 1.3***REMOVED******REMOVED***,
                            names='col1,col2,col3'***REMOVED***
        assert_equal(r[0***REMOVED***.item(***REMOVED***, (456, 'dbe', 1.2***REMOVED******REMOVED***
        assert_equal(r['col1'***REMOVED***.dtype.kind, 'i'***REMOVED***
        if sys.version_info[0***REMOVED*** >= 3:
            assert_equal(r['col2'***REMOVED***.dtype.kind, 'U'***REMOVED***
            assert_equal(r['col2'***REMOVED***.dtype.itemsize, 12***REMOVED***
        else:
            assert_equal(r['col2'***REMOVED***.dtype.kind, 'S'***REMOVED***
            assert_equal(r['col2'***REMOVED***.dtype.itemsize, 3***REMOVED***
        assert_equal(r['col3'***REMOVED***.dtype.kind, 'f'***REMOVED***

    def test_method_array(self***REMOVED***:
        r = np.rec.array(asbytes('abcdefg'***REMOVED*** * 100, formats='i2,a3,i4', shape=3, byteorder='big'***REMOVED***
        assert_equal(r[1***REMOVED***.item(***REMOVED***, (25444, asbytes('efg'***REMOVED***, 1633837924***REMOVED******REMOVED***

    def test_method_array2(self***REMOVED***:
        r = np.rec.array([(1, 11, 'a'***REMOVED***, (2, 22, 'b'***REMOVED***, (3, 33, 'c'***REMOVED***, (4, 44, 'd'***REMOVED***, (5, 55, 'ex'***REMOVED***,
                     (6, 66, 'f'***REMOVED***, (7, 77, 'g'***REMOVED******REMOVED***, formats='u1,f4,a1'***REMOVED***
        assert_equal(r[1***REMOVED***.item(***REMOVED***, (2, 22.0, asbytes('b'***REMOVED******REMOVED******REMOVED***

    def test_recarray_slices(self***REMOVED***:
        r = np.rec.array([(1, 11, 'a'***REMOVED***, (2, 22, 'b'***REMOVED***, (3, 33, 'c'***REMOVED***, (4, 44, 'd'***REMOVED***, (5, 55, 'ex'***REMOVED***,
                     (6, 66, 'f'***REMOVED***, (7, 77, 'g'***REMOVED******REMOVED***, formats='u1,f4,a1'***REMOVED***
        assert_equal(r[1::2***REMOVED***[1***REMOVED***.item(***REMOVED***, (4, 44.0, asbytes('d'***REMOVED******REMOVED******REMOVED***

    def test_recarray_fromarrays(self***REMOVED***:
        x1 = np.array([1, 2, 3, 4***REMOVED******REMOVED***
        x2 = np.array(['a', 'dd', 'xyz', '12'***REMOVED******REMOVED***
        x3 = np.array([1.1, 2, 3, 4***REMOVED******REMOVED***
        r = np.rec.fromarrays([x1, x2, x3***REMOVED***, names='a,b,c'***REMOVED***
        assert_equal(r[1***REMOVED***.item(***REMOVED***, (2, 'dd', 2.0***REMOVED******REMOVED***
        x1[1***REMOVED*** = 34
        assert_equal(r.a, np.array([1, 2, 3, 4***REMOVED******REMOVED******REMOVED***

    def test_recarray_fromfile(self***REMOVED***:
        data_dir = path.join(path.dirname(__file__***REMOVED***, 'data'***REMOVED***
        filename = path.join(data_dir, 'recarray_from_file.fits'***REMOVED***
        fd = open(filename, 'rb'***REMOVED***
        fd.seek(2880 * 2***REMOVED***
        r1 = np.rec.fromfile(fd, formats='f8,i4,a5', shape=3, byteorder='big'***REMOVED***
        fd.seek(2880 * 2***REMOVED***
        r2 = np.rec.array(fd, formats='f8,i4,a5', shape=3, byteorder='big'***REMOVED***
        fd.close(***REMOVED***
        assert_equal(r1, r2***REMOVED***

    def test_recarray_from_obj(self***REMOVED***:
        count = 10
        a = np.zeros(count, dtype='O'***REMOVED***
        b = np.zeros(count, dtype='f8'***REMOVED***
        c = np.zeros(count, dtype='f8'***REMOVED***
        for i in range(len(a***REMOVED******REMOVED***:
            a[i***REMOVED*** = list(range(1, 10***REMOVED******REMOVED***

        mine = np.rec.fromarrays([a, b, c***REMOVED***, names='date,data1,data2'***REMOVED***
        for i in range(len(a***REMOVED******REMOVED***:
            assert_((mine.date[i***REMOVED*** == list(range(1, 10***REMOVED******REMOVED******REMOVED******REMOVED***
            assert_((mine.data1[i***REMOVED*** == 0.0***REMOVED******REMOVED***
            assert_((mine.data2[i***REMOVED*** == 0.0***REMOVED******REMOVED***

    def test_recarray_from_repr(self***REMOVED***:
        a = np.array([(1,'ABC'***REMOVED***, (2, "DEF"***REMOVED******REMOVED***,
                     dtype=[('foo', int***REMOVED***, ('bar', 'S4'***REMOVED******REMOVED******REMOVED***
        recordarr = np.rec.array(a***REMOVED***
        recarr = a.view(np.recarray***REMOVED***
        recordview = a.view(np.dtype((np.record, a.dtype***REMOVED******REMOVED******REMOVED***

        recordarr_r = eval("numpy." + repr(recordarr***REMOVED***, {'numpy': np***REMOVED******REMOVED***
        recarr_r = eval("numpy." + repr(recarr***REMOVED***, {'numpy': np***REMOVED******REMOVED***
        recordview_r = eval("numpy." + repr(recordview***REMOVED***, {'numpy': np***REMOVED******REMOVED***

        assert_equal(type(recordarr_r***REMOVED***, np.recarray***REMOVED***
        assert_equal(recordarr_r.dtype.type, np.record***REMOVED***
        assert_equal(recordarr, recordarr_r***REMOVED***

        assert_equal(type(recarr_r***REMOVED***, np.recarray***REMOVED***
        assert_equal(recarr_r.dtype.type, np.record***REMOVED***
        assert_equal(recarr, recarr_r***REMOVED***

        assert_equal(type(recordview_r***REMOVED***, np.ndarray***REMOVED***
        assert_equal(recordview.dtype.type, np.record***REMOVED***
        assert_equal(recordview, recordview_r***REMOVED***

    def test_recarray_views(self***REMOVED***:
        a = np.array([(1,'ABC'***REMOVED***, (2, "DEF"***REMOVED******REMOVED***,
                     dtype=[('foo', int***REMOVED***, ('bar', 'S4'***REMOVED******REMOVED******REMOVED***
        b = np.array([1,2,3,4,5***REMOVED***, dtype=np.int64***REMOVED***

        #check that np.rec.array gives right dtypes
        assert_equal(np.rec.array(a***REMOVED***.dtype.type, np.record***REMOVED***
        assert_equal(type(np.rec.array(a***REMOVED******REMOVED***, np.recarray***REMOVED***
        assert_equal(np.rec.array(b***REMOVED***.dtype.type, np.int64***REMOVED***
        assert_equal(type(np.rec.array(b***REMOVED******REMOVED***, np.recarray***REMOVED***

        #check that viewing as recarray does the same
        assert_equal(a.view(np.recarray***REMOVED***.dtype.type, np.record***REMOVED***
        assert_equal(type(a.view(np.recarray***REMOVED******REMOVED***, np.recarray***REMOVED***
        assert_equal(b.view(np.recarray***REMOVED***.dtype.type, np.int64***REMOVED***
        assert_equal(type(b.view(np.recarray***REMOVED******REMOVED***, np.recarray***REMOVED***

        #check that view to non-structured dtype preserves type=np.recarray
        r = np.rec.array(np.ones(4, dtype="f4,i4"***REMOVED******REMOVED***
        rv = r.view('f8'***REMOVED***.view('f4,i4'***REMOVED***
        assert_equal(type(rv***REMOVED***, np.recarray***REMOVED***
        assert_equal(rv.dtype.type, np.record***REMOVED***

        #check that getitem also preserves np.recarray and np.record
        r = np.rec.array(np.ones(4, dtype=[('a', 'i4'***REMOVED***, ('b', 'i4'***REMOVED***,
                                           ('c', 'i4,i4'***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_equal(r['c'***REMOVED***.dtype.type, np.record***REMOVED***
        assert_equal(type(r['c'***REMOVED******REMOVED***, np.recarray***REMOVED***
        assert_equal(r[['a', 'b'***REMOVED******REMOVED***.dtype.type, np.record***REMOVED***
        assert_equal(type(r[['a', 'b'***REMOVED******REMOVED******REMOVED***, np.recarray***REMOVED***

        #and that it preserves subclasses (gh-6949***REMOVED***
        class C(np.recarray***REMOVED***:
            pass

        c = r.view(C***REMOVED***
        assert_equal(type(c['c'***REMOVED******REMOVED***, C***REMOVED***

        # check that accessing nested structures keep record type, but
        # not for subarrays, non-void structures, non-structured voids
        test_dtype = [('a', 'f4,f4'***REMOVED***, ('b', 'V8'***REMOVED***, ('c', ('f4',2***REMOVED******REMOVED***,
                      ('d', ('i8', 'i4,i4'***REMOVED******REMOVED******REMOVED***
        r = np.rec.array([((1,1***REMOVED***, b'11111111', [1,1***REMOVED***, 1***REMOVED***,
                          ((1,1***REMOVED***, b'11111111', [1,1***REMOVED***, 1***REMOVED******REMOVED***, dtype=test_dtype***REMOVED***
        assert_equal(r.a.dtype.type, np.record***REMOVED***
        assert_equal(r.b.dtype.type, np.void***REMOVED***
        assert_equal(r.c.dtype.type, np.float32***REMOVED***
        assert_equal(r.d.dtype.type, np.int64***REMOVED***
        # check the same, but for views
        r = np.rec.array(np.ones(4, dtype='i4,i4'***REMOVED******REMOVED***
        assert_equal(r.view('f4,f4'***REMOVED***.dtype.type, np.record***REMOVED***
        assert_equal(r.view(('i4',2***REMOVED******REMOVED***.dtype.type, np.int32***REMOVED***
        assert_equal(r.view('V8'***REMOVED***.dtype.type, np.void***REMOVED***
        assert_equal(r.view(('i8', 'i4,i4'***REMOVED******REMOVED***.dtype.type, np.int64***REMOVED***

        #check that we can undo the view
        arrs = [np.ones(4, dtype='f4,i4'***REMOVED***, np.ones(4, dtype='f8'***REMOVED******REMOVED***
        for arr in arrs:
            rec = np.rec.array(arr***REMOVED***
            # recommended way to view as an ndarray:
            arr2 = rec.view(rec.dtype.fields or rec.dtype, np.ndarray***REMOVED***
            assert_equal(arr2.dtype.type, arr.dtype.type***REMOVED***
            assert_equal(type(arr2***REMOVED***, type(arr***REMOVED******REMOVED***

    def test_recarray_repr(self***REMOVED***:
        # make sure non-structured dtypes also show up as rec.array
        a = np.array(np.ones(4, dtype='f8'***REMOVED******REMOVED***
        assert_(repr(np.rec.array(a***REMOVED******REMOVED***.startswith('rec.array'***REMOVED******REMOVED***

        # check that the 'np.record' part of the dtype isn't shown
        a = np.rec.array(np.ones(3, dtype='i4,i4'***REMOVED******REMOVED***
        assert_equal(repr(a***REMOVED***.find('numpy.record'***REMOVED***, -1***REMOVED***
        a = np.rec.array(np.ones(3, dtype='i4'***REMOVED******REMOVED***
        assert_(repr(a***REMOVED***.find('dtype=int32'***REMOVED*** != -1***REMOVED***

    def test_recarray_from_names(self***REMOVED***:
        ra = np.rec.array([
            (1, 'abc', 3.7000002861022949, 0***REMOVED***,
            (2, 'xy', 6.6999998092651367, 1***REMOVED***,
            (0, ' ', 0.40000000596046448, 0***REMOVED******REMOVED***,
                       names='c1, c2, c3, c4'***REMOVED***
        pa = np.rec.fromrecords([
            (1, 'abc', 3.7000002861022949, 0***REMOVED***,
            (2, 'xy', 6.6999998092651367, 1***REMOVED***,
            (0, ' ', 0.40000000596046448, 0***REMOVED******REMOVED***,
                       names='c1, c2, c3, c4'***REMOVED***
        assert_(ra.dtype == pa.dtype***REMOVED***
        assert_(ra.shape == pa.shape***REMOVED***
        for k in range(len(ra***REMOVED******REMOVED***:
            assert_(ra[k***REMOVED***.item(***REMOVED*** == pa[k***REMOVED***.item(***REMOVED******REMOVED***

    def test_recarray_conflict_fields(self***REMOVED***:
        ra = np.rec.array([(1, 'abc', 2.3***REMOVED***, (2, 'xyz', 4.2***REMOVED***,
                        (3, 'wrs', 1.3***REMOVED******REMOVED***,
                       names='field, shape, mean'***REMOVED***
        ra.mean = [1.1, 2.2, 3.3***REMOVED***
        assert_array_almost_equal(ra['mean'***REMOVED***, [1.1, 2.2, 3.3***REMOVED******REMOVED***
        assert_(type(ra.mean***REMOVED*** is type(ra.var***REMOVED******REMOVED***
        ra.shape = (1, 3***REMOVED***
        assert_(ra.shape == (1, 3***REMOVED******REMOVED***
        ra.shape = ['A', 'B', 'C'***REMOVED***
        assert_array_equal(ra['shape'***REMOVED***, [['A', 'B', 'C'***REMOVED******REMOVED******REMOVED***
        ra.field = 5
        assert_array_equal(ra['field'***REMOVED***, [[5, 5, 5***REMOVED******REMOVED******REMOVED***
        assert_(isinstance(ra.field, collections.Callable***REMOVED******REMOVED***

    def test_fromrecords_with_explicit_dtype(self***REMOVED***:
        a = np.rec.fromrecords([(1, 'a'***REMOVED***, (2, 'bbb'***REMOVED******REMOVED***,
                                dtype=[('a', int***REMOVED***, ('b', np.object***REMOVED******REMOVED******REMOVED***
        assert_equal(a.a, [1, 2***REMOVED******REMOVED***
        assert_equal(a[0***REMOVED***.a, 1***REMOVED***
        assert_equal(a.b, ['a', 'bbb'***REMOVED******REMOVED***
        assert_equal(a[-1***REMOVED***.b, 'bbb'***REMOVED***
        #
        ndtype = np.dtype([('a', int***REMOVED***, ('b', np.object***REMOVED******REMOVED******REMOVED***
        a = np.rec.fromrecords([(1, 'a'***REMOVED***, (2, 'bbb'***REMOVED******REMOVED***, dtype=ndtype***REMOVED***
        assert_equal(a.a, [1, 2***REMOVED******REMOVED***
        assert_equal(a[0***REMOVED***.a, 1***REMOVED***
        assert_equal(a.b, ['a', 'bbb'***REMOVED******REMOVED***
        assert_equal(a[-1***REMOVED***.b, 'bbb'***REMOVED***

    def test_recarray_stringtypes(self***REMOVED***:
        # Issue #3993
        a = np.array([('abc ', 1***REMOVED***, ('abc', 2***REMOVED******REMOVED***,
                     dtype=[('foo', 'S4'***REMOVED***, ('bar', int***REMOVED******REMOVED******REMOVED***
        a = a.view(np.recarray***REMOVED***
        assert_equal(a.foo[0***REMOVED*** == a.foo[1***REMOVED***, False***REMOVED***

    def test_recarray_returntypes(self***REMOVED***:
        qux_fields = {'C': (np.dtype('S5'***REMOVED***, 0***REMOVED***, 'D': (np.dtype('S5'***REMOVED***, 6***REMOVED******REMOVED***
        a = np.rec.array([('abc ', (1,1***REMOVED***, 1, ('abcde', 'fgehi'***REMOVED******REMOVED***,
                          ('abc', (2,3***REMOVED***, 1, ('abcde', 'jklmn'***REMOVED******REMOVED******REMOVED***,
                         dtype=[('foo', 'S4'***REMOVED***,
                                ('bar', [('A', int***REMOVED***, ('B', int***REMOVED******REMOVED******REMOVED***,
                                ('baz', int***REMOVED***, ('qux', qux_fields***REMOVED******REMOVED******REMOVED***
        assert_equal(type(a.foo***REMOVED***, np.ndarray***REMOVED***
        assert_equal(type(a['foo'***REMOVED******REMOVED***, np.ndarray***REMOVED***
        assert_equal(type(a.bar***REMOVED***, np.recarray***REMOVED***
        assert_equal(type(a['bar'***REMOVED******REMOVED***, np.recarray***REMOVED***
        assert_equal(a.bar.dtype.type, np.record***REMOVED***
        assert_equal(type(a['qux'***REMOVED******REMOVED***, np.recarray***REMOVED***
        assert_equal(a.qux.dtype.type, np.record***REMOVED***
        assert_equal(dict(a.qux.dtype.fields***REMOVED***, qux_fields***REMOVED***
        assert_equal(type(a.baz***REMOVED***, np.ndarray***REMOVED***
        assert_equal(type(a['baz'***REMOVED******REMOVED***, np.ndarray***REMOVED***
        assert_equal(type(a[0***REMOVED***.bar***REMOVED***, np.record***REMOVED***
        assert_equal(type(a[0***REMOVED***['bar'***REMOVED******REMOVED***, np.record***REMOVED***
        assert_equal(a[0***REMOVED***.bar.A, 1***REMOVED***
        assert_equal(a[0***REMOVED***.bar['A'***REMOVED***, 1***REMOVED***
        assert_equal(a[0***REMOVED***['bar'***REMOVED***.A, 1***REMOVED***
        assert_equal(a[0***REMOVED***['bar'***REMOVED***['A'***REMOVED***, 1***REMOVED***
        assert_equal(a[0***REMOVED***.qux.D, asbytes('fgehi'***REMOVED******REMOVED***
        assert_equal(a[0***REMOVED***.qux['D'***REMOVED***, asbytes('fgehi'***REMOVED******REMOVED***
        assert_equal(a[0***REMOVED***['qux'***REMOVED***.D, asbytes('fgehi'***REMOVED******REMOVED***
        assert_equal(a[0***REMOVED***['qux'***REMOVED***['D'***REMOVED***, asbytes('fgehi'***REMOVED******REMOVED***


class TestRecord(TestCase***REMOVED***:
    def setUp(self***REMOVED***:
        self.data = np.rec.fromrecords([(1, 2, 3***REMOVED***, (4, 5, 6***REMOVED******REMOVED***,
                            dtype=[("col1", "<i4"***REMOVED***,
                                   ("col2", "<i4"***REMOVED***,
                                   ("col3", "<i4"***REMOVED******REMOVED******REMOVED***

    def test_assignment1(self***REMOVED***:
        a = self.data
        assert_equal(a.col1[0***REMOVED***, 1***REMOVED***
        a[0***REMOVED***.col1 = 0
        assert_equal(a.col1[0***REMOVED***, 0***REMOVED***

    def test_assignment2(self***REMOVED***:
        a = self.data
        assert_equal(a.col1[0***REMOVED***, 1***REMOVED***
        a.col1[0***REMOVED*** = 0
        assert_equal(a.col1[0***REMOVED***, 0***REMOVED***

    def test_invalid_assignment(self***REMOVED***:
        a = self.data

        def assign_invalid_column(x***REMOVED***:
            x[0***REMOVED***.col5 = 1

        self.assertRaises(AttributeError, assign_invalid_column, a***REMOVED***

    def test_out_of_order_fields(self***REMOVED***:
        ***REMOVED***Ticket #1431.***REMOVED***
        x = self.data[['col1', 'col2'***REMOVED******REMOVED***
        y = self.data[['col2', 'col1'***REMOVED******REMOVED***
        assert_equal(x[0***REMOVED***[0***REMOVED***, y[0***REMOVED***[1***REMOVED******REMOVED***

    def test_pickle_1(self***REMOVED***:
        # Issue #1529
        a = np.array([(1, [***REMOVED******REMOVED******REMOVED***, dtype=[('a', np.int32***REMOVED***, ('b', np.int32, 0***REMOVED******REMOVED******REMOVED***
        assert_equal(a, pickle.loads(pickle.dumps(a***REMOVED******REMOVED******REMOVED***
        assert_equal(a[0***REMOVED***, pickle.loads(pickle.dumps(a[0***REMOVED******REMOVED******REMOVED******REMOVED***

    def test_pickle_2(self***REMOVED***:
        a = self.data
        assert_equal(a, pickle.loads(pickle.dumps(a***REMOVED******REMOVED******REMOVED***
        assert_equal(a[0***REMOVED***, pickle.loads(pickle.dumps(a[0***REMOVED******REMOVED******REMOVED******REMOVED***

    def test_objview_record(self***REMOVED***:
        # https://github.com/numpy/numpy/issues/2599
        dt = np.dtype([('foo', 'i8'***REMOVED***, ('bar', 'O'***REMOVED******REMOVED******REMOVED***
        r = np.zeros((1,3***REMOVED***, dtype=dt***REMOVED***.view(np.recarray***REMOVED***
        r.foo = np.array([1, 2, 3***REMOVED******REMOVED***  # TypeError?

        # https://github.com/numpy/numpy/issues/3256
        ra = np.recarray((2,***REMOVED***, dtype=[('x', object***REMOVED***, ('y', float***REMOVED***, ('z', int***REMOVED******REMOVED******REMOVED***
        ra[['x','y'***REMOVED******REMOVED***  # TypeError?

    def test_record_scalar_setitem(self***REMOVED***:
        # https://github.com/numpy/numpy/issues/3561
        rec = np.recarray(1, dtype=[('x', float, 5***REMOVED******REMOVED******REMOVED***
        rec[0***REMOVED***.x = 1
        assert_equal(rec[0***REMOVED***.x, np.ones(5***REMOVED******REMOVED***

    def test_missing_field(self***REMOVED***:
        # https://github.com/numpy/numpy/issues/4806
        arr = np.zeros((3,***REMOVED***, dtype=[('x', int***REMOVED***, ('y', int***REMOVED******REMOVED******REMOVED***
        assert_raises(ValueError, lambda: arr[['nofield'***REMOVED******REMOVED******REMOVED***

def test_find_duplicate(***REMOVED***:
    l1 = [1, 2, 3, 4, 5, 6***REMOVED***
    assert_(np.rec.find_duplicate(l1***REMOVED*** == [***REMOVED******REMOVED***

    l2 = [1, 2, 1, 4, 5, 6***REMOVED***
    assert_(np.rec.find_duplicate(l2***REMOVED*** == [1***REMOVED******REMOVED***

    l3 = [1, 2, 1, 4, 1, 6, 2, 3***REMOVED***
    assert_(np.rec.find_duplicate(l3***REMOVED*** == [1, 2***REMOVED******REMOVED***

    l3 = [2, 2, 1, 4, 1, 6, 2, 3***REMOVED***
    assert_(np.rec.find_duplicate(l3***REMOVED*** == [2, 1***REMOVED******REMOVED***

if __name__ == "__main__":
    run_module_suite(***REMOVED***
