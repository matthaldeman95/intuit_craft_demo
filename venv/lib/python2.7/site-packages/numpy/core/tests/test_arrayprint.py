#!/usr/bin/python
# -*- coding: utf-8 -*-
from __future__ import division, absolute_import, print_function

import sys

import numpy as np
from numpy.compat import sixu
from numpy.testing import (
     TestCase, run_module_suite, assert_, assert_equal
***REMOVED***

class TestArrayRepr(object***REMOVED***:
    def test_nan_inf(self***REMOVED***:
        x = np.array([np.nan, np.inf***REMOVED******REMOVED***
        assert_equal(repr(x***REMOVED***, 'array([ nan,  inf***REMOVED******REMOVED***'***REMOVED***

class TestComplexArray(TestCase***REMOVED***:
    def test_str(self***REMOVED***:
        rvals = [0, 1, -1, np.inf, -np.inf, np.nan***REMOVED***
        cvals = [complex(rp, ip***REMOVED*** for rp in rvals for ip in rvals***REMOVED***
        dtypes = [np.complex64, np.cdouble, np.clongdouble***REMOVED***
        actual = [str(np.array([c***REMOVED***, dt***REMOVED******REMOVED*** for c in cvals for dt in dtypes***REMOVED***
        wanted = [
            '[ 0.+0.j***REMOVED***',    '[ 0.+0.j***REMOVED***',    '[ 0.0+0.0j***REMOVED***',
            '[ 0.+1.j***REMOVED***',    '[ 0.+1.j***REMOVED***',    '[ 0.0+1.0j***REMOVED***',
            '[ 0.-1.j***REMOVED***',    '[ 0.-1.j***REMOVED***',    '[ 0.0-1.0j***REMOVED***',
            '[ 0.+infj***REMOVED***',   '[ 0.+infj***REMOVED***',   '[ 0.0+infj***REMOVED***',
            '[ 0.-infj***REMOVED***',   '[ 0.-infj***REMOVED***',   '[ 0.0-infj***REMOVED***',
            '[ 0.+nanj***REMOVED***',   '[ 0.+nanj***REMOVED***',   '[ 0.0+nanj***REMOVED***',
            '[ 1.+0.j***REMOVED***',    '[ 1.+0.j***REMOVED***',    '[ 1.0+0.0j***REMOVED***',
            '[ 1.+1.j***REMOVED***',    '[ 1.+1.j***REMOVED***',    '[ 1.0+1.0j***REMOVED***',
            '[ 1.-1.j***REMOVED***',    '[ 1.-1.j***REMOVED***',    '[ 1.0-1.0j***REMOVED***',
            '[ 1.+infj***REMOVED***',   '[ 1.+infj***REMOVED***',   '[ 1.0+infj***REMOVED***',
            '[ 1.-infj***REMOVED***',   '[ 1.-infj***REMOVED***',   '[ 1.0-infj***REMOVED***',
            '[ 1.+nanj***REMOVED***',   '[ 1.+nanj***REMOVED***',   '[ 1.0+nanj***REMOVED***',
            '[-1.+0.j***REMOVED***',    '[-1.+0.j***REMOVED***',    '[-1.0+0.0j***REMOVED***',
            '[-1.+1.j***REMOVED***',    '[-1.+1.j***REMOVED***',    '[-1.0+1.0j***REMOVED***',
            '[-1.-1.j***REMOVED***',    '[-1.-1.j***REMOVED***',    '[-1.0-1.0j***REMOVED***',
            '[-1.+infj***REMOVED***',   '[-1.+infj***REMOVED***',   '[-1.0+infj***REMOVED***',
            '[-1.-infj***REMOVED***',   '[-1.-infj***REMOVED***',   '[-1.0-infj***REMOVED***',
            '[-1.+nanj***REMOVED***',   '[-1.+nanj***REMOVED***',   '[-1.0+nanj***REMOVED***',
            '[ inf+0.j***REMOVED***',   '[ inf+0.j***REMOVED***',   '[ inf+0.0j***REMOVED***',
            '[ inf+1.j***REMOVED***',   '[ inf+1.j***REMOVED***',   '[ inf+1.0j***REMOVED***',
            '[ inf-1.j***REMOVED***',   '[ inf-1.j***REMOVED***',   '[ inf-1.0j***REMOVED***',
            '[ inf+infj***REMOVED***',  '[ inf+infj***REMOVED***',  '[ inf+infj***REMOVED***',
            '[ inf-infj***REMOVED***',  '[ inf-infj***REMOVED***',  '[ inf-infj***REMOVED***',
            '[ inf+nanj***REMOVED***',  '[ inf+nanj***REMOVED***',  '[ inf+nanj***REMOVED***',
            '[-inf+0.j***REMOVED***',   '[-inf+0.j***REMOVED***',   '[-inf+0.0j***REMOVED***',
            '[-inf+1.j***REMOVED***',   '[-inf+1.j***REMOVED***',   '[-inf+1.0j***REMOVED***',
            '[-inf-1.j***REMOVED***',   '[-inf-1.j***REMOVED***',   '[-inf-1.0j***REMOVED***',
            '[-inf+infj***REMOVED***',  '[-inf+infj***REMOVED***',  '[-inf+infj***REMOVED***',
            '[-inf-infj***REMOVED***',  '[-inf-infj***REMOVED***',  '[-inf-infj***REMOVED***',
            '[-inf+nanj***REMOVED***',  '[-inf+nanj***REMOVED***',  '[-inf+nanj***REMOVED***',
            '[ nan+0.j***REMOVED***',   '[ nan+0.j***REMOVED***',   '[ nan+0.0j***REMOVED***',
            '[ nan+1.j***REMOVED***',   '[ nan+1.j***REMOVED***',   '[ nan+1.0j***REMOVED***',
            '[ nan-1.j***REMOVED***',   '[ nan-1.j***REMOVED***',   '[ nan-1.0j***REMOVED***',
            '[ nan+infj***REMOVED***',  '[ nan+infj***REMOVED***',  '[ nan+infj***REMOVED***',
            '[ nan-infj***REMOVED***',  '[ nan-infj***REMOVED***',  '[ nan-infj***REMOVED***',
            '[ nan+nanj***REMOVED***',  '[ nan+nanj***REMOVED***',  '[ nan+nanj***REMOVED***'***REMOVED***

        for res, val in zip(actual, wanted***REMOVED***:
            assert_(res == val***REMOVED***

class TestArray2String(TestCase***REMOVED***:
    def test_basic(self***REMOVED***:
        ***REMOVED***Basic test of array2string.***REMOVED***
        a = np.arange(3***REMOVED***
        assert_(np.array2string(a***REMOVED*** == '[0 1 2***REMOVED***'***REMOVED***
        assert_(np.array2string(a, max_line_width=4***REMOVED*** == '[0 1\n 2***REMOVED***'***REMOVED***

    def test_style_keyword(self***REMOVED***:
        ***REMOVED***This should only apply to 0-D arrays. See #1218.***REMOVED***
        stylestr = np.array2string(np.array(1.5***REMOVED***,
                                   style=lambda x: "Value in 0-D array: " + str(x***REMOVED******REMOVED***
        assert_(stylestr == 'Value in 0-D array: 1.5'***REMOVED***

    def test_format_function(self***REMOVED***:
        ***REMOVED***Test custom format function for each element in array.***REMOVED***
        def _format_function(x***REMOVED***:
            if np.abs(x***REMOVED*** < 1:
                return '.'
            elif np.abs(x***REMOVED*** < 2:
                return 'o'
            else:
                return 'O'

        x = np.arange(3***REMOVED***
        if sys.version_info[0***REMOVED*** >= 3:
            x_hex = "[0x0 0x1 0x2***REMOVED***"
            x_oct = "[0o0 0o1 0o2***REMOVED***"
        else:
            x_hex = "[0x0L 0x1L 0x2L***REMOVED***"
            x_oct = "[0L 01L 02L***REMOVED***"
        assert_(np.array2string(x, formatter={'all':_format_function***REMOVED******REMOVED*** ==
                "[. o O***REMOVED***"***REMOVED***
        assert_(np.array2string(x, formatter={'int_kind':_format_function***REMOVED******REMOVED*** ==
                "[. o O***REMOVED***"***REMOVED***
        assert_(np.array2string(x, formatter={'all':lambda x: "%.4f" % x***REMOVED******REMOVED*** ==
                "[0.0000 1.0000 2.0000***REMOVED***"***REMOVED***
        assert_equal(np.array2string(x, formatter={'int':lambda x: hex(x***REMOVED******REMOVED******REMOVED***,
                x_hex***REMOVED***
        assert_equal(np.array2string(x, formatter={'int':lambda x: oct(x***REMOVED******REMOVED******REMOVED***,
                x_oct***REMOVED***

        x = np.arange(3.***REMOVED***
        assert_(np.array2string(x, formatter={'float_kind':lambda x: "%.2f" % x***REMOVED******REMOVED*** ==
                "[0.00 1.00 2.00***REMOVED***"***REMOVED***
        assert_(np.array2string(x, formatter={'float':lambda x: "%.2f" % x***REMOVED******REMOVED*** ==
                "[0.00 1.00 2.00***REMOVED***"***REMOVED***

        s = np.array(['abc', 'def'***REMOVED******REMOVED***
        assert_(np.array2string(s, formatter={'numpystr':lambda s: s*2***REMOVED******REMOVED*** ==
                '[abcabc defdef***REMOVED***'***REMOVED***


class TestPrintOptions:
    ***REMOVED***Test getting and setting global print options.***REMOVED***

    def setUp(self***REMOVED***:
        self.oldopts = np.get_printoptions(***REMOVED***

    def tearDown(self***REMOVED***:
        np.set_printoptions(**self.oldopts***REMOVED***

    def test_basic(self***REMOVED***:
        x = np.array([1.5, 0, 1.234567890***REMOVED******REMOVED***
        assert_equal(repr(x***REMOVED***, "array([ 1.5       ,  0.        ,  1.23456789***REMOVED******REMOVED***"***REMOVED***
        np.set_printoptions(precision=4***REMOVED***
        assert_equal(repr(x***REMOVED***, "array([ 1.5   ,  0.    ,  1.2346***REMOVED******REMOVED***"***REMOVED***

    def test_formatter(self***REMOVED***:
        x = np.arange(3***REMOVED***
        np.set_printoptions(formatter={'all':lambda x: str(x-1***REMOVED******REMOVED******REMOVED***
        assert_equal(repr(x***REMOVED***, "array([-1, 0, 1***REMOVED******REMOVED***"***REMOVED***

    def test_formatter_reset(self***REMOVED***:
        x = np.arange(3***REMOVED***
        np.set_printoptions(formatter={'all':lambda x: str(x-1***REMOVED******REMOVED******REMOVED***
        assert_equal(repr(x***REMOVED***, "array([-1, 0, 1***REMOVED******REMOVED***"***REMOVED***
        np.set_printoptions(formatter={'int':None***REMOVED******REMOVED***
        assert_equal(repr(x***REMOVED***, "array([0, 1, 2***REMOVED******REMOVED***"***REMOVED***

        np.set_printoptions(formatter={'all':lambda x: str(x-1***REMOVED******REMOVED******REMOVED***
        assert_equal(repr(x***REMOVED***, "array([-1, 0, 1***REMOVED******REMOVED***"***REMOVED***
        np.set_printoptions(formatter={'all':None***REMOVED******REMOVED***
        assert_equal(repr(x***REMOVED***, "array([0, 1, 2***REMOVED******REMOVED***"***REMOVED***

        np.set_printoptions(formatter={'int':lambda x: str(x-1***REMOVED******REMOVED******REMOVED***
        assert_equal(repr(x***REMOVED***, "array([-1, 0, 1***REMOVED******REMOVED***"***REMOVED***
        np.set_printoptions(formatter={'int_kind':None***REMOVED******REMOVED***
        assert_equal(repr(x***REMOVED***, "array([0, 1, 2***REMOVED******REMOVED***"***REMOVED***

        x = np.arange(3.***REMOVED***
        np.set_printoptions(formatter={'float':lambda x: str(x-1***REMOVED******REMOVED******REMOVED***
        assert_equal(repr(x***REMOVED***, "array([-1.0, 0.0, 1.0***REMOVED******REMOVED***"***REMOVED***
        np.set_printoptions(formatter={'float_kind':None***REMOVED******REMOVED***
        assert_equal(repr(x***REMOVED***, "array([ 0.,  1.,  2.***REMOVED******REMOVED***"***REMOVED***

def test_unicode_object_array(***REMOVED***:
    import sys
    if sys.version_info[0***REMOVED*** >= 3:
        expected = "array(['é'***REMOVED***, dtype=object***REMOVED***"
    else:
        expected = "array([u'\\xe9'***REMOVED***, dtype=object***REMOVED***"
    x = np.array([sixu('\xe9'***REMOVED******REMOVED***, dtype=object***REMOVED***
    assert_equal(repr(x***REMOVED***, expected***REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
