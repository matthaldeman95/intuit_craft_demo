from __future__ import division, absolute_import, print_function

import collections
import tempfile
import sys
import shutil
import warnings
import operator
import io
import itertools
import ctypes
***REMOVED***
if sys.version_info[0***REMOVED*** >= 3:
    import builtins
else:
    import __builtin__ as builtins
from decimal import Decimal


import numpy as np
from numpy.compat import asbytes, getexception, strchar, unicode, sixu
from test_print import in_foreign_locale
from numpy.core.multiarray_tests import (
    test_neighborhood_iterator, test_neighborhood_iterator_oob,
    test_pydatamem_seteventhook_start, test_pydatamem_seteventhook_end,
    test_inplace_increment, get_buffer_info, test_as_c_array
    ***REMOVED***
from numpy.testing import (
    TestCase, run_module_suite, assert_, assert_raises,
    assert_equal, assert_almost_equal, assert_array_equal,
    assert_array_almost_equal, assert_allclose,
    assert_array_less, runstring, dec, SkipTest
    ***REMOVED***

# Need to test an object that does not fully implement math interface
from datetime import timedelta


if sys.version_info[:2***REMOVED*** > (3, 2***REMOVED***:
    # In Python 3.3 the representation of empty shape, strides and sub-offsets
    # is an empty tuple instead of None.
    # http://docs.python.org/dev/whatsnew/3.3.html#api-changes
    EMPTY = (***REMOVED***
else:
    EMPTY = None


class TestFlags(TestCase***REMOVED***:
    def setUp(self***REMOVED***:
        self.a = np.arange(10***REMOVED***

    def test_writeable(self***REMOVED***:
        mydict = locals(***REMOVED***
        self.a.flags.writeable = False
        self.assertRaises(ValueError, runstring, 'self.a[0***REMOVED*** = 3', mydict***REMOVED***
        self.assertRaises(ValueError, runstring, 'self.a[0:1***REMOVED***.itemset(3***REMOVED***', mydict***REMOVED***
        self.a.flags.writeable = True
        self.a[0***REMOVED*** = 5
        self.a[0***REMOVED*** = 0

    def test_otherflags(self***REMOVED***:
        assert_equal(self.a.flags.carray, True***REMOVED***
        assert_equal(self.a.flags.farray, False***REMOVED***
        assert_equal(self.a.flags.behaved, True***REMOVED***
        assert_equal(self.a.flags.fnc, False***REMOVED***
        assert_equal(self.a.flags.forc, True***REMOVED***
        assert_equal(self.a.flags.owndata, True***REMOVED***
        assert_equal(self.a.flags.writeable, True***REMOVED***
        assert_equal(self.a.flags.aligned, True***REMOVED***
        assert_equal(self.a.flags.updateifcopy, False***REMOVED***

    def test_string_align(self***REMOVED***:
        a = np.zeros(4, dtype=np.dtype('|S4'***REMOVED******REMOVED***
        assert_(a.flags.aligned***REMOVED***
        # not power of two are accessed byte-wise and thus considered aligned
        a = np.zeros(5, dtype=np.dtype('|S4'***REMOVED******REMOVED***
        assert_(a.flags.aligned***REMOVED***

    def test_void_align(self***REMOVED***:
        a = np.zeros(4, dtype=np.dtype([("a", "i4"***REMOVED***, ("b", "i4"***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_(a.flags.aligned***REMOVED***


class TestHash(TestCase***REMOVED***:
    # see #3793
    def test_int(self***REMOVED***:
        for st, ut, s in [(np.int8, np.uint8, 8***REMOVED***,
                          (np.int16, np.uint16, 16***REMOVED***,
                          (np.int32, np.uint32, 32***REMOVED***,
                          (np.int64, np.uint64, 64***REMOVED******REMOVED***:
            for i in range(1, s***REMOVED***:
                assert_equal(hash(st(-2**i***REMOVED******REMOVED***, hash(-2**i***REMOVED***,
                             err_msg="%r: -2**%d" % (st, i***REMOVED******REMOVED***
                assert_equal(hash(st(2**(i - 1***REMOVED******REMOVED******REMOVED***, hash(2**(i - 1***REMOVED******REMOVED***,
                             err_msg="%r: 2**%d" % (st, i - 1***REMOVED******REMOVED***
                assert_equal(hash(st(2**i - 1***REMOVED******REMOVED***, hash(2**i - 1***REMOVED***,
                             err_msg="%r: 2**%d - 1" % (st, i***REMOVED******REMOVED***

                i = max(i - 1, 1***REMOVED***
                assert_equal(hash(ut(2**(i - 1***REMOVED******REMOVED******REMOVED***, hash(2**(i - 1***REMOVED******REMOVED***,
                             err_msg="%r: 2**%d" % (ut, i - 1***REMOVED******REMOVED***
                assert_equal(hash(ut(2**i - 1***REMOVED******REMOVED***, hash(2**i - 1***REMOVED***,
                             err_msg="%r: 2**%d - 1" % (ut, i***REMOVED******REMOVED***


class TestAttributes(TestCase***REMOVED***:
    def setUp(self***REMOVED***:
        self.one = np.arange(10***REMOVED***
        self.two = np.arange(20***REMOVED***.reshape(4, 5***REMOVED***
        self.three = np.arange(60, dtype=np.float64***REMOVED***.reshape(2, 5, 6***REMOVED***

    def test_attributes(self***REMOVED***:
        assert_equal(self.one.shape, (10,***REMOVED******REMOVED***
        assert_equal(self.two.shape, (4, 5***REMOVED******REMOVED***
        assert_equal(self.three.shape, (2, 5, 6***REMOVED******REMOVED***
        self.three.shape = (10, 3, 2***REMOVED***
        assert_equal(self.three.shape, (10, 3, 2***REMOVED******REMOVED***
        self.three.shape = (2, 5, 6***REMOVED***
        assert_equal(self.one.strides, (self.one.itemsize,***REMOVED******REMOVED***
        num = self.two.itemsize
        assert_equal(self.two.strides, (5*num, num***REMOVED******REMOVED***
        num = self.three.itemsize
        assert_equal(self.three.strides, (30*num, 6*num, num***REMOVED******REMOVED***
        assert_equal(self.one.ndim, 1***REMOVED***
        assert_equal(self.two.ndim, 2***REMOVED***
        assert_equal(self.three.ndim, 3***REMOVED***
        num = self.two.itemsize
        assert_equal(self.two.size, 20***REMOVED***
        assert_equal(self.two.nbytes, 20*num***REMOVED***
        assert_equal(self.two.itemsize, self.two.dtype.itemsize***REMOVED***
        assert_equal(self.two.base, np.arange(20***REMOVED******REMOVED***

    def test_dtypeattr(self***REMOVED***:
        assert_equal(self.one.dtype, np.dtype(np.int_***REMOVED******REMOVED***
        assert_equal(self.three.dtype, np.dtype(np.float_***REMOVED******REMOVED***
        assert_equal(self.one.dtype.char, 'l'***REMOVED***
        assert_equal(self.three.dtype.char, 'd'***REMOVED***
        self.assertTrue(self.three.dtype.str[0***REMOVED*** in '<>'***REMOVED***
        assert_equal(self.one.dtype.str[1***REMOVED***, 'i'***REMOVED***
        assert_equal(self.three.dtype.str[1***REMOVED***, 'f'***REMOVED***

    def test_int_subclassing(self***REMOVED***:
        # Regression test for https://github.com/numpy/numpy/pull/3526

        numpy_int = np.int_(0***REMOVED***

        if sys.version_info[0***REMOVED*** >= 3:
            # On Py3k int_ should not inherit from int, because it's not
            # fixed-width anymore
            assert_equal(isinstance(numpy_int, int***REMOVED***, False***REMOVED***
        else:
            # Otherwise, it should inherit from int...
            assert_equal(isinstance(numpy_int, int***REMOVED***, True***REMOVED***

            # ... and fast-path checks on C-API level should also work
            from numpy.core.multiarray_tests import test_int_subclass
            assert_equal(test_int_subclass(numpy_int***REMOVED***, True***REMOVED***

    def test_stridesattr(self***REMOVED***:
        x = self.one

        def make_array(size, offset, strides***REMOVED***:
            return np.ndarray(size, buffer=x, dtype=int,
                              offset=offset*x.itemsize,
                              strides=strides*x.itemsize***REMOVED***

        assert_equal(make_array(4, 4, -1***REMOVED***, np.array([4, 3, 2, 1***REMOVED******REMOVED******REMOVED***
        self.assertRaises(ValueError, make_array, 4, 4, -2***REMOVED***
        self.assertRaises(ValueError, make_array, 4, 2, -1***REMOVED***
        self.assertRaises(ValueError, make_array, 8, 3, 1***REMOVED***
        assert_equal(make_array(8, 3, 0***REMOVED***, np.array([3***REMOVED****8***REMOVED******REMOVED***
        # Check behavior reported in gh-2503:
        self.assertRaises(ValueError, make_array, (2, 3***REMOVED***, 5, np.array([-2, -3***REMOVED******REMOVED******REMOVED***
        make_array(0, 0, 10***REMOVED***

    def test_set_stridesattr(self***REMOVED***:
        x = self.one

        def make_array(size, offset, strides***REMOVED***:
            ***REMOVED***
                r = np.ndarray([size***REMOVED***, dtype=int, buffer=x,
                               offset=offset*x.itemsize***REMOVED***
            ***REMOVED***
                raise RuntimeError(getexception(***REMOVED******REMOVED***
            r.strides = strides = strides*x.itemsize
            return r

        assert_equal(make_array(4, 4, -1***REMOVED***, np.array([4, 3, 2, 1***REMOVED******REMOVED******REMOVED***
        assert_equal(make_array(7, 3, 1***REMOVED***, np.array([3, 4, 5, 6, 7, 8, 9***REMOVED******REMOVED******REMOVED***
        self.assertRaises(ValueError, make_array, 4, 4, -2***REMOVED***
        self.assertRaises(ValueError, make_array, 4, 2, -1***REMOVED***
        self.assertRaises(RuntimeError, make_array, 8, 3, 1***REMOVED***
        # Check that the true extent of the array is used.
        # Test relies on as_strided base not exposing a buffer.
        x = np.lib.stride_tricks.as_strided(np.arange(1***REMOVED***, (10, 10***REMOVED***, (0, 0***REMOVED******REMOVED***

        def set_strides(arr, strides***REMOVED***:
            arr.strides = strides

        self.assertRaises(ValueError, set_strides, x, (10*x.itemsize, x.itemsize***REMOVED******REMOVED***

        # Test for offset calculations:
        x = np.lib.stride_tricks.as_strided(np.arange(10, dtype=np.int8***REMOVED***[-1***REMOVED***,
                                                    shape=(10,***REMOVED***, strides=(-1,***REMOVED******REMOVED***
        self.assertRaises(ValueError, set_strides, x[::-1***REMOVED***, -1***REMOVED***
        a = x[::-1***REMOVED***
        a.strides = 1
        a[::2***REMOVED***.strides = 2

    def test_fill(self***REMOVED***:
        for t in "?bhilqpBHILQPfdgFDGO":
            x = np.empty((3, 2, 1***REMOVED***, t***REMOVED***
            y = np.empty((3, 2, 1***REMOVED***, t***REMOVED***
            x.fill(1***REMOVED***
            y[...***REMOVED*** = 1
            assert_equal(x, y***REMOVED***

    def test_fill_max_uint64(self***REMOVED***:
        x = np.empty((3, 2, 1***REMOVED***, dtype=np.uint64***REMOVED***
        y = np.empty((3, 2, 1***REMOVED***, dtype=np.uint64***REMOVED***
        value = 2**64 - 1
        y[...***REMOVED*** = value
        x.fill(value***REMOVED***
        assert_array_equal(x, y***REMOVED***

    def test_fill_struct_array(self***REMOVED***:
        # Filling from a scalar
        x = np.array([(0, 0.0***REMOVED***, (1, 1.0***REMOVED******REMOVED***, dtype='i4,f8'***REMOVED***
        x.fill(x[0***REMOVED******REMOVED***
        assert_equal(x['f1'***REMOVED***[1***REMOVED***, x['f1'***REMOVED***[0***REMOVED******REMOVED***
        # Filling from a tuple that can be converted
        # to a scalar
        x = np.zeros(2, dtype=[('a', 'f8'***REMOVED***, ('b', 'i4'***REMOVED******REMOVED******REMOVED***
        x.fill((3.5, -2***REMOVED******REMOVED***
        assert_array_equal(x['a'***REMOVED***, [3.5, 3.5***REMOVED******REMOVED***
        assert_array_equal(x['b'***REMOVED***, [-2, -2***REMOVED******REMOVED***


class TestArrayConstruction(TestCase***REMOVED***:
    def test_array(self***REMOVED***:
        d = np.ones(6***REMOVED***
        r = np.array([d, d***REMOVED******REMOVED***
        assert_equal(r, np.ones((2, 6***REMOVED******REMOVED******REMOVED***

        d = np.ones(6***REMOVED***
        tgt = np.ones((2, 6***REMOVED******REMOVED***
        r = np.array([d, d***REMOVED******REMOVED***
        assert_equal(r, tgt***REMOVED***
        tgt[1***REMOVED*** = 2
        r = np.array([d, d + 1***REMOVED******REMOVED***
        assert_equal(r, tgt***REMOVED***

        d = np.ones(6***REMOVED***
        r = np.array([[d, d***REMOVED******REMOVED******REMOVED***
        assert_equal(r, np.ones((1, 2, 6***REMOVED******REMOVED******REMOVED***

        d = np.ones(6***REMOVED***
        r = np.array([[d, d***REMOVED***, [d, d***REMOVED******REMOVED******REMOVED***
        assert_equal(r, np.ones((2, 2, 6***REMOVED******REMOVED******REMOVED***

        d = np.ones((6, 6***REMOVED******REMOVED***
        r = np.array([d, d***REMOVED******REMOVED***
        assert_equal(r, np.ones((2, 6, 6***REMOVED******REMOVED******REMOVED***

        d = np.ones((6, ***REMOVED******REMOVED***
        r = np.array([[d, d + 1***REMOVED***, d + 2***REMOVED******REMOVED***
        assert_equal(len(r***REMOVED***, 2***REMOVED***
        assert_equal(r[0***REMOVED***, [d, d + 1***REMOVED******REMOVED***
        assert_equal(r[1***REMOVED***, d + 2***REMOVED***

        tgt = np.ones((2, 3***REMOVED***, dtype=np.bool***REMOVED***
        tgt[0, 2***REMOVED*** = False
        tgt[1, 0:2***REMOVED*** = False
        r = np.array([[True, True, False***REMOVED***, [False, False, True***REMOVED******REMOVED******REMOVED***
        assert_equal(r, tgt***REMOVED***
        r = np.array([[True, False***REMOVED***, [True, False***REMOVED***, [False, True***REMOVED******REMOVED******REMOVED***
        assert_equal(r, tgt.T***REMOVED***

    def test_array_empty(self***REMOVED***:
        assert_raises(TypeError, np.array***REMOVED***

    def test_array_copy_false(self***REMOVED***:
        d = np.array([1, 2, 3***REMOVED******REMOVED***
        e = np.array(d, copy=False***REMOVED***
        d[1***REMOVED*** = 3
        assert_array_equal(e, [1, 3, 3***REMOVED******REMOVED***
        e = np.array(d, copy=False, order='F'***REMOVED***
        d[1***REMOVED*** = 4
        assert_array_equal(e, [1, 4, 3***REMOVED******REMOVED***
        e[2***REMOVED*** = 7
        assert_array_equal(d, [1, 4, 7***REMOVED******REMOVED***

    def test_array_copy_true(self***REMOVED***:
        d = np.array([[1,2,3***REMOVED***, [1, 2, 3***REMOVED******REMOVED******REMOVED***
        e = np.array(d, copy=True***REMOVED***
        d[0, 1***REMOVED*** = 3
        e[0, 2***REMOVED*** = -7
        assert_array_equal(e, [[1, 2, -7***REMOVED***, [1, 2, 3***REMOVED******REMOVED******REMOVED***
        assert_array_equal(d, [[1, 3, 3***REMOVED***, [1, 2, 3***REMOVED******REMOVED******REMOVED***
        e = np.array(d, copy=True, order='F'***REMOVED***
        d[0, 1***REMOVED*** = 5
        e[0, 2***REMOVED*** = 7
        assert_array_equal(e, [[1, 3, 7***REMOVED***, [1, 2, 3***REMOVED******REMOVED******REMOVED***
        assert_array_equal(d, [[1, 5, 3***REMOVED***, [1,2,3***REMOVED******REMOVED******REMOVED***

    def test_array_cont(self***REMOVED***:
        d = np.ones(10***REMOVED***[::2***REMOVED***
        assert_(np.ascontiguousarray(d***REMOVED***.flags.c_contiguous***REMOVED***
        assert_(np.ascontiguousarray(d***REMOVED***.flags.f_contiguous***REMOVED***
        assert_(np.asfortranarray(d***REMOVED***.flags.c_contiguous***REMOVED***
        assert_(np.asfortranarray(d***REMOVED***.flags.f_contiguous***REMOVED***
        d = np.ones((10, 10***REMOVED******REMOVED***[::2,::2***REMOVED***
        assert_(np.ascontiguousarray(d***REMOVED***.flags.c_contiguous***REMOVED***
        assert_(np.asfortranarray(d***REMOVED***.flags.f_contiguous***REMOVED***


class TestAssignment(TestCase***REMOVED***:
    def test_assignment_broadcasting(self***REMOVED***:
        a = np.arange(6***REMOVED***.reshape(2, 3***REMOVED***

        # Broadcasting the input to the output
        a[...***REMOVED*** = np.arange(3***REMOVED***
        assert_equal(a, [[0, 1, 2***REMOVED***, [0, 1, 2***REMOVED******REMOVED******REMOVED***
        a[...***REMOVED*** = np.arange(2***REMOVED***.reshape(2, 1***REMOVED***
        assert_equal(a, [[0, 0, 0***REMOVED***, [1, 1, 1***REMOVED******REMOVED******REMOVED***

        # For compatibility with <= 1.5, a limited version of broadcasting
        # the output to the input.
        #
        # This behavior is inconsistent with NumPy broadcasting
        # in general, because it only uses one of the two broadcasting
        # rules (adding a new "1" dimension to the left of the shape***REMOVED***,
        # applied to the output instead of an input. In NumPy 2.0, this kind
        # of broadcasting assignment will likely be disallowed.
        a[...***REMOVED*** = np.arange(6***REMOVED***[::-1***REMOVED***.reshape(1, 2, 3***REMOVED***
        assert_equal(a, [[5, 4, 3***REMOVED***, [2, 1, 0***REMOVED******REMOVED******REMOVED***
        # The other type of broadcasting would require a reduction operation.

        def assign(a, b***REMOVED***:
            a[...***REMOVED*** = b

        assert_raises(ValueError, assign, a, np.arange(12***REMOVED***.reshape(2, 2, 3***REMOVED******REMOVED***

    def test_assignment_errors(self***REMOVED***:
        # Address issue #2276
        class C:
            pass
        a = np.zeros(1***REMOVED***

        def assign(v***REMOVED***:
            a[0***REMOVED*** = v

        assert_raises((AttributeError, TypeError***REMOVED***, assign, C(***REMOVED******REMOVED***
        assert_raises(ValueError, assign, [1***REMOVED******REMOVED***


class TestDtypedescr(TestCase***REMOVED***:
    def test_construction(self***REMOVED***:
        d1 = np.dtype('i4'***REMOVED***
        assert_equal(d1, np.dtype(np.int32***REMOVED******REMOVED***
        d2 = np.dtype('f8'***REMOVED***
        assert_equal(d2, np.dtype(np.float64***REMOVED******REMOVED***

    def test_byteorders(self***REMOVED***:
        self.assertNotEqual(np.dtype('<i4'***REMOVED***, np.dtype('>i4'***REMOVED******REMOVED***
        self.assertNotEqual(np.dtype([('a', '<i4'***REMOVED******REMOVED******REMOVED***, np.dtype([('a', '>i4'***REMOVED******REMOVED******REMOVED******REMOVED***


class TestZeroRank(TestCase***REMOVED***:
    def setUp(self***REMOVED***:
        self.d = np.array(0***REMOVED***, np.array('x', object***REMOVED***

    def test_ellipsis_subscript(self***REMOVED***:
        a, b = self.d
        self.assertEqual(a[...***REMOVED***, 0***REMOVED***
        self.assertEqual(b[...***REMOVED***, 'x'***REMOVED***
        self.assertTrue(a[...***REMOVED***.base is a***REMOVED***  # `a[...***REMOVED*** is a` in numpy <1.9.
        self.assertTrue(b[...***REMOVED***.base is b***REMOVED***  # `b[...***REMOVED*** is b` in numpy <1.9.

    def test_empty_subscript(self***REMOVED***:
        a, b = self.d
        self.assertEqual(a[(***REMOVED******REMOVED***, 0***REMOVED***
        self.assertEqual(b[(***REMOVED******REMOVED***, 'x'***REMOVED***
        self.assertTrue(type(a[(***REMOVED******REMOVED******REMOVED*** is a.dtype.type***REMOVED***
        self.assertTrue(type(b[(***REMOVED******REMOVED******REMOVED*** is str***REMOVED***

    def test_invalid_subscript(self***REMOVED***:
        a, b = self.d
        self.assertRaises(IndexError, lambda x: x[0***REMOVED***, a***REMOVED***
        self.assertRaises(IndexError, lambda x: x[0***REMOVED***, b***REMOVED***
        self.assertRaises(IndexError, lambda x: x[np.array([***REMOVED***, int***REMOVED******REMOVED***, a***REMOVED***
        self.assertRaises(IndexError, lambda x: x[np.array([***REMOVED***, int***REMOVED******REMOVED***, b***REMOVED***

    def test_ellipsis_subscript_assignment(self***REMOVED***:
        a, b = self.d
        a[...***REMOVED*** = 42
        self.assertEqual(a, 42***REMOVED***
        b[...***REMOVED*** = ''
        self.assertEqual(b.item(***REMOVED***, ''***REMOVED***

    def test_empty_subscript_assignment(self***REMOVED***:
        a, b = self.d
        a[(***REMOVED******REMOVED*** = 42
        self.assertEqual(a, 42***REMOVED***
        b[(***REMOVED******REMOVED*** = ''
        self.assertEqual(b.item(***REMOVED***, ''***REMOVED***

    def test_invalid_subscript_assignment(self***REMOVED***:
        a, b = self.d

        def assign(x, i, v***REMOVED***:
            x[i***REMOVED*** = v

        self.assertRaises(IndexError, assign, a, 0, 42***REMOVED***
        self.assertRaises(IndexError, assign, b, 0, ''***REMOVED***
        self.assertRaises(ValueError, assign, a, (***REMOVED***, ''***REMOVED***

    def test_newaxis(self***REMOVED***:
        a, b = self.d
        self.assertEqual(a[np.newaxis***REMOVED***.shape, (1,***REMOVED******REMOVED***
        self.assertEqual(a[..., np.newaxis***REMOVED***.shape, (1,***REMOVED******REMOVED***
        self.assertEqual(a[np.newaxis, ...***REMOVED***.shape, (1,***REMOVED******REMOVED***
        self.assertEqual(a[..., np.newaxis***REMOVED***.shape, (1,***REMOVED******REMOVED***
        self.assertEqual(a[np.newaxis, ..., np.newaxis***REMOVED***.shape, (1, 1***REMOVED******REMOVED***
        self.assertEqual(a[..., np.newaxis, np.newaxis***REMOVED***.shape, (1, 1***REMOVED******REMOVED***
        self.assertEqual(a[np.newaxis, np.newaxis, ...***REMOVED***.shape, (1, 1***REMOVED******REMOVED***
        self.assertEqual(a[(np.newaxis,***REMOVED****10***REMOVED***.shape, (1,***REMOVED****10***REMOVED***

    def test_invalid_newaxis(self***REMOVED***:
        a, b = self.d

        def subscript(x, i***REMOVED***:
            x[i***REMOVED***

        self.assertRaises(IndexError, subscript, a, (np.newaxis, 0***REMOVED******REMOVED***
        self.assertRaises(IndexError, subscript, a, (np.newaxis,***REMOVED****50***REMOVED***

    def test_constructor(self***REMOVED***:
        x = np.ndarray((***REMOVED******REMOVED***
        x[(***REMOVED******REMOVED*** = 5
        self.assertEqual(x[(***REMOVED******REMOVED***, 5***REMOVED***
        y = np.ndarray((***REMOVED***, buffer=x***REMOVED***
        y[(***REMOVED******REMOVED*** = 6
        self.assertEqual(x[(***REMOVED******REMOVED***, 6***REMOVED***

    def test_output(self***REMOVED***:
        x = np.array(2***REMOVED***
        self.assertRaises(ValueError, np.add, x, [1***REMOVED***, x***REMOVED***


class TestScalarIndexing(TestCase***REMOVED***:
    def setUp(self***REMOVED***:
        self.d = np.array([0, 1***REMOVED******REMOVED***[0***REMOVED***

    def test_ellipsis_subscript(self***REMOVED***:
        a = self.d
        self.assertEqual(a[...***REMOVED***, 0***REMOVED***
        self.assertEqual(a[...***REMOVED***.shape, (***REMOVED******REMOVED***

    def test_empty_subscript(self***REMOVED***:
        a = self.d
        self.assertEqual(a[(***REMOVED******REMOVED***, 0***REMOVED***
        self.assertEqual(a[(***REMOVED******REMOVED***.shape, (***REMOVED******REMOVED***

    def test_invalid_subscript(self***REMOVED***:
        a = self.d
        self.assertRaises(IndexError, lambda x: x[0***REMOVED***, a***REMOVED***
        self.assertRaises(IndexError, lambda x: x[np.array([***REMOVED***, int***REMOVED******REMOVED***, a***REMOVED***

    def test_invalid_subscript_assignment(self***REMOVED***:
        a = self.d

        def assign(x, i, v***REMOVED***:
            x[i***REMOVED*** = v

        self.assertRaises(TypeError, assign, a, 0, 42***REMOVED***

    def test_newaxis(self***REMOVED***:
        a = self.d
        self.assertEqual(a[np.newaxis***REMOVED***.shape, (1,***REMOVED******REMOVED***
        self.assertEqual(a[..., np.newaxis***REMOVED***.shape, (1,***REMOVED******REMOVED***
        self.assertEqual(a[np.newaxis, ...***REMOVED***.shape, (1,***REMOVED******REMOVED***
        self.assertEqual(a[..., np.newaxis***REMOVED***.shape, (1,***REMOVED******REMOVED***
        self.assertEqual(a[np.newaxis, ..., np.newaxis***REMOVED***.shape, (1, 1***REMOVED******REMOVED***
        self.assertEqual(a[..., np.newaxis, np.newaxis***REMOVED***.shape, (1, 1***REMOVED******REMOVED***
        self.assertEqual(a[np.newaxis, np.newaxis, ...***REMOVED***.shape, (1, 1***REMOVED******REMOVED***
        self.assertEqual(a[(np.newaxis,***REMOVED****10***REMOVED***.shape, (1,***REMOVED****10***REMOVED***

    def test_invalid_newaxis(self***REMOVED***:
        a = self.d

        def subscript(x, i***REMOVED***:
            x[i***REMOVED***

        self.assertRaises(IndexError, subscript, a, (np.newaxis, 0***REMOVED******REMOVED***
        self.assertRaises(IndexError, subscript, a, (np.newaxis,***REMOVED****50***REMOVED***

    def test_overlapping_assignment(self***REMOVED***:
        # With positive strides
        a = np.arange(4***REMOVED***
        a[:-1***REMOVED*** = a[1:***REMOVED***
        assert_equal(a, [1, 2, 3, 3***REMOVED******REMOVED***

        a = np.arange(4***REMOVED***
        a[1:***REMOVED*** = a[:-1***REMOVED***
        assert_equal(a, [0, 0, 1, 2***REMOVED******REMOVED***

        # With positive and negative strides
        a = np.arange(4***REMOVED***
        a[:***REMOVED*** = a[::-1***REMOVED***
        assert_equal(a, [3, 2, 1, 0***REMOVED******REMOVED***

        a = np.arange(6***REMOVED***.reshape(2, 3***REMOVED***
        a[::-1,:***REMOVED*** = a[:, ::-1***REMOVED***
        assert_equal(a, [[5, 4, 3***REMOVED***, [2, 1, 0***REMOVED******REMOVED******REMOVED***

        a = np.arange(6***REMOVED***.reshape(2, 3***REMOVED***
        a[::-1, ::-1***REMOVED*** = a[:, ::-1***REMOVED***
        assert_equal(a, [[3, 4, 5***REMOVED***, [0, 1, 2***REMOVED******REMOVED******REMOVED***

        # With just one element overlapping
        a = np.arange(5***REMOVED***
        a[:3***REMOVED*** = a[2:***REMOVED***
        assert_equal(a, [2, 3, 4, 3, 4***REMOVED******REMOVED***

        a = np.arange(5***REMOVED***
        a[2:***REMOVED*** = a[:3***REMOVED***
        assert_equal(a, [0, 1, 0, 1, 2***REMOVED******REMOVED***

        a = np.arange(5***REMOVED***
        a[2::-1***REMOVED*** = a[2:***REMOVED***
        assert_equal(a, [4, 3, 2, 3, 4***REMOVED******REMOVED***

        a = np.arange(5***REMOVED***
        a[2:***REMOVED*** = a[2::-1***REMOVED***
        assert_equal(a, [0, 1, 2, 1, 0***REMOVED******REMOVED***

        a = np.arange(5***REMOVED***
        a[2::-1***REMOVED*** = a[:1:-1***REMOVED***
        assert_equal(a, [2, 3, 4, 3, 4***REMOVED******REMOVED***

        a = np.arange(5***REMOVED***
        a[:1:-1***REMOVED*** = a[2::-1***REMOVED***
        assert_equal(a, [0, 1, 0, 1, 2***REMOVED******REMOVED***


class TestCreation(TestCase***REMOVED***:
    def test_from_attribute(self***REMOVED***:
        class x(object***REMOVED***:
            def __array__(self, dtype=None***REMOVED***:
                pass

        self.assertRaises(ValueError, np.array, x(***REMOVED******REMOVED***

    def test_from_string(self***REMOVED***:
        types = np.typecodes['AllInteger'***REMOVED*** + np.typecodes['Float'***REMOVED***
        nstr = ['123', '123'***REMOVED***
        result = np.array([123, 123***REMOVED***, dtype=int***REMOVED***
        for type in types:
            msg = 'String conversion for %s' % type
            assert_equal(np.array(nstr, dtype=type***REMOVED***, result, err_msg=msg***REMOVED***

    def test_void(self***REMOVED***:
        arr = np.array([***REMOVED***, dtype='V'***REMOVED***
        assert_equal(arr.dtype.kind, 'V'***REMOVED***

    def test_too_big_error(self***REMOVED***:
        # 45341 is the smallest integer greater than sqrt(2**31 - 1***REMOVED***.
        # 3037000500 is the smallest integer greater than sqrt(2**63 - 1***REMOVED***.
        # We want to make sure that the square byte array with those dimensions
        # is too big on 32 or 64 bit systems respectively.
        if np.iinfo('intp'***REMOVED***.max == 2**31 - 1:
            shape = (46341, 46341***REMOVED***
        elif np.iinfo('intp'***REMOVED***.max == 2**63 - 1:
            shape = (3037000500, 3037000500***REMOVED***
        else:
            return
        assert_raises(ValueError, np.empty, shape, dtype=np.int8***REMOVED***
        assert_raises(ValueError, np.zeros, shape, dtype=np.int8***REMOVED***
        assert_raises(ValueError, np.ones, shape, dtype=np.int8***REMOVED***

    def test_zeros(self***REMOVED***:
        types = np.typecodes['AllInteger'***REMOVED*** + np.typecodes['AllFloat'***REMOVED***
        for dt in types:
            d = np.zeros((13,***REMOVED***, dtype=dt***REMOVED***
            assert_equal(np.count_nonzero(d***REMOVED***, 0***REMOVED***
            # true for ieee floats
            assert_equal(d.sum(***REMOVED***, 0***REMOVED***
            assert_(not d.any(***REMOVED******REMOVED***

            d = np.zeros(2, dtype='(2,4***REMOVED***i4'***REMOVED***
            assert_equal(np.count_nonzero(d***REMOVED***, 0***REMOVED***
            assert_equal(d.sum(***REMOVED***, 0***REMOVED***
            assert_(not d.any(***REMOVED******REMOVED***

            d = np.zeros(2, dtype='4i4'***REMOVED***
            assert_equal(np.count_nonzero(d***REMOVED***, 0***REMOVED***
            assert_equal(d.sum(***REMOVED***, 0***REMOVED***
            assert_(not d.any(***REMOVED******REMOVED***

            d = np.zeros(2, dtype='(2,4***REMOVED***i4, (2,4***REMOVED***i4'***REMOVED***
            assert_equal(np.count_nonzero(d***REMOVED***, 0***REMOVED***

    @dec.slow
    def test_zeros_big(self***REMOVED***:
        # test big array as they might be allocated different by the system
        types = np.typecodes['AllInteger'***REMOVED*** + np.typecodes['AllFloat'***REMOVED***
        for dt in types:
            d = np.zeros((30 * 1024**2,***REMOVED***, dtype=dt***REMOVED***
            assert_(not d.any(***REMOVED******REMOVED***
            # This test can fail on 32-bit systems due to insufficient
            # contiguous memory. Deallocating the previous array increases the
            # chance of success.
            del(d***REMOVED***

    def test_zeros_obj(self***REMOVED***:
        # test initialization from PyLong(0***REMOVED***
        d = np.zeros((13,***REMOVED***, dtype=object***REMOVED***
        assert_array_equal(d, [0***REMOVED*** * 13***REMOVED***
        assert_equal(np.count_nonzero(d***REMOVED***, 0***REMOVED***

    def test_zeros_obj_obj(self***REMOVED***:
        d = np.zeros(10, dtype=[('k', object, 2***REMOVED******REMOVED******REMOVED***
        assert_array_equal(d['k'***REMOVED***, 0***REMOVED***

    def test_zeros_like_like_zeros(self***REMOVED***:
        # test zeros_like returns the same as zeros
        for c in np.typecodes['All'***REMOVED***:
            if c == 'V':
                continue
            d = np.zeros((3,3***REMOVED***, dtype=c***REMOVED***
            assert_array_equal(np.zeros_like(d***REMOVED***, d***REMOVED***
            assert_equal(np.zeros_like(d***REMOVED***.dtype, d.dtype***REMOVED***
        # explicitly check some special cases
        d = np.zeros((3,3***REMOVED***, dtype='S5'***REMOVED***
        assert_array_equal(np.zeros_like(d***REMOVED***, d***REMOVED***
        assert_equal(np.zeros_like(d***REMOVED***.dtype, d.dtype***REMOVED***
        d = np.zeros((3,3***REMOVED***, dtype='U5'***REMOVED***
        assert_array_equal(np.zeros_like(d***REMOVED***, d***REMOVED***
        assert_equal(np.zeros_like(d***REMOVED***.dtype, d.dtype***REMOVED***

        d = np.zeros((3,3***REMOVED***, dtype='<i4'***REMOVED***
        assert_array_equal(np.zeros_like(d***REMOVED***, d***REMOVED***
        assert_equal(np.zeros_like(d***REMOVED***.dtype, d.dtype***REMOVED***
        d = np.zeros((3,3***REMOVED***, dtype='>i4'***REMOVED***
        assert_array_equal(np.zeros_like(d***REMOVED***, d***REMOVED***
        assert_equal(np.zeros_like(d***REMOVED***.dtype, d.dtype***REMOVED***

        d = np.zeros((3,3***REMOVED***, dtype='<M8[s***REMOVED***'***REMOVED***
        assert_array_equal(np.zeros_like(d***REMOVED***, d***REMOVED***
        assert_equal(np.zeros_like(d***REMOVED***.dtype, d.dtype***REMOVED***
        d = np.zeros((3,3***REMOVED***, dtype='>M8[s***REMOVED***'***REMOVED***
        assert_array_equal(np.zeros_like(d***REMOVED***, d***REMOVED***
        assert_equal(np.zeros_like(d***REMOVED***.dtype, d.dtype***REMOVED***

        d = np.zeros((3,3***REMOVED***, dtype='f4,f4'***REMOVED***
        assert_array_equal(np.zeros_like(d***REMOVED***, d***REMOVED***
        assert_equal(np.zeros_like(d***REMOVED***.dtype, d.dtype***REMOVED***

    def test_empty_unicode(self***REMOVED***:
        # don't throw decode errors on garbage memory
        for i in range(5, 100, 5***REMOVED***:
            d = np.empty(i, dtype='U'***REMOVED***
            str(d***REMOVED***

    def test_sequence_non_homogenous(self***REMOVED***:
        assert_equal(np.array([4, 2**80***REMOVED******REMOVED***.dtype, np.object***REMOVED***
        assert_equal(np.array([4, 2**80, 4***REMOVED******REMOVED***.dtype, np.object***REMOVED***
        assert_equal(np.array([2**80, 4***REMOVED******REMOVED***.dtype, np.object***REMOVED***
        assert_equal(np.array([2**80***REMOVED*** * 3***REMOVED***.dtype, np.object***REMOVED***
        assert_equal(np.array([[1, 1***REMOVED***,[1j, 1j***REMOVED******REMOVED******REMOVED***.dtype, np.complex***REMOVED***
        assert_equal(np.array([[1j, 1j***REMOVED***,[1, 1***REMOVED******REMOVED******REMOVED***.dtype, np.complex***REMOVED***
        assert_equal(np.array([[1, 1, 1***REMOVED***,[1, 1j, 1.***REMOVED***, [1, 1, 1***REMOVED******REMOVED******REMOVED***.dtype, np.complex***REMOVED***

    @dec.skipif(sys.version_info[0***REMOVED*** >= 3***REMOVED***
    def test_sequence_long(self***REMOVED***:
        assert_equal(np.array([long(4***REMOVED***, long(4***REMOVED******REMOVED******REMOVED***.dtype, np.long***REMOVED***
        assert_equal(np.array([long(4***REMOVED***, 2**80***REMOVED******REMOVED***.dtype, np.object***REMOVED***
        assert_equal(np.array([long(4***REMOVED***, 2**80, long(4***REMOVED******REMOVED******REMOVED***.dtype, np.object***REMOVED***
        assert_equal(np.array([2**80, long(4***REMOVED******REMOVED******REMOVED***.dtype, np.object***REMOVED***

    def test_non_sequence_sequence(self***REMOVED***:
        ***REMOVED***Should not segfault.

        Class Fail breaks the sequence protocol for new style classes, i.e.,
        those derived from object. Class Map is a mapping type indicated by
        raising a ValueError. At some point we may raise a warning instead
        of an error in the Fail case.

        ***REMOVED***
        class Fail(object***REMOVED***:
            def __len__(self***REMOVED***:
                return 1

            def __getitem__(self, index***REMOVED***:
                raise ValueError(***REMOVED***

        class Map(object***REMOVED***:
            def __len__(self***REMOVED***:
                return 1

            def __getitem__(self, index***REMOVED***:
                raise KeyError(***REMOVED***

        a = np.array([Map(***REMOVED******REMOVED******REMOVED***
        assert_(a.shape == (1,***REMOVED******REMOVED***
        assert_(a.dtype == np.dtype(object***REMOVED******REMOVED***
        assert_raises(ValueError, np.array, [Fail(***REMOVED******REMOVED******REMOVED***

    def test_no_len_object_type(self***REMOVED***:
        # gh-5100, want object array from iterable object without len(***REMOVED***
        class Point2:
            def __init__(self***REMOVED***:
                pass

            def __getitem__(self, ind***REMOVED***:
                if ind in [0, 1***REMOVED***:
                    return ind
                else:
                    raise IndexError(***REMOVED***
        d = np.array([Point2(***REMOVED***, Point2(***REMOVED***, Point2(***REMOVED******REMOVED******REMOVED***
        assert_equal(d.dtype, np.dtype(object***REMOVED******REMOVED***

    def test_false_len_sequence(self***REMOVED***:
        # gh-7264, segfault for this example
        class C:
            def __getitem__(self, i***REMOVED***:
                raise IndexError
            def __len__(self***REMOVED***:
                return 42

        assert_raises(ValueError, np.array, C(***REMOVED******REMOVED*** # segfault?

    def test_failed_len_sequence(self***REMOVED***:
        # gh-7393
        class A(object***REMOVED***:
            def __init__(self, data***REMOVED***:
                self._data = data
            def __getitem__(self, item***REMOVED***:
                return type(self***REMOVED***(self._data[item***REMOVED******REMOVED***
            def __len__(self***REMOVED***:
                return len(self._data***REMOVED***

        # len(d***REMOVED*** should give 3, but len(d[0***REMOVED******REMOVED*** will fail
        d = A([1,2,3***REMOVED******REMOVED***
        assert_equal(len(np.array(d***REMOVED******REMOVED***, 3***REMOVED***

    def test_array_too_big(self***REMOVED***:
        # Test that array creation succeeds for arrays addressable by intp
        # on the byte level and fails for too large arrays.
        buf = np.zeros(100***REMOVED***

        max_bytes = np.iinfo(np.intp***REMOVED***.max
        for dtype in ["intp", "S20", "b"***REMOVED***:
            dtype = np.dtype(dtype***REMOVED***
            itemsize = dtype.itemsize

            np.ndarray(buffer=buf, strides=(0,***REMOVED***,
                       shape=(max_bytes//itemsize,***REMOVED***, dtype=dtype***REMOVED***
            assert_raises(ValueError, np.ndarray, buffer=buf, strides=(0,***REMOVED***,
                          shape=(max_bytes//itemsize + 1,***REMOVED***, dtype=dtype***REMOVED***


class TestStructured(TestCase***REMOVED***:
    def test_subarray_field_access(self***REMOVED***:
        a = np.zeros((3, 5***REMOVED***, dtype=[('a', ('i4', (2, 2***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        a['a'***REMOVED*** = np.arange(60***REMOVED***.reshape(3, 5, 2, 2***REMOVED***

        # Since the subarray is always in C-order, a transpose
        # does not swap the subarray:
        assert_array_equal(a.T['a'***REMOVED***, a['a'***REMOVED***.transpose(1, 0, 2, 3***REMOVED******REMOVED***

        # In Fortran order, the subarray gets appended
        # like in all other cases, not prepended as a special case
        b = a.copy(order='F'***REMOVED***
        assert_equal(a['a'***REMOVED***.shape, b['a'***REMOVED***.shape***REMOVED***
        assert_equal(a.T['a'***REMOVED***.shape, a.T.copy(***REMOVED***['a'***REMOVED***.shape***REMOVED***

    def test_subarray_comparison(self***REMOVED***:
        # Check that comparisons between record arrays with
        # multi-dimensional field types work properly
        a = np.rec.fromrecords(
            [([1, 2, 3***REMOVED***, 'a', [[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED******REMOVED***, ([3, 3, 3***REMOVED***, 'b', [[0, 0***REMOVED***, [0, 0***REMOVED******REMOVED******REMOVED******REMOVED***,
            dtype=[('a', ('f4', 3***REMOVED******REMOVED***, ('b', np.object***REMOVED***, ('c', ('i4', (2, 2***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        b = a.copy(***REMOVED***
        assert_equal(a == b, [True, True***REMOVED******REMOVED***
        assert_equal(a != b, [False, False***REMOVED******REMOVED***
        b[1***REMOVED***.b = 'c'
        assert_equal(a == b, [True, False***REMOVED******REMOVED***
        assert_equal(a != b, [False, True***REMOVED******REMOVED***
        for i in range(3***REMOVED***:
            b[0***REMOVED***.a = a[0***REMOVED***.a
            b[0***REMOVED***.a[i***REMOVED*** = 5
            assert_equal(a == b, [False, False***REMOVED******REMOVED***
            assert_equal(a != b, [True, True***REMOVED******REMOVED***
        for i in range(2***REMOVED***:
            for j in range(2***REMOVED***:
                b = a.copy(***REMOVED***
                b[0***REMOVED***.c[i, j***REMOVED*** = 10
                assert_equal(a == b, [False, True***REMOVED******REMOVED***
                assert_equal(a != b, [True, False***REMOVED******REMOVED***

        # Check that broadcasting with a subarray works
        a = np.array([[(0,***REMOVED******REMOVED***, [(1,***REMOVED******REMOVED******REMOVED***, dtype=[('a', 'f8'***REMOVED******REMOVED******REMOVED***
        b = np.array([(0,***REMOVED***, (0,***REMOVED***, (1,***REMOVED******REMOVED***, dtype=[('a', 'f8'***REMOVED******REMOVED******REMOVED***
        assert_equal(a == b, [[True, True, False***REMOVED***, [False, False, True***REMOVED******REMOVED******REMOVED***
        assert_equal(b == a, [[True, True, False***REMOVED***, [False, False, True***REMOVED******REMOVED******REMOVED***
        a = np.array([[(0,***REMOVED******REMOVED***, [(1,***REMOVED******REMOVED******REMOVED***, dtype=[('a', 'f8', (1,***REMOVED******REMOVED******REMOVED******REMOVED***
        b = np.array([(0,***REMOVED***, (0,***REMOVED***, (1,***REMOVED******REMOVED***, dtype=[('a', 'f8', (1,***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_equal(a == b, [[True, True, False***REMOVED***, [False, False, True***REMOVED******REMOVED******REMOVED***
        assert_equal(b == a, [[True, True, False***REMOVED***, [False, False, True***REMOVED******REMOVED******REMOVED***
        a = np.array([[([0, 0***REMOVED***,***REMOVED******REMOVED***, [([1, 1***REMOVED***,***REMOVED******REMOVED******REMOVED***, dtype=[('a', 'f8', (2,***REMOVED******REMOVED******REMOVED******REMOVED***
        b = np.array([([0, 0***REMOVED***,***REMOVED***, ([0, 1***REMOVED***,***REMOVED***, ([1, 1***REMOVED***,***REMOVED******REMOVED***, dtype=[('a', 'f8', (2,***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_equal(a == b, [[True, False, False***REMOVED***, [False, False, True***REMOVED******REMOVED******REMOVED***
        assert_equal(b == a, [[True, False, False***REMOVED***, [False, False, True***REMOVED******REMOVED******REMOVED***

        # Check that broadcasting Fortran-style arrays with a subarray work
        a = np.array([[([0, 0***REMOVED***,***REMOVED******REMOVED***, [([1, 1***REMOVED***,***REMOVED******REMOVED******REMOVED***, dtype=[('a', 'f8', (2,***REMOVED******REMOVED******REMOVED***, order='F'***REMOVED***
        b = np.array([([0, 0***REMOVED***,***REMOVED***, ([0, 1***REMOVED***,***REMOVED***, ([1, 1***REMOVED***,***REMOVED******REMOVED***, dtype=[('a', 'f8', (2,***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_equal(a == b, [[True, False, False***REMOVED***, [False, False, True***REMOVED******REMOVED******REMOVED***
        assert_equal(b == a, [[True, False, False***REMOVED***, [False, False, True***REMOVED******REMOVED******REMOVED***

        # Check that incompatible sub-array shapes don't result to broadcasting
        x = np.zeros((1,***REMOVED***, dtype=[('a', ('f4', (1, 2***REMOVED******REMOVED******REMOVED***, ('b', 'i1'***REMOVED******REMOVED******REMOVED***
        y = np.zeros((1,***REMOVED***, dtype=[('a', ('f4', (2,***REMOVED******REMOVED******REMOVED***, ('b', 'i1'***REMOVED******REMOVED******REMOVED***
        # This comparison invokes deprecated behaviour, and will probably
        # start raising an error eventually. What we really care about in this
        # test is just that it doesn't return True.
        with warnings.catch_warnings(***REMOVED***:
            warnings.filterwarnings("ignore", category=DeprecationWarning***REMOVED***
            assert_equal(x == y, False***REMOVED***

        x = np.zeros((1,***REMOVED***, dtype=[('a', ('f4', (2, 1***REMOVED******REMOVED******REMOVED***, ('b', 'i1'***REMOVED******REMOVED******REMOVED***
        y = np.zeros((1,***REMOVED***, dtype=[('a', ('f4', (2,***REMOVED******REMOVED******REMOVED***, ('b', 'i1'***REMOVED******REMOVED******REMOVED***
        # This comparison invokes deprecated behaviour, and will probably
        # start raising an error eventually. What we really care about in this
        # test is just that it doesn't return True.
        with warnings.catch_warnings(***REMOVED***:
            warnings.filterwarnings("ignore", category=DeprecationWarning***REMOVED***
            assert_equal(x == y, False***REMOVED***

        # Check that structured arrays that are different only in
        # byte-order work
        a = np.array([(5, 42***REMOVED***, (10, 1***REMOVED******REMOVED***, dtype=[('a', '>i8'***REMOVED***, ('b', '<f8'***REMOVED******REMOVED******REMOVED***
        b = np.array([(5, 43***REMOVED***, (10, 1***REMOVED******REMOVED***, dtype=[('a', '<i8'***REMOVED***, ('b', '>f8'***REMOVED******REMOVED******REMOVED***
        assert_equal(a == b, [False, True***REMOVED******REMOVED***

    def test_casting(self***REMOVED***:
        # Check that casting a structured array to change its byte order
        # works
        a = np.array([(1,***REMOVED******REMOVED***, dtype=[('a', '<i4'***REMOVED******REMOVED******REMOVED***
        assert_(np.can_cast(a.dtype, [('a', '>i4'***REMOVED******REMOVED***, casting='unsafe'***REMOVED******REMOVED***
        b = a.astype([('a', '>i4'***REMOVED******REMOVED******REMOVED***
        assert_equal(b, a.byteswap(***REMOVED***.newbyteorder(***REMOVED******REMOVED***
        assert_equal(a['a'***REMOVED***[0***REMOVED***, b['a'***REMOVED***[0***REMOVED******REMOVED***

        # Check that equality comparison works on structured arrays if
        # they are 'equiv'-castable
        a = np.array([(5, 42***REMOVED***, (10, 1***REMOVED******REMOVED***, dtype=[('a', '>i4'***REMOVED***, ('b', '<f8'***REMOVED******REMOVED******REMOVED***
        b = np.array([(42, 5***REMOVED***, (1, 10***REMOVED******REMOVED***, dtype=[('b', '>f8'***REMOVED***, ('a', '<i4'***REMOVED******REMOVED******REMOVED***
        assert_(np.can_cast(a.dtype, b.dtype, casting='equiv'***REMOVED******REMOVED***
        assert_equal(a == b, [True, True***REMOVED******REMOVED***

        # Check that 'equiv' casting can reorder fields and change byte
        # order
        assert_(np.can_cast(a.dtype, b.dtype, casting='equiv'***REMOVED******REMOVED***
        c = a.astype(b.dtype, casting='equiv'***REMOVED***
        assert_equal(a == c, [True, True***REMOVED******REMOVED***

        # Check that 'safe' casting can change byte order and up-cast
        # fields
        t = [('a', '<i8'***REMOVED***, ('b', '>f8'***REMOVED******REMOVED***
        assert_(np.can_cast(a.dtype, t, casting='safe'***REMOVED******REMOVED***
        c = a.astype(t, casting='safe'***REMOVED***
        assert_equal((c == np.array([(5, 42***REMOVED***, (10, 1***REMOVED******REMOVED***, dtype=t***REMOVED******REMOVED***,
                     [True, True***REMOVED******REMOVED***

        # Check that 'same_kind' casting can change byte order and
        # change field widths within a "kind"
        t = [('a', '<i4'***REMOVED***, ('b', '>f4'***REMOVED******REMOVED***
        assert_(np.can_cast(a.dtype, t, casting='same_kind'***REMOVED******REMOVED***
        c = a.astype(t, casting='same_kind'***REMOVED***
        assert_equal((c == np.array([(5, 42***REMOVED***, (10, 1***REMOVED******REMOVED***, dtype=t***REMOVED******REMOVED***,
                     [True, True***REMOVED******REMOVED***

        # Check that casting fails if the casting rule should fail on
        # any of the fields
        t = [('a', '>i8'***REMOVED***, ('b', '<f4'***REMOVED******REMOVED***
        assert_(not np.can_cast(a.dtype, t, casting='safe'***REMOVED******REMOVED***
        assert_raises(TypeError, a.astype, t, casting='safe'***REMOVED***
        t = [('a', '>i2'***REMOVED***, ('b', '<f8'***REMOVED******REMOVED***
        assert_(not np.can_cast(a.dtype, t, casting='equiv'***REMOVED******REMOVED***
        assert_raises(TypeError, a.astype, t, casting='equiv'***REMOVED***
        t = [('a', '>i8'***REMOVED***, ('b', '<i2'***REMOVED******REMOVED***
        assert_(not np.can_cast(a.dtype, t, casting='same_kind'***REMOVED******REMOVED***
        assert_raises(TypeError, a.astype, t, casting='same_kind'***REMOVED***
        assert_(not np.can_cast(a.dtype, b.dtype, casting='no'***REMOVED******REMOVED***
        assert_raises(TypeError, a.astype, b.dtype, casting='no'***REMOVED***

        # Check that non-'unsafe' casting can't change the set of field names
        for casting in ['no', 'safe', 'equiv', 'same_kind'***REMOVED***:
            t = [('a', '>i4'***REMOVED******REMOVED***
            assert_(not np.can_cast(a.dtype, t, casting=casting***REMOVED******REMOVED***
            t = [('a', '>i4'***REMOVED***, ('b', '<f8'***REMOVED***, ('c', 'i4'***REMOVED******REMOVED***
            assert_(not np.can_cast(a.dtype, t, casting=casting***REMOVED******REMOVED***

    def test_objview(self***REMOVED***:
        # https://github.com/numpy/numpy/issues/3286
        a = np.array([***REMOVED***, dtype=[('a', 'f'***REMOVED***, ('b', 'f'***REMOVED***, ('c', 'O'***REMOVED******REMOVED******REMOVED***
        a[['a', 'b'***REMOVED******REMOVED***  # TypeError?

        # https://github.com/numpy/numpy/issues/3253
        dat2 = np.zeros(3, [('A', 'i'***REMOVED***, ('B', '|O'***REMOVED******REMOVED******REMOVED***
        dat2[['B', 'A'***REMOVED******REMOVED***  # TypeError?

    def test_setfield(self***REMOVED***:
        # https://github.com/numpy/numpy/issues/3126
        struct_dt = np.dtype([('elem', 'i4', 5***REMOVED***,***REMOVED******REMOVED***
        dt = np.dtype([('field', 'i4', 10***REMOVED***,('struct', struct_dt***REMOVED******REMOVED******REMOVED***
        x = np.zeros(1, dt***REMOVED***
        x[0***REMOVED***['field'***REMOVED*** = np.ones(10, dtype='i4'***REMOVED***
        x[0***REMOVED***['struct'***REMOVED*** = np.ones(1, dtype=struct_dt***REMOVED***
        assert_equal(x[0***REMOVED***['field'***REMOVED***, np.ones(10, dtype='i4'***REMOVED******REMOVED***

    def test_setfield_object(self***REMOVED***:
        # make sure object field assignment with ndarray value
        # on void scalar mimics setitem behavior
        b = np.zeros(1, dtype=[('x', 'O'***REMOVED******REMOVED******REMOVED***
        # next line should work identically to b['x'***REMOVED***[0***REMOVED*** = np.arange(3***REMOVED***
        b[0***REMOVED***['x'***REMOVED*** = np.arange(3***REMOVED***
        assert_equal(b[0***REMOVED***['x'***REMOVED***, np.arange(3***REMOVED******REMOVED***

        # check that broadcasting check still works
        c = np.zeros(1, dtype=[('x', 'O', 5***REMOVED******REMOVED******REMOVED***

        def testassign(***REMOVED***:
            c[0***REMOVED***['x'***REMOVED*** = np.arange(3***REMOVED***

        assert_raises(ValueError, testassign***REMOVED***


class TestBool(TestCase***REMOVED***:
    def test_test_interning(self***REMOVED***:
        a0 = np.bool_(0***REMOVED***
        b0 = np.bool_(False***REMOVED***
        self.assertTrue(a0 is b0***REMOVED***
        a1 = np.bool_(1***REMOVED***
        b1 = np.bool_(True***REMOVED***
        self.assertTrue(a1 is b1***REMOVED***
        self.assertTrue(np.array([True***REMOVED******REMOVED***[0***REMOVED*** is a1***REMOVED***
        self.assertTrue(np.array(True***REMOVED***[(***REMOVED******REMOVED*** is a1***REMOVED***

    def test_sum(self***REMOVED***:
        d = np.ones(101, dtype=np.bool***REMOVED***
        assert_equal(d.sum(***REMOVED***, d.size***REMOVED***
        assert_equal(d[::2***REMOVED***.sum(***REMOVED***, d[::2***REMOVED***.size***REMOVED***
        assert_equal(d[::-2***REMOVED***.sum(***REMOVED***, d[::-2***REMOVED***.size***REMOVED***

        d = np.frombuffer(b'\xff\xff' * 100, dtype=bool***REMOVED***
        assert_equal(d.sum(***REMOVED***, d.size***REMOVED***
        assert_equal(d[::2***REMOVED***.sum(***REMOVED***, d[::2***REMOVED***.size***REMOVED***
        assert_equal(d[::-2***REMOVED***.sum(***REMOVED***, d[::-2***REMOVED***.size***REMOVED***

    def check_count_nonzero(self, power, length***REMOVED***:
        powers = [2 ** i for i in range(length***REMOVED******REMOVED***
        for i in range(2**power***REMOVED***:
            l = [(i & x***REMOVED*** != 0 for x in powers***REMOVED***
            a = np.array(l, dtype=np.bool***REMOVED***
            c = builtins.sum(l***REMOVED***
            self.assertEqual(np.count_nonzero(a***REMOVED***, c***REMOVED***
            av = a.view(np.uint8***REMOVED***
            av *= 3
            self.assertEqual(np.count_nonzero(a***REMOVED***, c***REMOVED***
            av *= 4
            self.assertEqual(np.count_nonzero(a***REMOVED***, c***REMOVED***
            av[av != 0***REMOVED*** = 0xFF
            self.assertEqual(np.count_nonzero(a***REMOVED***, c***REMOVED***

    def test_count_nonzero(self***REMOVED***:
        # check all 12 bit combinations in a length 17 array
        # covers most cases of the 16 byte unrolled code
        self.check_count_nonzero(12, 17***REMOVED***

    @dec.slow
    def test_count_nonzero_all(self***REMOVED***:
        # check all combinations in a length 17 array
        # covers all cases of the 16 byte unrolled code
        self.check_count_nonzero(17, 17***REMOVED***

    def test_count_nonzero_unaligned(self***REMOVED***:
        # prevent mistakes as e.g. gh-4060
        for o in range(7***REMOVED***:
            a = np.zeros((18,***REMOVED***, dtype=np.bool***REMOVED***[o+1:***REMOVED***
            a[:o***REMOVED*** = True
            self.assertEqual(np.count_nonzero(a***REMOVED***, builtins.sum(a.tolist(***REMOVED******REMOVED******REMOVED***
            a = np.ones((18,***REMOVED***, dtype=np.bool***REMOVED***[o+1:***REMOVED***
            a[:o***REMOVED*** = False
            self.assertEqual(np.count_nonzero(a***REMOVED***, builtins.sum(a.tolist(***REMOVED******REMOVED******REMOVED***


class TestMethods(TestCase***REMOVED***:
    def test_compress(self***REMOVED***:
        tgt = [[5, 6, 7, 8, 9***REMOVED******REMOVED***
        arr = np.arange(10***REMOVED***.reshape(2, 5***REMOVED***
        out = arr.compress([0, 1***REMOVED***, axis=0***REMOVED***
        assert_equal(out, tgt***REMOVED***

        tgt = [[1, 3***REMOVED***, [6, 8***REMOVED******REMOVED***
        out = arr.compress([0, 1, 0, 1, 0***REMOVED***, axis=1***REMOVED***
        assert_equal(out, tgt***REMOVED***

        tgt = [[1***REMOVED***, [6***REMOVED******REMOVED***
        arr = np.arange(10***REMOVED***.reshape(2, 5***REMOVED***
        out = arr.compress([0, 1***REMOVED***, axis=1***REMOVED***
        assert_equal(out, tgt***REMOVED***

        arr = np.arange(10***REMOVED***.reshape(2, 5***REMOVED***
        out = arr.compress([0, 1***REMOVED******REMOVED***
        assert_equal(out, 1***REMOVED***

    def test_choose(self***REMOVED***:
        x = 2*np.ones((3,***REMOVED***, dtype=int***REMOVED***
        y = 3*np.ones((3,***REMOVED***, dtype=int***REMOVED***
        x2 = 2*np.ones((2, 3***REMOVED***, dtype=int***REMOVED***
        y2 = 3*np.ones((2, 3***REMOVED***, dtype=int***REMOVED***
        ind = np.array([0, 0, 1***REMOVED******REMOVED***

        A = ind.choose((x, y***REMOVED******REMOVED***
        assert_equal(A, [2, 2, 3***REMOVED******REMOVED***

        A = ind.choose((x2, y2***REMOVED******REMOVED***
        assert_equal(A, [[2, 2, 3***REMOVED***, [2, 2, 3***REMOVED******REMOVED******REMOVED***

        A = ind.choose((x, y2***REMOVED******REMOVED***
        assert_equal(A, [[2, 2, 3***REMOVED***, [2, 2, 3***REMOVED******REMOVED******REMOVED***

    def test_prod(self***REMOVED***:
        ba = [1, 2, 10, 11, 6, 5, 4***REMOVED***
        ba2 = [[1, 2, 3, 4***REMOVED***, [5, 6, 7, 9***REMOVED***, [10, 3, 4, 5***REMOVED******REMOVED***

        for ctype in [np.int16, np.uint16, np.int32, np.uint32,
                      np.float32, np.float64, np.complex64, np.complex128***REMOVED***:
            a = np.array(ba, ctype***REMOVED***
            a2 = np.array(ba2, ctype***REMOVED***
            if ctype in ['1', 'b'***REMOVED***:
                self.assertRaises(ArithmeticError, a.prod***REMOVED***
                self.assertRaises(ArithmeticError, a2.prod, axis=1***REMOVED***
            else:
                assert_equal(a.prod(axis=0***REMOVED***, 26400***REMOVED***
                assert_array_equal(a2.prod(axis=0***REMOVED***,
                                   np.array([50, 36, 84, 180***REMOVED***, ctype***REMOVED******REMOVED***
                assert_array_equal(a2.prod(axis=-1***REMOVED***,
                                   np.array([24, 1890, 600***REMOVED***, ctype***REMOVED******REMOVED***

    def test_repeat(self***REMOVED***:
        m = np.array([1, 2, 3, 4, 5, 6***REMOVED******REMOVED***
        m_rect = m.reshape((2, 3***REMOVED******REMOVED***

        A = m.repeat([1, 3, 2, 1, 1, 2***REMOVED******REMOVED***
        assert_equal(A, [1, 2, 2, 2, 3,
                         3, 4, 5, 6, 6***REMOVED******REMOVED***

        A = m.repeat(2***REMOVED***
        assert_equal(A, [1, 1, 2, 2, 3, 3,
                         4, 4, 5, 5, 6, 6***REMOVED******REMOVED***

        A = m_rect.repeat([2, 1***REMOVED***, axis=0***REMOVED***
        assert_equal(A, [[1, 2, 3***REMOVED***,
                         [1, 2, 3***REMOVED***,
                         [4, 5, 6***REMOVED******REMOVED******REMOVED***

        A = m_rect.repeat([1, 3, 2***REMOVED***, axis=1***REMOVED***
        assert_equal(A, [[1, 2, 2, 2, 3, 3***REMOVED***,
                         [4, 5, 5, 5, 6, 6***REMOVED******REMOVED******REMOVED***

        A = m_rect.repeat(2, axis=0***REMOVED***
        assert_equal(A, [[1, 2, 3***REMOVED***,
                         [1, 2, 3***REMOVED***,
                         [4, 5, 6***REMOVED***,
                         [4, 5, 6***REMOVED******REMOVED******REMOVED***

        A = m_rect.repeat(2, axis=1***REMOVED***
        assert_equal(A, [[1, 1, 2, 2, 3, 3***REMOVED***,
                         [4, 4, 5, 5, 6, 6***REMOVED******REMOVED******REMOVED***

    def test_reshape(self***REMOVED***:
        arr = np.array([[1, 2, 3***REMOVED***, [4, 5, 6***REMOVED***, [7, 8, 9***REMOVED***, [10, 11, 12***REMOVED******REMOVED******REMOVED***

        tgt = [[1, 2, 3, 4, 5, 6***REMOVED***, [7, 8, 9, 10, 11, 12***REMOVED******REMOVED***
        assert_equal(arr.reshape(2, 6***REMOVED***, tgt***REMOVED***

        tgt = [[1, 2, 3, 4***REMOVED***, [5, 6, 7, 8***REMOVED***, [9, 10, 11, 12***REMOVED******REMOVED***
        assert_equal(arr.reshape(3, 4***REMOVED***, tgt***REMOVED***

        tgt = [[1, 10, 8, 6***REMOVED***, [4, 2, 11, 9***REMOVED***, [7, 5, 3, 12***REMOVED******REMOVED***
        assert_equal(arr.reshape((3, 4***REMOVED***, order='F'***REMOVED***, tgt***REMOVED***

        tgt = [[1, 4, 7, 10***REMOVED***, [2, 5, 8, 11***REMOVED***, [3, 6, 9, 12***REMOVED******REMOVED***
        assert_equal(arr.T.reshape((3, 4***REMOVED***, order='C'***REMOVED***, tgt***REMOVED***

    def test_round(self***REMOVED***:
        def check_round(arr, expected, *round_args***REMOVED***:
            assert_equal(arr.round(*round_args***REMOVED***, expected***REMOVED***
            # With output array
            out = np.zeros_like(arr***REMOVED***
            res = arr.round(*round_args, out=out***REMOVED***
            assert_equal(out, expected***REMOVED***
            assert_equal(out, res***REMOVED***

        check_round(np.array([1.2, 1.5***REMOVED******REMOVED***, [1, 2***REMOVED******REMOVED***
        check_round(np.array(1.5***REMOVED***, 2***REMOVED***
        check_round(np.array([12.2, 15.5***REMOVED******REMOVED***, [10, 20***REMOVED***, -1***REMOVED***
        check_round(np.array([12.15, 15.51***REMOVED******REMOVED***, [12.2, 15.5***REMOVED***, 1***REMOVED***
        # Complex rounding
        check_round(np.array([4.5 + 1.5j***REMOVED******REMOVED***, [4 + 2j***REMOVED******REMOVED***
        check_round(np.array([12.5 + 15.5j***REMOVED******REMOVED***, [10 + 20j***REMOVED***, -1***REMOVED***

    def test_squeeze(self***REMOVED***:
        a = np.array([[[1***REMOVED***, [2***REMOVED***, [3***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_equal(a.squeeze(***REMOVED***, [1, 2, 3***REMOVED******REMOVED***
        assert_equal(a.squeeze(axis=(0,***REMOVED******REMOVED***, [[1***REMOVED***, [2***REMOVED***, [3***REMOVED******REMOVED******REMOVED***
        assert_raises(ValueError, a.squeeze, axis=(1,***REMOVED******REMOVED***
        assert_equal(a.squeeze(axis=(2,***REMOVED******REMOVED***, [[1, 2, 3***REMOVED******REMOVED******REMOVED***

    def test_transpose(self***REMOVED***:
        a = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED******REMOVED***
        assert_equal(a.transpose(***REMOVED***, [[1, 3***REMOVED***, [2, 4***REMOVED******REMOVED******REMOVED***
        self.assertRaises(ValueError, lambda: a.transpose(0***REMOVED******REMOVED***
        self.assertRaises(ValueError, lambda: a.transpose(0, 0***REMOVED******REMOVED***
        self.assertRaises(ValueError, lambda: a.transpose(0, 1, 2***REMOVED******REMOVED***

    def test_sort(self***REMOVED***:
        # test ordering for floats and complex containing nans. It is only
        # necessary to check the less-than comparison, so sorts that
        # only follow the insertion sort path are sufficient. We only
        # test doubles and complex doubles as the logic is the same.

        # check doubles
        msg = "Test real sort order with nans"
        a = np.array([np.nan, 1, 0***REMOVED******REMOVED***
        b = np.sort(a***REMOVED***
        assert_equal(b, a[::-1***REMOVED***, msg***REMOVED***
        # check complex
        msg = "Test complex sort order with nans"
        a = np.zeros(9, dtype=np.complex128***REMOVED***
        a.real += [np.nan, np.nan, np.nan, 1, 0, 1, 1, 0, 0***REMOVED***
        a.imag += [np.nan, 1, 0, np.nan, np.nan, 1, 0, 1, 0***REMOVED***
        b = np.sort(a***REMOVED***
        assert_equal(b, a[::-1***REMOVED***, msg***REMOVED***

        # all c scalar sorts use the same code with different types
        # so it suffices to run a quick check with one type. The number
        # of sorted items must be greater than ~50 to check the actual
        # algorithm because quick and merge sort fall over to insertion
        # sort for small arrays.
        a = np.arange(101***REMOVED***
        b = a[::-1***REMOVED***.copy(***REMOVED***
        for kind in ['q', 'm', 'h'***REMOVED***:
            msg = "scalar sort, kind=%s" % kind
            c = a.copy(***REMOVED***
            c.sort(kind=kind***REMOVED***
            assert_equal(c, a, msg***REMOVED***
            c = b.copy(***REMOVED***
            c.sort(kind=kind***REMOVED***
            assert_equal(c, a, msg***REMOVED***

        # test complex sorts. These use the same code as the scalars
        # but the compare function differs.
        ai = a*1j + 1
        bi = b*1j + 1
        for kind in ['q', 'm', 'h'***REMOVED***:
            msg = "complex sort, real part == 1, kind=%s" % kind
            c = ai.copy(***REMOVED***
            c.sort(kind=kind***REMOVED***
            assert_equal(c, ai, msg***REMOVED***
            c = bi.copy(***REMOVED***
            c.sort(kind=kind***REMOVED***
            assert_equal(c, ai, msg***REMOVED***
        ai = a + 1j
        bi = b + 1j
        for kind in ['q', 'm', 'h'***REMOVED***:
            msg = "complex sort, imag part == 1, kind=%s" % kind
            c = ai.copy(***REMOVED***
            c.sort(kind=kind***REMOVED***
            assert_equal(c, ai, msg***REMOVED***
            c = bi.copy(***REMOVED***
            c.sort(kind=kind***REMOVED***
            assert_equal(c, ai, msg***REMOVED***

        # test sorting of complex arrays requiring byte-swapping, gh-5441
        for endianess in '<>':
            for dt in np.typecodes['Complex'***REMOVED***:
                arr = np.array([1+3.j, 2+2.j, 3+1.j***REMOVED***, dtype=endianess + dt***REMOVED***
                c = arr.copy(***REMOVED***
                c.sort(***REMOVED***
                msg = 'byte-swapped complex sort, dtype={0***REMOVED***'.format(dt***REMOVED***
                assert_equal(c, arr, msg***REMOVED***

        # test string sorts.
        s = 'aaaaaaaa'
        a = np.array([s + chr(i***REMOVED*** for i in range(101***REMOVED******REMOVED******REMOVED***
        b = a[::-1***REMOVED***.copy(***REMOVED***
        for kind in ['q', 'm', 'h'***REMOVED***:
            msg = "string sort, kind=%s" % kind
            c = a.copy(***REMOVED***
            c.sort(kind=kind***REMOVED***
            assert_equal(c, a, msg***REMOVED***
            c = b.copy(***REMOVED***
            c.sort(kind=kind***REMOVED***
            assert_equal(c, a, msg***REMOVED***

        # test unicode sorts.
        s = 'aaaaaaaa'
        a = np.array([s + chr(i***REMOVED*** for i in range(101***REMOVED******REMOVED***, dtype=np.unicode***REMOVED***
        b = a[::-1***REMOVED***.copy(***REMOVED***
        for kind in ['q', 'm', 'h'***REMOVED***:
            msg = "unicode sort, kind=%s" % kind
            c = a.copy(***REMOVED***
            c.sort(kind=kind***REMOVED***
            assert_equal(c, a, msg***REMOVED***
            c = b.copy(***REMOVED***
            c.sort(kind=kind***REMOVED***
            assert_equal(c, a, msg***REMOVED***

        # test object array sorts.
        a = np.empty((101,***REMOVED***, dtype=np.object***REMOVED***
        a[:***REMOVED*** = list(range(101***REMOVED******REMOVED***
        b = a[::-1***REMOVED***
        for kind in ['q', 'h', 'm'***REMOVED***:
            msg = "object sort, kind=%s" % kind
            c = a.copy(***REMOVED***
            c.sort(kind=kind***REMOVED***
            assert_equal(c, a, msg***REMOVED***
            c = b.copy(***REMOVED***
            c.sort(kind=kind***REMOVED***
            assert_equal(c, a, msg***REMOVED***

        # test record array sorts.
        dt = np.dtype([('f', float***REMOVED***, ('i', int***REMOVED******REMOVED******REMOVED***
        a = np.array([(i, i***REMOVED*** for i in range(101***REMOVED******REMOVED***, dtype=dt***REMOVED***
        b = a[::-1***REMOVED***
        for kind in ['q', 'h', 'm'***REMOVED***:
            msg = "object sort, kind=%s" % kind
            c = a.copy(***REMOVED***
            c.sort(kind=kind***REMOVED***
            assert_equal(c, a, msg***REMOVED***
            c = b.copy(***REMOVED***
            c.sort(kind=kind***REMOVED***
            assert_equal(c, a, msg***REMOVED***

        # test datetime64 sorts.
        a = np.arange(0, 101, dtype='datetime64[D***REMOVED***'***REMOVED***
        b = a[::-1***REMOVED***
        for kind in ['q', 'h', 'm'***REMOVED***:
            msg = "datetime64 sort, kind=%s" % kind
            c = a.copy(***REMOVED***
            c.sort(kind=kind***REMOVED***
            assert_equal(c, a, msg***REMOVED***
            c = b.copy(***REMOVED***
            c.sort(kind=kind***REMOVED***
            assert_equal(c, a, msg***REMOVED***

        # test timedelta64 sorts.
        a = np.arange(0, 101, dtype='timedelta64[D***REMOVED***'***REMOVED***
        b = a[::-1***REMOVED***
        for kind in ['q', 'h', 'm'***REMOVED***:
            msg = "timedelta64 sort, kind=%s" % kind
            c = a.copy(***REMOVED***
            c.sort(kind=kind***REMOVED***
            assert_equal(c, a, msg***REMOVED***
            c = b.copy(***REMOVED***
            c.sort(kind=kind***REMOVED***
            assert_equal(c, a, msg***REMOVED***

        # check axis handling. This should be the same for all type
        # specific sorts, so we only check it for one type and one kind
        a = np.array([[3, 2***REMOVED***, [1, 0***REMOVED******REMOVED******REMOVED***
        b = np.array([[1, 0***REMOVED***, [3, 2***REMOVED******REMOVED******REMOVED***
        c = np.array([[2, 3***REMOVED***, [0, 1***REMOVED******REMOVED******REMOVED***
        d = a.copy(***REMOVED***
        d.sort(axis=0***REMOVED***
        assert_equal(d, b, "test sort with axis=0"***REMOVED***
        d = a.copy(***REMOVED***
        d.sort(axis=1***REMOVED***
        assert_equal(d, c, "test sort with axis=1"***REMOVED***
        d = a.copy(***REMOVED***
        d.sort(***REMOVED***
        assert_equal(d, c, "test sort with default axis"***REMOVED***

        # check axis handling for multidimensional empty arrays
        a = np.array([***REMOVED******REMOVED***
        a.shape = (3, 2, 1, 0***REMOVED***
        for axis in range(-a.ndim, a.ndim***REMOVED***:
            msg = 'test empty array sort with axis={0***REMOVED***'.format(axis***REMOVED***
            assert_equal(np.sort(a, axis=axis***REMOVED***, a, msg***REMOVED***
        msg = 'test empty array sort with axis=None'
        assert_equal(np.sort(a, axis=None***REMOVED***, a.ravel(***REMOVED***, msg***REMOVED***

        # test generic class with bogus ordering,
        # should not segfault.
        class Boom(object***REMOVED***:
            def __lt__(self, other***REMOVED***:
                return True

        a = np.array([Boom(***REMOVED******REMOVED****100, dtype=object***REMOVED***
        for kind in ['q', 'm', 'h'***REMOVED***:
            msg = "bogus comparison object sort, kind=%s" % kind
            c.sort(kind=kind***REMOVED***

    def test_copy(self***REMOVED***:
        def assert_fortran(arr***REMOVED***:
            assert_(arr.flags.fortran***REMOVED***
            assert_(arr.flags.f_contiguous***REMOVED***
            assert_(not arr.flags.c_contiguous***REMOVED***

        def assert_c(arr***REMOVED***:
            assert_(not arr.flags.fortran***REMOVED***
            assert_(not arr.flags.f_contiguous***REMOVED***
            assert_(arr.flags.c_contiguous***REMOVED***

        a = np.empty((2, 2***REMOVED***, order='F'***REMOVED***
        # Test copying a Fortran array
        assert_c(a.copy(***REMOVED******REMOVED***
        assert_c(a.copy('C'***REMOVED******REMOVED***
        assert_fortran(a.copy('F'***REMOVED******REMOVED***
        assert_fortran(a.copy('A'***REMOVED******REMOVED***

        # Now test starting with a C array.
        a = np.empty((2, 2***REMOVED***, order='C'***REMOVED***
        assert_c(a.copy(***REMOVED******REMOVED***
        assert_c(a.copy('C'***REMOVED******REMOVED***
        assert_fortran(a.copy('F'***REMOVED******REMOVED***
        assert_c(a.copy('A'***REMOVED******REMOVED***

    def test_sort_order(self***REMOVED***:
        # Test sorting an array with fields
        x1 = np.array([21, 32, 14***REMOVED******REMOVED***
        x2 = np.array(['my', 'first', 'name'***REMOVED******REMOVED***
        x3 = np.array([3.1, 4.5, 6.2***REMOVED******REMOVED***
        r = np.rec.fromarrays([x1, x2, x3***REMOVED***, names='id,word,number'***REMOVED***

        r.sort(order=['id'***REMOVED******REMOVED***
        assert_equal(r.id, np.array([14, 21, 32***REMOVED******REMOVED******REMOVED***
        assert_equal(r.word, np.array(['name', 'my', 'first'***REMOVED******REMOVED******REMOVED***
        assert_equal(r.number, np.array([6.2, 3.1, 4.5***REMOVED******REMOVED******REMOVED***

        r.sort(order=['word'***REMOVED******REMOVED***
        assert_equal(r.id, np.array([32, 21, 14***REMOVED******REMOVED******REMOVED***
        assert_equal(r.word, np.array(['first', 'my', 'name'***REMOVED******REMOVED******REMOVED***
        assert_equal(r.number, np.array([4.5, 3.1, 6.2***REMOVED******REMOVED******REMOVED***

        r.sort(order=['number'***REMOVED******REMOVED***
        assert_equal(r.id, np.array([21, 32, 14***REMOVED******REMOVED******REMOVED***
        assert_equal(r.word, np.array(['my', 'first', 'name'***REMOVED******REMOVED******REMOVED***
        assert_equal(r.number, np.array([3.1, 4.5, 6.2***REMOVED******REMOVED******REMOVED***

        if sys.byteorder == 'little':
            strtype = '>i2'
        else:
            strtype = '<i2'
        mydtype = [('name', strchar + '5'***REMOVED***, ('col2', strtype***REMOVED******REMOVED***
        r = np.array([('a', 1***REMOVED***, ('b', 255***REMOVED***, ('c', 3***REMOVED***, ('d', 258***REMOVED******REMOVED***,
                     dtype=mydtype***REMOVED***
        r.sort(order='col2'***REMOVED***
        assert_equal(r['col2'***REMOVED***, [1, 3, 255, 258***REMOVED******REMOVED***
        assert_equal(r, np.array([('a', 1***REMOVED***, ('c', 3***REMOVED***, ('b', 255***REMOVED***, ('d', 258***REMOVED******REMOVED***,
                                 dtype=mydtype***REMOVED******REMOVED***

    def test_argsort(self***REMOVED***:
        # all c scalar argsorts use the same code with different types
        # so it suffices to run a quick check with one type. The number
        # of sorted items must be greater than ~50 to check the actual
        # algorithm because quick and merge sort fall over to insertion
        # sort for small arrays.
        a = np.arange(101***REMOVED***
        b = a[::-1***REMOVED***.copy(***REMOVED***
        for kind in ['q', 'm', 'h'***REMOVED***:
            msg = "scalar argsort, kind=%s" % kind
            assert_equal(a.copy(***REMOVED***.argsort(kind=kind***REMOVED***, a, msg***REMOVED***
            assert_equal(b.copy(***REMOVED***.argsort(kind=kind***REMOVED***, b, msg***REMOVED***

        # test complex argsorts. These use the same code as the scalars
        # but the compare function differs.
        ai = a*1j + 1
        bi = b*1j + 1
        for kind in ['q', 'm', 'h'***REMOVED***:
            msg = "complex argsort, kind=%s" % kind
            assert_equal(ai.copy(***REMOVED***.argsort(kind=kind***REMOVED***, a, msg***REMOVED***
            assert_equal(bi.copy(***REMOVED***.argsort(kind=kind***REMOVED***, b, msg***REMOVED***
        ai = a + 1j
        bi = b + 1j
        for kind in ['q', 'm', 'h'***REMOVED***:
            msg = "complex argsort, kind=%s" % kind
            assert_equal(ai.copy(***REMOVED***.argsort(kind=kind***REMOVED***, a, msg***REMOVED***
            assert_equal(bi.copy(***REMOVED***.argsort(kind=kind***REMOVED***, b, msg***REMOVED***

        # test argsort of complex arrays requiring byte-swapping, gh-5441
        for endianess in '<>':
            for dt in np.typecodes['Complex'***REMOVED***:
                arr = np.array([1+3.j, 2+2.j, 3+1.j***REMOVED***, dtype=endianess + dt***REMOVED***
                msg = 'byte-swapped complex argsort, dtype={0***REMOVED***'.format(dt***REMOVED***
                assert_equal(arr.argsort(***REMOVED***,
                             np.arange(len(arr***REMOVED***, dtype=np.intp***REMOVED***, msg***REMOVED***

        # test string argsorts.
        s = 'aaaaaaaa'
        a = np.array([s + chr(i***REMOVED*** for i in range(101***REMOVED******REMOVED******REMOVED***
        b = a[::-1***REMOVED***.copy(***REMOVED***
        r = np.arange(101***REMOVED***
        rr = r[::-1***REMOVED***
        for kind in ['q', 'm', 'h'***REMOVED***:
            msg = "string argsort, kind=%s" % kind
            assert_equal(a.copy(***REMOVED***.argsort(kind=kind***REMOVED***, r, msg***REMOVED***
            assert_equal(b.copy(***REMOVED***.argsort(kind=kind***REMOVED***, rr, msg***REMOVED***

        # test unicode argsorts.
        s = 'aaaaaaaa'
        a = np.array([s + chr(i***REMOVED*** for i in range(101***REMOVED******REMOVED***, dtype=np.unicode***REMOVED***
        b = a[::-1***REMOVED***
        r = np.arange(101***REMOVED***
        rr = r[::-1***REMOVED***
        for kind in ['q', 'm', 'h'***REMOVED***:
            msg = "unicode argsort, kind=%s" % kind
            assert_equal(a.copy(***REMOVED***.argsort(kind=kind***REMOVED***, r, msg***REMOVED***
            assert_equal(b.copy(***REMOVED***.argsort(kind=kind***REMOVED***, rr, msg***REMOVED***

        # test object array argsorts.
        a = np.empty((101,***REMOVED***, dtype=np.object***REMOVED***
        a[:***REMOVED*** = list(range(101***REMOVED******REMOVED***
        b = a[::-1***REMOVED***
        r = np.arange(101***REMOVED***
        rr = r[::-1***REMOVED***
        for kind in ['q', 'm', 'h'***REMOVED***:
            msg = "object argsort, kind=%s" % kind
            assert_equal(a.copy(***REMOVED***.argsort(kind=kind***REMOVED***, r, msg***REMOVED***
            assert_equal(b.copy(***REMOVED***.argsort(kind=kind***REMOVED***, rr, msg***REMOVED***

        # test structured array argsorts.
        dt = np.dtype([('f', float***REMOVED***, ('i', int***REMOVED******REMOVED******REMOVED***
        a = np.array([(i, i***REMOVED*** for i in range(101***REMOVED******REMOVED***, dtype=dt***REMOVED***
        b = a[::-1***REMOVED***
        r = np.arange(101***REMOVED***
        rr = r[::-1***REMOVED***
        for kind in ['q', 'm', 'h'***REMOVED***:
            msg = "structured array argsort, kind=%s" % kind
            assert_equal(a.copy(***REMOVED***.argsort(kind=kind***REMOVED***, r, msg***REMOVED***
            assert_equal(b.copy(***REMOVED***.argsort(kind=kind***REMOVED***, rr, msg***REMOVED***

        # test datetime64 argsorts.
        a = np.arange(0, 101, dtype='datetime64[D***REMOVED***'***REMOVED***
        b = a[::-1***REMOVED***
        r = np.arange(101***REMOVED***
        rr = r[::-1***REMOVED***
        for kind in ['q', 'h', 'm'***REMOVED***:
            msg = "datetime64 argsort, kind=%s" % kind
            assert_equal(a.copy(***REMOVED***.argsort(kind=kind***REMOVED***, r, msg***REMOVED***
            assert_equal(b.copy(***REMOVED***.argsort(kind=kind***REMOVED***, rr, msg***REMOVED***

        # test timedelta64 argsorts.
        a = np.arange(0, 101, dtype='timedelta64[D***REMOVED***'***REMOVED***
        b = a[::-1***REMOVED***
        r = np.arange(101***REMOVED***
        rr = r[::-1***REMOVED***
        for kind in ['q', 'h', 'm'***REMOVED***:
            msg = "timedelta64 argsort, kind=%s" % kind
            assert_equal(a.copy(***REMOVED***.argsort(kind=kind***REMOVED***, r, msg***REMOVED***
            assert_equal(b.copy(***REMOVED***.argsort(kind=kind***REMOVED***, rr, msg***REMOVED***

        # check axis handling. This should be the same for all type
        # specific argsorts, so we only check it for one type and one kind
        a = np.array([[3, 2***REMOVED***, [1, 0***REMOVED******REMOVED******REMOVED***
        b = np.array([[1, 1***REMOVED***, [0, 0***REMOVED******REMOVED******REMOVED***
        c = np.array([[1, 0***REMOVED***, [1, 0***REMOVED******REMOVED******REMOVED***
        assert_equal(a.copy(***REMOVED***.argsort(axis=0***REMOVED***, b***REMOVED***
        assert_equal(a.copy(***REMOVED***.argsort(axis=1***REMOVED***, c***REMOVED***
        assert_equal(a.copy(***REMOVED***.argsort(***REMOVED***, c***REMOVED***

        # check axis handling for multidimensional empty arrays
        a = np.array([***REMOVED******REMOVED***
        a.shape = (3, 2, 1, 0***REMOVED***
        for axis in range(-a.ndim, a.ndim***REMOVED***:
            msg = 'test empty array argsort with axis={0***REMOVED***'.format(axis***REMOVED***
            assert_equal(np.argsort(a, axis=axis***REMOVED***,
                         np.zeros_like(a, dtype=np.intp***REMOVED***, msg***REMOVED***
        msg = 'test empty array argsort with axis=None'
        assert_equal(np.argsort(a, axis=None***REMOVED***,
                     np.zeros_like(a.ravel(***REMOVED***, dtype=np.intp***REMOVED***, msg***REMOVED***

        # check that stable argsorts are stable
        r = np.arange(100***REMOVED***
        # scalars
        a = np.zeros(100***REMOVED***
        assert_equal(a.argsort(kind='m'***REMOVED***, r***REMOVED***
        # complex
        a = np.zeros(100, dtype=np.complex***REMOVED***
        assert_equal(a.argsort(kind='m'***REMOVED***, r***REMOVED***
        # string
        a = np.array(['aaaaaaaaa' for i in range(100***REMOVED******REMOVED******REMOVED***
        assert_equal(a.argsort(kind='m'***REMOVED***, r***REMOVED***
        # unicode
        a = np.array(['aaaaaaaaa' for i in range(100***REMOVED******REMOVED***, dtype=np.unicode***REMOVED***
        assert_equal(a.argsort(kind='m'***REMOVED***, r***REMOVED***

    def test_sort_unicode_kind(self***REMOVED***:
        d = np.arange(10***REMOVED***
        k = b'\xc3\xa4'.decode("UTF8"***REMOVED***
        assert_raises(ValueError, d.sort, kind=k***REMOVED***
        assert_raises(ValueError, d.argsort, kind=k***REMOVED***

    def test_searchsorted(self***REMOVED***:
        # test for floats and complex containing nans. The logic is the
        # same for all float types so only test double types for now.
        # The search sorted routines use the compare functions for the
        # array type, so this checks if that is consistent with the sort
        # order.

        # check double
        a = np.array([0, 1, np.nan***REMOVED******REMOVED***
        msg = "Test real searchsorted with nans, side='l'"
        b = a.searchsorted(a, side='l'***REMOVED***
        assert_equal(b, np.arange(3***REMOVED***, msg***REMOVED***
        msg = "Test real searchsorted with nans, side='r'"
        b = a.searchsorted(a, side='r'***REMOVED***
        assert_equal(b, np.arange(1, 4***REMOVED***, msg***REMOVED***
        # check double complex
        a = np.zeros(9, dtype=np.complex128***REMOVED***
        a.real += [0, 0, 1, 1, 0, 1, np.nan, np.nan, np.nan***REMOVED***
        a.imag += [0, 1, 0, 1, np.nan, np.nan, 0, 1, np.nan***REMOVED***
        msg = "Test complex searchsorted with nans, side='l'"
        b = a.searchsorted(a, side='l'***REMOVED***
        assert_equal(b, np.arange(9***REMOVED***, msg***REMOVED***
        msg = "Test complex searchsorted with nans, side='r'"
        b = a.searchsorted(a, side='r'***REMOVED***
        assert_equal(b, np.arange(1, 10***REMOVED***, msg***REMOVED***
        msg = "Test searchsorted with little endian, side='l'"
        a = np.array([0, 128***REMOVED***, dtype='<i4'***REMOVED***
        b = a.searchsorted(np.array(128, dtype='<i4'***REMOVED******REMOVED***
        assert_equal(b, 1, msg***REMOVED***
        msg = "Test searchsorted with big endian, side='l'"
        a = np.array([0, 128***REMOVED***, dtype='>i4'***REMOVED***
        b = a.searchsorted(np.array(128, dtype='>i4'***REMOVED******REMOVED***
        assert_equal(b, 1, msg***REMOVED***

        # Check 0 elements
        a = np.ones(0***REMOVED***
        b = a.searchsorted([0, 1, 2***REMOVED***, 'l'***REMOVED***
        assert_equal(b, [0, 0, 0***REMOVED******REMOVED***
        b = a.searchsorted([0, 1, 2***REMOVED***, 'r'***REMOVED***
        assert_equal(b, [0, 0, 0***REMOVED******REMOVED***
        a = np.ones(1***REMOVED***
        # Check 1 element
        b = a.searchsorted([0, 1, 2***REMOVED***, 'l'***REMOVED***
        assert_equal(b, [0, 0, 1***REMOVED******REMOVED***
        b = a.searchsorted([0, 1, 2***REMOVED***, 'r'***REMOVED***
        assert_equal(b, [0, 1, 1***REMOVED******REMOVED***
        # Check all elements equal
        a = np.ones(2***REMOVED***
        b = a.searchsorted([0, 1, 2***REMOVED***, 'l'***REMOVED***
        assert_equal(b, [0, 0, 2***REMOVED******REMOVED***
        b = a.searchsorted([0, 1, 2***REMOVED***, 'r'***REMOVED***
        assert_equal(b, [0, 2, 2***REMOVED******REMOVED***

        # Test searching unaligned array
        a = np.arange(10***REMOVED***
        aligned = np.empty(a.itemsize * a.size + 1, 'uint8'***REMOVED***
        unaligned = aligned[1:***REMOVED***.view(a.dtype***REMOVED***
        unaligned[:***REMOVED*** = a
        # Test searching unaligned array
        b = unaligned.searchsorted(a, 'l'***REMOVED***
        assert_equal(b, a***REMOVED***
        b = unaligned.searchsorted(a, 'r'***REMOVED***
        assert_equal(b, a + 1***REMOVED***
        # Test searching for unaligned keys
        b = a.searchsorted(unaligned, 'l'***REMOVED***
        assert_equal(b, a***REMOVED***
        b = a.searchsorted(unaligned, 'r'***REMOVED***
        assert_equal(b, a + 1***REMOVED***

        # Test smart resetting of binsearch indices
        a = np.arange(5***REMOVED***
        b = a.searchsorted([6, 5, 4***REMOVED***, 'l'***REMOVED***
        assert_equal(b, [5, 5, 4***REMOVED******REMOVED***
        b = a.searchsorted([6, 5, 4***REMOVED***, 'r'***REMOVED***
        assert_equal(b, [5, 5, 5***REMOVED******REMOVED***

        # Test all type specific binary search functions
        types = ''.join((np.typecodes['AllInteger'***REMOVED***, np.typecodes['AllFloat'***REMOVED***,
                         np.typecodes['Datetime'***REMOVED***, '?O'***REMOVED******REMOVED***
        for dt in types:
            if dt == 'M':
                dt = 'M8[D***REMOVED***'
            if dt == '?':
                a = np.arange(2, dtype=dt***REMOVED***
                out = np.arange(2***REMOVED***
            else:
                a = np.arange(0, 5, dtype=dt***REMOVED***
                out = np.arange(5***REMOVED***
            b = a.searchsorted(a, 'l'***REMOVED***
            assert_equal(b, out***REMOVED***
            b = a.searchsorted(a, 'r'***REMOVED***
            assert_equal(b, out + 1***REMOVED***

    def test_searchsorted_unicode(self***REMOVED***:
        # Test searchsorted on unicode strings.

        # 1.6.1 contained a string length miscalculation in
        # arraytypes.c.src:UNICODE_compare(***REMOVED*** which manifested as
        # incorrect/inconsistent results from searchsorted.
        a = np.array(['P:\\20x_dapi_cy3\\20x_dapi_cy3_20100185_1',
                      'P:\\20x_dapi_cy3\\20x_dapi_cy3_20100186_1',
                      'P:\\20x_dapi_cy3\\20x_dapi_cy3_20100187_1',
                      'P:\\20x_dapi_cy3\\20x_dapi_cy3_20100189_1',
                      'P:\\20x_dapi_cy3\\20x_dapi_cy3_20100190_1',
                      'P:\\20x_dapi_cy3\\20x_dapi_cy3_20100191_1',
                      'P:\\20x_dapi_cy3\\20x_dapi_cy3_20100192_1',
                      'P:\\20x_dapi_cy3\\20x_dapi_cy3_20100193_1',
                      'P:\\20x_dapi_cy3\\20x_dapi_cy3_20100194_1',
                      'P:\\20x_dapi_cy3\\20x_dapi_cy3_20100195_1',
                      'P:\\20x_dapi_cy3\\20x_dapi_cy3_20100196_1',
                      'P:\\20x_dapi_cy3\\20x_dapi_cy3_20100197_1',
                      'P:\\20x_dapi_cy3\\20x_dapi_cy3_20100198_1',
                      'P:\\20x_dapi_cy3\\20x_dapi_cy3_20100199_1'***REMOVED***,
                     dtype=np.unicode***REMOVED***
        ind = np.arange(len(a***REMOVED******REMOVED***
        assert_equal([a.searchsorted(v, 'left'***REMOVED*** for v in a***REMOVED***, ind***REMOVED***
        assert_equal([a.searchsorted(v, 'right'***REMOVED*** for v in a***REMOVED***, ind + 1***REMOVED***
        assert_equal([a.searchsorted(a[i***REMOVED***, 'left'***REMOVED*** for i in ind***REMOVED***, ind***REMOVED***
        assert_equal([a.searchsorted(a[i***REMOVED***, 'right'***REMOVED*** for i in ind***REMOVED***, ind + 1***REMOVED***

    def test_searchsorted_with_sorter(self***REMOVED***:
        a = np.array([5, 2, 1, 3, 4***REMOVED******REMOVED***
        s = np.argsort(a***REMOVED***
        assert_raises(TypeError, np.searchsorted, a, 0, sorter=(1, (2, 3***REMOVED******REMOVED******REMOVED***
        assert_raises(TypeError, np.searchsorted, a, 0, sorter=[1.1***REMOVED******REMOVED***
        assert_raises(ValueError, np.searchsorted, a, 0, sorter=[1, 2, 3, 4***REMOVED******REMOVED***
        assert_raises(ValueError, np.searchsorted, a, 0, sorter=[1, 2, 3, 4, 5, 6***REMOVED******REMOVED***

        # bounds check
        assert_raises(ValueError, np.searchsorted, a, 4, sorter=[0, 1, 2, 3, 5***REMOVED******REMOVED***
        assert_raises(ValueError, np.searchsorted, a, 0, sorter=[-1, 0, 1, 2, 3***REMOVED******REMOVED***
        assert_raises(ValueError, np.searchsorted, a, 0, sorter=[4, 0, -1, 2, 3***REMOVED******REMOVED***

        a = np.random.rand(300***REMOVED***
        s = a.argsort(***REMOVED***
        b = np.sort(a***REMOVED***
        k = np.linspace(0, 1, 20***REMOVED***
        assert_equal(b.searchsorted(k***REMOVED***, a.searchsorted(k, sorter=s***REMOVED******REMOVED***

        a = np.array([0, 1, 2, 3, 5***REMOVED****20***REMOVED***
        s = a.argsort(***REMOVED***
        k = [0, 1, 2, 3, 5***REMOVED***
        expected = [0, 20, 40, 60, 80***REMOVED***
        assert_equal(a.searchsorted(k, side='l', sorter=s***REMOVED***, expected***REMOVED***
        expected = [20, 40, 60, 80, 100***REMOVED***
        assert_equal(a.searchsorted(k, side='r', sorter=s***REMOVED***, expected***REMOVED***

        # Test searching unaligned array
        keys = np.arange(10***REMOVED***
        a = keys.copy(***REMOVED***
        np.random.shuffle(s***REMOVED***
        s = a.argsort(***REMOVED***
        aligned = np.empty(a.itemsize * a.size + 1, 'uint8'***REMOVED***
        unaligned = aligned[1:***REMOVED***.view(a.dtype***REMOVED***
        # Test searching unaligned array
        unaligned[:***REMOVED*** = a
        b = unaligned.searchsorted(keys, 'l', s***REMOVED***
        assert_equal(b, keys***REMOVED***
        b = unaligned.searchsorted(keys, 'r', s***REMOVED***
        assert_equal(b, keys + 1***REMOVED***
        # Test searching for unaligned keys
        unaligned[:***REMOVED*** = keys
        b = a.searchsorted(unaligned, 'l', s***REMOVED***
        assert_equal(b, keys***REMOVED***
        b = a.searchsorted(unaligned, 'r', s***REMOVED***
        assert_equal(b, keys + 1***REMOVED***

        # Test all type specific indirect binary search functions
        types = ''.join((np.typecodes['AllInteger'***REMOVED***, np.typecodes['AllFloat'***REMOVED***,
                         np.typecodes['Datetime'***REMOVED***, '?O'***REMOVED******REMOVED***
        for dt in types:
            if dt == 'M':
                dt = 'M8[D***REMOVED***'
            if dt == '?':
                a = np.array([1, 0***REMOVED***, dtype=dt***REMOVED***
                # We want the sorter array to be of a type that is different
                # from np.intp in all platforms, to check for #4698
                s = np.array([1, 0***REMOVED***, dtype=np.int16***REMOVED***
                out = np.array([1, 0***REMOVED******REMOVED***
            else:
                a = np.array([3, 4, 1, 2, 0***REMOVED***, dtype=dt***REMOVED***
                # We want the sorter array to be of a type that is different
                # from np.intp in all platforms, to check for #4698
                s = np.array([4, 2, 3, 0, 1***REMOVED***, dtype=np.int16***REMOVED***
                out = np.array([3, 4, 1, 2, 0***REMOVED***, dtype=np.intp***REMOVED***
            b = a.searchsorted(a, 'l', s***REMOVED***
            assert_equal(b, out***REMOVED***
            b = a.searchsorted(a, 'r', s***REMOVED***
            assert_equal(b, out + 1***REMOVED***

        # Test non-contiguous sorter array
        a = np.array([3, 4, 1, 2, 0***REMOVED******REMOVED***
        srt = np.empty((10,***REMOVED***, dtype=np.intp***REMOVED***
        srt[1::2***REMOVED*** = -1
        srt[::2***REMOVED*** = [4, 2, 3, 0, 1***REMOVED***
        s = srt[::2***REMOVED***
        out = np.array([3, 4, 1, 2, 0***REMOVED***, dtype=np.intp***REMOVED***
        b = a.searchsorted(a, 'l', s***REMOVED***
        assert_equal(b, out***REMOVED***
        b = a.searchsorted(a, 'r', s***REMOVED***
        assert_equal(b, out + 1***REMOVED***

    def test_searchsorted_return_type(self***REMOVED***:
        # Functions returning indices should always return base ndarrays
        class A(np.ndarray***REMOVED***:
            pass
        a = np.arange(5***REMOVED***.view(A***REMOVED***
        b = np.arange(1, 3***REMOVED***.view(A***REMOVED***
        s = np.arange(5***REMOVED***.view(A***REMOVED***
        assert_(not isinstance(a.searchsorted(b, 'l'***REMOVED***, A***REMOVED******REMOVED***
        assert_(not isinstance(a.searchsorted(b, 'r'***REMOVED***, A***REMOVED******REMOVED***
        assert_(not isinstance(a.searchsorted(b, 'l', s***REMOVED***, A***REMOVED******REMOVED***
        assert_(not isinstance(a.searchsorted(b, 'r', s***REMOVED***, A***REMOVED******REMOVED***

    def test_argpartition_out_of_range(self***REMOVED***:
        # Test out of range values in kth raise an error, gh-5469
        d = np.arange(10***REMOVED***
        assert_raises(ValueError, d.argpartition, 10***REMOVED***
        assert_raises(ValueError, d.argpartition, -11***REMOVED***
        # Test also for generic type argpartition, which uses sorting
        # and used to not bound check kth
        d_obj = np.arange(10, dtype=object***REMOVED***
        assert_raises(ValueError, d_obj.argpartition, 10***REMOVED***
        assert_raises(ValueError, d_obj.argpartition, -11***REMOVED***

    def test_partition_out_of_range(self***REMOVED***:
        # Test out of range values in kth raise an error, gh-5469
        d = np.arange(10***REMOVED***
        assert_raises(ValueError, d.partition, 10***REMOVED***
        assert_raises(ValueError, d.partition, -11***REMOVED***
        # Test also for generic type partition, which uses sorting
        # and used to not bound check kth
        d_obj = np.arange(10, dtype=object***REMOVED***
        assert_raises(ValueError, d_obj.partition, 10***REMOVED***
        assert_raises(ValueError, d_obj.partition, -11***REMOVED***

    def test_partition_empty_array(self***REMOVED***:
        # check axis handling for multidimensional empty arrays
        a = np.array([***REMOVED******REMOVED***
        a.shape = (3, 2, 1, 0***REMOVED***
        for axis in range(-a.ndim, a.ndim***REMOVED***:
            msg = 'test empty array partition with axis={0***REMOVED***'.format(axis***REMOVED***
            assert_equal(np.partition(a, 0, axis=axis***REMOVED***, a, msg***REMOVED***
        msg = 'test empty array partition with axis=None'
        assert_equal(np.partition(a, 0, axis=None***REMOVED***, a.ravel(***REMOVED***, msg***REMOVED***

    def test_argpartition_empty_array(self***REMOVED***:
        # check axis handling for multidimensional empty arrays
        a = np.array([***REMOVED******REMOVED***
        a.shape = (3, 2, 1, 0***REMOVED***
        for axis in range(-a.ndim, a.ndim***REMOVED***:
            msg = 'test empty array argpartition with axis={0***REMOVED***'.format(axis***REMOVED***
            assert_equal(np.partition(a, 0, axis=axis***REMOVED***,
                         np.zeros_like(a, dtype=np.intp***REMOVED***, msg***REMOVED***
        msg = 'test empty array argpartition with axis=None'
        assert_equal(np.partition(a, 0, axis=None***REMOVED***,
                     np.zeros_like(a.ravel(***REMOVED***, dtype=np.intp***REMOVED***, msg***REMOVED***

    def test_partition(self***REMOVED***:
        d = np.arange(10***REMOVED***
        assert_raises(TypeError, np.partition, d, 2, kind=1***REMOVED***
        assert_raises(ValueError, np.partition, d, 2, kind="nonsense"***REMOVED***
        assert_raises(ValueError, np.argpartition, d, 2, kind="nonsense"***REMOVED***
        assert_raises(ValueError, d.partition, 2, axis=0, kind="nonsense"***REMOVED***
        assert_raises(ValueError, d.argpartition, 2, axis=0, kind="nonsense"***REMOVED***
        for k in ("introselect",***REMOVED***:
            d = np.array([***REMOVED******REMOVED***
            assert_array_equal(np.partition(d, 0, kind=k***REMOVED***, d***REMOVED***
            assert_array_equal(np.argpartition(d, 0, kind=k***REMOVED***, d***REMOVED***
            d = np.ones(1***REMOVED***
            assert_array_equal(np.partition(d, 0, kind=k***REMOVED***[0***REMOVED***, d***REMOVED***
            assert_array_equal(d[np.argpartition(d, 0, kind=k***REMOVED******REMOVED***,
                               np.partition(d, 0, kind=k***REMOVED******REMOVED***

            # kth not modified
            kth = np.array([30, 15, 5***REMOVED******REMOVED***
            okth = kth.copy(***REMOVED***
            np.partition(np.arange(40***REMOVED***, kth***REMOVED***
            assert_array_equal(kth, okth***REMOVED***

            for r in ([2, 1***REMOVED***, [1, 2***REMOVED***, [1, 1***REMOVED******REMOVED***:
                d = np.array(r***REMOVED***
                tgt = np.sort(d***REMOVED***
                assert_array_equal(np.partition(d, 0, kind=k***REMOVED***[0***REMOVED***, tgt[0***REMOVED******REMOVED***
                assert_array_equal(np.partition(d, 1, kind=k***REMOVED***[1***REMOVED***, tgt[1***REMOVED******REMOVED***
                assert_array_equal(d[np.argpartition(d, 0, kind=k***REMOVED******REMOVED***,
                                   np.partition(d, 0, kind=k***REMOVED******REMOVED***
                assert_array_equal(d[np.argpartition(d, 1, kind=k***REMOVED******REMOVED***,
                                   np.partition(d, 1, kind=k***REMOVED******REMOVED***
                for i in range(d.size***REMOVED***:
                    d[i:***REMOVED***.partition(0, kind=k***REMOVED***
                assert_array_equal(d, tgt***REMOVED***

            for r in ([3, 2, 1***REMOVED***, [1, 2, 3***REMOVED***, [2, 1, 3***REMOVED***, [2, 3, 1***REMOVED***,
                      [1, 1, 1***REMOVED***, [1, 2, 2***REMOVED***, [2, 2, 1***REMOVED***, [1, 2, 1***REMOVED******REMOVED***:
                d = np.array(r***REMOVED***
                tgt = np.sort(d***REMOVED***
                assert_array_equal(np.partition(d, 0, kind=k***REMOVED***[0***REMOVED***, tgt[0***REMOVED******REMOVED***
                assert_array_equal(np.partition(d, 1, kind=k***REMOVED***[1***REMOVED***, tgt[1***REMOVED******REMOVED***
                assert_array_equal(np.partition(d, 2, kind=k***REMOVED***[2***REMOVED***, tgt[2***REMOVED******REMOVED***
                assert_array_equal(d[np.argpartition(d, 0, kind=k***REMOVED******REMOVED***,
                                   np.partition(d, 0, kind=k***REMOVED******REMOVED***
                assert_array_equal(d[np.argpartition(d, 1, kind=k***REMOVED******REMOVED***,
                                   np.partition(d, 1, kind=k***REMOVED******REMOVED***
                assert_array_equal(d[np.argpartition(d, 2, kind=k***REMOVED******REMOVED***,
                                   np.partition(d, 2, kind=k***REMOVED******REMOVED***
                for i in range(d.size***REMOVED***:
                    d[i:***REMOVED***.partition(0, kind=k***REMOVED***
                assert_array_equal(d, tgt***REMOVED***

            d = np.ones(50***REMOVED***
            assert_array_equal(np.partition(d, 0, kind=k***REMOVED***, d***REMOVED***
            assert_array_equal(d[np.argpartition(d, 0, kind=k***REMOVED******REMOVED***,
                               np.partition(d, 0, kind=k***REMOVED******REMOVED***

            # sorted
            d = np.arange(49***REMOVED***
            self.assertEqual(np.partition(d, 5, kind=k***REMOVED***[5***REMOVED***, 5***REMOVED***
            self.assertEqual(np.partition(d, 15, kind=k***REMOVED***[15***REMOVED***, 15***REMOVED***
            assert_array_equal(d[np.argpartition(d, 5, kind=k***REMOVED******REMOVED***,
                               np.partition(d, 5, kind=k***REMOVED******REMOVED***
            assert_array_equal(d[np.argpartition(d, 15, kind=k***REMOVED******REMOVED***,
                               np.partition(d, 15, kind=k***REMOVED******REMOVED***

            # rsorted
            d = np.arange(47***REMOVED***[::-1***REMOVED***
            self.assertEqual(np.partition(d, 6, kind=k***REMOVED***[6***REMOVED***, 6***REMOVED***
            self.assertEqual(np.partition(d, 16, kind=k***REMOVED***[16***REMOVED***, 16***REMOVED***
            assert_array_equal(d[np.argpartition(d, 6, kind=k***REMOVED******REMOVED***,
                               np.partition(d, 6, kind=k***REMOVED******REMOVED***
            assert_array_equal(d[np.argpartition(d, 16, kind=k***REMOVED******REMOVED***,
                               np.partition(d, 16, kind=k***REMOVED******REMOVED***

            assert_array_equal(np.partition(d, -6, kind=k***REMOVED***,
                               np.partition(d, 41, kind=k***REMOVED******REMOVED***
            assert_array_equal(np.partition(d, -16, kind=k***REMOVED***,
                               np.partition(d, 31, kind=k***REMOVED******REMOVED***
            assert_array_equal(d[np.argpartition(d, -6, kind=k***REMOVED******REMOVED***,
                               np.partition(d, 41, kind=k***REMOVED******REMOVED***

            # median of 3 killer, O(n^2***REMOVED*** on pure median 3 pivot quickselect
            # exercises the median of median of 5 code used to keep O(n***REMOVED***
            d = np.arange(1000000***REMOVED***
            x = np.roll(d, d.size // 2***REMOVED***
            mid = x.size // 2 + 1
            assert_equal(np.partition(x, mid***REMOVED***[mid***REMOVED***, mid***REMOVED***
            d = np.arange(1000001***REMOVED***
            x = np.roll(d, d.size // 2 + 1***REMOVED***
            mid = x.size // 2 + 1
            assert_equal(np.partition(x, mid***REMOVED***[mid***REMOVED***, mid***REMOVED***

            # max
            d = np.ones(10***REMOVED***
            d[1***REMOVED*** = 4
            assert_equal(np.partition(d, (2, -1***REMOVED******REMOVED***[-1***REMOVED***, 4***REMOVED***
            assert_equal(np.partition(d, (2, -1***REMOVED******REMOVED***[2***REMOVED***, 1***REMOVED***
            assert_equal(d[np.argpartition(d, (2, -1***REMOVED******REMOVED******REMOVED***[-1***REMOVED***, 4***REMOVED***
            assert_equal(d[np.argpartition(d, (2, -1***REMOVED******REMOVED******REMOVED***[2***REMOVED***, 1***REMOVED***
            d[1***REMOVED*** = np.nan
            assert_(np.isnan(d[np.argpartition(d, (2, -1***REMOVED******REMOVED******REMOVED***[-1***REMOVED******REMOVED******REMOVED***
            assert_(np.isnan(np.partition(d, (2, -1***REMOVED******REMOVED***[-1***REMOVED******REMOVED******REMOVED***

            # equal elements
            d = np.arange(47***REMOVED*** % 7
            tgt = np.sort(np.arange(47***REMOVED*** % 7***REMOVED***
            np.random.shuffle(d***REMOVED***
            for i in range(d.size***REMOVED***:
                self.assertEqual(np.partition(d, i, kind=k***REMOVED***[i***REMOVED***, tgt[i***REMOVED******REMOVED***
            assert_array_equal(d[np.argpartition(d, 6, kind=k***REMOVED******REMOVED***,
                               np.partition(d, 6, kind=k***REMOVED******REMOVED***
            assert_array_equal(d[np.argpartition(d, 16, kind=k***REMOVED******REMOVED***,
                               np.partition(d, 16, kind=k***REMOVED******REMOVED***
            for i in range(d.size***REMOVED***:
                d[i:***REMOVED***.partition(0, kind=k***REMOVED***
            assert_array_equal(d, tgt***REMOVED***

            d = np.array([0, 1, 2, 3, 4, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
                          7, 7, 7, 7, 7, 9***REMOVED******REMOVED***
            kth = [0, 3, 19, 20***REMOVED***
            assert_equal(np.partition(d, kth, kind=k***REMOVED***[kth***REMOVED***, (0, 3, 7, 7***REMOVED******REMOVED***
            assert_equal(d[np.argpartition(d, kth, kind=k***REMOVED******REMOVED***[kth***REMOVED***, (0, 3, 7, 7***REMOVED******REMOVED***

            d = np.array([2, 1***REMOVED******REMOVED***
            d.partition(0, kind=k***REMOVED***
            assert_raises(ValueError, d.partition, 2***REMOVED***
            assert_raises(ValueError, d.partition, 3, axis=1***REMOVED***
            assert_raises(ValueError, np.partition, d, 2***REMOVED***
            assert_raises(ValueError, np.partition, d, 2, axis=1***REMOVED***
            assert_raises(ValueError, d.argpartition, 2***REMOVED***
            assert_raises(ValueError, d.argpartition, 3, axis=1***REMOVED***
            assert_raises(ValueError, np.argpartition, d, 2***REMOVED***
            assert_raises(ValueError, np.argpartition, d, 2, axis=1***REMOVED***
            d = np.arange(10***REMOVED***.reshape((2, 5***REMOVED******REMOVED***
            d.partition(1, axis=0, kind=k***REMOVED***
            d.partition(4, axis=1, kind=k***REMOVED***
            np.partition(d, 1, axis=0, kind=k***REMOVED***
            np.partition(d, 4, axis=1, kind=k***REMOVED***
            np.partition(d, 1, axis=None, kind=k***REMOVED***
            np.partition(d, 9, axis=None, kind=k***REMOVED***
            d.argpartition(1, axis=0, kind=k***REMOVED***
            d.argpartition(4, axis=1, kind=k***REMOVED***
            np.argpartition(d, 1, axis=0, kind=k***REMOVED***
            np.argpartition(d, 4, axis=1, kind=k***REMOVED***
            np.argpartition(d, 1, axis=None, kind=k***REMOVED***
            np.argpartition(d, 9, axis=None, kind=k***REMOVED***
            assert_raises(ValueError, d.partition, 2, axis=0***REMOVED***
            assert_raises(ValueError, d.partition, 11, axis=1***REMOVED***
            assert_raises(TypeError, d.partition, 2, axis=None***REMOVED***
            assert_raises(ValueError, np.partition, d, 9, axis=1***REMOVED***
            assert_raises(ValueError, np.partition, d, 11, axis=None***REMOVED***
            assert_raises(ValueError, d.argpartition, 2, axis=0***REMOVED***
            assert_raises(ValueError, d.argpartition, 11, axis=1***REMOVED***
            assert_raises(ValueError, np.argpartition, d, 9, axis=1***REMOVED***
            assert_raises(ValueError, np.argpartition, d, 11, axis=None***REMOVED***

            td = [(dt, s***REMOVED*** for dt in [np.int32, np.float32, np.complex64***REMOVED***
                  for s in (9, 16***REMOVED******REMOVED***
            for dt, s in td:
                aae = assert_array_equal
                at = self.assertTrue

                d = np.arange(s, dtype=dt***REMOVED***
                np.random.shuffle(d***REMOVED***
                d1 = np.tile(np.arange(s, dtype=dt***REMOVED***, (4, 1***REMOVED******REMOVED***
                map(np.random.shuffle, d1***REMOVED***
                d0 = np.transpose(d1***REMOVED***
                for i in range(d.size***REMOVED***:
                    p = np.partition(d, i, kind=k***REMOVED***
                    self.assertEqual(p[i***REMOVED***, i***REMOVED***
                    # all before are smaller
                    assert_array_less(p[:i***REMOVED***, p[i***REMOVED******REMOVED***
                    # all after are larger
                    assert_array_less(p[i***REMOVED***, p[i + 1:***REMOVED******REMOVED***
                    aae(p, d[np.argpartition(d, i, kind=k***REMOVED******REMOVED******REMOVED***

                    p = np.partition(d1, i, axis=1, kind=k***REMOVED***
                    aae(p[:, i***REMOVED***, np.array([i***REMOVED*** * d1.shape[0***REMOVED***, dtype=dt***REMOVED******REMOVED***
                    # array_less does not seem to work right
                    at((p[:, :i***REMOVED***.T <= p[:, i***REMOVED******REMOVED***.all(***REMOVED***,
                       msg="%d: %r <= %r" % (i, p[:, i***REMOVED***, p[:, :i***REMOVED***.T***REMOVED******REMOVED***
                    at((p[:, i + 1:***REMOVED***.T > p[:, i***REMOVED******REMOVED***.all(***REMOVED***,
                       msg="%d: %r < %r" % (i, p[:, i***REMOVED***, p[:, i + 1:***REMOVED***.T***REMOVED******REMOVED***
                    aae(p, d1[np.arange(d1.shape[0***REMOVED******REMOVED***[:, None***REMOVED***,
                        np.argpartition(d1, i, axis=1, kind=k***REMOVED******REMOVED******REMOVED***

                    p = np.partition(d0, i, axis=0, kind=k***REMOVED***
                    aae(p[i, :***REMOVED***, np.array([i***REMOVED*** * d1.shape[0***REMOVED***, dtype=dt***REMOVED******REMOVED***
                    # array_less does not seem to work right
                    at((p[:i, :***REMOVED*** <= p[i, :***REMOVED******REMOVED***.all(***REMOVED***,
                       msg="%d: %r <= %r" % (i, p[i, :***REMOVED***, p[:i, :***REMOVED******REMOVED******REMOVED***
                    at((p[i + 1:, :***REMOVED*** > p[i, :***REMOVED******REMOVED***.all(***REMOVED***,
                       msg="%d: %r < %r" % (i, p[i, :***REMOVED***, p[:, i + 1:***REMOVED******REMOVED******REMOVED***
                    aae(p, d0[np.argpartition(d0, i, axis=0, kind=k***REMOVED***,
                        np.arange(d0.shape[1***REMOVED******REMOVED***[None, :***REMOVED******REMOVED******REMOVED***

                    # check inplace
                    dc = d.copy(***REMOVED***
                    dc.partition(i, kind=k***REMOVED***
                    assert_equal(dc, np.partition(d, i, kind=k***REMOVED******REMOVED***
                    dc = d0.copy(***REMOVED***
                    dc.partition(i, axis=0, kind=k***REMOVED***
                    assert_equal(dc, np.partition(d0, i, axis=0, kind=k***REMOVED******REMOVED***
                    dc = d1.copy(***REMOVED***
                    dc.partition(i, axis=1, kind=k***REMOVED***
                    assert_equal(dc, np.partition(d1, i, axis=1, kind=k***REMOVED******REMOVED***

    def assert_partitioned(self, d, kth***REMOVED***:
        prev = 0
        for k in np.sort(kth***REMOVED***:
            assert_array_less(d[prev:k***REMOVED***, d[k***REMOVED***, err_msg='kth %d' % k***REMOVED***
            assert_((d[k:***REMOVED*** >= d[k***REMOVED******REMOVED***.all(***REMOVED***,
                    msg="kth %d, %r not greater equal %d" % (k, d[k:***REMOVED***, d[k***REMOVED******REMOVED******REMOVED***
            prev = k + 1

    def test_partition_iterative(self***REMOVED***:
            d = np.arange(17***REMOVED***
            kth = (0, 1, 2, 429, 231***REMOVED***
            assert_raises(ValueError, d.partition, kth***REMOVED***
            assert_raises(ValueError, d.argpartition, kth***REMOVED***
            d = np.arange(10***REMOVED***.reshape((2, 5***REMOVED******REMOVED***
            assert_raises(ValueError, d.partition, kth, axis=0***REMOVED***
            assert_raises(ValueError, d.partition, kth, axis=1***REMOVED***
            assert_raises(ValueError, np.partition, d, kth, axis=1***REMOVED***
            assert_raises(ValueError, np.partition, d, kth, axis=None***REMOVED***

            d = np.array([3, 4, 2, 1***REMOVED******REMOVED***
            p = np.partition(d, (0, 3***REMOVED******REMOVED***
            self.assert_partitioned(p, (0, 3***REMOVED******REMOVED***
            self.assert_partitioned(d[np.argpartition(d, (0, 3***REMOVED******REMOVED******REMOVED***, (0, 3***REMOVED******REMOVED***

            assert_array_equal(p, np.partition(d, (-3, -1***REMOVED******REMOVED******REMOVED***
            assert_array_equal(p, d[np.argpartition(d, (-3, -1***REMOVED******REMOVED******REMOVED******REMOVED***

            d = np.arange(17***REMOVED***
            np.random.shuffle(d***REMOVED***
            d.partition(range(d.size***REMOVED******REMOVED***
            assert_array_equal(np.arange(17***REMOVED***, d***REMOVED***
            np.random.shuffle(d***REMOVED***
            assert_array_equal(np.arange(17***REMOVED***, d[d.argpartition(range(d.size***REMOVED******REMOVED******REMOVED******REMOVED***

            # test unsorted kth
            d = np.arange(17***REMOVED***
            np.random.shuffle(d***REMOVED***
            keys = np.array([1, 3, 8, -2***REMOVED******REMOVED***
            np.random.shuffle(d***REMOVED***
            p = np.partition(d, keys***REMOVED***
            self.assert_partitioned(p, keys***REMOVED***
            p = d[np.argpartition(d, keys***REMOVED******REMOVED***
            self.assert_partitioned(p, keys***REMOVED***
            np.random.shuffle(keys***REMOVED***
            assert_array_equal(np.partition(d, keys***REMOVED***, p***REMOVED***
            assert_array_equal(d[np.argpartition(d, keys***REMOVED******REMOVED***, p***REMOVED***

            # equal kth
            d = np.arange(20***REMOVED***[::-1***REMOVED***
            self.assert_partitioned(np.partition(d, [5***REMOVED****4***REMOVED***, [5***REMOVED******REMOVED***
            self.assert_partitioned(np.partition(d, [5***REMOVED****4 + [6, 13***REMOVED******REMOVED***,
                                    [5***REMOVED****4 + [6, 13***REMOVED******REMOVED***
            self.assert_partitioned(d[np.argpartition(d, [5***REMOVED****4***REMOVED******REMOVED***, [5***REMOVED******REMOVED***
            self.assert_partitioned(d[np.argpartition(d, [5***REMOVED****4 + [6, 13***REMOVED******REMOVED******REMOVED***,
                                    [5***REMOVED****4 + [6, 13***REMOVED******REMOVED***

            d = np.arange(12***REMOVED***
            np.random.shuffle(d***REMOVED***
            d1 = np.tile(np.arange(12***REMOVED***, (4, 1***REMOVED******REMOVED***
            map(np.random.shuffle, d1***REMOVED***
            d0 = np.transpose(d1***REMOVED***

            kth = (1, 6, 7, -1***REMOVED***
            p = np.partition(d1, kth, axis=1***REMOVED***
            pa = d1[np.arange(d1.shape[0***REMOVED******REMOVED***[:, None***REMOVED***,
                    d1.argpartition(kth, axis=1***REMOVED******REMOVED***
            assert_array_equal(p, pa***REMOVED***
            for i in range(d1.shape[0***REMOVED******REMOVED***:
                self.assert_partitioned(p[i,:***REMOVED***, kth***REMOVED***
            p = np.partition(d0, kth, axis=0***REMOVED***
            pa = d0[np.argpartition(d0, kth, axis=0***REMOVED***,
                    np.arange(d0.shape[1***REMOVED******REMOVED***[None,:***REMOVED******REMOVED***
            assert_array_equal(p, pa***REMOVED***
            for i in range(d0.shape[1***REMOVED******REMOVED***:
                self.assert_partitioned(p[:, i***REMOVED***, kth***REMOVED***

    def test_partition_cdtype(self***REMOVED***:
        d = np.array([('Galahad', 1.7, 38***REMOVED***, ('Arthur', 1.8, 41***REMOVED***,
                   ('Lancelot', 1.9, 38***REMOVED******REMOVED***,
                  dtype=[('name', '|S10'***REMOVED***, ('height', '<f8'***REMOVED***, ('age', '<i4'***REMOVED******REMOVED******REMOVED***

        tgt = np.sort(d, order=['age', 'height'***REMOVED******REMOVED***
        assert_array_equal(np.partition(d, range(d.size***REMOVED***,
                                        order=['age', 'height'***REMOVED******REMOVED***,
                           tgt***REMOVED***
        assert_array_equal(d[np.argpartition(d, range(d.size***REMOVED***,
                                             order=['age', 'height'***REMOVED******REMOVED******REMOVED***,
                           tgt***REMOVED***
        for k in range(d.size***REMOVED***:
            assert_equal(np.partition(d, k, order=['age', 'height'***REMOVED******REMOVED***[k***REMOVED***,
                        tgt[k***REMOVED******REMOVED***
            assert_equal(d[np.argpartition(d, k, order=['age', 'height'***REMOVED******REMOVED******REMOVED***[k***REMOVED***,
                         tgt[k***REMOVED******REMOVED***

        d = np.array(['Galahad', 'Arthur', 'zebra', 'Lancelot'***REMOVED******REMOVED***
        tgt = np.sort(d***REMOVED***
        assert_array_equal(np.partition(d, range(d.size***REMOVED******REMOVED***, tgt***REMOVED***
        for k in range(d.size***REMOVED***:
            assert_equal(np.partition(d, k***REMOVED***[k***REMOVED***, tgt[k***REMOVED******REMOVED***
            assert_equal(d[np.argpartition(d, k***REMOVED******REMOVED***[k***REMOVED***, tgt[k***REMOVED******REMOVED***

    def test_partition_unicode_kind(self***REMOVED***:
        d = np.arange(10***REMOVED***
        k = b'\xc3\xa4'.decode("UTF8"***REMOVED***
        assert_raises(ValueError, d.partition, 2, kind=k***REMOVED***
        assert_raises(ValueError, d.argpartition, 2, kind=k***REMOVED***

    def test_partition_fuzz(self***REMOVED***:
        # a few rounds of random data testing
        for j in range(10, 30***REMOVED***:
            for i in range(1, j - 2***REMOVED***:
                d = np.arange(j***REMOVED***
                np.random.shuffle(d***REMOVED***
                d = d % np.random.randint(2, 30***REMOVED***
                idx = np.random.randint(d.size***REMOVED***
                kth = [0, idx, i, i + 1***REMOVED***
                tgt = np.sort(d***REMOVED***[kth***REMOVED***
                assert_array_equal(np.partition(d, kth***REMOVED***[kth***REMOVED***, tgt,
                                   err_msg="data: %r\n kth: %r" % (d, kth***REMOVED******REMOVED***

    def test_argpartition_gh5524(self***REMOVED***:
        #  A test for functionality of argpartition on lists.
        d = [6,7,3,2,9,0***REMOVED***
        p = np.argpartition(d,1***REMOVED***
        self.assert_partitioned(np.array(d***REMOVED***[p***REMOVED***,[1***REMOVED******REMOVED***

    def test_flatten(self***REMOVED***:
        x0 = np.array([[1, 2, 3***REMOVED***, [4, 5, 6***REMOVED******REMOVED***, np.int32***REMOVED***
        x1 = np.array([[[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED***, [[5, 6***REMOVED***, [7, 8***REMOVED******REMOVED******REMOVED***, np.int32***REMOVED***
        y0 = np.array([1, 2, 3, 4, 5, 6***REMOVED***, np.int32***REMOVED***
        y0f = np.array([1, 4, 2, 5, 3, 6***REMOVED***, np.int32***REMOVED***
        y1 = np.array([1, 2, 3, 4, 5, 6, 7, 8***REMOVED***, np.int32***REMOVED***
        y1f = np.array([1, 5, 3, 7, 2, 6, 4, 8***REMOVED***, np.int32***REMOVED***
        assert_equal(x0.flatten(***REMOVED***, y0***REMOVED***
        assert_equal(x0.flatten('F'***REMOVED***, y0f***REMOVED***
        assert_equal(x0.flatten('F'***REMOVED***, x0.T.flatten(***REMOVED******REMOVED***
        assert_equal(x1.flatten(***REMOVED***, y1***REMOVED***
        assert_equal(x1.flatten('F'***REMOVED***, y1f***REMOVED***
        assert_equal(x1.flatten('F'***REMOVED***, x1.T.flatten(***REMOVED******REMOVED***

    def test_dot(self***REMOVED***:
        a = np.array([[1, 0***REMOVED***, [0, 1***REMOVED******REMOVED******REMOVED***
        b = np.array([[0, 1***REMOVED***, [1, 0***REMOVED******REMOVED******REMOVED***
        c = np.array([[9, 1***REMOVED***, [1, -9***REMOVED******REMOVED******REMOVED***
        d = np.arange(24***REMOVED***.reshape(4, 6***REMOVED***
        ddt = np.array(
            [[  55,  145,  235,  325***REMOVED***,
             [ 145,  451,  757, 1063***REMOVED***,
             [ 235,  757, 1279, 1801***REMOVED***,
             [ 325, 1063, 1801, 2539***REMOVED******REMOVED***
        ***REMOVED***
        dtd = np.array(
            [[504, 540, 576, 612, 648, 684***REMOVED***,
             [540, 580, 620, 660, 700, 740***REMOVED***,
             [576, 620, 664, 708, 752, 796***REMOVED***,
             [612, 660, 708, 756, 804, 852***REMOVED***,
             [648, 700, 752, 804, 856, 908***REMOVED***,
             [684, 740, 796, 852, 908, 964***REMOVED******REMOVED***
        ***REMOVED***


        # gemm vs syrk optimizations
        for et in [np.float32, np.float64, np.complex64, np.complex128***REMOVED***:
            eaf = a.astype(et***REMOVED***
            assert_equal(np.dot(eaf, eaf***REMOVED***, eaf***REMOVED***
            assert_equal(np.dot(eaf.T, eaf***REMOVED***, eaf***REMOVED***
            assert_equal(np.dot(eaf, eaf.T***REMOVED***, eaf***REMOVED***
            assert_equal(np.dot(eaf.T, eaf.T***REMOVED***, eaf***REMOVED***
            assert_equal(np.dot(eaf.T.copy(***REMOVED***, eaf***REMOVED***, eaf***REMOVED***
            assert_equal(np.dot(eaf, eaf.T.copy(***REMOVED******REMOVED***, eaf***REMOVED***
            assert_equal(np.dot(eaf.T.copy(***REMOVED***, eaf.T.copy(***REMOVED******REMOVED***, eaf***REMOVED***

        # syrk validations
        for et in [np.float32, np.float64, np.complex64, np.complex128***REMOVED***:
            eaf = a.astype(et***REMOVED***
            ebf = b.astype(et***REMOVED***
            assert_equal(np.dot(ebf, ebf***REMOVED***, eaf***REMOVED***
            assert_equal(np.dot(ebf.T, ebf***REMOVED***, eaf***REMOVED***
            assert_equal(np.dot(ebf, ebf.T***REMOVED***, eaf***REMOVED***
            assert_equal(np.dot(ebf.T, ebf.T***REMOVED***, eaf***REMOVED***

        # syrk - different shape, stride, and view validations
        for et in [np.float32, np.float64, np.complex64, np.complex128***REMOVED***:
            edf = d.astype(et***REMOVED***
            assert_equal(
                np.dot(edf[::-1, :***REMOVED***, edf.T***REMOVED***,
                np.dot(edf[::-1, :***REMOVED***.copy(***REMOVED***, edf.T.copy(***REMOVED******REMOVED***
            ***REMOVED***
            assert_equal(
                np.dot(edf[:, ::-1***REMOVED***, edf.T***REMOVED***,
                np.dot(edf[:, ::-1***REMOVED***.copy(***REMOVED***, edf.T.copy(***REMOVED******REMOVED***
            ***REMOVED***
            assert_equal(
                np.dot(edf, edf[::-1, :***REMOVED***.T***REMOVED***,
                np.dot(edf, edf[::-1, :***REMOVED***.T.copy(***REMOVED******REMOVED***
            ***REMOVED***
            assert_equal(
                np.dot(edf, edf[:, ::-1***REMOVED***.T***REMOVED***,
                np.dot(edf, edf[:, ::-1***REMOVED***.T.copy(***REMOVED******REMOVED***
            ***REMOVED***
            assert_equal(
                np.dot(edf[:edf.shape[0***REMOVED*** // 2, :***REMOVED***, edf[::2, :***REMOVED***.T***REMOVED***,
                np.dot(edf[:edf.shape[0***REMOVED*** // 2, :***REMOVED***.copy(***REMOVED***, edf[::2, :***REMOVED***.T.copy(***REMOVED******REMOVED***
            ***REMOVED***
            assert_equal(
                np.dot(edf[::2, :***REMOVED***, edf[:edf.shape[0***REMOVED*** // 2, :***REMOVED***.T***REMOVED***,
                np.dot(edf[::2, :***REMOVED***.copy(***REMOVED***, edf[:edf.shape[0***REMOVED*** // 2, :***REMOVED***.T.copy(***REMOVED******REMOVED***
            ***REMOVED***

        # syrk - different shape
        for et in [np.float32, np.float64, np.complex64, np.complex128***REMOVED***:
            edf = d.astype(et***REMOVED***
            eddtf = ddt.astype(et***REMOVED***
            edtdf = dtd.astype(et***REMOVED***
            assert_equal(np.dot(edf, edf.T***REMOVED***, eddtf***REMOVED***
            assert_equal(np.dot(edf.T, edf***REMOVED***, edtdf***REMOVED***

        # function versus methods
        assert_equal(np.dot(a, b***REMOVED***, a.dot(b***REMOVED******REMOVED***
        assert_equal(np.dot(np.dot(a, b***REMOVED***, c***REMOVED***, a.dot(b***REMOVED***.dot(c***REMOVED******REMOVED***

        # test passing in an output array
        c = np.zeros_like(a***REMOVED***
        a.dot(b, c***REMOVED***
        assert_equal(c, np.dot(a, b***REMOVED******REMOVED***

        # test keyword args
        c = np.zeros_like(a***REMOVED***
        a.dot(b=b, out=c***REMOVED***
        assert_equal(c, np.dot(a, b***REMOVED******REMOVED***

    def test_dot_override(self***REMOVED***:
        # 2016-01-29: NUMPY_UFUNC_DISABLED
        return

        class A(object***REMOVED***:
            def __numpy_ufunc__(self, ufunc, method, pos, inputs, **kwargs***REMOVED***:
                return "A"

        class B(object***REMOVED***:
            def __numpy_ufunc__(self, ufunc, method, pos, inputs, **kwargs***REMOVED***:
                return NotImplemented

        a = A(***REMOVED***
        b = B(***REMOVED***
        c = np.array([[1***REMOVED******REMOVED******REMOVED***

        assert_equal(np.dot(a, b***REMOVED***, "A"***REMOVED***
        assert_equal(c.dot(a***REMOVED***, "A"***REMOVED***
        assert_raises(TypeError, np.dot, b, c***REMOVED***
        assert_raises(TypeError, c.dot, b***REMOVED***

    def test_dot_type_mismatch(self***REMOVED***:
        c = 1.
        A = np.array((1,1***REMOVED***, dtype='i,i'***REMOVED***

        assert_raises(TypeError, np.dot, c, A***REMOVED***
        assert_raises(TypeError, np.dot, A, c***REMOVED***

    def test_diagonal(self***REMOVED***:
        a = np.arange(12***REMOVED***.reshape((3, 4***REMOVED******REMOVED***
        assert_equal(a.diagonal(***REMOVED***, [0, 5, 10***REMOVED******REMOVED***
        assert_equal(a.diagonal(0***REMOVED***, [0, 5, 10***REMOVED******REMOVED***
        assert_equal(a.diagonal(1***REMOVED***, [1, 6, 11***REMOVED******REMOVED***
        assert_equal(a.diagonal(-1***REMOVED***, [4, 9***REMOVED******REMOVED***

        b = np.arange(8***REMOVED***.reshape((2, 2, 2***REMOVED******REMOVED***
        assert_equal(b.diagonal(***REMOVED***, [[0, 6***REMOVED***, [1, 7***REMOVED******REMOVED******REMOVED***
        assert_equal(b.diagonal(0***REMOVED***, [[0, 6***REMOVED***, [1, 7***REMOVED******REMOVED******REMOVED***
        assert_equal(b.diagonal(1***REMOVED***, [[2***REMOVED***, [3***REMOVED******REMOVED******REMOVED***
        assert_equal(b.diagonal(-1***REMOVED***, [[4***REMOVED***, [5***REMOVED******REMOVED******REMOVED***
        assert_raises(ValueError, b.diagonal, axis1=0, axis2=0***REMOVED***
        assert_equal(b.diagonal(0, 1, 2***REMOVED***, [[0, 3***REMOVED***, [4, 7***REMOVED******REMOVED******REMOVED***
        assert_equal(b.diagonal(0, 0, 1***REMOVED***, [[0, 6***REMOVED***, [1, 7***REMOVED******REMOVED******REMOVED***
        assert_equal(b.diagonal(offset=1, axis1=0, axis2=2***REMOVED***, [[1***REMOVED***, [3***REMOVED******REMOVED******REMOVED***
        # Order of axis argument doesn't matter:
        assert_equal(b.diagonal(0, 2, 1***REMOVED***, [[0, 3***REMOVED***, [4, 7***REMOVED******REMOVED******REMOVED***

    def test_diagonal_view_notwriteable(self***REMOVED***:
        # this test is only for 1.9, the diagonal view will be
        # writeable in 1.10.
        a = np.eye(3***REMOVED***.diagonal(***REMOVED***
        assert_(not a.flags.writeable***REMOVED***
        assert_(not a.flags.owndata***REMOVED***

        a = np.diagonal(np.eye(3***REMOVED******REMOVED***
        assert_(not a.flags.writeable***REMOVED***
        assert_(not a.flags.owndata***REMOVED***

        a = np.diag(np.eye(3***REMOVED******REMOVED***
        assert_(not a.flags.writeable***REMOVED***
        assert_(not a.flags.owndata***REMOVED***

    def test_diagonal_memleak(self***REMOVED***:
        # Regression test for a bug that crept in at one point
        a = np.zeros((100, 100***REMOVED******REMOVED***
        assert_(sys.getrefcount(a***REMOVED*** < 50***REMOVED***
        for i in range(100***REMOVED***:
            a.diagonal(***REMOVED***
        assert_(sys.getrefcount(a***REMOVED*** < 50***REMOVED***

    def test_trace(self***REMOVED***:
        a = np.arange(12***REMOVED***.reshape((3, 4***REMOVED******REMOVED***
        assert_equal(a.trace(***REMOVED***, 15***REMOVED***
        assert_equal(a.trace(0***REMOVED***, 15***REMOVED***
        assert_equal(a.trace(1***REMOVED***, 18***REMOVED***
        assert_equal(a.trace(-1***REMOVED***, 13***REMOVED***

        b = np.arange(8***REMOVED***.reshape((2, 2, 2***REMOVED******REMOVED***
        assert_equal(b.trace(***REMOVED***, [6, 8***REMOVED******REMOVED***
        assert_equal(b.trace(0***REMOVED***, [6, 8***REMOVED******REMOVED***
        assert_equal(b.trace(1***REMOVED***, [2, 3***REMOVED******REMOVED***
        assert_equal(b.trace(-1***REMOVED***, [4, 5***REMOVED******REMOVED***
        assert_equal(b.trace(0, 0, 1***REMOVED***, [6, 8***REMOVED******REMOVED***
        assert_equal(b.trace(0, 0, 2***REMOVED***, [5, 9***REMOVED******REMOVED***
        assert_equal(b.trace(0, 1, 2***REMOVED***, [3, 11***REMOVED******REMOVED***
        assert_equal(b.trace(offset=1, axis1=0, axis2=2***REMOVED***, [1, 3***REMOVED******REMOVED***

    def test_trace_subclass(self***REMOVED***:
        # The class would need to overwrite trace to ensure single-element
        # output also has the right subclass.
        class MyArray(np.ndarray***REMOVED***:
            pass

        b = np.arange(8***REMOVED***.reshape((2, 2, 2***REMOVED******REMOVED***.view(MyArray***REMOVED***
        t = b.trace(***REMOVED***
        assert isinstance(t, MyArray***REMOVED***

    def test_put(self***REMOVED***:
        icodes = np.typecodes['AllInteger'***REMOVED***
        fcodes = np.typecodes['AllFloat'***REMOVED***
        for dt in icodes + fcodes + 'O':
            tgt = np.array([0, 1, 0, 3, 0, 5***REMOVED***, dtype=dt***REMOVED***

            # test 1-d
            a = np.zeros(6, dtype=dt***REMOVED***
            a.put([1, 3, 5***REMOVED***, [1, 3, 5***REMOVED******REMOVED***
            assert_equal(a, tgt***REMOVED***

            # test 2-d
            a = np.zeros((2, 3***REMOVED***, dtype=dt***REMOVED***
            a.put([1, 3, 5***REMOVED***, [1, 3, 5***REMOVED******REMOVED***
            assert_equal(a, tgt.reshape(2, 3***REMOVED******REMOVED***

        for dt in '?':
            tgt = np.array([False, True, False, True, False, True***REMOVED***, dtype=dt***REMOVED***

            # test 1-d
            a = np.zeros(6, dtype=dt***REMOVED***
            a.put([1, 3, 5***REMOVED***, [True***REMOVED****3***REMOVED***
            assert_equal(a, tgt***REMOVED***

            # test 2-d
            a = np.zeros((2, 3***REMOVED***, dtype=dt***REMOVED***
            a.put([1, 3, 5***REMOVED***, [True***REMOVED****3***REMOVED***
            assert_equal(a, tgt.reshape(2, 3***REMOVED******REMOVED***

        # check must be writeable
        a = np.zeros(6***REMOVED***
        a.flags.writeable = False
        assert_raises(ValueError, a.put, [1, 3, 5***REMOVED***, [1, 3, 5***REMOVED******REMOVED***

        # when calling np.put, make sure a
        # TypeError is raised if the object
        # isn't an ndarray
        bad_array = [1, 2, 3***REMOVED***
        assert_raises(TypeError, np.put, bad_array, [0, 2***REMOVED***, 5***REMOVED***

    def test_ravel(self***REMOVED***:
        a = np.array([[0, 1***REMOVED***, [2, 3***REMOVED******REMOVED******REMOVED***
        assert_equal(a.ravel(***REMOVED***, [0, 1, 2, 3***REMOVED******REMOVED***
        assert_(not a.ravel(***REMOVED***.flags.owndata***REMOVED***
        assert_equal(a.ravel('F'***REMOVED***, [0, 2, 1, 3***REMOVED******REMOVED***
        assert_equal(a.ravel(order='C'***REMOVED***, [0, 1, 2, 3***REMOVED******REMOVED***
        assert_equal(a.ravel(order='F'***REMOVED***, [0, 2, 1, 3***REMOVED******REMOVED***
        assert_equal(a.ravel(order='A'***REMOVED***, [0, 1, 2, 3***REMOVED******REMOVED***
        assert_(not a.ravel(order='A'***REMOVED***.flags.owndata***REMOVED***
        assert_equal(a.ravel(order='K'***REMOVED***, [0, 1, 2, 3***REMOVED******REMOVED***
        assert_(not a.ravel(order='K'***REMOVED***.flags.owndata***REMOVED***
        assert_equal(a.ravel(***REMOVED***, a.reshape(-1***REMOVED******REMOVED***

        a = np.array([[0, 1***REMOVED***, [2, 3***REMOVED******REMOVED***, order='F'***REMOVED***
        assert_equal(a.ravel(***REMOVED***, [0, 1, 2, 3***REMOVED******REMOVED***
        assert_equal(a.ravel(order='A'***REMOVED***, [0, 2, 1, 3***REMOVED******REMOVED***
        assert_equal(a.ravel(order='K'***REMOVED***, [0, 2, 1, 3***REMOVED******REMOVED***
        assert_(not a.ravel(order='A'***REMOVED***.flags.owndata***REMOVED***
        assert_(not a.ravel(order='K'***REMOVED***.flags.owndata***REMOVED***
        assert_equal(a.ravel(***REMOVED***, a.reshape(-1***REMOVED******REMOVED***
        assert_equal(a.ravel(order='A'***REMOVED***, a.reshape(-1, order='A'***REMOVED******REMOVED***

        a = np.array([[0, 1***REMOVED***, [2, 3***REMOVED******REMOVED******REMOVED***[::-1, :***REMOVED***
        assert_equal(a.ravel(***REMOVED***, [2, 3, 0, 1***REMOVED******REMOVED***
        assert_equal(a.ravel(order='C'***REMOVED***, [2, 3, 0, 1***REMOVED******REMOVED***
        assert_equal(a.ravel(order='F'***REMOVED***, [2, 0, 3, 1***REMOVED******REMOVED***
        assert_equal(a.ravel(order='A'***REMOVED***, [2, 3, 0, 1***REMOVED******REMOVED***
        # 'K' doesn't reverse the axes of negative strides
        assert_equal(a.ravel(order='K'***REMOVED***, [2, 3, 0, 1***REMOVED******REMOVED***
        assert_(a.ravel(order='K'***REMOVED***.flags.owndata***REMOVED***

        # Test simple 1-d copy behaviour:
        a = np.arange(10***REMOVED***[::2***REMOVED***
        assert_(a.ravel('K'***REMOVED***.flags.owndata***REMOVED***
        assert_(a.ravel('C'***REMOVED***.flags.owndata***REMOVED***
        assert_(a.ravel('F'***REMOVED***.flags.owndata***REMOVED***

        # Not contiguous and 1-sized axis with non matching stride
        a = np.arange(2**3 * 2***REMOVED***[::2***REMOVED***
        a = a.reshape(2, 1, 2, 2***REMOVED***.swapaxes(-1, -2***REMOVED***
        strides = list(a.strides***REMOVED***
        strides[1***REMOVED*** = 123
        a.strides = strides
        assert_(a.ravel(order='K'***REMOVED***.flags.owndata***REMOVED***
        assert_equal(a.ravel('K'***REMOVED***, np.arange(0, 15, 2***REMOVED******REMOVED***

        # contiguous and 1-sized axis with non matching stride works:
        a = np.arange(2**3***REMOVED***
        a = a.reshape(2, 1, 2, 2***REMOVED***.swapaxes(-1, -2***REMOVED***
        strides = list(a.strides***REMOVED***
        strides[1***REMOVED*** = 123
        a.strides = strides
        assert_(np.may_share_memory(a.ravel(order='K'***REMOVED***, a***REMOVED******REMOVED***
        assert_equal(a.ravel(order='K'***REMOVED***, np.arange(2**3***REMOVED******REMOVED***

        # Test negative strides (not very interesting since non-contiguous***REMOVED***:
        a = np.arange(4***REMOVED***[::-1***REMOVED***.reshape(2, 2***REMOVED***
        assert_(a.ravel(order='C'***REMOVED***.flags.owndata***REMOVED***
        assert_(a.ravel(order='K'***REMOVED***.flags.owndata***REMOVED***
        assert_equal(a.ravel('C'***REMOVED***, [3, 2, 1, 0***REMOVED******REMOVED***
        assert_equal(a.ravel('K'***REMOVED***, [3, 2, 1, 0***REMOVED******REMOVED***

        # 1-element tidy strides test (NPY_RELAXED_STRIDES_CHECKING***REMOVED***:
        a = np.array([[1***REMOVED******REMOVED******REMOVED***
        a.strides = (123, 432***REMOVED***
        # If the stride is not 8, NPY_RELAXED_STRIDES_CHECKING is messing
        # them up on purpose:
        if np.ones(1***REMOVED***.strides == (8,***REMOVED***:
            assert_(np.may_share_memory(a.ravel('K'***REMOVED***, a***REMOVED******REMOVED***
            assert_equal(a.ravel('K'***REMOVED***.strides, (a.dtype.itemsize,***REMOVED******REMOVED***

        for order in ('C', 'F', 'A', 'K'***REMOVED***:
            # 0-d corner case:
            a = np.array(0***REMOVED***
            assert_equal(a.ravel(order***REMOVED***, [0***REMOVED******REMOVED***
            assert_(np.may_share_memory(a.ravel(order***REMOVED***, a***REMOVED******REMOVED***

        # Test that certain non-inplace ravels work right (mostly***REMOVED*** for 'K':
        b = np.arange(2**4 * 2***REMOVED***[::2***REMOVED***.reshape(2, 2, 2, 2***REMOVED***
        a = b[..., ::2***REMOVED***
        assert_equal(a.ravel('K'***REMOVED***, [0, 4, 8, 12, 16, 20, 24, 28***REMOVED******REMOVED***
        assert_equal(a.ravel('C'***REMOVED***, [0, 4, 8, 12, 16, 20, 24, 28***REMOVED******REMOVED***
        assert_equal(a.ravel('A'***REMOVED***, [0, 4, 8, 12, 16, 20, 24, 28***REMOVED******REMOVED***
        assert_equal(a.ravel('F'***REMOVED***, [0, 16, 8, 24, 4, 20, 12, 28***REMOVED******REMOVED***

        a = b[::2, ...***REMOVED***
        assert_equal(a.ravel('K'***REMOVED***, [0, 2, 4, 6, 8, 10, 12, 14***REMOVED******REMOVED***
        assert_equal(a.ravel('C'***REMOVED***, [0, 2, 4, 6, 8, 10, 12, 14***REMOVED******REMOVED***
        assert_equal(a.ravel('A'***REMOVED***, [0, 2, 4, 6, 8, 10, 12, 14***REMOVED******REMOVED***
        assert_equal(a.ravel('F'***REMOVED***, [0, 8, 4, 12, 2, 10, 6, 14***REMOVED******REMOVED***

    def test_ravel_subclass(self***REMOVED***:
        class ArraySubclass(np.ndarray***REMOVED***:
            pass

        a = np.arange(10***REMOVED***.view(ArraySubclass***REMOVED***
        assert_(isinstance(a.ravel('C'***REMOVED***, ArraySubclass***REMOVED******REMOVED***
        assert_(isinstance(a.ravel('F'***REMOVED***, ArraySubclass***REMOVED******REMOVED***
        assert_(isinstance(a.ravel('A'***REMOVED***, ArraySubclass***REMOVED******REMOVED***
        assert_(isinstance(a.ravel('K'***REMOVED***, ArraySubclass***REMOVED******REMOVED***

        a = np.arange(10***REMOVED***[::2***REMOVED***.view(ArraySubclass***REMOVED***
        assert_(isinstance(a.ravel('C'***REMOVED***, ArraySubclass***REMOVED******REMOVED***
        assert_(isinstance(a.ravel('F'***REMOVED***, ArraySubclass***REMOVED******REMOVED***
        assert_(isinstance(a.ravel('A'***REMOVED***, ArraySubclass***REMOVED******REMOVED***
        assert_(isinstance(a.ravel('K'***REMOVED***, ArraySubclass***REMOVED******REMOVED***

    def test_swapaxes(self***REMOVED***:
        a = np.arange(1*2*3*4***REMOVED***.reshape(1, 2, 3, 4***REMOVED***.copy(***REMOVED***
        idx = np.indices(a.shape***REMOVED***
        assert_(a.flags['OWNDATA'***REMOVED******REMOVED***
        b = a.copy(***REMOVED***
        # check exceptions
        assert_raises(ValueError, a.swapaxes, -5, 0***REMOVED***
        assert_raises(ValueError, a.swapaxes, 4, 0***REMOVED***
        assert_raises(ValueError, a.swapaxes, 0, -5***REMOVED***
        assert_raises(ValueError, a.swapaxes, 0, 4***REMOVED***

        for i in range(-4, 4***REMOVED***:
            for j in range(-4, 4***REMOVED***:
                for k, src in enumerate((a, b***REMOVED******REMOVED***:
                    c = src.swapaxes(i, j***REMOVED***
                    # check shape
                    shape = list(src.shape***REMOVED***
                    shape[i***REMOVED*** = src.shape[j***REMOVED***
                    shape[j***REMOVED*** = src.shape[i***REMOVED***
                    assert_equal(c.shape, shape, str((i, j, k***REMOVED******REMOVED******REMOVED***
                    # check array contents
                    i0, i1, i2, i3 = [dim-1 for dim in c.shape***REMOVED***
                    j0, j1, j2, j3 = [dim-1 for dim in src.shape***REMOVED***
                    assert_equal(src[idx[j0***REMOVED***, idx[j1***REMOVED***, idx[j2***REMOVED***, idx[j3***REMOVED******REMOVED***,
                                 c[idx[i0***REMOVED***, idx[i1***REMOVED***, idx[i2***REMOVED***, idx[i3***REMOVED******REMOVED***,
                                 str((i, j, k***REMOVED******REMOVED******REMOVED***
                    # check a view is always returned, gh-5260
                    assert_(not c.flags['OWNDATA'***REMOVED***, str((i, j, k***REMOVED******REMOVED******REMOVED***
                    # check on non-contiguous input array
                    if k == 1:
                        b = c

    def test_conjugate(self***REMOVED***:
        a = np.array([1-1j, 1+1j, 23+23.0j***REMOVED******REMOVED***
        ac = a.conj(***REMOVED***
        assert_equal(a.real, ac.real***REMOVED***
        assert_equal(a.imag, -ac.imag***REMOVED***
        assert_equal(ac, a.conjugate(***REMOVED******REMOVED***
        assert_equal(ac, np.conjugate(a***REMOVED******REMOVED***

        a = np.array([1-1j, 1+1j, 23+23.0j***REMOVED***, 'F'***REMOVED***
        ac = a.conj(***REMOVED***
        assert_equal(a.real, ac.real***REMOVED***
        assert_equal(a.imag, -ac.imag***REMOVED***
        assert_equal(ac, a.conjugate(***REMOVED******REMOVED***
        assert_equal(ac, np.conjugate(a***REMOVED******REMOVED***

        a = np.array([1, 2, 3***REMOVED******REMOVED***
        ac = a.conj(***REMOVED***
        assert_equal(a, ac***REMOVED***
        assert_equal(ac, a.conjugate(***REMOVED******REMOVED***
        assert_equal(ac, np.conjugate(a***REMOVED******REMOVED***

        a = np.array([1.0, 2.0, 3.0***REMOVED******REMOVED***
        ac = a.conj(***REMOVED***
        assert_equal(a, ac***REMOVED***
        assert_equal(ac, a.conjugate(***REMOVED******REMOVED***
        assert_equal(ac, np.conjugate(a***REMOVED******REMOVED***

        a = np.array([1-1j, 1+1j, 1, 2.0***REMOVED***, object***REMOVED***
        ac = a.conj(***REMOVED***
        assert_equal(ac, [k.conjugate(***REMOVED*** for k in a***REMOVED******REMOVED***
        assert_equal(ac, a.conjugate(***REMOVED******REMOVED***
        assert_equal(ac, np.conjugate(a***REMOVED******REMOVED***

        a = np.array([1-1j, 1, 2.0, 'f'***REMOVED***, object***REMOVED***
        assert_raises(AttributeError, lambda: a.conj(***REMOVED******REMOVED***
        assert_raises(AttributeError, lambda: a.conjugate(***REMOVED******REMOVED***

class TestBinop(object***REMOVED***:
    def test_inplace(self***REMOVED***:
        # test refcount 1 inplace conversion
        assert_array_almost_equal(np.array([0.5***REMOVED******REMOVED*** * np.array([1.0, 2.0***REMOVED******REMOVED***,
                                  [0.5, 1.0***REMOVED******REMOVED***

        d = np.array([0.5, 0.5***REMOVED******REMOVED***[::2***REMOVED***
        assert_array_almost_equal(d * (d * np.array([1.0, 2.0***REMOVED******REMOVED******REMOVED***,
                                  [0.25, 0.5***REMOVED******REMOVED***

        a = np.array([0.5***REMOVED******REMOVED***
        b = np.array([0.5***REMOVED******REMOVED***
        c = a + b
        c = a - b
        c = a * b
        c = a / b
        assert_equal(a, b***REMOVED***
        assert_almost_equal(c, 1.***REMOVED***

        c = a + b * 2. / b * a - a / b
        assert_equal(a, b***REMOVED***
        assert_equal(c, 0.5***REMOVED***

        # true divide
        a = np.array([5***REMOVED******REMOVED***
        b = np.array([3***REMOVED******REMOVED***
        c = (a * a***REMOVED*** / b

        assert_almost_equal(c, 25 / 3***REMOVED***
        assert_equal(a, 5***REMOVED***
        assert_equal(b, 3***REMOVED***

    def test_extension_incref_elide(self***REMOVED***:
        # test extension (e.g. cython***REMOVED*** calling PyNumber_* slots without
        # increasing the reference counts
        #
        # def incref_elide(a***REMOVED***:
        #    d = input.copy(***REMOVED*** # refcount 1
        #    return d, d + d # PyNumber_Add without increasing refcount
        from numpy.core.multiarray_tests import incref_elide
        d = np.ones(5***REMOVED***
        orig, res = incref_elide(d***REMOVED***
        # the return original should not be changed to an inplace operation
        assert_array_equal(orig, d***REMOVED***
        assert_array_equal(res, d + d***REMOVED***

    def test_extension_incref_elide_stack(self***REMOVED***:
        # scanning if the refcount == 1 object is on the python stack to check
        # that we are called directly from python is flawed as object may still
        # be above the stack pointer and we have no access to the top of it
        #
        # def incref_elide_l(d***REMOVED***:
        #    return l[4***REMOVED*** + l[4***REMOVED*** # PyNumber_Add without increasing refcount
        from numpy.core.multiarray_tests import incref_elide_l
        # padding with 1 makes sure the object on the stack is not overwriten
        l = [1, 1, 1, 1, np.ones(5***REMOVED******REMOVED***
        res = incref_elide_l(l***REMOVED***
        # the return original should not be changed to an inplace operation
        assert_array_equal(l[4***REMOVED***, np.ones(5***REMOVED******REMOVED***
        assert_array_equal(res, l[4***REMOVED*** + l[4***REMOVED******REMOVED***

    def test_ufunc_override_rop_precedence(self***REMOVED***:
        # 2016-01-29: NUMPY_UFUNC_DISABLED
        return

        # Check that __rmul__ and other right-hand operations have
        # precedence over __numpy_ufunc__

        ops = {
            '__add__':      ('__radd__', np.add, True***REMOVED***,
            '__sub__':      ('__rsub__', np.subtract, True***REMOVED***,
            '__mul__':      ('__rmul__', np.multiply, True***REMOVED***,
            '__truediv__':  ('__rtruediv__', np.true_divide, True***REMOVED***,
            '__floordiv__': ('__rfloordiv__', np.floor_divide, True***REMOVED***,
            '__mod__':      ('__rmod__', np.remainder, True***REMOVED***,
            '__divmod__':   ('__rdivmod__', None, False***REMOVED***,
            '__pow__':      ('__rpow__', np.power, True***REMOVED***,
            '__lshift__':   ('__rlshift__', np.left_shift, True***REMOVED***,
            '__rshift__':   ('__rrshift__', np.right_shift, True***REMOVED***,
            '__and__':      ('__rand__', np.bitwise_and, True***REMOVED***,
            '__xor__':      ('__rxor__', np.bitwise_xor, True***REMOVED***,
            '__or__':       ('__ror__', np.bitwise_or, True***REMOVED***,
            '__ge__':       ('__le__', np.less_equal, False***REMOVED***,
            '__gt__':       ('__lt__', np.less, False***REMOVED***,
            '__le__':       ('__ge__', np.greater_equal, False***REMOVED***,
            '__lt__':       ('__gt__', np.greater, False***REMOVED***,
            '__eq__':       ('__eq__', np.equal, False***REMOVED***,
            '__ne__':       ('__ne__', np.not_equal, False***REMOVED***,
    ***REMOVED***

        class OtherNdarraySubclass(np.ndarray***REMOVED***:
            pass

        class OtherNdarraySubclassWithOverride(np.ndarray***REMOVED***:
            def __numpy_ufunc__(self, *a, **kw***REMOVED***:
                raise AssertionError(("__numpy_ufunc__ %r %r shouldn't have "
                                      "been called!"***REMOVED*** % (a, kw***REMOVED******REMOVED***

        def check(op_name, ndsubclass***REMOVED***:
            rop_name, np_op, has_iop = ops[op_name***REMOVED***

            if has_iop:
                iop_name = '__i' + op_name[2:***REMOVED***
                iop = getattr(operator, iop_name***REMOVED***

            if op_name == "__divmod__":
                op = divmod
            else:
                op = getattr(operator, op_name***REMOVED***

            # Dummy class
            def __init__(self, *a, **kw***REMOVED***:
                pass

            def __numpy_ufunc__(self, *a, **kw***REMOVED***:
                raise AssertionError(("__numpy_ufunc__ %r %r shouldn't have "
                                      "been called!"***REMOVED*** % (a, kw***REMOVED******REMOVED***

            def __op__(self, *other***REMOVED***:
                return "op"

            def __rop__(self, *other***REMOVED***:
                return "rop"

            if ndsubclass:
                bases = (np.ndarray,***REMOVED***
            else:
                bases = (object,***REMOVED***

            dct = {'__init__': __init__,
                   '__numpy_ufunc__': __numpy_ufunc__,
                   op_name: __op__***REMOVED***
            if op_name != rop_name:
                dct[rop_name***REMOVED*** = __rop__

            cls = type("Rop" + rop_name, bases, dct***REMOVED***

            # Check behavior against both bare ndarray objects and a
            # ndarray subclasses with and without their own override
            obj = cls((1,***REMOVED***, buffer=np.ones(1,***REMOVED******REMOVED***

            arr_objs = [np.array([1***REMOVED******REMOVED***,
                        np.array([2***REMOVED******REMOVED***.view(OtherNdarraySubclass***REMOVED***,
                        np.array([3***REMOVED******REMOVED***.view(OtherNdarraySubclassWithOverride***REMOVED***,
                        ***REMOVED***

            for arr in arr_objs:
                err_msg = "%r %r" % (op_name, arr,***REMOVED***

                # Check that ndarray op gives up if it sees a non-subclass
                if not isinstance(obj, arr.__class__***REMOVED***:
                    assert_equal(getattr(arr, op_name***REMOVED***(obj***REMOVED***,
                                 NotImplemented, err_msg=err_msg***REMOVED***

                # Check that the Python binops have priority
                assert_equal(op(obj, arr***REMOVED***, "op", err_msg=err_msg***REMOVED***
                if op_name == rop_name:
                    assert_equal(op(arr, obj***REMOVED***, "op", err_msg=err_msg***REMOVED***
                else:
                    assert_equal(op(arr, obj***REMOVED***, "rop", err_msg=err_msg***REMOVED***

                # Check that Python binops have priority also for in-place ops
                if has_iop:
                    assert_equal(getattr(arr, iop_name***REMOVED***(obj***REMOVED***,
                                 NotImplemented, err_msg=err_msg***REMOVED***
                    if op_name != "__pow__":
                        # inplace pow requires the other object to be
                        # integer-like?
                        assert_equal(iop(arr, obj***REMOVED***, "rop", err_msg=err_msg***REMOVED***

                # Check that ufunc call __numpy_ufunc__ normally
                if np_op is not None:
                    assert_raises(AssertionError, np_op, arr, obj,
                                  err_msg=err_msg***REMOVED***
                    assert_raises(AssertionError, np_op, obj, arr,
                                  err_msg=err_msg***REMOVED***

        # Check all binary operations
        for op_name in sorted(ops.keys(***REMOVED******REMOVED***:
            yield check, op_name, True
            yield check, op_name, False

    def test_ufunc_override_rop_simple(self***REMOVED***:
        # 2016-01-29: NUMPY_UFUNC_DISABLED
        return

        # Check parts of the binary op overriding behavior in an
        # explicit test case that is easier to understand.
        class SomeClass(object***REMOVED***:
            def __numpy_ufunc__(self, *a, **kw***REMOVED***:
                return "ufunc"

            def __mul__(self, other***REMOVED***:
                return 123

            def __rmul__(self, other***REMOVED***:
                return 321

            def __rsub__(self, other***REMOVED***:
                return "no subs for me"

            def __gt__(self, other***REMOVED***:
                return "yep"

            def __lt__(self, other***REMOVED***:
                return "nope"

        class SomeClass2(SomeClass, np.ndarray***REMOVED***:
            def __numpy_ufunc__(self, ufunc, method, i, inputs, **kw***REMOVED***:
                if ufunc is np.multiply or ufunc is np.bitwise_and:
                    return "ufunc"
                else:
                    inputs = list(inputs***REMOVED***
                    if i < len(inputs***REMOVED***:
                        inputs[i***REMOVED*** = np.asarray(self***REMOVED***
                    func = getattr(ufunc, method***REMOVED***
                    if ('out' in kw***REMOVED*** and (kw['out'***REMOVED*** is not None***REMOVED***:
                        kw['out'***REMOVED*** = np.asarray(kw['out'***REMOVED******REMOVED***
                    r = func(*inputs, **kw***REMOVED***
                    x = self.__class__(r.shape, dtype=r.dtype***REMOVED***
                    x[...***REMOVED*** = r
                    return x

        class SomeClass3(SomeClass2***REMOVED***:
            def __rsub__(self, other***REMOVED***:
                return "sub for me"

        arr = np.array([0***REMOVED******REMOVED***
        obj = SomeClass(***REMOVED***
        obj2 = SomeClass2((1,***REMOVED***, dtype=np.int_***REMOVED***
        obj2[0***REMOVED*** = 9
        obj3 = SomeClass3((1,***REMOVED***, dtype=np.int_***REMOVED***
        obj3[0***REMOVED*** = 4

        # obj is first, so should get to define outcome.
        assert_equal(obj * arr, 123***REMOVED***
        # obj is second, but has __numpy_ufunc__ and defines __rmul__.
        assert_equal(arr * obj, 321***REMOVED***
        # obj is second, but has __numpy_ufunc__ and defines __rsub__.
        assert_equal(arr - obj, "no subs for me"***REMOVED***
        # obj is second, but has __numpy_ufunc__ and defines __lt__.
        assert_equal(arr > obj, "nope"***REMOVED***
        # obj is second, but has __numpy_ufunc__ and defines __gt__.
        assert_equal(arr < obj, "yep"***REMOVED***
        # Called as a ufunc, obj.__numpy_ufunc__ is used.
        assert_equal(np.multiply(arr, obj***REMOVED***, "ufunc"***REMOVED***
        # obj is second, but has __numpy_ufunc__ and defines __rmul__.
        arr *= obj
        assert_equal(arr, 321***REMOVED***

        # obj2 is an ndarray subclass, so CPython takes care of the same rules.
        assert_equal(obj2 * arr, 123***REMOVED***
        assert_equal(arr * obj2, 321***REMOVED***
        assert_equal(arr - obj2, "no subs for me"***REMOVED***
        assert_equal(arr > obj2, "nope"***REMOVED***
        assert_equal(arr < obj2, "yep"***REMOVED***
        # Called as a ufunc, obj2.__numpy_ufunc__ is called.
        assert_equal(np.multiply(arr, obj2***REMOVED***, "ufunc"***REMOVED***
        # Also when the method is not overridden.
        assert_equal(arr & obj2, "ufunc"***REMOVED***
        arr *= obj2
        assert_equal(arr, 321***REMOVED***

        obj2 += 33
        assert_equal(obj2[0***REMOVED***, 42***REMOVED***
        assert_equal(obj2.sum(***REMOVED***, 42***REMOVED***
        assert_(isinstance(obj2, SomeClass2***REMOVED******REMOVED***

        # Obj3 is subclass that defines __rsub__.  CPython calls it.
        assert_equal(arr - obj3, "sub for me"***REMOVED***
        assert_equal(obj2 - obj3, "sub for me"***REMOVED***
        # obj3 is a subclass that defines __rmul__.  CPython calls it.
        assert_equal(arr * obj3, 321***REMOVED***
        # But not here, since obj3.__rmul__ is obj2.__rmul__.
        assert_equal(obj2 * obj3, 123***REMOVED***
        # And of course, here obj3.__mul__ should be called.
        assert_equal(obj3 * obj2, 123***REMOVED***
        # obj3 defines __numpy_ufunc__ but obj3.__radd__ is obj2.__radd__.
        # (and both are just ndarray.__radd__***REMOVED***; see #4815.
        res = obj2 + obj3
        assert_equal(res, 46***REMOVED***
        assert_(isinstance(res, SomeClass2***REMOVED******REMOVED***
        # Since obj3 is a subclass, it should have precedence, like CPython
        # would give, even though obj2 has __numpy_ufunc__ and __radd__.
        # See gh-4815 and gh-5747.
        res = obj3 + obj2
        assert_equal(res, 46***REMOVED***
        assert_(isinstance(res, SomeClass3***REMOVED******REMOVED***

    def test_ufunc_override_normalize_signature(self***REMOVED***:
        # 2016-01-29: NUMPY_UFUNC_DISABLED
        return

        # gh-5674
        class SomeClass(object***REMOVED***:
            def __numpy_ufunc__(self, ufunc, method, i, inputs, **kw***REMOVED***:
                return kw

        a = SomeClass(***REMOVED***
        kw = np.add(a, [1***REMOVED******REMOVED***
        assert_('sig' not in kw and 'signature' not in kw***REMOVED***
        kw = np.add(a, [1***REMOVED***, sig='ii->i'***REMOVED***
        assert_('sig' not in kw and 'signature' in kw***REMOVED***
        assert_equal(kw['signature'***REMOVED***, 'ii->i'***REMOVED***
        kw = np.add(a, [1***REMOVED***, signature='ii->i'***REMOVED***
        assert_('sig' not in kw and 'signature' in kw***REMOVED***
        assert_equal(kw['signature'***REMOVED***, 'ii->i'***REMOVED***

    def test_numpy_ufunc_index(self***REMOVED***:
        # 2016-01-29: NUMPY_UFUNC_DISABLED
        return

        # Check that index is set appropriately, also if only an output
        # is passed on (latter is another regression tests for github bug 4753***REMOVED***
        class CheckIndex(object***REMOVED***:
            def __numpy_ufunc__(self, ufunc, method, i, inputs, **kw***REMOVED***:
                return i

        a = CheckIndex(***REMOVED***
        dummy = np.arange(2.***REMOVED***
        # 1 input, 1 output
        assert_equal(np.sin(a***REMOVED***, 0***REMOVED***
        assert_equal(np.sin(dummy, a***REMOVED***, 1***REMOVED***
        assert_equal(np.sin(dummy, out=a***REMOVED***, 1***REMOVED***
        assert_equal(np.sin(dummy, out=(a,***REMOVED******REMOVED***, 1***REMOVED***
        assert_equal(np.sin(a, a***REMOVED***, 0***REMOVED***
        assert_equal(np.sin(a, out=a***REMOVED***, 0***REMOVED***
        assert_equal(np.sin(a, out=(a,***REMOVED******REMOVED***, 0***REMOVED***
        # 1 input, 2 outputs
        assert_equal(np.modf(dummy, a***REMOVED***, 1***REMOVED***
        assert_equal(np.modf(dummy, None, a***REMOVED***, 2***REMOVED***
        assert_equal(np.modf(dummy, dummy, a***REMOVED***, 2***REMOVED***
        assert_equal(np.modf(dummy, out=a***REMOVED***, 1***REMOVED***
        assert_equal(np.modf(dummy, out=(a,***REMOVED******REMOVED***, 1***REMOVED***
        assert_equal(np.modf(dummy, out=(a, None***REMOVED******REMOVED***, 1***REMOVED***
        assert_equal(np.modf(dummy, out=(a, dummy***REMOVED******REMOVED***, 1***REMOVED***
        assert_equal(np.modf(dummy, out=(None, a***REMOVED******REMOVED***, 2***REMOVED***
        assert_equal(np.modf(dummy, out=(dummy, a***REMOVED******REMOVED***, 2***REMOVED***
        assert_equal(np.modf(a, out=(dummy, a***REMOVED******REMOVED***, 0***REMOVED***
        # 2 inputs, 1 output
        assert_equal(np.add(a, dummy***REMOVED***, 0***REMOVED***
        assert_equal(np.add(dummy, a***REMOVED***, 1***REMOVED***
        assert_equal(np.add(dummy, dummy, a***REMOVED***, 2***REMOVED***
        assert_equal(np.add(dummy, a, a***REMOVED***, 1***REMOVED***
        assert_equal(np.add(dummy, dummy, out=a***REMOVED***, 2***REMOVED***
        assert_equal(np.add(dummy, dummy, out=(a,***REMOVED******REMOVED***, 2***REMOVED***
        assert_equal(np.add(a, dummy, out=a***REMOVED***, 0***REMOVED***

    def test_out_override(self***REMOVED***:
        # 2016-01-29: NUMPY_UFUNC_DISABLED
        return

        # regression test for github bug 4753
        class OutClass(np.ndarray***REMOVED***:
            def __numpy_ufunc__(self, ufunc, method, i, inputs, **kw***REMOVED***:
                if 'out' in kw:
                    tmp_kw = kw.copy(***REMOVED***
                    tmp_kw.pop('out'***REMOVED***
                    func = getattr(ufunc, method***REMOVED***
                    kw['out'***REMOVED***[...***REMOVED*** = func(*inputs, **tmp_kw***REMOVED***

        A = np.array([0***REMOVED******REMOVED***.view(OutClass***REMOVED***
        B = np.array([5***REMOVED******REMOVED***
        C = np.array([6***REMOVED******REMOVED***
        np.multiply(C, B, A***REMOVED***
        assert_equal(A[0***REMOVED***, 30***REMOVED***
        assert_(isinstance(A, OutClass***REMOVED******REMOVED***
        A[0***REMOVED*** = 0
        np.multiply(C, B, out=A***REMOVED***
        assert_equal(A[0***REMOVED***, 30***REMOVED***
        assert_(isinstance(A, OutClass***REMOVED******REMOVED***


class TestCAPI(TestCase***REMOVED***:
    def test_IsPythonScalar(self***REMOVED***:
        from numpy.core.multiarray_tests import IsPythonScalar
        assert_(IsPythonScalar(b'foobar'***REMOVED******REMOVED***
        assert_(IsPythonScalar(1***REMOVED******REMOVED***
        assert_(IsPythonScalar(2**80***REMOVED******REMOVED***
        assert_(IsPythonScalar(2.***REMOVED******REMOVED***
        assert_(IsPythonScalar("a"***REMOVED******REMOVED***


class TestSubscripting(TestCase***REMOVED***:
    def test_test_zero_rank(self***REMOVED***:
        x = np.array([1, 2, 3***REMOVED******REMOVED***
        self.assertTrue(isinstance(x[0***REMOVED***, np.int_***REMOVED******REMOVED***
        if sys.version_info[0***REMOVED*** < 3:
            self.assertTrue(isinstance(x[0***REMOVED***, int***REMOVED******REMOVED***
        self.assertTrue(type(x[0, ...***REMOVED******REMOVED*** is np.ndarray***REMOVED***


class TestPickling(TestCase***REMOVED***:
    def test_roundtrip(self***REMOVED***:
        import pickle
        carray = np.array([[2, 9***REMOVED***, [7, 0***REMOVED***, [3, 8***REMOVED******REMOVED******REMOVED***
        DATA = [
            carray,
            np.transpose(carray***REMOVED***,
            np.array([('xxx', 1, 2.0***REMOVED******REMOVED***, dtype=[('a', (str, 3***REMOVED******REMOVED***, ('b', int***REMOVED***,
                                               ('c', float***REMOVED******REMOVED******REMOVED***
        ***REMOVED***

        for a in DATA:
            assert_equal(a, pickle.loads(a.dumps(***REMOVED******REMOVED***, err_msg="%r" % a***REMOVED***

    def _loads(self, obj***REMOVED***:
        if sys.version_info[0***REMOVED*** >= 3:
            return np.loads(obj, encoding='latin1'***REMOVED***
        else:
            return np.loads(obj***REMOVED***

    # version 0 pickles, using protocol=2 to pickle
    # version 0 doesn't have a version field
    def test_version0_int8(self***REMOVED***:
        s = '\x80\x02cnumpy.core._internal\n_reconstruct\nq\x01cnumpy\nndarray\nq\x02K\x00\x85U\x01b\x87Rq\x03(K\x04\x85cnumpy\ndtype\nq\x04U\x02i1K\x00K\x01\x87Rq\x05(U\x01|NNJ\xff\xff\xff\xffJ\xff\xff\xff\xfftb\x89U\x04\x01\x02\x03\x04tb.'
        a = np.array([1, 2, 3, 4***REMOVED***, dtype=np.int8***REMOVED***
        p = self._loads(asbytes(s***REMOVED******REMOVED***
        assert_equal(a, p***REMOVED***

    def test_version0_float32(self***REMOVED***:
        s = '\x80\x02cnumpy.core._internal\n_reconstruct\nq\x01cnumpy\nndarray\nq\x02K\x00\x85U\x01b\x87Rq\x03(K\x04\x85cnumpy\ndtype\nq\x04U\x02f4K\x00K\x01\x87Rq\x05(U\x01<NNJ\xff\xff\xff\xffJ\xff\xff\xff\xfftb\x89U\x10\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@tb.'
        a = np.array([1.0, 2.0, 3.0, 4.0***REMOVED***, dtype=np.float32***REMOVED***
        p = self._loads(asbytes(s***REMOVED******REMOVED***
        assert_equal(a, p***REMOVED***

    def test_version0_object(self***REMOVED***:
        s = '\x80\x02cnumpy.core._internal\n_reconstruct\nq\x01cnumpy\nndarray\nq\x02K\x00\x85U\x01b\x87Rq\x03(K\x02\x85cnumpy\ndtype\nq\x04U\x02O8K\x00K\x01\x87Rq\x05(U\x01|NNJ\xff\xff\xff\xffJ\xff\xff\xff\xfftb\x89***REMOVED***q\x06(***REMOVED***q\x07U\x01aK\x01s***REMOVED***q\x08U\x01bK\x02setb.'
        a = np.array([{'a': 1***REMOVED***, {'b': 2***REMOVED******REMOVED******REMOVED***
        p = self._loads(asbytes(s***REMOVED******REMOVED***
        assert_equal(a, p***REMOVED***

    # version 1 pickles, using protocol=2 to pickle
    def test_version1_int8(self***REMOVED***:
        s = '\x80\x02cnumpy.core._internal\n_reconstruct\nq\x01cnumpy\nndarray\nq\x02K\x00\x85U\x01b\x87Rq\x03(K\x01K\x04\x85cnumpy\ndtype\nq\x04U\x02i1K\x00K\x01\x87Rq\x05(K\x01U\x01|NNJ\xff\xff\xff\xffJ\xff\xff\xff\xfftb\x89U\x04\x01\x02\x03\x04tb.'
        a = np.array([1, 2, 3, 4***REMOVED***, dtype=np.int8***REMOVED***
        p = self._loads(asbytes(s***REMOVED******REMOVED***
        assert_equal(a, p***REMOVED***

    def test_version1_float32(self***REMOVED***:
        s = '\x80\x02cnumpy.core._internal\n_reconstruct\nq\x01cnumpy\nndarray\nq\x02K\x00\x85U\x01b\x87Rq\x03(K\x01K\x04\x85cnumpy\ndtype\nq\x04U\x02f4K\x00K\x01\x87Rq\x05(K\x01U\x01<NNJ\xff\xff\xff\xffJ\xff\xff\xff\xfftb\x89U\x10\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@tb.'
        a = np.array([1.0, 2.0, 3.0, 4.0***REMOVED***, dtype=np.float32***REMOVED***
        p = self._loads(asbytes(s***REMOVED******REMOVED***
        assert_equal(a, p***REMOVED***

    def test_version1_object(self***REMOVED***:
        s = '\x80\x02cnumpy.core._internal\n_reconstruct\nq\x01cnumpy\nndarray\nq\x02K\x00\x85U\x01b\x87Rq\x03(K\x01K\x02\x85cnumpy\ndtype\nq\x04U\x02O8K\x00K\x01\x87Rq\x05(K\x01U\x01|NNJ\xff\xff\xff\xffJ\xff\xff\xff\xfftb\x89***REMOVED***q\x06(***REMOVED***q\x07U\x01aK\x01s***REMOVED***q\x08U\x01bK\x02setb.'
        a = np.array([{'a': 1***REMOVED***, {'b': 2***REMOVED******REMOVED******REMOVED***
        p = self._loads(asbytes(s***REMOVED******REMOVED***
        assert_equal(a, p***REMOVED***

    def test_subarray_int_shape(self***REMOVED***:
        s = "cnumpy.core.multiarray\n_reconstruct\np0\n(cnumpy\nndarray\np1\n(I0\ntp2\nS'b'\np3\ntp4\nRp5\n(I1\n(I1\ntp6\ncnumpy\ndtype\np7\n(S'V6'\np8\nI0\nI1\ntp9\nRp10\n(I3\nS'|'\np11\nN(S'a'\np12\ng3\ntp13\n(dp14\ng12\n(g7\n(S'V4'\np15\nI0\nI1\ntp16\nRp17\n(I3\nS'|'\np18\n(g7\n(S'i1'\np19\nI0\nI1\ntp20\nRp21\n(I3\nS'|'\np22\nNNNI-1\nI-1\nI0\ntp23\nb(I2\nI2\ntp24\ntp25\nNNI4\nI1\nI0\ntp26\nbI0\ntp27\nsg3\n(g7\n(S'V2'\np28\nI0\nI1\ntp29\nRp30\n(I3\nS'|'\np31\n(g21\nI2\ntp32\nNNI2\nI1\nI0\ntp33\nbI4\ntp34\nsI6\nI1\nI0\ntp35\nbI00\nS'\\x01\\x01\\x01\\x01\\x01\\x02'\np36\ntp37\nb."
        a = np.array([(1, (1, 2***REMOVED******REMOVED******REMOVED***, dtype=[('a', 'i1', (2, 2***REMOVED******REMOVED***, ('b', 'i1', 2***REMOVED******REMOVED******REMOVED***
        p = self._loads(asbytes(s***REMOVED******REMOVED***
        assert_equal(a, p***REMOVED***


class TestFancyIndexing(TestCase***REMOVED***:
    def test_list(self***REMOVED***:
        x = np.ones((1, 1***REMOVED******REMOVED***
        x[:, [0***REMOVED******REMOVED*** = 2.0
        assert_array_equal(x, np.array([[2.0***REMOVED******REMOVED******REMOVED******REMOVED***

        x = np.ones((1, 1, 1***REMOVED******REMOVED***
        x[:, :, [0***REMOVED******REMOVED*** = 2.0
        assert_array_equal(x, np.array([[[2.0***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***

    def test_tuple(self***REMOVED***:
        x = np.ones((1, 1***REMOVED******REMOVED***
        x[:, (0,***REMOVED******REMOVED*** = 2.0
        assert_array_equal(x, np.array([[2.0***REMOVED******REMOVED******REMOVED******REMOVED***
        x = np.ones((1, 1, 1***REMOVED******REMOVED***
        x[:, :, (0,***REMOVED******REMOVED*** = 2.0
        assert_array_equal(x, np.array([[[2.0***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***

    def test_mask(self***REMOVED***:
        x = np.array([1, 2, 3, 4***REMOVED******REMOVED***
        m = np.array([0, 1, 0, 0***REMOVED***, bool***REMOVED***
        assert_array_equal(x[m***REMOVED***, np.array([2***REMOVED******REMOVED******REMOVED***

    def test_mask2(self***REMOVED***:
        x = np.array([[1, 2, 3, 4***REMOVED***, [5, 6, 7, 8***REMOVED******REMOVED******REMOVED***
        m = np.array([0, 1***REMOVED***, bool***REMOVED***
        m2 = np.array([[0, 1, 0, 0***REMOVED***, [1, 0, 0, 0***REMOVED******REMOVED***, bool***REMOVED***
        m3 = np.array([[0, 1, 0, 0***REMOVED***, [0, 0, 0, 0***REMOVED******REMOVED***, bool***REMOVED***
        assert_array_equal(x[m***REMOVED***, np.array([[5, 6, 7, 8***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_array_equal(x[m2***REMOVED***, np.array([2, 5***REMOVED******REMOVED******REMOVED***
        assert_array_equal(x[m3***REMOVED***, np.array([2***REMOVED******REMOVED******REMOVED***

    def test_assign_mask(self***REMOVED***:
        x = np.array([1, 2, 3, 4***REMOVED******REMOVED***
        m = np.array([0, 1, 0, 0***REMOVED***, bool***REMOVED***
        x[m***REMOVED*** = 5
        assert_array_equal(x, np.array([1, 5, 3, 4***REMOVED******REMOVED******REMOVED***

    def test_assign_mask2(self***REMOVED***:
        xorig = np.array([[1, 2, 3, 4***REMOVED***, [5, 6, 7, 8***REMOVED******REMOVED******REMOVED***
        m = np.array([0, 1***REMOVED***, bool***REMOVED***
        m2 = np.array([[0, 1, 0, 0***REMOVED***, [1, 0, 0, 0***REMOVED******REMOVED***, bool***REMOVED***
        m3 = np.array([[0, 1, 0, 0***REMOVED***, [0, 0, 0, 0***REMOVED******REMOVED***, bool***REMOVED***
        x = xorig.copy(***REMOVED***
        x[m***REMOVED*** = 10
        assert_array_equal(x, np.array([[1, 2, 3, 4***REMOVED***, [10, 10, 10, 10***REMOVED******REMOVED******REMOVED******REMOVED***
        x = xorig.copy(***REMOVED***
        x[m2***REMOVED*** = 10
        assert_array_equal(x, np.array([[1, 10, 3, 4***REMOVED***, [10, 6, 7, 8***REMOVED******REMOVED******REMOVED******REMOVED***
        x = xorig.copy(***REMOVED***
        x[m3***REMOVED*** = 10
        assert_array_equal(x, np.array([[1, 10, 3, 4***REMOVED***, [5, 6, 7, 8***REMOVED******REMOVED******REMOVED******REMOVED***


class TestStringCompare(TestCase***REMOVED***:
    def test_string(self***REMOVED***:
        g1 = np.array(["This", "is", "example"***REMOVED******REMOVED***
        g2 = np.array(["This", "was", "example"***REMOVED******REMOVED***
        assert_array_equal(g1 == g2, [g1[i***REMOVED*** == g2[i***REMOVED*** for i in [0, 1, 2***REMOVED******REMOVED******REMOVED***
        assert_array_equal(g1 != g2, [g1[i***REMOVED*** != g2[i***REMOVED*** for i in [0, 1, 2***REMOVED******REMOVED******REMOVED***
        assert_array_equal(g1 <= g2, [g1[i***REMOVED*** <= g2[i***REMOVED*** for i in [0, 1, 2***REMOVED******REMOVED******REMOVED***
        assert_array_equal(g1 >= g2, [g1[i***REMOVED*** >= g2[i***REMOVED*** for i in [0, 1, 2***REMOVED******REMOVED******REMOVED***
        assert_array_equal(g1 < g2, [g1[i***REMOVED*** < g2[i***REMOVED*** for i in [0, 1, 2***REMOVED******REMOVED******REMOVED***
        assert_array_equal(g1 > g2, [g1[i***REMOVED*** > g2[i***REMOVED*** for i in [0, 1, 2***REMOVED******REMOVED******REMOVED***

    def test_mixed(self***REMOVED***:
        g1 = np.array(["spam", "spa", "spammer", "and eggs"***REMOVED******REMOVED***
        g2 = "spam"
        assert_array_equal(g1 == g2, [x == g2 for x in g1***REMOVED******REMOVED***
        assert_array_equal(g1 != g2, [x != g2 for x in g1***REMOVED******REMOVED***
        assert_array_equal(g1 < g2, [x < g2 for x in g1***REMOVED******REMOVED***
        assert_array_equal(g1 > g2, [x > g2 for x in g1***REMOVED******REMOVED***
        assert_array_equal(g1 <= g2, [x <= g2 for x in g1***REMOVED******REMOVED***
        assert_array_equal(g1 >= g2, [x >= g2 for x in g1***REMOVED******REMOVED***

    def test_unicode(self***REMOVED***:
        g1 = np.array([sixu("This"***REMOVED***, sixu("is"***REMOVED***, sixu("example"***REMOVED******REMOVED******REMOVED***
        g2 = np.array([sixu("This"***REMOVED***, sixu("was"***REMOVED***, sixu("example"***REMOVED******REMOVED******REMOVED***
        assert_array_equal(g1 == g2, [g1[i***REMOVED*** == g2[i***REMOVED*** for i in [0, 1, 2***REMOVED******REMOVED******REMOVED***
        assert_array_equal(g1 != g2, [g1[i***REMOVED*** != g2[i***REMOVED*** for i in [0, 1, 2***REMOVED******REMOVED******REMOVED***
        assert_array_equal(g1 <= g2, [g1[i***REMOVED*** <= g2[i***REMOVED*** for i in [0, 1, 2***REMOVED******REMOVED******REMOVED***
        assert_array_equal(g1 >= g2, [g1[i***REMOVED*** >= g2[i***REMOVED*** for i in [0, 1, 2***REMOVED******REMOVED******REMOVED***
        assert_array_equal(g1 < g2,  [g1[i***REMOVED*** < g2[i***REMOVED*** for i in [0, 1, 2***REMOVED******REMOVED******REMOVED***
        assert_array_equal(g1 > g2,  [g1[i***REMOVED*** > g2[i***REMOVED*** for i in [0, 1, 2***REMOVED******REMOVED******REMOVED***


class TestArgmax(TestCase***REMOVED***:

    nan_arr = [
        ([0, 1, 2, 3, np.nan***REMOVED***, 4***REMOVED***,
        ([0, 1, 2, np.nan, 3***REMOVED***, 3***REMOVED***,
        ([np.nan, 0, 1, 2, 3***REMOVED***, 0***REMOVED***,
        ([np.nan, 0, np.nan, 2, 3***REMOVED***, 0***REMOVED***,
        ([0, 1, 2, 3, complex(0, np.nan***REMOVED******REMOVED***, 4***REMOVED***,
        ([0, 1, 2, 3, complex(np.nan, 0***REMOVED******REMOVED***, 4***REMOVED***,
        ([0, 1, 2, complex(np.nan, 0***REMOVED***, 3***REMOVED***, 3***REMOVED***,
        ([0, 1, 2, complex(0, np.nan***REMOVED***, 3***REMOVED***, 3***REMOVED***,
        ([complex(0, np.nan***REMOVED***, 0, 1, 2, 3***REMOVED***, 0***REMOVED***,
        ([complex(np.nan, np.nan***REMOVED***, 0, 1, 2, 3***REMOVED***, 0***REMOVED***,
        ([complex(np.nan, 0***REMOVED***, complex(np.nan, 2***REMOVED***, complex(np.nan, 1***REMOVED******REMOVED***, 0***REMOVED***,
        ([complex(np.nan, np.nan***REMOVED***, complex(np.nan, 2***REMOVED***, complex(np.nan, 1***REMOVED******REMOVED***, 0***REMOVED***,
        ([complex(np.nan, 0***REMOVED***, complex(np.nan, 2***REMOVED***, complex(np.nan, np.nan***REMOVED******REMOVED***, 0***REMOVED***,

        ([complex(0, 0***REMOVED***, complex(0, 2***REMOVED***, complex(0, 1***REMOVED******REMOVED***, 1***REMOVED***,
        ([complex(1, 0***REMOVED***, complex(0, 2***REMOVED***, complex(0, 1***REMOVED******REMOVED***, 0***REMOVED***,
        ([complex(1, 0***REMOVED***, complex(0, 2***REMOVED***, complex(1, 1***REMOVED******REMOVED***, 2***REMOVED***,

        ([np.datetime64('1923-04-14T12:43:12'***REMOVED***,
          np.datetime64('1994-06-21T14:43:15'***REMOVED***,
          np.datetime64('2001-10-15T04:10:32'***REMOVED***,
          np.datetime64('1995-11-25T16:02:16'***REMOVED***,
          np.datetime64('2005-01-04T03:14:12'***REMOVED***,
          np.datetime64('2041-12-03T14:05:03'***REMOVED******REMOVED***, 5***REMOVED***,
        ([np.datetime64('1935-09-14T04:40:11'***REMOVED***,
          np.datetime64('1949-10-12T12:32:11'***REMOVED***,
          np.datetime64('2010-01-03T05:14:12'***REMOVED***,
          np.datetime64('2015-11-20T12:20:59'***REMOVED***,
          np.datetime64('1932-09-23T10:10:13'***REMOVED***,
          np.datetime64('2014-10-10T03:50:30'***REMOVED******REMOVED***, 3***REMOVED***,
        # Assorted tests with NaTs
        ([np.datetime64('NaT'***REMOVED***,
          np.datetime64('NaT'***REMOVED***,
          np.datetime64('2010-01-03T05:14:12'***REMOVED***,
          np.datetime64('NaT'***REMOVED***,
          np.datetime64('2015-09-23T10:10:13'***REMOVED***,
          np.datetime64('1932-10-10T03:50:30'***REMOVED******REMOVED***, 4***REMOVED***,
        ([np.datetime64('2059-03-14T12:43:12'***REMOVED***,
          np.datetime64('1996-09-21T14:43:15'***REMOVED***,
          np.datetime64('NaT'***REMOVED***,
          np.datetime64('2022-12-25T16:02:16'***REMOVED***,
          np.datetime64('1963-10-04T03:14:12'***REMOVED***,
          np.datetime64('2013-05-08T18:15:23'***REMOVED******REMOVED***, 0***REMOVED***,
        ([np.timedelta64(2, 's'***REMOVED***,
          np.timedelta64(1, 's'***REMOVED***,
          np.timedelta64('NaT', 's'***REMOVED***,
          np.timedelta64(3, 's'***REMOVED******REMOVED***, 3***REMOVED***,
        ([np.timedelta64('NaT', 's'***REMOVED******REMOVED*** * 3, 0***REMOVED***,

        ([timedelta(days=5, seconds=14***REMOVED***, timedelta(days=2, seconds=35***REMOVED***,
          timedelta(days=-1, seconds=23***REMOVED******REMOVED***, 0***REMOVED***,
        ([timedelta(days=1, seconds=43***REMOVED***, timedelta(days=10, seconds=5***REMOVED***,
          timedelta(days=5, seconds=14***REMOVED******REMOVED***, 1***REMOVED***,
        ([timedelta(days=10, seconds=24***REMOVED***, timedelta(days=10, seconds=5***REMOVED***,
          timedelta(days=10, seconds=43***REMOVED******REMOVED***, 2***REMOVED***,

        ([False, False, False, False, True***REMOVED***, 4***REMOVED***,
        ([False, False, False, True, False***REMOVED***, 3***REMOVED***,
        ([True, False, False, False, False***REMOVED***, 0***REMOVED***,
        ([True, False, True, False, False***REMOVED***, 0***REMOVED***,
    ***REMOVED***

    def test_all(self***REMOVED***:
        a = np.random.normal(0, 1, (4, 5, 6, 7, 8***REMOVED******REMOVED***
        for i in range(a.ndim***REMOVED***:
            amax = a.max(i***REMOVED***
            aargmax = a.argmax(i***REMOVED***
            axes = list(range(a.ndim***REMOVED******REMOVED***
            axes.remove(i***REMOVED***
            assert_(np.all(amax == aargmax.choose(*a.transpose(i,*axes***REMOVED******REMOVED******REMOVED******REMOVED***

    def test_combinations(self***REMOVED***:
        for arr, pos in self.nan_arr:
            assert_equal(np.argmax(arr***REMOVED***, pos, err_msg="%r" % arr***REMOVED***
            assert_equal(arr[np.argmax(arr***REMOVED******REMOVED***, np.max(arr***REMOVED***, err_msg="%r" % arr***REMOVED***

    def test_output_shape(self***REMOVED***:
        # see also gh-616
        a = np.ones((10, 5***REMOVED******REMOVED***
        # Check some simple shape mismatches
        out = np.ones(11, dtype=np.int_***REMOVED***
        assert_raises(ValueError, a.argmax, -1, out***REMOVED***

        out = np.ones((2, 5***REMOVED***, dtype=np.int_***REMOVED***
        assert_raises(ValueError, a.argmax, -1, out***REMOVED***

        # these could be relaxed possibly (used to allow even the previous***REMOVED***
        out = np.ones((1, 10***REMOVED***, dtype=np.int_***REMOVED***
        assert_raises(ValueError, a.argmax, -1, out***REMOVED***

        out = np.ones(10, dtype=np.int_***REMOVED***
        a.argmax(-1, out=out***REMOVED***
        assert_equal(out, a.argmax(-1***REMOVED******REMOVED***

    def test_argmax_unicode(self***REMOVED***:
        d = np.zeros(6031, dtype='<U9'***REMOVED***
        d[5942***REMOVED*** = "as"
        assert_equal(d.argmax(***REMOVED***, 5942***REMOVED***

    def test_np_vs_ndarray(self***REMOVED***:
        # make sure both ndarray.argmax and numpy.argmax support out/axis args
        a = np.random.normal(size=(2,3***REMOVED******REMOVED***

        # check positional args
        out1 = np.zeros(2, dtype=int***REMOVED***
        out2 = np.zeros(2, dtype=int***REMOVED***
        assert_equal(a.argmax(1, out1***REMOVED***, np.argmax(a, 1, out2***REMOVED******REMOVED***
        assert_equal(out1, out2***REMOVED***

        # check keyword args
        out1 = np.zeros(3, dtype=int***REMOVED***
        out2 = np.zeros(3, dtype=int***REMOVED***
        assert_equal(a.argmax(out=out1, axis=0***REMOVED***, np.argmax(a, out=out2, axis=0***REMOVED******REMOVED***
        assert_equal(out1, out2***REMOVED***

    def test_object_argmax_with_NULLs(self***REMOVED***:
        # See gh-6032
        a = np.empty(4, dtype='O'***REMOVED***
        ctypes.memset(a.ctypes.data, 0, a.nbytes***REMOVED***
        assert_equal(a.argmax(***REMOVED***, 0***REMOVED***
        a[3***REMOVED*** = 10
        assert_equal(a.argmax(***REMOVED***, 3***REMOVED***
        a[1***REMOVED*** = 30
        assert_equal(a.argmax(***REMOVED***, 1***REMOVED***


class TestArgmin(TestCase***REMOVED***:

    nan_arr = [
        ([0, 1, 2, 3, np.nan***REMOVED***, 4***REMOVED***,
        ([0, 1, 2, np.nan, 3***REMOVED***, 3***REMOVED***,
        ([np.nan, 0, 1, 2, 3***REMOVED***, 0***REMOVED***,
        ([np.nan, 0, np.nan, 2, 3***REMOVED***, 0***REMOVED***,
        ([0, 1, 2, 3, complex(0, np.nan***REMOVED******REMOVED***, 4***REMOVED***,
        ([0, 1, 2, 3, complex(np.nan, 0***REMOVED******REMOVED***, 4***REMOVED***,
        ([0, 1, 2, complex(np.nan, 0***REMOVED***, 3***REMOVED***, 3***REMOVED***,
        ([0, 1, 2, complex(0, np.nan***REMOVED***, 3***REMOVED***, 3***REMOVED***,
        ([complex(0, np.nan***REMOVED***, 0, 1, 2, 3***REMOVED***, 0***REMOVED***,
        ([complex(np.nan, np.nan***REMOVED***, 0, 1, 2, 3***REMOVED***, 0***REMOVED***,
        ([complex(np.nan, 0***REMOVED***, complex(np.nan, 2***REMOVED***, complex(np.nan, 1***REMOVED******REMOVED***, 0***REMOVED***,
        ([complex(np.nan, np.nan***REMOVED***, complex(np.nan, 2***REMOVED***, complex(np.nan, 1***REMOVED******REMOVED***, 0***REMOVED***,
        ([complex(np.nan, 0***REMOVED***, complex(np.nan, 2***REMOVED***, complex(np.nan, np.nan***REMOVED******REMOVED***, 0***REMOVED***,

        ([complex(0, 0***REMOVED***, complex(0, 2***REMOVED***, complex(0, 1***REMOVED******REMOVED***, 0***REMOVED***,
        ([complex(1, 0***REMOVED***, complex(0, 2***REMOVED***, complex(0, 1***REMOVED******REMOVED***, 2***REMOVED***,
        ([complex(1, 0***REMOVED***, complex(0, 2***REMOVED***, complex(1, 1***REMOVED******REMOVED***, 1***REMOVED***,

        ([np.datetime64('1923-04-14T12:43:12'***REMOVED***,
          np.datetime64('1994-06-21T14:43:15'***REMOVED***,
          np.datetime64('2001-10-15T04:10:32'***REMOVED***,
          np.datetime64('1995-11-25T16:02:16'***REMOVED***,
          np.datetime64('2005-01-04T03:14:12'***REMOVED***,
          np.datetime64('2041-12-03T14:05:03'***REMOVED******REMOVED***, 0***REMOVED***,
        ([np.datetime64('1935-09-14T04:40:11'***REMOVED***,
          np.datetime64('1949-10-12T12:32:11'***REMOVED***,
          np.datetime64('2010-01-03T05:14:12'***REMOVED***,
          np.datetime64('2014-11-20T12:20:59'***REMOVED***,
          np.datetime64('2015-09-23T10:10:13'***REMOVED***,
          np.datetime64('1932-10-10T03:50:30'***REMOVED******REMOVED***, 5***REMOVED***,
        # Assorted tests with NaTs
        ([np.datetime64('NaT'***REMOVED***,
          np.datetime64('NaT'***REMOVED***,
          np.datetime64('2010-01-03T05:14:12'***REMOVED***,
          np.datetime64('NaT'***REMOVED***,
          np.datetime64('2015-09-23T10:10:13'***REMOVED***,
          np.datetime64('1932-10-10T03:50:30'***REMOVED******REMOVED***, 5***REMOVED***,
        ([np.datetime64('2059-03-14T12:43:12'***REMOVED***,
          np.datetime64('1996-09-21T14:43:15'***REMOVED***,
          np.datetime64('NaT'***REMOVED***,
          np.datetime64('2022-12-25T16:02:16'***REMOVED***,
          np.datetime64('1963-10-04T03:14:12'***REMOVED***,
          np.datetime64('2013-05-08T18:15:23'***REMOVED******REMOVED***, 4***REMOVED***,
        ([np.timedelta64(2, 's'***REMOVED***,
          np.timedelta64(1, 's'***REMOVED***,
          np.timedelta64('NaT', 's'***REMOVED***,
          np.timedelta64(3, 's'***REMOVED******REMOVED***, 1***REMOVED***,
        ([np.timedelta64('NaT', 's'***REMOVED******REMOVED*** * 3, 0***REMOVED***,

        ([timedelta(days=5, seconds=14***REMOVED***, timedelta(days=2, seconds=35***REMOVED***,
          timedelta(days=-1, seconds=23***REMOVED******REMOVED***, 2***REMOVED***,
        ([timedelta(days=1, seconds=43***REMOVED***, timedelta(days=10, seconds=5***REMOVED***,
          timedelta(days=5, seconds=14***REMOVED******REMOVED***, 0***REMOVED***,
        ([timedelta(days=10, seconds=24***REMOVED***, timedelta(days=10, seconds=5***REMOVED***,
          timedelta(days=10, seconds=43***REMOVED******REMOVED***, 1***REMOVED***,

        ([True, True, True, True, False***REMOVED***, 4***REMOVED***,
        ([True, True, True, False, True***REMOVED***, 3***REMOVED***,
        ([False, True, True, True, True***REMOVED***, 0***REMOVED***,
        ([False, True, False, True, True***REMOVED***, 0***REMOVED***,
    ***REMOVED***

    def test_all(self***REMOVED***:
        a = np.random.normal(0, 1, (4, 5, 6, 7, 8***REMOVED******REMOVED***
        for i in range(a.ndim***REMOVED***:
            amin = a.min(i***REMOVED***
            aargmin = a.argmin(i***REMOVED***
            axes = list(range(a.ndim***REMOVED******REMOVED***
            axes.remove(i***REMOVED***
            assert_(np.all(amin == aargmin.choose(*a.transpose(i,*axes***REMOVED******REMOVED******REMOVED******REMOVED***

    def test_combinations(self***REMOVED***:
        for arr, pos in self.nan_arr:
            assert_equal(np.argmin(arr***REMOVED***, pos, err_msg="%r" % arr***REMOVED***
            assert_equal(arr[np.argmin(arr***REMOVED******REMOVED***, np.min(arr***REMOVED***, err_msg="%r" % arr***REMOVED***

    def test_minimum_signed_integers(self***REMOVED***:

        a = np.array([1, -2**7, -2**7 + 1***REMOVED***, dtype=np.int8***REMOVED***
        assert_equal(np.argmin(a***REMOVED***, 1***REMOVED***

        a = np.array([1, -2**15, -2**15 + 1***REMOVED***, dtype=np.int16***REMOVED***
        assert_equal(np.argmin(a***REMOVED***, 1***REMOVED***

        a = np.array([1, -2**31, -2**31 + 1***REMOVED***, dtype=np.int32***REMOVED***
        assert_equal(np.argmin(a***REMOVED***, 1***REMOVED***

        a = np.array([1, -2**63, -2**63 + 1***REMOVED***, dtype=np.int64***REMOVED***
        assert_equal(np.argmin(a***REMOVED***, 1***REMOVED***

    def test_output_shape(self***REMOVED***:
        # see also gh-616
        a = np.ones((10, 5***REMOVED******REMOVED***
        # Check some simple shape mismatches
        out = np.ones(11, dtype=np.int_***REMOVED***
        assert_raises(ValueError, a.argmin, -1, out***REMOVED***

        out = np.ones((2, 5***REMOVED***, dtype=np.int_***REMOVED***
        assert_raises(ValueError, a.argmin, -1, out***REMOVED***

        # these could be relaxed possibly (used to allow even the previous***REMOVED***
        out = np.ones((1, 10***REMOVED***, dtype=np.int_***REMOVED***
        assert_raises(ValueError, a.argmin, -1, out***REMOVED***

        out = np.ones(10, dtype=np.int_***REMOVED***
        a.argmin(-1, out=out***REMOVED***
        assert_equal(out, a.argmin(-1***REMOVED******REMOVED***

    def test_argmin_unicode(self***REMOVED***:
        d = np.ones(6031, dtype='<U9'***REMOVED***
        d[6001***REMOVED*** = "0"
        assert_equal(d.argmin(***REMOVED***, 6001***REMOVED***

    def test_np_vs_ndarray(self***REMOVED***:
        # make sure both ndarray.argmin and numpy.argmin support out/axis args
        a = np.random.normal(size=(2, 3***REMOVED******REMOVED***

        # check positional args
        out1 = np.zeros(2, dtype=int***REMOVED***
        out2 = np.ones(2, dtype=int***REMOVED***
        assert_equal(a.argmin(1, out1***REMOVED***, np.argmin(a, 1, out2***REMOVED******REMOVED***
        assert_equal(out1, out2***REMOVED***

        # check keyword args
        out1 = np.zeros(3, dtype=int***REMOVED***
        out2 = np.ones(3, dtype=int***REMOVED***
        assert_equal(a.argmin(out=out1, axis=0***REMOVED***, np.argmin(a, out=out2, axis=0***REMOVED******REMOVED***
        assert_equal(out1, out2***REMOVED***

    def test_object_argmin_with_NULLs(self***REMOVED***:
        # See gh-6032
        a = np.empty(4, dtype='O'***REMOVED***
        ctypes.memset(a.ctypes.data, 0, a.nbytes***REMOVED***
        assert_equal(a.argmin(***REMOVED***, 0***REMOVED***
        a[3***REMOVED*** = 30
        assert_equal(a.argmin(***REMOVED***, 3***REMOVED***
        a[1***REMOVED*** = 10
        assert_equal(a.argmin(***REMOVED***, 1***REMOVED***


class TestMinMax(TestCase***REMOVED***:

    def test_scalar(self***REMOVED***:
        assert_raises(ValueError, np.amax, 1, 1***REMOVED***
        assert_raises(ValueError, np.amin, 1, 1***REMOVED***

        assert_equal(np.amax(1, axis=0***REMOVED***, 1***REMOVED***
        assert_equal(np.amin(1, axis=0***REMOVED***, 1***REMOVED***
        assert_equal(np.amax(1, axis=None***REMOVED***, 1***REMOVED***
        assert_equal(np.amin(1, axis=None***REMOVED***, 1***REMOVED***

    def test_axis(self***REMOVED***:
        assert_raises(ValueError, np.amax, [1, 2, 3***REMOVED***, 1000***REMOVED***
        assert_equal(np.amax([[1, 2, 3***REMOVED******REMOVED***, axis=1***REMOVED***, 3***REMOVED***

    def test_datetime(self***REMOVED***:
        # NaTs are ignored
        for dtype in ('m8[s***REMOVED***', 'm8[Y***REMOVED***'***REMOVED***:
            a = np.arange(10***REMOVED***.astype(dtype***REMOVED***
            a[3***REMOVED*** = 'NaT'
            assert_equal(np.amin(a***REMOVED***, a[0***REMOVED******REMOVED***
            assert_equal(np.amax(a***REMOVED***, a[9***REMOVED******REMOVED***
            a[0***REMOVED*** = 'NaT'
            assert_equal(np.amin(a***REMOVED***, a[1***REMOVED******REMOVED***
            assert_equal(np.amax(a***REMOVED***, a[9***REMOVED******REMOVED***
            a.fill('NaT'***REMOVED***
            assert_equal(np.amin(a***REMOVED***, a[0***REMOVED******REMOVED***
            assert_equal(np.amax(a***REMOVED***, a[0***REMOVED******REMOVED***


class TestNewaxis(TestCase***REMOVED***:
    def test_basic(self***REMOVED***:
        sk = np.array([0, -0.1, 0.1***REMOVED******REMOVED***
        res = 250*sk[:, np.newaxis***REMOVED***
        assert_almost_equal(res.ravel(***REMOVED***, 250*sk***REMOVED***


class TestClip(TestCase***REMOVED***:
    def _check_range(self, x, cmin, cmax***REMOVED***:
        assert_(np.all(x >= cmin***REMOVED******REMOVED***
        assert_(np.all(x <= cmax***REMOVED******REMOVED***

    def _clip_type(self, type_group, array_max,
                   clip_min, clip_max, inplace=False,
                   expected_min=None, expected_max=None***REMOVED***:
        if expected_min is None:
            expected_min = clip_min
        if expected_max is None:
            expected_max = clip_max

        for T in np.sctypes[type_group***REMOVED***:
            if sys.byteorder == 'little':
                byte_orders = ['=', '>'***REMOVED***
            else:
                byte_orders = ['<', '='***REMOVED***

            for byteorder in byte_orders:
                dtype = np.dtype(T***REMOVED***.newbyteorder(byteorder***REMOVED***

                x = (np.random.random(1000***REMOVED*** * array_max***REMOVED***.astype(dtype***REMOVED***
                if inplace:
                    x.clip(clip_min, clip_max, x***REMOVED***
                else:
                    x = x.clip(clip_min, clip_max***REMOVED***
                    byteorder = '='

                if x.dtype.byteorder == '|':
                    byteorder = '|'
                assert_equal(x.dtype.byteorder, byteorder***REMOVED***
                self._check_range(x, expected_min, expected_max***REMOVED***
        return x

    def test_basic(self***REMOVED***:
        for inplace in [False, True***REMOVED***:
            self._clip_type(
                'float', 1024, -12.8, 100.2, inplace=inplace***REMOVED***
            self._clip_type(
                'float', 1024, 0, 0, inplace=inplace***REMOVED***

            self._clip_type(
                'int', 1024, -120, 100.5, inplace=inplace***REMOVED***
            self._clip_type(
                'int', 1024, 0, 0, inplace=inplace***REMOVED***

            self._clip_type(
                'uint', 1024, 0, 0, inplace=inplace***REMOVED***
            self._clip_type(
                'uint', 1024, -120, 100, inplace=inplace, expected_min=0***REMOVED***

    def test_record_array(self***REMOVED***:
        rec = np.array([(-5, 2.0, 3.0***REMOVED***, (5.0, 4.0, 3.0***REMOVED******REMOVED***,
                       dtype=[('x', '<f8'***REMOVED***, ('y', '<f8'***REMOVED***, ('z', '<f8'***REMOVED******REMOVED******REMOVED***
        y = rec['x'***REMOVED***.clip(-0.3, 0.5***REMOVED***
        self._check_range(y, -0.3, 0.5***REMOVED***

    def test_max_or_min(self***REMOVED***:
        val = np.array([0, 1, 2, 3, 4, 5, 6, 7***REMOVED******REMOVED***
        x = val.clip(3***REMOVED***
        assert_(np.all(x >= 3***REMOVED******REMOVED***
        x = val.clip(min=3***REMOVED***
        assert_(np.all(x >= 3***REMOVED******REMOVED***
        x = val.clip(max=4***REMOVED***
        assert_(np.all(x <= 4***REMOVED******REMOVED***

    def test_nan(self***REMOVED***:
        input_arr = np.array([-2., np.nan, 0.5, 3., 0.25, np.nan***REMOVED******REMOVED***
        result = input_arr.clip(-1, 1***REMOVED***
        expected = np.array([-1., np.nan, 0.5, 1., 0.25, np.nan***REMOVED******REMOVED***
        assert_array_equal(result, expected***REMOVED***


class TestCompress(TestCase***REMOVED***:
    def test_axis(self***REMOVED***:
        tgt = [[5, 6, 7, 8, 9***REMOVED******REMOVED***
        arr = np.arange(10***REMOVED***.reshape(2, 5***REMOVED***
        out = np.compress([0, 1***REMOVED***, arr, axis=0***REMOVED***
        assert_equal(out, tgt***REMOVED***

        tgt = [[1, 3***REMOVED***, [6, 8***REMOVED******REMOVED***
        out = np.compress([0, 1, 0, 1, 0***REMOVED***, arr, axis=1***REMOVED***
        assert_equal(out, tgt***REMOVED***

    def test_truncate(self***REMOVED***:
        tgt = [[1***REMOVED***, [6***REMOVED******REMOVED***
        arr = np.arange(10***REMOVED***.reshape(2, 5***REMOVED***
        out = np.compress([0, 1***REMOVED***, arr, axis=1***REMOVED***
        assert_equal(out, tgt***REMOVED***

    def test_flatten(self***REMOVED***:
        arr = np.arange(10***REMOVED***.reshape(2, 5***REMOVED***
        out = np.compress([0, 1***REMOVED***, arr***REMOVED***
        assert_equal(out, 1***REMOVED***


class TestPutmask(object***REMOVED***:
    def tst_basic(self, x, T, mask, val***REMOVED***:
        np.putmask(x, mask, val***REMOVED***
        assert_(np.all(x[mask***REMOVED*** == T(val***REMOVED******REMOVED******REMOVED***
        assert_(x.dtype == T***REMOVED***

    def test_ip_types(self***REMOVED***:
        unchecked_types = [str, unicode, np.void, object***REMOVED***

        x = np.random.random(1000***REMOVED****100
        mask = x < 40

        for val in [-100, 0, 15***REMOVED***:
            for types in np.sctypes.values(***REMOVED***:
                for T in types:
                    if T not in unchecked_types:
                        yield self.tst_basic, x.copy(***REMOVED***.astype(T***REMOVED***, T, mask, val

    def test_mask_size(self***REMOVED***:
        assert_raises(ValueError, np.putmask, np.array([1, 2, 3***REMOVED******REMOVED***, [True***REMOVED***, 5***REMOVED***

    def tst_byteorder(self, dtype***REMOVED***:
        x = np.array([1, 2, 3***REMOVED***, dtype***REMOVED***
        np.putmask(x, [True, False, True***REMOVED***, -1***REMOVED***
        assert_array_equal(x, [-1, 2, -1***REMOVED******REMOVED***

    def test_ip_byteorder(self***REMOVED***:
        for dtype in ('>i4', '<i4'***REMOVED***:
            yield self.tst_byteorder, dtype

    def test_record_array(self***REMOVED***:
        # Note mixed byteorder.
        rec = np.array([(-5, 2.0, 3.0***REMOVED***, (5.0, 4.0, 3.0***REMOVED******REMOVED***,
                      dtype=[('x', '<f8'***REMOVED***, ('y', '>f8'***REMOVED***, ('z', '<f8'***REMOVED******REMOVED******REMOVED***
        np.putmask(rec['x'***REMOVED***, [True, False***REMOVED***, 10***REMOVED***
        assert_array_equal(rec['x'***REMOVED***, [10, 5***REMOVED******REMOVED***
        assert_array_equal(rec['y'***REMOVED***, [2, 4***REMOVED******REMOVED***
        assert_array_equal(rec['z'***REMOVED***, [3, 3***REMOVED******REMOVED***
        np.putmask(rec['y'***REMOVED***, [True, False***REMOVED***, 11***REMOVED***
        assert_array_equal(rec['x'***REMOVED***, [10, 5***REMOVED******REMOVED***
        assert_array_equal(rec['y'***REMOVED***, [11, 4***REMOVED******REMOVED***
        assert_array_equal(rec['z'***REMOVED***, [3, 3***REMOVED******REMOVED***


class TestTake(object***REMOVED***:
    def tst_basic(self, x***REMOVED***:
        ind = list(range(x.shape[0***REMOVED******REMOVED******REMOVED***
        assert_array_equal(x.take(ind, axis=0***REMOVED***, x***REMOVED***

    def test_ip_types(self***REMOVED***:
        unchecked_types = [str, unicode, np.void, object***REMOVED***

        x = np.random.random(24***REMOVED****100
        x.shape = 2, 3, 4
        for types in np.sctypes.values(***REMOVED***:
            for T in types:
                if T not in unchecked_types:
                    yield self.tst_basic, x.copy(***REMOVED***.astype(T***REMOVED***

    def test_raise(self***REMOVED***:
        x = np.random.random(24***REMOVED****100
        x.shape = 2, 3, 4
        assert_raises(IndexError, x.take, [0, 1, 2***REMOVED***, axis=0***REMOVED***
        assert_raises(IndexError, x.take, [-3***REMOVED***, axis=0***REMOVED***
        assert_array_equal(x.take([-1***REMOVED***, axis=0***REMOVED***[0***REMOVED***, x[1***REMOVED******REMOVED***

    def test_clip(self***REMOVED***:
        x = np.random.random(24***REMOVED****100
        x.shape = 2, 3, 4
        assert_array_equal(x.take([-1***REMOVED***, axis=0, mode='clip'***REMOVED***[0***REMOVED***, x[0***REMOVED******REMOVED***
        assert_array_equal(x.take([2***REMOVED***, axis=0, mode='clip'***REMOVED***[0***REMOVED***, x[1***REMOVED******REMOVED***

    def test_wrap(self***REMOVED***:
        x = np.random.random(24***REMOVED****100
        x.shape = 2, 3, 4
        assert_array_equal(x.take([-1***REMOVED***, axis=0, mode='wrap'***REMOVED***[0***REMOVED***, x[1***REMOVED******REMOVED***
        assert_array_equal(x.take([2***REMOVED***, axis=0, mode='wrap'***REMOVED***[0***REMOVED***, x[0***REMOVED******REMOVED***
        assert_array_equal(x.take([3***REMOVED***, axis=0, mode='wrap'***REMOVED***[0***REMOVED***, x[1***REMOVED******REMOVED***

    def tst_byteorder(self, dtype***REMOVED***:
        x = np.array([1, 2, 3***REMOVED***, dtype***REMOVED***
        assert_array_equal(x.take([0, 2, 1***REMOVED******REMOVED***, [1, 3, 2***REMOVED******REMOVED***

    def test_ip_byteorder(self***REMOVED***:
        for dtype in ('>i4', '<i4'***REMOVED***:
            yield self.tst_byteorder, dtype

    def test_record_array(self***REMOVED***:
        # Note mixed byteorder.
        rec = np.array([(-5, 2.0, 3.0***REMOVED***, (5.0, 4.0, 3.0***REMOVED******REMOVED***,
                      dtype=[('x', '<f8'***REMOVED***, ('y', '>f8'***REMOVED***, ('z', '<f8'***REMOVED******REMOVED******REMOVED***
        rec1 = rec.take([1***REMOVED******REMOVED***
        assert_(rec1['x'***REMOVED*** == 5.0 and rec1['y'***REMOVED*** == 4.0***REMOVED***


class TestLexsort(TestCase***REMOVED***:
    def test_basic(self***REMOVED***:
        a = [1, 2, 1, 3, 1, 5***REMOVED***
        b = [0, 4, 5, 6, 2, 3***REMOVED***
        idx = np.lexsort((b, a***REMOVED******REMOVED***
        expected_idx = np.array([0, 4, 2, 1, 3, 5***REMOVED******REMOVED***
        assert_array_equal(idx, expected_idx***REMOVED***

        x = np.vstack((b, a***REMOVED******REMOVED***
        idx = np.lexsort(x***REMOVED***
        assert_array_equal(idx, expected_idx***REMOVED***

        assert_array_equal(x[1***REMOVED***[idx***REMOVED***, np.sort(x[1***REMOVED******REMOVED******REMOVED***

    def test_datetime(self***REMOVED***:
        a = np.array([0,0,0***REMOVED***, dtype='datetime64[D***REMOVED***'***REMOVED***
        b = np.array([2,1,0***REMOVED***, dtype='datetime64[D***REMOVED***'***REMOVED***
        idx = np.lexsort((b, a***REMOVED******REMOVED***
        expected_idx = np.array([2, 1, 0***REMOVED******REMOVED***
        assert_array_equal(idx, expected_idx***REMOVED***

        a = np.array([0,0,0***REMOVED***, dtype='timedelta64[D***REMOVED***'***REMOVED***
        b = np.array([2,1,0***REMOVED***, dtype='timedelta64[D***REMOVED***'***REMOVED***
        idx = np.lexsort((b, a***REMOVED******REMOVED***
        expected_idx = np.array([2, 1, 0***REMOVED******REMOVED***
        assert_array_equal(idx, expected_idx***REMOVED***

    def test_object(self***REMOVED***:  # gh-6312
        a = np.random.choice(10, 1000***REMOVED***
        b = np.random.choice(['abc', 'xy', 'wz', 'efghi', 'qwst', 'x'***REMOVED***, 1000***REMOVED***

        for u in a, b:
            left = np.lexsort((u.astype('O'***REMOVED***,***REMOVED******REMOVED***
            right = np.argsort(u, kind='mergesort'***REMOVED***
            assert_array_equal(left, right***REMOVED***

        for u, v in (a, b***REMOVED***, (b, a***REMOVED***:
            idx = np.lexsort((u, v***REMOVED******REMOVED***
            assert_array_equal(idx, np.lexsort((u.astype('O'***REMOVED***, v***REMOVED******REMOVED******REMOVED***
            assert_array_equal(idx, np.lexsort((u, v.astype('O'***REMOVED******REMOVED******REMOVED******REMOVED***
            u, v = np.array(u, dtype='object'***REMOVED***, np.array(v, dtype='object'***REMOVED***
            assert_array_equal(idx, np.lexsort((u, v***REMOVED******REMOVED******REMOVED***

    def test_invalid_axis(self***REMOVED***: # gh-7528
        x = np.linspace(0., 1., 42*3***REMOVED***.reshape(42, 3***REMOVED***
        assert_raises(ValueError, np.lexsort, x, axis=2***REMOVED***

class TestIO(object***REMOVED***:
    ***REMOVED***Test tofile, fromfile, tobytes, and fromstring***REMOVED***

    def setUp(self***REMOVED***:
        shape = (2, 4, 3***REMOVED***
        rand = np.random.random
        self.x = rand(shape***REMOVED*** + rand(shape***REMOVED***.astype(np.complex***REMOVED****1j
        self.x[0,:, 1***REMOVED*** = [np.nan, np.inf, -np.inf, np.nan***REMOVED***
        self.dtype = self.x.dtype
        self.tempdir = tempfile.mkdtemp(***REMOVED***
        self.filename = tempfile.mktemp(dir=self.tempdir***REMOVED***

    def tearDown(self***REMOVED***:
        shutil.rmtree(self.tempdir***REMOVED***

    def test_nofile(self***REMOVED***:
        # this should probably be supported as a file
        # but for now test for proper errors
        b = io.BytesIO(***REMOVED***
        assert_raises(IOError, np.fromfile, b, np.uint8, 80***REMOVED***
        d = np.ones(7***REMOVED***;
        assert_raises(IOError, lambda x: x.tofile(b***REMOVED***, d***REMOVED***

    def test_bool_fromstring(self***REMOVED***:
        v = np.array([True, False, True, False***REMOVED***, dtype=np.bool_***REMOVED***
        y = np.fromstring('1 0 -2.3 0.0', sep=' ', dtype=np.bool_***REMOVED***
        assert_array_equal(v, y***REMOVED***

    def test_uint64_fromstring(self***REMOVED***:
        d = np.fromstring("9923372036854775807 104783749223640",
                          dtype=np.uint64, sep=' '***REMOVED***
        e = np.array([9923372036854775807, 104783749223640***REMOVED***, dtype=np.uint64***REMOVED***
        assert_array_equal(d, e***REMOVED***

    def test_int64_fromstring(self***REMOVED***:
        d = np.fromstring("-25041670086757 104783749223640",
                          dtype=np.int64, sep=' '***REMOVED***
        e = np.array([-25041670086757, 104783749223640***REMOVED***, dtype=np.int64***REMOVED***
        assert_array_equal(d, e***REMOVED***

    def test_empty_files_binary(self***REMOVED***:
        f = open(self.filename, 'w'***REMOVED***
        f.close(***REMOVED***
        y = np.fromfile(self.filename***REMOVED***
        assert_(y.size == 0, "Array not empty"***REMOVED***

    def test_empty_files_text(self***REMOVED***:
        f = open(self.filename, 'w'***REMOVED***
        f.close(***REMOVED***
        y = np.fromfile(self.filename, sep=" "***REMOVED***
        assert_(y.size == 0, "Array not empty"***REMOVED***

    def test_roundtrip_file(self***REMOVED***:
        f = open(self.filename, 'wb'***REMOVED***
        self.x.tofile(f***REMOVED***
        f.close(***REMOVED***
        # NB. doesn't work with flush+seek, due to use of C stdio
        f = open(self.filename, 'rb'***REMOVED***
        y = np.fromfile(f, dtype=self.dtype***REMOVED***
        f.close(***REMOVED***
        assert_array_equal(y, self.x.flat***REMOVED***

    def test_roundtrip_filename(self***REMOVED***:
        self.x.tofile(self.filename***REMOVED***
        y = np.fromfile(self.filename, dtype=self.dtype***REMOVED***
        assert_array_equal(y, self.x.flat***REMOVED***

    def test_roundtrip_binary_str(self***REMOVED***:
        s = self.x.tobytes(***REMOVED***
        y = np.fromstring(s, dtype=self.dtype***REMOVED***
        assert_array_equal(y, self.x.flat***REMOVED***

        s = self.x.tobytes('F'***REMOVED***
        y = np.fromstring(s, dtype=self.dtype***REMOVED***
        assert_array_equal(y, self.x.flatten('F'***REMOVED******REMOVED***

    def test_roundtrip_str(self***REMOVED***:
        x = self.x.real.ravel(***REMOVED***
        s = "@".join(map(str, x***REMOVED******REMOVED***
        y = np.fromstring(s, sep="@"***REMOVED***
        # NB. str imbues less precision
        nan_mask = ~np.isfinite(x***REMOVED***
        assert_array_equal(x[nan_mask***REMOVED***, y[nan_mask***REMOVED******REMOVED***
        assert_array_almost_equal(x[~nan_mask***REMOVED***, y[~nan_mask***REMOVED***, decimal=5***REMOVED***

    def test_roundtrip_repr(self***REMOVED***:
        x = self.x.real.ravel(***REMOVED***
        s = "@".join(map(repr, x***REMOVED******REMOVED***
        y = np.fromstring(s, sep="@"***REMOVED***
        assert_array_equal(x, y***REMOVED***

    def test_unbuffered_fromfile(self***REMOVED***:
        # gh-6246
        self.x.tofile(self.filename***REMOVED***

        def fail(*args, **kwargs***REMOVED***:
            raise io.IOError('Can not tell or seek'***REMOVED***

        f = io.open(self.filename, 'rb', buffering=0***REMOVED***
        f.seek = fail
        f.tell = fail
        y = np.fromfile(self.filename, dtype=self.dtype***REMOVED***
        assert_array_equal(y, self.x.flat***REMOVED***

    def test_largish_file(self***REMOVED***:
        # check the fallocate path on files > 16MB
        d = np.zeros(4 * 1024 ** 2***REMOVED***
        d.tofile(self.filename***REMOVED***
        assert_equal(os.path.getsize(self.filename***REMOVED***, d.nbytes***REMOVED***
        assert_array_equal(d, np.fromfile(self.filename***REMOVED******REMOVED***;
        # check offset
        with open(self.filename, "r+b"***REMOVED*** as f:
            f.seek(d.nbytes***REMOVED***
            d.tofile(f***REMOVED***
            assert_equal(os.path.getsize(self.filename***REMOVED***, d.nbytes * 2***REMOVED***

    def test_file_position_after_fromfile(self***REMOVED***:
        # gh-4118
        sizes = [io.DEFAULT_BUFFER_SIZE//8,
                 io.DEFAULT_BUFFER_SIZE,
                 io.DEFAULT_BUFFER_SIZE*8***REMOVED***

        for size in sizes:
            f = open(self.filename, 'wb'***REMOVED***
            f.seek(size-1***REMOVED***
            f.write(b'\0'***REMOVED***
            f.close(***REMOVED***

            for mode in ['rb', 'r+b'***REMOVED***:
                err_msg = "%d %s" % (size, mode***REMOVED***

                f = open(self.filename, mode***REMOVED***
                f.read(2***REMOVED***
                np.fromfile(f, dtype=np.float64, count=1***REMOVED***
                pos = f.tell(***REMOVED***
                f.close(***REMOVED***
                assert_equal(pos, 10, err_msg=err_msg***REMOVED***

    def test_file_position_after_tofile(self***REMOVED***:
        # gh-4118
        sizes = [io.DEFAULT_BUFFER_SIZE//8,
                 io.DEFAULT_BUFFER_SIZE,
                 io.DEFAULT_BUFFER_SIZE*8***REMOVED***

        for size in sizes:
            err_msg = "%d" % (size,***REMOVED***

            f = open(self.filename, 'wb'***REMOVED***
            f.seek(size-1***REMOVED***
            f.write(b'\0'***REMOVED***
            f.seek(10***REMOVED***
            f.write(b'12'***REMOVED***
            np.array([0***REMOVED***, dtype=np.float64***REMOVED***.tofile(f***REMOVED***
            pos = f.tell(***REMOVED***
            f.close(***REMOVED***
            assert_equal(pos, 10 + 2 + 8, err_msg=err_msg***REMOVED***

            f = open(self.filename, 'r+b'***REMOVED***
            f.read(2***REMOVED***
            f.seek(0, 1***REMOVED***  # seek between read&write required by ANSI C
            np.array([0***REMOVED***, dtype=np.float64***REMOVED***.tofile(f***REMOVED***
            pos = f.tell(***REMOVED***
            f.close(***REMOVED***
            assert_equal(pos, 10, err_msg=err_msg***REMOVED***

    def _check_from(self, s, value, **kw***REMOVED***:
        y = np.fromstring(asbytes(s***REMOVED***, **kw***REMOVED***
        assert_array_equal(y, value***REMOVED***

        f = open(self.filename, 'wb'***REMOVED***
        f.write(asbytes(s***REMOVED******REMOVED***
        f.close(***REMOVED***
        y = np.fromfile(self.filename, **kw***REMOVED***
        assert_array_equal(y, value***REMOVED***

    def test_nan(self***REMOVED***:
        self._check_from(
            "nan +nan -nan NaN nan(foo***REMOVED*** +NaN(BAR***REMOVED*** -NAN(q_u_u_x_***REMOVED***",
            [np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan***REMOVED***,
            sep=' '***REMOVED***

    def test_inf(self***REMOVED***:
        self._check_from(
            "inf +inf -inf infinity -Infinity iNfInItY -inF",
            [np.inf, np.inf, -np.inf, np.inf, -np.inf, np.inf, -np.inf***REMOVED***,
            sep=' '***REMOVED***

    def test_numbers(self***REMOVED***:
        self._check_from("1.234 -1.234 .3 .3e55 -123133.1231e+133",
                         [1.234, -1.234, .3, .3e55, -123133.1231e+133***REMOVED***, sep=' '***REMOVED***

    def test_binary(self***REMOVED***:
        self._check_from('\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@',
                         np.array([1, 2, 3, 4***REMOVED******REMOVED***,
                         dtype='<f4'***REMOVED***

    @dec.slow  # takes > 1 minute on mechanical hard drive
    def test_big_binary(self***REMOVED***:
        ***REMOVED***Test workarounds for 32-bit limited fwrite, fseek, and ftell
        calls in windows. These normally would hang doing something like this.
        See http://projects.scipy.org/numpy/ticket/1660***REMOVED***
        if sys.platform != 'win32':
            return
        ***REMOVED***
            # before workarounds, only up to 2**32-1 worked
            fourgbplus = 2**32 + 2**16
            testbytes = np.arange(8, dtype=np.int8***REMOVED***
            n = len(testbytes***REMOVED***
            flike = tempfile.NamedTemporaryFile(***REMOVED***
            f = flike.file
            np.tile(testbytes, fourgbplus // testbytes.nbytes***REMOVED***.tofile(f***REMOVED***
            flike.seek(0***REMOVED***
            a = np.fromfile(f, dtype=np.int8***REMOVED***
            flike.close(***REMOVED***
            assert_(len(a***REMOVED*** == fourgbplus***REMOVED***
            # check only start and end for speed:
            assert_((a[:n***REMOVED*** == testbytes***REMOVED***.all(***REMOVED******REMOVED***
            assert_((a[-n:***REMOVED*** == testbytes***REMOVED***.all(***REMOVED******REMOVED***
        except (MemoryError, ValueError***REMOVED***:
            pass

    def test_string(self***REMOVED***:
        self._check_from('1,2,3,4', [1., 2., 3., 4.***REMOVED***, sep=','***REMOVED***

    def test_counted_string(self***REMOVED***:
        self._check_from('1,2,3,4', [1., 2., 3., 4.***REMOVED***, count=4, sep=','***REMOVED***
        self._check_from('1,2,3,4', [1., 2., 3.***REMOVED***, count=3, sep=','***REMOVED***
        self._check_from('1,2,3,4', [1., 2., 3., 4.***REMOVED***, count=-1, sep=','***REMOVED***

    def test_string_with_ws(self***REMOVED***:
        self._check_from('1 2  3     4   ', [1, 2, 3, 4***REMOVED***, dtype=int, sep=' '***REMOVED***

    def test_counted_string_with_ws(self***REMOVED***:
        self._check_from('1 2  3     4   ', [1, 2, 3***REMOVED***, count=3, dtype=int,
                         sep=' '***REMOVED***

    def test_ascii(self***REMOVED***:
        self._check_from('1 , 2 , 3 , 4', [1., 2., 3., 4.***REMOVED***, sep=','***REMOVED***
        self._check_from('1,2,3,4', [1., 2., 3., 4.***REMOVED***, dtype=float, sep=','***REMOVED***

    def test_malformed(self***REMOVED***:
        self._check_from('1.234 1,234', [1.234, 1.***REMOVED***, sep=' '***REMOVED***

    def test_long_sep(self***REMOVED***:
        self._check_from('1_x_3_x_4_x_5', [1, 3, 4, 5***REMOVED***, sep='_x_'***REMOVED***

    def test_dtype(self***REMOVED***:
        v = np.array([1, 2, 3, 4***REMOVED***, dtype=np.int_***REMOVED***
        self._check_from('1,2,3,4', v, sep=',', dtype=np.int_***REMOVED***

    def test_dtype_bool(self***REMOVED***:
        # can't use _check_from because fromstring can't handle True/False
        v = np.array([True, False, True, False***REMOVED***, dtype=np.bool_***REMOVED***
        s = '1,0,-2.3,0'
        f = open(self.filename, 'wb'***REMOVED***
        f.write(asbytes(s***REMOVED******REMOVED***
        f.close(***REMOVED***
        y = np.fromfile(self.filename, sep=',', dtype=np.bool_***REMOVED***
        assert_(y.dtype == '?'***REMOVED***
        assert_array_equal(y, v***REMOVED***

    def test_tofile_sep(self***REMOVED***:
        x = np.array([1.51, 2, 3.51, 4***REMOVED***, dtype=float***REMOVED***
        f = open(self.filename, 'w'***REMOVED***
        x.tofile(f, sep=','***REMOVED***
        f.close(***REMOVED***
        f = open(self.filename, 'r'***REMOVED***
        s = f.read(***REMOVED***
        f.close(***REMOVED***
        #assert_equal(s, '1.51,2.0,3.51,4.0'***REMOVED***
        y = np.array([float(p***REMOVED*** for p in s.split(','***REMOVED******REMOVED******REMOVED***
        assert_array_equal(x,y***REMOVED***

    def test_tofile_format(self***REMOVED***:
        x = np.array([1.51, 2, 3.51, 4***REMOVED***, dtype=float***REMOVED***
        f = open(self.filename, 'w'***REMOVED***
        x.tofile(f, sep=',', format='%.2f'***REMOVED***
        f.close(***REMOVED***
        f = open(self.filename, 'r'***REMOVED***
        s = f.read(***REMOVED***
        f.close(***REMOVED***
        assert_equal(s, '1.51,2.00,3.51,4.00'***REMOVED***

    def test_locale(self***REMOVED***:
        in_foreign_locale(self.test_numbers***REMOVED***(***REMOVED***
        in_foreign_locale(self.test_nan***REMOVED***(***REMOVED***
        in_foreign_locale(self.test_inf***REMOVED***(***REMOVED***
        in_foreign_locale(self.test_counted_string***REMOVED***(***REMOVED***
        in_foreign_locale(self.test_ascii***REMOVED***(***REMOVED***
        in_foreign_locale(self.test_malformed***REMOVED***(***REMOVED***
        in_foreign_locale(self.test_tofile_sep***REMOVED***(***REMOVED***
        in_foreign_locale(self.test_tofile_format***REMOVED***(***REMOVED***


class TestFromBuffer(object***REMOVED***:
    def tst_basic(self, buffer, expected, kwargs***REMOVED***:
        assert_array_equal(np.frombuffer(buffer,**kwargs***REMOVED***, expected***REMOVED***

    def test_ip_basic(self***REMOVED***:
        for byteorder in ['<', '>'***REMOVED***:
            for dtype in [float, int, np.complex***REMOVED***:
                dt = np.dtype(dtype***REMOVED***.newbyteorder(byteorder***REMOVED***
                x = (np.random.random((4, 7***REMOVED******REMOVED****5***REMOVED***.astype(dt***REMOVED***
                buf = x.tobytes(***REMOVED***
                yield self.tst_basic, buf, x.flat, {'dtype':dt***REMOVED***

    def test_empty(self***REMOVED***:
        yield self.tst_basic, asbytes(''***REMOVED***, np.array([***REMOVED******REMOVED***, {***REMOVED***


class TestFlat(TestCase***REMOVED***:
    def setUp(self***REMOVED***:
        a0 = np.arange(20.0***REMOVED***
        a = a0.reshape(4, 5***REMOVED***
        a0.shape = (4, 5***REMOVED***
        a.flags.writeable = False
        self.a = a
        self.b = a[::2, ::2***REMOVED***
        self.a0 = a0
        self.b0 = a0[::2, ::2***REMOVED***

    def test_contiguous(self***REMOVED***:
        testpassed = False
        ***REMOVED***
            self.a.flat[12***REMOVED*** = 100.0
        except ValueError:
            testpassed = True
        assert_(testpassed***REMOVED***
        assert_(self.a.flat[12***REMOVED*** == 12.0***REMOVED***

    def test_discontiguous(self***REMOVED***:
        testpassed = False
        ***REMOVED***
            self.b.flat[4***REMOVED*** = 100.0
        except ValueError:
            testpassed = True
        assert_(testpassed***REMOVED***
        assert_(self.b.flat[4***REMOVED*** == 12.0***REMOVED***

    def test___array__(self***REMOVED***:
        c = self.a.flat.__array__(***REMOVED***
        d = self.b.flat.__array__(***REMOVED***
        e = self.a0.flat.__array__(***REMOVED***
        f = self.b0.flat.__array__(***REMOVED***

        assert_(c.flags.writeable is False***REMOVED***
        assert_(d.flags.writeable is False***REMOVED***
        assert_(e.flags.writeable is True***REMOVED***
        assert_(f.flags.writeable is True***REMOVED***

        assert_(c.flags.updateifcopy is False***REMOVED***
        assert_(d.flags.updateifcopy is False***REMOVED***
        assert_(e.flags.updateifcopy is False***REMOVED***
        assert_(f.flags.updateifcopy is True***REMOVED***
        assert_(f.base is self.b0***REMOVED***


class TestResize(TestCase***REMOVED***:
    def test_basic(self***REMOVED***:
        x = np.array([[1, 0, 0***REMOVED***, [0, 1, 0***REMOVED***, [0, 0, 1***REMOVED******REMOVED******REMOVED***
        x.resize((5, 5***REMOVED******REMOVED***
        assert_array_equal(x.flat[:9***REMOVED***,
                np.array([[1, 0, 0***REMOVED***, [0, 1, 0***REMOVED***, [0, 0, 1***REMOVED******REMOVED******REMOVED***.flat***REMOVED***
        assert_array_equal(x[9:***REMOVED***.flat, 0***REMOVED***

    def test_check_reference(self***REMOVED***:
        x = np.array([[1, 0, 0***REMOVED***, [0, 1, 0***REMOVED***, [0, 0, 1***REMOVED******REMOVED******REMOVED***
        y = x
        self.assertRaises(ValueError, x.resize, (5, 1***REMOVED******REMOVED***
        del y  # avoid pyflakes unused variable warning.

    def test_int_shape(self***REMOVED***:
        x = np.eye(3***REMOVED***
        x.resize(3***REMOVED***
        assert_array_equal(x, np.eye(3***REMOVED***[0,:***REMOVED******REMOVED***

    def test_none_shape(self***REMOVED***:
        x = np.eye(3***REMOVED***
        x.resize(None***REMOVED***
        assert_array_equal(x, np.eye(3***REMOVED******REMOVED***
        x.resize(***REMOVED***
        assert_array_equal(x, np.eye(3***REMOVED******REMOVED***

    def test_invalid_arguements(self***REMOVED***:
        self.assertRaises(TypeError, np.eye(3***REMOVED***.resize, 'hi'***REMOVED***
        self.assertRaises(ValueError, np.eye(3***REMOVED***.resize, -1***REMOVED***
        self.assertRaises(TypeError, np.eye(3***REMOVED***.resize, order=1***REMOVED***
        self.assertRaises(TypeError, np.eye(3***REMOVED***.resize, refcheck='hi'***REMOVED***

    def test_freeform_shape(self***REMOVED***:
        x = np.eye(3***REMOVED***
        x.resize(3, 2, 1***REMOVED***
        assert_(x.shape == (3, 2, 1***REMOVED******REMOVED***

    def test_zeros_appended(self***REMOVED***:
        x = np.eye(3***REMOVED***
        x.resize(2, 3, 3***REMOVED***
        assert_array_equal(x[0***REMOVED***, np.eye(3***REMOVED******REMOVED***
        assert_array_equal(x[1***REMOVED***, np.zeros((3, 3***REMOVED******REMOVED******REMOVED***

    def test_obj_obj(self***REMOVED***:
        # check memory is initialized on resize, gh-4857
        a = np.ones(10, dtype=[('k', object, 2***REMOVED******REMOVED******REMOVED***
        a.resize(15,***REMOVED***
        assert_equal(a.shape, (15,***REMOVED******REMOVED***
        assert_array_equal(a['k'***REMOVED***[-5:***REMOVED***, 0***REMOVED***
        assert_array_equal(a['k'***REMOVED***[:-5***REMOVED***, 1***REMOVED***


class TestRecord(TestCase***REMOVED***:
    def test_field_rename(self***REMOVED***:
        dt = np.dtype([('f', float***REMOVED***, ('i', int***REMOVED******REMOVED******REMOVED***
        dt.names = ['p', 'q'***REMOVED***
        assert_equal(dt.names, ['p', 'q'***REMOVED******REMOVED***

    def test_multiple_field_name_occurrence(self***REMOVED***:
        def test_assign(***REMOVED***:
            dtype = np.dtype([("A", "f8"***REMOVED***, ("B", "f8"***REMOVED***, ("A", "f8"***REMOVED******REMOVED******REMOVED***

        # Error raised when multiple fields have the same name
        assert_raises(ValueError, test_assign***REMOVED***

    if sys.version_info[0***REMOVED*** >= 3:
        def test_bytes_fields(self***REMOVED***:
            # Bytes are not allowed in field names and not recognized in titles
            # on Py3
            assert_raises(TypeError, np.dtype, [(asbytes('a'***REMOVED***, int***REMOVED******REMOVED******REMOVED***
            assert_raises(TypeError, np.dtype, [(('b', asbytes('a'***REMOVED******REMOVED***, int***REMOVED******REMOVED******REMOVED***

            dt = np.dtype([((asbytes('a'***REMOVED***, 'b'***REMOVED***, int***REMOVED******REMOVED******REMOVED***
            assert_raises(ValueError, dt.__getitem__, asbytes('a'***REMOVED******REMOVED***

            x = np.array([(1,***REMOVED***, (2,***REMOVED***, (3,***REMOVED******REMOVED***, dtype=dt***REMOVED***
            assert_raises(IndexError, x.__getitem__, asbytes('a'***REMOVED******REMOVED***

            y = x[0***REMOVED***
            assert_raises(IndexError, y.__getitem__, asbytes('a'***REMOVED******REMOVED***

        def test_multiple_field_name_unicode(self***REMOVED***:
            def test_assign_unicode(***REMOVED***:
                dt = np.dtype([("\u20B9", "f8"***REMOVED***,
                               ("B", "f8"***REMOVED***,
                               ("\u20B9", "f8"***REMOVED******REMOVED******REMOVED***

            # Error raised when multiple fields have the same name(unicode included***REMOVED***
            assert_raises(ValueError, test_assign_unicode***REMOVED***

    else:
        def test_unicode_field_titles(self***REMOVED***:
            # Unicode field titles are added to field dict on Py2
            title = unicode('b'***REMOVED***
            dt = np.dtype([((title, 'a'***REMOVED***, int***REMOVED******REMOVED******REMOVED***
            dt[title***REMOVED***
            dt['a'***REMOVED***
            x = np.array([(1,***REMOVED***, (2,***REMOVED***, (3,***REMOVED******REMOVED***, dtype=dt***REMOVED***
            x[title***REMOVED***
            x['a'***REMOVED***
            y = x[0***REMOVED***
            y[title***REMOVED***
            y['a'***REMOVED***

        def test_unicode_field_names(self***REMOVED***:
            # Unicode field names are not allowed on Py2
            title = unicode('b'***REMOVED***
            assert_raises(TypeError, np.dtype, [(title, int***REMOVED******REMOVED******REMOVED***
            assert_raises(TypeError, np.dtype, [(('a', title***REMOVED***, int***REMOVED******REMOVED******REMOVED***

    def test_field_names(self***REMOVED***:
        # Test unicode and 8-bit / byte strings can be used
        a = np.zeros((1,***REMOVED***, dtype=[('f1', 'i4'***REMOVED***,
                                  ('f2', 'i4'***REMOVED***,
                                  ('f3', [('sf1', 'i4'***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        is_py3 = sys.version_info[0***REMOVED*** >= 3
        if is_py3:
            funcs = (str,***REMOVED***
            # byte string indexing fails gracefully
            assert_raises(IndexError, a.__setitem__, asbytes('f1'***REMOVED***, 1***REMOVED***
            assert_raises(IndexError, a.__getitem__, asbytes('f1'***REMOVED******REMOVED***
            assert_raises(IndexError, a['f1'***REMOVED***.__setitem__, asbytes('sf1'***REMOVED***, 1***REMOVED***
            assert_raises(IndexError, a['f1'***REMOVED***.__getitem__, asbytes('sf1'***REMOVED******REMOVED***
        else:
            funcs = (str, unicode***REMOVED***
        for func in funcs:
            b = a.copy(***REMOVED***
            fn1 = func('f1'***REMOVED***
            b[fn1***REMOVED*** = 1
            assert_equal(b[fn1***REMOVED***, 1***REMOVED***
            fnn = func('not at all'***REMOVED***
            assert_raises(ValueError, b.__setitem__, fnn, 1***REMOVED***
            assert_raises(ValueError, b.__getitem__, fnn***REMOVED***
            b[0***REMOVED***[fn1***REMOVED*** = 2
            assert_equal(b[fn1***REMOVED***, 2***REMOVED***
            # Subfield
            assert_raises(ValueError, b[0***REMOVED***.__setitem__, fnn, 1***REMOVED***
            assert_raises(ValueError, b[0***REMOVED***.__getitem__, fnn***REMOVED***
            # Subfield
            fn3 = func('f3'***REMOVED***
            sfn1 = func('sf1'***REMOVED***
            b[fn3***REMOVED***[sfn1***REMOVED*** = 1
            assert_equal(b[fn3***REMOVED***[sfn1***REMOVED***, 1***REMOVED***
            assert_raises(ValueError, b[fn3***REMOVED***.__setitem__, fnn, 1***REMOVED***
            assert_raises(ValueError, b[fn3***REMOVED***.__getitem__, fnn***REMOVED***
            # multiple subfields
            fn2 = func('f2'***REMOVED***
            b[fn2***REMOVED*** = 3
            assert_equal(b[['f1', 'f2'***REMOVED******REMOVED***[0***REMOVED***.tolist(***REMOVED***, (2, 3***REMOVED******REMOVED***
            assert_equal(b[['f2', 'f1'***REMOVED******REMOVED***[0***REMOVED***.tolist(***REMOVED***, (3, 2***REMOVED******REMOVED***
            assert_equal(b[['f1', 'f3'***REMOVED******REMOVED***[0***REMOVED***.tolist(***REMOVED***, (2, (1,***REMOVED******REMOVED******REMOVED***
            # view of subfield view/copy
            assert_equal(b[['f1', 'f2'***REMOVED******REMOVED***[0***REMOVED***.view(('i4', 2***REMOVED******REMOVED***.tolist(***REMOVED***, (2, 3***REMOVED******REMOVED***
            assert_equal(b[['f2', 'f1'***REMOVED******REMOVED***[0***REMOVED***.view(('i4', 2***REMOVED******REMOVED***.tolist(***REMOVED***, (3, 2***REMOVED******REMOVED***
            view_dtype = [('f1', 'i4'***REMOVED***, ('f3', [('', 'i4'***REMOVED******REMOVED******REMOVED******REMOVED***
            assert_equal(b[['f1', 'f3'***REMOVED******REMOVED***[0***REMOVED***.view(view_dtype***REMOVED***.tolist(***REMOVED***, (2, (1,***REMOVED******REMOVED******REMOVED***
        # non-ascii unicode field indexing is well behaved
        if not is_py3:
            raise SkipTest('non ascii unicode field indexing skipped; '
                           'raises segfault on python 2.x'***REMOVED***
        else:
            assert_raises(ValueError, a.__setitem__, sixu('\u03e0'***REMOVED***, 1***REMOVED***
            assert_raises(ValueError, a.__getitem__, sixu('\u03e0'***REMOVED******REMOVED***

    def test_field_names_deprecation(self***REMOVED***:

        def collect_warnings(f, *args, **kwargs***REMOVED***:
            with warnings.catch_warnings(record=True***REMOVED*** as log:
                warnings.simplefilter("always"***REMOVED***
                f(*args, **kwargs***REMOVED***
            return [w.category for w in log***REMOVED***

        a = np.zeros((1,***REMOVED***, dtype=[('f1', 'i4'***REMOVED***,
                                  ('f2', 'i4'***REMOVED***,
                                  ('f3', [('sf1', 'i4'***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        a['f1'***REMOVED***[0***REMOVED*** = 1
        a['f2'***REMOVED***[0***REMOVED*** = 2
        a['f3'***REMOVED***[0***REMOVED*** = (3,***REMOVED***
        b = np.zeros((1,***REMOVED***, dtype=[('f1', 'i4'***REMOVED***,
                                  ('f2', 'i4'***REMOVED***,
                                  ('f3', [('sf1', 'i4'***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        b['f1'***REMOVED***[0***REMOVED*** = 1
        b['f2'***REMOVED***[0***REMOVED*** = 2
        b['f3'***REMOVED***[0***REMOVED*** = (3,***REMOVED***

        # All the different functions raise a warning, but not an error, and
        # 'a' is not modified:
        assert_equal(collect_warnings(a[['f1', 'f2'***REMOVED******REMOVED***.__setitem__, 0, (10, 20***REMOVED******REMOVED***,
                     [FutureWarning***REMOVED******REMOVED***
        assert_equal(a, b***REMOVED***
        # Views also warn
        subset = a[['f1', 'f2'***REMOVED******REMOVED***
        subset_view = subset.view(***REMOVED***
        assert_equal(collect_warnings(subset_view['f1'***REMOVED***.__setitem__, 0, 10***REMOVED***,
                     [FutureWarning***REMOVED******REMOVED***
        # But the write goes through:
        assert_equal(subset['f1'***REMOVED***[0***REMOVED***, 10***REMOVED***
        # Only one warning per multiple field indexing, though (even if there
        # are multiple views involved***REMOVED***:
        assert_equal(collect_warnings(subset['f1'***REMOVED***.__setitem__, 0, 10***REMOVED***, [***REMOVED******REMOVED***

    def test_record_hash(self***REMOVED***:
        a = np.array([(1, 2***REMOVED***, (1, 2***REMOVED******REMOVED***, dtype='i1,i2'***REMOVED***
        a.flags.writeable = False
        b = np.array([(1, 2***REMOVED***, (3, 4***REMOVED******REMOVED***, dtype=[('num1', 'i1'***REMOVED***, ('num2', 'i2'***REMOVED******REMOVED******REMOVED***
        b.flags.writeable = False
        c = np.array([(1, 2***REMOVED***, (3, 4***REMOVED******REMOVED***, dtype='i1,i2'***REMOVED***
        c.flags.writeable = False
        self.assertTrue(hash(a[0***REMOVED******REMOVED*** == hash(a[1***REMOVED******REMOVED******REMOVED***
        self.assertTrue(hash(a[0***REMOVED******REMOVED*** == hash(b[0***REMOVED******REMOVED******REMOVED***
        self.assertTrue(hash(a[0***REMOVED******REMOVED*** != hash(b[1***REMOVED******REMOVED******REMOVED***
        self.assertTrue(hash(c[0***REMOVED******REMOVED*** == hash(a[0***REMOVED******REMOVED*** and c[0***REMOVED*** == a[0***REMOVED******REMOVED***

    def test_record_no_hash(self***REMOVED***:
        a = np.array([(1, 2***REMOVED***, (1, 2***REMOVED******REMOVED***, dtype='i1,i2'***REMOVED***
        self.assertRaises(TypeError, hash, a[0***REMOVED******REMOVED***

    def test_empty_structure_creation(self***REMOVED***:
        # make sure these do not raise errors (gh-5631***REMOVED***
        np.array([(***REMOVED******REMOVED***, dtype={'names': [***REMOVED***, 'formats': [***REMOVED***,
                           'offsets': [***REMOVED***, 'itemsize': 12***REMOVED******REMOVED***
        np.array([(***REMOVED***, (***REMOVED***, (***REMOVED***, (***REMOVED***, (***REMOVED******REMOVED***, dtype={'names': [***REMOVED***, 'formats': [***REMOVED***,
                                           'offsets': [***REMOVED***, 'itemsize': 12***REMOVED******REMOVED***

class TestView(TestCase***REMOVED***:
    def test_basic(self***REMOVED***:
        x = np.array([(1, 2, 3, 4***REMOVED***, (5, 6, 7, 8***REMOVED******REMOVED***,
                     dtype=[('r', np.int8***REMOVED***, ('g', np.int8***REMOVED***,
                            ('b', np.int8***REMOVED***, ('a', np.int8***REMOVED******REMOVED******REMOVED***
        # We must be specific about the endianness here:
        y = x.view(dtype='<i4'***REMOVED***
        # ... and again without the keyword.
        z = x.view('<i4'***REMOVED***
        assert_array_equal(y, z***REMOVED***
        assert_array_equal(y, [67305985, 134678021***REMOVED******REMOVED***


def _mean(a, **args***REMOVED***:
    return a.mean(**args***REMOVED***


def _var(a, **args***REMOVED***:
    return a.var(**args***REMOVED***


def _std(a, **args***REMOVED***:
    return a.std(**args***REMOVED***


class TestStats(TestCase***REMOVED***:

    funcs = [_mean, _var, _std***REMOVED***

    def setUp(self***REMOVED***:
        np.random.seed(range(3***REMOVED******REMOVED***
        self.rmat = np.random.random((4, 5***REMOVED******REMOVED***
        self.cmat = self.rmat + 1j * self.rmat
        self.omat = np.array([Decimal(repr(r***REMOVED******REMOVED*** for r in self.rmat.flat***REMOVED******REMOVED***
        self.omat = self.omat.reshape(4, 5***REMOVED***

    def test_keepdims(self***REMOVED***:
        mat = np.eye(3***REMOVED***
        for f in self.funcs:
            for axis in [0, 1***REMOVED***:
                res = f(mat, axis=axis, keepdims=True***REMOVED***
                assert_(res.ndim == mat.ndim***REMOVED***
                assert_(res.shape[axis***REMOVED*** == 1***REMOVED***
            for axis in [None***REMOVED***:
                res = f(mat, axis=axis, keepdims=True***REMOVED***
                assert_(res.shape == (1, 1***REMOVED******REMOVED***

    def test_out(self***REMOVED***:
        mat = np.eye(3***REMOVED***
        for f in self.funcs:
            out = np.zeros(3***REMOVED***
            tgt = f(mat, axis=1***REMOVED***
            res = f(mat, axis=1, out=out***REMOVED***
            assert_almost_equal(res, out***REMOVED***
            assert_almost_equal(res, tgt***REMOVED***
        out = np.empty(2***REMOVED***
        assert_raises(ValueError, f, mat, axis=1, out=out***REMOVED***
        out = np.empty((2, 2***REMOVED******REMOVED***
        assert_raises(ValueError, f, mat, axis=1, out=out***REMOVED***

    def test_dtype_from_input(self***REMOVED***:

        icodes = np.typecodes['AllInteger'***REMOVED***
        fcodes = np.typecodes['AllFloat'***REMOVED***

        # object type
        for f in self.funcs:
            mat = np.array([[Decimal(1***REMOVED******REMOVED****3***REMOVED****3***REMOVED***
            tgt = mat.dtype.type
            res = f(mat, axis=1***REMOVED***.dtype.type
            assert_(res is tgt***REMOVED***
            # scalar case
            res = type(f(mat, axis=None***REMOVED******REMOVED***
            assert_(res is Decimal***REMOVED***

        # integer types
        for f in self.funcs:
            for c in icodes:
                mat = np.eye(3, dtype=c***REMOVED***
                tgt = np.float64
                res = f(mat, axis=1***REMOVED***.dtype.type
                assert_(res is tgt***REMOVED***
                # scalar case
                res = f(mat, axis=None***REMOVED***.dtype.type
                assert_(res is tgt***REMOVED***

        # mean for float types
        for f in [_mean***REMOVED***:
            for c in fcodes:
                mat = np.eye(3, dtype=c***REMOVED***
                tgt = mat.dtype.type
                res = f(mat, axis=1***REMOVED***.dtype.type
                assert_(res is tgt***REMOVED***
                # scalar case
                res = f(mat, axis=None***REMOVED***.dtype.type
                assert_(res is tgt***REMOVED***

        # var, std for float types
        for f in [_var, _std***REMOVED***:
            for c in fcodes:
                mat = np.eye(3, dtype=c***REMOVED***
                # deal with complex types
                tgt = mat.real.dtype.type
                res = f(mat, axis=1***REMOVED***.dtype.type
                assert_(res is tgt***REMOVED***
                # scalar case
                res = f(mat, axis=None***REMOVED***.dtype.type
                assert_(res is tgt***REMOVED***

    def test_dtype_from_dtype(self***REMOVED***:
        mat = np.eye(3***REMOVED***

        # stats for integer types
        # FIXME:
        # this needs definition as there are lots places along the line
        # where type casting may take place.

        # for f in self.funcs:
        #    for c in np.typecodes['AllInteger'***REMOVED***:
        #        tgt = np.dtype(c***REMOVED***.type
        #        res = f(mat, axis=1, dtype=c***REMOVED***.dtype.type
        #        assert_(res is tgt***REMOVED***
        #        # scalar case
        #        res = f(mat, axis=None, dtype=c***REMOVED***.dtype.type
        #        assert_(res is tgt***REMOVED***

        # stats for float types
        for f in self.funcs:
            for c in np.typecodes['AllFloat'***REMOVED***:
                tgt = np.dtype(c***REMOVED***.type
                res = f(mat, axis=1, dtype=c***REMOVED***.dtype.type
                assert_(res is tgt***REMOVED***
                # scalar case
                res = f(mat, axis=None, dtype=c***REMOVED***.dtype.type
                assert_(res is tgt***REMOVED***

    def test_ddof(self***REMOVED***:
        for f in [_var***REMOVED***:
            for ddof in range(3***REMOVED***:
                dim = self.rmat.shape[1***REMOVED***
                tgt = f(self.rmat, axis=1***REMOVED*** * dim
                res = f(self.rmat, axis=1, ddof=ddof***REMOVED*** * (dim - ddof***REMOVED***
        for f in [_std***REMOVED***:
            for ddof in range(3***REMOVED***:
                dim = self.rmat.shape[1***REMOVED***
                tgt = f(self.rmat, axis=1***REMOVED*** * np.sqrt(dim***REMOVED***
                res = f(self.rmat, axis=1, ddof=ddof***REMOVED*** * np.sqrt(dim - ddof***REMOVED***
                assert_almost_equal(res, tgt***REMOVED***
                assert_almost_equal(res, tgt***REMOVED***

    def test_ddof_too_big(self***REMOVED***:
        dim = self.rmat.shape[1***REMOVED***
        for f in [_var, _std***REMOVED***:
            for ddof in range(dim, dim + 2***REMOVED***:
                with warnings.catch_warnings(record=True***REMOVED*** as w:
                    warnings.simplefilter('always'***REMOVED***
                    res = f(self.rmat, axis=1, ddof=ddof***REMOVED***
                    assert_(not (res < 0***REMOVED***.any(***REMOVED******REMOVED***
                    assert_(len(w***REMOVED*** > 0***REMOVED***
                    assert_(issubclass(w[0***REMOVED***.category, RuntimeWarning***REMOVED******REMOVED***

    def test_empty(self***REMOVED***:
        A = np.zeros((0, 3***REMOVED******REMOVED***
        for f in self.funcs:
            for axis in [0, None***REMOVED***:
                with warnings.catch_warnings(record=True***REMOVED*** as w:
                    warnings.simplefilter('always'***REMOVED***
                    assert_(np.isnan(f(A, axis=axis***REMOVED******REMOVED***.all(***REMOVED******REMOVED***
                    assert_(len(w***REMOVED*** > 0***REMOVED***
                    assert_(issubclass(w[0***REMOVED***.category, RuntimeWarning***REMOVED******REMOVED***
            for axis in [1***REMOVED***:
                with warnings.catch_warnings(record=True***REMOVED*** as w:
                    warnings.simplefilter('always'***REMOVED***
                    assert_equal(f(A, axis=axis***REMOVED***, np.zeros([***REMOVED******REMOVED******REMOVED***

    def test_mean_values(self***REMOVED***:
        for mat in [self.rmat, self.cmat, self.omat***REMOVED***:
            for axis in [0, 1***REMOVED***:
                tgt = mat.sum(axis=axis***REMOVED***
                res = _mean(mat, axis=axis***REMOVED*** * mat.shape[axis***REMOVED***
                assert_almost_equal(res, tgt***REMOVED***
            for axis in [None***REMOVED***:
                tgt = mat.sum(axis=axis***REMOVED***
                res = _mean(mat, axis=axis***REMOVED*** * np.prod(mat.shape***REMOVED***
                assert_almost_equal(res, tgt***REMOVED***

    def test_var_values(self***REMOVED***:
        for mat in [self.rmat, self.cmat, self.omat***REMOVED***:
            for axis in [0, 1, None***REMOVED***:
                msqr = _mean(mat * mat.conj(***REMOVED***, axis=axis***REMOVED***
                mean = _mean(mat, axis=axis***REMOVED***
                tgt = msqr - mean * mean.conjugate(***REMOVED***
                res = _var(mat, axis=axis***REMOVED***
                assert_almost_equal(res, tgt***REMOVED***

    def test_std_values(self***REMOVED***:
        for mat in [self.rmat, self.cmat, self.omat***REMOVED***:
            for axis in [0, 1, None***REMOVED***:
                tgt = np.sqrt(_var(mat, axis=axis***REMOVED******REMOVED***
                res = _std(mat, axis=axis***REMOVED***
                assert_almost_equal(res, tgt***REMOVED***

    def test_subclass(self***REMOVED***:
        class TestArray(np.ndarray***REMOVED***:
            def __new__(cls, data, info***REMOVED***:
                result = np.array(data***REMOVED***
                result = result.view(cls***REMOVED***
                result.info = info
                return result

            def __array_finalize__(self, obj***REMOVED***:
                self.info = getattr(obj, "info", ''***REMOVED***

        dat = TestArray([[1, 2, 3, 4***REMOVED***, [5, 6, 7, 8***REMOVED******REMOVED***, 'jubba'***REMOVED***
        res = dat.mean(1***REMOVED***
        assert_(res.info == dat.info***REMOVED***
        res = dat.std(1***REMOVED***
        assert_(res.info == dat.info***REMOVED***
        res = dat.var(1***REMOVED***
        assert_(res.info == dat.info***REMOVED***

class TestVdot(TestCase***REMOVED***:
    def test_basic(self***REMOVED***:
        dt_numeric = np.typecodes['AllFloat'***REMOVED*** + np.typecodes['AllInteger'***REMOVED***
        dt_complex = np.typecodes['Complex'***REMOVED***

        # test real
        a = np.eye(3***REMOVED***
        for dt in dt_numeric + 'O':
            b = a.astype(dt***REMOVED***
            res = np.vdot(b, b***REMOVED***
            assert_(np.isscalar(res***REMOVED******REMOVED***
            assert_equal(np.vdot(b, b***REMOVED***, 3***REMOVED***

        # test complex
        a = np.eye(3***REMOVED*** * 1j
        for dt in dt_complex + 'O':
            b = a.astype(dt***REMOVED***
            res = np.vdot(b, b***REMOVED***
            assert_(np.isscalar(res***REMOVED******REMOVED***
            assert_equal(np.vdot(b, b***REMOVED***, 3***REMOVED***

        # test boolean
        b = np.eye(3, dtype=np.bool***REMOVED***
        res = np.vdot(b, b***REMOVED***
        assert_(np.isscalar(res***REMOVED******REMOVED***
        assert_equal(np.vdot(b, b***REMOVED***, True***REMOVED***

    def test_vdot_array_order(self***REMOVED***:
        a = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED***, order='C'***REMOVED***
        b = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED***, order='F'***REMOVED***
        res = np.vdot(a, a***REMOVED***

        # integer arrays are exact
        assert_equal(np.vdot(a, b***REMOVED***, res***REMOVED***
        assert_equal(np.vdot(b, a***REMOVED***, res***REMOVED***
        assert_equal(np.vdot(b, b***REMOVED***, res***REMOVED***

    def test_vdot_uncontiguous(self***REMOVED***:
        for size in [2, 1000***REMOVED***:
            # Different sizes match different branches in vdot.
            a = np.zeros((size, 2, 2***REMOVED******REMOVED***
            b = np.zeros((size, 2, 2***REMOVED******REMOVED***
            a[:, 0, 0***REMOVED*** = np.arange(size***REMOVED***
            b[:, 0, 0***REMOVED*** = np.arange(size***REMOVED*** + 1
            # Make a and b uncontiguous:
            a = a[..., 0***REMOVED***
            b = b[..., 0***REMOVED***

            assert_equal(np.vdot(a, b***REMOVED***,
                         np.vdot(a.flatten(***REMOVED***, b.flatten(***REMOVED******REMOVED******REMOVED***
            assert_equal(np.vdot(a, b.copy(***REMOVED******REMOVED***,
                         np.vdot(a.flatten(***REMOVED***, b.flatten(***REMOVED******REMOVED******REMOVED***
            assert_equal(np.vdot(a.copy(***REMOVED***, b***REMOVED***,
                         np.vdot(a.flatten(***REMOVED***, b.flatten(***REMOVED******REMOVED******REMOVED***
            assert_equal(np.vdot(a.copy('F'***REMOVED***, b***REMOVED***,
                         np.vdot(a.flatten(***REMOVED***, b.flatten(***REMOVED******REMOVED******REMOVED***
            assert_equal(np.vdot(a, b.copy('F'***REMOVED******REMOVED***,
                         np.vdot(a.flatten(***REMOVED***, b.flatten(***REMOVED******REMOVED******REMOVED***


class TestDot(TestCase***REMOVED***:
    def setUp(self***REMOVED***:
        np.random.seed(128***REMOVED***
        self.A = np.random.rand(4, 2***REMOVED***
        self.b1 = np.random.rand(2, 1***REMOVED***
        self.b2 = np.random.rand(2***REMOVED***
        self.b3 = np.random.rand(1, 2***REMOVED***
        self.b4 = np.random.rand(4***REMOVED***
        self.N = 7

    def test_dotmatmat(self***REMOVED***:
        A = self.A
        res = np.dot(A.transpose(***REMOVED***, A***REMOVED***
        tgt = np.array([[1.45046013, 0.86323640***REMOVED***,
                        [0.86323640, 0.84934569***REMOVED******REMOVED******REMOVED***
        assert_almost_equal(res, tgt, decimal=self.N***REMOVED***

    def test_dotmatvec(self***REMOVED***:
        A, b1 = self.A, self.b1
        res = np.dot(A, b1***REMOVED***
        tgt = np.array([[0.32114320***REMOVED***, [0.04889721***REMOVED***,
                        [0.15696029***REMOVED***, [0.33612621***REMOVED******REMOVED******REMOVED***
        assert_almost_equal(res, tgt, decimal=self.N***REMOVED***

    def test_dotmatvec2(self***REMOVED***:
        A, b2 = self.A, self.b2
        res = np.dot(A, b2***REMOVED***
        tgt = np.array([0.29677940, 0.04518649, 0.14468333, 0.31039293***REMOVED******REMOVED***
        assert_almost_equal(res, tgt, decimal=self.N***REMOVED***

    def test_dotvecmat(self***REMOVED***:
        A, b4 = self.A, self.b4
        res = np.dot(b4, A***REMOVED***
        tgt = np.array([1.23495091, 1.12222648***REMOVED******REMOVED***
        assert_almost_equal(res, tgt, decimal=self.N***REMOVED***

    def test_dotvecmat2(self***REMOVED***:
        b3, A = self.b3, self.A
        res = np.dot(b3, A.transpose(***REMOVED******REMOVED***
        tgt = np.array([[0.58793804, 0.08957460, 0.30605758, 0.62716383***REMOVED******REMOVED******REMOVED***
        assert_almost_equal(res, tgt, decimal=self.N***REMOVED***

    def test_dotvecmat3(self***REMOVED***:
        A, b4 = self.A, self.b4
        res = np.dot(A.transpose(***REMOVED***, b4***REMOVED***
        tgt = np.array([1.23495091, 1.12222648***REMOVED******REMOVED***
        assert_almost_equal(res, tgt, decimal=self.N***REMOVED***

    def test_dotvecvecouter(self***REMOVED***:
        b1, b3 = self.b1, self.b3
        res = np.dot(b1, b3***REMOVED***
        tgt = np.array([[0.20128610, 0.08400440***REMOVED***, [0.07190947, 0.03001058***REMOVED******REMOVED******REMOVED***
        assert_almost_equal(res, tgt, decimal=self.N***REMOVED***

    def test_dotvecvecinner(self***REMOVED***:
        b1, b3 = self.b1, self.b3
        res = np.dot(b3, b1***REMOVED***
        tgt = np.array([[ 0.23129668***REMOVED******REMOVED******REMOVED***
        assert_almost_equal(res, tgt, decimal=self.N***REMOVED***

    def test_dotcolumnvect1(self***REMOVED***:
        b1 = np.ones((3, 1***REMOVED******REMOVED***
        b2 = [5.3***REMOVED***
        res = np.dot(b1, b2***REMOVED***
        tgt = np.array([5.3, 5.3, 5.3***REMOVED******REMOVED***
        assert_almost_equal(res, tgt, decimal=self.N***REMOVED***

    def test_dotcolumnvect2(self***REMOVED***:
        b1 = np.ones((3, 1***REMOVED******REMOVED***.transpose(***REMOVED***
        b2 = [6.2***REMOVED***
        res = np.dot(b2, b1***REMOVED***
        tgt = np.array([6.2, 6.2, 6.2***REMOVED******REMOVED***
        assert_almost_equal(res, tgt, decimal=self.N***REMOVED***

    def test_dotvecscalar(self***REMOVED***:
        np.random.seed(100***REMOVED***
        b1 = np.random.rand(1, 1***REMOVED***
        b2 = np.random.rand(1, 4***REMOVED***
        res = np.dot(b1, b2***REMOVED***
        tgt = np.array([[0.15126730, 0.23068496, 0.45905553, 0.00256425***REMOVED******REMOVED******REMOVED***
        assert_almost_equal(res, tgt, decimal=self.N***REMOVED***

    def test_dotvecscalar2(self***REMOVED***:
        np.random.seed(100***REMOVED***
        b1 = np.random.rand(4, 1***REMOVED***
        b2 = np.random.rand(1, 1***REMOVED***
        res = np.dot(b1, b2***REMOVED***
        tgt = np.array([[0.00256425***REMOVED***,[0.00131359***REMOVED***,[0.00200324***REMOVED***,[ 0.00398638***REMOVED******REMOVED******REMOVED***
        assert_almost_equal(res, tgt, decimal=self.N***REMOVED***

    def test_all(self***REMOVED***:
        dims = [(***REMOVED***, (1,***REMOVED***, (1, 1***REMOVED******REMOVED***
        dout = [(***REMOVED***, (1,***REMOVED***, (1, 1***REMOVED***, (1,***REMOVED***, (***REMOVED***, (1,***REMOVED***, (1, 1***REMOVED***, (1,***REMOVED***, (1, 1***REMOVED******REMOVED***
        for dim, (dim1, dim2***REMOVED*** in zip(dout, itertools.product(dims, dims***REMOVED******REMOVED***:
            b1 = np.zeros(dim1***REMOVED***
            b2 = np.zeros(dim2***REMOVED***
            res = np.dot(b1, b2***REMOVED***
            tgt = np.zeros(dim***REMOVED***
            assert_(res.shape == tgt.shape***REMOVED***
            assert_almost_equal(res, tgt, decimal=self.N***REMOVED***

    def test_vecobject(self***REMOVED***:
        class Vec(object***REMOVED***:
            def __init__(self, sequence=None***REMOVED***:
                if sequence is None:
                    sequence = [***REMOVED***
                self.array = np.array(sequence***REMOVED***

            def __add__(self, other***REMOVED***:
                out = Vec(***REMOVED***
                out.array = self.array + other.array
                return out

            def __sub__(self, other***REMOVED***:
                out = Vec(***REMOVED***
                out.array = self.array - other.array
                return out

            def __mul__(self, other***REMOVED***:  # with scalar
                out = Vec(self.array.copy(***REMOVED******REMOVED***
                out.array *= other
                return out

            def __rmul__(self, other***REMOVED***:
                return self*other

        U_non_cont = np.transpose([[1., 1.***REMOVED***, [1., 2.***REMOVED******REMOVED******REMOVED***
        U_cont = np.ascontiguousarray(U_non_cont***REMOVED***
        x = np.array([Vec([1., 0.***REMOVED******REMOVED***, Vec([0., 1.***REMOVED******REMOVED******REMOVED******REMOVED***
        zeros = np.array([Vec([0., 0.***REMOVED******REMOVED***, Vec([0., 0.***REMOVED******REMOVED******REMOVED******REMOVED***
        zeros_test = np.dot(U_cont, x***REMOVED*** - np.dot(U_non_cont, x***REMOVED***
        assert_equal(zeros[0***REMOVED***.array, zeros_test[0***REMOVED***.array***REMOVED***
        assert_equal(zeros[1***REMOVED***.array, zeros_test[1***REMOVED***.array***REMOVED***

    def test_dot_2args(self***REMOVED***:
        from numpy.core.multiarray import dot

        a = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED***, dtype=float***REMOVED***
        b = np.array([[1, 0***REMOVED***, [1, 1***REMOVED******REMOVED***, dtype=float***REMOVED***
        c = np.array([[3, 2***REMOVED***, [7, 4***REMOVED******REMOVED***, dtype=float***REMOVED***

        d = dot(a, b***REMOVED***
        assert_allclose(c, d***REMOVED***

    def test_dot_3args(self***REMOVED***:
        from numpy.core.multiarray import dot

        np.random.seed(22***REMOVED***
        f = np.random.random_sample((1024, 16***REMOVED******REMOVED***
        v = np.random.random_sample((16, 32***REMOVED******REMOVED***

        r = np.empty((1024, 32***REMOVED******REMOVED***
        for i in range(12***REMOVED***:
            dot(f, v, r***REMOVED***
        assert_equal(sys.getrefcount(r***REMOVED***, 2***REMOVED***
        r2 = dot(f, v, out=None***REMOVED***
        assert_array_equal(r2, r***REMOVED***
        assert_(r is dot(f, v, out=r***REMOVED******REMOVED***

        v = v[:, 0***REMOVED***.copy(***REMOVED***  # v.shape == (16,***REMOVED***
        r = r[:, 0***REMOVED***.copy(***REMOVED***  # r.shape == (1024,***REMOVED***
        r2 = dot(f, v***REMOVED***
        assert_(r is dot(f, v, r***REMOVED******REMOVED***
        assert_array_equal(r2, r***REMOVED***

    def test_dot_3args_errors(self***REMOVED***:
        from numpy.core.multiarray import dot

        np.random.seed(22***REMOVED***
        f = np.random.random_sample((1024, 16***REMOVED******REMOVED***
        v = np.random.random_sample((16, 32***REMOVED******REMOVED***

        r = np.empty((1024, 31***REMOVED******REMOVED***
        assert_raises(ValueError, dot, f, v, r***REMOVED***

        r = np.empty((1024,***REMOVED******REMOVED***
        assert_raises(ValueError, dot, f, v, r***REMOVED***

        r = np.empty((32,***REMOVED******REMOVED***
        assert_raises(ValueError, dot, f, v, r***REMOVED***

        r = np.empty((32, 1024***REMOVED******REMOVED***
        assert_raises(ValueError, dot, f, v, r***REMOVED***
        assert_raises(ValueError, dot, f, v, r.T***REMOVED***

        r = np.empty((1024, 64***REMOVED******REMOVED***
        assert_raises(ValueError, dot, f, v, r[:, ::2***REMOVED******REMOVED***
        assert_raises(ValueError, dot, f, v, r[:, :32***REMOVED******REMOVED***

        r = np.empty((1024, 32***REMOVED***, dtype=np.float32***REMOVED***
        assert_raises(ValueError, dot, f, v, r***REMOVED***

        r = np.empty((1024, 32***REMOVED***, dtype=int***REMOVED***
        assert_raises(ValueError, dot, f, v, r***REMOVED***

    def test_dot_array_order(self***REMOVED***:
        a = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED***, order='C'***REMOVED***
        b = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED***, order='F'***REMOVED***
        res = np.dot(a, a***REMOVED***

        # integer arrays are exact
        assert_equal(np.dot(a, b***REMOVED***, res***REMOVED***
        assert_equal(np.dot(b, a***REMOVED***, res***REMOVED***
        assert_equal(np.dot(b, b***REMOVED***, res***REMOVED***

    def test_dot_scalar_and_matrix_of_objects(self***REMOVED***:
        # Ticket #2469
        arr = np.matrix([1, 2***REMOVED***, dtype=object***REMOVED***
        desired = np.matrix([[3, 6***REMOVED******REMOVED***, dtype=object***REMOVED***
        assert_equal(np.dot(arr, 3***REMOVED***, desired***REMOVED***
        assert_equal(np.dot(3, arr***REMOVED***, desired***REMOVED***

    def test_accelerate_framework_sgemv_fix(self***REMOVED***:

        def aligned_array(shape, align, dtype, order='C'***REMOVED***:
            d = dtype(0***REMOVED***
            N = np.prod(shape***REMOVED***
            tmp = np.zeros(N * d.nbytes + align, dtype=np.uint8***REMOVED***
            address = tmp.__array_interface__["data"***REMOVED***[0***REMOVED***
            for offset in range(align***REMOVED***:
                if (address + offset***REMOVED*** % align == 0:
                    break
            tmp = tmp[offset:offset+N*d.nbytes***REMOVED***.view(dtype=dtype***REMOVED***
            return tmp.reshape(shape, order=order***REMOVED***

        def as_aligned(arr, align, dtype, order='C'***REMOVED***:
            aligned = aligned_array(arr.shape, align, dtype, order***REMOVED***
            aligned[:***REMOVED*** = arr[:***REMOVED***
            return aligned

        def assert_dot_close(A, X, desired***REMOVED***:
            assert_allclose(np.dot(A, X***REMOVED***, desired, rtol=1e-5, atol=1e-7***REMOVED***

        m = aligned_array(100, 15, np.float32***REMOVED***
        s = aligned_array((100, 100***REMOVED***, 15, np.float32***REMOVED***
        np.dot(s, m***REMOVED***  # this will always segfault if the bug is present

        testdata = itertools.product((15,32***REMOVED***, (10000,***REMOVED***, (200,89***REMOVED***, ('C','F'***REMOVED******REMOVED***
        for align, m, n, a_order in testdata:
            # Calculation in double precision
            A_d = np.random.rand(m, n***REMOVED***
            X_d = np.random.rand(n***REMOVED***
            desired = np.dot(A_d, X_d***REMOVED***
            # Calculation with aligned single precision
            A_f = as_aligned(A_d, align, np.float32, order=a_order***REMOVED***
            X_f = as_aligned(X_d, align, np.float32***REMOVED***
            assert_dot_close(A_f, X_f, desired***REMOVED***
            # Strided A rows
            A_d_2 = A_d[::2***REMOVED***
            desired = np.dot(A_d_2, X_d***REMOVED***
            A_f_2 = A_f[::2***REMOVED***
            assert_dot_close(A_f_2, X_f, desired***REMOVED***
            # Strided A columns, strided X vector
            A_d_22 = A_d_2[:, ::2***REMOVED***
            X_d_2 = X_d[::2***REMOVED***
            desired = np.dot(A_d_22, X_d_2***REMOVED***
            A_f_22 = A_f_2[:, ::2***REMOVED***
            X_f_2 = X_f[::2***REMOVED***
            assert_dot_close(A_f_22, X_f_2, desired***REMOVED***
            # Check the strides are as expected
            if a_order == 'F':
                assert_equal(A_f_22.strides, (8, 8 * m***REMOVED******REMOVED***
            else:
                assert_equal(A_f_22.strides, (8 * n, 8***REMOVED******REMOVED***
            assert_equal(X_f_2.strides, (8,***REMOVED******REMOVED***
            # Strides in A rows + cols only
            X_f_2c = as_aligned(X_f_2, align, np.float32***REMOVED***
            assert_dot_close(A_f_22, X_f_2c, desired***REMOVED***
            # Strides just in A cols
            A_d_12 = A_d[:, ::2***REMOVED***
            desired = np.dot(A_d_12, X_d_2***REMOVED***
            A_f_12 = A_f[:, ::2***REMOVED***
            assert_dot_close(A_f_12, X_f_2c, desired***REMOVED***
            # Strides in A cols and X
            assert_dot_close(A_f_12, X_f_2, desired***REMOVED***


class MatmulCommon(***REMOVED***:
    ***REMOVED***Common tests for '@' operator and numpy.matmul.

    Do not derive from TestCase to avoid nose running it.

    ***REMOVED***
    # Should work with these types. Will want to add
    # "O" at some point
    types = "?bhilqBHILQefdgFDG"

    def test_exceptions(self***REMOVED***:
        dims = [
            ((1,***REMOVED***, (2,***REMOVED******REMOVED***,            # mismatched vector vector
            ((2, 1,***REMOVED***, (2,***REMOVED******REMOVED***,         # mismatched matrix vector
            ((2,***REMOVED***, (1, 2***REMOVED******REMOVED***,          # mismatched vector matrix
            ((1, 2***REMOVED***, (3, 1***REMOVED******REMOVED***,        # mismatched matrix matrix
            ((1,***REMOVED***, (***REMOVED******REMOVED***,              # vector scalar
            ((***REMOVED***, (1***REMOVED******REMOVED***,               # scalar vector
            ((1, 1***REMOVED***, (***REMOVED******REMOVED***,            # matrix scalar
            ((***REMOVED***, (1, 1***REMOVED******REMOVED***,            # scalar matrix
            ((2, 2, 1***REMOVED***, (3, 1, 2***REMOVED******REMOVED***,  # cannot broadcast
            ***REMOVED***

        for dt, (dm1, dm2***REMOVED*** in itertools.product(self.types, dims***REMOVED***:
            a = np.ones(dm1, dtype=dt***REMOVED***
            b = np.ones(dm2, dtype=dt***REMOVED***
            assert_raises(ValueError, self.matmul, a, b***REMOVED***

    def test_shapes(self***REMOVED***:
        dims = [
            ((1, 1***REMOVED***, (2, 1, 1***REMOVED******REMOVED***,     # broadcast first argument
            ((2, 1, 1***REMOVED***, (1, 1***REMOVED******REMOVED***,     # broadcast second argument
            ((2, 1, 1***REMOVED***, (2, 1, 1***REMOVED******REMOVED***,  # matrix stack sizes match
            ***REMOVED***

        for dt, (dm1, dm2***REMOVED*** in itertools.product(self.types, dims***REMOVED***:
            a = np.ones(dm1, dtype=dt***REMOVED***
            b = np.ones(dm2, dtype=dt***REMOVED***
            res = self.matmul(a, b***REMOVED***
            assert_(res.shape == (2, 1, 1***REMOVED******REMOVED***

        # vector vector returns scalars.
        for dt in self.types:
            a = np.ones((2,***REMOVED***, dtype=dt***REMOVED***
            b = np.ones((2,***REMOVED***, dtype=dt***REMOVED***
            c = self.matmul(a, b***REMOVED***
            assert_(np.array(c***REMOVED***.shape == (***REMOVED******REMOVED***

    def test_result_types(self***REMOVED***:
        mat = np.ones((1,1***REMOVED******REMOVED***
        vec = np.ones((1,***REMOVED******REMOVED***
        for dt in self.types:
            m = mat.astype(dt***REMOVED***
            v = vec.astype(dt***REMOVED***
            for arg in [(m, v***REMOVED***, (v, m***REMOVED***, (m, m***REMOVED******REMOVED***:
                res = self.matmul(*arg***REMOVED***
                assert_(res.dtype == dt***REMOVED***

            # vector vector returns scalars
            res = self.matmul(v, v***REMOVED***
            assert_(type(res***REMOVED*** is np.dtype(dt***REMOVED***.type***REMOVED***

    def test_vector_vector_values(self***REMOVED***:
        vec = np.array([1, 2***REMOVED******REMOVED***
        tgt = 5
        for dt in self.types[1:***REMOVED***:
            v1 = vec.astype(dt***REMOVED***
            res = self.matmul(v1, v1***REMOVED***
            assert_equal(res, tgt***REMOVED***

        # boolean type
        vec = np.array([True, True***REMOVED***, dtype='?'***REMOVED***
        res = self.matmul(vec, vec***REMOVED***
        assert_equal(res, True***REMOVED***

    def test_vector_matrix_values(self***REMOVED***:
        vec = np.array([1, 2***REMOVED******REMOVED***
        mat1 = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED******REMOVED***
        mat2 = np.stack([mat1***REMOVED****2, axis=0***REMOVED***
        tgt1 = np.array([7, 10***REMOVED******REMOVED***
        tgt2 = np.stack([tgt1***REMOVED****2, axis=0***REMOVED***
        for dt in self.types[1:***REMOVED***:
            v = vec.astype(dt***REMOVED***
            m1 = mat1.astype(dt***REMOVED***
            m2 = mat2.astype(dt***REMOVED***
            res = self.matmul(v, m1***REMOVED***
            assert_equal(res, tgt1***REMOVED***
            res = self.matmul(v, m2***REMOVED***
            assert_equal(res, tgt2***REMOVED***

        # boolean type
        vec = np.array([True, False***REMOVED******REMOVED***
        mat1 = np.array([[True, False***REMOVED***, [False, True***REMOVED******REMOVED******REMOVED***
        mat2 = np.stack([mat1***REMOVED****2, axis=0***REMOVED***
        tgt1 = np.array([True, False***REMOVED******REMOVED***
        tgt2 = np.stack([tgt1***REMOVED****2, axis=0***REMOVED***

        res = self.matmul(vec, mat1***REMOVED***
        assert_equal(res, tgt1***REMOVED***
        res = self.matmul(vec, mat2***REMOVED***
        assert_equal(res, tgt2***REMOVED***

    def test_matrix_vector_values(self***REMOVED***:
        vec = np.array([1, 2***REMOVED******REMOVED***
        mat1 = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED******REMOVED***
        mat2 = np.stack([mat1***REMOVED****2, axis=0***REMOVED***
        tgt1 = np.array([5, 11***REMOVED******REMOVED***
        tgt2 = np.stack([tgt1***REMOVED****2, axis=0***REMOVED***
        for dt in self.types[1:***REMOVED***:
            v = vec.astype(dt***REMOVED***
            m1 = mat1.astype(dt***REMOVED***
            m2 = mat2.astype(dt***REMOVED***
            res = self.matmul(m1, v***REMOVED***
            assert_equal(res, tgt1***REMOVED***
            res = self.matmul(m2, v***REMOVED***
            assert_equal(res, tgt2***REMOVED***

        # boolean type
        vec = np.array([True, False***REMOVED******REMOVED***
        mat1 = np.array([[True, False***REMOVED***, [False, True***REMOVED******REMOVED******REMOVED***
        mat2 = np.stack([mat1***REMOVED****2, axis=0***REMOVED***
        tgt1 = np.array([True, False***REMOVED******REMOVED***
        tgt2 = np.stack([tgt1***REMOVED****2, axis=0***REMOVED***

        res = self.matmul(vec, mat1***REMOVED***
        assert_equal(res, tgt1***REMOVED***
        res = self.matmul(vec, mat2***REMOVED***
        assert_equal(res, tgt2***REMOVED***

    def test_matrix_matrix_values(self***REMOVED***:
        mat1 = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED******REMOVED***
        mat2 = np.array([[1, 0***REMOVED***, [1, 1***REMOVED******REMOVED******REMOVED***
        mat12 = np.stack([mat1, mat2***REMOVED***, axis=0***REMOVED***
        mat21 = np.stack([mat2, mat1***REMOVED***, axis=0***REMOVED***
        tgt11 = np.array([[7, 10***REMOVED***, [15, 22***REMOVED******REMOVED******REMOVED***
        tgt12 = np.array([[3, 2***REMOVED***, [7, 4***REMOVED******REMOVED******REMOVED***
        tgt21 = np.array([[1, 2***REMOVED***, [4, 6***REMOVED******REMOVED******REMOVED***
        tgt12_21 = np.stack([tgt12, tgt21***REMOVED***, axis=0***REMOVED***
        tgt11_12 = np.stack((tgt11, tgt12***REMOVED***, axis=0***REMOVED***
        tgt11_21 = np.stack((tgt11, tgt21***REMOVED***, axis=0***REMOVED***
        for dt in self.types[1:***REMOVED***:
            m1 = mat1.astype(dt***REMOVED***
            m2 = mat2.astype(dt***REMOVED***
            m12 = mat12.astype(dt***REMOVED***
            m21 = mat21.astype(dt***REMOVED***

            # matrix @ matrix
            res = self.matmul(m1, m2***REMOVED***
            assert_equal(res, tgt12***REMOVED***
            res = self.matmul(m2, m1***REMOVED***
            assert_equal(res, tgt21***REMOVED***

            # stacked @ matrix
            res = self.matmul(m12, m1***REMOVED***
            assert_equal(res, tgt11_21***REMOVED***

            # matrix @ stacked
            res = self.matmul(m1, m12***REMOVED***
            assert_equal(res, tgt11_12***REMOVED***

            # stacked @ stacked
            res = self.matmul(m12, m21***REMOVED***
            assert_equal(res, tgt12_21***REMOVED***

        # boolean type
        m1 = np.array([[1, 1***REMOVED***, [0, 0***REMOVED******REMOVED***, dtype=np.bool_***REMOVED***
        m2 = np.array([[1, 0***REMOVED***, [1, 1***REMOVED******REMOVED***, dtype=np.bool_***REMOVED***
        m12 = np.stack([m1, m2***REMOVED***, axis=0***REMOVED***
        m21 = np.stack([m2, m1***REMOVED***, axis=0***REMOVED***
        tgt11 = m1
        tgt12 = m1
        tgt21 = np.array([[1, 1***REMOVED***, [1, 1***REMOVED******REMOVED***, dtype=np.bool_***REMOVED***
        tgt12_21 = np.stack([tgt12, tgt21***REMOVED***, axis=0***REMOVED***
        tgt11_12 = np.stack((tgt11, tgt12***REMOVED***, axis=0***REMOVED***
        tgt11_21 = np.stack((tgt11, tgt21***REMOVED***, axis=0***REMOVED***

        # matrix @ matrix
        res = self.matmul(m1, m2***REMOVED***
        assert_equal(res, tgt12***REMOVED***
        res = self.matmul(m2, m1***REMOVED***
        assert_equal(res, tgt21***REMOVED***

        # stacked @ matrix
        res = self.matmul(m12, m1***REMOVED***
        assert_equal(res, tgt11_21***REMOVED***

        # matrix @ stacked
        res = self.matmul(m1, m12***REMOVED***
        assert_equal(res, tgt11_12***REMOVED***

        # stacked @ stacked
        res = self.matmul(m12, m21***REMOVED***
        assert_equal(res, tgt12_21***REMOVED***

    def test_numpy_ufunc_override(self***REMOVED***:
        # 2016-01-29: NUMPY_UFUNC_DISABLED
        return

        class A(np.ndarray***REMOVED***:
            def __new__(cls, *args, **kwargs***REMOVED***:
                return np.array(*args, **kwargs***REMOVED***.view(cls***REMOVED***

            def __numpy_ufunc__(self, ufunc, method, pos, inputs, **kwargs***REMOVED***:
                return "A"

        class B(np.ndarray***REMOVED***:
            def __new__(cls, *args, **kwargs***REMOVED***:
                return np.array(*args, **kwargs***REMOVED***.view(cls***REMOVED***

            def __numpy_ufunc__(self, ufunc, method, pos, inputs, **kwargs***REMOVED***:
                return NotImplemented

        a = A([1, 2***REMOVED******REMOVED***
        b = B([1, 2***REMOVED******REMOVED***
        c = np.ones(2***REMOVED***
        assert_equal(self.matmul(a, b***REMOVED***, "A"***REMOVED***
        assert_equal(self.matmul(b, a***REMOVED***, "A"***REMOVED***
        assert_raises(TypeError, self.matmul, b, c***REMOVED***


class TestMatmul(MatmulCommon, TestCase***REMOVED***:
    matmul = np.matmul

    def test_out_arg(self***REMOVED***:
        a = np.ones((2, 2***REMOVED***, dtype=np.float***REMOVED***
        b = np.ones((2, 2***REMOVED***, dtype=np.float***REMOVED***
        tgt = np.full((2,2***REMOVED***, 2, dtype=np.float***REMOVED***

        # test as positional argument
        msg = "out positional argument"
        out = np.zeros((2, 2***REMOVED***, dtype=np.float***REMOVED***
        self.matmul(a, b, out***REMOVED***
        assert_array_equal(out, tgt, err_msg=msg***REMOVED***

        # test as keyword argument
        msg = "out keyword argument"
        out = np.zeros((2, 2***REMOVED***, dtype=np.float***REMOVED***
        self.matmul(a, b, out=out***REMOVED***
        assert_array_equal(out, tgt, err_msg=msg***REMOVED***

        # test out with not allowed type cast (safe casting***REMOVED***
        # einsum and cblas raise different error types, so
        # use Exception.
        msg = "out argument with illegal cast"
        out = np.zeros((2, 2***REMOVED***, dtype=np.int32***REMOVED***
        assert_raises(Exception, self.matmul, a, b, out=out***REMOVED***

        # skip following tests for now, cblas does not allow non-contiguous
        # outputs and consistency with dot would require same type,
        # dimensions, subtype, and c_contiguous.

        # test out with allowed type cast
        # msg = "out argument with allowed cast"
        # out = np.zeros((2, 2***REMOVED***, dtype=np.complex128***REMOVED***
        # self.matmul(a, b, out=out***REMOVED***
        # assert_array_equal(out, tgt, err_msg=msg***REMOVED***

        # test out non-contiguous
        # msg = "out argument with non-contiguous layout"
        # c = np.zeros((2, 2, 2***REMOVED***, dtype=np.float***REMOVED***
        # self.matmul(a, b, out=c[..., 0***REMOVED******REMOVED***
        # assert_array_equal(c, tgt, err_msg=msg***REMOVED***


if sys.version_info[:2***REMOVED*** >= (3, 5***REMOVED***:
    class TestMatmulOperator(MatmulCommon, TestCase***REMOVED***:
        import operator
        matmul = operator.matmul

        def test_array_priority_override(self***REMOVED***:

            class A(object***REMOVED***:
                __array_priority__ = 1000

                def __matmul__(self, other***REMOVED***:
                    return "A"

                def __rmatmul__(self, other***REMOVED***:
                    return "A"

            a = A(***REMOVED***
            b = np.ones(2***REMOVED***
            assert_equal(self.matmul(a, b***REMOVED***, "A"***REMOVED***
            assert_equal(self.matmul(b, a***REMOVED***, "A"***REMOVED***

    def test_matmul_inplace(***REMOVED***:
        # It would be nice to support in-place matmul eventually, but for now
        # we don't have a working implementation, so better just to error out
        # and nudge people to writing "a = a @ b".
        a = np.eye(3***REMOVED***
        b = np.eye(3***REMOVED***
        assert_raises(TypeError, a.__imatmul__, b***REMOVED***
        import operator
        assert_raises(TypeError, operator.imatmul, a, b***REMOVED***
        # we avoid writing the token `exec` so as not to crash python 2's
        # parser
        exec_ = getattr(builtins, "exec"***REMOVED***
        assert_raises(TypeError, exec_, "a @= b", globals(***REMOVED***, locals(***REMOVED******REMOVED***


class TestInner(TestCase***REMOVED***:

    def test_inner_type_mismatch(self***REMOVED***:
        c = 1.
        A = np.array((1,1***REMOVED***, dtype='i,i'***REMOVED***

        assert_raises(TypeError, np.inner, c, A***REMOVED***
        assert_raises(TypeError, np.inner, A, c***REMOVED***

    def test_inner_scalar_and_vector(self***REMOVED***:
        for dt in np.typecodes['AllInteger'***REMOVED*** + np.typecodes['AllFloat'***REMOVED*** + '?':
            sca = np.array(3, dtype=dt***REMOVED***[(***REMOVED******REMOVED***
            vec = np.array([1, 2***REMOVED***, dtype=dt***REMOVED***
            desired = np.array([3, 6***REMOVED***, dtype=dt***REMOVED***
            assert_equal(np.inner(vec, sca***REMOVED***, desired***REMOVED***
            assert_equal(np.inner(sca, vec***REMOVED***, desired***REMOVED***

    def test_inner_scalar_and_matrix(self***REMOVED***:
        for dt in np.typecodes['AllInteger'***REMOVED*** + np.typecodes['AllFloat'***REMOVED*** + '?':
            sca = np.array(3, dtype=dt***REMOVED***[(***REMOVED******REMOVED***
            arr = np.matrix([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED***, dtype=dt***REMOVED***
            desired = np.matrix([[3, 6***REMOVED***, [9, 12***REMOVED******REMOVED***, dtype=dt***REMOVED***
            assert_equal(np.inner(arr, sca***REMOVED***, desired***REMOVED***
            assert_equal(np.inner(sca, arr***REMOVED***, desired***REMOVED***

    def test_inner_scalar_and_matrix_of_objects(self***REMOVED***:
        # Ticket #4482
        arr = np.matrix([1, 2***REMOVED***, dtype=object***REMOVED***
        desired = np.matrix([[3, 6***REMOVED******REMOVED***, dtype=object***REMOVED***
        assert_equal(np.inner(arr, 3***REMOVED***, desired***REMOVED***
        assert_equal(np.inner(3, arr***REMOVED***, desired***REMOVED***

    def test_vecself(self***REMOVED***:
        # Ticket 844.
        # Inner product of a vector with itself segfaults or give
        # meaningless result
        a = np.zeros(shape=(1, 80***REMOVED***, dtype=np.float64***REMOVED***
        p = np.inner(a, a***REMOVED***
        assert_almost_equal(p, 0, decimal=14***REMOVED***

    def test_inner_product_with_various_contiguities(self***REMOVED***:
        # github issue 6532
        for dt in np.typecodes['AllInteger'***REMOVED*** + np.typecodes['AllFloat'***REMOVED*** + '?':
            # check an inner product involving a matrix transpose
            A = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED***, dtype=dt***REMOVED***
            B = np.array([[1, 3***REMOVED***, [2, 4***REMOVED******REMOVED***, dtype=dt***REMOVED***
            C = np.array([1, 1***REMOVED***, dtype=dt***REMOVED***
            desired = np.array([4, 6***REMOVED***, dtype=dt***REMOVED***
            assert_equal(np.inner(A.T, C***REMOVED***, desired***REMOVED***
            assert_equal(np.inner(C, A.T***REMOVED***, desired***REMOVED***
            assert_equal(np.inner(B, C***REMOVED***, desired***REMOVED***
            assert_equal(np.inner(C, B***REMOVED***, desired***REMOVED***
            # check a matrix product
            desired = np.array([[7, 10***REMOVED***, [15, 22***REMOVED******REMOVED***, dtype=dt***REMOVED***
            assert_equal(np.inner(A, B***REMOVED***, desired***REMOVED***
            # check the syrk vs. gemm paths
            desired = np.array([[5, 11***REMOVED***, [11, 25***REMOVED******REMOVED***, dtype=dt***REMOVED***
            assert_equal(np.inner(A, A***REMOVED***, desired***REMOVED***
            assert_equal(np.inner(A, A.copy(***REMOVED******REMOVED***, desired***REMOVED***
            # check an inner product involving an aliased and reversed view
            a = np.arange(5***REMOVED***.astype(dt***REMOVED***
            b = a[::-1***REMOVED***
            desired = np.array(10, dtype=dt***REMOVED***.item(***REMOVED***
            assert_equal(np.inner(b, a***REMOVED***, desired***REMOVED***

    def test_3d_tensor(self***REMOVED***:
        for dt in np.typecodes['AllInteger'***REMOVED*** + np.typecodes['AllFloat'***REMOVED*** + '?':
            a = np.arange(24***REMOVED***.reshape(2,3,4***REMOVED***.astype(dt***REMOVED***
            b = np.arange(24, 48***REMOVED***.reshape(2,3,4***REMOVED***.astype(dt***REMOVED***
            desired = np.array(
                [[[[ 158,  182,  206***REMOVED***,
                   [ 230,  254,  278***REMOVED******REMOVED***,

                  [[ 566,  654,  742***REMOVED***,
                   [ 830,  918, 1006***REMOVED******REMOVED***,

                  [[ 974, 1126, 1278***REMOVED***,
                   [1430, 1582, 1734***REMOVED******REMOVED******REMOVED***,

                 [[[1382, 1598, 1814***REMOVED***,
                   [2030, 2246, 2462***REMOVED******REMOVED***,

                  [[1790, 2070, 2350***REMOVED***,
                   [2630, 2910, 3190***REMOVED******REMOVED***,

                  [[2198, 2542, 2886***REMOVED***,
                   [3230, 3574, 3918***REMOVED******REMOVED******REMOVED******REMOVED***,
                dtype=dt
            ***REMOVED***
            assert_equal(np.inner(a, b***REMOVED***, desired***REMOVED***
            assert_equal(np.inner(b, a***REMOVED***.transpose(2,3,0,1***REMOVED***, desired***REMOVED***


class TestSummarization(TestCase***REMOVED***:
    def test_1d(self***REMOVED***:
        A = np.arange(1001***REMOVED***
        strA = '[   0    1    2 ...,  998  999 1000***REMOVED***'
        assert_(str(A***REMOVED*** == strA***REMOVED***

        reprA = 'array([   0,    1,    2, ...,  998,  999, 1000***REMOVED******REMOVED***'
        assert_(repr(A***REMOVED*** == reprA***REMOVED***

    def test_2d(self***REMOVED***:
        A = np.arange(1002***REMOVED***.reshape(2, 501***REMOVED***
        strA = '[[   0    1    2 ...,  498  499  500***REMOVED***\n' \
               ' [ 501  502  503 ...,  999 1000 1001***REMOVED******REMOVED***'
        assert_(str(A***REMOVED*** == strA***REMOVED***

        reprA = 'array([[   0,    1,    2, ...,  498,  499,  500***REMOVED***,\n' \
                '       [ 501,  502,  503, ...,  999, 1000, 1001***REMOVED******REMOVED******REMOVED***'
        assert_(repr(A***REMOVED*** == reprA***REMOVED***


class TestAlen(TestCase***REMOVED***:
    def test_basic(self***REMOVED***:
        m = np.array([1, 2, 3***REMOVED******REMOVED***
        self.assertEqual(np.alen(m***REMOVED***, 3***REMOVED***

        m = np.array([[1, 2, 3***REMOVED***, [4, 5, 7***REMOVED******REMOVED******REMOVED***
        self.assertEqual(np.alen(m***REMOVED***, 2***REMOVED***

        m = [1, 2, 3***REMOVED***
        self.assertEqual(np.alen(m***REMOVED***, 3***REMOVED***

        m = [[1, 2, 3***REMOVED***, [4, 5, 7***REMOVED******REMOVED***
        self.assertEqual(np.alen(m***REMOVED***, 2***REMOVED***

    def test_singleton(self***REMOVED***:
        self.assertEqual(np.alen(5***REMOVED***, 1***REMOVED***


class TestChoose(TestCase***REMOVED***:
    def setUp(self***REMOVED***:
        self.x = 2*np.ones((3,***REMOVED***, dtype=int***REMOVED***
        self.y = 3*np.ones((3,***REMOVED***, dtype=int***REMOVED***
        self.x2 = 2*np.ones((2, 3***REMOVED***, dtype=int***REMOVED***
        self.y2 = 3*np.ones((2, 3***REMOVED***, dtype=int***REMOVED***
        self.ind = [0, 0, 1***REMOVED***

    def test_basic(self***REMOVED***:
        A = np.choose(self.ind, (self.x, self.y***REMOVED******REMOVED***
        assert_equal(A, [2, 2, 3***REMOVED******REMOVED***

    def test_broadcast1(self***REMOVED***:
        A = np.choose(self.ind, (self.x2, self.y2***REMOVED******REMOVED***
        assert_equal(A, [[2, 2, 3***REMOVED***, [2, 2, 3***REMOVED******REMOVED******REMOVED***

    def test_broadcast2(self***REMOVED***:
        A = np.choose(self.ind, (self.x, self.y2***REMOVED******REMOVED***
        assert_equal(A, [[2, 2, 3***REMOVED***, [2, 2, 3***REMOVED******REMOVED******REMOVED***


class TestRepeat(TestCase***REMOVED***:
    def setUp(self***REMOVED***:
        self.m = np.array([1, 2, 3, 4, 5, 6***REMOVED******REMOVED***
        self.m_rect = self.m.reshape((2, 3***REMOVED******REMOVED***

    def test_basic(self***REMOVED***:
        A = np.repeat(self.m, [1, 3, 2, 1, 1, 2***REMOVED******REMOVED***
        assert_equal(A, [1, 2, 2, 2, 3,
                         3, 4, 5, 6, 6***REMOVED******REMOVED***

    def test_broadcast1(self***REMOVED***:
        A = np.repeat(self.m, 2***REMOVED***
        assert_equal(A, [1, 1, 2, 2, 3, 3,
                         4, 4, 5, 5, 6, 6***REMOVED******REMOVED***

    def test_axis_spec(self***REMOVED***:
        A = np.repeat(self.m_rect, [2, 1***REMOVED***, axis=0***REMOVED***
        assert_equal(A, [[1, 2, 3***REMOVED***,
                         [1, 2, 3***REMOVED***,
                         [4, 5, 6***REMOVED******REMOVED******REMOVED***

        A = np.repeat(self.m_rect, [1, 3, 2***REMOVED***, axis=1***REMOVED***
        assert_equal(A, [[1, 2, 2, 2, 3, 3***REMOVED***,
                         [4, 5, 5, 5, 6, 6***REMOVED******REMOVED******REMOVED***

    def test_broadcast2(self***REMOVED***:
        A = np.repeat(self.m_rect, 2, axis=0***REMOVED***
        assert_equal(A, [[1, 2, 3***REMOVED***,
                         [1, 2, 3***REMOVED***,
                         [4, 5, 6***REMOVED***,
                         [4, 5, 6***REMOVED******REMOVED******REMOVED***

        A = np.repeat(self.m_rect, 2, axis=1***REMOVED***
        assert_equal(A, [[1, 1, 2, 2, 3, 3***REMOVED***,
                         [4, 4, 5, 5, 6, 6***REMOVED******REMOVED******REMOVED***


# TODO: test for multidimensional
NEIGH_MODE = {'zero': 0, 'one': 1, 'constant': 2, 'circular': 3, 'mirror': 4***REMOVED***


class TestNeighborhoodIter(TestCase***REMOVED***:
    # Simple, 2d tests
    def _test_simple2d(self, dt***REMOVED***:
        # Test zero and one padding for simple data type
        x = np.array([[0, 1***REMOVED***, [2, 3***REMOVED******REMOVED***, dtype=dt***REMOVED***
        r = [np.array([[0, 0, 0***REMOVED***, [0, 0, 1***REMOVED******REMOVED***, dtype=dt***REMOVED***,
             np.array([[0, 0, 0***REMOVED***, [0, 1, 0***REMOVED******REMOVED***, dtype=dt***REMOVED***,
             np.array([[0, 0, 1***REMOVED***, [0, 2, 3***REMOVED******REMOVED***, dtype=dt***REMOVED***,
             np.array([[0, 1, 0***REMOVED***, [2, 3, 0***REMOVED******REMOVED***, dtype=dt***REMOVED******REMOVED***
        l = test_neighborhood_iterator(x, [-1, 0, -1, 1***REMOVED***, x[0***REMOVED***,
                NEIGH_MODE['zero'***REMOVED******REMOVED***
        assert_array_equal(l, r***REMOVED***

        r = [np.array([[1, 1, 1***REMOVED***, [1, 0, 1***REMOVED******REMOVED***, dtype=dt***REMOVED***,
             np.array([[1, 1, 1***REMOVED***, [0, 1, 1***REMOVED******REMOVED***, dtype=dt***REMOVED***,
             np.array([[1, 0, 1***REMOVED***, [1, 2, 3***REMOVED******REMOVED***, dtype=dt***REMOVED***,
             np.array([[0, 1, 1***REMOVED***, [2, 3, 1***REMOVED******REMOVED***, dtype=dt***REMOVED******REMOVED***
        l = test_neighborhood_iterator(x, [-1, 0, -1, 1***REMOVED***, x[0***REMOVED***,
                NEIGH_MODE['one'***REMOVED******REMOVED***
        assert_array_equal(l, r***REMOVED***

        r = [np.array([[4, 4, 4***REMOVED***, [4, 0, 1***REMOVED******REMOVED***, dtype=dt***REMOVED***,
             np.array([[4, 4, 4***REMOVED***, [0, 1, 4***REMOVED******REMOVED***, dtype=dt***REMOVED***,
             np.array([[4, 0, 1***REMOVED***, [4, 2, 3***REMOVED******REMOVED***, dtype=dt***REMOVED***,
             np.array([[0, 1, 4***REMOVED***, [2, 3, 4***REMOVED******REMOVED***, dtype=dt***REMOVED******REMOVED***
        l = test_neighborhood_iterator(x, [-1, 0, -1, 1***REMOVED***, 4,
                NEIGH_MODE['constant'***REMOVED******REMOVED***
        assert_array_equal(l, r***REMOVED***

    def test_simple2d(self***REMOVED***:
        self._test_simple2d(np.float***REMOVED***

    def test_simple2d_object(self***REMOVED***:
        self._test_simple2d(Decimal***REMOVED***

    def _test_mirror2d(self, dt***REMOVED***:
        x = np.array([[0, 1***REMOVED***, [2, 3***REMOVED******REMOVED***, dtype=dt***REMOVED***
        r = [np.array([[0, 0, 1***REMOVED***, [0, 0, 1***REMOVED******REMOVED***, dtype=dt***REMOVED***,
             np.array([[0, 1, 1***REMOVED***, [0, 1, 1***REMOVED******REMOVED***, dtype=dt***REMOVED***,
             np.array([[0, 0, 1***REMOVED***, [2, 2, 3***REMOVED******REMOVED***, dtype=dt***REMOVED***,
             np.array([[0, 1, 1***REMOVED***, [2, 3, 3***REMOVED******REMOVED***, dtype=dt***REMOVED******REMOVED***
        l = test_neighborhood_iterator(x, [-1, 0, -1, 1***REMOVED***, x[0***REMOVED***,
                NEIGH_MODE['mirror'***REMOVED******REMOVED***
        assert_array_equal(l, r***REMOVED***

    def test_mirror2d(self***REMOVED***:
        self._test_mirror2d(np.float***REMOVED***

    def test_mirror2d_object(self***REMOVED***:
        self._test_mirror2d(Decimal***REMOVED***

    # Simple, 1d tests
    def _test_simple(self, dt***REMOVED***:
        # Test padding with constant values
        x = np.linspace(1, 5, 5***REMOVED***.astype(dt***REMOVED***
        r = [[0, 1, 2***REMOVED***, [1, 2, 3***REMOVED***, [2, 3, 4***REMOVED***, [3, 4, 5***REMOVED***, [4, 5, 0***REMOVED******REMOVED***
        l = test_neighborhood_iterator(x, [-1, 1***REMOVED***, x[0***REMOVED***, NEIGH_MODE['zero'***REMOVED******REMOVED***
        assert_array_equal(l, r***REMOVED***

        r = [[1, 1, 2***REMOVED***, [1, 2, 3***REMOVED***, [2, 3, 4***REMOVED***, [3, 4, 5***REMOVED***, [4, 5, 1***REMOVED******REMOVED***
        l = test_neighborhood_iterator(x, [-1, 1***REMOVED***, x[0***REMOVED***, NEIGH_MODE['one'***REMOVED******REMOVED***
        assert_array_equal(l, r***REMOVED***

        r = [[x[4***REMOVED***, 1, 2***REMOVED***, [1, 2, 3***REMOVED***, [2, 3, 4***REMOVED***, [3, 4, 5***REMOVED***, [4, 5, x[4***REMOVED******REMOVED******REMOVED***
        l = test_neighborhood_iterator(x, [-1, 1***REMOVED***, x[4***REMOVED***, NEIGH_MODE['constant'***REMOVED******REMOVED***
        assert_array_equal(l, r***REMOVED***

    def test_simple_float(self***REMOVED***:
        self._test_simple(np.float***REMOVED***

    def test_simple_object(self***REMOVED***:
        self._test_simple(Decimal***REMOVED***

    # Test mirror modes
    def _test_mirror(self, dt***REMOVED***:
        x = np.linspace(1, 5, 5***REMOVED***.astype(dt***REMOVED***
        r = np.array([[2, 1, 1, 2, 3***REMOVED***, [1, 1, 2, 3, 4***REMOVED***, [1, 2, 3, 4, 5***REMOVED***,
                [2, 3, 4, 5, 5***REMOVED***, [3, 4, 5, 5, 4***REMOVED******REMOVED***, dtype=dt***REMOVED***
        l = test_neighborhood_iterator(x, [-2, 2***REMOVED***, x[1***REMOVED***, NEIGH_MODE['mirror'***REMOVED******REMOVED***
        self.assertTrue([i.dtype == dt for i in l***REMOVED******REMOVED***
        assert_array_equal(l, r***REMOVED***

    def test_mirror(self***REMOVED***:
        self._test_mirror(np.float***REMOVED***

    def test_mirror_object(self***REMOVED***:
        self._test_mirror(Decimal***REMOVED***

    # Circular mode
    def _test_circular(self, dt***REMOVED***:
        x = np.linspace(1, 5, 5***REMOVED***.astype(dt***REMOVED***
        r = np.array([[4, 5, 1, 2, 3***REMOVED***, [5, 1, 2, 3, 4***REMOVED***, [1, 2, 3, 4, 5***REMOVED***,
                [2, 3, 4, 5, 1***REMOVED***, [3, 4, 5, 1, 2***REMOVED******REMOVED***, dtype=dt***REMOVED***
        l = test_neighborhood_iterator(x, [-2, 2***REMOVED***, x[0***REMOVED***, NEIGH_MODE['circular'***REMOVED******REMOVED***
        assert_array_equal(l, r***REMOVED***

    def test_circular(self***REMOVED***:
        self._test_circular(np.float***REMOVED***

    def test_circular_object(self***REMOVED***:
        self._test_circular(Decimal***REMOVED***

# Test stacking neighborhood iterators
class TestStackedNeighborhoodIter(TestCase***REMOVED***:
    # Simple, 1d test: stacking 2 constant-padded neigh iterators
    def test_simple_const(self***REMOVED***:
        dt = np.float64
        # Test zero and one padding for simple data type
        x = np.array([1, 2, 3***REMOVED***, dtype=dt***REMOVED***
        r = [np.array([0***REMOVED***, dtype=dt***REMOVED***,
             np.array([0***REMOVED***, dtype=dt***REMOVED***,
             np.array([1***REMOVED***, dtype=dt***REMOVED***,
             np.array([2***REMOVED***, dtype=dt***REMOVED***,
             np.array([3***REMOVED***, dtype=dt***REMOVED***,
             np.array([0***REMOVED***, dtype=dt***REMOVED***,
             np.array([0***REMOVED***, dtype=dt***REMOVED******REMOVED***
        l = test_neighborhood_iterator_oob(x, [-2, 4***REMOVED***, NEIGH_MODE['zero'***REMOVED***,
                [0, 0***REMOVED***, NEIGH_MODE['zero'***REMOVED******REMOVED***
        assert_array_equal(l, r***REMOVED***

        r = [np.array([1, 0, 1***REMOVED***, dtype=dt***REMOVED***,
             np.array([0, 1, 2***REMOVED***, dtype=dt***REMOVED***,
             np.array([1, 2, 3***REMOVED***, dtype=dt***REMOVED***,
             np.array([2, 3, 0***REMOVED***, dtype=dt***REMOVED***,
             np.array([3, 0, 1***REMOVED***, dtype=dt***REMOVED******REMOVED***
        l = test_neighborhood_iterator_oob(x, [-1, 3***REMOVED***, NEIGH_MODE['zero'***REMOVED***,
                [-1, 1***REMOVED***, NEIGH_MODE['one'***REMOVED******REMOVED***
        assert_array_equal(l, r***REMOVED***

    # 2nd simple, 1d test: stacking 2 neigh iterators, mixing const padding and
    # mirror padding
    def test_simple_mirror(self***REMOVED***:
        dt = np.float64
        # Stacking zero on top of mirror
        x = np.array([1, 2, 3***REMOVED***, dtype=dt***REMOVED***
        r = [np.array([0, 1, 1***REMOVED***, dtype=dt***REMOVED***,
             np.array([1, 1, 2***REMOVED***, dtype=dt***REMOVED***,
             np.array([1, 2, 3***REMOVED***, dtype=dt***REMOVED***,
             np.array([2, 3, 3***REMOVED***, dtype=dt***REMOVED***,
             np.array([3, 3, 0***REMOVED***, dtype=dt***REMOVED******REMOVED***
        l = test_neighborhood_iterator_oob(x, [-1, 3***REMOVED***, NEIGH_MODE['mirror'***REMOVED***,
                [-1, 1***REMOVED***, NEIGH_MODE['zero'***REMOVED******REMOVED***
        assert_array_equal(l, r***REMOVED***

        # Stacking mirror on top of zero
        x = np.array([1, 2, 3***REMOVED***, dtype=dt***REMOVED***
        r = [np.array([1, 0, 0***REMOVED***, dtype=dt***REMOVED***,
             np.array([0, 0, 1***REMOVED***, dtype=dt***REMOVED***,
             np.array([0, 1, 2***REMOVED***, dtype=dt***REMOVED***,
             np.array([1, 2, 3***REMOVED***, dtype=dt***REMOVED***,
             np.array([2, 3, 0***REMOVED***, dtype=dt***REMOVED******REMOVED***
        l = test_neighborhood_iterator_oob(x, [-1, 3***REMOVED***, NEIGH_MODE['zero'***REMOVED***,
                [-2, 0***REMOVED***, NEIGH_MODE['mirror'***REMOVED******REMOVED***
        assert_array_equal(l, r***REMOVED***

        # Stacking mirror on top of zero: 2nd
        x = np.array([1, 2, 3***REMOVED***, dtype=dt***REMOVED***
        r = [np.array([0, 1, 2***REMOVED***, dtype=dt***REMOVED***,
             np.array([1, 2, 3***REMOVED***, dtype=dt***REMOVED***,
             np.array([2, 3, 0***REMOVED***, dtype=dt***REMOVED***,
             np.array([3, 0, 0***REMOVED***, dtype=dt***REMOVED***,
             np.array([0, 0, 3***REMOVED***, dtype=dt***REMOVED******REMOVED***
        l = test_neighborhood_iterator_oob(x, [-1, 3***REMOVED***, NEIGH_MODE['zero'***REMOVED***,
                [0, 2***REMOVED***, NEIGH_MODE['mirror'***REMOVED******REMOVED***
        assert_array_equal(l, r***REMOVED***

        # Stacking mirror on top of zero: 3rd
        x = np.array([1, 2, 3***REMOVED***, dtype=dt***REMOVED***
        r = [np.array([1, 0, 0, 1, 2***REMOVED***, dtype=dt***REMOVED***,
             np.array([0, 0, 1, 2, 3***REMOVED***, dtype=dt***REMOVED***,
             np.array([0, 1, 2, 3, 0***REMOVED***, dtype=dt***REMOVED***,
             np.array([1, 2, 3, 0, 0***REMOVED***, dtype=dt***REMOVED***,
             np.array([2, 3, 0, 0, 3***REMOVED***, dtype=dt***REMOVED******REMOVED***
        l = test_neighborhood_iterator_oob(x, [-1, 3***REMOVED***, NEIGH_MODE['zero'***REMOVED***,
                [-2, 2***REMOVED***, NEIGH_MODE['mirror'***REMOVED******REMOVED***
        assert_array_equal(l, r***REMOVED***

    # 3rd simple, 1d test: stacking 2 neigh iterators, mixing const padding and
    # circular padding
    def test_simple_circular(self***REMOVED***:
        dt = np.float64
        # Stacking zero on top of mirror
        x = np.array([1, 2, 3***REMOVED***, dtype=dt***REMOVED***
        r = [np.array([0, 3, 1***REMOVED***, dtype=dt***REMOVED***,
             np.array([3, 1, 2***REMOVED***, dtype=dt***REMOVED***,
             np.array([1, 2, 3***REMOVED***, dtype=dt***REMOVED***,
             np.array([2, 3, 1***REMOVED***, dtype=dt***REMOVED***,
             np.array([3, 1, 0***REMOVED***, dtype=dt***REMOVED******REMOVED***
        l = test_neighborhood_iterator_oob(x, [-1, 3***REMOVED***, NEIGH_MODE['circular'***REMOVED***,
                [-1, 1***REMOVED***, NEIGH_MODE['zero'***REMOVED******REMOVED***
        assert_array_equal(l, r***REMOVED***

        # Stacking mirror on top of zero
        x = np.array([1, 2, 3***REMOVED***, dtype=dt***REMOVED***
        r = [np.array([3, 0, 0***REMOVED***, dtype=dt***REMOVED***,
             np.array([0, 0, 1***REMOVED***, dtype=dt***REMOVED***,
             np.array([0, 1, 2***REMOVED***, dtype=dt***REMOVED***,
             np.array([1, 2, 3***REMOVED***, dtype=dt***REMOVED***,
             np.array([2, 3, 0***REMOVED***, dtype=dt***REMOVED******REMOVED***
        l = test_neighborhood_iterator_oob(x, [-1, 3***REMOVED***, NEIGH_MODE['zero'***REMOVED***,
                [-2, 0***REMOVED***, NEIGH_MODE['circular'***REMOVED******REMOVED***
        assert_array_equal(l, r***REMOVED***

        # Stacking mirror on top of zero: 2nd
        x = np.array([1, 2, 3***REMOVED***, dtype=dt***REMOVED***
        r = [np.array([0, 1, 2***REMOVED***, dtype=dt***REMOVED***,
             np.array([1, 2, 3***REMOVED***, dtype=dt***REMOVED***,
             np.array([2, 3, 0***REMOVED***, dtype=dt***REMOVED***,
             np.array([3, 0, 0***REMOVED***, dtype=dt***REMOVED***,
             np.array([0, 0, 1***REMOVED***, dtype=dt***REMOVED******REMOVED***
        l = test_neighborhood_iterator_oob(x, [-1, 3***REMOVED***, NEIGH_MODE['zero'***REMOVED***,
                [0, 2***REMOVED***, NEIGH_MODE['circular'***REMOVED******REMOVED***
        assert_array_equal(l, r***REMOVED***

        # Stacking mirror on top of zero: 3rd
        x = np.array([1, 2, 3***REMOVED***, dtype=dt***REMOVED***
        r = [np.array([3, 0, 0, 1, 2***REMOVED***, dtype=dt***REMOVED***,
             np.array([0, 0, 1, 2, 3***REMOVED***, dtype=dt***REMOVED***,
             np.array([0, 1, 2, 3, 0***REMOVED***, dtype=dt***REMOVED***,
             np.array([1, 2, 3, 0, 0***REMOVED***, dtype=dt***REMOVED***,
             np.array([2, 3, 0, 0, 1***REMOVED***, dtype=dt***REMOVED******REMOVED***
        l = test_neighborhood_iterator_oob(x, [-1, 3***REMOVED***, NEIGH_MODE['zero'***REMOVED***,
                [-2, 2***REMOVED***, NEIGH_MODE['circular'***REMOVED******REMOVED***
        assert_array_equal(l, r***REMOVED***

    # 4th simple, 1d test: stacking 2 neigh iterators, but with lower iterator
    # being strictly within the array
    def test_simple_strict_within(self***REMOVED***:
        dt = np.float64
        # Stacking zero on top of zero, first neighborhood strictly inside the
        # array
        x = np.array([1, 2, 3***REMOVED***, dtype=dt***REMOVED***
        r = [np.array([1, 2, 3, 0***REMOVED***, dtype=dt***REMOVED******REMOVED***
        l = test_neighborhood_iterator_oob(x, [1, 1***REMOVED***, NEIGH_MODE['zero'***REMOVED***,
                [-1, 2***REMOVED***, NEIGH_MODE['zero'***REMOVED******REMOVED***
        assert_array_equal(l, r***REMOVED***

        # Stacking mirror on top of zero, first neighborhood strictly inside the
        # array
        x = np.array([1, 2, 3***REMOVED***, dtype=dt***REMOVED***
        r = [np.array([1, 2, 3, 3***REMOVED***, dtype=dt***REMOVED******REMOVED***
        l = test_neighborhood_iterator_oob(x, [1, 1***REMOVED***, NEIGH_MODE['zero'***REMOVED***,
                [-1, 2***REMOVED***, NEIGH_MODE['mirror'***REMOVED******REMOVED***
        assert_array_equal(l, r***REMOVED***

        # Stacking mirror on top of zero, first neighborhood strictly inside the
        # array
        x = np.array([1, 2, 3***REMOVED***, dtype=dt***REMOVED***
        r = [np.array([1, 2, 3, 1***REMOVED***, dtype=dt***REMOVED******REMOVED***
        l = test_neighborhood_iterator_oob(x, [1, 1***REMOVED***, NEIGH_MODE['zero'***REMOVED***,
                [-1, 2***REMOVED***, NEIGH_MODE['circular'***REMOVED******REMOVED***
        assert_array_equal(l, r***REMOVED***

class TestWarnings(object***REMOVED***:

    def test_complex_warning(self***REMOVED***:
        x = np.array([1, 2***REMOVED******REMOVED***
        y = np.array([1-2j, 1+2j***REMOVED******REMOVED***

        with warnings.catch_warnings(***REMOVED***:
            warnings.simplefilter("error", np.ComplexWarning***REMOVED***
            assert_raises(np.ComplexWarning, x.__setitem__, slice(None***REMOVED***, y***REMOVED***
            assert_equal(x, [1, 2***REMOVED******REMOVED***


class TestMinScalarType(object***REMOVED***:

    def test_usigned_shortshort(self***REMOVED***:
        dt = np.min_scalar_type(2**8-1***REMOVED***
        wanted = np.dtype('uint8'***REMOVED***
        assert_equal(wanted, dt***REMOVED***

    def test_usigned_short(self***REMOVED***:
        dt = np.min_scalar_type(2**16-1***REMOVED***
        wanted = np.dtype('uint16'***REMOVED***
        assert_equal(wanted, dt***REMOVED***

    def test_usigned_int(self***REMOVED***:
        dt = np.min_scalar_type(2**32-1***REMOVED***
        wanted = np.dtype('uint32'***REMOVED***
        assert_equal(wanted, dt***REMOVED***

    def test_usigned_longlong(self***REMOVED***:
        dt = np.min_scalar_type(2**63-1***REMOVED***
        wanted = np.dtype('uint64'***REMOVED***
        assert_equal(wanted, dt***REMOVED***

    def test_object(self***REMOVED***:
        dt = np.min_scalar_type(2**64***REMOVED***
        wanted = np.dtype('O'***REMOVED***
        assert_equal(wanted, dt***REMOVED***


if sys.version_info[:2***REMOVED*** == (2, 6***REMOVED***:
    from numpy.core.multiarray import memorysimpleview as memoryview

from numpy.core._internal import _dtype_from_pep3118


class TestPEP3118Dtype(object***REMOVED***:
    def _check(self, spec, wanted***REMOVED***:
        dt = np.dtype(wanted***REMOVED***
        if isinstance(wanted, list***REMOVED*** and isinstance(wanted[-1***REMOVED***, tuple***REMOVED***:
            if wanted[-1***REMOVED***[0***REMOVED*** == '':
                names = list(dt.names***REMOVED***
                names[-1***REMOVED*** = ''
                dt.names = tuple(names***REMOVED***
        assert_equal(_dtype_from_pep3118(spec***REMOVED***, dt,
                     err_msg="spec %r != dtype %r" % (spec, wanted***REMOVED******REMOVED***

    def test_native_padding(self***REMOVED***:
        align = np.dtype('i'***REMOVED***.alignment
        for j in range(8***REMOVED***:
            if j == 0:
                s = 'bi'
            else:
                s = 'b%dxi' % j
            self._check('@'+s, {'f0': ('i1', 0***REMOVED***,
                                'f1': ('i', align*(1 + j//align***REMOVED******REMOVED******REMOVED******REMOVED***
            self._check('='+s, {'f0': ('i1', 0***REMOVED***,
                                'f1': ('i', 1+j***REMOVED******REMOVED******REMOVED***

    def test_native_padding_2(self***REMOVED***:
        # Native padding should work also for structs and sub-arrays
        self._check('x3T{xi***REMOVED***', {'f0': (({'f0': ('i', 4***REMOVED******REMOVED***, (3,***REMOVED******REMOVED***, 4***REMOVED******REMOVED******REMOVED***
        self._check('^x3T{xi***REMOVED***', {'f0': (({'f0': ('i', 1***REMOVED******REMOVED***, (3,***REMOVED******REMOVED***, 1***REMOVED******REMOVED******REMOVED***

    def test_trailing_padding(self***REMOVED***:
        # Trailing padding should be included, *and*, the item size
        # should match the alignment if in aligned mode
        align = np.dtype('i'***REMOVED***.alignment

        def VV(n***REMOVED***:
            return 'V%d' % (align*(1 + (n-1***REMOVED***//align***REMOVED******REMOVED***

        self._check('ix', [('f0', 'i'***REMOVED***, ('', VV(1***REMOVED******REMOVED******REMOVED******REMOVED***
        self._check('ixx', [('f0', 'i'***REMOVED***, ('', VV(2***REMOVED******REMOVED******REMOVED******REMOVED***
        self._check('ixxx', [('f0', 'i'***REMOVED***, ('', VV(3***REMOVED******REMOVED******REMOVED******REMOVED***
        self._check('ixxxx', [('f0', 'i'***REMOVED***, ('', VV(4***REMOVED******REMOVED******REMOVED******REMOVED***
        self._check('i7x', [('f0', 'i'***REMOVED***, ('', VV(7***REMOVED******REMOVED******REMOVED******REMOVED***

        self._check('^ix', [('f0', 'i'***REMOVED***, ('', 'V1'***REMOVED******REMOVED******REMOVED***
        self._check('^ixx', [('f0', 'i'***REMOVED***, ('', 'V2'***REMOVED******REMOVED******REMOVED***
        self._check('^ixxx', [('f0', 'i'***REMOVED***, ('', 'V3'***REMOVED******REMOVED******REMOVED***
        self._check('^ixxxx', [('f0', 'i'***REMOVED***, ('', 'V4'***REMOVED******REMOVED******REMOVED***
        self._check('^i7x', [('f0', 'i'***REMOVED***, ('', 'V7'***REMOVED******REMOVED******REMOVED***

    def test_native_padding_3(self***REMOVED***:
        dt = np.dtype(
                [('a', 'b'***REMOVED***, ('b', 'i'***REMOVED***,
                    ('sub', np.dtype('b,i'***REMOVED******REMOVED***, ('c', 'i'***REMOVED******REMOVED***,
                align=True***REMOVED***
        self._check("T{b:a:xxxi:b:T{b:f0:=i:f1:***REMOVED***:sub:xxxi:c:***REMOVED***", dt***REMOVED***

        dt = np.dtype(
                [('a', 'b'***REMOVED***, ('b', 'i'***REMOVED***, ('c', 'b'***REMOVED***, ('d', 'b'***REMOVED***,
                    ('e', 'b'***REMOVED***, ('sub', np.dtype('b,i', align=True***REMOVED******REMOVED******REMOVED******REMOVED***
        self._check("T{b:a:=i:b:b:c:b:d:b:e:T{b:f0:xxxi:f1:***REMOVED***:sub:***REMOVED***", dt***REMOVED***

    def test_padding_with_array_inside_struct(self***REMOVED***:
        dt = np.dtype(
                [('a', 'b'***REMOVED***, ('b', 'i'***REMOVED***, ('c', 'b', (3,***REMOVED******REMOVED***,
                    ('d', 'i'***REMOVED******REMOVED***,
                align=True***REMOVED***
        self._check("T{b:a:xxxi:b:3b:c:xi:d:***REMOVED***", dt***REMOVED***

    def test_byteorder_inside_struct(self***REMOVED***:
        # The byte order after @T{=i***REMOVED*** should be '=', not '@'.
        # Check this by noting the absence of native alignment.
        self._check('@T{^i***REMOVED***xi', {'f0': ({'f0': ('i', 0***REMOVED******REMOVED***, 0***REMOVED***,
                                 'f1': ('i', 5***REMOVED******REMOVED******REMOVED***

    def test_intra_padding(self***REMOVED***:
        # Natively aligned sub-arrays may require some internal padding
        align = np.dtype('i'***REMOVED***.alignment

        def VV(n***REMOVED***:
            return 'V%d' % (align*(1 + (n-1***REMOVED***//align***REMOVED******REMOVED***

        self._check('(3***REMOVED***T{ix***REMOVED***', ({'f0': ('i', 0***REMOVED***, '': (VV(1***REMOVED***, 4***REMOVED******REMOVED***, (3,***REMOVED******REMOVED******REMOVED***


class TestNewBufferProtocol(object***REMOVED***:
    def _check_roundtrip(self, obj***REMOVED***:
        obj = np.asarray(obj***REMOVED***
        x = memoryview(obj***REMOVED***
        y = np.asarray(x***REMOVED***
        y2 = np.array(x***REMOVED***
        assert_(not y.flags.owndata***REMOVED***
        assert_(y2.flags.owndata***REMOVED***

        assert_equal(y.dtype, obj.dtype***REMOVED***
        assert_equal(y.shape, obj.shape***REMOVED***
        assert_array_equal(obj, y***REMOVED***

        assert_equal(y2.dtype, obj.dtype***REMOVED***
        assert_equal(y2.shape, obj.shape***REMOVED***
        assert_array_equal(obj, y2***REMOVED***

    def test_roundtrip(self***REMOVED***:
        x = np.array([1, 2, 3, 4, 5***REMOVED***, dtype='i4'***REMOVED***
        self._check_roundtrip(x***REMOVED***

        x = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED***, dtype=np.float64***REMOVED***
        self._check_roundtrip(x***REMOVED***

        x = np.zeros((3, 3, 3***REMOVED***, dtype=np.float32***REMOVED***[:, 0,:***REMOVED***
        self._check_roundtrip(x***REMOVED***

        dt = [('a', 'b'***REMOVED***,
              ('b', 'h'***REMOVED***,
              ('c', 'i'***REMOVED***,
              ('d', 'l'***REMOVED***,
              ('dx', 'q'***REMOVED***,
              ('e', 'B'***REMOVED***,
              ('f', 'H'***REMOVED***,
              ('g', 'I'***REMOVED***,
              ('h', 'L'***REMOVED***,
              ('hx', 'Q'***REMOVED***,
              ('i', np.single***REMOVED***,
              ('j', np.double***REMOVED***,
              ('k', np.longdouble***REMOVED***,
              ('ix', np.csingle***REMOVED***,
              ('jx', np.cdouble***REMOVED***,
              ('kx', np.clongdouble***REMOVED***,
              ('l', 'S4'***REMOVED***,
              ('m', 'U4'***REMOVED***,
              ('n', 'V3'***REMOVED***,
              ('o', '?'***REMOVED***,
              ('p', np.half***REMOVED***,
              ***REMOVED***
        x = np.array(
                [(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    asbytes('aaaa'***REMOVED***, 'bbbb', asbytes('xxx'***REMOVED***, True, 1.0***REMOVED******REMOVED***,
                dtype=dt***REMOVED***
        self._check_roundtrip(x***REMOVED***

        x = np.array(([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED***,***REMOVED***, dtype=[('a', (int, (2, 2***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        self._check_roundtrip(x***REMOVED***

        x = np.array([1, 2, 3***REMOVED***, dtype='>i2'***REMOVED***
        self._check_roundtrip(x***REMOVED***

        x = np.array([1, 2, 3***REMOVED***, dtype='<i2'***REMOVED***
        self._check_roundtrip(x***REMOVED***

        x = np.array([1, 2, 3***REMOVED***, dtype='>i4'***REMOVED***
        self._check_roundtrip(x***REMOVED***

        x = np.array([1, 2, 3***REMOVED***, dtype='<i4'***REMOVED***
        self._check_roundtrip(x***REMOVED***

        # check long long can be represented as non-native
        x = np.array([1, 2, 3***REMOVED***, dtype='>q'***REMOVED***
        self._check_roundtrip(x***REMOVED***

        # Native-only data types can be passed through the buffer interface
        # only in native byte order
        if sys.byteorder == 'little':
            x = np.array([1, 2, 3***REMOVED***, dtype='>g'***REMOVED***
            assert_raises(ValueError, self._check_roundtrip, x***REMOVED***
            x = np.array([1, 2, 3***REMOVED***, dtype='<g'***REMOVED***
            self._check_roundtrip(x***REMOVED***
        else:
            x = np.array([1, 2, 3***REMOVED***, dtype='>g'***REMOVED***
            self._check_roundtrip(x***REMOVED***
            x = np.array([1, 2, 3***REMOVED***, dtype='<g'***REMOVED***
            assert_raises(ValueError, self._check_roundtrip, x***REMOVED***

    def test_roundtrip_half(self***REMOVED***:
        half_list = [
            1.0,
            -2.0,
            6.5504 * 10**4,  # (max half precision***REMOVED***
            2**-14,  # ~= 6.10352 * 10**-5 (minimum positive normal***REMOVED***
            2**-24,  # ~= 5.96046 * 10**-8 (minimum strictly positive subnormal***REMOVED***
            0.0,
            -0.0,
            float('+inf'***REMOVED***,
            float('-inf'***REMOVED***,
            0.333251953125,  # ~= 1/3
        ***REMOVED***

        x = np.array(half_list, dtype='>e'***REMOVED***
        self._check_roundtrip(x***REMOVED***
        x = np.array(half_list, dtype='<e'***REMOVED***
        self._check_roundtrip(x***REMOVED***

    def test_roundtrip_single_types(self***REMOVED***:
        for typ in np.typeDict.values(***REMOVED***:
            dtype = np.dtype(typ***REMOVED***

            if dtype.char in 'Mm':
                # datetimes cannot be used in buffers
                continue
            if dtype.char == 'V':
                # skip void
                continue

            x = np.zeros(4, dtype=dtype***REMOVED***
            self._check_roundtrip(x***REMOVED***

            if dtype.char not in 'qQgG':
                dt = dtype.newbyteorder('<'***REMOVED***
                x = np.zeros(4, dtype=dt***REMOVED***
                self._check_roundtrip(x***REMOVED***

                dt = dtype.newbyteorder('>'***REMOVED***
                x = np.zeros(4, dtype=dt***REMOVED***
                self._check_roundtrip(x***REMOVED***

    def test_roundtrip_scalar(self***REMOVED***:
        # Issue #4015.
        self._check_roundtrip(0***REMOVED***

    def test_export_simple_1d(self***REMOVED***:
        x = np.array([1, 2, 3, 4, 5***REMOVED***, dtype='i'***REMOVED***
        y = memoryview(x***REMOVED***
        assert_equal(y.format, 'i'***REMOVED***
        assert_equal(y.shape, (5,***REMOVED******REMOVED***
        assert_equal(y.ndim, 1***REMOVED***
        assert_equal(y.strides, (4,***REMOVED******REMOVED***
        assert_equal(y.suboffsets, EMPTY***REMOVED***
        assert_equal(y.itemsize, 4***REMOVED***

    def test_export_simple_nd(self***REMOVED***:
        x = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED***, dtype=np.float64***REMOVED***
        y = memoryview(x***REMOVED***
        assert_equal(y.format, 'd'***REMOVED***
        assert_equal(y.shape, (2, 2***REMOVED******REMOVED***
        assert_equal(y.ndim, 2***REMOVED***
        assert_equal(y.strides, (16, 8***REMOVED******REMOVED***
        assert_equal(y.suboffsets, EMPTY***REMOVED***
        assert_equal(y.itemsize, 8***REMOVED***

    def test_export_discontiguous(self***REMOVED***:
        x = np.zeros((3, 3, 3***REMOVED***, dtype=np.float32***REMOVED***[:, 0,:***REMOVED***
        y = memoryview(x***REMOVED***
        assert_equal(y.format, 'f'***REMOVED***
        assert_equal(y.shape, (3, 3***REMOVED******REMOVED***
        assert_equal(y.ndim, 2***REMOVED***
        assert_equal(y.strides, (36, 4***REMOVED******REMOVED***
        assert_equal(y.suboffsets, EMPTY***REMOVED***
        assert_equal(y.itemsize, 4***REMOVED***

    def test_export_record(self***REMOVED***:
        dt = [('a', 'b'***REMOVED***,
              ('b', 'h'***REMOVED***,
              ('c', 'i'***REMOVED***,
              ('d', 'l'***REMOVED***,
              ('dx', 'q'***REMOVED***,
              ('e', 'B'***REMOVED***,
              ('f', 'H'***REMOVED***,
              ('g', 'I'***REMOVED***,
              ('h', 'L'***REMOVED***,
              ('hx', 'Q'***REMOVED***,
              ('i', np.single***REMOVED***,
              ('j', np.double***REMOVED***,
              ('k', np.longdouble***REMOVED***,
              ('ix', np.csingle***REMOVED***,
              ('jx', np.cdouble***REMOVED***,
              ('kx', np.clongdouble***REMOVED***,
              ('l', 'S4'***REMOVED***,
              ('m', 'U4'***REMOVED***,
              ('n', 'V3'***REMOVED***,
              ('o', '?'***REMOVED***,
              ('p', np.half***REMOVED***,
              ***REMOVED***
        x = np.array(
                [(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    asbytes('aaaa'***REMOVED***, 'bbbb', asbytes('   '***REMOVED***, True, 1.0***REMOVED******REMOVED***,
                dtype=dt***REMOVED***
        y = memoryview(x***REMOVED***
        assert_equal(y.shape, (1,***REMOVED******REMOVED***
        assert_equal(y.ndim, 1***REMOVED***
        assert_equal(y.suboffsets, EMPTY***REMOVED***

        sz = sum([np.dtype(b***REMOVED***.itemsize for a, b in dt***REMOVED******REMOVED***
        if np.dtype('l'***REMOVED***.itemsize == 4:
            assert_equal(y.format, 'T{b:a:=h:b:i:c:l:d:q:dx:B:e:@H:f:=I:g:L:h:Q:hx:f:i:d:j:^g:k:=Zf:ix:Zd:jx:^Zg:kx:4s:l:=4w:m:3x:n:?:o:@e:p:***REMOVED***'***REMOVED***
        else:
            assert_equal(y.format, 'T{b:a:=h:b:i:c:q:d:q:dx:B:e:@H:f:=I:g:Q:h:Q:hx:f:i:d:j:^g:k:=Zf:ix:Zd:jx:^Zg:kx:4s:l:=4w:m:3x:n:?:o:@e:p:***REMOVED***'***REMOVED***
        # Cannot test if NPY_RELAXED_STRIDES_CHECKING changes the strides
        if not (np.ones(1***REMOVED***.strides[0***REMOVED*** == np.iinfo(np.intp***REMOVED***.max***REMOVED***:
            assert_equal(y.strides, (sz,***REMOVED******REMOVED***
        assert_equal(y.itemsize, sz***REMOVED***

    def test_export_subarray(self***REMOVED***:
        x = np.array(([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED***,***REMOVED***, dtype=[('a', ('i', (2, 2***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        y = memoryview(x***REMOVED***
        assert_equal(y.format, 'T{(2,2***REMOVED***i:a:***REMOVED***'***REMOVED***
        assert_equal(y.shape, EMPTY***REMOVED***
        assert_equal(y.ndim, 0***REMOVED***
        assert_equal(y.strides, EMPTY***REMOVED***
        assert_equal(y.suboffsets, EMPTY***REMOVED***
        assert_equal(y.itemsize, 16***REMOVED***

    def test_export_endian(self***REMOVED***:
        x = np.array([1, 2, 3***REMOVED***, dtype='>i'***REMOVED***
        y = memoryview(x***REMOVED***
        if sys.byteorder == 'little':
            assert_equal(y.format, '>i'***REMOVED***
        else:
            assert_equal(y.format, 'i'***REMOVED***

        x = np.array([1, 2, 3***REMOVED***, dtype='<i'***REMOVED***
        y = memoryview(x***REMOVED***
        if sys.byteorder == 'little':
            assert_equal(y.format, 'i'***REMOVED***
        else:
            assert_equal(y.format, '<i'***REMOVED***

    def test_export_flags(self***REMOVED***:
        # Check SIMPLE flag, see also gh-3613 (exception should be BufferError***REMOVED***
        assert_raises(ValueError, get_buffer_info, np.arange(5***REMOVED***[::2***REMOVED***, ('SIMPLE',***REMOVED******REMOVED***

    def test_padding(self***REMOVED***:
        for j in range(8***REMOVED***:
            x = np.array([(1,***REMOVED***, (2,***REMOVED******REMOVED***, dtype={'f0': (int, j***REMOVED******REMOVED******REMOVED***
            self._check_roundtrip(x***REMOVED***

    def test_reference_leak(self***REMOVED***:
        count_1 = sys.getrefcount(np.core._internal***REMOVED***
        a = np.zeros(4***REMOVED***
        b = memoryview(a***REMOVED***
        c = np.asarray(b***REMOVED***
        count_2 = sys.getrefcount(np.core._internal***REMOVED***
        assert_equal(count_1, count_2***REMOVED***
        del c  # avoid pyflakes unused variable warning.

    def test_padded_struct_array(self***REMOVED***:
        dt1 = np.dtype(
                [('a', 'b'***REMOVED***, ('b', 'i'***REMOVED***, ('sub', np.dtype('b,i'***REMOVED******REMOVED***, ('c', 'i'***REMOVED******REMOVED***,
                align=True***REMOVED***
        x1 = np.arange(dt1.itemsize, dtype=np.int8***REMOVED***.view(dt1***REMOVED***
        self._check_roundtrip(x1***REMOVED***

        dt2 = np.dtype(
                [('a', 'b'***REMOVED***, ('b', 'i'***REMOVED***, ('c', 'b', (3,***REMOVED******REMOVED***, ('d', 'i'***REMOVED******REMOVED***,
                align=True***REMOVED***
        x2 = np.arange(dt2.itemsize, dtype=np.int8***REMOVED***.view(dt2***REMOVED***
        self._check_roundtrip(x2***REMOVED***

        dt3 = np.dtype(
                [('a', 'b'***REMOVED***, ('b', 'i'***REMOVED***, ('c', 'b'***REMOVED***, ('d', 'b'***REMOVED***,
                    ('e', 'b'***REMOVED***, ('sub', np.dtype('b,i', align=True***REMOVED******REMOVED******REMOVED******REMOVED***
        x3 = np.arange(dt3.itemsize, dtype=np.int8***REMOVED***.view(dt3***REMOVED***
        self._check_roundtrip(x3***REMOVED***

    def test_relaxed_strides(self***REMOVED***:
        # Test that relaxed strides are converted to non-relaxed
        c = np.ones((1, 10, 10***REMOVED***, dtype='i8'***REMOVED***

        # Check for NPY_RELAXED_STRIDES_CHECKING:
        if np.ones((10, 1***REMOVED***, order="C"***REMOVED***.flags.f_contiguous:
            c.strides = (-1, 80, 8***REMOVED***

        assert_(memoryview(c***REMOVED***.strides == (800, 80, 8***REMOVED******REMOVED***

        # Writing C-contiguous data to a BytesIO buffer should work
        fd = io.BytesIO(***REMOVED***
        fd.write(c.data***REMOVED***

        fortran = c.T
        assert_(memoryview(fortran***REMOVED***.strides == (8, 80, 800***REMOVED******REMOVED***

        arr = np.ones((1, 10***REMOVED******REMOVED***
        if arr.flags.f_contiguous:
            shape, strides = get_buffer_info(arr, ['F_CONTIGUOUS'***REMOVED******REMOVED***
            assert_(strides[0***REMOVED*** == 8***REMOVED***
            arr = np.ones((10, 1***REMOVED***, order='F'***REMOVED***
            shape, strides = get_buffer_info(arr, ['C_CONTIGUOUS'***REMOVED******REMOVED***
            assert_(strides[-1***REMOVED*** == 8***REMOVED***


class TestArrayAttributeDeletion(object***REMOVED***:

    def test_multiarray_writable_attributes_deletion(self***REMOVED***:
        ***REMOVED***ticket #2046, should not seqfault, raise AttributeError***REMOVED***
        a = np.ones(2***REMOVED***
        attr = ['shape', 'strides', 'data', 'dtype', 'real', 'imag', 'flat'***REMOVED***
        with warnings.catch_warnings(***REMOVED***:
            warnings.simplefilter('ignore'***REMOVED***
            for s in attr:
                assert_raises(AttributeError, delattr, a, s***REMOVED***

    def test_multiarray_not_writable_attributes_deletion(self***REMOVED***:
        a = np.ones(2***REMOVED***
        attr = ["ndim", "flags", "itemsize", "size", "nbytes", "base",
                "ctypes", "T", "__array_interface__", "__array_struct__",
                "__array_priority__", "__array_finalize__"***REMOVED***
        for s in attr:
            assert_raises(AttributeError, delattr, a, s***REMOVED***

    def test_multiarray_flags_writable_attribute_deletion(self***REMOVED***:
        a = np.ones(2***REMOVED***.flags
        attr = ['updateifcopy', 'aligned', 'writeable'***REMOVED***
        for s in attr:
            assert_raises(AttributeError, delattr, a, s***REMOVED***

    def test_multiarray_flags_not_writable_attribute_deletion(self***REMOVED***:
        a = np.ones(2***REMOVED***.flags
        attr = ["contiguous", "c_contiguous", "f_contiguous", "fortran",
                "owndata", "fnc", "forc", "behaved", "carray", "farray",
                "num"***REMOVED***
        for s in attr:
            assert_raises(AttributeError, delattr, a, s***REMOVED***


def test_array_interface(***REMOVED***:
    # Test scalar coercion within the array interface
    class Foo(object***REMOVED***:
        def __init__(self, value***REMOVED***:
            self.value = value
            self.iface = {'typestr': '=f8'***REMOVED***

        def __float__(self***REMOVED***:
            return float(self.value***REMOVED***

        @property
        def __array_interface__(self***REMOVED***:
            return self.iface

    f = Foo(0.5***REMOVED***
    assert_equal(np.array(f***REMOVED***, 0.5***REMOVED***
    assert_equal(np.array([f***REMOVED******REMOVED***, [0.5***REMOVED******REMOVED***
    assert_equal(np.array([f, f***REMOVED******REMOVED***, [0.5, 0.5***REMOVED******REMOVED***
    assert_equal(np.array(f***REMOVED***.dtype, np.dtype('=f8'***REMOVED******REMOVED***
    # Test various shape definitions
    f.iface['shape'***REMOVED*** = (***REMOVED***
    assert_equal(np.array(f***REMOVED***, 0.5***REMOVED***
    f.iface['shape'***REMOVED*** = None
    assert_raises(TypeError, np.array, f***REMOVED***
    f.iface['shape'***REMOVED*** = (1, 1***REMOVED***
    assert_equal(np.array(f***REMOVED***, [[0.5***REMOVED******REMOVED******REMOVED***
    f.iface['shape'***REMOVED*** = (2,***REMOVED***
    assert_raises(ValueError, np.array, f***REMOVED***

    # test scalar with no shape
    class ArrayLike(object***REMOVED***:
        array = np.array(1***REMOVED***
        __array_interface__ = array.__array_interface__
    assert_equal(np.array(ArrayLike(***REMOVED******REMOVED***, 1***REMOVED***


def test_array_interface_itemsize(***REMOVED***:
    # See gh-6361
    my_dtype = np.dtype({'names': ['A', 'B'***REMOVED***, 'formats': ['f4', 'f4'***REMOVED***,
                         'offsets': [0, 8***REMOVED***, 'itemsize': 16***REMOVED******REMOVED***
    a = np.ones(10, dtype=my_dtype***REMOVED***
    descr_t = np.dtype(a.__array_interface__['descr'***REMOVED******REMOVED***
    typestr_t = np.dtype(a.__array_interface__['typestr'***REMOVED******REMOVED***
    assert_equal(descr_t.itemsize, typestr_t.itemsize***REMOVED***


def test_flat_element_deletion(***REMOVED***:
    it = np.ones(3***REMOVED***.flat
    ***REMOVED***
        del it[1***REMOVED***
        del it[1:2***REMOVED***
    except TypeError:
        pass
    ***REMOVED***
        raise AssertionError


def test_scalar_element_deletion(***REMOVED***:
    a = np.zeros(2, dtype=[('x', 'int'***REMOVED***, ('y', 'int'***REMOVED******REMOVED******REMOVED***
    assert_raises(ValueError, a[0***REMOVED***.__delitem__, 'x'***REMOVED***


class TestMemEventHook(TestCase***REMOVED***:
    def test_mem_seteventhook(self***REMOVED***:
        # The actual tests are within the C code in
        # multiarray/multiarray_tests.c.src
        test_pydatamem_seteventhook_start(***REMOVED***
        # force an allocation and free of a numpy array
        # needs to be larger then limit of small memory cacher in ctors.c
        a = np.zeros(1000***REMOVED***
        del a
        test_pydatamem_seteventhook_end(***REMOVED***

class TestMapIter(TestCase***REMOVED***:
    def test_mapiter(self***REMOVED***:
        # The actual tests are within the C code in
        # multiarray/multiarray_tests.c.src

        a = np.arange(12***REMOVED***.reshape((3, 4***REMOVED******REMOVED***.astype(float***REMOVED***
        index = ([1, 1, 2, 0***REMOVED***,
                 [0, 0, 2, 3***REMOVED******REMOVED***
        vals = [50, 50, 30, 16***REMOVED***

        test_inplace_increment(a, index, vals***REMOVED***
        assert_equal(a, [[0.00, 1., 2.0, 19.***REMOVED***,
                         [104., 5., 6.0, 7.0***REMOVED***,
                         [8.00, 9., 40., 11.***REMOVED******REMOVED******REMOVED***

        b = np.arange(6***REMOVED***.astype(float***REMOVED***
        index = (np.array([1, 2, 0***REMOVED******REMOVED***,***REMOVED***
        vals = [50, 4, 100.1***REMOVED***
        test_inplace_increment(b, index, vals***REMOVED***
        assert_equal(b, [100.1,  51.,   6.,   3.,   4.,   5.***REMOVED******REMOVED***


class TestAsCArray(TestCase***REMOVED***:
    def test_1darray(self***REMOVED***:
        array = np.arange(24, dtype=np.double***REMOVED***
        from_c = test_as_c_array(array, 3***REMOVED***
        assert_equal(array[3***REMOVED***, from_c***REMOVED***

    def test_2darray(self***REMOVED***:
        array = np.arange(24, dtype=np.double***REMOVED***.reshape(3, 8***REMOVED***
        from_c = test_as_c_array(array, 2, 4***REMOVED***
        assert_equal(array[2, 4***REMOVED***, from_c***REMOVED***

    def test_3darray(self***REMOVED***:
        array = np.arange(24, dtype=np.double***REMOVED***.reshape(2, 3, 4***REMOVED***
        from_c = test_as_c_array(array, 1, 2, 3***REMOVED***
        assert_equal(array[1, 2, 3***REMOVED***, from_c***REMOVED***


class TestConversion(TestCase***REMOVED***:
    def test_array_scalar_relational_operation(self***REMOVED***:
        # All integer
        for dt1 in np.typecodes['AllInteger'***REMOVED***:
            assert_(1 > np.array(0, dtype=dt1***REMOVED***, "type %s failed" % (dt1,***REMOVED******REMOVED***
            assert_(not 1 < np.array(0, dtype=dt1***REMOVED***, "type %s failed" % (dt1,***REMOVED******REMOVED***

            for dt2 in np.typecodes['AllInteger'***REMOVED***:
                assert_(np.array(1, dtype=dt1***REMOVED*** > np.array(0, dtype=dt2***REMOVED***,
                        "type %s and %s failed" % (dt1, dt2***REMOVED******REMOVED***
                assert_(not np.array(1, dtype=dt1***REMOVED*** < np.array(0, dtype=dt2***REMOVED***,
                        "type %s and %s failed" % (dt1, dt2***REMOVED******REMOVED***

        # Unsigned integers
        for dt1 in 'BHILQP':
            assert_(-1 < np.array(1, dtype=dt1***REMOVED***, "type %s failed" % (dt1,***REMOVED******REMOVED***
            assert_(not -1 > np.array(1, dtype=dt1***REMOVED***, "type %s failed" % (dt1,***REMOVED******REMOVED***
            assert_(-1 != np.array(1, dtype=dt1***REMOVED***, "type %s failed" % (dt1,***REMOVED******REMOVED***

            # Unsigned vs signed
            for dt2 in 'bhilqp':
                assert_(np.array(1, dtype=dt1***REMOVED*** > np.array(-1, dtype=dt2***REMOVED***,
                        "type %s and %s failed" % (dt1, dt2***REMOVED******REMOVED***
                assert_(not np.array(1, dtype=dt1***REMOVED*** < np.array(-1, dtype=dt2***REMOVED***,
                        "type %s and %s failed" % (dt1, dt2***REMOVED******REMOVED***
                assert_(np.array(1, dtype=dt1***REMOVED*** != np.array(-1, dtype=dt2***REMOVED***,
                        "type %s and %s failed" % (dt1, dt2***REMOVED******REMOVED***

        # Signed integers and floats
        for dt1 in 'bhlqp' + np.typecodes['Float'***REMOVED***:
            assert_(1 > np.array(-1, dtype=dt1***REMOVED***, "type %s failed" % (dt1,***REMOVED******REMOVED***
            assert_(not 1 < np.array(-1, dtype=dt1***REMOVED***, "type %s failed" % (dt1,***REMOVED******REMOVED***
            assert_(-1 == np.array(-1, dtype=dt1***REMOVED***, "type %s failed" % (dt1,***REMOVED******REMOVED***

            for dt2 in 'bhlqp' + np.typecodes['Float'***REMOVED***:
                assert_(np.array(1, dtype=dt1***REMOVED*** > np.array(-1, dtype=dt2***REMOVED***,
                        "type %s and %s failed" % (dt1, dt2***REMOVED******REMOVED***
                assert_(not np.array(1, dtype=dt1***REMOVED*** < np.array(-1, dtype=dt2***REMOVED***,
                        "type %s and %s failed" % (dt1, dt2***REMOVED******REMOVED***
                assert_(np.array(-1, dtype=dt1***REMOVED*** == np.array(-1, dtype=dt2***REMOVED***,
                        "type %s and %s failed" % (dt1, dt2***REMOVED******REMOVED***


class TestWhere(TestCase***REMOVED***:
    def test_basic(self***REMOVED***:
        dts = [np.bool, np.int16, np.int32, np.int64, np.double, np.complex128,
               np.longdouble, np.clongdouble***REMOVED***
        for dt in dts:
            c = np.ones(53, dtype=np.bool***REMOVED***
            assert_equal(np.where( c, dt(0***REMOVED***, dt(1***REMOVED******REMOVED***, dt(0***REMOVED******REMOVED***
            assert_equal(np.where(~c, dt(0***REMOVED***, dt(1***REMOVED******REMOVED***, dt(1***REMOVED******REMOVED***
            assert_equal(np.where(True, dt(0***REMOVED***, dt(1***REMOVED******REMOVED***, dt(0***REMOVED******REMOVED***
            assert_equal(np.where(False, dt(0***REMOVED***, dt(1***REMOVED******REMOVED***, dt(1***REMOVED******REMOVED***
            d = np.ones_like(c***REMOVED***.astype(dt***REMOVED***
            e = np.zeros_like(d***REMOVED***
            r = d.astype(dt***REMOVED***
            c[7***REMOVED*** = False
            r[7***REMOVED*** = e[7***REMOVED***
            assert_equal(np.where(c, e, e***REMOVED***, e***REMOVED***
            assert_equal(np.where(c, d, e***REMOVED***, r***REMOVED***
            assert_equal(np.where(c, d, e[0***REMOVED******REMOVED***, r***REMOVED***
            assert_equal(np.where(c, d[0***REMOVED***, e***REMOVED***, r***REMOVED***
            assert_equal(np.where(c[::2***REMOVED***, d[::2***REMOVED***, e[::2***REMOVED******REMOVED***, r[::2***REMOVED******REMOVED***
            assert_equal(np.where(c[1::2***REMOVED***, d[1::2***REMOVED***, e[1::2***REMOVED******REMOVED***, r[1::2***REMOVED******REMOVED***
            assert_equal(np.where(c[::3***REMOVED***, d[::3***REMOVED***, e[::3***REMOVED******REMOVED***, r[::3***REMOVED******REMOVED***
            assert_equal(np.where(c[1::3***REMOVED***, d[1::3***REMOVED***, e[1::3***REMOVED******REMOVED***, r[1::3***REMOVED******REMOVED***
            assert_equal(np.where(c[::-2***REMOVED***, d[::-2***REMOVED***, e[::-2***REMOVED******REMOVED***, r[::-2***REMOVED******REMOVED***
            assert_equal(np.where(c[::-3***REMOVED***, d[::-3***REMOVED***, e[::-3***REMOVED******REMOVED***, r[::-3***REMOVED******REMOVED***
            assert_equal(np.where(c[1::-3***REMOVED***, d[1::-3***REMOVED***, e[1::-3***REMOVED******REMOVED***, r[1::-3***REMOVED******REMOVED***

    def test_exotic(self***REMOVED***:
        # object
        assert_array_equal(np.where(True, None, None***REMOVED***, np.array(None***REMOVED******REMOVED***
        # zero sized
        m = np.array([***REMOVED***, dtype=bool***REMOVED***.reshape(0, 3***REMOVED***
        b = np.array([***REMOVED***, dtype=np.float64***REMOVED***.reshape(0, 3***REMOVED***
        assert_array_equal(np.where(m, 0, b***REMOVED***, np.array([***REMOVED******REMOVED***.reshape(0, 3***REMOVED******REMOVED***

        # object cast
        d = np.array([-1.34, -0.16, -0.54, -0.31, -0.08, -0.95, 0.000, 0.313,
                      0.547, -0.18, 0.876, 0.236, 1.969, 0.310, 0.699, 1.013,
                      1.267, 0.229, -1.39, 0.487***REMOVED******REMOVED***
        nan = float('NaN'***REMOVED***
        e = np.array(['5z', '0l', nan, 'Wz', nan, nan, 'Xq', 'cs', nan, nan,
                     'QN', nan, nan, 'Fd', nan, nan, 'kp', nan, '36', 'i1'***REMOVED***,
                     dtype=object***REMOVED***
        m = np.array([0, 0, 1, 0, 1, 1, 0, 0, 1, 1,
                      0, 1, 1, 0, 1, 1, 0, 1, 0, 0***REMOVED***, dtype=bool***REMOVED***

        r = e[:***REMOVED***
        r[np.where(m***REMOVED******REMOVED*** = d[np.where(m***REMOVED******REMOVED***
        assert_array_equal(np.where(m, d, e***REMOVED***, r***REMOVED***

        r = e[:***REMOVED***
        r[np.where(~m***REMOVED******REMOVED*** = d[np.where(~m***REMOVED******REMOVED***
        assert_array_equal(np.where(m, e, d***REMOVED***, r***REMOVED***

        assert_array_equal(np.where(m, e, e***REMOVED***, e***REMOVED***

        # minimal dtype result with NaN scalar (e.g required by pandas***REMOVED***
        d = np.array([1., 2.***REMOVED***, dtype=np.float32***REMOVED***
        e = float('NaN'***REMOVED***
        assert_equal(np.where(True, d, e***REMOVED***.dtype, np.float32***REMOVED***
        e = float('Infinity'***REMOVED***
        assert_equal(np.where(True, d, e***REMOVED***.dtype, np.float32***REMOVED***
        e = float('-Infinity'***REMOVED***
        assert_equal(np.where(True, d, e***REMOVED***.dtype, np.float32***REMOVED***
        # also check upcast
        e = float(1e150***REMOVED***
        assert_equal(np.where(True, d, e***REMOVED***.dtype, np.float64***REMOVED***

    def test_ndim(self***REMOVED***:
        c = [True, False***REMOVED***
        a = np.zeros((2, 25***REMOVED******REMOVED***
        b = np.ones((2, 25***REMOVED******REMOVED***
        r = np.where(np.array(c***REMOVED***[:,np.newaxis***REMOVED***, a, b***REMOVED***
        assert_array_equal(r[0***REMOVED***, a[0***REMOVED******REMOVED***
        assert_array_equal(r[1***REMOVED***, b[0***REMOVED******REMOVED***

        a = a.T
        b = b.T
        r = np.where(c, a, b***REMOVED***
        assert_array_equal(r[:,0***REMOVED***, a[:,0***REMOVED******REMOVED***
        assert_array_equal(r[:,1***REMOVED***, b[:,0***REMOVED******REMOVED***

    def test_dtype_mix(self***REMOVED***:
        c = np.array([False, True, False, False, False, False, True, False,
                     False, False, True, False***REMOVED******REMOVED***
        a = np.uint32(1***REMOVED***
        b = np.array([5., 0., 3., 2., -1., -4., 0., -10., 10., 1., 0., 3.***REMOVED***,
                      dtype=np.float64***REMOVED***
        r = np.array([5., 1., 3., 2., -1., -4., 1., -10., 10., 1., 1., 3.***REMOVED***,
                     dtype=np.float64***REMOVED***
        assert_equal(np.where(c, a, b***REMOVED***, r***REMOVED***

        a = a.astype(np.float32***REMOVED***
        b = b.astype(np.int64***REMOVED***
        assert_equal(np.where(c, a, b***REMOVED***, r***REMOVED***

        # non bool mask
        c = c.astype(np.int***REMOVED***
        c[c != 0***REMOVED*** = 34242324
        assert_equal(np.where(c, a, b***REMOVED***, r***REMOVED***
        # invert
        tmpmask = c != 0
        c[c == 0***REMOVED*** = 41247212
        c[tmpmask***REMOVED*** = 0
        assert_equal(np.where(c, b, a***REMOVED***, r***REMOVED***

    def test_foreign(self***REMOVED***:
        c = np.array([False, True, False, False, False, False, True, False,
                     False, False, True, False***REMOVED******REMOVED***
        r = np.array([5., 1., 3., 2., -1., -4., 1., -10., 10., 1., 1., 3.***REMOVED***,
                     dtype=np.float64***REMOVED***
        a = np.ones(1, dtype='>i4'***REMOVED***
        b = np.array([5., 0., 3., 2., -1., -4., 0., -10., 10., 1., 0., 3.***REMOVED***,
                     dtype=np.float64***REMOVED***
        assert_equal(np.where(c, a, b***REMOVED***, r***REMOVED***

        b = b.astype('>f8'***REMOVED***
        assert_equal(np.where(c, a, b***REMOVED***, r***REMOVED***

        a = a.astype('<i4'***REMOVED***
        assert_equal(np.where(c, a, b***REMOVED***, r***REMOVED***

        c = c.astype('>i4'***REMOVED***
        assert_equal(np.where(c, a, b***REMOVED***, r***REMOVED***

    def test_error(self***REMOVED***:
        c = [True, True***REMOVED***
        a = np.ones((4, 5***REMOVED******REMOVED***
        b = np.ones((5, 5***REMOVED******REMOVED***
        assert_raises(ValueError, np.where, c, a, a***REMOVED***
        assert_raises(ValueError, np.where, c[0***REMOVED***, a, b***REMOVED***

    def test_string(self***REMOVED***:
        # gh-4778 check strings are properly filled with nulls
        a = np.array("abc"***REMOVED***
        b = np.array("x" * 753***REMOVED***
        assert_equal(np.where(True, a, b***REMOVED***, "abc"***REMOVED***
        assert_equal(np.where(False, b, a***REMOVED***, "abc"***REMOVED***

        # check native datatype sized strings
        a = np.array("abcd"***REMOVED***
        b = np.array("x" * 8***REMOVED***
        assert_equal(np.where(True, a, b***REMOVED***, "abcd"***REMOVED***
        assert_equal(np.where(False, b, a***REMOVED***, "abcd"***REMOVED***


class TestSizeOf(TestCase***REMOVED***:

    def test_empty_array(self***REMOVED***:
        x = np.array([***REMOVED******REMOVED***
        assert_(sys.getsizeof(x***REMOVED*** > 0***REMOVED***

    def check_array(self, dtype***REMOVED***:
        elem_size = dtype(0***REMOVED***.itemsize

        for length in [10, 50, 100, 500***REMOVED***:
            x = np.arange(length, dtype=dtype***REMOVED***
            assert_(sys.getsizeof(x***REMOVED*** > length * elem_size***REMOVED***

    def test_array_int32(self***REMOVED***:
        self.check_array(np.int32***REMOVED***

    def test_array_int64(self***REMOVED***:
        self.check_array(np.int64***REMOVED***

    def test_array_float32(self***REMOVED***:
        self.check_array(np.float32***REMOVED***

    def test_array_float64(self***REMOVED***:
        self.check_array(np.float64***REMOVED***

    def test_view(self***REMOVED***:
        d = np.ones(100***REMOVED***
        assert_(sys.getsizeof(d[...***REMOVED******REMOVED*** < sys.getsizeof(d***REMOVED******REMOVED***

    def test_reshape(self***REMOVED***:
        d = np.ones(100***REMOVED***
        assert_(sys.getsizeof(d***REMOVED*** < sys.getsizeof(d.reshape(100, 1, 1***REMOVED***.copy(***REMOVED******REMOVED******REMOVED***

    def test_resize(self***REMOVED***:
        d = np.ones(100***REMOVED***
        old = sys.getsizeof(d***REMOVED***
        d.resize(50***REMOVED***
        assert_(old > sys.getsizeof(d***REMOVED******REMOVED***
        d.resize(150***REMOVED***
        assert_(old < sys.getsizeof(d***REMOVED******REMOVED***

    def test_error(self***REMOVED***:
        d = np.ones(100***REMOVED***
        assert_raises(TypeError, d.__sizeof__, "a"***REMOVED***


class TestHashing(TestCase***REMOVED***:

    def test_arrays_not_hashable(self***REMOVED***:
        x = np.ones(3***REMOVED***
        assert_raises(TypeError, hash, x***REMOVED***

    def test_collections_hashable(self***REMOVED***:
        x = np.array([***REMOVED******REMOVED***
        self.assertFalse(isinstance(x, collections.Hashable***REMOVED******REMOVED***


class TestArrayPriority(TestCase***REMOVED***:
    # This will go away when __array_priority__ is settled, meanwhile
    # it serves to check unintended changes.
    op = operator
    binary_ops = [
        op.pow, op.add, op.sub, op.mul, op.floordiv, op.truediv, op.mod,
        op.and_, op.or_, op.xor, op.lshift, op.rshift, op.mod, op.gt,
        op.ge, op.lt, op.le, op.ne, op.eq
        ***REMOVED***

    if sys.version_info[0***REMOVED*** < 3:
        binary_ops.append(op.div***REMOVED***

    class Foo(np.ndarray***REMOVED***:
        __array_priority__ = 100.

        def __new__(cls, *args, **kwargs***REMOVED***:
            return np.array(*args, **kwargs***REMOVED***.view(cls***REMOVED***

    class Bar(np.ndarray***REMOVED***:
        __array_priority__ = 101.

        def __new__(cls, *args, **kwargs***REMOVED***:
            return np.array(*args, **kwargs***REMOVED***.view(cls***REMOVED***

    class Other(object***REMOVED***:
        __array_priority__ = 1000.

        def _all(self, other***REMOVED***:
            return self.__class__(***REMOVED***

        __add__ = __radd__ = _all
        __sub__ = __rsub__ = _all
        __mul__ = __rmul__ = _all
        __pow__ = __rpow__ = _all
        __div__ = __rdiv__ = _all
        __mod__ = __rmod__ = _all
        __truediv__ = __rtruediv__ = _all
        __floordiv__ = __rfloordiv__ = _all
        __and__ = __rand__ = _all
        __xor__ = __rxor__ = _all
        __or__ = __ror__ = _all
        __lshift__ = __rlshift__ = _all
        __rshift__ = __rrshift__ = _all
        __eq__ = _all
        __ne__ = _all
        __gt__ = _all
        __ge__ = _all
        __lt__ = _all
        __le__ = _all

    def test_ndarray_subclass(self***REMOVED***:
        a = np.array([1, 2***REMOVED******REMOVED***
        b = self.Bar([1, 2***REMOVED******REMOVED***
        for f in self.binary_ops:
            msg = repr(f***REMOVED***
            assert_(isinstance(f(a, b***REMOVED***, self.Bar***REMOVED***, msg***REMOVED***
            assert_(isinstance(f(b, a***REMOVED***, self.Bar***REMOVED***, msg***REMOVED***

    def test_ndarray_other(self***REMOVED***:
        a = np.array([1, 2***REMOVED******REMOVED***
        b = self.Other(***REMOVED***
        for f in self.binary_ops:
            msg = repr(f***REMOVED***
            assert_(isinstance(f(a, b***REMOVED***, self.Other***REMOVED***, msg***REMOVED***
            assert_(isinstance(f(b, a***REMOVED***, self.Other***REMOVED***, msg***REMOVED***

    def test_subclass_subclass(self***REMOVED***:
        a = self.Foo([1, 2***REMOVED******REMOVED***
        b = self.Bar([1, 2***REMOVED******REMOVED***
        for f in self.binary_ops:
            msg = repr(f***REMOVED***
            assert_(isinstance(f(a, b***REMOVED***, self.Bar***REMOVED***, msg***REMOVED***
            assert_(isinstance(f(b, a***REMOVED***, self.Bar***REMOVED***, msg***REMOVED***

    def test_subclass_other(self***REMOVED***:
        a = self.Foo([1, 2***REMOVED******REMOVED***
        b = self.Other(***REMOVED***
        for f in self.binary_ops:
            msg = repr(f***REMOVED***
            assert_(isinstance(f(a, b***REMOVED***, self.Other***REMOVED***, msg***REMOVED***
            assert_(isinstance(f(b, a***REMOVED***, self.Other***REMOVED***, msg***REMOVED***


class TestBytestringArrayNonzero(TestCase***REMOVED***:

    def test_empty_bstring_array_is_falsey(self***REMOVED***:
        self.assertFalse(np.array([''***REMOVED***, dtype=np.str***REMOVED******REMOVED***

    def test_whitespace_bstring_array_is_falsey(self***REMOVED***:
        a = np.array(['spam'***REMOVED***, dtype=np.str***REMOVED***
        a[0***REMOVED*** = '  \0\0'
        self.assertFalse(a***REMOVED***

    def test_all_null_bstring_array_is_falsey(self***REMOVED***:
        a = np.array(['spam'***REMOVED***, dtype=np.str***REMOVED***
        a[0***REMOVED*** = '\0\0\0\0'
        self.assertFalse(a***REMOVED***

    def test_null_inside_bstring_array_is_truthy(self***REMOVED***:
        a = np.array(['spam'***REMOVED***, dtype=np.str***REMOVED***
        a[0***REMOVED*** = ' \0 \0'
        self.assertTrue(a***REMOVED***


class TestUnicodeArrayNonzero(TestCase***REMOVED***:

    def test_empty_ustring_array_is_falsey(self***REMOVED***:
        self.assertFalse(np.array([''***REMOVED***, dtype=np.unicode***REMOVED******REMOVED***

    def test_whitespace_ustring_array_is_falsey(self***REMOVED***:
        a = np.array(['eggs'***REMOVED***, dtype=np.unicode***REMOVED***
        a[0***REMOVED*** = '  \0\0'
        self.assertFalse(a***REMOVED***

    def test_all_null_ustring_array_is_falsey(self***REMOVED***:
        a = np.array(['eggs'***REMOVED***, dtype=np.unicode***REMOVED***
        a[0***REMOVED*** = '\0\0\0\0'
        self.assertFalse(a***REMOVED***

    def test_null_inside_ustring_array_is_truthy(self***REMOVED***:
        a = np.array(['eggs'***REMOVED***, dtype=np.unicode***REMOVED***
        a[0***REMOVED*** = ' \0 \0'
        self.assertTrue(a***REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
