from __future__ import division, absolute_import, print_function

import locale

import numpy as np
from numpy.testing import (
    run_module_suite, assert_, assert_equal, dec, assert_raises,
    assert_array_equal, TestCase, temppath,
***REMOVED***
from numpy.compat import sixu
from test_print import in_foreign_locale

longdouble_longer_than_double = (np.finfo(np.longdouble***REMOVED***.eps
                                 < np.finfo(np.double***REMOVED***.eps***REMOVED***


_o = 1 + np.finfo(np.longdouble***REMOVED***.eps
string_to_longdouble_inaccurate = (_o != np.longdouble(repr(_o***REMOVED******REMOVED******REMOVED***
del _o


def test_scalar_extraction(***REMOVED***:
    ***REMOVED***Confirm that extracting a value doesn't convert to python float***REMOVED***
    o = 1 + np.finfo(np.longdouble***REMOVED***.eps
    a = np.array([o, o, o***REMOVED******REMOVED***
    assert_equal(a[1***REMOVED***, o***REMOVED***


# Conversions string -> long double


def test_repr_roundtrip(***REMOVED***:
    o = 1 + np.finfo(np.longdouble***REMOVED***.eps
    assert_equal(np.longdouble(repr(o***REMOVED******REMOVED***, o,
                 "repr was %s" % repr(o***REMOVED******REMOVED***


def test_unicode(***REMOVED***:
    np.longdouble(sixu("1.2"***REMOVED******REMOVED***


def test_string(***REMOVED***:
    np.longdouble("1.2"***REMOVED***


def test_bytes(***REMOVED***:
    np.longdouble(b"1.2"***REMOVED***


@in_foreign_locale
def test_fromstring_foreign(***REMOVED***:
    f = 1.234
    a = np.fromstring(repr(f***REMOVED***, dtype=float, sep=" "***REMOVED***
    assert_equal(a[0***REMOVED***, f***REMOVED***


@dec.knownfailureif(string_to_longdouble_inaccurate, "Need strtold_l"***REMOVED***
def test_repr_roundtrip_bytes(***REMOVED***:
    o = 1 + np.finfo(np.longdouble***REMOVED***.eps
    assert_equal(np.longdouble(repr(o***REMOVED***.encode("ascii"***REMOVED******REMOVED***, o***REMOVED***


@in_foreign_locale
def test_repr_roundtrip_foreign(***REMOVED***:
    o = 1.5
    assert_equal(o, np.longdouble(repr(o***REMOVED******REMOVED******REMOVED***


def test_bogus_string(***REMOVED***:
    assert_raises(ValueError, np.longdouble, "spam"***REMOVED***
    assert_raises(ValueError, np.longdouble, "1.0 flub"***REMOVED***


@dec.knownfailureif(string_to_longdouble_inaccurate, "Need strtold_l"***REMOVED***
def test_fromstring(***REMOVED***:
    o = 1 + np.finfo(np.longdouble***REMOVED***.eps
    s = (" " + repr(o***REMOVED******REMOVED****5
    a = np.array([o***REMOVED****5***REMOVED***
    assert_equal(np.fromstring(s, sep=" ", dtype=np.longdouble***REMOVED***, a,
                 err_msg="reading '%s'" % s***REMOVED***


@in_foreign_locale
def test_fromstring_best_effort_float(***REMOVED***:
    assert_equal(np.fromstring("1,234", dtype=float, sep=" "***REMOVED***,
                 np.array([1.***REMOVED******REMOVED******REMOVED***


@in_foreign_locale
def test_fromstring_best_effort(***REMOVED***:
    assert_equal(np.fromstring("1,234", dtype=np.longdouble, sep=" "***REMOVED***,
                 np.array([1.***REMOVED******REMOVED******REMOVED***


def test_fromstring_bogus(***REMOVED***:
    assert_equal(np.fromstring("1. 2. 3. flop 4.", dtype=float, sep=" "***REMOVED***,
                 np.array([1., 2., 3.***REMOVED******REMOVED******REMOVED***


def test_fromstring_empty(***REMOVED***:
    assert_equal(np.fromstring("xxxxx", sep="x"***REMOVED***,
                 np.array([***REMOVED******REMOVED******REMOVED***


def test_fromstring_missing(***REMOVED***:
    assert_equal(np.fromstring("1xx3x4x5x6", sep="x"***REMOVED***,
                 np.array([1***REMOVED******REMOVED******REMOVED***


class FileBased(TestCase***REMOVED***:

    ldbl = 1 + np.finfo(np.longdouble***REMOVED***.eps
    tgt = np.array([ldbl***REMOVED****5***REMOVED***
    out = ''.join([repr(t***REMOVED*** + '\n' for t in tgt***REMOVED******REMOVED***

    def test_fromfile_bogus(self***REMOVED***:
        with temppath(***REMOVED*** as path:
            with open(path, 'wt'***REMOVED*** as f:
                f.write("1. 2. 3. flop 4.\n"***REMOVED***
            res = np.fromfile(path, dtype=float, sep=" "***REMOVED***
        assert_equal(res, np.array([1., 2., 3.***REMOVED******REMOVED******REMOVED***

    @dec.knownfailureif(string_to_longdouble_inaccurate, "Need strtold_l"***REMOVED***
    def test_fromfile(self***REMOVED***:
        with temppath(***REMOVED*** as path:
            with open(path, 'wt'***REMOVED*** as f:
                f.write(self.out***REMOVED***
            res = np.fromfile(path, dtype=np.longdouble, sep="\n"***REMOVED***
        assert_equal(res, self.tgt***REMOVED***

    @dec.knownfailureif(string_to_longdouble_inaccurate, "Need strtold_l"***REMOVED***
    def test_genfromtxt(self***REMOVED***:
        with temppath(***REMOVED*** as path:
            with open(path, 'wt'***REMOVED*** as f:
                f.write(self.out***REMOVED***
            res = np.genfromtxt(path, dtype=np.longdouble***REMOVED***
        assert_equal(res, self.tgt***REMOVED***

    @dec.knownfailureif(string_to_longdouble_inaccurate, "Need strtold_l"***REMOVED***
    def test_loadtxt(self***REMOVED***:
        with temppath(***REMOVED*** as path:
            with open(path, 'wt'***REMOVED*** as f:
                f.write(self.out***REMOVED***
            res = np.loadtxt(path, dtype=np.longdouble***REMOVED***
        assert_equal(res, self.tgt***REMOVED***

    @dec.knownfailureif(string_to_longdouble_inaccurate, "Need strtold_l"***REMOVED***
    def test_tofile_roundtrip(self***REMOVED***:
        with temppath(***REMOVED*** as path:
            self.tgt.tofile(path, sep=" "***REMOVED***
            res = np.fromfile(path, dtype=np.longdouble, sep=" "***REMOVED***
        assert_equal(res, self.tgt***REMOVED***


@in_foreign_locale
def test_fromstring_foreign(***REMOVED***:
    s = "1.234"
    a = np.fromstring(s, dtype=np.longdouble, sep=" "***REMOVED***
    assert_equal(a[0***REMOVED***, np.longdouble(s***REMOVED******REMOVED***


@in_foreign_locale
def test_fromstring_foreign_sep(***REMOVED***:
    a = np.array([1, 2, 3, 4***REMOVED******REMOVED***
    b = np.fromstring("1,2,3,4,", dtype=np.longdouble, sep=","***REMOVED***
    assert_array_equal(a, b***REMOVED***


@in_foreign_locale
def test_fromstring_foreign_value(***REMOVED***:
    b = np.fromstring("1,234", dtype=np.longdouble, sep=" "***REMOVED***
    assert_array_equal(b[0***REMOVED***, 1***REMOVED***


# Conversions long double -> string


def test_repr_exact(***REMOVED***:
    o = 1 + np.finfo(np.longdouble***REMOVED***.eps
    assert_(repr(o***REMOVED*** != '1'***REMOVED***


@dec.knownfailureif(longdouble_longer_than_double, "BUG #2376"***REMOVED***
@dec.knownfailureif(string_to_longdouble_inaccurate, "Need strtold_l"***REMOVED***
def test_format(***REMOVED***:
    o = 1 + np.finfo(np.longdouble***REMOVED***.eps
    assert_("{0:.40g***REMOVED***".format(o***REMOVED*** != '1'***REMOVED***


@dec.knownfailureif(longdouble_longer_than_double, "BUG #2376"***REMOVED***
@dec.knownfailureif(string_to_longdouble_inaccurate, "Need strtold_l"***REMOVED***
def test_percent(***REMOVED***:
    o = 1 + np.finfo(np.longdouble***REMOVED***.eps
    assert_("%.40g" % o != '1'***REMOVED***


@dec.knownfailureif(longdouble_longer_than_double, "array repr problem"***REMOVED***
@dec.knownfailureif(string_to_longdouble_inaccurate, "Need strtold_l"***REMOVED***
def test_array_repr(***REMOVED***:
    o = 1 + np.finfo(np.longdouble***REMOVED***.eps
    a = np.array([o***REMOVED******REMOVED***
    b = np.array([1***REMOVED***, dtype=np.longdouble***REMOVED***
    if not np.all(a != b***REMOVED***:
        raise ValueError("precision loss creating arrays"***REMOVED***
    assert_(repr(a***REMOVED*** != repr(b***REMOVED******REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
