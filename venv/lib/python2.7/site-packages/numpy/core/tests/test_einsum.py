from __future__ import division, absolute_import, print_function

import warnings

import numpy as np
from numpy.testing import (
    TestCase, run_module_suite, assert_, assert_equal, assert_array_equal,
    assert_raises
    ***REMOVED***

class TestEinSum(TestCase***REMOVED***:
    def test_einsum_errors(self***REMOVED***:
        # Need enough arguments
        assert_raises(ValueError, np.einsum***REMOVED***
        assert_raises(ValueError, np.einsum, ""***REMOVED***

        # subscripts must be a string
        assert_raises(TypeError, np.einsum, 0, 0***REMOVED***

        # out parameter must be an array
        assert_raises(TypeError, np.einsum, "", 0, out='test'***REMOVED***

        # order parameter must be a valid order
        assert_raises(TypeError, np.einsum, "", 0, order='W'***REMOVED***

        # casting parameter must be a valid casting
        assert_raises(ValueError, np.einsum, "", 0, casting='blah'***REMOVED***

        # dtype parameter must be a valid dtype
        assert_raises(TypeError, np.einsum, "", 0, dtype='bad_data_type'***REMOVED***

        # other keyword arguments are rejected
        assert_raises(TypeError, np.einsum, "", 0, bad_arg=0***REMOVED***

        # issue 4528 revealed a segfault with this call
        assert_raises(TypeError, np.einsum, *(None,***REMOVED****63***REMOVED***

        # number of operands must match count in subscripts string
        assert_raises(ValueError, np.einsum, "", 0, 0***REMOVED***
        assert_raises(ValueError, np.einsum, ",", 0, [0***REMOVED***, [0***REMOVED******REMOVED***
        assert_raises(ValueError, np.einsum, ",", [0***REMOVED******REMOVED***

        # can't have more subscripts than dimensions in the operand
        assert_raises(ValueError, np.einsum, "i", 0***REMOVED***
        assert_raises(ValueError, np.einsum, "ij", [0, 0***REMOVED******REMOVED***
        assert_raises(ValueError, np.einsum, "...i", 0***REMOVED***
        assert_raises(ValueError, np.einsum, "i...j", [0, 0***REMOVED******REMOVED***
        assert_raises(ValueError, np.einsum, "i...", 0***REMOVED***
        assert_raises(ValueError, np.einsum, "ij...", [0, 0***REMOVED******REMOVED***

        # invalid ellipsis
        assert_raises(ValueError, np.einsum, "i..", [0, 0***REMOVED******REMOVED***
        assert_raises(ValueError, np.einsum, ".i...", [0, 0***REMOVED******REMOVED***
        assert_raises(ValueError, np.einsum, "j->..j", [0, 0***REMOVED******REMOVED***
        assert_raises(ValueError, np.einsum, "j->.j...", [0, 0***REMOVED******REMOVED***

        # invalid subscript character
        assert_raises(ValueError, np.einsum, "i%...", [0, 0***REMOVED******REMOVED***
        assert_raises(ValueError, np.einsum, "...j$", [0, 0***REMOVED******REMOVED***
        assert_raises(ValueError, np.einsum, "i->&", [0, 0***REMOVED******REMOVED***

        # output subscripts must appear in input
        assert_raises(ValueError, np.einsum, "i->ij", [0, 0***REMOVED******REMOVED***

        # output subscripts may only be specified once
        assert_raises(ValueError, np.einsum, "ij->jij", [[0, 0***REMOVED***, [0, 0***REMOVED******REMOVED******REMOVED***

        # dimensions much match when being collapsed
        assert_raises(ValueError, np.einsum, "ii", np.arange(6***REMOVED***.reshape(2, 3***REMOVED******REMOVED***
        assert_raises(ValueError, np.einsum, "ii->i", np.arange(6***REMOVED***.reshape(2, 3***REMOVED******REMOVED***

        # broadcasting to new dimensions must be enabled explicitly
        assert_raises(ValueError, np.einsum, "i", np.arange(6***REMOVED***.reshape(2, 3***REMOVED******REMOVED***
        assert_raises(ValueError, np.einsum, "i->i", [[0, 1***REMOVED***, [0, 1***REMOVED******REMOVED***,
                                            out=np.arange(4***REMOVED***.reshape(2, 2***REMOVED******REMOVED***

    def test_einsum_views(self***REMOVED***:
        # pass-through
        a = np.arange(6***REMOVED***
        a.shape = (2, 3***REMOVED***

        b = np.einsum("...", a***REMOVED***
        assert_(b.base is a***REMOVED***

        b = np.einsum(a, [Ellipsis***REMOVED******REMOVED***
        assert_(b.base is a***REMOVED***

        b = np.einsum("ij", a***REMOVED***
        assert_(b.base is a***REMOVED***
        assert_equal(b, a***REMOVED***

        b = np.einsum(a, [0, 1***REMOVED******REMOVED***
        assert_(b.base is a***REMOVED***
        assert_equal(b, a***REMOVED***

        # output is writeable whenever input is writeable
        b = np.einsum("...", a***REMOVED***
        assert_(b.flags['WRITEABLE'***REMOVED******REMOVED***
        a.flags['WRITEABLE'***REMOVED*** = False
        b = np.einsum("...", a***REMOVED***
        assert_(not b.flags['WRITEABLE'***REMOVED******REMOVED***

        # transpose
        a = np.arange(6***REMOVED***
        a.shape = (2, 3***REMOVED***

        b = np.einsum("ji", a***REMOVED***
        assert_(b.base is a***REMOVED***
        assert_equal(b, a.T***REMOVED***

        b = np.einsum(a, [1, 0***REMOVED******REMOVED***
        assert_(b.base is a***REMOVED***
        assert_equal(b, a.T***REMOVED***

        # diagonal
        a = np.arange(9***REMOVED***
        a.shape = (3, 3***REMOVED***

        b = np.einsum("ii->i", a***REMOVED***
        assert_(b.base is a***REMOVED***
        assert_equal(b, [a[i, i***REMOVED*** for i in range(3***REMOVED******REMOVED******REMOVED***

        b = np.einsum(a, [0, 0***REMOVED***, [0***REMOVED******REMOVED***
        assert_(b.base is a***REMOVED***
        assert_equal(b, [a[i, i***REMOVED*** for i in range(3***REMOVED******REMOVED******REMOVED***

        # diagonal with various ways of broadcasting an additional dimension
        a = np.arange(27***REMOVED***
        a.shape = (3, 3, 3***REMOVED***

        b = np.einsum("...ii->...i", a***REMOVED***
        assert_(b.base is a***REMOVED***
        assert_equal(b, [[x[i, i***REMOVED*** for i in range(3***REMOVED******REMOVED*** for x in a***REMOVED******REMOVED***

        b = np.einsum(a, [Ellipsis, 0, 0***REMOVED***, [Ellipsis, 0***REMOVED******REMOVED***
        assert_(b.base is a***REMOVED***
        assert_equal(b, [[x[i, i***REMOVED*** for i in range(3***REMOVED******REMOVED*** for x in a***REMOVED******REMOVED***

        b = np.einsum("ii...->...i", a***REMOVED***
        assert_(b.base is a***REMOVED***
        assert_equal(b, [[x[i, i***REMOVED*** for i in range(3***REMOVED******REMOVED***
                         for x in a.transpose(2, 0, 1***REMOVED******REMOVED******REMOVED***

        b = np.einsum(a, [0, 0, Ellipsis***REMOVED***, [Ellipsis, 0***REMOVED******REMOVED***
        assert_(b.base is a***REMOVED***
        assert_equal(b, [[x[i, i***REMOVED*** for i in range(3***REMOVED******REMOVED***
                         for x in a.transpose(2, 0, 1***REMOVED******REMOVED******REMOVED***

        b = np.einsum("...ii->i...", a***REMOVED***
        assert_(b.base is a***REMOVED***
        assert_equal(b, [a[:, i, i***REMOVED*** for i in range(3***REMOVED******REMOVED******REMOVED***

        b = np.einsum(a, [Ellipsis, 0, 0***REMOVED***, [0, Ellipsis***REMOVED******REMOVED***
        assert_(b.base is a***REMOVED***
        assert_equal(b, [a[:, i, i***REMOVED*** for i in range(3***REMOVED******REMOVED******REMOVED***

        b = np.einsum("jii->ij", a***REMOVED***
        assert_(b.base is a***REMOVED***
        assert_equal(b, [a[:, i, i***REMOVED*** for i in range(3***REMOVED******REMOVED******REMOVED***

        b = np.einsum(a, [1, 0, 0***REMOVED***, [0, 1***REMOVED******REMOVED***
        assert_(b.base is a***REMOVED***
        assert_equal(b, [a[:, i, i***REMOVED*** for i in range(3***REMOVED******REMOVED******REMOVED***

        b = np.einsum("ii...->i...", a***REMOVED***
        assert_(b.base is a***REMOVED***
        assert_equal(b, [a.transpose(2, 0, 1***REMOVED***[:, i, i***REMOVED*** for i in range(3***REMOVED******REMOVED******REMOVED***

        b = np.einsum(a, [0, 0, Ellipsis***REMOVED***, [0, Ellipsis***REMOVED******REMOVED***
        assert_(b.base is a***REMOVED***
        assert_equal(b, [a.transpose(2, 0, 1***REMOVED***[:, i, i***REMOVED*** for i in range(3***REMOVED******REMOVED******REMOVED***

        b = np.einsum("i...i->i...", a***REMOVED***
        assert_(b.base is a***REMOVED***
        assert_equal(b, [a.transpose(1, 0, 2***REMOVED***[:, i, i***REMOVED*** for i in range(3***REMOVED******REMOVED******REMOVED***

        b = np.einsum(a, [0, Ellipsis, 0***REMOVED***, [0, Ellipsis***REMOVED******REMOVED***
        assert_(b.base is a***REMOVED***
        assert_equal(b, [a.transpose(1, 0, 2***REMOVED***[:, i, i***REMOVED*** for i in range(3***REMOVED******REMOVED******REMOVED***

        b = np.einsum("i...i->...i", a***REMOVED***
        assert_(b.base is a***REMOVED***
        assert_equal(b, [[x[i, i***REMOVED*** for i in range(3***REMOVED******REMOVED***
                         for x in a.transpose(1, 0, 2***REMOVED******REMOVED******REMOVED***

        b = np.einsum(a, [0, Ellipsis, 0***REMOVED***, [Ellipsis, 0***REMOVED******REMOVED***
        assert_(b.base is a***REMOVED***
        assert_equal(b, [[x[i, i***REMOVED*** for i in range(3***REMOVED******REMOVED***
                         for x in a.transpose(1, 0, 2***REMOVED******REMOVED******REMOVED***

        # triple diagonal
        a = np.arange(27***REMOVED***
        a.shape = (3, 3, 3***REMOVED***

        b = np.einsum("iii->i", a***REMOVED***
        assert_(b.base is a***REMOVED***
        assert_equal(b, [a[i, i, i***REMOVED*** for i in range(3***REMOVED******REMOVED******REMOVED***

        b = np.einsum(a, [0, 0, 0***REMOVED***, [0***REMOVED******REMOVED***
        assert_(b.base is a***REMOVED***
        assert_equal(b, [a[i, i, i***REMOVED*** for i in range(3***REMOVED******REMOVED******REMOVED***

        # swap axes
        a = np.arange(24***REMOVED***
        a.shape = (2, 3, 4***REMOVED***

        b = np.einsum("ijk->jik", a***REMOVED***
        assert_(b.base is a***REMOVED***
        assert_equal(b, a.swapaxes(0, 1***REMOVED******REMOVED***

        b = np.einsum(a, [0, 1, 2***REMOVED***, [1, 0, 2***REMOVED******REMOVED***
        assert_(b.base is a***REMOVED***
        assert_equal(b, a.swapaxes(0, 1***REMOVED******REMOVED***

    def check_einsum_sums(self, dtype***REMOVED***:
        # Check various sums.  Does many sizes to exercise unrolled loops.

        # sum(a, axis=-1***REMOVED***
        for n in range(1, 17***REMOVED***:
            a = np.arange(n, dtype=dtype***REMOVED***
            assert_equal(np.einsum("i->", a***REMOVED***, np.sum(a, axis=-1***REMOVED***.astype(dtype***REMOVED******REMOVED***
            assert_equal(np.einsum(a, [0***REMOVED***, [***REMOVED******REMOVED***,
                         np.sum(a, axis=-1***REMOVED***.astype(dtype***REMOVED******REMOVED***

        for n in range(1, 17***REMOVED***:
            a = np.arange(2*3*n, dtype=dtype***REMOVED***.reshape(2, 3, n***REMOVED***
            assert_equal(np.einsum("...i->...", a***REMOVED***,
                         np.sum(a, axis=-1***REMOVED***.astype(dtype***REMOVED******REMOVED***
            assert_equal(np.einsum(a, [Ellipsis, 0***REMOVED***, [Ellipsis***REMOVED******REMOVED***,
                         np.sum(a, axis=-1***REMOVED***.astype(dtype***REMOVED******REMOVED***

        # sum(a, axis=0***REMOVED***
        for n in range(1, 17***REMOVED***:
            a = np.arange(2*n, dtype=dtype***REMOVED***.reshape(2, n***REMOVED***
            assert_equal(np.einsum("i...->...", a***REMOVED***,
                         np.sum(a, axis=0***REMOVED***.astype(dtype***REMOVED******REMOVED***
            assert_equal(np.einsum(a, [0, Ellipsis***REMOVED***, [Ellipsis***REMOVED******REMOVED***,
                         np.sum(a, axis=0***REMOVED***.astype(dtype***REMOVED******REMOVED***

        for n in range(1, 17***REMOVED***:
            a = np.arange(2*3*n, dtype=dtype***REMOVED***.reshape(2, 3, n***REMOVED***
            assert_equal(np.einsum("i...->...", a***REMOVED***,
                         np.sum(a, axis=0***REMOVED***.astype(dtype***REMOVED******REMOVED***
            assert_equal(np.einsum(a, [0, Ellipsis***REMOVED***, [Ellipsis***REMOVED******REMOVED***,
                         np.sum(a, axis=0***REMOVED***.astype(dtype***REMOVED******REMOVED***

        # trace(a***REMOVED***
        for n in range(1, 17***REMOVED***:
            a = np.arange(n*n, dtype=dtype***REMOVED***.reshape(n, n***REMOVED***
            assert_equal(np.einsum("ii", a***REMOVED***, np.trace(a***REMOVED***.astype(dtype***REMOVED******REMOVED***
            assert_equal(np.einsum(a, [0, 0***REMOVED******REMOVED***, np.trace(a***REMOVED***.astype(dtype***REMOVED******REMOVED***

        # multiply(a, b***REMOVED***
        assert_equal(np.einsum("..., ...", 3, 4***REMOVED***, 12***REMOVED***  # scalar case
        for n in range(1, 17***REMOVED***:
            a = np.arange(3*n, dtype=dtype***REMOVED***.reshape(3, n***REMOVED***
            b = np.arange(2*3*n, dtype=dtype***REMOVED***.reshape(2, 3, n***REMOVED***
            assert_equal(np.einsum("..., ...", a, b***REMOVED***, np.multiply(a, b***REMOVED******REMOVED***
            assert_equal(np.einsum(a, [Ellipsis***REMOVED***, b, [Ellipsis***REMOVED******REMOVED***,
                         np.multiply(a, b***REMOVED******REMOVED***

        # inner(a,b***REMOVED***
        for n in range(1, 17***REMOVED***:
            a = np.arange(2*3*n, dtype=dtype***REMOVED***.reshape(2, 3, n***REMOVED***
            b = np.arange(n, dtype=dtype***REMOVED***
            assert_equal(np.einsum("...i, ...i", a, b***REMOVED***, np.inner(a, b***REMOVED******REMOVED***
            assert_equal(np.einsum(a, [Ellipsis, 0***REMOVED***, b, [Ellipsis, 0***REMOVED******REMOVED***,
                         np.inner(a, b***REMOVED******REMOVED***

        for n in range(1, 11***REMOVED***:
            a = np.arange(n*3*2, dtype=dtype***REMOVED***.reshape(n, 3, 2***REMOVED***
            b = np.arange(n, dtype=dtype***REMOVED***
            assert_equal(np.einsum("i..., i...", a, b***REMOVED***, np.inner(a.T, b.T***REMOVED***.T***REMOVED***
            assert_equal(np.einsum(a, [0, Ellipsis***REMOVED***, b, [0, Ellipsis***REMOVED******REMOVED***,
                         np.inner(a.T, b.T***REMOVED***.T***REMOVED***

        # outer(a,b***REMOVED***
        for n in range(1, 17***REMOVED***:
            a = np.arange(3, dtype=dtype***REMOVED***+1
            b = np.arange(n, dtype=dtype***REMOVED***+1
            assert_equal(np.einsum("i,j", a, b***REMOVED***, np.outer(a, b***REMOVED******REMOVED***
            assert_equal(np.einsum(a, [0***REMOVED***, b, [1***REMOVED******REMOVED***, np.outer(a, b***REMOVED******REMOVED***

        # Suppress the complex warnings for the 'as f8' tests
        with warnings.catch_warnings(***REMOVED***:
            warnings.simplefilter('ignore', np.ComplexWarning***REMOVED***

            # matvec(a,b***REMOVED*** / a.dot(b***REMOVED*** where a is matrix, b is vector
            for n in range(1, 17***REMOVED***:
                a = np.arange(4*n, dtype=dtype***REMOVED***.reshape(4, n***REMOVED***
                b = np.arange(n, dtype=dtype***REMOVED***
                assert_equal(np.einsum("ij, j", a, b***REMOVED***, np.dot(a, b***REMOVED******REMOVED***
                assert_equal(np.einsum(a, [0, 1***REMOVED***, b, [1***REMOVED******REMOVED***, np.dot(a, b***REMOVED******REMOVED***

                c = np.arange(4, dtype=dtype***REMOVED***
                np.einsum("ij,j", a, b, out=c,
                            dtype='f8', casting='unsafe'***REMOVED***
                assert_equal(c,
                            np.dot(a.astype('f8'***REMOVED***,
                                   b.astype('f8'***REMOVED******REMOVED***.astype(dtype***REMOVED******REMOVED***
                c[...***REMOVED*** = 0
                np.einsum(a, [0, 1***REMOVED***, b, [1***REMOVED***, out=c,
                            dtype='f8', casting='unsafe'***REMOVED***
                assert_equal(c,
                            np.dot(a.astype('f8'***REMOVED***,
                                   b.astype('f8'***REMOVED******REMOVED***.astype(dtype***REMOVED******REMOVED***

            for n in range(1, 17***REMOVED***:
                a = np.arange(4*n, dtype=dtype***REMOVED***.reshape(4, n***REMOVED***
                b = np.arange(n, dtype=dtype***REMOVED***
                assert_equal(np.einsum("ji,j", a.T, b.T***REMOVED***, np.dot(b.T, a.T***REMOVED******REMOVED***
                assert_equal(np.einsum(a.T, [1, 0***REMOVED***, b.T, [1***REMOVED******REMOVED***, np.dot(b.T, a.T***REMOVED******REMOVED***

                c = np.arange(4, dtype=dtype***REMOVED***
                np.einsum("ji,j", a.T, b.T, out=c, dtype='f8', casting='unsafe'***REMOVED***
                assert_equal(c,
                        np.dot(b.T.astype('f8'***REMOVED***,
                               a.T.astype('f8'***REMOVED******REMOVED***.astype(dtype***REMOVED******REMOVED***
                c[...***REMOVED*** = 0
                np.einsum(a.T, [1, 0***REMOVED***, b.T, [1***REMOVED***, out=c,
                            dtype='f8', casting='unsafe'***REMOVED***
                assert_equal(c,
                        np.dot(b.T.astype('f8'***REMOVED***,
                               a.T.astype('f8'***REMOVED******REMOVED***.astype(dtype***REMOVED******REMOVED***

            # matmat(a,b***REMOVED*** / a.dot(b***REMOVED*** where a is matrix, b is matrix
            for n in range(1, 17***REMOVED***:
                if n < 8 or dtype != 'f2':
                    a = np.arange(4*n, dtype=dtype***REMOVED***.reshape(4, n***REMOVED***
                    b = np.arange(n*6, dtype=dtype***REMOVED***.reshape(n, 6***REMOVED***
                    assert_equal(np.einsum("ij,jk", a, b***REMOVED***, np.dot(a, b***REMOVED******REMOVED***
                    assert_equal(np.einsum(a, [0, 1***REMOVED***, b, [1, 2***REMOVED******REMOVED***, np.dot(a, b***REMOVED******REMOVED***

            for n in range(1, 17***REMOVED***:
                a = np.arange(4*n, dtype=dtype***REMOVED***.reshape(4, n***REMOVED***
                b = np.arange(n*6, dtype=dtype***REMOVED***.reshape(n, 6***REMOVED***
                c = np.arange(24, dtype=dtype***REMOVED***.reshape(4, 6***REMOVED***
                np.einsum("ij,jk", a, b, out=c, dtype='f8', casting='unsafe'***REMOVED***
                assert_equal(c,
                            np.dot(a.astype('f8'***REMOVED***,
                                   b.astype('f8'***REMOVED******REMOVED***.astype(dtype***REMOVED******REMOVED***
                c[...***REMOVED*** = 0
                np.einsum(a, [0, 1***REMOVED***, b, [1, 2***REMOVED***, out=c,
                                dtype='f8', casting='unsafe'***REMOVED***
                assert_equal(c,
                            np.dot(a.astype('f8'***REMOVED***,
                                   b.astype('f8'***REMOVED******REMOVED***.astype(dtype***REMOVED******REMOVED***

            # matrix triple product (note this is not currently an efficient
            # way to multiply 3 matrices***REMOVED***
            a = np.arange(12, dtype=dtype***REMOVED***.reshape(3, 4***REMOVED***
            b = np.arange(20, dtype=dtype***REMOVED***.reshape(4, 5***REMOVED***
            c = np.arange(30, dtype=dtype***REMOVED***.reshape(5, 6***REMOVED***
            if dtype != 'f2':
                assert_equal(np.einsum("ij,jk,kl", a, b, c***REMOVED***,
                                    a.dot(b***REMOVED***.dot(c***REMOVED******REMOVED***
                assert_equal(np.einsum(a, [0, 1***REMOVED***, b, [1, 2***REMOVED***, c, [2, 3***REMOVED******REMOVED***,
                                    a.dot(b***REMOVED***.dot(c***REMOVED******REMOVED***

            d = np.arange(18, dtype=dtype***REMOVED***.reshape(3, 6***REMOVED***
            np.einsum("ij,jk,kl", a, b, c, out=d,
                      dtype='f8', casting='unsafe'***REMOVED***
            tgt = a.astype('f8'***REMOVED***.dot(b.astype('f8'***REMOVED******REMOVED***
            tgt = tgt.dot(c.astype('f8'***REMOVED******REMOVED***.astype(dtype***REMOVED***
            assert_equal(d, tgt***REMOVED***

            d[...***REMOVED*** = 0
            np.einsum(a, [0, 1***REMOVED***, b, [1, 2***REMOVED***, c, [2, 3***REMOVED***, out=d,
                      dtype='f8', casting='unsafe'***REMOVED***
            tgt = a.astype('f8'***REMOVED***.dot(b.astype('f8'***REMOVED******REMOVED***
            tgt = tgt.dot(c.astype('f8'***REMOVED******REMOVED***.astype(dtype***REMOVED***
            assert_equal(d, tgt***REMOVED***

            # tensordot(a, b***REMOVED***
            if np.dtype(dtype***REMOVED*** != np.dtype('f2'***REMOVED***:
                a = np.arange(60, dtype=dtype***REMOVED***.reshape(3, 4, 5***REMOVED***
                b = np.arange(24, dtype=dtype***REMOVED***.reshape(4, 3, 2***REMOVED***
                assert_equal(np.einsum("ijk, jil -> kl", a, b***REMOVED***,
                                np.tensordot(a, b, axes=([1, 0***REMOVED***, [0, 1***REMOVED******REMOVED******REMOVED******REMOVED***
                assert_equal(np.einsum(a, [0, 1, 2***REMOVED***, b, [1, 0, 3***REMOVED***, [2, 3***REMOVED******REMOVED***,
                                np.tensordot(a, b, axes=([1, 0***REMOVED***, [0, 1***REMOVED******REMOVED******REMOVED******REMOVED***

                c = np.arange(10, dtype=dtype***REMOVED***.reshape(5, 2***REMOVED***
                np.einsum("ijk,jil->kl", a, b, out=c,
                                        dtype='f8', casting='unsafe'***REMOVED***
                assert_equal(c, np.tensordot(a.astype('f8'***REMOVED***, b.astype('f8'***REMOVED***,
                                        axes=([1, 0***REMOVED***, [0, 1***REMOVED******REMOVED******REMOVED***.astype(dtype***REMOVED******REMOVED***
                c[...***REMOVED*** = 0
                np.einsum(a, [0, 1, 2***REMOVED***, b, [1, 0, 3***REMOVED***, [2, 3***REMOVED***, out=c,
                                        dtype='f8', casting='unsafe'***REMOVED***
                assert_equal(c, np.tensordot(a.astype('f8'***REMOVED***, b.astype('f8'***REMOVED***,
                                        axes=([1, 0***REMOVED***, [0, 1***REMOVED******REMOVED******REMOVED***.astype(dtype***REMOVED******REMOVED***

        # logical_and(logical_and(a!=0, b!=0***REMOVED***, c!=0***REMOVED***
        a = np.array([1,   3,   -2,   0,   12,  13,   0,   1***REMOVED***, dtype=dtype***REMOVED***
        b = np.array([0,   3.5, 0.,   -2,  0,   1,    3,   12***REMOVED***, dtype=dtype***REMOVED***
        c = np.array([True, True, False, True, True, False, True, True***REMOVED******REMOVED***
        assert_equal(np.einsum("i,i,i->i", a, b, c,
                                dtype='?', casting='unsafe'***REMOVED***,
                            np.logical_and(np.logical_and(a != 0, b != 0***REMOVED***, c != 0***REMOVED******REMOVED***
        assert_equal(np.einsum(a, [0***REMOVED***, b, [0***REMOVED***, c, [0***REMOVED***, [0***REMOVED***,
                                dtype='?', casting='unsafe'***REMOVED***,
                            np.logical_and(np.logical_and(a != 0, b != 0***REMOVED***, c != 0***REMOVED******REMOVED***

        a = np.arange(9, dtype=dtype***REMOVED***
        assert_equal(np.einsum(",i->", 3, a***REMOVED***, 3*np.sum(a***REMOVED******REMOVED***
        assert_equal(np.einsum(3, [***REMOVED***, a, [0***REMOVED***, [***REMOVED******REMOVED***, 3*np.sum(a***REMOVED******REMOVED***
        assert_equal(np.einsum("i,->", a, 3***REMOVED***, 3*np.sum(a***REMOVED******REMOVED***
        assert_equal(np.einsum(a, [0***REMOVED***, 3, [***REMOVED***, [***REMOVED******REMOVED***, 3*np.sum(a***REMOVED******REMOVED***

        # Various stride0, contiguous, and SSE aligned variants
        for n in range(1, 25***REMOVED***:
            a = np.arange(n, dtype=dtype***REMOVED***
            if np.dtype(dtype***REMOVED***.itemsize > 1:
                assert_equal(np.einsum("...,...", a, a***REMOVED***, np.multiply(a, a***REMOVED******REMOVED***
                assert_equal(np.einsum("i,i", a, a***REMOVED***, np.dot(a, a***REMOVED******REMOVED***
                assert_equal(np.einsum("i,->i", a, 2***REMOVED***, 2*a***REMOVED***
                assert_equal(np.einsum(",i->i", 2, a***REMOVED***, 2*a***REMOVED***
                assert_equal(np.einsum("i,->", a, 2***REMOVED***, 2*np.sum(a***REMOVED******REMOVED***
                assert_equal(np.einsum(",i->", 2, a***REMOVED***, 2*np.sum(a***REMOVED******REMOVED***

                assert_equal(np.einsum("...,...", a[1:***REMOVED***, a[:-1***REMOVED******REMOVED***,
                             np.multiply(a[1:***REMOVED***, a[:-1***REMOVED******REMOVED******REMOVED***
                assert_equal(np.einsum("i,i", a[1:***REMOVED***, a[:-1***REMOVED******REMOVED***,
                             np.dot(a[1:***REMOVED***, a[:-1***REMOVED******REMOVED******REMOVED***
                assert_equal(np.einsum("i,->i", a[1:***REMOVED***, 2***REMOVED***, 2*a[1:***REMOVED******REMOVED***
                assert_equal(np.einsum(",i->i", 2, a[1:***REMOVED******REMOVED***, 2*a[1:***REMOVED******REMOVED***
                assert_equal(np.einsum("i,->", a[1:***REMOVED***, 2***REMOVED***, 2*np.sum(a[1:***REMOVED******REMOVED******REMOVED***
                assert_equal(np.einsum(",i->", 2, a[1:***REMOVED******REMOVED***, 2*np.sum(a[1:***REMOVED******REMOVED******REMOVED***

        # An object array, summed as the data type
        a = np.arange(9, dtype=object***REMOVED***

        b = np.einsum("i->", a, dtype=dtype, casting='unsafe'***REMOVED***
        assert_equal(b, np.sum(a***REMOVED******REMOVED***
        assert_equal(b.dtype, np.dtype(dtype***REMOVED******REMOVED***

        b = np.einsum(a, [0***REMOVED***, [***REMOVED***, dtype=dtype, casting='unsafe'***REMOVED***
        assert_equal(b, np.sum(a***REMOVED******REMOVED***
        assert_equal(b.dtype, np.dtype(dtype***REMOVED******REMOVED***

        # A case which was failing (ticket #1885***REMOVED***
        p = np.arange(2***REMOVED*** + 1
        q = np.arange(4***REMOVED***.reshape(2, 2***REMOVED*** + 3
        r = np.arange(4***REMOVED***.reshape(2, 2***REMOVED*** + 7
        assert_equal(np.einsum('z,mz,zm->', p, q, r***REMOVED***, 253***REMOVED***

    def test_einsum_sums_int8(self***REMOVED***:
        self.check_einsum_sums('i1'***REMOVED***

    def test_einsum_sums_uint8(self***REMOVED***:
        self.check_einsum_sums('u1'***REMOVED***

    def test_einsum_sums_int16(self***REMOVED***:
        self.check_einsum_sums('i2'***REMOVED***

    def test_einsum_sums_uint16(self***REMOVED***:
        self.check_einsum_sums('u2'***REMOVED***

    def test_einsum_sums_int32(self***REMOVED***:
        self.check_einsum_sums('i4'***REMOVED***

    def test_einsum_sums_uint32(self***REMOVED***:
        self.check_einsum_sums('u4'***REMOVED***

    def test_einsum_sums_int64(self***REMOVED***:
        self.check_einsum_sums('i8'***REMOVED***

    def test_einsum_sums_uint64(self***REMOVED***:
        self.check_einsum_sums('u8'***REMOVED***

    def test_einsum_sums_float16(self***REMOVED***:
        self.check_einsum_sums('f2'***REMOVED***

    def test_einsum_sums_float32(self***REMOVED***:
        self.check_einsum_sums('f4'***REMOVED***

    def test_einsum_sums_float64(self***REMOVED***:
        self.check_einsum_sums('f8'***REMOVED***

    def test_einsum_sums_longdouble(self***REMOVED***:
        self.check_einsum_sums(np.longdouble***REMOVED***

    def test_einsum_sums_cfloat64(self***REMOVED***:
        self.check_einsum_sums('c8'***REMOVED***

    def test_einsum_sums_cfloat128(self***REMOVED***:
        self.check_einsum_sums('c16'***REMOVED***

    def test_einsum_sums_clongdouble(self***REMOVED***:
        self.check_einsum_sums(np.clongdouble***REMOVED***

    def test_einsum_misc(self***REMOVED***:
        # This call used to crash because of a bug in
        # PyArray_AssignZero
        a = np.ones((1, 2***REMOVED******REMOVED***
        b = np.ones((2, 2, 1***REMOVED******REMOVED***
        assert_equal(np.einsum('ij...,j...->i...', a, b***REMOVED***, [[[2***REMOVED***, [2***REMOVED******REMOVED******REMOVED******REMOVED***

        # The iterator had an issue with buffering this reduction
        a = np.ones((5, 12, 4, 2, 3***REMOVED***, np.int64***REMOVED***
        b = np.ones((5, 12, 11***REMOVED***, np.int64***REMOVED***
        assert_equal(np.einsum('ijklm,ijn,ijn->', a, b, b***REMOVED***,
                        np.einsum('ijklm,ijn->', a, b***REMOVED******REMOVED***

        # Issue #2027, was a problem in the contiguous 3-argument
        # inner loop implementation
        a = np.arange(1, 3***REMOVED***
        b = np.arange(1, 5***REMOVED***.reshape(2, 2***REMOVED***
        c = np.arange(1, 9***REMOVED***.reshape(4, 2***REMOVED***
        assert_equal(np.einsum('x,yx,zx->xzy', a, b, c***REMOVED***,
                    [[[1,  3***REMOVED***, [3,  9***REMOVED***, [5, 15***REMOVED***, [7, 21***REMOVED******REMOVED***,
                    [[8, 16***REMOVED***, [16, 32***REMOVED***, [24, 48***REMOVED***, [32, 64***REMOVED******REMOVED******REMOVED******REMOVED***

    def test_einsum_broadcast(self***REMOVED***:
        # Issue #2455 change in handling ellipsis
        # remove the 'middle broadcast' error
        # only use the 'RIGHT' iteration in prepare_op_axes
        # adds auto broadcast on left where it belongs
        # broadcast on right has to be explicit

        A = np.arange(2*3*4***REMOVED***.reshape(2,3,4***REMOVED***
        B = np.arange(3***REMOVED***
        ref = np.einsum('ijk,j->ijk',A, B***REMOVED***
        assert_equal(np.einsum('ij...,j...->ij...',A, B***REMOVED***, ref***REMOVED***
        assert_equal(np.einsum('ij...,...j->ij...',A, B***REMOVED***, ref***REMOVED***
        assert_equal(np.einsum('ij...,j->ij...',A, B***REMOVED***, ref***REMOVED***  # used to raise error

        A = np.arange(12***REMOVED***.reshape((4,3***REMOVED******REMOVED***
        B = np.arange(6***REMOVED***.reshape((3,2***REMOVED******REMOVED***
        ref = np.einsum('ik,kj->ij', A, B***REMOVED***
        assert_equal(np.einsum('ik...,k...->i...', A, B***REMOVED***, ref***REMOVED***
        assert_equal(np.einsum('ik...,...kj->i...j', A, B***REMOVED***, ref***REMOVED***
        assert_equal(np.einsum('...k,kj', A, B***REMOVED***, ref***REMOVED***  # used to raise error
        assert_equal(np.einsum('ik,k...->i...', A, B***REMOVED***, ref***REMOVED***  # used to raise error

        dims = [2,3,4,5***REMOVED***
        a = np.arange(np.prod(dims***REMOVED******REMOVED***.reshape(dims***REMOVED***
        v = np.arange(dims[2***REMOVED******REMOVED***
        ref = np.einsum('ijkl,k->ijl', a, v***REMOVED***
        assert_equal(np.einsum('ijkl,k', a, v***REMOVED***, ref***REMOVED***
        assert_equal(np.einsum('...kl,k', a, v***REMOVED***, ref***REMOVED***  # used to raise error
        assert_equal(np.einsum('...kl,k...', a, v***REMOVED***, ref***REMOVED***
        # no real diff from 1st

        J,K,M = 160,160,120
        A = np.arange(J*K*M***REMOVED***.reshape(1,1,1,J,K,M***REMOVED***
        B = np.arange(J*K*M*3***REMOVED***.reshape(J,K,M,3***REMOVED***
        ref = np.einsum('...lmn,...lmno->...o', A, B***REMOVED***
        assert_equal(np.einsum('...lmn,lmno->...o', A, B***REMOVED***, ref***REMOVED***  # used to raise error

    def test_einsum_fixedstridebug(self***REMOVED***:
        # Issue #4485 obscure einsum bug
        # This case revealed a bug in nditer where it reported a stride
        # as 'fixed' (0***REMOVED*** when it was in fact not fixed during processing
        # (0 or 4***REMOVED***. The reason for the bug was that the check for a fixed
        # stride was using the information from the 2D inner loop reuse
        # to restrict the iteration dimensions it had to validate to be
        # the same, but that 2D inner loop reuse logic is only triggered
        # during the buffer copying step, and hence it was invalid to
        # rely on those values. The fix is to check all the dimensions
        # of the stride in question, which in the test case reveals that
        # the stride is not fixed.
        #
        # NOTE: This test is triggered by the fact that the default buffersize,
        #       used by einsum, is 8192, and 3*2731 = 8193, is larger than that
        #       and results in a mismatch between the buffering and the
        #       striding for operand A.
        A = np.arange(2*3***REMOVED***.reshape(2,3***REMOVED***.astype(np.float32***REMOVED***
        B = np.arange(2*3*2731***REMOVED***.reshape(2,3,2731***REMOVED***.astype(np.int16***REMOVED***
        es = np.einsum('cl,cpx->lpx', A, B***REMOVED***
        tp = np.tensordot(A, B, axes=(0, 0***REMOVED******REMOVED***
        assert_equal(es, tp***REMOVED***
        # The following is the original test case from the bug report,
        # made repeatable by changing random arrays to aranges.
        A = np.arange(3*3***REMOVED***.reshape(3,3***REMOVED***.astype(np.float64***REMOVED***
        B = np.arange(3*3*64*64***REMOVED***.reshape(3,3,64,64***REMOVED***.astype(np.float32***REMOVED***
        es = np.einsum('cl,cpxy->lpxy', A,B***REMOVED***
        tp = np.tensordot(A,B, axes=(0,0***REMOVED******REMOVED***
        assert_equal(es, tp***REMOVED***

    def test_einsum_fixed_collapsingbug(self***REMOVED***:
        # Issue #5147.
        # The bug only occured when output argument of einssum was used.
        x = np.random.normal(0, 1, (5, 5, 5, 5***REMOVED******REMOVED***
        y1 = np.zeros((5, 5***REMOVED******REMOVED***
        np.einsum('aabb->ab', x, out=y1***REMOVED***
        idx = np.arange(5***REMOVED***
        y2 = x[idx[:, None***REMOVED***, idx[:, None***REMOVED***, idx, idx***REMOVED***
        assert_equal(y1, y2***REMOVED***

    def test_einsum_all_contig_non_contig_output(self***REMOVED***:
        # Issue gh-5907, tests that the all contiguous special case
        # actually checks the contiguity of the output
        x = np.ones((5, 5***REMOVED******REMOVED***
        out = np.ones(10***REMOVED***[::2***REMOVED***
        correct_base = np.ones(10***REMOVED***
        correct_base[::2***REMOVED*** = 5
        # Always worked (inner iteration is done with 0-stride***REMOVED***:
        np.einsum('mi,mi,mi->m', x, x, x, out=out***REMOVED***
        assert_array_equal(out.base, correct_base***REMOVED***
        # Example 1:
        out = np.ones(10***REMOVED***[::2***REMOVED***
        np.einsum('im,im,im->m', x, x, x, out=out***REMOVED***
        assert_array_equal(out.base, correct_base***REMOVED***
        # Example 2, buffering causes x to be contiguous but
        # special cases do not catch the operation before:
        out = np.ones((2, 2, 2***REMOVED******REMOVED***[..., 0***REMOVED***
        correct_base = np.ones((2, 2, 2***REMOVED******REMOVED***
        correct_base[..., 0***REMOVED*** = 2
        x = np.ones((2, 2***REMOVED***, np.float32***REMOVED***
        np.einsum('ij,jk->ik', x, x, out=out***REMOVED***
        assert_array_equal(out.base, correct_base***REMOVED***

    def test_small_boolean_arrays(self***REMOVED***:
        # See gh-5946.
        # Use array of True embedded in False.
        a = np.zeros((16, 1, 1***REMOVED***, dtype=np.bool_***REMOVED***[:2***REMOVED***
        a[...***REMOVED*** = True
        out = np.zeros((16, 1, 1***REMOVED***, dtype=np.bool_***REMOVED***[:2***REMOVED***
        tgt = np.ones((2,1,1***REMOVED***, dtype=np.bool_***REMOVED***
        res = np.einsum('...ij,...jk->...ik', a, a, out=out***REMOVED***
        assert_equal(res, tgt***REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
