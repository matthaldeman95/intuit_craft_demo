from __future__ import division, absolute_import, print_function

import sys
***REMOVED***
import shutil
from tempfile import NamedTemporaryFile, TemporaryFile, mktemp, mkdtemp

from numpy import memmap
from numpy import arange, allclose, asarray
from numpy.testing import (
    TestCase, run_module_suite, assert_, assert_equal, assert_array_equal,
    dec
***REMOVED***

class TestMemmap(TestCase***REMOVED***:
    def setUp(self***REMOVED***:
        self.tmpfp = NamedTemporaryFile(prefix='mmap'***REMOVED***
        self.tempdir = mkdtemp(***REMOVED***
        self.shape = (3, 4***REMOVED***
        self.dtype = 'float32'
        self.data = arange(12, dtype=self.dtype***REMOVED***
        self.data.resize(self.shape***REMOVED***

    def tearDown(self***REMOVED***:
        self.tmpfp.close(***REMOVED***
        shutil.rmtree(self.tempdir***REMOVED***

    def test_roundtrip(self***REMOVED***:
        # Write data to file
        fp = memmap(self.tmpfp, dtype=self.dtype, mode='w+',
                    shape=self.shape***REMOVED***
        fp[:***REMOVED*** = self.data[:***REMOVED***
        del fp  # Test __del__ machinery, which handles cleanup

        # Read data back from file
        newfp = memmap(self.tmpfp, dtype=self.dtype, mode='r',
                       shape=self.shape***REMOVED***
        assert_(allclose(self.data, newfp***REMOVED******REMOVED***
        assert_array_equal(self.data, newfp***REMOVED***

    def test_open_with_filename(self***REMOVED***:
        tmpname = mktemp('', 'mmap', dir=self.tempdir***REMOVED***
        fp = memmap(tmpname, dtype=self.dtype, mode='w+',
                       shape=self.shape***REMOVED***
        fp[:***REMOVED*** = self.data[:***REMOVED***
        del fp

    def test_unnamed_file(self***REMOVED***:
        with TemporaryFile(***REMOVED*** as f:
            fp = memmap(f, dtype=self.dtype, shape=self.shape***REMOVED***
            del fp

    def test_attributes(self***REMOVED***:
        offset = 1
        mode = "w+"
        fp = memmap(self.tmpfp, dtype=self.dtype, mode=mode,
                    shape=self.shape, offset=offset***REMOVED***
        self.assertEqual(offset, fp.offset***REMOVED***
        self.assertEqual(mode, fp.mode***REMOVED***
        del fp

    def test_filename(self***REMOVED***:
        tmpname = mktemp('', 'mmap', dir=self.tempdir***REMOVED***
        fp = memmap(tmpname, dtype=self.dtype, mode='w+',
                       shape=self.shape***REMOVED***
        abspath = os.path.abspath(tmpname***REMOVED***
        fp[:***REMOVED*** = self.data[:***REMOVED***
        self.assertEqual(abspath, fp.filename***REMOVED***
        b = fp[:1***REMOVED***
        self.assertEqual(abspath, b.filename***REMOVED***
        del b
        del fp

    def test_filename_fileobj(self***REMOVED***:
        fp = memmap(self.tmpfp, dtype=self.dtype, mode="w+",
                    shape=self.shape***REMOVED***
        self.assertEqual(fp.filename, self.tmpfp.name***REMOVED***

    @dec.knownfailureif(sys.platform == 'gnu0', "This test is known to fail on hurd"***REMOVED***
    def test_flush(self***REMOVED***:
        fp = memmap(self.tmpfp, dtype=self.dtype, mode='w+',
                    shape=self.shape***REMOVED***
        fp[:***REMOVED*** = self.data[:***REMOVED***
        assert_equal(fp[0***REMOVED***, self.data[0***REMOVED******REMOVED***
        fp.flush(***REMOVED***

    def test_del(self***REMOVED***:
        # Make sure a view does not delete the underlying mmap
        fp_base = memmap(self.tmpfp, dtype=self.dtype, mode='w+',
                    shape=self.shape***REMOVED***
        fp_base[0***REMOVED*** = 5
        fp_view = fp_base[0:1***REMOVED***
        assert_equal(fp_view[0***REMOVED***, 5***REMOVED***
        del fp_view
        # Should still be able to access and assign values after
        # deleting the view
        assert_equal(fp_base[0***REMOVED***, 5***REMOVED***
        fp_base[0***REMOVED*** = 6
        assert_equal(fp_base[0***REMOVED***, 6***REMOVED***

    def test_arithmetic_drops_references(self***REMOVED***:
        fp = memmap(self.tmpfp, dtype=self.dtype, mode='w+',
                    shape=self.shape***REMOVED***
        tmp = (fp + 10***REMOVED***
        if isinstance(tmp, memmap***REMOVED***:
            assert_(tmp._mmap is not fp._mmap***REMOVED***

    def test_indexing_drops_references(self***REMOVED***:
        fp = memmap(self.tmpfp, dtype=self.dtype, mode='w+',
                    shape=self.shape***REMOVED***
        tmp = fp[[(1, 2***REMOVED***, (2, 3***REMOVED******REMOVED******REMOVED***
        if isinstance(tmp, memmap***REMOVED***:
            assert_(tmp._mmap is not fp._mmap***REMOVED***

    def test_slicing_keeps_references(self***REMOVED***:
        fp = memmap(self.tmpfp, dtype=self.dtype, mode='w+',
                    shape=self.shape***REMOVED***
        assert_(fp[:2, :2***REMOVED***._mmap is fp._mmap***REMOVED***

    def test_view(self***REMOVED***:
        fp = memmap(self.tmpfp, dtype=self.dtype, shape=self.shape***REMOVED***
        new1 = fp.view(***REMOVED***
        new2 = new1.view(***REMOVED***
        assert_(new1.base is fp***REMOVED***
        assert_(new2.base is fp***REMOVED***
        new_array = asarray(fp***REMOVED***
        assert_(new_array.base is fp***REMOVED***

if __name__ == "__main__":
    run_module_suite(***REMOVED***
