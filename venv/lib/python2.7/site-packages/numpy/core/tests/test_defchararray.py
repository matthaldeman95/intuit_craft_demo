from __future__ import division, absolute_import, print_function

import sys

import numpy as np
from numpy.core.multiarray import _vec_string
from numpy.compat import asbytes, asbytes_nested, sixu
from numpy.testing import (
    TestCase, run_module_suite, assert_, assert_equal, assert_array_equal
***REMOVED***

kw_unicode_true = {'unicode': True***REMOVED***  # make 2to3 work properly
kw_unicode_false = {'unicode': False***REMOVED***

class TestBasic(TestCase***REMOVED***:
    def test_from_object_array(self***REMOVED***:
        A = np.array([['abc', 2***REMOVED***,
                      ['long   ', '0123456789'***REMOVED******REMOVED***, dtype='O'***REMOVED***
        B = np.char.array(A***REMOVED***
        assert_equal(B.dtype.itemsize, 10***REMOVED***
        assert_array_equal(B, asbytes_nested([['abc', '2'***REMOVED***,
                                              ['long', '0123456789'***REMOVED******REMOVED******REMOVED******REMOVED***

    def test_from_object_array_unicode(self***REMOVED***:
        A = np.array([['abc', sixu('Sigma \u03a3'***REMOVED******REMOVED***,
                      ['long   ', '0123456789'***REMOVED******REMOVED***, dtype='O'***REMOVED***
        self.assertRaises(ValueError, np.char.array, (A,***REMOVED******REMOVED***
        B = np.char.array(A, **kw_unicode_true***REMOVED***
        assert_equal(B.dtype.itemsize, 10 * np.array('a', 'U'***REMOVED***.dtype.itemsize***REMOVED***
        assert_array_equal(B, [['abc', sixu('Sigma \u03a3'***REMOVED******REMOVED***,
                               ['long', '0123456789'***REMOVED******REMOVED******REMOVED***

    def test_from_string_array(self***REMOVED***:
        A = np.array(asbytes_nested([['abc', 'foo'***REMOVED***,
                                     ['long   ', '0123456789'***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_equal(A.dtype.type, np.string_***REMOVED***
        B = np.char.array(A***REMOVED***
        assert_array_equal(B, A***REMOVED***
        assert_equal(B.dtype, A.dtype***REMOVED***
        assert_equal(B.shape, A.shape***REMOVED***
        B[0, 0***REMOVED*** = 'changed'
        assert_(B[0, 0***REMOVED*** != A[0, 0***REMOVED******REMOVED***
        C = np.char.asarray(A***REMOVED***
        assert_array_equal(C, A***REMOVED***
        assert_equal(C.dtype, A.dtype***REMOVED***
        C[0, 0***REMOVED*** = 'changed again'
        assert_(C[0, 0***REMOVED*** != B[0, 0***REMOVED******REMOVED***
        assert_(C[0, 0***REMOVED*** == A[0, 0***REMOVED******REMOVED***

    def test_from_unicode_array(self***REMOVED***:
        A = np.array([['abc', sixu('Sigma \u03a3'***REMOVED******REMOVED***,
                      ['long   ', '0123456789'***REMOVED******REMOVED******REMOVED***
        assert_equal(A.dtype.type, np.unicode_***REMOVED***
        B = np.char.array(A***REMOVED***
        assert_array_equal(B, A***REMOVED***
        assert_equal(B.dtype, A.dtype***REMOVED***
        assert_equal(B.shape, A.shape***REMOVED***
        B = np.char.array(A, **kw_unicode_true***REMOVED***
        assert_array_equal(B, A***REMOVED***
        assert_equal(B.dtype, A.dtype***REMOVED***
        assert_equal(B.shape, A.shape***REMOVED***

        def fail(***REMOVED***:
            np.char.array(A, **kw_unicode_false***REMOVED***

        self.assertRaises(UnicodeEncodeError, fail***REMOVED***

    def test_unicode_upconvert(self***REMOVED***:
        A = np.char.array(['abc'***REMOVED******REMOVED***
        B = np.char.array([sixu('\u03a3'***REMOVED******REMOVED******REMOVED***
        assert_(issubclass((A + B***REMOVED***.dtype.type, np.unicode_***REMOVED******REMOVED***

    def test_from_string(self***REMOVED***:
        A = np.char.array(asbytes('abc'***REMOVED******REMOVED***
        assert_equal(len(A***REMOVED***, 1***REMOVED***
        assert_equal(len(A[0***REMOVED******REMOVED***, 3***REMOVED***
        assert_(issubclass(A.dtype.type, np.string_***REMOVED******REMOVED***

    def test_from_unicode(self***REMOVED***:
        A = np.char.array(sixu('\u03a3'***REMOVED******REMOVED***
        assert_equal(len(A***REMOVED***, 1***REMOVED***
        assert_equal(len(A[0***REMOVED******REMOVED***, 1***REMOVED***
        assert_equal(A.itemsize, 4***REMOVED***
        assert_(issubclass(A.dtype.type, np.unicode_***REMOVED******REMOVED***

class TestVecString(TestCase***REMOVED***:
    def test_non_existent_method(self***REMOVED***:

        def fail(***REMOVED***:
            _vec_string('a', np.string_, 'bogus'***REMOVED***

        self.assertRaises(AttributeError, fail***REMOVED***

    def test_non_string_array(self***REMOVED***:

        def fail(***REMOVED***:
            _vec_string(1, np.string_, 'strip'***REMOVED***

        self.assertRaises(TypeError, fail***REMOVED***

    def test_invalid_args_tuple(self***REMOVED***:

        def fail(***REMOVED***:
            _vec_string(['a'***REMOVED***, np.string_, 'strip', 1***REMOVED***

        self.assertRaises(TypeError, fail***REMOVED***

    def test_invalid_type_descr(self***REMOVED***:

        def fail(***REMOVED***:
            _vec_string(['a'***REMOVED***, 'BOGUS', 'strip'***REMOVED***

        self.assertRaises(TypeError, fail***REMOVED***

    def test_invalid_function_args(self***REMOVED***:

        def fail(***REMOVED***:
            _vec_string(['a'***REMOVED***, np.string_, 'strip', (1,***REMOVED******REMOVED***

        self.assertRaises(TypeError, fail***REMOVED***

    def test_invalid_result_type(self***REMOVED***:

        def fail(***REMOVED***:
            _vec_string(['a'***REMOVED***, np.integer, 'strip'***REMOVED***

        self.assertRaises(TypeError, fail***REMOVED***

    def test_broadcast_error(self***REMOVED***:

        def fail(***REMOVED***:
            _vec_string([['abc', 'def'***REMOVED******REMOVED***, np.integer, 'find', (['a', 'd', 'j'***REMOVED***,***REMOVED******REMOVED***

        self.assertRaises(ValueError, fail***REMOVED***


class TestWhitespace(TestCase***REMOVED***:
    def setUp(self***REMOVED***:
        self.A = np.array([['abc ', '123  '***REMOVED***,
                           ['789 ', 'xyz '***REMOVED******REMOVED******REMOVED***.view(np.chararray***REMOVED***
        self.B = np.array([['abc', '123'***REMOVED***,
                           ['789', 'xyz'***REMOVED******REMOVED******REMOVED***.view(np.chararray***REMOVED***

    def test1(self***REMOVED***:
        assert_(np.all(self.A == self.B***REMOVED******REMOVED***
        assert_(np.all(self.A >= self.B***REMOVED******REMOVED***
        assert_(np.all(self.A <= self.B***REMOVED******REMOVED***
        assert_(not np.any(self.A > self.B***REMOVED******REMOVED***
        assert_(not np.any(self.A < self.B***REMOVED******REMOVED***
        assert_(not np.any(self.A != self.B***REMOVED******REMOVED***

class TestChar(TestCase***REMOVED***:
    def setUp(self***REMOVED***:
        self.A = np.array('abc1', dtype='c'***REMOVED***.view(np.chararray***REMOVED***

    def test_it(self***REMOVED***:
        assert_equal(self.A.shape, (4,***REMOVED******REMOVED***
        assert_equal(self.A.upper(***REMOVED***[:2***REMOVED***.tobytes(***REMOVED***, asbytes('AB'***REMOVED******REMOVED***

class TestComparisons(TestCase***REMOVED***:
    def setUp(self***REMOVED***:
        self.A = np.array([['abc', '123'***REMOVED***,
                           ['789', 'xyz'***REMOVED******REMOVED******REMOVED***.view(np.chararray***REMOVED***
        self.B = np.array([['efg', '123  '***REMOVED***,
                           ['051', 'tuv'***REMOVED******REMOVED******REMOVED***.view(np.chararray***REMOVED***

    def test_not_equal(self***REMOVED***:
        assert_array_equal((self.A != self.B***REMOVED***, [[True, False***REMOVED***, [True, True***REMOVED******REMOVED******REMOVED***

    def test_equal(self***REMOVED***:
        assert_array_equal((self.A == self.B***REMOVED***, [[False, True***REMOVED***, [False, False***REMOVED******REMOVED******REMOVED***

    def test_greater_equal(self***REMOVED***:
        assert_array_equal((self.A >= self.B***REMOVED***, [[False, True***REMOVED***, [True, True***REMOVED******REMOVED******REMOVED***

    def test_less_equal(self***REMOVED***:
        assert_array_equal((self.A <= self.B***REMOVED***, [[True, True***REMOVED***, [False, False***REMOVED******REMOVED******REMOVED***

    def test_greater(self***REMOVED***:
        assert_array_equal((self.A > self.B***REMOVED***, [[False, False***REMOVED***, [True, True***REMOVED******REMOVED******REMOVED***

    def test_less(self***REMOVED***:
        assert_array_equal((self.A < self.B***REMOVED***, [[True, False***REMOVED***, [False, False***REMOVED******REMOVED******REMOVED***

class TestComparisonsMixed1(TestComparisons***REMOVED***:
    ***REMOVED***Ticket #1276***REMOVED***

    def setUp(self***REMOVED***:
        TestComparisons.setUp(self***REMOVED***
        self.B = np.array([['efg', '123  '***REMOVED***,
                           ['051', 'tuv'***REMOVED******REMOVED***, np.unicode_***REMOVED***.view(np.chararray***REMOVED***

class TestComparisonsMixed2(TestComparisons***REMOVED***:
    ***REMOVED***Ticket #1276***REMOVED***

    def setUp(self***REMOVED***:
        TestComparisons.setUp(self***REMOVED***
        self.A = np.array([['abc', '123'***REMOVED***,
                           ['789', 'xyz'***REMOVED******REMOVED***, np.unicode_***REMOVED***.view(np.chararray***REMOVED***

class TestInformation(TestCase***REMOVED***:
    def setUp(self***REMOVED***:
        self.A = np.array([[' abc ', ''***REMOVED***,
                           ['12345', 'MixedCase'***REMOVED***,
                           ['123 \t 345 \0 ', 'UPPER'***REMOVED******REMOVED******REMOVED***.view(np.chararray***REMOVED***
        self.B = np.array([[sixu(' \u03a3 '***REMOVED***, sixu(''***REMOVED******REMOVED***,
                           [sixu('12345'***REMOVED***, sixu('MixedCase'***REMOVED******REMOVED***,
                           [sixu('123 \t 345 \0 '***REMOVED***, sixu('UPPER'***REMOVED******REMOVED******REMOVED******REMOVED***.view(np.chararray***REMOVED***

    def test_len(self***REMOVED***:
        assert_(issubclass(np.char.str_len(self.A***REMOVED***.dtype.type, np.integer***REMOVED******REMOVED***
        assert_array_equal(np.char.str_len(self.A***REMOVED***, [[5, 0***REMOVED***, [5, 9***REMOVED***, [12, 5***REMOVED******REMOVED******REMOVED***
        assert_array_equal(np.char.str_len(self.B***REMOVED***, [[3, 0***REMOVED***, [5, 9***REMOVED***, [12, 5***REMOVED******REMOVED******REMOVED***

    def test_count(self***REMOVED***:
        assert_(issubclass(self.A.count(''***REMOVED***.dtype.type, np.integer***REMOVED******REMOVED***
        assert_array_equal(self.A.count('a'***REMOVED***, [[1, 0***REMOVED***, [0, 1***REMOVED***, [0, 0***REMOVED******REMOVED******REMOVED***
        assert_array_equal(self.A.count('123'***REMOVED***, [[0, 0***REMOVED***, [1, 0***REMOVED***, [1, 0***REMOVED******REMOVED******REMOVED***
        # Python doesn't seem to like counting NULL characters
        # assert_array_equal(self.A.count('\0'***REMOVED***, [[0, 0***REMOVED***, [0, 0***REMOVED***, [1, 0***REMOVED******REMOVED******REMOVED***
        assert_array_equal(self.A.count('a', 0, 2***REMOVED***, [[1, 0***REMOVED***, [0, 0***REMOVED***, [0, 0***REMOVED******REMOVED******REMOVED***
        assert_array_equal(self.B.count('a'***REMOVED***, [[0, 0***REMOVED***, [0, 1***REMOVED***, [0, 0***REMOVED******REMOVED******REMOVED***
        assert_array_equal(self.B.count('123'***REMOVED***, [[0, 0***REMOVED***, [1, 0***REMOVED***, [1, 0***REMOVED******REMOVED******REMOVED***
        # assert_array_equal(self.B.count('\0'***REMOVED***, [[0, 0***REMOVED***, [0, 0***REMOVED***, [1, 0***REMOVED******REMOVED******REMOVED***

    def test_endswith(self***REMOVED***:
        assert_(issubclass(self.A.endswith(''***REMOVED***.dtype.type, np.bool_***REMOVED******REMOVED***
        assert_array_equal(self.A.endswith(' '***REMOVED***, [[1, 0***REMOVED***, [0, 0***REMOVED***, [1, 0***REMOVED******REMOVED******REMOVED***
        assert_array_equal(self.A.endswith('3', 0, 3***REMOVED***, [[0, 0***REMOVED***, [1, 0***REMOVED***, [1, 0***REMOVED******REMOVED******REMOVED***

        def fail(***REMOVED***:
            self.A.endswith('3', 'fdjk'***REMOVED***

        self.assertRaises(TypeError, fail***REMOVED***

    def test_find(self***REMOVED***:
        assert_(issubclass(self.A.find('a'***REMOVED***.dtype.type, np.integer***REMOVED******REMOVED***
        assert_array_equal(self.A.find('a'***REMOVED***, [[1, -1***REMOVED***, [-1, 6***REMOVED***, [-1, -1***REMOVED******REMOVED******REMOVED***
        assert_array_equal(self.A.find('3'***REMOVED***, [[-1, -1***REMOVED***, [2, -1***REMOVED***, [2, -1***REMOVED******REMOVED******REMOVED***
        assert_array_equal(self.A.find('a', 0, 2***REMOVED***, [[1, -1***REMOVED***, [-1, -1***REMOVED***, [-1, -1***REMOVED******REMOVED******REMOVED***
        assert_array_equal(self.A.find(['1', 'P'***REMOVED******REMOVED***, [[-1, -1***REMOVED***, [0, -1***REMOVED***, [0, 1***REMOVED******REMOVED******REMOVED***

    def test_index(self***REMOVED***:

        def fail(***REMOVED***:
            self.A.index('a'***REMOVED***

        self.assertRaises(ValueError, fail***REMOVED***
        assert_(np.char.index('abcba', 'b'***REMOVED*** == 1***REMOVED***
        assert_(issubclass(np.char.index('abcba', 'b'***REMOVED***.dtype.type, np.integer***REMOVED******REMOVED***

    def test_isalnum(self***REMOVED***:
        assert_(issubclass(self.A.isalnum(***REMOVED***.dtype.type, np.bool_***REMOVED******REMOVED***
        assert_array_equal(self.A.isalnum(***REMOVED***, [[False, False***REMOVED***, [True, True***REMOVED***, [False, True***REMOVED******REMOVED******REMOVED***

    def test_isalpha(self***REMOVED***:
        assert_(issubclass(self.A.isalpha(***REMOVED***.dtype.type, np.bool_***REMOVED******REMOVED***
        assert_array_equal(self.A.isalpha(***REMOVED***, [[False, False***REMOVED***, [False, True***REMOVED***, [False, True***REMOVED******REMOVED******REMOVED***

    def test_isdigit(self***REMOVED***:
        assert_(issubclass(self.A.isdigit(***REMOVED***.dtype.type, np.bool_***REMOVED******REMOVED***
        assert_array_equal(self.A.isdigit(***REMOVED***, [[False, False***REMOVED***, [True, False***REMOVED***, [False, False***REMOVED******REMOVED******REMOVED***

    def test_islower(self***REMOVED***:
        assert_(issubclass(self.A.islower(***REMOVED***.dtype.type, np.bool_***REMOVED******REMOVED***
        assert_array_equal(self.A.islower(***REMOVED***, [[True, False***REMOVED***, [False, False***REMOVED***, [False, False***REMOVED******REMOVED******REMOVED***

    def test_isspace(self***REMOVED***:
        assert_(issubclass(self.A.isspace(***REMOVED***.dtype.type, np.bool_***REMOVED******REMOVED***
        assert_array_equal(self.A.isspace(***REMOVED***, [[False, False***REMOVED***, [False, False***REMOVED***, [False, False***REMOVED******REMOVED******REMOVED***

    def test_istitle(self***REMOVED***:
        assert_(issubclass(self.A.istitle(***REMOVED***.dtype.type, np.bool_***REMOVED******REMOVED***
        assert_array_equal(self.A.istitle(***REMOVED***, [[False, False***REMOVED***, [False, False***REMOVED***, [False, False***REMOVED******REMOVED******REMOVED***

    def test_isupper(self***REMOVED***:
        assert_(issubclass(self.A.isupper(***REMOVED***.dtype.type, np.bool_***REMOVED******REMOVED***
        assert_array_equal(self.A.isupper(***REMOVED***, [[False, False***REMOVED***, [False, False***REMOVED***, [False, True***REMOVED******REMOVED******REMOVED***

    def test_rfind(self***REMOVED***:
        assert_(issubclass(self.A.rfind('a'***REMOVED***.dtype.type, np.integer***REMOVED******REMOVED***
        assert_array_equal(self.A.rfind('a'***REMOVED***, [[1, -1***REMOVED***, [-1, 6***REMOVED***, [-1, -1***REMOVED******REMOVED******REMOVED***
        assert_array_equal(self.A.rfind('3'***REMOVED***, [[-1, -1***REMOVED***, [2, -1***REMOVED***, [6, -1***REMOVED******REMOVED******REMOVED***
        assert_array_equal(self.A.rfind('a', 0, 2***REMOVED***, [[1, -1***REMOVED***, [-1, -1***REMOVED***, [-1, -1***REMOVED******REMOVED******REMOVED***
        assert_array_equal(self.A.rfind(['1', 'P'***REMOVED******REMOVED***, [[-1, -1***REMOVED***, [0, -1***REMOVED***, [0, 2***REMOVED******REMOVED******REMOVED***

    def test_rindex(self***REMOVED***:

        def fail(***REMOVED***:
            self.A.rindex('a'***REMOVED***

        self.assertRaises(ValueError, fail***REMOVED***
        assert_(np.char.rindex('abcba', 'b'***REMOVED*** == 3***REMOVED***
        assert_(issubclass(np.char.rindex('abcba', 'b'***REMOVED***.dtype.type, np.integer***REMOVED******REMOVED***

    def test_startswith(self***REMOVED***:
        assert_(issubclass(self.A.startswith(''***REMOVED***.dtype.type, np.bool_***REMOVED******REMOVED***
        assert_array_equal(self.A.startswith(' '***REMOVED***, [[1, 0***REMOVED***, [0, 0***REMOVED***, [0, 0***REMOVED******REMOVED******REMOVED***
        assert_array_equal(self.A.startswith('1', 0, 3***REMOVED***, [[0, 0***REMOVED***, [1, 0***REMOVED***, [1, 0***REMOVED******REMOVED******REMOVED***

        def fail(***REMOVED***:
            self.A.startswith('3', 'fdjk'***REMOVED***

        self.assertRaises(TypeError, fail***REMOVED***


class TestMethods(TestCase***REMOVED***:
    def setUp(self***REMOVED***:
        self.A = np.array([[' abc ', ''***REMOVED***,
                           ['12345', 'MixedCase'***REMOVED***,
                           ['123 \t 345 \0 ', 'UPPER'***REMOVED******REMOVED***,
                          dtype='S'***REMOVED***.view(np.chararray***REMOVED***
        self.B = np.array([[sixu(' \u03a3 '***REMOVED***, sixu(''***REMOVED******REMOVED***,
                           [sixu('12345'***REMOVED***, sixu('MixedCase'***REMOVED******REMOVED***,
                           [sixu('123 \t 345 \0 '***REMOVED***, sixu('UPPER'***REMOVED******REMOVED******REMOVED******REMOVED***.view(np.chararray***REMOVED***

    def test_capitalize(self***REMOVED***:
        tgt = asbytes_nested([[' abc ', ''***REMOVED***,
                              ['12345', 'Mixedcase'***REMOVED***,
                              ['123 \t 345 \0 ', 'Upper'***REMOVED******REMOVED******REMOVED***
        assert_(issubclass(self.A.capitalize(***REMOVED***.dtype.type, np.string_***REMOVED******REMOVED***
        assert_array_equal(self.A.capitalize(***REMOVED***, tgt***REMOVED***

        tgt = [[sixu(' \u03c3 '***REMOVED***, ''***REMOVED***,
               ['12345', 'Mixedcase'***REMOVED***,
               ['123 \t 345 \0 ', 'Upper'***REMOVED******REMOVED***
        assert_(issubclass(self.B.capitalize(***REMOVED***.dtype.type, np.unicode_***REMOVED******REMOVED***
        assert_array_equal(self.B.capitalize(***REMOVED***, tgt***REMOVED***

    def test_center(self***REMOVED***:
        assert_(issubclass(self.A.center(10***REMOVED***.dtype.type, np.string_***REMOVED******REMOVED***
        C = self.A.center([10, 20***REMOVED******REMOVED***
        assert_array_equal(np.char.str_len(C***REMOVED***, [[10, 20***REMOVED***, [10, 20***REMOVED***, [12, 20***REMOVED******REMOVED******REMOVED***

        C = self.A.center(20, asbytes('#'***REMOVED******REMOVED***
        assert_(np.all(C.startswith(asbytes('#'***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_(np.all(C.endswith(asbytes('#'***REMOVED******REMOVED******REMOVED******REMOVED***

        C = np.char.center(asbytes('FOO'***REMOVED***, [[10, 20***REMOVED***, [15, 8***REMOVED******REMOVED******REMOVED***
        tgt = asbytes_nested([['   FOO    ', '        FOO         '***REMOVED***,
                              ['      FOO      ', '  FOO   '***REMOVED******REMOVED******REMOVED***
        assert_(issubclass(C.dtype.type, np.string_***REMOVED******REMOVED***
        assert_array_equal(C, tgt***REMOVED***

    def test_decode(self***REMOVED***:
        if sys.version_info[0***REMOVED*** >= 3:
            A = np.char.array([asbytes('\\u03a3'***REMOVED******REMOVED******REMOVED***
            assert_(A.decode('unicode-escape'***REMOVED***[0***REMOVED*** == '\u03a3'***REMOVED***
        else:
            A = np.char.array(['736563726574206d657373616765'***REMOVED******REMOVED***
            assert_(A.decode('hex_codec'***REMOVED***[0***REMOVED*** == 'secret message'***REMOVED***

    def test_encode(self***REMOVED***:
        B = self.B.encode('unicode_escape'***REMOVED***
        assert_(B[0***REMOVED***[0***REMOVED*** == str(' \\u03a3 '***REMOVED***.encode('latin1'***REMOVED******REMOVED***

    def test_expandtabs(self***REMOVED***:
        T = self.A.expandtabs(***REMOVED***
        assert_(T[2, 0***REMOVED*** == asbytes('123      345 \0'***REMOVED******REMOVED***

    def test_join(self***REMOVED***:
        if sys.version_info[0***REMOVED*** >= 3:
            # NOTE: list(b'123'***REMOVED*** == [49, 50, 51***REMOVED***
            #       so that b','.join(b'123'***REMOVED*** results to an error on Py3
            A0 = self.A.decode('ascii'***REMOVED***
        else:
            A0 = self.A

        A = np.char.join([',', '#'***REMOVED***, A0***REMOVED***
        if sys.version_info[0***REMOVED*** >= 3:
            assert_(issubclass(A.dtype.type, np.unicode_***REMOVED******REMOVED***
        else:
            assert_(issubclass(A.dtype.type, np.string_***REMOVED******REMOVED***
        tgt = np.array([[' ,a,b,c, ', ''***REMOVED***,
                        ['1,2,3,4,5', 'M#i#x#e#d#C#a#s#e'***REMOVED***,
                        ['1,2,3, ,\t, ,3,4,5, ,\x00, ', 'U#P#P#E#R'***REMOVED******REMOVED******REMOVED***
        assert_array_equal(np.char.join([',', '#'***REMOVED***, A0***REMOVED***, tgt***REMOVED***

    def test_ljust(self***REMOVED***:
        assert_(issubclass(self.A.ljust(10***REMOVED***.dtype.type, np.string_***REMOVED******REMOVED***

        C = self.A.ljust([10, 20***REMOVED******REMOVED***
        assert_array_equal(np.char.str_len(C***REMOVED***, [[10, 20***REMOVED***, [10, 20***REMOVED***, [12, 20***REMOVED******REMOVED******REMOVED***

        C = self.A.ljust(20, asbytes('#'***REMOVED******REMOVED***
        assert_array_equal(C.startswith(asbytes('#'***REMOVED******REMOVED***, [
                [False, True***REMOVED***, [False, False***REMOVED***, [False, False***REMOVED******REMOVED******REMOVED***
        assert_(np.all(C.endswith(asbytes('#'***REMOVED******REMOVED******REMOVED******REMOVED***

        C = np.char.ljust(asbytes('FOO'***REMOVED***, [[10, 20***REMOVED***, [15, 8***REMOVED******REMOVED******REMOVED***
        tgt = asbytes_nested([['FOO       ', 'FOO                 '***REMOVED***,
                              ['FOO            ', 'FOO     '***REMOVED******REMOVED******REMOVED***
        assert_(issubclass(C.dtype.type, np.string_***REMOVED******REMOVED***
        assert_array_equal(C, tgt***REMOVED***

    def test_lower(self***REMOVED***:
        tgt = asbytes_nested([[' abc ', ''***REMOVED***,
                              ['12345', 'mixedcase'***REMOVED***,
                              ['123 \t 345 \0 ', 'upper'***REMOVED******REMOVED******REMOVED***
        assert_(issubclass(self.A.lower(***REMOVED***.dtype.type, np.string_***REMOVED******REMOVED***
        assert_array_equal(self.A.lower(***REMOVED***, tgt***REMOVED***

        tgt = [[sixu(' \u03c3 '***REMOVED***, sixu(''***REMOVED******REMOVED***,
               [sixu('12345'***REMOVED***, sixu('mixedcase'***REMOVED******REMOVED***,
               [sixu('123 \t 345 \0 '***REMOVED***, sixu('upper'***REMOVED******REMOVED******REMOVED***
        assert_(issubclass(self.B.lower(***REMOVED***.dtype.type, np.unicode_***REMOVED******REMOVED***
        assert_array_equal(self.B.lower(***REMOVED***, tgt***REMOVED***

    def test_lstrip(self***REMOVED***:
        tgt = asbytes_nested([['abc ', ''***REMOVED***,
                              ['12345', 'MixedCase'***REMOVED***,
                              ['123 \t 345 \0 ', 'UPPER'***REMOVED******REMOVED******REMOVED***
        assert_(issubclass(self.A.lstrip(***REMOVED***.dtype.type, np.string_***REMOVED******REMOVED***
        assert_array_equal(self.A.lstrip(***REMOVED***, tgt***REMOVED***

        tgt = asbytes_nested([[' abc', ''***REMOVED***,
                              ['2345', 'ixedCase'***REMOVED***,
                              ['23 \t 345 \x00', 'UPPER'***REMOVED******REMOVED******REMOVED***
        assert_array_equal(self.A.lstrip(asbytes_nested(['1', 'M'***REMOVED******REMOVED******REMOVED***, tgt***REMOVED***

        tgt = [[sixu('\u03a3 '***REMOVED***, ''***REMOVED***,
               ['12345', 'MixedCase'***REMOVED***,
               ['123 \t 345 \0 ', 'UPPER'***REMOVED******REMOVED***
        assert_(issubclass(self.B.lstrip(***REMOVED***.dtype.type, np.unicode_***REMOVED******REMOVED***
        assert_array_equal(self.B.lstrip(***REMOVED***, tgt***REMOVED***

    def test_partition(self***REMOVED***:
        P = self.A.partition(asbytes_nested(['3', 'M'***REMOVED******REMOVED******REMOVED***
        tgt = asbytes_nested([[(' abc ', '', ''***REMOVED***, ('', '', ''***REMOVED******REMOVED***,
                             [('12', '3', '45'***REMOVED***, ('', 'M', 'ixedCase'***REMOVED******REMOVED***,
                             [('12', '3', ' \t 345 \0 '***REMOVED***, ('UPPER', '', ''***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_(issubclass(P.dtype.type, np.string_***REMOVED******REMOVED***
        assert_array_equal(P, tgt***REMOVED***

    def test_replace(self***REMOVED***:
        R = self.A.replace(asbytes_nested(['3', 'a'***REMOVED******REMOVED***,
                           asbytes_nested(['##########', '@'***REMOVED******REMOVED******REMOVED***
        tgt = asbytes_nested([[' abc ', ''***REMOVED***,
                              ['12##########45', 'MixedC@se'***REMOVED***,
                              ['12########## \t ##########45 \x00', 'UPPER'***REMOVED******REMOVED******REMOVED***
        assert_(issubclass(R.dtype.type, np.string_***REMOVED******REMOVED***
        assert_array_equal(R, tgt***REMOVED***

        if sys.version_info[0***REMOVED*** < 3:
            # NOTE: b'abc'.replace(b'a', 'b'***REMOVED*** is not allowed on Py3
            R = self.A.replace(asbytes('a'***REMOVED***, sixu('\u03a3'***REMOVED******REMOVED***
            tgt = [[sixu(' \u03a3bc '***REMOVED***, ''***REMOVED***,
                   ['12345', sixu('MixedC\u03a3se'***REMOVED******REMOVED***,
                   ['123 \t 345 \x00', 'UPPER'***REMOVED******REMOVED***
            assert_(issubclass(R.dtype.type, np.unicode_***REMOVED******REMOVED***
            assert_array_equal(R, tgt***REMOVED***

    def test_rjust(self***REMOVED***:
        assert_(issubclass(self.A.rjust(10***REMOVED***.dtype.type, np.string_***REMOVED******REMOVED***

        C = self.A.rjust([10, 20***REMOVED******REMOVED***
        assert_array_equal(np.char.str_len(C***REMOVED***, [[10, 20***REMOVED***, [10, 20***REMOVED***, [12, 20***REMOVED******REMOVED******REMOVED***

        C = self.A.rjust(20, asbytes('#'***REMOVED******REMOVED***
        assert_(np.all(C.startswith(asbytes('#'***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_array_equal(C.endswith(asbytes('#'***REMOVED******REMOVED***,
                           [[False, True***REMOVED***, [False, False***REMOVED***, [False, False***REMOVED******REMOVED******REMOVED***

        C = np.char.rjust(asbytes('FOO'***REMOVED***, [[10, 20***REMOVED***, [15, 8***REMOVED******REMOVED******REMOVED***
        tgt = asbytes_nested([['       FOO', '                 FOO'***REMOVED***,
                              ['            FOO', '     FOO'***REMOVED******REMOVED******REMOVED***
        assert_(issubclass(C.dtype.type, np.string_***REMOVED******REMOVED***
        assert_array_equal(C, tgt***REMOVED***

    def test_rpartition(self***REMOVED***:
        P = self.A.rpartition(asbytes_nested(['3', 'M'***REMOVED******REMOVED******REMOVED***
        tgt = asbytes_nested([[('', '', ' abc '***REMOVED***, ('', '', ''***REMOVED******REMOVED***,
                              [('12', '3', '45'***REMOVED***, ('', 'M', 'ixedCase'***REMOVED******REMOVED***,
                              [('123 \t ', '3', '45 \0 '***REMOVED***, ('', '', 'UPPER'***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_(issubclass(P.dtype.type, np.string_***REMOVED******REMOVED***
        assert_array_equal(P, tgt***REMOVED***

    def test_rsplit(self***REMOVED***:
        A = self.A.rsplit(asbytes('3'***REMOVED******REMOVED***
        tgt = asbytes_nested([[[' abc '***REMOVED***, [''***REMOVED******REMOVED***,
                              [['12', '45'***REMOVED***, ['MixedCase'***REMOVED******REMOVED***,
                              [['12', ' \t ', '45 \x00 '***REMOVED***, ['UPPER'***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_(issubclass(A.dtype.type, np.object_***REMOVED******REMOVED***
        assert_equal(A.tolist(***REMOVED***, tgt***REMOVED***

    def test_rstrip(self***REMOVED***:
        assert_(issubclass(self.A.rstrip(***REMOVED***.dtype.type, np.string_***REMOVED******REMOVED***

        tgt = asbytes_nested([[' abc', ''***REMOVED***,
                              ['12345', 'MixedCase'***REMOVED***,
                              ['123 \t 345', 'UPPER'***REMOVED******REMOVED******REMOVED***
        assert_array_equal(self.A.rstrip(***REMOVED***, tgt***REMOVED***

        tgt = asbytes_nested([[' abc ', ''***REMOVED***,
                              ['1234', 'MixedCase'***REMOVED***,
                              ['123 \t 345 \x00', 'UPP'***REMOVED***
                              ***REMOVED******REMOVED***
        assert_array_equal(self.A.rstrip(asbytes_nested(['5', 'ER'***REMOVED******REMOVED******REMOVED***, tgt***REMOVED***

        tgt = [[sixu(' \u03a3'***REMOVED***, ''***REMOVED***,
               ['12345', 'MixedCase'***REMOVED***,
               ['123 \t 345', 'UPPER'***REMOVED******REMOVED***
        assert_(issubclass(self.B.rstrip(***REMOVED***.dtype.type, np.unicode_***REMOVED******REMOVED***
        assert_array_equal(self.B.rstrip(***REMOVED***, tgt***REMOVED***

    def test_strip(self***REMOVED***:
        tgt = asbytes_nested([['abc', ''***REMOVED***,
                              ['12345', 'MixedCase'***REMOVED***,
                              ['123 \t 345', 'UPPER'***REMOVED******REMOVED******REMOVED***
        assert_(issubclass(self.A.strip(***REMOVED***.dtype.type, np.string_***REMOVED******REMOVED***
        assert_array_equal(self.A.strip(***REMOVED***, tgt***REMOVED***

        tgt = asbytes_nested([[' abc ', ''***REMOVED***,
                              ['234', 'ixedCas'***REMOVED***,
                              ['23 \t 345 \x00', 'UPP'***REMOVED******REMOVED******REMOVED***
        assert_array_equal(self.A.strip(asbytes_nested(['15', 'EReM'***REMOVED******REMOVED******REMOVED***, tgt***REMOVED***

        tgt = [[sixu('\u03a3'***REMOVED***, ''***REMOVED***,
               ['12345', 'MixedCase'***REMOVED***,
               ['123 \t 345', 'UPPER'***REMOVED******REMOVED***
        assert_(issubclass(self.B.strip(***REMOVED***.dtype.type, np.unicode_***REMOVED******REMOVED***
        assert_array_equal(self.B.strip(***REMOVED***, tgt***REMOVED***

    def test_split(self***REMOVED***:
        A = self.A.split(asbytes('3'***REMOVED******REMOVED***
        tgt = asbytes_nested([
                              [[' abc '***REMOVED***, [''***REMOVED******REMOVED***,
                              [['12', '45'***REMOVED***, ['MixedCase'***REMOVED******REMOVED***,
                              [['12', ' \t ', '45 \x00 '***REMOVED***, ['UPPER'***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_(issubclass(A.dtype.type, np.object_***REMOVED******REMOVED***
        assert_equal(A.tolist(***REMOVED***, tgt***REMOVED***

    def test_splitlines(self***REMOVED***:
        A = np.char.array(['abc\nfds\nwer'***REMOVED******REMOVED***.splitlines(***REMOVED***
        assert_(issubclass(A.dtype.type, np.object_***REMOVED******REMOVED***
        assert_(A.shape == (1,***REMOVED******REMOVED***
        assert_(len(A[0***REMOVED******REMOVED*** == 3***REMOVED***

    def test_swapcase(self***REMOVED***:
        tgt = asbytes_nested([[' ABC ', ''***REMOVED***,
                              ['12345', 'mIXEDcASE'***REMOVED***,
                              ['123 \t 345 \0 ', 'upper'***REMOVED******REMOVED******REMOVED***
        assert_(issubclass(self.A.swapcase(***REMOVED***.dtype.type, np.string_***REMOVED******REMOVED***
        assert_array_equal(self.A.swapcase(***REMOVED***, tgt***REMOVED***

        tgt = [[sixu(' \u03c3 '***REMOVED***, sixu(''***REMOVED******REMOVED***,
               [sixu('12345'***REMOVED***, sixu('mIXEDcASE'***REMOVED******REMOVED***,
               [sixu('123 \t 345 \0 '***REMOVED***, sixu('upper'***REMOVED******REMOVED******REMOVED***
        assert_(issubclass(self.B.swapcase(***REMOVED***.dtype.type, np.unicode_***REMOVED******REMOVED***
        assert_array_equal(self.B.swapcase(***REMOVED***, tgt***REMOVED***

    def test_title(self***REMOVED***:
        tgt = asbytes_nested([[' Abc ', ''***REMOVED***,
                              ['12345', 'Mixedcase'***REMOVED***,
                              ['123 \t 345 \0 ', 'Upper'***REMOVED******REMOVED******REMOVED***
        assert_(issubclass(self.A.title(***REMOVED***.dtype.type, np.string_***REMOVED******REMOVED***
        assert_array_equal(self.A.title(***REMOVED***, tgt***REMOVED***

        tgt = [[sixu(' \u03a3 '***REMOVED***, sixu(''***REMOVED******REMOVED***,
               [sixu('12345'***REMOVED***, sixu('Mixedcase'***REMOVED******REMOVED***,
               [sixu('123 \t 345 \0 '***REMOVED***, sixu('Upper'***REMOVED******REMOVED******REMOVED***
        assert_(issubclass(self.B.title(***REMOVED***.dtype.type, np.unicode_***REMOVED******REMOVED***
        assert_array_equal(self.B.title(***REMOVED***, tgt***REMOVED***

    def test_upper(self***REMOVED***:
        tgt = asbytes_nested([[' ABC ', ''***REMOVED***,
                              ['12345', 'MIXEDCASE'***REMOVED***,
                              ['123 \t 345 \0 ', 'UPPER'***REMOVED******REMOVED******REMOVED***
        assert_(issubclass(self.A.upper(***REMOVED***.dtype.type, np.string_***REMOVED******REMOVED***
        assert_array_equal(self.A.upper(***REMOVED***, tgt***REMOVED***

        tgt = [[sixu(' \u03a3 '***REMOVED***, sixu(''***REMOVED******REMOVED***,
               [sixu('12345'***REMOVED***, sixu('MIXEDCASE'***REMOVED******REMOVED***,
               [sixu('123 \t 345 \0 '***REMOVED***, sixu('UPPER'***REMOVED******REMOVED******REMOVED***
        assert_(issubclass(self.B.upper(***REMOVED***.dtype.type, np.unicode_***REMOVED******REMOVED***
        assert_array_equal(self.B.upper(***REMOVED***, tgt***REMOVED***

    def test_isnumeric(self***REMOVED***:

        def fail(***REMOVED***:
            self.A.isnumeric(***REMOVED***

        self.assertRaises(TypeError, fail***REMOVED***
        assert_(issubclass(self.B.isnumeric(***REMOVED***.dtype.type, np.bool_***REMOVED******REMOVED***
        assert_array_equal(self.B.isnumeric(***REMOVED***, [
                [False, False***REMOVED***, [True, False***REMOVED***, [False, False***REMOVED******REMOVED******REMOVED***

    def test_isdecimal(self***REMOVED***:

        def fail(***REMOVED***:
            self.A.isdecimal(***REMOVED***

        self.assertRaises(TypeError, fail***REMOVED***
        assert_(issubclass(self.B.isdecimal(***REMOVED***.dtype.type, np.bool_***REMOVED******REMOVED***
        assert_array_equal(self.B.isdecimal(***REMOVED***, [
                [False, False***REMOVED***, [True, False***REMOVED***, [False, False***REMOVED******REMOVED******REMOVED***


class TestOperations(TestCase***REMOVED***:
    def setUp(self***REMOVED***:
        self.A = np.array([['abc', '123'***REMOVED***,
                           ['789', 'xyz'***REMOVED******REMOVED******REMOVED***.view(np.chararray***REMOVED***
        self.B = np.array([['efg', '456'***REMOVED***,
                           ['051', 'tuv'***REMOVED******REMOVED******REMOVED***.view(np.chararray***REMOVED***

    def test_add(self***REMOVED***:
        AB = np.array([['abcefg', '123456'***REMOVED***,
                       ['789051', 'xyztuv'***REMOVED******REMOVED******REMOVED***.view(np.chararray***REMOVED***
        assert_array_equal(AB, (self.A + self.B***REMOVED******REMOVED***
        assert_(len((self.A + self.B***REMOVED***[0***REMOVED***[0***REMOVED******REMOVED*** == 6***REMOVED***

    def test_radd(self***REMOVED***:
        QA = np.array([['qabc', 'q123'***REMOVED***,
                       ['q789', 'qxyz'***REMOVED******REMOVED******REMOVED***.view(np.chararray***REMOVED***
        assert_array_equal(QA, ('q' + self.A***REMOVED******REMOVED***

    def test_mul(self***REMOVED***:
        A = self.A
        for r in (2, 3, 5, 7, 197***REMOVED***:
            Ar = np.array([[A[0, 0***REMOVED****r, A[0, 1***REMOVED****r***REMOVED***,
                           [A[1, 0***REMOVED****r, A[1, 1***REMOVED****r***REMOVED******REMOVED******REMOVED***.view(np.chararray***REMOVED***

            assert_array_equal(Ar, (self.A * r***REMOVED******REMOVED***

        for ob in [object(***REMOVED***, 'qrs'***REMOVED***:
            ***REMOVED***
                A * ob
            except ValueError:
                pass
            else:
                self.fail("chararray can only be multiplied by integers"***REMOVED***

    def test_rmul(self***REMOVED***:
        A = self.A
        for r in (2, 3, 5, 7, 197***REMOVED***:
            Ar = np.array([[A[0, 0***REMOVED****r, A[0, 1***REMOVED****r***REMOVED***,
                           [A[1, 0***REMOVED****r, A[1, 1***REMOVED****r***REMOVED******REMOVED******REMOVED***.view(np.chararray***REMOVED***
            assert_array_equal(Ar, (r * self.A***REMOVED******REMOVED***

        for ob in [object(***REMOVED***, 'qrs'***REMOVED***:
            ***REMOVED***
                ob * A
            except ValueError:
                pass
            else:
                self.fail("chararray can only be multiplied by integers"***REMOVED***

    def test_mod(self***REMOVED***:
        ***REMOVED***Ticket #856***REMOVED***
        F = np.array([['%d', '%f'***REMOVED***, ['%s', '%r'***REMOVED******REMOVED******REMOVED***.view(np.chararray***REMOVED***
        C = np.array([[3, 7***REMOVED***, [19, 1***REMOVED******REMOVED******REMOVED***
        FC = np.array([['3', '7.000000'***REMOVED***,
                       ['19', '1'***REMOVED******REMOVED******REMOVED***.view(np.chararray***REMOVED***
        assert_array_equal(FC, F % C***REMOVED***

        A = np.array([['%.3f', '%d'***REMOVED***, ['%s', '%r'***REMOVED******REMOVED******REMOVED***.view(np.chararray***REMOVED***
        A1 = np.array([['1.000', '1'***REMOVED***, ['1', '1'***REMOVED******REMOVED******REMOVED***.view(np.chararray***REMOVED***
        assert_array_equal(A1, (A % 1***REMOVED******REMOVED***

        A2 = np.array([['1.000', '2'***REMOVED***, ['3', '4'***REMOVED******REMOVED******REMOVED***.view(np.chararray***REMOVED***
        assert_array_equal(A2, (A % [[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED******REMOVED******REMOVED***

    def test_rmod(self***REMOVED***:
        assert_(("%s" % self.A***REMOVED*** == str(self.A***REMOVED******REMOVED***
        assert_(("%r" % self.A***REMOVED*** == repr(self.A***REMOVED******REMOVED***

        for ob in [42, object(***REMOVED******REMOVED***:
            ***REMOVED***
                ob % self.A
            except TypeError:
                pass
            else:
                self.fail("chararray __rmod__ should fail with "
                          "non-string objects"***REMOVED***

    def test_slice(self***REMOVED***:
        ***REMOVED***Regression test for https://github.com/numpy/numpy/issues/5982***REMOVED***

        arr = np.array([['abc ', 'def '***REMOVED***, ['geh ', 'ijk '***REMOVED******REMOVED***,
                       dtype='S4'***REMOVED***.view(np.chararray***REMOVED***
        sl1 = arr[:***REMOVED***
        assert_array_equal(sl1, arr***REMOVED***
        assert_(sl1.base is arr***REMOVED***
        assert_(sl1.base.base is arr.base***REMOVED***

        sl2 = arr[:, :***REMOVED***
        assert_array_equal(sl2, arr***REMOVED***
        assert_(sl2.base is arr***REMOVED***
        assert_(sl2.base.base is arr.base***REMOVED***

        assert_(arr[0, 0***REMOVED*** == asbytes('abc'***REMOVED******REMOVED***


def test_empty_indexing(***REMOVED***:
    ***REMOVED***Regression test for ticket 1948.***REMOVED***
    # Check that indexing a chararray with an empty list/array returns an
    # empty chararray instead of a chararray with a single empty string in it.
    s = np.chararray((4,***REMOVED******REMOVED***
    assert_(s[[***REMOVED******REMOVED***.size == 0***REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
