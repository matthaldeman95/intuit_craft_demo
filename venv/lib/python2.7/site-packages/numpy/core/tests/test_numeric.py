from __future__ import division, absolute_import, print_function

import sys
import warnings
import itertools
import platform
from decimal import Decimal

import numpy as np
from numpy.core import umath
from numpy.random import rand, randint, randn
from numpy.testing import (
    TestCase, run_module_suite, assert_, assert_equal, assert_raises,
    assert_raises_regex, assert_array_equal, assert_almost_equal,
    assert_array_almost_equal, dec
***REMOVED***


class TestResize(TestCase***REMOVED***:
    def test_copies(self***REMOVED***:
        A = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED******REMOVED***
        Ar1 = np.array([[1, 2, 3, 4***REMOVED***, [1, 2, 3, 4***REMOVED******REMOVED******REMOVED***
        assert_equal(np.resize(A, (2, 4***REMOVED******REMOVED***, Ar1***REMOVED***

        Ar2 = np.array([[1, 2***REMOVED***, [3, 4***REMOVED***, [1, 2***REMOVED***, [3, 4***REMOVED******REMOVED******REMOVED***
        assert_equal(np.resize(A, (4, 2***REMOVED******REMOVED***, Ar2***REMOVED***

        Ar3 = np.array([[1, 2, 3***REMOVED***, [4, 1, 2***REMOVED***, [3, 4, 1***REMOVED***, [2, 3, 4***REMOVED******REMOVED******REMOVED***
        assert_equal(np.resize(A, (4, 3***REMOVED******REMOVED***, Ar3***REMOVED***

    def test_zeroresize(self***REMOVED***:
        A = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED******REMOVED***
        Ar = np.resize(A, (0,***REMOVED******REMOVED***
        assert_array_equal(Ar, np.array([***REMOVED******REMOVED******REMOVED***
        assert_equal(A.dtype, Ar.dtype***REMOVED***

    def test_reshape_from_zero(self***REMOVED***:
        # See also gh-6740
        A = np.zeros(0, dtype=[('a', np.float32, 1***REMOVED******REMOVED******REMOVED***
        Ar = np.resize(A, (2, 1***REMOVED******REMOVED***
        assert_array_equal(Ar, np.zeros((2, 1***REMOVED***, Ar.dtype***REMOVED******REMOVED***
        assert_equal(A.dtype, Ar.dtype***REMOVED***


class TestNonarrayArgs(TestCase***REMOVED***:
    # check that non-array arguments to functions wrap them in arrays
    def test_choose(self***REMOVED***:
        choices = [[0, 1, 2***REMOVED***,
                   [3, 4, 5***REMOVED***,
                   [5, 6, 7***REMOVED******REMOVED***
        tgt = [5, 1, 5***REMOVED***
        a = [2, 0, 1***REMOVED***

        out = np.choose(a, choices***REMOVED***
        assert_equal(out, tgt***REMOVED***

    def test_clip(self***REMOVED***:
        arr = [-1, 5, 2, 3, 10, -4, -9***REMOVED***
        out = np.clip(arr, 2, 7***REMOVED***
        tgt = [2, 5, 2, 3, 7, 2, 2***REMOVED***
        assert_equal(out, tgt***REMOVED***

    def test_compress(self***REMOVED***:
        arr = [[0, 1, 2, 3, 4***REMOVED***,
               [5, 6, 7, 8, 9***REMOVED******REMOVED***
        tgt = [[5, 6, 7, 8, 9***REMOVED******REMOVED***
        out = np.compress([0, 1***REMOVED***, arr, axis=0***REMOVED***
        assert_equal(out, tgt***REMOVED***

    def test_cumproduct(self***REMOVED***:
        A = [[1, 2, 3***REMOVED***, [4, 5, 6***REMOVED******REMOVED***
        assert_(np.all(np.cumproduct(A***REMOVED*** == np.array([1, 2, 6, 24, 120, 720***REMOVED******REMOVED******REMOVED******REMOVED***

    def test_diagonal(self***REMOVED***:
        a = [[0, 1, 2, 3***REMOVED***,
             [4, 5, 6, 7***REMOVED***,
             [8, 9, 10, 11***REMOVED******REMOVED***
        out = np.diagonal(a***REMOVED***
        tgt = [0, 5, 10***REMOVED***

        assert_equal(out, tgt***REMOVED***

    def test_mean(self***REMOVED***:
        A = [[1, 2, 3***REMOVED***, [4, 5, 6***REMOVED******REMOVED***
        assert_(np.mean(A***REMOVED*** == 3.5***REMOVED***
        assert_(np.all(np.mean(A, 0***REMOVED*** == np.array([2.5, 3.5, 4.5***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_(np.all(np.mean(A, 1***REMOVED*** == np.array([2., 5.***REMOVED******REMOVED******REMOVED******REMOVED***

        with warnings.catch_warnings(record=True***REMOVED*** as w:
            warnings.filterwarnings('always', '', RuntimeWarning***REMOVED***
            assert_(np.isnan(np.mean([***REMOVED******REMOVED******REMOVED******REMOVED***
            assert_(w[0***REMOVED***.category is RuntimeWarning***REMOVED***

    def test_ptp(self***REMOVED***:
        a = [3, 4, 5, 10, -3, -5, 6.0***REMOVED***
        assert_equal(np.ptp(a, axis=0***REMOVED***, 15.0***REMOVED***

    def test_prod(self***REMOVED***:
        arr = [[1, 2, 3, 4***REMOVED***,
               [5, 6, 7, 9***REMOVED***,
               [10, 3, 4, 5***REMOVED******REMOVED***
        tgt = [24, 1890, 600***REMOVED***

        assert_equal(np.prod(arr, axis=-1***REMOVED***, tgt***REMOVED***

    def test_ravel(self***REMOVED***:
        a = [[1, 2, 3***REMOVED***, [4, 5, 6***REMOVED***, [7, 8, 9***REMOVED***, [10, 11, 12***REMOVED******REMOVED***
        tgt = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12***REMOVED***
        assert_equal(np.ravel(a***REMOVED***, tgt***REMOVED***

    def test_repeat(self***REMOVED***:
        a = [1, 2, 3***REMOVED***
        tgt = [1, 1, 2, 2, 3, 3***REMOVED***

        out = np.repeat(a, 2***REMOVED***
        assert_equal(out, tgt***REMOVED***

    def test_reshape(self***REMOVED***:
        arr = [[1, 2, 3***REMOVED***, [4, 5, 6***REMOVED***, [7, 8, 9***REMOVED***, [10, 11, 12***REMOVED******REMOVED***
        tgt = [[1, 2, 3, 4, 5, 6***REMOVED***, [7, 8, 9, 10, 11, 12***REMOVED******REMOVED***
        assert_equal(np.reshape(arr, (2, 6***REMOVED******REMOVED***, tgt***REMOVED***

    def test_round(self***REMOVED***:
        arr = [1.56, 72.54, 6.35, 3.25***REMOVED***
        tgt = [1.6, 72.5, 6.4, 3.2***REMOVED***
        assert_equal(np.around(arr, decimals=1***REMOVED***, tgt***REMOVED***

    def test_searchsorted(self***REMOVED***:
        arr = [-8, -5, -1, 3, 6, 10***REMOVED***
        out = np.searchsorted(arr, 0***REMOVED***
        assert_equal(out, 3***REMOVED***

    def test_size(self***REMOVED***:
        A = [[1, 2, 3***REMOVED***, [4, 5, 6***REMOVED******REMOVED***
        assert_(np.size(A***REMOVED*** == 6***REMOVED***
        assert_(np.size(A, 0***REMOVED*** == 2***REMOVED***
        assert_(np.size(A, 1***REMOVED*** == 3***REMOVED***

    def test_squeeze(self***REMOVED***:
        A = [[[1, 1, 1***REMOVED***, [2, 2, 2***REMOVED***, [3, 3, 3***REMOVED******REMOVED******REMOVED***
        assert_(np.squeeze(A***REMOVED***.shape == (3, 3***REMOVED******REMOVED***

    def test_std(self***REMOVED***:
        A = [[1, 2, 3***REMOVED***, [4, 5, 6***REMOVED******REMOVED***
        assert_almost_equal(np.std(A***REMOVED***, 1.707825127659933***REMOVED***
        assert_almost_equal(np.std(A, 0***REMOVED***, np.array([1.5, 1.5, 1.5***REMOVED******REMOVED******REMOVED***
        assert_almost_equal(np.std(A, 1***REMOVED***, np.array([0.81649658, 0.81649658***REMOVED******REMOVED******REMOVED***

        with warnings.catch_warnings(record=True***REMOVED*** as w:
            warnings.filterwarnings('always', '', RuntimeWarning***REMOVED***
            assert_(np.isnan(np.std([***REMOVED******REMOVED******REMOVED******REMOVED***
            assert_(w[0***REMOVED***.category is RuntimeWarning***REMOVED***

    def test_swapaxes(self***REMOVED***:
        tgt = [[[0, 4***REMOVED***, [2, 6***REMOVED******REMOVED***, [[1, 5***REMOVED***, [3, 7***REMOVED******REMOVED******REMOVED***
        a = [[[0, 1***REMOVED***, [2, 3***REMOVED******REMOVED***, [[4, 5***REMOVED***, [6, 7***REMOVED******REMOVED******REMOVED***
        out = np.swapaxes(a, 0, 2***REMOVED***
        assert_equal(out, tgt***REMOVED***

    def test_sum(self***REMOVED***:
        m = [[1, 2, 3***REMOVED***,
             [4, 5, 6***REMOVED***,
             [7, 8, 9***REMOVED******REMOVED***
        tgt = [[6***REMOVED***, [15***REMOVED***, [24***REMOVED******REMOVED***
        out = np.sum(m, axis=1, keepdims=True***REMOVED***

        assert_equal(tgt, out***REMOVED***

    def test_take(self***REMOVED***:
        tgt = [2, 3, 5***REMOVED***
        indices = [1, 2, 4***REMOVED***
        a = [1, 2, 3, 4, 5***REMOVED***

        out = np.take(a, indices***REMOVED***
        assert_equal(out, tgt***REMOVED***

    def test_trace(self***REMOVED***:
        c = [[1, 2***REMOVED***, [3, 4***REMOVED***, [5, 6***REMOVED******REMOVED***
        assert_equal(np.trace(c***REMOVED***, 5***REMOVED***

    def test_transpose(self***REMOVED***:
        arr = [[1, 2***REMOVED***, [3, 4***REMOVED***, [5, 6***REMOVED******REMOVED***
        tgt = [[1, 3, 5***REMOVED***, [2, 4, 6***REMOVED******REMOVED***
        assert_equal(np.transpose(arr, (1, 0***REMOVED******REMOVED***, tgt***REMOVED***

    def test_var(self***REMOVED***:
        A = [[1, 2, 3***REMOVED***, [4, 5, 6***REMOVED******REMOVED***
        assert_almost_equal(np.var(A***REMOVED***, 2.9166666666666665***REMOVED***
        assert_almost_equal(np.var(A, 0***REMOVED***, np.array([2.25, 2.25, 2.25***REMOVED******REMOVED******REMOVED***
        assert_almost_equal(np.var(A, 1***REMOVED***, np.array([0.66666667, 0.66666667***REMOVED******REMOVED******REMOVED***

        with warnings.catch_warnings(record=True***REMOVED*** as w:
            warnings.filterwarnings('always', '', RuntimeWarning***REMOVED***
            assert_(np.isnan(np.var([***REMOVED******REMOVED******REMOVED******REMOVED***
            assert_(w[0***REMOVED***.category is RuntimeWarning***REMOVED***


class TestBoolScalar(TestCase***REMOVED***:
    def test_logical(self***REMOVED***:
        f = np.False_
        t = np.True_
        s = "xyz"
        self.assertTrue((t and s***REMOVED*** is s***REMOVED***
        self.assertTrue((f and s***REMOVED*** is f***REMOVED***

    def test_bitwise_or(self***REMOVED***:
        f = np.False_
        t = np.True_
        self.assertTrue((t | t***REMOVED*** is t***REMOVED***
        self.assertTrue((f | t***REMOVED*** is t***REMOVED***
        self.assertTrue((t | f***REMOVED*** is t***REMOVED***
        self.assertTrue((f | f***REMOVED*** is f***REMOVED***

    def test_bitwise_and(self***REMOVED***:
        f = np.False_
        t = np.True_
        self.assertTrue((t & t***REMOVED*** is t***REMOVED***
        self.assertTrue((f & t***REMOVED*** is f***REMOVED***
        self.assertTrue((t & f***REMOVED*** is f***REMOVED***
        self.assertTrue((f & f***REMOVED*** is f***REMOVED***

    def test_bitwise_xor(self***REMOVED***:
        f = np.False_
        t = np.True_
        self.assertTrue((t ^ t***REMOVED*** is f***REMOVED***
        self.assertTrue((f ^ t***REMOVED*** is t***REMOVED***
        self.assertTrue((t ^ f***REMOVED*** is t***REMOVED***
        self.assertTrue((f ^ f***REMOVED*** is f***REMOVED***


class TestBoolArray(TestCase***REMOVED***:
    def setUp(self***REMOVED***:
        # offset for simd tests
        self.t = np.array([True***REMOVED*** * 41, dtype=np.bool***REMOVED***[1::***REMOVED***
        self.f = np.array([False***REMOVED*** * 41, dtype=np.bool***REMOVED***[1::***REMOVED***
        self.o = np.array([False***REMOVED*** * 42, dtype=np.bool***REMOVED***[2::***REMOVED***
        self.nm = self.f.copy(***REMOVED***
        self.im = self.t.copy(***REMOVED***
        self.nm[3***REMOVED*** = True
        self.nm[-2***REMOVED*** = True
        self.im[3***REMOVED*** = False
        self.im[-2***REMOVED*** = False

    def test_all_any(self***REMOVED***:
        self.assertTrue(self.t.all(***REMOVED******REMOVED***
        self.assertTrue(self.t.any(***REMOVED******REMOVED***
        self.assertFalse(self.f.all(***REMOVED******REMOVED***
        self.assertFalse(self.f.any(***REMOVED******REMOVED***
        self.assertTrue(self.nm.any(***REMOVED******REMOVED***
        self.assertTrue(self.im.any(***REMOVED******REMOVED***
        self.assertFalse(self.nm.all(***REMOVED******REMOVED***
        self.assertFalse(self.im.all(***REMOVED******REMOVED***
        # check bad element in all positions
        for i in range(256 - 7***REMOVED***:
            d = np.array([False***REMOVED*** * 256, dtype=np.bool***REMOVED***[7::***REMOVED***
            d[i***REMOVED*** = True
            self.assertTrue(np.any(d***REMOVED******REMOVED***
            e = np.array([True***REMOVED*** * 256, dtype=np.bool***REMOVED***[7::***REMOVED***
            e[i***REMOVED*** = False
            self.assertFalse(np.all(e***REMOVED******REMOVED***
            assert_array_equal(e, ~d***REMOVED***
        # big array test for blocked libc loops
        for i in list(range(9, 6000, 507***REMOVED******REMOVED*** + [7764, 90021, -10***REMOVED***:
            d = np.array([False***REMOVED*** * 100043, dtype=np.bool***REMOVED***
            d[i***REMOVED*** = True
            self.assertTrue(np.any(d***REMOVED***, msg="%r" % i***REMOVED***
            e = np.array([True***REMOVED*** * 100043, dtype=np.bool***REMOVED***
            e[i***REMOVED*** = False
            self.assertFalse(np.all(e***REMOVED***, msg="%r" % i***REMOVED***

    def test_logical_not_abs(self***REMOVED***:
        assert_array_equal(~self.t, self.f***REMOVED***
        assert_array_equal(np.abs(~self.t***REMOVED***, self.f***REMOVED***
        assert_array_equal(np.abs(~self.f***REMOVED***, self.t***REMOVED***
        assert_array_equal(np.abs(self.f***REMOVED***, self.f***REMOVED***
        assert_array_equal(~np.abs(self.f***REMOVED***, self.t***REMOVED***
        assert_array_equal(~np.abs(self.t***REMOVED***, self.f***REMOVED***
        assert_array_equal(np.abs(~self.nm***REMOVED***, self.im***REMOVED***
        np.logical_not(self.t, out=self.o***REMOVED***
        assert_array_equal(self.o, self.f***REMOVED***
        np.abs(self.t, out=self.o***REMOVED***
        assert_array_equal(self.o, self.t***REMOVED***

    def test_logical_and_or_xor(self***REMOVED***:
        assert_array_equal(self.t | self.t, self.t***REMOVED***
        assert_array_equal(self.f | self.f, self.f***REMOVED***
        assert_array_equal(self.t | self.f, self.t***REMOVED***
        assert_array_equal(self.f | self.t, self.t***REMOVED***
        np.logical_or(self.t, self.t, out=self.o***REMOVED***
        assert_array_equal(self.o, self.t***REMOVED***
        assert_array_equal(self.t & self.t, self.t***REMOVED***
        assert_array_equal(self.f & self.f, self.f***REMOVED***
        assert_array_equal(self.t & self.f, self.f***REMOVED***
        assert_array_equal(self.f & self.t, self.f***REMOVED***
        np.logical_and(self.t, self.t, out=self.o***REMOVED***
        assert_array_equal(self.o, self.t***REMOVED***
        assert_array_equal(self.t ^ self.t, self.f***REMOVED***
        assert_array_equal(self.f ^ self.f, self.f***REMOVED***
        assert_array_equal(self.t ^ self.f, self.t***REMOVED***
        assert_array_equal(self.f ^ self.t, self.t***REMOVED***
        np.logical_xor(self.t, self.t, out=self.o***REMOVED***
        assert_array_equal(self.o, self.f***REMOVED***

        assert_array_equal(self.nm & self.t, self.nm***REMOVED***
        assert_array_equal(self.im & self.f, False***REMOVED***
        assert_array_equal(self.nm & True, self.nm***REMOVED***
        assert_array_equal(self.im & False, self.f***REMOVED***
        assert_array_equal(self.nm | self.t, self.t***REMOVED***
        assert_array_equal(self.im | self.f, self.im***REMOVED***
        assert_array_equal(self.nm | True, self.t***REMOVED***
        assert_array_equal(self.im | False, self.im***REMOVED***
        assert_array_equal(self.nm ^ self.t, self.im***REMOVED***
        assert_array_equal(self.im ^ self.f, self.im***REMOVED***
        assert_array_equal(self.nm ^ True, self.im***REMOVED***
        assert_array_equal(self.im ^ False, self.im***REMOVED***


class TestBoolCmp(TestCase***REMOVED***:
    def setUp(self***REMOVED***:
        self.f = np.ones(256, dtype=np.float32***REMOVED***
        self.ef = np.ones(self.f.size, dtype=np.bool***REMOVED***
        self.d = np.ones(128, dtype=np.float64***REMOVED***
        self.ed = np.ones(self.d.size, dtype=np.bool***REMOVED***
        # generate values for all permutation of 256bit simd vectors
        s = 0
        for i in range(32***REMOVED***:
            self.f[s:s+8***REMOVED*** = [i & 2**x for x in range(8***REMOVED******REMOVED***
            self.ef[s:s+8***REMOVED*** = [(i & 2**x***REMOVED*** != 0 for x in range(8***REMOVED******REMOVED***
            s += 8
        s = 0
        for i in range(16***REMOVED***:
            self.d[s:s+4***REMOVED*** = [i & 2**x for x in range(4***REMOVED******REMOVED***
            self.ed[s:s+4***REMOVED*** = [(i & 2**x***REMOVED*** != 0 for x in range(4***REMOVED******REMOVED***
            s += 4

        self.nf = self.f.copy(***REMOVED***
        self.nd = self.d.copy(***REMOVED***
        self.nf[self.ef***REMOVED*** = np.nan
        self.nd[self.ed***REMOVED*** = np.nan

    def test_float(self***REMOVED***:
        # offset for alignment test
        for i in range(4***REMOVED***:
            assert_array_equal(self.f[i:***REMOVED*** > 0, self.ef[i:***REMOVED******REMOVED***
            assert_array_equal(self.f[i:***REMOVED*** - 1 >= 0, self.ef[i:***REMOVED******REMOVED***
            assert_array_equal(self.f[i:***REMOVED*** == 0, ~self.ef[i:***REMOVED******REMOVED***
            assert_array_equal(-self.f[i:***REMOVED*** < 0, self.ef[i:***REMOVED******REMOVED***
            assert_array_equal(-self.f[i:***REMOVED*** + 1 <= 0, self.ef[i:***REMOVED******REMOVED***
            r = self.f[i:***REMOVED*** != 0
            assert_array_equal(r, self.ef[i:***REMOVED******REMOVED***
            r2 = self.f[i:***REMOVED*** != np.zeros_like(self.f[i:***REMOVED******REMOVED***
            r3 = 0 != self.f[i:***REMOVED***
            assert_array_equal(r, r2***REMOVED***
            assert_array_equal(r, r3***REMOVED***
            # check bool == 0x1
            assert_array_equal(r.view(np.int8***REMOVED***, r.astype(np.int8***REMOVED******REMOVED***
            assert_array_equal(r2.view(np.int8***REMOVED***, r2.astype(np.int8***REMOVED******REMOVED***
            assert_array_equal(r3.view(np.int8***REMOVED***, r3.astype(np.int8***REMOVED******REMOVED***

            # isnan on amd64 takes the same code path
            assert_array_equal(np.isnan(self.nf[i:***REMOVED******REMOVED***, self.ef[i:***REMOVED******REMOVED***

    def test_double(self***REMOVED***:
        # offset for alignment test
        for i in range(2***REMOVED***:
            assert_array_equal(self.d[i:***REMOVED*** > 0, self.ed[i:***REMOVED******REMOVED***
            assert_array_equal(self.d[i:***REMOVED*** - 1 >= 0, self.ed[i:***REMOVED******REMOVED***
            assert_array_equal(self.d[i:***REMOVED*** == 0, ~self.ed[i:***REMOVED******REMOVED***
            assert_array_equal(-self.d[i:***REMOVED*** < 0, self.ed[i:***REMOVED******REMOVED***
            assert_array_equal(-self.d[i:***REMOVED*** + 1 <= 0, self.ed[i:***REMOVED******REMOVED***
            r = self.d[i:***REMOVED*** != 0
            assert_array_equal(r, self.ed[i:***REMOVED******REMOVED***
            r2 = self.d[i:***REMOVED*** != np.zeros_like(self.d[i:***REMOVED******REMOVED***
            r3 = 0 != self.d[i:***REMOVED***
            assert_array_equal(r, r2***REMOVED***
            assert_array_equal(r, r3***REMOVED***
            # check bool == 0x1
            assert_array_equal(r.view(np.int8***REMOVED***, r.astype(np.int8***REMOVED******REMOVED***
            assert_array_equal(r2.view(np.int8***REMOVED***, r2.astype(np.int8***REMOVED******REMOVED***
            assert_array_equal(r3.view(np.int8***REMOVED***, r3.astype(np.int8***REMOVED******REMOVED***

            # isnan on amd64 takes the same code path
            assert_array_equal(np.isnan(self.nd[i:***REMOVED******REMOVED***, self.ed[i:***REMOVED******REMOVED***


class TestSeterr(TestCase***REMOVED***:
    def test_default(self***REMOVED***:
        err = np.geterr(***REMOVED***
        self.assertEqual(err, dict(
            divide='warn',
            invalid='warn',
            over='warn',
            under='ignore',
        ***REMOVED******REMOVED***

    def test_set(self***REMOVED***:
        with np.errstate(***REMOVED***:
            err = np.seterr(***REMOVED***
            old = np.seterr(divide='print'***REMOVED***
            self.assertTrue(err == old***REMOVED***
            new = np.seterr(***REMOVED***
            self.assertTrue(new['divide'***REMOVED*** == 'print'***REMOVED***
            np.seterr(over='raise'***REMOVED***
            self.assertTrue(np.geterr(***REMOVED***['over'***REMOVED*** == 'raise'***REMOVED***
            self.assertTrue(new['divide'***REMOVED*** == 'print'***REMOVED***
            np.seterr(**old***REMOVED***
            self.assertTrue(np.geterr(***REMOVED*** == old***REMOVED***

    @dec.skipif(platform.machine(***REMOVED*** == "armv5tel", "See gh-413."***REMOVED***
    def test_divide_err(self***REMOVED***:
        with np.errstate(divide='raise'***REMOVED***:
            ***REMOVED***
                np.array([1.***REMOVED******REMOVED*** / np.array([0.***REMOVED******REMOVED***
            except FloatingPointError:
                pass
            else:
                self.fail(***REMOVED***
            np.seterr(divide='ignore'***REMOVED***
            np.array([1.***REMOVED******REMOVED*** / np.array([0.***REMOVED******REMOVED***

    def test_errobj(self***REMOVED***:
        olderrobj = np.geterrobj(***REMOVED***
        self.called = 0
        ***REMOVED***
            with warnings.catch_warnings(record=True***REMOVED*** as w:
                warnings.simplefilter("always"***REMOVED***
                with np.errstate(divide='warn'***REMOVED***:
                    np.seterrobj([20000, 1, None***REMOVED******REMOVED***
                    np.array([1.***REMOVED******REMOVED*** / np.array([0.***REMOVED******REMOVED***
                    self.assertEqual(len(w***REMOVED***, 1***REMOVED***

            def log_err(*args***REMOVED***:
                self.called += 1
                extobj_err = args
                assert_(len(extobj_err***REMOVED*** == 2***REMOVED***
                assert_("divide" in extobj_err[0***REMOVED******REMOVED***

            with np.errstate(divide='ignore'***REMOVED***:
                np.seterrobj([20000, 3, log_err***REMOVED******REMOVED***
                np.array([1.***REMOVED******REMOVED*** / np.array([0.***REMOVED******REMOVED***
            self.assertEqual(self.called, 1***REMOVED***

            np.seterrobj(olderrobj***REMOVED***
            with np.errstate(divide='ignore'***REMOVED***:
                np.divide(1., 0., extobj=[20000, 3, log_err***REMOVED******REMOVED***
            self.assertEqual(self.called, 2***REMOVED***
        finally:
            np.seterrobj(olderrobj***REMOVED***
            del self.called

    def test_errobj_noerrmask(self***REMOVED***:
        # errmask = 0 has a special code path for the default
        olderrobj = np.geterrobj(***REMOVED***
        ***REMOVED***
            # set errobj to something non default
            np.seterrobj([umath.UFUNC_BUFSIZE_DEFAULT,
                         umath.ERR_DEFAULT + 1, None***REMOVED******REMOVED***
            # call a ufunc
            np.isnan(np.array([6***REMOVED******REMOVED******REMOVED***
            # same with the default, lots of times to get rid of possible
            # pre-existing stack in the code
            for i in range(10000***REMOVED***:
                np.seterrobj([umath.UFUNC_BUFSIZE_DEFAULT, umath.ERR_DEFAULT,
                             None***REMOVED******REMOVED***
            np.isnan(np.array([6***REMOVED******REMOVED******REMOVED***
        finally:
            np.seterrobj(olderrobj***REMOVED***


class TestFloatExceptions(TestCase***REMOVED***:
    def assert_raises_fpe(self, fpeerr, flop, x, y***REMOVED***:
        ftype = type(x***REMOVED***
        ***REMOVED***
            flop(x, y***REMOVED***
            assert_(False,
                    "Type %s did not raise fpe error '%s'." % (ftype, fpeerr***REMOVED******REMOVED***
        except FloatingPointError as exc:
            assert_(str(exc***REMOVED***.find(fpeerr***REMOVED*** >= 0,
                    "Type %s raised wrong fpe error '%s'." % (ftype, exc***REMOVED******REMOVED***

    def assert_op_raises_fpe(self, fpeerr, flop, sc1, sc2***REMOVED***:
        # Check that fpe exception is raised.
        #
        # Given a floating operation `flop` and two scalar values, check that
        # the operation raises the floating point exception specified by
        # `fpeerr`. Tests all variants with 0-d array scalars as well.

        self.assert_raises_fpe(fpeerr, flop, sc1, sc2***REMOVED***
        self.assert_raises_fpe(fpeerr, flop, sc1[(***REMOVED******REMOVED***, sc2***REMOVED***
        self.assert_raises_fpe(fpeerr, flop, sc1, sc2[(***REMOVED******REMOVED******REMOVED***
        self.assert_raises_fpe(fpeerr, flop, sc1[(***REMOVED******REMOVED***, sc2[(***REMOVED******REMOVED******REMOVED***

    @dec.knownfailureif(True, "See ticket #2350"***REMOVED***
    def test_floating_exceptions(self***REMOVED***:
        # Test basic arithmetic function errors
        with np.errstate(all='raise'***REMOVED***:
            # Test for all real and complex float types
            for typecode in np.typecodes['AllFloat'***REMOVED***:
                ftype = np.obj2sctype(typecode***REMOVED***
                if np.dtype(ftype***REMOVED***.kind == 'f':
                    # Get some extreme values for the type
                    fi = np.finfo(ftype***REMOVED***
                    ft_tiny = fi.tiny
                    ft_max = fi.max
                    ft_eps = fi.eps
                    underflow = 'underflow'
                    divbyzero = 'divide by zero'
                else:
                    # 'c', complex, corresponding real dtype
                    rtype = type(ftype(0***REMOVED***.real***REMOVED***
                    fi = np.finfo(rtype***REMOVED***
                    ft_tiny = ftype(fi.tiny***REMOVED***
                    ft_max = ftype(fi.max***REMOVED***
                    ft_eps = ftype(fi.eps***REMOVED***
                    # The complex types raise different exceptions
                    underflow = ''
                    divbyzero = ''
                overflow = 'overflow'
                invalid = 'invalid'

                self.assert_raises_fpe(underflow,
                                       lambda a, b: a/b, ft_tiny, ft_max***REMOVED***
                self.assert_raises_fpe(underflow,
                                       lambda a, b: a*b, ft_tiny, ft_tiny***REMOVED***
                self.assert_raises_fpe(overflow,
                                       lambda a, b: a*b, ft_max, ftype(2***REMOVED******REMOVED***
                self.assert_raises_fpe(overflow,
                                       lambda a, b: a/b, ft_max, ftype(0.5***REMOVED******REMOVED***
                self.assert_raises_fpe(overflow,
                                       lambda a, b: a+b, ft_max, ft_max*ft_eps***REMOVED***
                self.assert_raises_fpe(overflow,
                                       lambda a, b: a-b, -ft_max, ft_max*ft_eps***REMOVED***
                self.assert_raises_fpe(overflow,
                                       np.power, ftype(2***REMOVED***, ftype(2**fi.nexp***REMOVED******REMOVED***
                self.assert_raises_fpe(divbyzero,
                                       lambda a, b: a/b, ftype(1***REMOVED***, ftype(0***REMOVED******REMOVED***
                self.assert_raises_fpe(invalid,
                                       lambda a, b: a/b, ftype(np.inf***REMOVED***, ftype(np.inf***REMOVED******REMOVED***
                self.assert_raises_fpe(invalid,
                                       lambda a, b: a/b, ftype(0***REMOVED***, ftype(0***REMOVED******REMOVED***
                self.assert_raises_fpe(invalid,
                                       lambda a, b: a-b, ftype(np.inf***REMOVED***, ftype(np.inf***REMOVED******REMOVED***
                self.assert_raises_fpe(invalid,
                                       lambda a, b: a+b, ftype(np.inf***REMOVED***, ftype(-np.inf***REMOVED******REMOVED***
                self.assert_raises_fpe(invalid,
                                       lambda a, b: a*b, ftype(0***REMOVED***, ftype(np.inf***REMOVED******REMOVED***

    def test_warnings(self***REMOVED***:
        # test warning code path
        with warnings.catch_warnings(record=True***REMOVED*** as w:
            warnings.simplefilter("always"***REMOVED***
            with np.errstate(all="warn"***REMOVED***:
                np.divide(1, 0.***REMOVED***
                self.assertEqual(len(w***REMOVED***, 1***REMOVED***
                self.assertTrue("divide by zero" in str(w[0***REMOVED***.message***REMOVED******REMOVED***
                np.array(1e300***REMOVED*** * np.array(1e300***REMOVED***
                self.assertEqual(len(w***REMOVED***, 2***REMOVED***
                self.assertTrue("overflow" in str(w[-1***REMOVED***.message***REMOVED******REMOVED***
                np.array(np.inf***REMOVED*** - np.array(np.inf***REMOVED***
                self.assertEqual(len(w***REMOVED***, 3***REMOVED***
                self.assertTrue("invalid value" in str(w[-1***REMOVED***.message***REMOVED******REMOVED***
                np.array(1e-300***REMOVED*** * np.array(1e-300***REMOVED***
                self.assertEqual(len(w***REMOVED***, 4***REMOVED***
                self.assertTrue("underflow" in str(w[-1***REMOVED***.message***REMOVED******REMOVED***


class TestTypes(TestCase***REMOVED***:
    def check_promotion_cases(self, promote_func***REMOVED***:
        # tests that the scalars get coerced correctly.
        b = np.bool_(0***REMOVED***
        i8, i16, i32, i64 = np.int8(0***REMOVED***, np.int16(0***REMOVED***, np.int32(0***REMOVED***, np.int64(0***REMOVED***
        u8, u16, u32, u64 = np.uint8(0***REMOVED***, np.uint16(0***REMOVED***, np.uint32(0***REMOVED***, np.uint64(0***REMOVED***
        f32, f64, fld = np.float32(0***REMOVED***, np.float64(0***REMOVED***, np.longdouble(0***REMOVED***
        c64, c128, cld = np.complex64(0***REMOVED***, np.complex128(0***REMOVED***, np.clongdouble(0***REMOVED***

        # coercion within the same kind
        assert_equal(promote_func(i8, i16***REMOVED***, np.dtype(np.int16***REMOVED******REMOVED***
        assert_equal(promote_func(i32, i8***REMOVED***, np.dtype(np.int32***REMOVED******REMOVED***
        assert_equal(promote_func(i16, i64***REMOVED***, np.dtype(np.int64***REMOVED******REMOVED***
        assert_equal(promote_func(u8, u32***REMOVED***, np.dtype(np.uint32***REMOVED******REMOVED***
        assert_equal(promote_func(f32, f64***REMOVED***, np.dtype(np.float64***REMOVED******REMOVED***
        assert_equal(promote_func(fld, f32***REMOVED***, np.dtype(np.longdouble***REMOVED******REMOVED***
        assert_equal(promote_func(f64, fld***REMOVED***, np.dtype(np.longdouble***REMOVED******REMOVED***
        assert_equal(promote_func(c128, c64***REMOVED***, np.dtype(np.complex128***REMOVED******REMOVED***
        assert_equal(promote_func(cld, c128***REMOVED***, np.dtype(np.clongdouble***REMOVED******REMOVED***
        assert_equal(promote_func(c64, fld***REMOVED***, np.dtype(np.clongdouble***REMOVED******REMOVED***

        # coercion between kinds
        assert_equal(promote_func(b, i32***REMOVED***, np.dtype(np.int32***REMOVED******REMOVED***
        assert_equal(promote_func(b, u8***REMOVED***, np.dtype(np.uint8***REMOVED******REMOVED***
        assert_equal(promote_func(i8, u8***REMOVED***, np.dtype(np.int16***REMOVED******REMOVED***
        assert_equal(promote_func(u8, i32***REMOVED***, np.dtype(np.int32***REMOVED******REMOVED***
        assert_equal(promote_func(i64, u32***REMOVED***, np.dtype(np.int64***REMOVED******REMOVED***
        assert_equal(promote_func(u64, i32***REMOVED***, np.dtype(np.float64***REMOVED******REMOVED***
        assert_equal(promote_func(i32, f32***REMOVED***, np.dtype(np.float64***REMOVED******REMOVED***
        assert_equal(promote_func(i64, f32***REMOVED***, np.dtype(np.float64***REMOVED******REMOVED***
        assert_equal(promote_func(f32, i16***REMOVED***, np.dtype(np.float32***REMOVED******REMOVED***
        assert_equal(promote_func(f32, u32***REMOVED***, np.dtype(np.float64***REMOVED******REMOVED***
        assert_equal(promote_func(f32, c64***REMOVED***, np.dtype(np.complex64***REMOVED******REMOVED***
        assert_equal(promote_func(c128, f32***REMOVED***, np.dtype(np.complex128***REMOVED******REMOVED***
        assert_equal(promote_func(cld, f64***REMOVED***, np.dtype(np.clongdouble***REMOVED******REMOVED***

        # coercion between scalars and 1-D arrays
        assert_equal(promote_func(np.array([b***REMOVED******REMOVED***, i8***REMOVED***, np.dtype(np.int8***REMOVED******REMOVED***
        assert_equal(promote_func(np.array([b***REMOVED******REMOVED***, u8***REMOVED***, np.dtype(np.uint8***REMOVED******REMOVED***
        assert_equal(promote_func(np.array([b***REMOVED******REMOVED***, i32***REMOVED***, np.dtype(np.int32***REMOVED******REMOVED***
        assert_equal(promote_func(np.array([b***REMOVED******REMOVED***, u32***REMOVED***, np.dtype(np.uint32***REMOVED******REMOVED***
        assert_equal(promote_func(np.array([i8***REMOVED******REMOVED***, i64***REMOVED***, np.dtype(np.int8***REMOVED******REMOVED***
        assert_equal(promote_func(u64, np.array([i32***REMOVED******REMOVED******REMOVED***, np.dtype(np.int32***REMOVED******REMOVED***
        assert_equal(promote_func(i64, np.array([u32***REMOVED******REMOVED******REMOVED***, np.dtype(np.uint32***REMOVED******REMOVED***
        assert_equal(promote_func(np.int32(-1***REMOVED***, np.array([u64***REMOVED******REMOVED******REMOVED***,
                     np.dtype(np.float64***REMOVED******REMOVED***
        assert_equal(promote_func(f64, np.array([f32***REMOVED******REMOVED******REMOVED***, np.dtype(np.float32***REMOVED******REMOVED***
        assert_equal(promote_func(fld, np.array([f32***REMOVED******REMOVED******REMOVED***, np.dtype(np.float32***REMOVED******REMOVED***
        assert_equal(promote_func(np.array([f64***REMOVED******REMOVED***, fld***REMOVED***, np.dtype(np.float64***REMOVED******REMOVED***
        assert_equal(promote_func(fld, np.array([c64***REMOVED******REMOVED******REMOVED***,
                     np.dtype(np.complex64***REMOVED******REMOVED***
        assert_equal(promote_func(c64, np.array([f64***REMOVED******REMOVED******REMOVED***,
                     np.dtype(np.complex128***REMOVED******REMOVED***
        assert_equal(promote_func(np.complex64(3j***REMOVED***, np.array([f64***REMOVED******REMOVED******REMOVED***,
                     np.dtype(np.complex128***REMOVED******REMOVED***

        # coercion between scalars and 1-D arrays, where
        # the scalar has greater kind than the array
        assert_equal(promote_func(np.array([b***REMOVED******REMOVED***, f64***REMOVED***, np.dtype(np.float64***REMOVED******REMOVED***
        assert_equal(promote_func(np.array([b***REMOVED******REMOVED***, i64***REMOVED***, np.dtype(np.int64***REMOVED******REMOVED***
        assert_equal(promote_func(np.array([b***REMOVED******REMOVED***, u64***REMOVED***, np.dtype(np.uint64***REMOVED******REMOVED***
        assert_equal(promote_func(np.array([i8***REMOVED******REMOVED***, f64***REMOVED***, np.dtype(np.float64***REMOVED******REMOVED***
        assert_equal(promote_func(np.array([u16***REMOVED******REMOVED***, f64***REMOVED***, np.dtype(np.float64***REMOVED******REMOVED***

        # uint and int are treated as the same "kind" for
        # the purposes of array-scalar promotion.
        assert_equal(promote_func(np.array([u16***REMOVED******REMOVED***, i32***REMOVED***, np.dtype(np.uint16***REMOVED******REMOVED***

        # float and complex are treated as the same "kind" for
        # the purposes of array-scalar promotion, so that you can do
        # (0j + float32array***REMOVED*** to get a complex64 array instead of
        # a complex128 array.
        assert_equal(promote_func(np.array([f32***REMOVED******REMOVED***, c128***REMOVED***,
                     np.dtype(np.complex64***REMOVED******REMOVED***

    def test_coercion(self***REMOVED***:
        def res_type(a, b***REMOVED***:
            return np.add(a, b***REMOVED***.dtype

        self.check_promotion_cases(res_type***REMOVED***

        # Use-case: float/complex scalar * bool/int8 array
        #           shouldn't narrow the float/complex type
        for a in [np.array([True, False***REMOVED******REMOVED***, np.array([-3, 12***REMOVED***, dtype=np.int8***REMOVED******REMOVED***:
            b = 1.234 * a
            assert_equal(b.dtype, np.dtype('f8'***REMOVED***, "array type %s" % a.dtype***REMOVED***
            b = np.longdouble(1.234***REMOVED*** * a
            assert_equal(b.dtype, np.dtype(np.longdouble***REMOVED***,
                         "array type %s" % a.dtype***REMOVED***
            b = np.float64(1.234***REMOVED*** * a
            assert_equal(b.dtype, np.dtype('f8'***REMOVED***, "array type %s" % a.dtype***REMOVED***
            b = np.float32(1.234***REMOVED*** * a
            assert_equal(b.dtype, np.dtype('f4'***REMOVED***, "array type %s" % a.dtype***REMOVED***
            b = np.float16(1.234***REMOVED*** * a
            assert_equal(b.dtype, np.dtype('f2'***REMOVED***, "array type %s" % a.dtype***REMOVED***

            b = 1.234j * a
            assert_equal(b.dtype, np.dtype('c16'***REMOVED***, "array type %s" % a.dtype***REMOVED***
            b = np.clongdouble(1.234j***REMOVED*** * a
            assert_equal(b.dtype, np.dtype(np.clongdouble***REMOVED***,
                         "array type %s" % a.dtype***REMOVED***
            b = np.complex128(1.234j***REMOVED*** * a
            assert_equal(b.dtype, np.dtype('c16'***REMOVED***, "array type %s" % a.dtype***REMOVED***
            b = np.complex64(1.234j***REMOVED*** * a
            assert_equal(b.dtype, np.dtype('c8'***REMOVED***, "array type %s" % a.dtype***REMOVED***

        # The following use-case is problematic, and to resolve its
        # tricky side-effects requires more changes.
        #
        # Use-case: (1-t***REMOVED****a, where 't' is a boolean array and 'a' is
        #            a float32, shouldn't promote to float64
        #
        # a = np.array([1.0, 1.5***REMOVED***, dtype=np.float32***REMOVED***
        # t = np.array([True, False***REMOVED******REMOVED***
        # b = t*a
        # assert_equal(b, [1.0, 0.0***REMOVED******REMOVED***
        # assert_equal(b.dtype, np.dtype('f4'***REMOVED******REMOVED***
        # b = (1-t***REMOVED****a
        # assert_equal(b, [0.0, 1.5***REMOVED******REMOVED***
        # assert_equal(b.dtype, np.dtype('f4'***REMOVED******REMOVED***
        #
        # Probably ~t (bitwise negation***REMOVED*** is more proper to use here,
        # but this is arguably less intuitive to understand at a glance, and
        # would fail if 't' is actually an integer array instead of boolean:
        #
        # b = (~t***REMOVED****a
        # assert_equal(b, [0.0, 1.5***REMOVED******REMOVED***
        # assert_equal(b.dtype, np.dtype('f4'***REMOVED******REMOVED***

    def test_result_type(self***REMOVED***:
        self.check_promotion_cases(np.result_type***REMOVED***
        assert_(np.result_type(None***REMOVED*** == np.dtype(None***REMOVED******REMOVED***

    def test_promote_types_endian(self***REMOVED***:
        # promote_types should always return native-endian types
        assert_equal(np.promote_types('<i8', '<i8'***REMOVED***, np.dtype('i8'***REMOVED******REMOVED***
        assert_equal(np.promote_types('>i8', '>i8'***REMOVED***, np.dtype('i8'***REMOVED******REMOVED***

        assert_equal(np.promote_types('>i8', '>U16'***REMOVED***, np.dtype('U21'***REMOVED******REMOVED***
        assert_equal(np.promote_types('<i8', '<U16'***REMOVED***, np.dtype('U21'***REMOVED******REMOVED***
        assert_equal(np.promote_types('>U16', '>i8'***REMOVED***, np.dtype('U21'***REMOVED******REMOVED***
        assert_equal(np.promote_types('<U16', '<i8'***REMOVED***, np.dtype('U21'***REMOVED******REMOVED***

        assert_equal(np.promote_types('<S5', '<U8'***REMOVED***, np.dtype('U8'***REMOVED******REMOVED***
        assert_equal(np.promote_types('>S5', '>U8'***REMOVED***, np.dtype('U8'***REMOVED******REMOVED***
        assert_equal(np.promote_types('<U8', '<S5'***REMOVED***, np.dtype('U8'***REMOVED******REMOVED***
        assert_equal(np.promote_types('>U8', '>S5'***REMOVED***, np.dtype('U8'***REMOVED******REMOVED***
        assert_equal(np.promote_types('<U5', '<U8'***REMOVED***, np.dtype('U8'***REMOVED******REMOVED***
        assert_equal(np.promote_types('>U8', '>U5'***REMOVED***, np.dtype('U8'***REMOVED******REMOVED***

        assert_equal(np.promote_types('<M8', '<M8'***REMOVED***, np.dtype('M8'***REMOVED******REMOVED***
        assert_equal(np.promote_types('>M8', '>M8'***REMOVED***, np.dtype('M8'***REMOVED******REMOVED***
        assert_equal(np.promote_types('<m8', '<m8'***REMOVED***, np.dtype('m8'***REMOVED******REMOVED***
        assert_equal(np.promote_types('>m8', '>m8'***REMOVED***, np.dtype('m8'***REMOVED******REMOVED***

    def test_promote_types_strings(self***REMOVED***:
        assert_equal(np.promote_types('bool', 'S'***REMOVED***, np.dtype('S5'***REMOVED******REMOVED***
        assert_equal(np.promote_types('b', 'S'***REMOVED***, np.dtype('S4'***REMOVED******REMOVED***
        assert_equal(np.promote_types('u1', 'S'***REMOVED***, np.dtype('S3'***REMOVED******REMOVED***
        assert_equal(np.promote_types('u2', 'S'***REMOVED***, np.dtype('S5'***REMOVED******REMOVED***
        assert_equal(np.promote_types('u4', 'S'***REMOVED***, np.dtype('S10'***REMOVED******REMOVED***
        assert_equal(np.promote_types('u8', 'S'***REMOVED***, np.dtype('S20'***REMOVED******REMOVED***
        assert_equal(np.promote_types('i1', 'S'***REMOVED***, np.dtype('S4'***REMOVED******REMOVED***
        assert_equal(np.promote_types('i2', 'S'***REMOVED***, np.dtype('S6'***REMOVED******REMOVED***
        assert_equal(np.promote_types('i4', 'S'***REMOVED***, np.dtype('S11'***REMOVED******REMOVED***
        assert_equal(np.promote_types('i8', 'S'***REMOVED***, np.dtype('S21'***REMOVED******REMOVED***
        assert_equal(np.promote_types('bool', 'U'***REMOVED***, np.dtype('U5'***REMOVED******REMOVED***
        assert_equal(np.promote_types('b', 'U'***REMOVED***, np.dtype('U4'***REMOVED******REMOVED***
        assert_equal(np.promote_types('u1', 'U'***REMOVED***, np.dtype('U3'***REMOVED******REMOVED***
        assert_equal(np.promote_types('u2', 'U'***REMOVED***, np.dtype('U5'***REMOVED******REMOVED***
        assert_equal(np.promote_types('u4', 'U'***REMOVED***, np.dtype('U10'***REMOVED******REMOVED***
        assert_equal(np.promote_types('u8', 'U'***REMOVED***, np.dtype('U20'***REMOVED******REMOVED***
        assert_equal(np.promote_types('i1', 'U'***REMOVED***, np.dtype('U4'***REMOVED******REMOVED***
        assert_equal(np.promote_types('i2', 'U'***REMOVED***, np.dtype('U6'***REMOVED******REMOVED***
        assert_equal(np.promote_types('i4', 'U'***REMOVED***, np.dtype('U11'***REMOVED******REMOVED***
        assert_equal(np.promote_types('i8', 'U'***REMOVED***, np.dtype('U21'***REMOVED******REMOVED***
        assert_equal(np.promote_types('bool', 'S1'***REMOVED***, np.dtype('S5'***REMOVED******REMOVED***
        assert_equal(np.promote_types('bool', 'S30'***REMOVED***, np.dtype('S30'***REMOVED******REMOVED***
        assert_equal(np.promote_types('b', 'S1'***REMOVED***, np.dtype('S4'***REMOVED******REMOVED***
        assert_equal(np.promote_types('b', 'S30'***REMOVED***, np.dtype('S30'***REMOVED******REMOVED***
        assert_equal(np.promote_types('u1', 'S1'***REMOVED***, np.dtype('S3'***REMOVED******REMOVED***
        assert_equal(np.promote_types('u1', 'S30'***REMOVED***, np.dtype('S30'***REMOVED******REMOVED***
        assert_equal(np.promote_types('u2', 'S1'***REMOVED***, np.dtype('S5'***REMOVED******REMOVED***
        assert_equal(np.promote_types('u2', 'S30'***REMOVED***, np.dtype('S30'***REMOVED******REMOVED***
        assert_equal(np.promote_types('u4', 'S1'***REMOVED***, np.dtype('S10'***REMOVED******REMOVED***
        assert_equal(np.promote_types('u4', 'S30'***REMOVED***, np.dtype('S30'***REMOVED******REMOVED***
        assert_equal(np.promote_types('u8', 'S1'***REMOVED***, np.dtype('S20'***REMOVED******REMOVED***
        assert_equal(np.promote_types('u8', 'S30'***REMOVED***, np.dtype('S30'***REMOVED******REMOVED***

    def test_can_cast(self***REMOVED***:
        assert_(np.can_cast(np.int32, np.int64***REMOVED******REMOVED***
        assert_(np.can_cast(np.float64, np.complex***REMOVED******REMOVED***
        assert_(not np.can_cast(np.complex, np.float***REMOVED******REMOVED***

        assert_(np.can_cast('i8', 'f8'***REMOVED******REMOVED***
        assert_(not np.can_cast('i8', 'f4'***REMOVED******REMOVED***
        assert_(np.can_cast('i4', 'S11'***REMOVED******REMOVED***

        assert_(np.can_cast('i8', 'i8', 'no'***REMOVED******REMOVED***
        assert_(not np.can_cast('<i8', '>i8', 'no'***REMOVED******REMOVED***

        assert_(np.can_cast('<i8', '>i8', 'equiv'***REMOVED******REMOVED***
        assert_(not np.can_cast('<i4', '>i8', 'equiv'***REMOVED******REMOVED***

        assert_(np.can_cast('<i4', '>i8', 'safe'***REMOVED******REMOVED***
        assert_(not np.can_cast('<i8', '>i4', 'safe'***REMOVED******REMOVED***

        assert_(np.can_cast('<i8', '>i4', 'same_kind'***REMOVED******REMOVED***
        assert_(not np.can_cast('<i8', '>u4', 'same_kind'***REMOVED******REMOVED***

        assert_(np.can_cast('<i8', '>u4', 'unsafe'***REMOVED******REMOVED***

        assert_(np.can_cast('bool', 'S5'***REMOVED******REMOVED***
        assert_(not np.can_cast('bool', 'S4'***REMOVED******REMOVED***

        assert_(np.can_cast('b', 'S4'***REMOVED******REMOVED***
        assert_(not np.can_cast('b', 'S3'***REMOVED******REMOVED***

        assert_(np.can_cast('u1', 'S3'***REMOVED******REMOVED***
        assert_(not np.can_cast('u1', 'S2'***REMOVED******REMOVED***
        assert_(np.can_cast('u2', 'S5'***REMOVED******REMOVED***
        assert_(not np.can_cast('u2', 'S4'***REMOVED******REMOVED***
        assert_(np.can_cast('u4', 'S10'***REMOVED******REMOVED***
        assert_(not np.can_cast('u4', 'S9'***REMOVED******REMOVED***
        assert_(np.can_cast('u8', 'S20'***REMOVED******REMOVED***
        assert_(not np.can_cast('u8', 'S19'***REMOVED******REMOVED***

        assert_(np.can_cast('i1', 'S4'***REMOVED******REMOVED***
        assert_(not np.can_cast('i1', 'S3'***REMOVED******REMOVED***
        assert_(np.can_cast('i2', 'S6'***REMOVED******REMOVED***
        assert_(not np.can_cast('i2', 'S5'***REMOVED******REMOVED***
        assert_(np.can_cast('i4', 'S11'***REMOVED******REMOVED***
        assert_(not np.can_cast('i4', 'S10'***REMOVED******REMOVED***
        assert_(np.can_cast('i8', 'S21'***REMOVED******REMOVED***
        assert_(not np.can_cast('i8', 'S20'***REMOVED******REMOVED***

        assert_(np.can_cast('bool', 'S5'***REMOVED******REMOVED***
        assert_(not np.can_cast('bool', 'S4'***REMOVED******REMOVED***

        assert_(np.can_cast('b', 'U4'***REMOVED******REMOVED***
        assert_(not np.can_cast('b', 'U3'***REMOVED******REMOVED***

        assert_(np.can_cast('u1', 'U3'***REMOVED******REMOVED***
        assert_(not np.can_cast('u1', 'U2'***REMOVED******REMOVED***
        assert_(np.can_cast('u2', 'U5'***REMOVED******REMOVED***
        assert_(not np.can_cast('u2', 'U4'***REMOVED******REMOVED***
        assert_(np.can_cast('u4', 'U10'***REMOVED******REMOVED***
        assert_(not np.can_cast('u4', 'U9'***REMOVED******REMOVED***
        assert_(np.can_cast('u8', 'U20'***REMOVED******REMOVED***
        assert_(not np.can_cast('u8', 'U19'***REMOVED******REMOVED***

        assert_(np.can_cast('i1', 'U4'***REMOVED******REMOVED***
        assert_(not np.can_cast('i1', 'U3'***REMOVED******REMOVED***
        assert_(np.can_cast('i2', 'U6'***REMOVED******REMOVED***
        assert_(not np.can_cast('i2', 'U5'***REMOVED******REMOVED***
        assert_(np.can_cast('i4', 'U11'***REMOVED******REMOVED***
        assert_(not np.can_cast('i4', 'U10'***REMOVED******REMOVED***
        assert_(np.can_cast('i8', 'U21'***REMOVED******REMOVED***
        assert_(not np.can_cast('i8', 'U20'***REMOVED******REMOVED***

        assert_raises(TypeError, np.can_cast, 'i4', None***REMOVED***
        assert_raises(TypeError, np.can_cast, None, 'i4'***REMOVED***


# Custom exception class to test exception propagation in fromiter
class NIterError(Exception***REMOVED***:
    pass


class TestFromiter(TestCase***REMOVED***:
    def makegen(self***REMOVED***:
        for x in range(24***REMOVED***:
            yield x**2

    def test_types(self***REMOVED***:
        ai32 = np.fromiter(self.makegen(***REMOVED***, np.int32***REMOVED***
        ai64 = np.fromiter(self.makegen(***REMOVED***, np.int64***REMOVED***
        af = np.fromiter(self.makegen(***REMOVED***, float***REMOVED***
        self.assertTrue(ai32.dtype == np.dtype(np.int32***REMOVED******REMOVED***
        self.assertTrue(ai64.dtype == np.dtype(np.int64***REMOVED******REMOVED***
        self.assertTrue(af.dtype == np.dtype(float***REMOVED******REMOVED***

    def test_lengths(self***REMOVED***:
        expected = np.array(list(self.makegen(***REMOVED******REMOVED******REMOVED***
        a = np.fromiter(self.makegen(***REMOVED***, int***REMOVED***
        a20 = np.fromiter(self.makegen(***REMOVED***, int, 20***REMOVED***
        self.assertTrue(len(a***REMOVED*** == len(expected***REMOVED******REMOVED***
        self.assertTrue(len(a20***REMOVED*** == 20***REMOVED***
        self.assertRaises(ValueError, np.fromiter,
                          self.makegen(***REMOVED***, int, len(expected***REMOVED*** + 10***REMOVED***

    def test_values(self***REMOVED***:
        expected = np.array(list(self.makegen(***REMOVED******REMOVED******REMOVED***
        a = np.fromiter(self.makegen(***REMOVED***, int***REMOVED***
        a20 = np.fromiter(self.makegen(***REMOVED***, int, 20***REMOVED***
        self.assertTrue(np.alltrue(a == expected, axis=0***REMOVED******REMOVED***
        self.assertTrue(np.alltrue(a20 == expected[:20***REMOVED***, axis=0***REMOVED******REMOVED***

    def load_data(self, n, eindex***REMOVED***:
        # Utility method for the issue 2592 tests.
        # Raise an exception at the desired index in the iterator.
        for e in range(n***REMOVED***:
            if e == eindex:
                raise NIterError('error at index %s' % eindex***REMOVED***
            yield e

    def test_2592(self***REMOVED***:
        # Test iteration exceptions are correctly raised.
        count, eindex = 10, 5
        self.assertRaises(NIterError, np.fromiter,
                          self.load_data(count, eindex***REMOVED***, dtype=int, count=count***REMOVED***

    def test_2592_edge(self***REMOVED***:
        # Test iter. exceptions, edge case (exception at end of iterator***REMOVED***.
        count = 10
        eindex = count-1
        self.assertRaises(NIterError, np.fromiter,
                          self.load_data(count, eindex***REMOVED***, dtype=int, count=count***REMOVED***


class TestNonzero(TestCase***REMOVED***:
    def test_nonzero_trivial(self***REMOVED***:
        assert_equal(np.count_nonzero(np.array([***REMOVED******REMOVED******REMOVED***, 0***REMOVED***
        assert_equal(np.count_nonzero(np.array([***REMOVED***, dtype='?'***REMOVED******REMOVED***, 0***REMOVED***
        assert_equal(np.nonzero(np.array([***REMOVED******REMOVED******REMOVED***, ([***REMOVED***,***REMOVED******REMOVED***

        assert_equal(np.count_nonzero(np.array(0***REMOVED******REMOVED***, 0***REMOVED***
        assert_equal(np.count_nonzero(np.array(0, dtype='?'***REMOVED******REMOVED***, 0***REMOVED***
        assert_equal(np.nonzero(np.array(0***REMOVED******REMOVED***, ([***REMOVED***,***REMOVED******REMOVED***
        assert_equal(np.count_nonzero(np.array(1***REMOVED******REMOVED***, 1***REMOVED***
        assert_equal(np.count_nonzero(np.array(1, dtype='?'***REMOVED******REMOVED***, 1***REMOVED***
        assert_equal(np.nonzero(np.array(1***REMOVED******REMOVED***, ([0***REMOVED***,***REMOVED******REMOVED***

    def test_nonzero_onedim(self***REMOVED***:
        x = np.array([1, 0, 2, -1, 0, 0, 8***REMOVED******REMOVED***
        assert_equal(np.count_nonzero(x***REMOVED***, 4***REMOVED***
        assert_equal(np.count_nonzero(x***REMOVED***, 4***REMOVED***
        assert_equal(np.nonzero(x***REMOVED***, ([0, 2, 3, 6***REMOVED***,***REMOVED******REMOVED***

        x = np.array([(1, 2***REMOVED***, (0, 0***REMOVED***, (1, 1***REMOVED***, (-1, 3***REMOVED***, (0, 7***REMOVED******REMOVED***,
                     dtype=[('a', 'i4'***REMOVED***, ('b', 'i2'***REMOVED******REMOVED******REMOVED***
        assert_equal(np.count_nonzero(x['a'***REMOVED******REMOVED***, 3***REMOVED***
        assert_equal(np.count_nonzero(x['b'***REMOVED******REMOVED***, 4***REMOVED***
        assert_equal(np.nonzero(x['a'***REMOVED******REMOVED***, ([0, 2, 3***REMOVED***,***REMOVED******REMOVED***
        assert_equal(np.nonzero(x['b'***REMOVED******REMOVED***, ([0, 2, 3, 4***REMOVED***,***REMOVED******REMOVED***

    def test_nonzero_twodim(self***REMOVED***:
        x = np.array([[0, 1, 0***REMOVED***, [2, 0, 3***REMOVED******REMOVED******REMOVED***
        assert_equal(np.count_nonzero(x***REMOVED***, 3***REMOVED***
        assert_equal(np.nonzero(x***REMOVED***, ([0, 1, 1***REMOVED***, [1, 0, 2***REMOVED******REMOVED******REMOVED***

        x = np.eye(3***REMOVED***
        assert_equal(np.count_nonzero(x***REMOVED***, 3***REMOVED***
        assert_equal(np.nonzero(x***REMOVED***, ([0, 1, 2***REMOVED***, [0, 1, 2***REMOVED******REMOVED******REMOVED***

        x = np.array([[(0, 1***REMOVED***, (0, 0***REMOVED***, (1, 11***REMOVED******REMOVED***,
                   [(1, 1***REMOVED***, (1, 0***REMOVED***, (0, 0***REMOVED******REMOVED***,
                   [(0, 0***REMOVED***, (1, 5***REMOVED***, (0, 1***REMOVED******REMOVED******REMOVED***, dtype=[('a', 'f4'***REMOVED***, ('b', 'u1'***REMOVED******REMOVED******REMOVED***
        assert_equal(np.count_nonzero(x['a'***REMOVED******REMOVED***, 4***REMOVED***
        assert_equal(np.count_nonzero(x['b'***REMOVED******REMOVED***, 5***REMOVED***
        assert_equal(np.nonzero(x['a'***REMOVED******REMOVED***, ([0, 1, 1, 2***REMOVED***, [2, 0, 1, 1***REMOVED******REMOVED******REMOVED***
        assert_equal(np.nonzero(x['b'***REMOVED******REMOVED***, ([0, 0, 1, 2, 2***REMOVED***, [0, 2, 0, 1, 2***REMOVED******REMOVED******REMOVED***

        assert_(not x['a'***REMOVED***.T.flags.aligned***REMOVED***
        assert_equal(np.count_nonzero(x['a'***REMOVED***.T***REMOVED***, 4***REMOVED***
        assert_equal(np.count_nonzero(x['b'***REMOVED***.T***REMOVED***, 5***REMOVED***
        assert_equal(np.nonzero(x['a'***REMOVED***.T***REMOVED***, ([0, 1, 1, 2***REMOVED***, [1, 1, 2, 0***REMOVED******REMOVED******REMOVED***
        assert_equal(np.nonzero(x['b'***REMOVED***.T***REMOVED***, ([0, 0, 1, 2, 2***REMOVED***, [0, 1, 2, 0, 2***REMOVED******REMOVED******REMOVED***

    def test_sparse(self***REMOVED***:
        # test special sparse condition boolean code path
        for i in range(20***REMOVED***:
            c = np.zeros(200, dtype=np.bool***REMOVED***
            c[i::20***REMOVED*** = True
            assert_equal(np.nonzero(c***REMOVED***[0***REMOVED***, np.arange(i, 200 + i, 20***REMOVED******REMOVED***

            c = np.zeros(400, dtype=np.bool***REMOVED***
            c[10 + i:20 + i***REMOVED*** = True
            c[20 + i*2***REMOVED*** = True
            assert_equal(np.nonzero(c***REMOVED***[0***REMOVED***,
                         np.concatenate((np.arange(10 + i, 20 + i***REMOVED***, [20 + i*2***REMOVED******REMOVED******REMOVED******REMOVED***

    def test_return_type(self***REMOVED***:
        class C(np.ndarray***REMOVED***:
            pass

        for view in (C, np.ndarray***REMOVED***:
            for nd in range(1, 4***REMOVED***:
                shape = tuple(range(2, 2+nd***REMOVED******REMOVED***
                x = np.arange(np.prod(shape***REMOVED******REMOVED***.reshape(shape***REMOVED***.view(view***REMOVED***
                for nzx in (np.nonzero(x***REMOVED***, x.nonzero(***REMOVED******REMOVED***:
                    for nzx_i in nzx:
                        assert_(type(nzx_i***REMOVED*** is np.ndarray***REMOVED***
                        assert_(nzx_i.flags.writeable***REMOVED***

    # Tests that the array method
    # call works
    def test_array_method(self***REMOVED***:
        m = np.array([[1, 0, 0***REMOVED***, [4, 0, 6***REMOVED******REMOVED******REMOVED***
        tgt = [[0, 1, 1***REMOVED***, [0, 0, 2***REMOVED******REMOVED***

        assert_equal(m.nonzero(***REMOVED***, tgt***REMOVED***


class TestIndex(TestCase***REMOVED***:
    def test_boolean(self***REMOVED***:
        a = rand(3, 5, 8***REMOVED***
        V = rand(5, 8***REMOVED***
        g1 = randint(0, 5, size=15***REMOVED***
        g2 = randint(0, 8, size=15***REMOVED***
        V[g1, g2***REMOVED*** = -V[g1, g2***REMOVED***
        assert_((np.array([a[0***REMOVED***[V > 0***REMOVED***, a[1***REMOVED***[V > 0***REMOVED***, a[2***REMOVED***[V > 0***REMOVED******REMOVED******REMOVED*** == a[:, V > 0***REMOVED******REMOVED***.all(***REMOVED******REMOVED***

    def test_boolean_edgecase(self***REMOVED***:
        a = np.array([***REMOVED***, dtype='int32'***REMOVED***
        b = np.array([***REMOVED***, dtype='bool'***REMOVED***
        c = a[b***REMOVED***
        assert_equal(c, [***REMOVED******REMOVED***
        assert_equal(c.dtype, np.dtype('int32'***REMOVED******REMOVED***


class TestBinaryRepr(TestCase***REMOVED***:
    def test_zero(self***REMOVED***:
        assert_equal(np.binary_repr(0***REMOVED***, '0'***REMOVED***

    def test_large(self***REMOVED***:
        assert_equal(np.binary_repr(10736848***REMOVED***, '101000111101010011010000'***REMOVED***

    def test_negative(self***REMOVED***:
        assert_equal(np.binary_repr(-1***REMOVED***, '-1'***REMOVED***
        assert_equal(np.binary_repr(-1, width=8***REMOVED***, '11111111'***REMOVED***


class TestBaseRepr(TestCase***REMOVED***:
    def test_base3(self***REMOVED***:
        assert_equal(np.base_repr(3**5, 3***REMOVED***, '100000'***REMOVED***

    def test_positive(self***REMOVED***:
        assert_equal(np.base_repr(12, 10***REMOVED***, '12'***REMOVED***
        assert_equal(np.base_repr(12, 10, 4***REMOVED***, '000012'***REMOVED***
        assert_equal(np.base_repr(12, 4***REMOVED***, '30'***REMOVED***
        assert_equal(np.base_repr(3731624803700888, 36***REMOVED***, '10QR0ROFCEW'***REMOVED***

    def test_negative(self***REMOVED***:
        assert_equal(np.base_repr(-12, 10***REMOVED***, '-12'***REMOVED***
        assert_equal(np.base_repr(-12, 10, 4***REMOVED***, '-000012'***REMOVED***
        assert_equal(np.base_repr(-12, 4***REMOVED***, '-30'***REMOVED***


class TestArrayComparisons(TestCase***REMOVED***:
    def test_array_equal(self***REMOVED***:
        res = np.array_equal(np.array([1, 2***REMOVED******REMOVED***, np.array([1, 2***REMOVED******REMOVED******REMOVED***
        assert_(res***REMOVED***
        assert_(type(res***REMOVED*** is bool***REMOVED***
        res = np.array_equal(np.array([1, 2***REMOVED******REMOVED***, np.array([1, 2, 3***REMOVED******REMOVED******REMOVED***
        assert_(not res***REMOVED***
        assert_(type(res***REMOVED*** is bool***REMOVED***
        res = np.array_equal(np.array([1, 2***REMOVED******REMOVED***, np.array([3, 4***REMOVED******REMOVED******REMOVED***
        assert_(not res***REMOVED***
        assert_(type(res***REMOVED*** is bool***REMOVED***
        res = np.array_equal(np.array([1, 2***REMOVED******REMOVED***, np.array([1, 3***REMOVED******REMOVED******REMOVED***
        assert_(not res***REMOVED***
        assert_(type(res***REMOVED*** is bool***REMOVED***
        res = np.array_equal(np.array(['a'***REMOVED***, dtype='S1'***REMOVED***, np.array(['a'***REMOVED***, dtype='S1'***REMOVED******REMOVED***
        assert_(res***REMOVED***
        assert_(type(res***REMOVED*** is bool***REMOVED***
        res = np.array_equal(np.array([('a', 1***REMOVED******REMOVED***, dtype='S1,u4'***REMOVED***,
                             np.array([('a', 1***REMOVED******REMOVED***, dtype='S1,u4'***REMOVED******REMOVED***
        assert_(res***REMOVED***
        assert_(type(res***REMOVED*** is bool***REMOVED***

    def test_array_equiv(self***REMOVED***:
        res = np.array_equiv(np.array([1, 2***REMOVED******REMOVED***, np.array([1, 2***REMOVED******REMOVED******REMOVED***
        assert_(res***REMOVED***
        assert_(type(res***REMOVED*** is bool***REMOVED***
        res = np.array_equiv(np.array([1, 2***REMOVED******REMOVED***, np.array([1, 2, 3***REMOVED******REMOVED******REMOVED***
        assert_(not res***REMOVED***
        assert_(type(res***REMOVED*** is bool***REMOVED***
        res = np.array_equiv(np.array([1, 2***REMOVED******REMOVED***, np.array([3, 4***REMOVED******REMOVED******REMOVED***
        assert_(not res***REMOVED***
        assert_(type(res***REMOVED*** is bool***REMOVED***
        res = np.array_equiv(np.array([1, 2***REMOVED******REMOVED***, np.array([1, 3***REMOVED******REMOVED******REMOVED***
        assert_(not res***REMOVED***
        assert_(type(res***REMOVED*** is bool***REMOVED***

        res = np.array_equiv(np.array([1, 1***REMOVED******REMOVED***, np.array([1***REMOVED******REMOVED******REMOVED***
        assert_(res***REMOVED***
        assert_(type(res***REMOVED*** is bool***REMOVED***
        res = np.array_equiv(np.array([1, 1***REMOVED******REMOVED***, np.array([[1***REMOVED***, [1***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_(res***REMOVED***
        assert_(type(res***REMOVED*** is bool***REMOVED***
        res = np.array_equiv(np.array([1, 2***REMOVED******REMOVED***, np.array([2***REMOVED******REMOVED******REMOVED***
        assert_(not res***REMOVED***
        assert_(type(res***REMOVED*** is bool***REMOVED***
        res = np.array_equiv(np.array([1, 2***REMOVED******REMOVED***, np.array([[1***REMOVED***, [2***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_(not res***REMOVED***
        assert_(type(res***REMOVED*** is bool***REMOVED***
        res = np.array_equiv(np.array([1, 2***REMOVED******REMOVED***, np.array([[1, 2, 3***REMOVED***, [4, 5, 6***REMOVED***, [7, 8, 9***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_(not res***REMOVED***
        assert_(type(res***REMOVED*** is bool***REMOVED***


def assert_array_strict_equal(x, y***REMOVED***:
    assert_array_equal(x, y***REMOVED***
    # Check flags, 32 bit arches typically don't provide 16 byte alignment
    if ((x.dtype.alignment <= 8 or
            np.intp(***REMOVED***.dtype.itemsize != 4***REMOVED*** and
            sys.platform != 'win32'***REMOVED***:
        assert_(x.flags == y.flags***REMOVED***
    else:
        assert_(x.flags.owndata == y.flags.owndata***REMOVED***
        assert_(x.flags.writeable == y.flags.writeable***REMOVED***
        assert_(x.flags.c_contiguous == y.flags.c_contiguous***REMOVED***
        assert_(x.flags.f_contiguous == y.flags.f_contiguous***REMOVED***
        assert_(x.flags.updateifcopy == y.flags.updateifcopy***REMOVED***
    # check endianness
    assert_(x.dtype.isnative == y.dtype.isnative***REMOVED***


class TestClip(TestCase***REMOVED***:
    def setUp(self***REMOVED***:
        self.nr = 5
        self.nc = 3

    def fastclip(self, a, m, M, out=None***REMOVED***:
        if out is None:
            return a.clip(m, M***REMOVED***
        else:
            return a.clip(m, M, out***REMOVED***

    def clip(self, a, m, M, out=None***REMOVED***:
        # use slow-clip
        selector = np.less(a, m***REMOVED*** + 2*np.greater(a, M***REMOVED***
        return selector.choose((a, m, M***REMOVED***, out=out***REMOVED***

    # Handy functions
    def _generate_data(self, n, m***REMOVED***:
        return randn(n, m***REMOVED***

    def _generate_data_complex(self, n, m***REMOVED***:
        return randn(n, m***REMOVED*** + 1.j * rand(n, m***REMOVED***

    def _generate_flt_data(self, n, m***REMOVED***:
        return (randn(n, m***REMOVED******REMOVED***.astype(np.float32***REMOVED***

    def _neg_byteorder(self, a***REMOVED***:
        a = np.asarray(a***REMOVED***
        if sys.byteorder == 'little':
            a = a.astype(a.dtype.newbyteorder('>'***REMOVED******REMOVED***
        else:
            a = a.astype(a.dtype.newbyteorder('<'***REMOVED******REMOVED***
        return a

    def _generate_non_native_data(self, n, m***REMOVED***:
        data = randn(n, m***REMOVED***
        data = self._neg_byteorder(data***REMOVED***
        assert_(not data.dtype.isnative***REMOVED***
        return data

    def _generate_int_data(self, n, m***REMOVED***:
        return (10 * rand(n, m***REMOVED******REMOVED***.astype(np.int64***REMOVED***

    def _generate_int32_data(self, n, m***REMOVED***:
        return (10 * rand(n, m***REMOVED******REMOVED***.astype(np.int32***REMOVED***

    # Now the real test cases
    def test_simple_double(self***REMOVED***:
        # Test native double input with scalar min/max.
        a = self._generate_data(self.nr, self.nc***REMOVED***
        m = 0.1
        M = 0.6
        ac = self.fastclip(a, m, M***REMOVED***
        act = self.clip(a, m, M***REMOVED***
        assert_array_strict_equal(ac, act***REMOVED***

    def test_simple_int(self***REMOVED***:
        # Test native int input with scalar min/max.
        a = self._generate_int_data(self.nr, self.nc***REMOVED***
        a = a.astype(int***REMOVED***
        m = -2
        M = 4
        ac = self.fastclip(a, m, M***REMOVED***
        act = self.clip(a, m, M***REMOVED***
        assert_array_strict_equal(ac, act***REMOVED***

    def test_array_double(self***REMOVED***:
        # Test native double input with array min/max.
        a = self._generate_data(self.nr, self.nc***REMOVED***
        m = np.zeros(a.shape***REMOVED***
        M = m + 0.5
        ac = self.fastclip(a, m, M***REMOVED***
        act = self.clip(a, m, M***REMOVED***
        assert_array_strict_equal(ac, act***REMOVED***

    def test_simple_nonnative(self***REMOVED***:
        # Test non native double input with scalar min/max.
        # Test native double input with non native double scalar min/max.
        a = self._generate_non_native_data(self.nr, self.nc***REMOVED***
        m = -0.5
        M = 0.6
        ac = self.fastclip(a, m, M***REMOVED***
        act = self.clip(a, m, M***REMOVED***
        assert_array_equal(ac, act***REMOVED***

        # Test native double input with non native double scalar min/max.
        a = self._generate_data(self.nr, self.nc***REMOVED***
        m = -0.5
        M = self._neg_byteorder(0.6***REMOVED***
        assert_(not M.dtype.isnative***REMOVED***
        ac = self.fastclip(a, m, M***REMOVED***
        act = self.clip(a, m, M***REMOVED***
        assert_array_equal(ac, act***REMOVED***

    def test_simple_complex(self***REMOVED***:
        # Test native complex input with native double scalar min/max.
        # Test native input with complex double scalar min/max.
        a = 3 * self._generate_data_complex(self.nr, self.nc***REMOVED***
        m = -0.5
        M = 1.
        ac = self.fastclip(a, m, M***REMOVED***
        act = self.clip(a, m, M***REMOVED***
        assert_array_strict_equal(ac, act***REMOVED***

        # Test native input with complex double scalar min/max.
        a = 3 * self._generate_data(self.nr, self.nc***REMOVED***
        m = -0.5 + 1.j
        M = 1. + 2.j
        ac = self.fastclip(a, m, M***REMOVED***
        act = self.clip(a, m, M***REMOVED***
        assert_array_strict_equal(ac, act***REMOVED***

    def test_clip_complex(self***REMOVED***:
        # Address Issue gh-5354 for clipping complex arrays
        # Test native complex input without explicit min/max
        # ie, either min=None or max=None
        a = np.ones(10, dtype=np.complex***REMOVED***
        m = a.min(***REMOVED***
        M = a.max(***REMOVED***
        am = self.fastclip(a, m, None***REMOVED***
        aM = self.fastclip(a, None, M***REMOVED***
        assert_array_strict_equal(am, a***REMOVED***
        assert_array_strict_equal(aM, a***REMOVED***

    def test_clip_non_contig(self***REMOVED***:
        # Test clip for non contiguous native input and native scalar min/max.
        a = self._generate_data(self.nr * 2, self.nc * 3***REMOVED***
        a = a[::2, ::3***REMOVED***
        assert_(not a.flags['F_CONTIGUOUS'***REMOVED******REMOVED***
        assert_(not a.flags['C_CONTIGUOUS'***REMOVED******REMOVED***
        ac = self.fastclip(a, -1.6, 1.7***REMOVED***
        act = self.clip(a, -1.6, 1.7***REMOVED***
        assert_array_strict_equal(ac, act***REMOVED***

    def test_simple_out(self***REMOVED***:
        # Test native double input with scalar min/max.
        a = self._generate_data(self.nr, self.nc***REMOVED***
        m = -0.5
        M = 0.6
        ac = np.zeros(a.shape***REMOVED***
        act = np.zeros(a.shape***REMOVED***
        self.fastclip(a, m, M, ac***REMOVED***
        self.clip(a, m, M, act***REMOVED***
        assert_array_strict_equal(ac, act***REMOVED***

    def test_simple_int32_inout(self***REMOVED***:
        # Test native int32 input with double min/max and int32 out.
        a = self._generate_int32_data(self.nr, self.nc***REMOVED***
        m = np.float64(0***REMOVED***
        M = np.float64(2***REMOVED***
        ac = np.zeros(a.shape, dtype=np.int32***REMOVED***
        act = ac.copy(***REMOVED***
        self.fastclip(a, m, M, ac***REMOVED***
        self.clip(a, m, M, act***REMOVED***
        assert_array_strict_equal(ac, act***REMOVED***

    def test_simple_int64_out(self***REMOVED***:
        # Test native int32 input with int32 scalar min/max and int64 out.
        a = self._generate_int32_data(self.nr, self.nc***REMOVED***
        m = np.int32(-1***REMOVED***
        M = np.int32(1***REMOVED***
        ac = np.zeros(a.shape, dtype=np.int64***REMOVED***
        act = ac.copy(***REMOVED***
        self.fastclip(a, m, M, ac***REMOVED***
        self.clip(a, m, M, act***REMOVED***
        assert_array_strict_equal(ac, act***REMOVED***

    def test_simple_int64_inout(self***REMOVED***:
        # Test native int32 input with double array min/max and int32 out.
        a = self._generate_int32_data(self.nr, self.nc***REMOVED***
        m = np.zeros(a.shape, np.float64***REMOVED***
        M = np.float64(1***REMOVED***
        ac = np.zeros(a.shape, dtype=np.int32***REMOVED***
        act = ac.copy(***REMOVED***
        self.fastclip(a, m, M, ac***REMOVED***
        self.clip(a, m, M, act***REMOVED***
        assert_array_strict_equal(ac, act***REMOVED***

    def test_simple_int32_out(self***REMOVED***:
        # Test native double input with scalar min/max and int out.
        a = self._generate_data(self.nr, self.nc***REMOVED***
        m = -1.0
        M = 2.0
        ac = np.zeros(a.shape, dtype=np.int32***REMOVED***
        act = ac.copy(***REMOVED***
        self.fastclip(a, m, M, ac***REMOVED***
        self.clip(a, m, M, act***REMOVED***
        assert_array_strict_equal(ac, act***REMOVED***

    def test_simple_inplace_01(self***REMOVED***:
        # Test native double input with array min/max in-place.
        a = self._generate_data(self.nr, self.nc***REMOVED***
        ac = a.copy(***REMOVED***
        m = np.zeros(a.shape***REMOVED***
        M = 1.0
        self.fastclip(a, m, M, a***REMOVED***
        self.clip(a, m, M, ac***REMOVED***
        assert_array_strict_equal(a, ac***REMOVED***

    def test_simple_inplace_02(self***REMOVED***:
        # Test native double input with scalar min/max in-place.
        a = self._generate_data(self.nr, self.nc***REMOVED***
        ac = a.copy(***REMOVED***
        m = -0.5
        M = 0.6
        self.fastclip(a, m, M, a***REMOVED***
        self.clip(a, m, M, ac***REMOVED***
        assert_array_strict_equal(a, ac***REMOVED***

    def test_noncontig_inplace(self***REMOVED***:
        # Test non contiguous double input with double scalar min/max in-place.
        a = self._generate_data(self.nr * 2, self.nc * 3***REMOVED***
        a = a[::2, ::3***REMOVED***
        assert_(not a.flags['F_CONTIGUOUS'***REMOVED******REMOVED***
        assert_(not a.flags['C_CONTIGUOUS'***REMOVED******REMOVED***
        ac = a.copy(***REMOVED***
        m = -0.5
        M = 0.6
        self.fastclip(a, m, M, a***REMOVED***
        self.clip(a, m, M, ac***REMOVED***
        assert_array_equal(a, ac***REMOVED***

    def test_type_cast_01(self***REMOVED***:
        # Test native double input with scalar min/max.
        a = self._generate_data(self.nr, self.nc***REMOVED***
        m = -0.5
        M = 0.6
        ac = self.fastclip(a, m, M***REMOVED***
        act = self.clip(a, m, M***REMOVED***
        assert_array_strict_equal(ac, act***REMOVED***

    def test_type_cast_02(self***REMOVED***:
        # Test native int32 input with int32 scalar min/max.
        a = self._generate_int_data(self.nr, self.nc***REMOVED***
        a = a.astype(np.int32***REMOVED***
        m = -2
        M = 4
        ac = self.fastclip(a, m, M***REMOVED***
        act = self.clip(a, m, M***REMOVED***
        assert_array_strict_equal(ac, act***REMOVED***

    def test_type_cast_03(self***REMOVED***:
        # Test native int32 input with float64 scalar min/max.
        a = self._generate_int32_data(self.nr, self.nc***REMOVED***
        m = -2
        M = 4
        ac = self.fastclip(a, np.float64(m***REMOVED***, np.float64(M***REMOVED******REMOVED***
        act = self.clip(a, np.float64(m***REMOVED***, np.float64(M***REMOVED******REMOVED***
        assert_array_strict_equal(ac, act***REMOVED***

    def test_type_cast_04(self***REMOVED***:
        # Test native int32 input with float32 scalar min/max.
        a = self._generate_int32_data(self.nr, self.nc***REMOVED***
        m = np.float32(-2***REMOVED***
        M = np.float32(4***REMOVED***
        act = self.fastclip(a, m, M***REMOVED***
        ac = self.clip(a, m, M***REMOVED***
        assert_array_strict_equal(ac, act***REMOVED***

    def test_type_cast_05(self***REMOVED***:
        # Test native int32 with double arrays min/max.
        a = self._generate_int_data(self.nr, self.nc***REMOVED***
        m = -0.5
        M = 1.
        ac = self.fastclip(a, m * np.zeros(a.shape***REMOVED***, M***REMOVED***
        act = self.clip(a, m * np.zeros(a.shape***REMOVED***, M***REMOVED***
        assert_array_strict_equal(ac, act***REMOVED***

    def test_type_cast_06(self***REMOVED***:
        # Test native with NON native scalar min/max.
        a = self._generate_data(self.nr, self.nc***REMOVED***
        m = 0.5
        m_s = self._neg_byteorder(m***REMOVED***
        M = 1.
        act = self.clip(a, m_s, M***REMOVED***
        ac = self.fastclip(a, m_s, M***REMOVED***
        assert_array_strict_equal(ac, act***REMOVED***

    def test_type_cast_07(self***REMOVED***:
        # Test NON native with native array min/max.
        a = self._generate_data(self.nr, self.nc***REMOVED***
        m = -0.5 * np.ones(a.shape***REMOVED***
        M = 1.
        a_s = self._neg_byteorder(a***REMOVED***
        assert_(not a_s.dtype.isnative***REMOVED***
        act = a_s.clip(m, M***REMOVED***
        ac = self.fastclip(a_s, m, M***REMOVED***
        assert_array_strict_equal(ac, act***REMOVED***

    def test_type_cast_08(self***REMOVED***:
        # Test NON native with native scalar min/max.
        a = self._generate_data(self.nr, self.nc***REMOVED***
        m = -0.5
        M = 1.
        a_s = self._neg_byteorder(a***REMOVED***
        assert_(not a_s.dtype.isnative***REMOVED***
        ac = self.fastclip(a_s, m, M***REMOVED***
        act = a_s.clip(m, M***REMOVED***
        assert_array_strict_equal(ac, act***REMOVED***

    def test_type_cast_09(self***REMOVED***:
        # Test native with NON native array min/max.
        a = self._generate_data(self.nr, self.nc***REMOVED***
        m = -0.5 * np.ones(a.shape***REMOVED***
        M = 1.
        m_s = self._neg_byteorder(m***REMOVED***
        assert_(not m_s.dtype.isnative***REMOVED***
        ac = self.fastclip(a, m_s, M***REMOVED***
        act = self.clip(a, m_s, M***REMOVED***
        assert_array_strict_equal(ac, act***REMOVED***

    def test_type_cast_10(self***REMOVED***:
        # Test native int32 with float min/max and float out for output argument.
        a = self._generate_int_data(self.nr, self.nc***REMOVED***
        b = np.zeros(a.shape, dtype=np.float32***REMOVED***
        m = np.float32(-0.5***REMOVED***
        M = np.float32(1***REMOVED***
        act = self.clip(a, m, M, out=b***REMOVED***
        ac = self.fastclip(a, m, M, out=b***REMOVED***
        assert_array_strict_equal(ac, act***REMOVED***

    def test_type_cast_11(self***REMOVED***:
        # Test non native with native scalar, min/max, out non native
        a = self._generate_non_native_data(self.nr, self.nc***REMOVED***
        b = a.copy(***REMOVED***
        b = b.astype(b.dtype.newbyteorder('>'***REMOVED******REMOVED***
        bt = b.copy(***REMOVED***
        m = -0.5
        M = 1.
        self.fastclip(a, m, M, out=b***REMOVED***
        self.clip(a, m, M, out=bt***REMOVED***
        assert_array_strict_equal(b, bt***REMOVED***

    def test_type_cast_12(self***REMOVED***:
        # Test native int32 input and min/max and float out
        a = self._generate_int_data(self.nr, self.nc***REMOVED***
        b = np.zeros(a.shape, dtype=np.float32***REMOVED***
        m = np.int32(0***REMOVED***
        M = np.int32(1***REMOVED***
        act = self.clip(a, m, M, out=b***REMOVED***
        ac = self.fastclip(a, m, M, out=b***REMOVED***
        assert_array_strict_equal(ac, act***REMOVED***

    def test_clip_with_out_simple(self***REMOVED***:
        # Test native double input with scalar min/max
        a = self._generate_data(self.nr, self.nc***REMOVED***
        m = -0.5
        M = 0.6
        ac = np.zeros(a.shape***REMOVED***
        act = np.zeros(a.shape***REMOVED***
        self.fastclip(a, m, M, ac***REMOVED***
        self.clip(a, m, M, act***REMOVED***
        assert_array_strict_equal(ac, act***REMOVED***

    def test_clip_with_out_simple2(self***REMOVED***:
        # Test native int32 input with double min/max and int32 out
        a = self._generate_int32_data(self.nr, self.nc***REMOVED***
        m = np.float64(0***REMOVED***
        M = np.float64(2***REMOVED***
        ac = np.zeros(a.shape, dtype=np.int32***REMOVED***
        act = ac.copy(***REMOVED***
        self.fastclip(a, m, M, ac***REMOVED***
        self.clip(a, m, M, act***REMOVED***
        assert_array_strict_equal(ac, act***REMOVED***

    def test_clip_with_out_simple_int32(self***REMOVED***:
        # Test native int32 input with int32 scalar min/max and int64 out
        a = self._generate_int32_data(self.nr, self.nc***REMOVED***
        m = np.int32(-1***REMOVED***
        M = np.int32(1***REMOVED***
        ac = np.zeros(a.shape, dtype=np.int64***REMOVED***
        act = ac.copy(***REMOVED***
        self.fastclip(a, m, M, ac***REMOVED***
        self.clip(a, m, M, act***REMOVED***
        assert_array_strict_equal(ac, act***REMOVED***

    def test_clip_with_out_array_int32(self***REMOVED***:
        # Test native int32 input with double array min/max and int32 out
        a = self._generate_int32_data(self.nr, self.nc***REMOVED***
        m = np.zeros(a.shape, np.float64***REMOVED***
        M = np.float64(1***REMOVED***
        ac = np.zeros(a.shape, dtype=np.int32***REMOVED***
        act = ac.copy(***REMOVED***
        self.fastclip(a, m, M, ac***REMOVED***
        self.clip(a, m, M, act***REMOVED***
        assert_array_strict_equal(ac, act***REMOVED***

    def test_clip_with_out_array_outint32(self***REMOVED***:
        # Test native double input with scalar min/max and int out
        a = self._generate_data(self.nr, self.nc***REMOVED***
        m = -1.0
        M = 2.0
        ac = np.zeros(a.shape, dtype=np.int32***REMOVED***
        act = ac.copy(***REMOVED***
        self.fastclip(a, m, M, ac***REMOVED***
        self.clip(a, m, M, act***REMOVED***
        assert_array_strict_equal(ac, act***REMOVED***

    def test_clip_inplace_array(self***REMOVED***:
        # Test native double input with array min/max
        a = self._generate_data(self.nr, self.nc***REMOVED***
        ac = a.copy(***REMOVED***
        m = np.zeros(a.shape***REMOVED***
        M = 1.0
        self.fastclip(a, m, M, a***REMOVED***
        self.clip(a, m, M, ac***REMOVED***
        assert_array_strict_equal(a, ac***REMOVED***

    def test_clip_inplace_simple(self***REMOVED***:
        # Test native double input with scalar min/max
        a = self._generate_data(self.nr, self.nc***REMOVED***
        ac = a.copy(***REMOVED***
        m = -0.5
        M = 0.6
        self.fastclip(a, m, M, a***REMOVED***
        self.clip(a, m, M, ac***REMOVED***
        assert_array_strict_equal(a, ac***REMOVED***

    def test_clip_func_takes_out(self***REMOVED***:
        # Ensure that the clip(***REMOVED*** function takes an out=argument.
        a = self._generate_data(self.nr, self.nc***REMOVED***
        ac = a.copy(***REMOVED***
        m = -0.5
        M = 0.6
        a2 = np.clip(a, m, M, out=a***REMOVED***
        self.clip(a, m, M, ac***REMOVED***
        assert_array_strict_equal(a2, ac***REMOVED***
        self.assertTrue(a2 is a***REMOVED***

    def test_clip_nan(self***REMOVED***:
        d = np.arange(7.***REMOVED***
        assert_equal(d.clip(min=np.nan***REMOVED***, d***REMOVED***
        assert_equal(d.clip(max=np.nan***REMOVED***, d***REMOVED***
        assert_equal(d.clip(min=np.nan, max=np.nan***REMOVED***, d***REMOVED***
        assert_equal(d.clip(min=-2, max=np.nan***REMOVED***, d***REMOVED***
        assert_equal(d.clip(min=np.nan, max=10***REMOVED***, d***REMOVED***


class TestAllclose(object***REMOVED***:
    rtol = 1e-5
    atol = 1e-8

    def setUp(self***REMOVED***:
        self.olderr = np.seterr(invalid='ignore'***REMOVED***

    def tearDown(self***REMOVED***:
        np.seterr(**self.olderr***REMOVED***

    def tst_allclose(self, x, y***REMOVED***:
        assert_(np.allclose(x, y***REMOVED***, "%s and %s not close" % (x, y***REMOVED******REMOVED***

    def tst_not_allclose(self, x, y***REMOVED***:
        assert_(not np.allclose(x, y***REMOVED***, "%s and %s shouldn't be close" % (x, y***REMOVED******REMOVED***

    def test_ip_allclose(self***REMOVED***:
        # Parametric test factory.
        arr = np.array([100, 1000***REMOVED******REMOVED***
        aran = np.arange(125***REMOVED***.reshape((5, 5, 5***REMOVED******REMOVED***

        atol = self.atol
        rtol = self.rtol

        data = [([1, 0***REMOVED***, [1, 0***REMOVED******REMOVED***,
                ([atol***REMOVED***, [0***REMOVED******REMOVED***,
                ([1***REMOVED***, [1+rtol+atol***REMOVED******REMOVED***,
                (arr, arr + arr*rtol***REMOVED***,
                (arr, arr + arr*rtol + atol*2***REMOVED***,
                (aran, aran + aran*rtol***REMOVED***,
                (np.inf, np.inf***REMOVED***,
                (np.inf, [np.inf***REMOVED******REMOVED******REMOVED***

        for (x, y***REMOVED*** in data:
            yield (self.tst_allclose, x, y***REMOVED***

    def test_ip_not_allclose(self***REMOVED***:
        # Parametric test factory.
        aran = np.arange(125***REMOVED***.reshape((5, 5, 5***REMOVED******REMOVED***

        atol = self.atol
        rtol = self.rtol

        data = [([np.inf, 0***REMOVED***, [1, np.inf***REMOVED******REMOVED***,
                ([np.inf, 0***REMOVED***, [1, 0***REMOVED******REMOVED***,
                ([np.inf, np.inf***REMOVED***, [1, np.inf***REMOVED******REMOVED***,
                ([np.inf, np.inf***REMOVED***, [1, 0***REMOVED******REMOVED***,
                ([-np.inf, 0***REMOVED***, [np.inf, 0***REMOVED******REMOVED***,
                ([np.nan, 0***REMOVED***, [np.nan, 0***REMOVED******REMOVED***,
                ([atol*2***REMOVED***, [0***REMOVED******REMOVED***,
                ([1***REMOVED***, [1+rtol+atol*2***REMOVED******REMOVED***,
                (aran, aran + aran*atol + atol*2***REMOVED***,
                (np.array([np.inf, 1***REMOVED******REMOVED***, np.array([0, np.inf***REMOVED******REMOVED******REMOVED******REMOVED***

        for (x, y***REMOVED*** in data:
            yield (self.tst_not_allclose, x, y***REMOVED***

    def test_no_parameter_modification(self***REMOVED***:
        x = np.array([np.inf, 1***REMOVED******REMOVED***
        y = np.array([0, np.inf***REMOVED******REMOVED***
        np.allclose(x, y***REMOVED***
        assert_array_equal(x, np.array([np.inf, 1***REMOVED******REMOVED******REMOVED***
        assert_array_equal(y, np.array([0, np.inf***REMOVED******REMOVED******REMOVED***

    def test_min_int(self***REMOVED***:
        # Could make problems because of abs(min_int***REMOVED*** == min_int
        min_int = np.iinfo(np.int_***REMOVED***.min
        a = np.array([min_int***REMOVED***, dtype=np.int_***REMOVED***
        assert_(np.allclose(a, a***REMOVED******REMOVED***

    def test_equalnan(self***REMOVED***:
        x = np.array([1.0, np.nan***REMOVED******REMOVED***
        assert_(np.allclose(x, x, equal_nan=True***REMOVED******REMOVED***

    def test_return_class_is_ndarray(self***REMOVED***:
        # Issue gh-6475
        # Check that allclose does not preserve subtypes
        class Foo(np.ndarray***REMOVED***:
            def __new__(cls, *args, **kwargs***REMOVED***:
                return np.array(*args, **kwargs***REMOVED***.view(cls***REMOVED***

        a = Foo([1***REMOVED******REMOVED***
        assert_(type(np.allclose(a, a***REMOVED******REMOVED*** is bool***REMOVED***


class TestIsclose(object***REMOVED***:
    rtol = 1e-5
    atol = 1e-8

    def setup(self***REMOVED***:
        atol = self.atol
        rtol = self.rtol
        arr = np.array([100, 1000***REMOVED******REMOVED***
        aran = np.arange(125***REMOVED***.reshape((5, 5, 5***REMOVED******REMOVED***

        self.all_close_tests = [
                ([1, 0***REMOVED***, [1, 0***REMOVED******REMOVED***,
                ([atol***REMOVED***, [0***REMOVED******REMOVED***,
                ([1***REMOVED***, [1 + rtol + atol***REMOVED******REMOVED***,
                (arr, arr + arr*rtol***REMOVED***,
                (arr, arr + arr*rtol + atol***REMOVED***,
                (aran, aran + aran*rtol***REMOVED***,
                (np.inf, np.inf***REMOVED***,
                (np.inf, [np.inf***REMOVED******REMOVED***,
                ([np.inf, -np.inf***REMOVED***, [np.inf, -np.inf***REMOVED******REMOVED***,
                ***REMOVED***
        self.none_close_tests = [
                ([np.inf, 0***REMOVED***, [1, np.inf***REMOVED******REMOVED***,
                ([np.inf, -np.inf***REMOVED***, [1, 0***REMOVED******REMOVED***,
                ([np.inf, np.inf***REMOVED***, [1, -np.inf***REMOVED******REMOVED***,
                ([np.inf, np.inf***REMOVED***, [1, 0***REMOVED******REMOVED***,
                ([np.nan, 0***REMOVED***, [np.nan, -np.inf***REMOVED******REMOVED***,
                ([atol*2***REMOVED***, [0***REMOVED******REMOVED***,
                ([1***REMOVED***, [1 + rtol + atol*2***REMOVED******REMOVED***,
                (aran, aran + rtol*1.1*aran + atol*1.1***REMOVED***,
                (np.array([np.inf, 1***REMOVED******REMOVED***, np.array([0, np.inf***REMOVED******REMOVED******REMOVED***,
                ***REMOVED***
        self.some_close_tests = [
                ([np.inf, 0***REMOVED***, [np.inf, atol*2***REMOVED******REMOVED***,
                ([atol, 1, 1e6*(1 + 2*rtol***REMOVED*** + atol***REMOVED***, [0, np.nan, 1e6***REMOVED******REMOVED***,
                (np.arange(3***REMOVED***, [0, 1, 2.1***REMOVED******REMOVED***,
                (np.nan, [np.nan, np.nan, np.nan***REMOVED******REMOVED***,
                ([0***REMOVED***, [atol, np.inf, -np.inf, np.nan***REMOVED******REMOVED***,
                (0, [atol, np.inf, -np.inf, np.nan***REMOVED******REMOVED***,
                ***REMOVED***
        self.some_close_results = [
                [True, False***REMOVED***,
                [True, False, False***REMOVED***,
                [True, True, False***REMOVED***,
                [False, False, False***REMOVED***,
                [True, False, False, False***REMOVED***,
                [True, False, False, False***REMOVED***,
                ***REMOVED***

    def test_ip_isclose(self***REMOVED***:
        self.setup(***REMOVED***
        tests = self.some_close_tests
        results = self.some_close_results
        for (x, y***REMOVED***, result in zip(tests, results***REMOVED***:
            yield (assert_array_equal, np.isclose(x, y***REMOVED***, result***REMOVED***

    def tst_all_isclose(self, x, y***REMOVED***:
        assert_(np.all(np.isclose(x, y***REMOVED******REMOVED***, "%s and %s not close" % (x, y***REMOVED******REMOVED***

    def tst_none_isclose(self, x, y***REMOVED***:
        msg = "%s and %s shouldn't be close"
        assert_(not np.any(np.isclose(x, y***REMOVED******REMOVED***, msg % (x, y***REMOVED******REMOVED***

    def tst_isclose_allclose(self, x, y***REMOVED***:
        msg = "isclose.all(***REMOVED*** and allclose aren't same for %s and %s"
        msg2 = "isclose and allclose aren't same for %s and %s"
        if np.isscalar(x***REMOVED*** and np.isscalar(y***REMOVED***:
            assert_(np.isclose(x, y***REMOVED*** == np.allclose(x, y***REMOVED***, msg=msg2 % (x, y***REMOVED******REMOVED***
        else:
            assert_array_equal(np.isclose(x, y***REMOVED***.all(***REMOVED***, np.allclose(x, y***REMOVED***, msg % (x, y***REMOVED******REMOVED***

    def test_ip_all_isclose(self***REMOVED***:
        self.setup(***REMOVED***
        for (x, y***REMOVED*** in self.all_close_tests:
            yield (self.tst_all_isclose, x, y***REMOVED***

    def test_ip_none_isclose(self***REMOVED***:
        self.setup(***REMOVED***
        for (x, y***REMOVED*** in self.none_close_tests:
            yield (self.tst_none_isclose, x, y***REMOVED***

    def test_ip_isclose_allclose(self***REMOVED***:
        self.setup(***REMOVED***
        tests = (self.all_close_tests + self.none_close_tests +
                 self.some_close_tests***REMOVED***
        for (x, y***REMOVED*** in tests:
            yield (self.tst_isclose_allclose, x, y***REMOVED***

    def test_equal_nan(self***REMOVED***:
        assert_array_equal(np.isclose(np.nan, np.nan, equal_nan=True***REMOVED***, [True***REMOVED******REMOVED***
        arr = np.array([1.0, np.nan***REMOVED******REMOVED***
        assert_array_equal(np.isclose(arr, arr, equal_nan=True***REMOVED***, [True, True***REMOVED******REMOVED***

    def test_masked_arrays(self***REMOVED***:
        # Make sure to test the output type when arguments are interchanged.

        x = np.ma.masked_where([True, True, False***REMOVED***, np.arange(3***REMOVED******REMOVED***
        assert_(type(x***REMOVED*** is type(np.isclose(2, x***REMOVED******REMOVED******REMOVED***
        assert_(type(x***REMOVED*** is type(np.isclose(x, 2***REMOVED******REMOVED******REMOVED***

        x = np.ma.masked_where([True, True, False***REMOVED***, [np.nan, np.inf, np.nan***REMOVED******REMOVED***
        assert_(type(x***REMOVED*** is type(np.isclose(np.inf, x***REMOVED******REMOVED******REMOVED***
        assert_(type(x***REMOVED*** is type(np.isclose(x, np.inf***REMOVED******REMOVED******REMOVED***

        x = np.ma.masked_where([True, True, False***REMOVED***, [np.nan, np.nan, np.nan***REMOVED******REMOVED***
        y = np.isclose(np.nan, x, equal_nan=True***REMOVED***
        assert_(type(x***REMOVED*** is type(y***REMOVED******REMOVED***
        # Ensure that the mask isn't modified...
        assert_array_equal([True, True, False***REMOVED***, y.mask***REMOVED***
        y = np.isclose(x, np.nan, equal_nan=True***REMOVED***
        assert_(type(x***REMOVED*** is type(y***REMOVED******REMOVED***
        # Ensure that the mask isn't modified...
        assert_array_equal([True, True, False***REMOVED***, y.mask***REMOVED***

        x = np.ma.masked_where([True, True, False***REMOVED***, [np.nan, np.nan, np.nan***REMOVED******REMOVED***
        y = np.isclose(x, x, equal_nan=True***REMOVED***
        assert_(type(x***REMOVED*** is type(y***REMOVED******REMOVED***
        # Ensure that the mask isn't modified...
        assert_array_equal([True, True, False***REMOVED***, y.mask***REMOVED***

    def test_scalar_return(self***REMOVED***:
        assert_(np.isscalar(np.isclose(1, 1***REMOVED******REMOVED******REMOVED***

    def test_no_parameter_modification(self***REMOVED***:
        x = np.array([np.inf, 1***REMOVED******REMOVED***
        y = np.array([0, np.inf***REMOVED******REMOVED***
        np.isclose(x, y***REMOVED***
        assert_array_equal(x, np.array([np.inf, 1***REMOVED******REMOVED******REMOVED***
        assert_array_equal(y, np.array([0, np.inf***REMOVED******REMOVED******REMOVED***

    def test_non_finite_scalar(self***REMOVED***:
        # GH7014, when two scalars are compared the output should also be a
        # scalar
        assert_(np.isclose(np.inf, -np.inf***REMOVED*** is False***REMOVED***
        assert_(np.isclose(0, np.inf***REMOVED*** is False***REMOVED***
        assert_(type(np.isclose(0, np.inf***REMOVED******REMOVED*** is bool***REMOVED***


class TestStdVar(TestCase***REMOVED***:
    def setUp(self***REMOVED***:
        self.A = np.array([1, -1, 1, -1***REMOVED******REMOVED***
        self.real_var = 1

    def test_basic(self***REMOVED***:
        assert_almost_equal(np.var(self.A***REMOVED***, self.real_var***REMOVED***
        assert_almost_equal(np.std(self.A***REMOVED*****2, self.real_var***REMOVED***

    def test_scalars(self***REMOVED***:
        assert_equal(np.var(1***REMOVED***, 0***REMOVED***
        assert_equal(np.std(1***REMOVED***, 0***REMOVED***

    def test_ddof1(self***REMOVED***:
        assert_almost_equal(np.var(self.A, ddof=1***REMOVED***,
                            self.real_var*len(self.A***REMOVED***/float(len(self.A***REMOVED***-1***REMOVED******REMOVED***
        assert_almost_equal(np.std(self.A, ddof=1***REMOVED*****2,
                            self.real_var*len(self.A***REMOVED***/float(len(self.A***REMOVED***-1***REMOVED******REMOVED***

    def test_ddof2(self***REMOVED***:
        assert_almost_equal(np.var(self.A, ddof=2***REMOVED***,
                            self.real_var*len(self.A***REMOVED***/float(len(self.A***REMOVED***-2***REMOVED******REMOVED***
        assert_almost_equal(np.std(self.A, ddof=2***REMOVED*****2,
                            self.real_var*len(self.A***REMOVED***/float(len(self.A***REMOVED***-2***REMOVED******REMOVED***

    def test_out_scalar(self***REMOVED***:
        d = np.arange(10***REMOVED***
        out = np.array(0.***REMOVED***
        r = np.std(d, out=out***REMOVED***
        assert_(r is out***REMOVED***
        assert_array_equal(r, out***REMOVED***
        r = np.var(d, out=out***REMOVED***
        assert_(r is out***REMOVED***
        assert_array_equal(r, out***REMOVED***
        r = np.mean(d, out=out***REMOVED***
        assert_(r is out***REMOVED***
        assert_array_equal(r, out***REMOVED***


class TestStdVarComplex(TestCase***REMOVED***:
    def test_basic(self***REMOVED***:
        A = np.array([1, 1.j, -1, -1.j***REMOVED******REMOVED***
        real_var = 1
        assert_almost_equal(np.var(A***REMOVED***, real_var***REMOVED***
        assert_almost_equal(np.std(A***REMOVED*****2, real_var***REMOVED***

    def test_scalars(self***REMOVED***:
        assert_equal(np.var(1j***REMOVED***, 0***REMOVED***
        assert_equal(np.std(1j***REMOVED***, 0***REMOVED***


class TestCreationFuncs(TestCase***REMOVED***:
    # Test ones, zeros, empty and filled

    def setUp(self***REMOVED***:
        self.dtypes = ('b', 'i', 'u', 'f', 'c', 'S', 'a', 'U', 'V'***REMOVED***
        self.orders = {'C': 'c_contiguous', 'F': 'f_contiguous'***REMOVED***
        self.ndims = 10

    def check_function(self, func, fill_value=None***REMOVED***:
        par = (
            (0, 1, 2***REMOVED***,
            range(self.ndims***REMOVED***,
            self.orders,
            self.dtypes,
            2**np.arange(9***REMOVED***
        ***REMOVED***
        fill_kwarg = {***REMOVED***
        if fill_value is not None:
            fill_kwarg = {'fill_value': fill_value***REMOVED***
        with warnings.catch_warnings(***REMOVED***:
            warnings.simplefilter('ignore', DeprecationWarning***REMOVED***
            for size, ndims, order, type, bytes in itertools.product(*par***REMOVED***:
                shape = ndims * [size***REMOVED***
                ***REMOVED***
                    dtype = np.dtype('{0***REMOVED***{1***REMOVED***'.format(type, bytes***REMOVED******REMOVED***
                except TypeError:  # dtype combination does not exist
                    continue
                else:
                    # do not fill void type
                    if fill_value is not None and type in 'V':
                        continue

                    arr = func(shape, order=order, dtype=dtype,
                               **fill_kwarg***REMOVED***

                    assert_(arr.dtype == dtype***REMOVED***
                    assert_(getattr(arr.flags, self.orders[order***REMOVED******REMOVED******REMOVED***

                    if fill_value is not None:
                        if dtype.str.startswith('|S'***REMOVED***:
                            val = str(fill_value***REMOVED***
                        else:
                            val = fill_value
                        assert_equal(arr, dtype.type(val***REMOVED******REMOVED***

    def test_zeros(self***REMOVED***:
        self.check_function(np.zeros***REMOVED***

    def test_ones(self***REMOVED***:
        self.check_function(np.zeros***REMOVED***

    def test_empty(self***REMOVED***:
        self.check_function(np.empty***REMOVED***

    def test_filled(self***REMOVED***:
        self.check_function(np.full, 0***REMOVED***
        self.check_function(np.full, 1***REMOVED***

    def test_for_reference_leak(self***REMOVED***:
        # Make sure we have an object for reference
        dim = 1
        beg = sys.getrefcount(dim***REMOVED***
        np.zeros([dim***REMOVED****10***REMOVED***
        assert_(sys.getrefcount(dim***REMOVED*** == beg***REMOVED***
        np.ones([dim***REMOVED****10***REMOVED***
        assert_(sys.getrefcount(dim***REMOVED*** == beg***REMOVED***
        np.empty([dim***REMOVED****10***REMOVED***
        assert_(sys.getrefcount(dim***REMOVED*** == beg***REMOVED***
        np.full([dim***REMOVED****10, 0***REMOVED***
        assert_(sys.getrefcount(dim***REMOVED*** == beg***REMOVED***


class TestLikeFuncs(TestCase***REMOVED***:
    '''Test ones_like, zeros_like, empty_like and full_like'''

    def setUp(self***REMOVED***:
        self.data = [
                # Array scalars
                (np.array(3.***REMOVED***, None***REMOVED***,
                (np.array(3***REMOVED***, 'f8'***REMOVED***,
                # 1D arrays
                (np.arange(6, dtype='f4'***REMOVED***, None***REMOVED***,
                (np.arange(6***REMOVED***, 'c16'***REMOVED***,
                # 2D C-layout arrays
                (np.arange(6***REMOVED***.reshape(2, 3***REMOVED***, None***REMOVED***,
                (np.arange(6***REMOVED***.reshape(3, 2***REMOVED***, 'i1'***REMOVED***,
                # 2D F-layout arrays
                (np.arange(6***REMOVED***.reshape((2, 3***REMOVED***, order='F'***REMOVED***, None***REMOVED***,
                (np.arange(6***REMOVED***.reshape((3, 2***REMOVED***, order='F'***REMOVED***, 'i1'***REMOVED***,
                # 3D C-layout arrays
                (np.arange(24***REMOVED***.reshape(2, 3, 4***REMOVED***, None***REMOVED***,
                (np.arange(24***REMOVED***.reshape(4, 3, 2***REMOVED***, 'f4'***REMOVED***,
                # 3D F-layout arrays
                (np.arange(24***REMOVED***.reshape((2, 3, 4***REMOVED***, order='F'***REMOVED***, None***REMOVED***,
                (np.arange(24***REMOVED***.reshape((4, 3, 2***REMOVED***, order='F'***REMOVED***, 'f4'***REMOVED***,
                # 3D non-C/F-layout arrays
                (np.arange(24***REMOVED***.reshape(2, 3, 4***REMOVED***.swapaxes(0, 1***REMOVED***, None***REMOVED***,
                (np.arange(24***REMOVED***.reshape(4, 3, 2***REMOVED***.swapaxes(0, 1***REMOVED***, '?'***REMOVED***,
                     ***REMOVED***

    def compare_array_value(self, dz, value, fill_value***REMOVED***:
        if value is not None:
            if fill_value:
                ***REMOVED***
                    z = dz.dtype.type(value***REMOVED***
                except OverflowError:
                    pass
                else:
                    assert_(np.all(dz == z***REMOVED******REMOVED***
            else:
                assert_(np.all(dz == value***REMOVED******REMOVED***

    def check_like_function(self, like_function, value, fill_value=False***REMOVED***:
        if fill_value:
            fill_kwarg = {'fill_value': value***REMOVED***
        else:
            fill_kwarg = {***REMOVED***
        for d, dtype in self.data:
            # default (K***REMOVED*** order, dtype
            dz = like_function(d, dtype=dtype, **fill_kwarg***REMOVED***
            assert_equal(dz.shape, d.shape***REMOVED***
            assert_equal(np.array(dz.strides***REMOVED****d.dtype.itemsize,
                         np.array(d.strides***REMOVED****dz.dtype.itemsize***REMOVED***
            assert_equal(d.flags.c_contiguous, dz.flags.c_contiguous***REMOVED***
            assert_equal(d.flags.f_contiguous, dz.flags.f_contiguous***REMOVED***
            if dtype is None:
                assert_equal(dz.dtype, d.dtype***REMOVED***
            else:
                assert_equal(dz.dtype, np.dtype(dtype***REMOVED******REMOVED***
            self.compare_array_value(dz, value, fill_value***REMOVED***

            # C order, default dtype
            dz = like_function(d, order='C', dtype=dtype, **fill_kwarg***REMOVED***
            assert_equal(dz.shape, d.shape***REMOVED***
            assert_(dz.flags.c_contiguous***REMOVED***
            if dtype is None:
                assert_equal(dz.dtype, d.dtype***REMOVED***
            else:
                assert_equal(dz.dtype, np.dtype(dtype***REMOVED******REMOVED***
            self.compare_array_value(dz, value, fill_value***REMOVED***

            # F order, default dtype
            dz = like_function(d, order='F', dtype=dtype, **fill_kwarg***REMOVED***
            assert_equal(dz.shape, d.shape***REMOVED***
            assert_(dz.flags.f_contiguous***REMOVED***
            if dtype is None:
                assert_equal(dz.dtype, d.dtype***REMOVED***
            else:
                assert_equal(dz.dtype, np.dtype(dtype***REMOVED******REMOVED***
            self.compare_array_value(dz, value, fill_value***REMOVED***

            # A order
            dz = like_function(d, order='A', dtype=dtype, **fill_kwarg***REMOVED***
            assert_equal(dz.shape, d.shape***REMOVED***
            if d.flags.f_contiguous:
                assert_(dz.flags.f_contiguous***REMOVED***
            else:
                assert_(dz.flags.c_contiguous***REMOVED***
            if dtype is None:
                assert_equal(dz.dtype, d.dtype***REMOVED***
            else:
                assert_equal(dz.dtype, np.dtype(dtype***REMOVED******REMOVED***
            self.compare_array_value(dz, value, fill_value***REMOVED***

        # Test the 'subok' parameter
        a = np.matrix([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED******REMOVED***

        b = like_function(a, **fill_kwarg***REMOVED***
        assert_(type(b***REMOVED*** is np.matrix***REMOVED***

        b = like_function(a, subok=False, **fill_kwarg***REMOVED***
        assert_(type(b***REMOVED*** is not np.matrix***REMOVED***

    def test_ones_like(self***REMOVED***:
        self.check_like_function(np.ones_like, 1***REMOVED***

    def test_zeros_like(self***REMOVED***:
        self.check_like_function(np.zeros_like, 0***REMOVED***

    def test_empty_like(self***REMOVED***:
        self.check_like_function(np.empty_like, None***REMOVED***

    def test_filled_like(self***REMOVED***:
        self.check_like_function(np.full_like, 0, True***REMOVED***
        self.check_like_function(np.full_like, 1, True***REMOVED***
        self.check_like_function(np.full_like, 1000, True***REMOVED***
        self.check_like_function(np.full_like, 123.456, True***REMOVED***
        self.check_like_function(np.full_like, np.inf, True***REMOVED***


class TestCorrelate(TestCase***REMOVED***:
    def _setup(self, dt***REMOVED***:
        self.x = np.array([1, 2, 3, 4, 5***REMOVED***, dtype=dt***REMOVED***
        self.xs = np.arange(1, 20***REMOVED***[::3***REMOVED***
        self.y = np.array([-1, -2, -3***REMOVED***, dtype=dt***REMOVED***
        self.z1 = np.array([ -3.,  -8., -14., -20., -26., -14.,  -5.***REMOVED***, dtype=dt***REMOVED***
        self.z1_4 = np.array([-2., -5., -8., -11., -14., -5.***REMOVED***, dtype=dt***REMOVED***
        self.z1r = np.array([-15., -22., -22., -16., -10.,  -4.,  -1.***REMOVED***, dtype=dt***REMOVED***
        self.z2 = np.array([-5., -14., -26., -20., -14., -8.,  -3.***REMOVED***, dtype=dt***REMOVED***
        self.z2r = np.array([-1., -4., -10., -16., -22., -22., -15.***REMOVED***, dtype=dt***REMOVED***
        self.zs = np.array([-3., -14., -30., -48., -66., -84.,
                           -102., -54., -19.***REMOVED***, dtype=dt***REMOVED***

    def test_float(self***REMOVED***:
        self._setup(np.float***REMOVED***
        z = np.correlate(self.x, self.y, 'full'***REMOVED***
        assert_array_almost_equal(z, self.z1***REMOVED***
        z = np.correlate(self.x, self.y[:-1***REMOVED***, 'full'***REMOVED***
        assert_array_almost_equal(z, self.z1_4***REMOVED***
        z = np.correlate(self.y, self.x, 'full'***REMOVED***
        assert_array_almost_equal(z, self.z2***REMOVED***
        z = np.correlate(self.x[::-1***REMOVED***, self.y, 'full'***REMOVED***
        assert_array_almost_equal(z, self.z1r***REMOVED***
        z = np.correlate(self.y, self.x[::-1***REMOVED***, 'full'***REMOVED***
        assert_array_almost_equal(z, self.z2r***REMOVED***
        z = np.correlate(self.xs, self.y, 'full'***REMOVED***
        assert_array_almost_equal(z, self.zs***REMOVED***

    def test_object(self***REMOVED***:
        self._setup(Decimal***REMOVED***
        z = np.correlate(self.x, self.y, 'full'***REMOVED***
        assert_array_almost_equal(z, self.z1***REMOVED***
        z = np.correlate(self.y, self.x, 'full'***REMOVED***
        assert_array_almost_equal(z, self.z2***REMOVED***

    def test_no_overwrite(self***REMOVED***:
        d = np.ones(100***REMOVED***
        k = np.ones(3***REMOVED***
        np.correlate(d, k***REMOVED***
        assert_array_equal(d, np.ones(100***REMOVED******REMOVED***
        assert_array_equal(k, np.ones(3***REMOVED******REMOVED***

    def test_complex(self***REMOVED***:
        x = np.array([1, 2, 3, 4+1j***REMOVED***, dtype=np.complex***REMOVED***
        y = np.array([-1, -2j, 3+1j***REMOVED***, dtype=np.complex***REMOVED***
        r_z = np.array([3-1j, 6, 8+1j, 11+5j, -5+8j, -4-1j***REMOVED***, dtype=np.complex***REMOVED***
        r_z = r_z[::-1***REMOVED***.conjugate(***REMOVED***
        z = np.correlate(y, x, mode='full'***REMOVED***
        assert_array_almost_equal(z, r_z***REMOVED***


class TestConvolve(TestCase***REMOVED***:
    def test_object(self***REMOVED***:
        d = [1.***REMOVED*** * 100
        k = [1.***REMOVED*** * 3
        assert_array_almost_equal(np.convolve(d, k***REMOVED***[2:-2***REMOVED***, np.full(98, 3***REMOVED******REMOVED***

    def test_no_overwrite(self***REMOVED***:
        d = np.ones(100***REMOVED***
        k = np.ones(3***REMOVED***
        np.convolve(d, k***REMOVED***
        assert_array_equal(d, np.ones(100***REMOVED******REMOVED***
        assert_array_equal(k, np.ones(3***REMOVED******REMOVED***


class TestArgwhere(object***REMOVED***:
    def test_2D(self***REMOVED***:
        x = np.arange(6***REMOVED***.reshape((2, 3***REMOVED******REMOVED***
        assert_array_equal(np.argwhere(x > 1***REMOVED***,
                           [[0, 2***REMOVED***,
                            [1, 0***REMOVED***,
                            [1, 1***REMOVED***,
                            [1, 2***REMOVED******REMOVED******REMOVED***

    def test_list(self***REMOVED***:
        assert_equal(np.argwhere([4, 0, 2, 1, 3***REMOVED******REMOVED***, [[0***REMOVED***, [2***REMOVED***, [3***REMOVED***, [4***REMOVED******REMOVED******REMOVED***


class TestStringFunction(object***REMOVED***:

    def test_set_string_function(self***REMOVED***:
        a = np.array([1***REMOVED******REMOVED***
        np.set_string_function(lambda x: "FOO", repr=True***REMOVED***
        assert_equal(repr(a***REMOVED***, "FOO"***REMOVED***
        np.set_string_function(None, repr=True***REMOVED***
        assert_equal(repr(a***REMOVED***, "array([1***REMOVED******REMOVED***"***REMOVED***

        np.set_string_function(lambda x: "FOO", repr=False***REMOVED***
        assert_equal(str(a***REMOVED***, "FOO"***REMOVED***
        np.set_string_function(None, repr=False***REMOVED***
        assert_equal(str(a***REMOVED***, "[1***REMOVED***"***REMOVED***


class TestRoll(TestCase***REMOVED***:
    def test_roll1d(self***REMOVED***:
        x = np.arange(10***REMOVED***
        xr = np.roll(x, 2***REMOVED***
        assert_equal(xr, np.array([8, 9, 0, 1, 2, 3, 4, 5, 6, 7***REMOVED******REMOVED******REMOVED***

    def test_roll2d(self***REMOVED***:
        x2 = np.reshape(np.arange(10***REMOVED***, (2, 5***REMOVED******REMOVED***
        x2r = np.roll(x2, 1***REMOVED***
        assert_equal(x2r, np.array([[9, 0, 1, 2, 3***REMOVED***, [4, 5, 6, 7, 8***REMOVED******REMOVED******REMOVED******REMOVED***

        x2r = np.roll(x2, 1, axis=0***REMOVED***
        assert_equal(x2r, np.array([[5, 6, 7, 8, 9***REMOVED***, [0, 1, 2, 3, 4***REMOVED******REMOVED******REMOVED******REMOVED***

        x2r = np.roll(x2, 1, axis=1***REMOVED***
        assert_equal(x2r, np.array([[4, 0, 1, 2, 3***REMOVED***, [9, 5, 6, 7, 8***REMOVED******REMOVED******REMOVED******REMOVED***

    def test_roll_empty(self***REMOVED***:
        x = np.array([***REMOVED******REMOVED***
        assert_equal(np.roll(x, 1***REMOVED***, np.array([***REMOVED******REMOVED******REMOVED***


class TestRollaxis(TestCase***REMOVED***:

    # expected shape indexed by (axis, start***REMOVED*** for array of
    # shape (1, 2, 3, 4***REMOVED***
    tgtshape = {(0, 0***REMOVED***: (1, 2, 3, 4***REMOVED***, (0, 1***REMOVED***: (1, 2, 3, 4***REMOVED***,
                (0, 2***REMOVED***: (2, 1, 3, 4***REMOVED***, (0, 3***REMOVED***: (2, 3, 1, 4***REMOVED***,
                (0, 4***REMOVED***: (2, 3, 4, 1***REMOVED***,
                (1, 0***REMOVED***: (2, 1, 3, 4***REMOVED***, (1, 1***REMOVED***: (1, 2, 3, 4***REMOVED***,
                (1, 2***REMOVED***: (1, 2, 3, 4***REMOVED***, (1, 3***REMOVED***: (1, 3, 2, 4***REMOVED***,
                (1, 4***REMOVED***: (1, 3, 4, 2***REMOVED***,
                (2, 0***REMOVED***: (3, 1, 2, 4***REMOVED***, (2, 1***REMOVED***: (1, 3, 2, 4***REMOVED***,
                (2, 2***REMOVED***: (1, 2, 3, 4***REMOVED***, (2, 3***REMOVED***: (1, 2, 3, 4***REMOVED***,
                (2, 4***REMOVED***: (1, 2, 4, 3***REMOVED***,
                (3, 0***REMOVED***: (4, 1, 2, 3***REMOVED***, (3, 1***REMOVED***: (1, 4, 2, 3***REMOVED***,
                (3, 2***REMOVED***: (1, 2, 4, 3***REMOVED***, (3, 3***REMOVED***: (1, 2, 3, 4***REMOVED***,
                (3, 4***REMOVED***: (1, 2, 3, 4***REMOVED******REMOVED***

    def test_exceptions(self***REMOVED***:
        a = np.arange(1*2*3*4***REMOVED***.reshape(1, 2, 3, 4***REMOVED***
        assert_raises(ValueError, np.rollaxis, a, -5, 0***REMOVED***
        assert_raises(ValueError, np.rollaxis, a, 0, -5***REMOVED***
        assert_raises(ValueError, np.rollaxis, a, 4, 0***REMOVED***
        assert_raises(ValueError, np.rollaxis, a, 0, 5***REMOVED***

    def test_results(self***REMOVED***:
        a = np.arange(1*2*3*4***REMOVED***.reshape(1, 2, 3, 4***REMOVED***.copy(***REMOVED***
        aind = np.indices(a.shape***REMOVED***
        assert_(a.flags['OWNDATA'***REMOVED******REMOVED***
        for (i, j***REMOVED*** in self.tgtshape:
            # positive axis, positive start
            res = np.rollaxis(a, axis=i, start=j***REMOVED***
            i0, i1, i2, i3 = aind[np.array(res.shape***REMOVED*** - 1***REMOVED***
            assert_(np.all(res[i0, i1, i2, i3***REMOVED*** == a***REMOVED******REMOVED***
            assert_(res.shape == self.tgtshape[(i, j***REMOVED******REMOVED***, str((i,j***REMOVED******REMOVED******REMOVED***
            assert_(not res.flags['OWNDATA'***REMOVED******REMOVED***

            # negative axis, positive start
            ip = i + 1
            res = np.rollaxis(a, axis=-ip, start=j***REMOVED***
            i0, i1, i2, i3 = aind[np.array(res.shape***REMOVED*** - 1***REMOVED***
            assert_(np.all(res[i0, i1, i2, i3***REMOVED*** == a***REMOVED******REMOVED***
            assert_(res.shape == self.tgtshape[(4 - ip, j***REMOVED******REMOVED******REMOVED***
            assert_(not res.flags['OWNDATA'***REMOVED******REMOVED***

            # positive axis, negative start
            jp = j + 1 if j < 4 else j
            res = np.rollaxis(a, axis=i, start=-jp***REMOVED***
            i0, i1, i2, i3 = aind[np.array(res.shape***REMOVED*** - 1***REMOVED***
            assert_(np.all(res[i0, i1, i2, i3***REMOVED*** == a***REMOVED******REMOVED***
            assert_(res.shape == self.tgtshape[(i, 4 - jp***REMOVED******REMOVED******REMOVED***
            assert_(not res.flags['OWNDATA'***REMOVED******REMOVED***

            # negative axis, negative start
            ip = i + 1
            jp = j + 1 if j < 4 else j
            res = np.rollaxis(a, axis=-ip, start=-jp***REMOVED***
            i0, i1, i2, i3 = aind[np.array(res.shape***REMOVED*** - 1***REMOVED***
            assert_(np.all(res[i0, i1, i2, i3***REMOVED*** == a***REMOVED******REMOVED***
            assert_(res.shape == self.tgtshape[(4 - ip, 4 - jp***REMOVED******REMOVED******REMOVED***
            assert_(not res.flags['OWNDATA'***REMOVED******REMOVED***


class TestMoveaxis(TestCase***REMOVED***:
    def test_move_to_end(self***REMOVED***:
        x = np.random.randn(5, 6, 7***REMOVED***
        for source, expected in [(0, (6, 7, 5***REMOVED******REMOVED***,
                                 (1, (5, 7, 6***REMOVED******REMOVED***,
                                 (2, (5, 6, 7***REMOVED******REMOVED***,
                                 (-1, (5, 6, 7***REMOVED******REMOVED******REMOVED***:
            actual = np.moveaxis(x, source, -1***REMOVED***.shape
            assert_(actual, expected***REMOVED***

    def test_move_new_position(self***REMOVED***:
        x = np.random.randn(1, 2, 3, 4***REMOVED***
        for source, destination, expected in [
                (0, 1, (2, 1, 3, 4***REMOVED******REMOVED***,
                (1, 2, (1, 3, 2, 4***REMOVED******REMOVED***,
                (1, -1, (1, 3, 4, 2***REMOVED******REMOVED***,
                ***REMOVED***:
            actual = np.moveaxis(x, source, destination***REMOVED***.shape
            assert_(actual, expected***REMOVED***

    def test_preserve_order(self***REMOVED***:
        x = np.zeros((1, 2, 3, 4***REMOVED******REMOVED***
        for source, destination in [
                (0, 0***REMOVED***,
                (3, -1***REMOVED***,
                (-1, 3***REMOVED***,
                ([0, -1***REMOVED***, [0, -1***REMOVED******REMOVED***,
                ([2, 0***REMOVED***, [2, 0***REMOVED******REMOVED***,
                (range(4***REMOVED***, range(4***REMOVED******REMOVED***,
                ***REMOVED***:
            actual = np.moveaxis(x, source, destination***REMOVED***.shape
            assert_(actual, (1, 2, 3, 4***REMOVED******REMOVED***

    def test_move_multiples(self***REMOVED***:
        x = np.zeros((0, 1, 2, 3***REMOVED******REMOVED***
        for source, destination, expected in [
                ([0, 1***REMOVED***, [2, 3***REMOVED***, (2, 3, 0, 1***REMOVED******REMOVED***,
                ([2, 3***REMOVED***, [0, 1***REMOVED***, (2, 3, 0, 1***REMOVED******REMOVED***,
                ([0, 1, 2***REMOVED***, [2, 3, 0***REMOVED***, (2, 3, 0, 1***REMOVED******REMOVED***,
                ([3, 0***REMOVED***, [1, 0***REMOVED***, (0, 3, 1, 2***REMOVED******REMOVED***,
                ([0, 3***REMOVED***, [0, 1***REMOVED***, (0, 3, 1, 2***REMOVED******REMOVED***,
                ***REMOVED***:
            actual = np.moveaxis(x, source, destination***REMOVED***.shape
            assert_(actual, expected***REMOVED***

    def test_errors(self***REMOVED***:
        x = np.random.randn(1, 2, 3***REMOVED***
        assert_raises_regex(ValueError, 'invalid axis .* `source`',
                            np.moveaxis, x, 3, 0***REMOVED***
        assert_raises_regex(ValueError, 'invalid axis .* `source`',
                            np.moveaxis, x, -4, 0***REMOVED***
        assert_raises_regex(ValueError, 'invalid axis .* `destination`',
                            np.moveaxis, x, 0, 5***REMOVED***
        assert_raises_regex(ValueError, 'repeated axis in `source`',
                            np.moveaxis, x, [0, 0***REMOVED***, [0, 1***REMOVED******REMOVED***
        assert_raises_regex(ValueError, 'repeated axis in `destination`',
                            np.moveaxis, x, [0, 1***REMOVED***, [1, 1***REMOVED******REMOVED***
        assert_raises_regex(ValueError, 'must have the same number',
                            np.moveaxis, x, 0, [0, 1***REMOVED******REMOVED***
        assert_raises_regex(ValueError, 'must have the same number',
                            np.moveaxis, x, [0, 1***REMOVED***, [0***REMOVED******REMOVED***

    def test_array_likes(self***REMOVED***:
        x = np.ma.zeros((1, 2, 3***REMOVED******REMOVED***
        result = np.moveaxis(x, 0, 0***REMOVED***
        assert_(x.shape, result.shape***REMOVED***
        assert_(isinstance(result, np.ma.MaskedArray***REMOVED******REMOVED***

        x = [1, 2, 3***REMOVED***
        result = np.moveaxis(x, 0, 0***REMOVED***
        assert_(x, list(result***REMOVED******REMOVED***
        assert_(isinstance(result, np.ndarray***REMOVED******REMOVED***


class TestCross(TestCase***REMOVED***:
    def test_2x2(self***REMOVED***:
        u = [1, 2***REMOVED***
        v = [3, 4***REMOVED***
        z = -2
        cp = np.cross(u, v***REMOVED***
        assert_equal(cp, z***REMOVED***
        cp = np.cross(v, u***REMOVED***
        assert_equal(cp, -z***REMOVED***

    def test_2x3(self***REMOVED***:
        u = [1, 2***REMOVED***
        v = [3, 4, 5***REMOVED***
        z = np.array([10, -5, -2***REMOVED******REMOVED***
        cp = np.cross(u, v***REMOVED***
        assert_equal(cp, z***REMOVED***
        cp = np.cross(v, u***REMOVED***
        assert_equal(cp, -z***REMOVED***

    def test_3x3(self***REMOVED***:
        u = [1, 2, 3***REMOVED***
        v = [4, 5, 6***REMOVED***
        z = np.array([-3, 6, -3***REMOVED******REMOVED***
        cp = np.cross(u, v***REMOVED***
        assert_equal(cp, z***REMOVED***
        cp = np.cross(v, u***REMOVED***
        assert_equal(cp, -z***REMOVED***

    def test_broadcasting(self***REMOVED***:
        # Ticket #2624 (Trac #2032***REMOVED***
        u = np.tile([1, 2***REMOVED***, (11, 1***REMOVED******REMOVED***
        v = np.tile([3, 4***REMOVED***, (11, 1***REMOVED******REMOVED***
        z = -2
        assert_equal(np.cross(u, v***REMOVED***, z***REMOVED***
        assert_equal(np.cross(v, u***REMOVED***, -z***REMOVED***
        assert_equal(np.cross(u, u***REMOVED***, 0***REMOVED***

        u = np.tile([1, 2***REMOVED***, (11, 1***REMOVED******REMOVED***.T
        v = np.tile([3, 4, 5***REMOVED***, (11, 1***REMOVED******REMOVED***
        z = np.tile([10, -5, -2***REMOVED***, (11, 1***REMOVED******REMOVED***
        assert_equal(np.cross(u, v, axisa=0***REMOVED***, z***REMOVED***
        assert_equal(np.cross(v, u.T***REMOVED***, -z***REMOVED***
        assert_equal(np.cross(v, v***REMOVED***, 0***REMOVED***

        u = np.tile([1, 2, 3***REMOVED***, (11, 1***REMOVED******REMOVED***.T
        v = np.tile([3, 4***REMOVED***, (11, 1***REMOVED******REMOVED***.T
        z = np.tile([-12, 9, -2***REMOVED***, (11, 1***REMOVED******REMOVED***
        assert_equal(np.cross(u, v, axisa=0, axisb=0***REMOVED***, z***REMOVED***
        assert_equal(np.cross(v.T, u.T***REMOVED***, -z***REMOVED***
        assert_equal(np.cross(u.T, u.T***REMOVED***, 0***REMOVED***

        u = np.tile([1, 2, 3***REMOVED***, (5, 1***REMOVED******REMOVED***
        v = np.tile([4, 5, 6***REMOVED***, (5, 1***REMOVED******REMOVED***.T
        z = np.tile([-3, 6, -3***REMOVED***, (5, 1***REMOVED******REMOVED***
        assert_equal(np.cross(u, v, axisb=0***REMOVED***, z***REMOVED***
        assert_equal(np.cross(v.T, u***REMOVED***, -z***REMOVED***
        assert_equal(np.cross(u, u***REMOVED***, 0***REMOVED***

    def test_broadcasting_shapes(self***REMOVED***:
        u = np.ones((2, 1, 3***REMOVED******REMOVED***
        v = np.ones((5, 3***REMOVED******REMOVED***
        assert_equal(np.cross(u, v***REMOVED***.shape, (2, 5, 3***REMOVED******REMOVED***
        u = np.ones((10, 3, 5***REMOVED******REMOVED***
        v = np.ones((2, 5***REMOVED******REMOVED***
        assert_equal(np.cross(u, v, axisa=1, axisb=0***REMOVED***.shape, (10, 5, 3***REMOVED******REMOVED***
        assert_raises(ValueError, np.cross, u, v, axisa=1, axisb=2***REMOVED***
        assert_raises(ValueError, np.cross, u, v, axisa=3, axisb=0***REMOVED***
        u = np.ones((10, 3, 5, 7***REMOVED******REMOVED***
        v = np.ones((5, 7, 2***REMOVED******REMOVED***
        assert_equal(np.cross(u, v, axisa=1, axisc=2***REMOVED***.shape, (10, 5, 3, 7***REMOVED******REMOVED***
        assert_raises(ValueError, np.cross, u, v, axisa=-5, axisb=2***REMOVED***
        assert_raises(ValueError, np.cross, u, v, axisa=1, axisb=-4***REMOVED***
        # gh-5885
        u = np.ones((3, 4, 2***REMOVED******REMOVED***
        for axisc in range(-2, 2***REMOVED***:
            assert_equal(np.cross(u, u, axisc=axisc***REMOVED***.shape, (3, 4***REMOVED******REMOVED***


def test_outer_out_param(***REMOVED***:
    arr1 = np.ones((5,***REMOVED******REMOVED***
    arr2 = np.ones((2,***REMOVED******REMOVED***
    arr3 = np.linspace(-2, 2, 5***REMOVED***
    out1 = np.ndarray(shape=(5,5***REMOVED******REMOVED***
    out2 = np.ndarray(shape=(2, 5***REMOVED******REMOVED***
    res1 = np.outer(arr1, arr3, out1***REMOVED***
    assert_equal(res1, out1***REMOVED***
    assert_equal(np.outer(arr2, arr3, out2***REMOVED***, out2***REMOVED***


class TestRequire(object***REMOVED***:
    flag_names = ['C', 'C_CONTIGUOUS', 'CONTIGUOUS',
                  'F', 'F_CONTIGUOUS', 'FORTRAN',
                  'A', 'ALIGNED',
                  'W', 'WRITEABLE',
                  'O', 'OWNDATA'***REMOVED***

    def generate_all_false(self, dtype***REMOVED***:
        arr = np.zeros((2, 2***REMOVED***, [('junk', 'i1'***REMOVED***, ('a', dtype***REMOVED******REMOVED******REMOVED***
        arr.setflags(write=False***REMOVED***
        a = arr['a'***REMOVED***
        assert_(not a.flags['C'***REMOVED******REMOVED***
        assert_(not a.flags['F'***REMOVED******REMOVED***
        assert_(not a.flags['O'***REMOVED******REMOVED***
        assert_(not a.flags['W'***REMOVED******REMOVED***
        assert_(not a.flags['A'***REMOVED******REMOVED***
        return a

    def set_and_check_flag(self, flag, dtype, arr***REMOVED***:
        if dtype is None:
            dtype = arr.dtype
        b = np.require(arr, dtype, [flag***REMOVED******REMOVED***
        assert_(b.flags[flag***REMOVED******REMOVED***
        assert_(b.dtype == dtype***REMOVED***

        # a further call to np.require ought to return the same array
        # unless OWNDATA is specified.
        c = np.require(b, None, [flag***REMOVED******REMOVED***
        if flag[0***REMOVED*** != 'O':
            assert_(c is b***REMOVED***
        else:
            assert_(c.flags[flag***REMOVED******REMOVED***

    def test_require_each(self***REMOVED***:

        id = ['f8', 'i4'***REMOVED***
        fd = [None, 'f8', 'c16'***REMOVED***
        for idtype, fdtype, flag in itertools.product(id, fd, self.flag_names***REMOVED***:
            a = self.generate_all_false(idtype***REMOVED***
            yield self.set_and_check_flag, flag, fdtype,  a

    def test_unknown_requirement(self***REMOVED***:
        a = self.generate_all_false('f8'***REMOVED***
        assert_raises(KeyError, np.require, a, None, 'Q'***REMOVED***

    def test_non_array_input(self***REMOVED***:
        a = np.require([1, 2, 3, 4***REMOVED***, 'i4', ['C', 'A', 'O'***REMOVED******REMOVED***
        assert_(a.flags['O'***REMOVED******REMOVED***
        assert_(a.flags['C'***REMOVED******REMOVED***
        assert_(a.flags['A'***REMOVED******REMOVED***
        assert_(a.dtype == 'i4'***REMOVED***
        assert_equal(a, [1, 2, 3, 4***REMOVED******REMOVED***

    def test_C_and_F_simul(self***REMOVED***:
        a = self.generate_all_false('f8'***REMOVED***
        assert_raises(ValueError, np.require, a, None, ['C', 'F'***REMOVED******REMOVED***

    def test_ensure_array(self***REMOVED***:
        class ArraySubclass(np.ndarray***REMOVED***:
            pass

        a = ArraySubclass((2, 2***REMOVED******REMOVED***
        b = np.require(a, None, ['E'***REMOVED******REMOVED***
        assert_(type(b***REMOVED*** is np.ndarray***REMOVED***

    def test_preserve_subtype(self***REMOVED***:
        class ArraySubclass(np.ndarray***REMOVED***:
            pass

        for flag in self.flag_names:
            a = ArraySubclass((2, 2***REMOVED******REMOVED***
            yield self.set_and_check_flag, flag, None, a


class TestBroadcast(TestCase***REMOVED***:
    def test_broadcast_in_args(self***REMOVED***:
        # gh-5881
        arrs = [np.empty((6, 7***REMOVED******REMOVED***, np.empty((5, 6, 1***REMOVED******REMOVED***, np.empty((7,***REMOVED******REMOVED***,
                np.empty((5, 1, 7***REMOVED******REMOVED******REMOVED***
        mits = [np.broadcast(*arrs***REMOVED***,
                np.broadcast(np.broadcast(*arrs[:2***REMOVED******REMOVED***, np.broadcast(*arrs[2:***REMOVED******REMOVED******REMOVED***,
                np.broadcast(arrs[0***REMOVED***, np.broadcast(*arrs[1:-1***REMOVED******REMOVED***, arrs[-1***REMOVED******REMOVED******REMOVED***
        for mit in mits:
            assert_equal(mit.shape, (5, 6, 7***REMOVED******REMOVED***
            assert_equal(mit.nd, 3***REMOVED***
            assert_equal(mit.numiter, 4***REMOVED***
            for a, ia in zip(arrs, mit.iters***REMOVED***:
                assert_(a is ia.base***REMOVED***

    def test_broadcast_single_arg(self***REMOVED***:
        # gh-6899
        arrs = [np.empty((5, 6, 7***REMOVED******REMOVED******REMOVED***
        mit = np.broadcast(*arrs***REMOVED***
        assert_equal(mit.shape, (5, 6, 7***REMOVED******REMOVED***
        assert_equal(mit.nd, 3***REMOVED***
        assert_equal(mit.numiter, 1***REMOVED***
        assert_(arrs[0***REMOVED*** is mit.iters[0***REMOVED***.base***REMOVED***

    def test_number_of_arguments(self***REMOVED***:
        arr = np.empty((5,***REMOVED******REMOVED***
        for j in range(35***REMOVED***:
            arrs = [arr***REMOVED*** * j
            if j < 1 or j > 32:
                assert_raises(ValueError, np.broadcast, *arrs***REMOVED***
            else:
                mit = np.broadcast(*arrs***REMOVED***
                assert_equal(mit.numiter, j***REMOVED***


class TestKeepdims(TestCase***REMOVED***:

    class sub_array(np.ndarray***REMOVED***:
        def sum(self, axis=None, dtype=None, out=None***REMOVED***:
            return np.ndarray.sum(self, axis, dtype, out, keepdims=True***REMOVED***

    def test_raise(self***REMOVED***:
        sub_class = self.sub_array
        x = np.arange(30***REMOVED***.view(sub_class***REMOVED***
        assert_raises(TypeError, np.sum, x, keepdims=True***REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
