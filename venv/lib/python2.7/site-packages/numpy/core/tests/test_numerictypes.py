from __future__ import division, absolute_import, print_function

import sys

import numpy as np
from numpy.compat import asbytes, asunicode
from numpy.testing import (
    TestCase, run_module_suite, assert_, assert_equal
***REMOVED***

# This is the structure of the table used for plain objects:
#
# +-+-+-+
# |x|y|z|
# +-+-+-+

# Structure of a plain array description:
Pdescr = [
    ('x', 'i4', (2,***REMOVED******REMOVED***,
    ('y', 'f8', (2, 2***REMOVED******REMOVED***,
    ('z', 'u1'***REMOVED******REMOVED***

# A plain list of tuples with values for testing:
PbufferT = [
    # x     y                  z
    ([3, 2***REMOVED***, [[6., 4.***REMOVED***, [6., 4.***REMOVED******REMOVED***, 8***REMOVED***,
    ([4, 3***REMOVED***, [[7., 5.***REMOVED***, [7., 5.***REMOVED******REMOVED***, 9***REMOVED***,
    ***REMOVED***


# This is the structure of the table used for nested objects (DON'T PANIC!***REMOVED***:
#
# +-+---------------------------------+-----+----------+-+-+
# |x|Info                             |color|info      |y|z|
# | +-----+--+----------------+----+--+     +----+-----+ | |
# | |value|y2|Info2           |name|z2|     |Name|Value| | |
# | |     |  +----+-----+--+--+    |  |     |    |     | | |
# | |     |  |name|value|y3|z3|    |  |     |    |     | | |
# +-+-----+--+----+-----+--+--+----+--+-----+----+-----+-+-+
#

# The corresponding nested array description:
Ndescr = [
    ('x', 'i4', (2,***REMOVED******REMOVED***,
    ('Info', [
        ('value', 'c16'***REMOVED***,
        ('y2', 'f8'***REMOVED***,
        ('Info2', [
            ('name', 'S2'***REMOVED***,
            ('value', 'c16', (2,***REMOVED******REMOVED***,
            ('y3', 'f8', (2,***REMOVED******REMOVED***,
            ('z3', 'u4', (2,***REMOVED******REMOVED******REMOVED******REMOVED***,
        ('name', 'S2'***REMOVED***,
        ('z2', 'b1'***REMOVED******REMOVED******REMOVED***,
    ('color', 'S2'***REMOVED***,
    ('info', [
        ('Name', 'U8'***REMOVED***,
        ('Value', 'c16'***REMOVED******REMOVED******REMOVED***,
    ('y', 'f8', (2, 2***REMOVED******REMOVED***,
    ('z', 'u1'***REMOVED******REMOVED***

NbufferT = [
    # x     Info                                                color info        y                  z
    #       value y2 Info2                            name z2         Name Value
    #                name   value    y3       z3
    ([3, 2***REMOVED***, (6j, 6., (asbytes('nn'***REMOVED***, [6j, 4j***REMOVED***, [6., 4.***REMOVED***, [1, 2***REMOVED******REMOVED***, asbytes('NN'***REMOVED***, True***REMOVED***, asbytes('cc'***REMOVED***, (asunicode('NN'***REMOVED***, 6j***REMOVED***, [[6., 4.***REMOVED***, [6., 4.***REMOVED******REMOVED***, 8***REMOVED***,
    ([4, 3***REMOVED***, (7j, 7., (asbytes('oo'***REMOVED***, [7j, 5j***REMOVED***, [7., 5.***REMOVED***, [2, 1***REMOVED******REMOVED***, asbytes('OO'***REMOVED***, False***REMOVED***, asbytes('dd'***REMOVED***, (asunicode('OO'***REMOVED***, 7j***REMOVED***, [[7., 5.***REMOVED***, [7., 5.***REMOVED******REMOVED***, 9***REMOVED***,
    ***REMOVED***


byteorder = {'little':'<', 'big':'>'***REMOVED***[sys.byteorder***REMOVED***

def normalize_descr(descr***REMOVED***:
    "Normalize a description adding the platform byteorder."

    out = [***REMOVED***
    for item in descr:
        dtype = item[1***REMOVED***
        if isinstance(dtype, str***REMOVED***:
            if dtype[0***REMOVED*** not in ['|', '<', '>'***REMOVED***:
                onebyte = dtype[1:***REMOVED*** == "1"
                if onebyte or dtype[0***REMOVED*** in ['S', 'V', 'b'***REMOVED***:
                    dtype = "|" + dtype
                else:
                    dtype = byteorder + dtype
            if len(item***REMOVED*** > 2 and np.prod(item[2***REMOVED******REMOVED*** > 1:
                nitem = (item[0***REMOVED***, dtype, item[2***REMOVED******REMOVED***
            else:
                nitem = (item[0***REMOVED***, dtype***REMOVED***
            out.append(nitem***REMOVED***
        elif isinstance(item[1***REMOVED***, list***REMOVED***:
            l = [***REMOVED***
            for j in normalize_descr(item[1***REMOVED******REMOVED***:
                l.append(j***REMOVED***
            out.append((item[0***REMOVED***, l***REMOVED******REMOVED***
        else:
            raise ValueError("Expected a str or list and got %s" %
                             (type(item***REMOVED******REMOVED******REMOVED***
    return out


############################################################
#    Creation tests
############################################################

class create_zeros(object***REMOVED***:
    ***REMOVED***Check the creation of heterogeneous arrays zero-valued***REMOVED***

    def test_zeros0D(self***REMOVED***:
        ***REMOVED***Check creation of 0-dimensional objects***REMOVED***
        h = np.zeros((***REMOVED***, dtype=self._descr***REMOVED***
        self.assertTrue(normalize_descr(self._descr***REMOVED*** == h.dtype.descr***REMOVED***
        self.assertTrue(h.dtype.fields['x'***REMOVED***[0***REMOVED***.name[:4***REMOVED*** == 'void'***REMOVED***
        self.assertTrue(h.dtype.fields['x'***REMOVED***[0***REMOVED***.char == 'V'***REMOVED***
        self.assertTrue(h.dtype.fields['x'***REMOVED***[0***REMOVED***.type == np.void***REMOVED***
        # A small check that data is ok
        assert_equal(h['z'***REMOVED***, np.zeros((***REMOVED***, dtype='u1'***REMOVED******REMOVED***

    def test_zerosSD(self***REMOVED***:
        ***REMOVED***Check creation of single-dimensional objects***REMOVED***
        h = np.zeros((2,***REMOVED***, dtype=self._descr***REMOVED***
        self.assertTrue(normalize_descr(self._descr***REMOVED*** == h.dtype.descr***REMOVED***
        self.assertTrue(h.dtype['y'***REMOVED***.name[:4***REMOVED*** == 'void'***REMOVED***
        self.assertTrue(h.dtype['y'***REMOVED***.char == 'V'***REMOVED***
        self.assertTrue(h.dtype['y'***REMOVED***.type == np.void***REMOVED***
        # A small check that data is ok
        assert_equal(h['z'***REMOVED***, np.zeros((2,***REMOVED***, dtype='u1'***REMOVED******REMOVED***

    def test_zerosMD(self***REMOVED***:
        ***REMOVED***Check creation of multi-dimensional objects***REMOVED***
        h = np.zeros((2, 3***REMOVED***, dtype=self._descr***REMOVED***
        self.assertTrue(normalize_descr(self._descr***REMOVED*** == h.dtype.descr***REMOVED***
        self.assertTrue(h.dtype['z'***REMOVED***.name == 'uint8'***REMOVED***
        self.assertTrue(h.dtype['z'***REMOVED***.char == 'B'***REMOVED***
        self.assertTrue(h.dtype['z'***REMOVED***.type == np.uint8***REMOVED***
        # A small check that data is ok
        assert_equal(h['z'***REMOVED***, np.zeros((2, 3***REMOVED***, dtype='u1'***REMOVED******REMOVED***


class test_create_zeros_plain(create_zeros, TestCase***REMOVED***:
    ***REMOVED***Check the creation of heterogeneous arrays zero-valued (plain***REMOVED******REMOVED***
    _descr = Pdescr

class test_create_zeros_nested(create_zeros, TestCase***REMOVED***:
    ***REMOVED***Check the creation of heterogeneous arrays zero-valued (nested***REMOVED******REMOVED***
    _descr = Ndescr


class create_values(object***REMOVED***:
    ***REMOVED***Check the creation of heterogeneous arrays with values***REMOVED***

    def test_tuple(self***REMOVED***:
        ***REMOVED***Check creation from tuples***REMOVED***
        h = np.array(self._buffer, dtype=self._descr***REMOVED***
        self.assertTrue(normalize_descr(self._descr***REMOVED*** == h.dtype.descr***REMOVED***
        if self.multiple_rows:
            self.assertTrue(h.shape == (2,***REMOVED******REMOVED***
        else:
            self.assertTrue(h.shape == (***REMOVED******REMOVED***

    def test_list_of_tuple(self***REMOVED***:
        ***REMOVED***Check creation from list of tuples***REMOVED***
        h = np.array([self._buffer***REMOVED***, dtype=self._descr***REMOVED***
        self.assertTrue(normalize_descr(self._descr***REMOVED*** == h.dtype.descr***REMOVED***
        if self.multiple_rows:
            self.assertTrue(h.shape == (1, 2***REMOVED******REMOVED***
        else:
            self.assertTrue(h.shape == (1,***REMOVED******REMOVED***

    def test_list_of_list_of_tuple(self***REMOVED***:
        ***REMOVED***Check creation from list of list of tuples***REMOVED***
        h = np.array([[self._buffer***REMOVED******REMOVED***, dtype=self._descr***REMOVED***
        self.assertTrue(normalize_descr(self._descr***REMOVED*** == h.dtype.descr***REMOVED***
        if self.multiple_rows:
            self.assertTrue(h.shape == (1, 1, 2***REMOVED******REMOVED***
        else:
            self.assertTrue(h.shape == (1, 1***REMOVED******REMOVED***


class test_create_values_plain_single(create_values, TestCase***REMOVED***:
    ***REMOVED***Check the creation of heterogeneous arrays (plain, single row***REMOVED******REMOVED***
    _descr = Pdescr
    multiple_rows = 0
    _buffer = PbufferT[0***REMOVED***

class test_create_values_plain_multiple(create_values, TestCase***REMOVED***:
    ***REMOVED***Check the creation of heterogeneous arrays (plain, multiple rows***REMOVED******REMOVED***
    _descr = Pdescr
    multiple_rows = 1
    _buffer = PbufferT

class test_create_values_nested_single(create_values, TestCase***REMOVED***:
    ***REMOVED***Check the creation of heterogeneous arrays (nested, single row***REMOVED******REMOVED***
    _descr = Ndescr
    multiple_rows = 0
    _buffer = NbufferT[0***REMOVED***

class test_create_values_nested_multiple(create_values, TestCase***REMOVED***:
    ***REMOVED***Check the creation of heterogeneous arrays (nested, multiple rows***REMOVED******REMOVED***
    _descr = Ndescr
    multiple_rows = 1
    _buffer = NbufferT


############################################################
#    Reading tests
############################################################

class read_values_plain(object***REMOVED***:
    ***REMOVED***Check the reading of values in heterogeneous arrays (plain***REMOVED******REMOVED***

    def test_access_fields(self***REMOVED***:
        h = np.array(self._buffer, dtype=self._descr***REMOVED***
        if not self.multiple_rows:
            self.assertTrue(h.shape == (***REMOVED******REMOVED***
            assert_equal(h['x'***REMOVED***, np.array(self._buffer[0***REMOVED***, dtype='i4'***REMOVED******REMOVED***
            assert_equal(h['y'***REMOVED***, np.array(self._buffer[1***REMOVED***, dtype='f8'***REMOVED******REMOVED***
            assert_equal(h['z'***REMOVED***, np.array(self._buffer[2***REMOVED***, dtype='u1'***REMOVED******REMOVED***
        else:
            self.assertTrue(len(h***REMOVED*** == 2***REMOVED***
            assert_equal(h['x'***REMOVED***, np.array([self._buffer[0***REMOVED***[0***REMOVED***,
                                             self._buffer[1***REMOVED***[0***REMOVED******REMOVED***, dtype='i4'***REMOVED******REMOVED***
            assert_equal(h['y'***REMOVED***, np.array([self._buffer[0***REMOVED***[1***REMOVED***,
                                             self._buffer[1***REMOVED***[1***REMOVED******REMOVED***, dtype='f8'***REMOVED******REMOVED***
            assert_equal(h['z'***REMOVED***, np.array([self._buffer[0***REMOVED***[2***REMOVED***,
                                             self._buffer[1***REMOVED***[2***REMOVED******REMOVED***, dtype='u1'***REMOVED******REMOVED***


class test_read_values_plain_single(read_values_plain, TestCase***REMOVED***:
    ***REMOVED***Check the creation of heterogeneous arrays (plain, single row***REMOVED******REMOVED***
    _descr = Pdescr
    multiple_rows = 0
    _buffer = PbufferT[0***REMOVED***

class test_read_values_plain_multiple(read_values_plain, TestCase***REMOVED***:
    ***REMOVED***Check the values of heterogeneous arrays (plain, multiple rows***REMOVED******REMOVED***
    _descr = Pdescr
    multiple_rows = 1
    _buffer = PbufferT

class read_values_nested(object***REMOVED***:
    ***REMOVED***Check the reading of values in heterogeneous arrays (nested***REMOVED******REMOVED***

    def test_access_top_fields(self***REMOVED***:
        ***REMOVED***Check reading the top fields of a nested array***REMOVED***
        h = np.array(self._buffer, dtype=self._descr***REMOVED***
        if not self.multiple_rows:
            self.assertTrue(h.shape == (***REMOVED******REMOVED***
            assert_equal(h['x'***REMOVED***, np.array(self._buffer[0***REMOVED***, dtype='i4'***REMOVED******REMOVED***
            assert_equal(h['y'***REMOVED***, np.array(self._buffer[4***REMOVED***, dtype='f8'***REMOVED******REMOVED***
            assert_equal(h['z'***REMOVED***, np.array(self._buffer[5***REMOVED***, dtype='u1'***REMOVED******REMOVED***
        else:
            self.assertTrue(len(h***REMOVED*** == 2***REMOVED***
            assert_equal(h['x'***REMOVED***, np.array([self._buffer[0***REMOVED***[0***REMOVED***,
                                           self._buffer[1***REMOVED***[0***REMOVED******REMOVED***, dtype='i4'***REMOVED******REMOVED***
            assert_equal(h['y'***REMOVED***, np.array([self._buffer[0***REMOVED***[4***REMOVED***,
                                           self._buffer[1***REMOVED***[4***REMOVED******REMOVED***, dtype='f8'***REMOVED******REMOVED***
            assert_equal(h['z'***REMOVED***, np.array([self._buffer[0***REMOVED***[5***REMOVED***,
                                           self._buffer[1***REMOVED***[5***REMOVED******REMOVED***, dtype='u1'***REMOVED******REMOVED***

    def test_nested1_acessors(self***REMOVED***:
        ***REMOVED***Check reading the nested fields of a nested array (1st level***REMOVED******REMOVED***
        h = np.array(self._buffer, dtype=self._descr***REMOVED***
        if not self.multiple_rows:
            assert_equal(h['Info'***REMOVED***['value'***REMOVED***,
                         np.array(self._buffer[1***REMOVED***[0***REMOVED***, dtype='c16'***REMOVED******REMOVED***
            assert_equal(h['Info'***REMOVED***['y2'***REMOVED***,
                         np.array(self._buffer[1***REMOVED***[1***REMOVED***, dtype='f8'***REMOVED******REMOVED***
            assert_equal(h['info'***REMOVED***['Name'***REMOVED***,
                         np.array(self._buffer[3***REMOVED***[0***REMOVED***, dtype='U2'***REMOVED******REMOVED***
            assert_equal(h['info'***REMOVED***['Value'***REMOVED***,
                         np.array(self._buffer[3***REMOVED***[1***REMOVED***, dtype='c16'***REMOVED******REMOVED***
        else:
            assert_equal(h['Info'***REMOVED***['value'***REMOVED***,
                         np.array([self._buffer[0***REMOVED***[1***REMOVED***[0***REMOVED***,
                                self._buffer[1***REMOVED***[1***REMOVED***[0***REMOVED******REMOVED***,
                                dtype='c16'***REMOVED******REMOVED***
            assert_equal(h['Info'***REMOVED***['y2'***REMOVED***,
                         np.array([self._buffer[0***REMOVED***[1***REMOVED***[1***REMOVED***,
                                self._buffer[1***REMOVED***[1***REMOVED***[1***REMOVED******REMOVED***,
                                dtype='f8'***REMOVED******REMOVED***
            assert_equal(h['info'***REMOVED***['Name'***REMOVED***,
                         np.array([self._buffer[0***REMOVED***[3***REMOVED***[0***REMOVED***,
                                self._buffer[1***REMOVED***[3***REMOVED***[0***REMOVED******REMOVED***,
                               dtype='U2'***REMOVED******REMOVED***
            assert_equal(h['info'***REMOVED***['Value'***REMOVED***,
                         np.array([self._buffer[0***REMOVED***[3***REMOVED***[1***REMOVED***,
                                self._buffer[1***REMOVED***[3***REMOVED***[1***REMOVED******REMOVED***,
                               dtype='c16'***REMOVED******REMOVED***

    def test_nested2_acessors(self***REMOVED***:
        ***REMOVED***Check reading the nested fields of a nested array (2nd level***REMOVED******REMOVED***
        h = np.array(self._buffer, dtype=self._descr***REMOVED***
        if not self.multiple_rows:
            assert_equal(h['Info'***REMOVED***['Info2'***REMOVED***['value'***REMOVED***,
                         np.array(self._buffer[1***REMOVED***[2***REMOVED***[1***REMOVED***, dtype='c16'***REMOVED******REMOVED***
            assert_equal(h['Info'***REMOVED***['Info2'***REMOVED***['z3'***REMOVED***,
                         np.array(self._buffer[1***REMOVED***[2***REMOVED***[3***REMOVED***, dtype='u4'***REMOVED******REMOVED***
        else:
            assert_equal(h['Info'***REMOVED***['Info2'***REMOVED***['value'***REMOVED***,
                         np.array([self._buffer[0***REMOVED***[1***REMOVED***[2***REMOVED***[1***REMOVED***,
                                self._buffer[1***REMOVED***[1***REMOVED***[2***REMOVED***[1***REMOVED******REMOVED***,
                               dtype='c16'***REMOVED******REMOVED***
            assert_equal(h['Info'***REMOVED***['Info2'***REMOVED***['z3'***REMOVED***,
                         np.array([self._buffer[0***REMOVED***[1***REMOVED***[2***REMOVED***[3***REMOVED***,
                                self._buffer[1***REMOVED***[1***REMOVED***[2***REMOVED***[3***REMOVED******REMOVED***,
                               dtype='u4'***REMOVED******REMOVED***

    def test_nested1_descriptor(self***REMOVED***:
        ***REMOVED***Check access nested descriptors of a nested array (1st level***REMOVED******REMOVED***
        h = np.array(self._buffer, dtype=self._descr***REMOVED***
        self.assertTrue(h.dtype['Info'***REMOVED***['value'***REMOVED***.name == 'complex128'***REMOVED***
        self.assertTrue(h.dtype['Info'***REMOVED***['y2'***REMOVED***.name == 'float64'***REMOVED***
        if sys.version_info[0***REMOVED*** >= 3:
            self.assertTrue(h.dtype['info'***REMOVED***['Name'***REMOVED***.name == 'str256'***REMOVED***
        else:
            self.assertTrue(h.dtype['info'***REMOVED***['Name'***REMOVED***.name == 'unicode256'***REMOVED***
        self.assertTrue(h.dtype['info'***REMOVED***['Value'***REMOVED***.name == 'complex128'***REMOVED***

    def test_nested2_descriptor(self***REMOVED***:
        ***REMOVED***Check access nested descriptors of a nested array (2nd level***REMOVED******REMOVED***
        h = np.array(self._buffer, dtype=self._descr***REMOVED***
        self.assertTrue(h.dtype['Info'***REMOVED***['Info2'***REMOVED***['value'***REMOVED***.name == 'void256'***REMOVED***
        self.assertTrue(h.dtype['Info'***REMOVED***['Info2'***REMOVED***['z3'***REMOVED***.name == 'void64'***REMOVED***


class test_read_values_nested_single(read_values_nested, TestCase***REMOVED***:
    ***REMOVED***Check the values of heterogeneous arrays (nested, single row***REMOVED******REMOVED***
    _descr = Ndescr
    multiple_rows = False
    _buffer = NbufferT[0***REMOVED***

class test_read_values_nested_multiple(read_values_nested, TestCase***REMOVED***:
    ***REMOVED***Check the values of heterogeneous arrays (nested, multiple rows***REMOVED******REMOVED***
    _descr = Ndescr
    multiple_rows = True
    _buffer = NbufferT

class TestEmptyField(TestCase***REMOVED***:
    def test_assign(self***REMOVED***:
        a = np.arange(10, dtype=np.float32***REMOVED***
        a.dtype = [("int",   "<0i4"***REMOVED***, ("float", "<2f4"***REMOVED******REMOVED***
        assert_(a['int'***REMOVED***.shape == (5, 0***REMOVED******REMOVED***
        assert_(a['float'***REMOVED***.shape == (5, 2***REMOVED******REMOVED***

class TestCommonType(TestCase***REMOVED***:
    def test_scalar_loses1(self***REMOVED***:
        res = np.find_common_type(['f4', 'f4', 'i2'***REMOVED***, ['f8'***REMOVED******REMOVED***
        assert_(res == 'f4'***REMOVED***

    def test_scalar_loses2(self***REMOVED***:
        res = np.find_common_type(['f4', 'f4'***REMOVED***, ['i8'***REMOVED******REMOVED***
        assert_(res == 'f4'***REMOVED***

    def test_scalar_wins(self***REMOVED***:
        res = np.find_common_type(['f4', 'f4', 'i2'***REMOVED***, ['c8'***REMOVED******REMOVED***
        assert_(res == 'c8'***REMOVED***

    def test_scalar_wins2(self***REMOVED***:
        res = np.find_common_type(['u4', 'i4', 'i4'***REMOVED***, ['f4'***REMOVED******REMOVED***
        assert_(res == 'f8'***REMOVED***

    def test_scalar_wins3(self***REMOVED***:  # doesn't go up to 'f16' on purpose
        res = np.find_common_type(['u8', 'i8', 'i8'***REMOVED***, ['f8'***REMOVED******REMOVED***
        assert_(res == 'f8'***REMOVED***

class TestMultipleFields(TestCase***REMOVED***:
    def setUp(self***REMOVED***:
        self.ary = np.array([(1, 2, 3, 4***REMOVED***, (5, 6, 7, 8***REMOVED******REMOVED***, dtype='i4,f4,i2,c8'***REMOVED***

    def _bad_call(self***REMOVED***:
        return self.ary['f0', 'f1'***REMOVED***

    def test_no_tuple(self***REMOVED***:
        self.assertRaises(IndexError, self._bad_call***REMOVED***

    def test_return(self***REMOVED***:
        res = self.ary[['f0', 'f2'***REMOVED******REMOVED***.tolist(***REMOVED***
        assert_(res == [(1, 3***REMOVED***, (5, 7***REMOVED******REMOVED******REMOVED***

if __name__ == "__main__":
    run_module_suite(***REMOVED***
