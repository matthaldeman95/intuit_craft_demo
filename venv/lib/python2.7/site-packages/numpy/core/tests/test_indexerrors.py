from __future__ import division, absolute_import, print_function

import numpy as np
from numpy.testing import TestCase, run_module_suite, assert_raises

class TestIndexErrors(TestCase***REMOVED***:
    '''Tests to exercise indexerrors not covered by other tests.'''

    def test_arraytypes_fasttake(self***REMOVED***:
        'take from a 0-length dimension'
        x = np.empty((2, 3, 0, 4***REMOVED******REMOVED***
        assert_raises(IndexError, x.take, [0***REMOVED***, axis=2***REMOVED***
        assert_raises(IndexError, x.take, [1***REMOVED***, axis=2***REMOVED***
        assert_raises(IndexError, x.take, [0***REMOVED***, axis=2, mode='wrap'***REMOVED***
        assert_raises(IndexError, x.take, [0***REMOVED***, axis=2, mode='clip'***REMOVED***

    def test_take_from_object(self***REMOVED***:
        # Check exception taking from object array
        d = np.zeros(5, dtype=object***REMOVED***
        assert_raises(IndexError, d.take, [6***REMOVED******REMOVED***

        # Check exception taking from 0-d array
        d = np.zeros((5, 0***REMOVED***, dtype=object***REMOVED***
        assert_raises(IndexError, d.take, [1***REMOVED***, axis=1***REMOVED***
        assert_raises(IndexError, d.take, [0***REMOVED***, axis=1***REMOVED***
        assert_raises(IndexError, d.take, [0***REMOVED******REMOVED***
        assert_raises(IndexError, d.take, [0***REMOVED***, mode='wrap'***REMOVED***
        assert_raises(IndexError, d.take, [0***REMOVED***, mode='clip'***REMOVED***

    def test_multiindex_exceptions(self***REMOVED***:
        a = np.empty(5, dtype=object***REMOVED***
        assert_raises(IndexError, a.item, 20***REMOVED***
        a = np.empty((5, 0***REMOVED***, dtype=object***REMOVED***
        assert_raises(IndexError, a.item, (0, 0***REMOVED******REMOVED***

        a = np.empty(5, dtype=object***REMOVED***
        assert_raises(IndexError, a.itemset, 20, 0***REMOVED***
        a = np.empty((5, 0***REMOVED***, dtype=object***REMOVED***
        assert_raises(IndexError, a.itemset, (0, 0***REMOVED***, 0***REMOVED***

    def test_put_exceptions(self***REMOVED***:
        a = np.zeros((5, 5***REMOVED******REMOVED***
        assert_raises(IndexError, a.put, 100, 0***REMOVED***
        a = np.zeros((5, 5***REMOVED***, dtype=object***REMOVED***
        assert_raises(IndexError, a.put, 100, 0***REMOVED***
        a = np.zeros((5, 5, 0***REMOVED******REMOVED***
        assert_raises(IndexError, a.put, 100, 0***REMOVED***
        a = np.zeros((5, 5, 0***REMOVED***, dtype=object***REMOVED***
        assert_raises(IndexError, a.put, 100, 0***REMOVED***

    def test_iterators_exceptions(self***REMOVED***:
        "cases in iterators.c"
        def assign(obj, ind, val***REMOVED***:
            obj[ind***REMOVED*** = val

        a = np.zeros([1, 2, 3***REMOVED******REMOVED***
        assert_raises(IndexError, lambda: a[0, 5, None, 2***REMOVED******REMOVED***
        assert_raises(IndexError, lambda: a[0, 5, 0, 2***REMOVED******REMOVED***
        assert_raises(IndexError, lambda: assign(a, (0, 5, None, 2***REMOVED***, 1***REMOVED******REMOVED***
        assert_raises(IndexError, lambda: assign(a, (0, 5, 0, 2***REMOVED***,  1***REMOVED******REMOVED***

        a = np.zeros([1, 0, 3***REMOVED******REMOVED***
        assert_raises(IndexError, lambda: a[0, 0, None, 2***REMOVED******REMOVED***
        assert_raises(IndexError, lambda: assign(a, (0, 0, None, 2***REMOVED***, 1***REMOVED******REMOVED***

        a = np.zeros([1, 2, 3***REMOVED******REMOVED***
        assert_raises(IndexError, lambda: a.flat[10***REMOVED******REMOVED***
        assert_raises(IndexError, lambda: assign(a.flat, 10, 5***REMOVED******REMOVED***
        a = np.zeros([1, 0, 3***REMOVED******REMOVED***
        assert_raises(IndexError, lambda: a.flat[10***REMOVED******REMOVED***
        assert_raises(IndexError, lambda: assign(a.flat, 10, 5***REMOVED******REMOVED***

        a = np.zeros([1, 2, 3***REMOVED******REMOVED***
        assert_raises(IndexError, lambda: a.flat[np.array(10***REMOVED******REMOVED******REMOVED***
        assert_raises(IndexError, lambda: assign(a.flat, np.array(10***REMOVED***, 5***REMOVED******REMOVED***
        a = np.zeros([1, 0, 3***REMOVED******REMOVED***
        assert_raises(IndexError, lambda: a.flat[np.array(10***REMOVED******REMOVED******REMOVED***
        assert_raises(IndexError, lambda: assign(a.flat, np.array(10***REMOVED***, 5***REMOVED******REMOVED***

        a = np.zeros([1, 2, 3***REMOVED******REMOVED***
        assert_raises(IndexError, lambda: a.flat[np.array([10***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_raises(IndexError, lambda: assign(a.flat, np.array([10***REMOVED******REMOVED***, 5***REMOVED******REMOVED***
        a = np.zeros([1, 0, 3***REMOVED******REMOVED***
        assert_raises(IndexError, lambda: a.flat[np.array([10***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_raises(IndexError, lambda: assign(a.flat, np.array([10***REMOVED******REMOVED***, 5***REMOVED******REMOVED***

    def test_mapping(self***REMOVED***:
        "cases from mapping.c"

        def assign(obj, ind, val***REMOVED***:
            obj[ind***REMOVED*** = val

        a = np.zeros((0, 10***REMOVED******REMOVED***
        assert_raises(IndexError, lambda: a[12***REMOVED******REMOVED***

        a = np.zeros((3, 5***REMOVED******REMOVED***
        assert_raises(IndexError, lambda: a[(10, 20***REMOVED******REMOVED******REMOVED***
        assert_raises(IndexError, lambda: assign(a, (10, 20***REMOVED***, 1***REMOVED******REMOVED***
        a = np.zeros((3, 0***REMOVED******REMOVED***
        assert_raises(IndexError, lambda: a[(1, 0***REMOVED******REMOVED******REMOVED***
        assert_raises(IndexError, lambda: assign(a, (1, 0***REMOVED***, 1***REMOVED******REMOVED***

        a = np.zeros((10,***REMOVED******REMOVED***
        assert_raises(IndexError, lambda: assign(a, 10, 1***REMOVED******REMOVED***
        a = np.zeros((0,***REMOVED******REMOVED***
        assert_raises(IndexError, lambda: assign(a, 10, 1***REMOVED******REMOVED***

        a = np.zeros((3, 5***REMOVED******REMOVED***
        assert_raises(IndexError, lambda: a[(1, [1, 20***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_raises(IndexError, lambda: assign(a, (1, [1, 20***REMOVED******REMOVED***, 1***REMOVED******REMOVED***
        a = np.zeros((3, 0***REMOVED******REMOVED***
        assert_raises(IndexError, lambda: a[(1, [0, 1***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_raises(IndexError, lambda: assign(a, (1, [0, 1***REMOVED******REMOVED***, 1***REMOVED******REMOVED***

    def test_methods(self***REMOVED***:
        "cases from methods.c"

        a = np.zeros((3, 3***REMOVED******REMOVED***
        assert_raises(IndexError, lambda: a.item(100***REMOVED******REMOVED***
        assert_raises(IndexError, lambda: a.itemset(100, 1***REMOVED******REMOVED***
        a = np.zeros((0, 3***REMOVED******REMOVED***
        assert_raises(IndexError, lambda: a.item(100***REMOVED******REMOVED***
        assert_raises(IndexError, lambda: a.itemset(100, 1***REMOVED******REMOVED***

if __name__ == "__main__":
    run_module_suite(***REMOVED***
