from __future__ import division, absolute_import, print_function

import sys

import numpy as np
from numpy.core.test_rational import rational
from numpy.testing import (
    TestCase, run_module_suite, assert_, assert_equal, assert_raises,
    dec
***REMOVED***

def assert_dtype_equal(a, b***REMOVED***:
    assert_equal(a, b***REMOVED***
    assert_equal(hash(a***REMOVED***, hash(b***REMOVED***,
                 "two equivalent types do not hash to the same value !"***REMOVED***

def assert_dtype_not_equal(a, b***REMOVED***:
    assert_(a != b***REMOVED***
    assert_(hash(a***REMOVED*** != hash(b***REMOVED***,
            "two different types hash to the same value !"***REMOVED***

class TestBuiltin(TestCase***REMOVED***:
    def test_run(self***REMOVED***:
        ***REMOVED***Only test hash runs at all.***REMOVED***
        for t in [np.int, np.float, np.complex, np.int32, np.str, np.object,
                np.unicode***REMOVED***:
            dt = np.dtype(t***REMOVED***
            hash(dt***REMOVED***

    def test_dtype(self***REMOVED***:
        # Make sure equivalent byte order char hash the same (e.g. < and = on
        # little endian***REMOVED***
        for t in [np.int, np.float***REMOVED***:
            dt = np.dtype(t***REMOVED***
            dt2 = dt.newbyteorder("<"***REMOVED***
            dt3 = dt.newbyteorder(">"***REMOVED***
            if dt == dt2:
                self.assertTrue(dt.byteorder != dt2.byteorder, "bogus test"***REMOVED***
                assert_dtype_equal(dt, dt2***REMOVED***
            else:
                self.assertTrue(dt.byteorder != dt3.byteorder, "bogus test"***REMOVED***
                assert_dtype_equal(dt, dt3***REMOVED***

    def test_equivalent_dtype_hashing(self***REMOVED***:
        # Make sure equivalent dtypes with different type num hash equal
        uintp = np.dtype(np.uintp***REMOVED***
        if uintp.itemsize == 4:
            left = uintp
            right = np.dtype(np.uint32***REMOVED***
        else:
            left = uintp
            right = np.dtype(np.ulonglong***REMOVED***
        self.assertTrue(left == right***REMOVED***
        self.assertTrue(hash(left***REMOVED*** == hash(right***REMOVED******REMOVED***

    def test_invalid_types(self***REMOVED***:
        # Make sure invalid type strings raise an error

        assert_raises(TypeError, np.dtype, 'O3'***REMOVED***
        assert_raises(TypeError, np.dtype, 'O5'***REMOVED***
        assert_raises(TypeError, np.dtype, 'O7'***REMOVED***
        assert_raises(TypeError, np.dtype, 'b3'***REMOVED***
        assert_raises(TypeError, np.dtype, 'h4'***REMOVED***
        assert_raises(TypeError, np.dtype, 'I5'***REMOVED***
        assert_raises(TypeError, np.dtype, 'e3'***REMOVED***
        assert_raises(TypeError, np.dtype, 'f5'***REMOVED***

        if np.dtype('g'***REMOVED***.itemsize == 8 or np.dtype('g'***REMOVED***.itemsize == 16:
            assert_raises(TypeError, np.dtype, 'g12'***REMOVED***
        elif np.dtype('g'***REMOVED***.itemsize == 12:
            assert_raises(TypeError, np.dtype, 'g16'***REMOVED***

        if np.dtype('l'***REMOVED***.itemsize == 8:
            assert_raises(TypeError, np.dtype, 'l4'***REMOVED***
            assert_raises(TypeError, np.dtype, 'L4'***REMOVED***
        else:
            assert_raises(TypeError, np.dtype, 'l8'***REMOVED***
            assert_raises(TypeError, np.dtype, 'L8'***REMOVED***

        if np.dtype('q'***REMOVED***.itemsize == 8:
            assert_raises(TypeError, np.dtype, 'q4'***REMOVED***
            assert_raises(TypeError, np.dtype, 'Q4'***REMOVED***
        else:
            assert_raises(TypeError, np.dtype, 'q8'***REMOVED***
            assert_raises(TypeError, np.dtype, 'Q8'***REMOVED***

    def test_bad_param(self***REMOVED***:
        # Can't give a size that's too small
        assert_raises(ValueError, np.dtype,
                    ***REMOVED***'names':['f0', 'f1'***REMOVED***,
                         'formats':['i4', 'i1'***REMOVED***,
                         'offsets':[0, 4***REMOVED***,
                         'itemsize':4***REMOVED******REMOVED***
        # If alignment is enabled, the alignment (4***REMOVED*** must divide the itemsize
        assert_raises(ValueError, np.dtype,
                    ***REMOVED***'names':['f0', 'f1'***REMOVED***,
                         'formats':['i4', 'i1'***REMOVED***,
                         'offsets':[0, 4***REMOVED***,
                         'itemsize':9***REMOVED***, align=True***REMOVED***
        # If alignment is enabled, the individual fields must be aligned
        assert_raises(ValueError, np.dtype,
                    ***REMOVED***'names':['f0', 'f1'***REMOVED***,
                         'formats':['i1', 'f4'***REMOVED***,
                         'offsets':[0, 2***REMOVED******REMOVED***, align=True***REMOVED***

class TestRecord(TestCase***REMOVED***:
    def test_equivalent_record(self***REMOVED***:
        ***REMOVED***Test whether equivalent record dtypes hash the same.***REMOVED***
        a = np.dtype([('yo', np.int***REMOVED******REMOVED******REMOVED***
        b = np.dtype([('yo', np.int***REMOVED******REMOVED******REMOVED***
        assert_dtype_equal(a, b***REMOVED***

    def test_different_names(self***REMOVED***:
        # In theory, they may hash the same (collision***REMOVED*** ?
        a = np.dtype([('yo', np.int***REMOVED******REMOVED******REMOVED***
        b = np.dtype([('ye', np.int***REMOVED******REMOVED******REMOVED***
        assert_dtype_not_equal(a, b***REMOVED***

    def test_different_titles(self***REMOVED***:
        # In theory, they may hash the same (collision***REMOVED*** ?
        a = np.dtype({'names': ['r', 'b'***REMOVED***,
                      'formats': ['u1', 'u1'***REMOVED***,
                      'titles': ['Red pixel', 'Blue pixel'***REMOVED******REMOVED******REMOVED***
        b = np.dtype({'names': ['r', 'b'***REMOVED***,
                      'formats': ['u1', 'u1'***REMOVED***,
                      'titles': ['RRed pixel', 'Blue pixel'***REMOVED******REMOVED******REMOVED***
        assert_dtype_not_equal(a, b***REMOVED***

    def test_mutate(self***REMOVED***:
        # Mutating a dtype should reset the cached hash value
        a = np.dtype([('yo', np.int***REMOVED******REMOVED******REMOVED***
        b = np.dtype([('yo', np.int***REMOVED******REMOVED******REMOVED***
        c = np.dtype([('ye', np.int***REMOVED******REMOVED******REMOVED***
        assert_dtype_equal(a, b***REMOVED***
        assert_dtype_not_equal(a, c***REMOVED***
        a.names = ['ye'***REMOVED***
        assert_dtype_equal(a, c***REMOVED***
        assert_dtype_not_equal(a, b***REMOVED***
        state = b.__reduce__(***REMOVED***[2***REMOVED***
        a.__setstate__(state***REMOVED***
        assert_dtype_equal(a, b***REMOVED***
        assert_dtype_not_equal(a, c***REMOVED***

    def test_not_lists(self***REMOVED***:
        ***REMOVED***Test if an appropriate exception is raised when passing bad values to
        the dtype constructor.
        ***REMOVED***
        self.assertRaises(TypeError, np.dtype,
            dict(names=set(['A', 'B'***REMOVED******REMOVED***, formats=['f8', 'i4'***REMOVED******REMOVED******REMOVED***
        self.assertRaises(TypeError, np.dtype,
            dict(names=['A', 'B'***REMOVED***, formats=set(['f8', 'i4'***REMOVED******REMOVED******REMOVED******REMOVED***

    def test_aligned_size(self***REMOVED***:
        # Check that structured dtypes get padded to an aligned size
        dt = np.dtype('i4, i1', align=True***REMOVED***
        assert_equal(dt.itemsize, 8***REMOVED***
        dt = np.dtype([('f0', 'i4'***REMOVED***, ('f1', 'i1'***REMOVED******REMOVED***, align=True***REMOVED***
        assert_equal(dt.itemsize, 8***REMOVED***
        dt = np.dtype({'names':['f0', 'f1'***REMOVED***,
                       'formats':['i4', 'u1'***REMOVED***,
                       'offsets':[0, 4***REMOVED******REMOVED***, align=True***REMOVED***
        assert_equal(dt.itemsize, 8***REMOVED***
        dt = np.dtype({'f0': ('i4', 0***REMOVED***, 'f1':('u1', 4***REMOVED******REMOVED***, align=True***REMOVED***
        assert_equal(dt.itemsize, 8***REMOVED***
        # Nesting should preserve that alignment
        dt1 = np.dtype([('f0', 'i4'***REMOVED***,
                       ('f1', [('f1', 'i1'***REMOVED***, ('f2', 'i4'***REMOVED***, ('f3', 'i1'***REMOVED******REMOVED******REMOVED***,
                       ('f2', 'i1'***REMOVED******REMOVED***, align=True***REMOVED***
        assert_equal(dt1.itemsize, 20***REMOVED***
        dt2 = np.dtype({'names':['f0', 'f1', 'f2'***REMOVED***,
                       'formats':['i4',
                                  [('f1', 'i1'***REMOVED***, ('f2', 'i4'***REMOVED***, ('f3', 'i1'***REMOVED******REMOVED***,
                                  'i1'***REMOVED***,
                       'offsets':[0, 4, 16***REMOVED******REMOVED***, align=True***REMOVED***
        assert_equal(dt2.itemsize, 20***REMOVED***
        dt3 = np.dtype({'f0': ('i4', 0***REMOVED***,
                       'f1': ([('f1', 'i1'***REMOVED***, ('f2', 'i4'***REMOVED***, ('f3', 'i1'***REMOVED******REMOVED***, 4***REMOVED***,
                       'f2': ('i1', 16***REMOVED******REMOVED***, align=True***REMOVED***
        assert_equal(dt3.itemsize, 20***REMOVED***
        assert_equal(dt1, dt2***REMOVED***
        assert_equal(dt2, dt3***REMOVED***
        # Nesting should preserve packing
        dt1 = np.dtype([('f0', 'i4'***REMOVED***,
                       ('f1', [('f1', 'i1'***REMOVED***, ('f2', 'i4'***REMOVED***, ('f3', 'i1'***REMOVED******REMOVED******REMOVED***,
                       ('f2', 'i1'***REMOVED******REMOVED***, align=False***REMOVED***
        assert_equal(dt1.itemsize, 11***REMOVED***
        dt2 = np.dtype({'names':['f0', 'f1', 'f2'***REMOVED***,
                       'formats':['i4',
                                  [('f1', 'i1'***REMOVED***, ('f2', 'i4'***REMOVED***, ('f3', 'i1'***REMOVED******REMOVED***,
                                  'i1'***REMOVED***,
                       'offsets':[0, 4, 10***REMOVED******REMOVED***, align=False***REMOVED***
        assert_equal(dt2.itemsize, 11***REMOVED***
        dt3 = np.dtype({'f0': ('i4', 0***REMOVED***,
                       'f1': ([('f1', 'i1'***REMOVED***, ('f2', 'i4'***REMOVED***, ('f3', 'i1'***REMOVED******REMOVED***, 4***REMOVED***,
                       'f2': ('i1', 10***REMOVED******REMOVED***, align=False***REMOVED***
        assert_equal(dt3.itemsize, 11***REMOVED***
        assert_equal(dt1, dt2***REMOVED***
        assert_equal(dt2, dt3***REMOVED***

    def test_union_struct(self***REMOVED***:
        # Should be able to create union dtypes
        dt = np.dtype({'names':['f0', 'f1', 'f2'***REMOVED***, 'formats':['<u4', '<u2', '<u2'***REMOVED***,
                        'offsets':[0, 0, 2***REMOVED******REMOVED***, align=True***REMOVED***
        assert_equal(dt.itemsize, 4***REMOVED***
        a = np.array([3***REMOVED***, dtype='<u4'***REMOVED***.view(dt***REMOVED***
        a['f1'***REMOVED*** = 10
        a['f2'***REMOVED*** = 36
        assert_equal(a['f0'***REMOVED***, 10 + 36*256*256***REMOVED***
        # Should be able to specify fields out of order
        dt = np.dtype({'names':['f0', 'f1', 'f2'***REMOVED***, 'formats':['<u4', '<u2', '<u2'***REMOVED***,
                        'offsets':[4, 0, 2***REMOVED******REMOVED***, align=True***REMOVED***
        assert_equal(dt.itemsize, 8***REMOVED***
        dt2 = np.dtype({'names':['f2', 'f0', 'f1'***REMOVED***,
                        'formats':['<u2', '<u4', '<u2'***REMOVED***,
                        'offsets':[2, 4, 0***REMOVED******REMOVED***, align=True***REMOVED***
        vals = [(0, 1, 2***REMOVED***, (3, -1, 4***REMOVED******REMOVED***
        vals2 = [(2, 0, 1***REMOVED***, (4, 3, -1***REMOVED******REMOVED***
        a = np.array(vals, dt***REMOVED***
        b = np.array(vals2, dt2***REMOVED***
        assert_equal(a.astype(dt2***REMOVED***, b***REMOVED***
        assert_equal(b.astype(dt***REMOVED***, a***REMOVED***
        assert_equal(a.view(dt2***REMOVED***, b***REMOVED***
        assert_equal(b.view(dt***REMOVED***, a***REMOVED***
        # Should not be able to overlap objects with other types
        assert_raises(TypeError, np.dtype,
            ***REMOVED***'names':['f0', 'f1'***REMOVED***,
                 'formats':['O', 'i1'***REMOVED***,
                 'offsets':[0, 2***REMOVED******REMOVED******REMOVED***
        assert_raises(TypeError, np.dtype,
            ***REMOVED***'names':['f0', 'f1'***REMOVED***,
                 'formats':['i4', 'O'***REMOVED***,
                 'offsets':[0, 3***REMOVED******REMOVED******REMOVED***
        assert_raises(TypeError, np.dtype,
            ***REMOVED***'names':['f0', 'f1'***REMOVED***,
                 'formats':[[('a', 'O'***REMOVED******REMOVED***, 'i1'***REMOVED***,
                 'offsets':[0, 2***REMOVED******REMOVED******REMOVED***
        assert_raises(TypeError, np.dtype,
            ***REMOVED***'names':['f0', 'f1'***REMOVED***,
                 'formats':['i4', [('a', 'O'***REMOVED******REMOVED******REMOVED***,
                 'offsets':[0, 3***REMOVED******REMOVED******REMOVED***
        # Out of order should still be ok, however
        dt = np.dtype({'names':['f0', 'f1'***REMOVED***,
                       'formats':['i1', 'O'***REMOVED***,
                       'offsets':[np.dtype('intp'***REMOVED***.itemsize, 0***REMOVED******REMOVED******REMOVED***

    def test_comma_datetime(self***REMOVED***:
        dt = np.dtype('M8[D***REMOVED***,datetime64[Y***REMOVED***,i8'***REMOVED***
        assert_equal(dt, np.dtype([('f0', 'M8[D***REMOVED***'***REMOVED***,
                                   ('f1', 'datetime64[Y***REMOVED***'***REMOVED***,
                                   ('f2', 'i8'***REMOVED******REMOVED******REMOVED******REMOVED***

    def test_from_dictproxy(self***REMOVED***:
        # Tests for PR #5920
        dt = np.dtype({'names': ['a', 'b'***REMOVED***, 'formats': ['i4', 'f4'***REMOVED******REMOVED******REMOVED***
        assert_dtype_equal(dt, np.dtype(dt.fields***REMOVED******REMOVED***
        dt2 = np.dtype((np.void, dt.fields***REMOVED******REMOVED***
        assert_equal(dt2.fields, dt.fields***REMOVED***

    def test_bool_commastring(self***REMOVED***:
        d = np.dtype('?,?,?'***REMOVED***  # raises?
        assert_equal(len(d.names***REMOVED***, 3***REMOVED***
        for n in d.names:
            assert_equal(d.fields[n***REMOVED***[0***REMOVED***, np.dtype('?'***REMOVED******REMOVED***


class TestSubarray(TestCase***REMOVED***:
    def test_single_subarray(self***REMOVED***:
        a = np.dtype((np.int, (2***REMOVED******REMOVED******REMOVED***
        b = np.dtype((np.int, (2,***REMOVED******REMOVED******REMOVED***
        assert_dtype_equal(a, b***REMOVED***

        assert_equal(type(a.subdtype[1***REMOVED******REMOVED***, tuple***REMOVED***
        assert_equal(type(b.subdtype[1***REMOVED******REMOVED***, tuple***REMOVED***

    def test_equivalent_record(self***REMOVED***:
        ***REMOVED***Test whether equivalent subarray dtypes hash the same.***REMOVED***
        a = np.dtype((np.int, (2, 3***REMOVED******REMOVED******REMOVED***
        b = np.dtype((np.int, (2, 3***REMOVED******REMOVED******REMOVED***
        assert_dtype_equal(a, b***REMOVED***

    def test_nonequivalent_record(self***REMOVED***:
        ***REMOVED***Test whether different subarray dtypes hash differently.***REMOVED***
        a = np.dtype((np.int, (2, 3***REMOVED******REMOVED******REMOVED***
        b = np.dtype((np.int, (3, 2***REMOVED******REMOVED******REMOVED***
        assert_dtype_not_equal(a, b***REMOVED***

        a = np.dtype((np.int, (2, 3***REMOVED******REMOVED******REMOVED***
        b = np.dtype((np.int, (2, 2***REMOVED******REMOVED******REMOVED***
        assert_dtype_not_equal(a, b***REMOVED***

        a = np.dtype((np.int, (1, 2, 3***REMOVED******REMOVED******REMOVED***
        b = np.dtype((np.int, (1, 2***REMOVED******REMOVED******REMOVED***
        assert_dtype_not_equal(a, b***REMOVED***

    def test_shape_equal(self***REMOVED***:
        ***REMOVED***Test some data types that are equal***REMOVED***
        assert_dtype_equal(np.dtype('f8'***REMOVED***, np.dtype(('f8', tuple(***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_dtype_equal(np.dtype('f8'***REMOVED***, np.dtype(('f8', 1***REMOVED******REMOVED******REMOVED***
        assert_dtype_equal(np.dtype((np.int, 2***REMOVED******REMOVED***, np.dtype((np.int, (2,***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_dtype_equal(np.dtype(('<f4', (3, 2***REMOVED******REMOVED******REMOVED***, np.dtype(('<f4', (3, 2***REMOVED******REMOVED******REMOVED******REMOVED***
        d = ([('a', 'f4', (1, 2***REMOVED******REMOVED***, ('b', 'f8', (3, 1***REMOVED******REMOVED******REMOVED***, (3, 2***REMOVED******REMOVED***
        assert_dtype_equal(np.dtype(d***REMOVED***, np.dtype(d***REMOVED******REMOVED***

    def test_shape_simple(self***REMOVED***:
        ***REMOVED***Test some simple cases that shouldn't be equal***REMOVED***
        assert_dtype_not_equal(np.dtype('f8'***REMOVED***, np.dtype(('f8', (1,***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_dtype_not_equal(np.dtype(('f8', (1,***REMOVED******REMOVED******REMOVED***, np.dtype(('f8', (1, 1***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_dtype_not_equal(np.dtype(('f4', (3, 2***REMOVED******REMOVED******REMOVED***, np.dtype(('f4', (2, 3***REMOVED******REMOVED******REMOVED******REMOVED***

    def test_shape_monster(self***REMOVED***:
        ***REMOVED***Test some more complicated cases that shouldn't be equal***REMOVED***
        assert_dtype_not_equal(
            np.dtype(([('a', 'f4', (2, 1***REMOVED******REMOVED***, ('b', 'f8', (1, 3***REMOVED******REMOVED******REMOVED***, (2, 2***REMOVED******REMOVED******REMOVED***,
            np.dtype(([('a', 'f4', (1, 2***REMOVED******REMOVED***, ('b', 'f8', (1, 3***REMOVED******REMOVED******REMOVED***, (2, 2***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_dtype_not_equal(
            np.dtype(([('a', 'f4', (2, 1***REMOVED******REMOVED***, ('b', 'f8', (1, 3***REMOVED******REMOVED******REMOVED***, (2, 2***REMOVED******REMOVED******REMOVED***,
            np.dtype(([('a', 'f4', (2, 1***REMOVED******REMOVED***, ('b', 'i8', (1, 3***REMOVED******REMOVED******REMOVED***, (2, 2***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_dtype_not_equal(
            np.dtype(([('a', 'f4', (2, 1***REMOVED******REMOVED***, ('b', 'f8', (1, 3***REMOVED******REMOVED******REMOVED***, (2, 2***REMOVED******REMOVED******REMOVED***,
            np.dtype(([('e', 'f8', (1, 3***REMOVED******REMOVED***, ('d', 'f4', (2, 1***REMOVED******REMOVED******REMOVED***, (2, 2***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_dtype_not_equal(
            np.dtype(([('a', [('a', 'i4', 6***REMOVED******REMOVED***, (2, 1***REMOVED******REMOVED***, ('b', 'f8', (1, 3***REMOVED******REMOVED******REMOVED***, (2, 2***REMOVED******REMOVED******REMOVED***,
            np.dtype(([('a', [('a', 'u4', 6***REMOVED******REMOVED***, (2, 1***REMOVED******REMOVED***, ('b', 'f8', (1, 3***REMOVED******REMOVED******REMOVED***, (2, 2***REMOVED******REMOVED******REMOVED******REMOVED***

    def test_shape_sequence(self***REMOVED***:
        # Any sequence of integers should work as shape, but the result
        # should be a tuple (immutable***REMOVED*** of base type integers.
        a = np.array([1, 2, 3***REMOVED***, dtype=np.int16***REMOVED***
        l = [1, 2, 3***REMOVED***
        # Array gets converted
        dt = np.dtype([('a', 'f4', a***REMOVED******REMOVED******REMOVED***
        assert_(isinstance(dt['a'***REMOVED***.shape, tuple***REMOVED******REMOVED***
        assert_(isinstance(dt['a'***REMOVED***.shape[0***REMOVED***, int***REMOVED******REMOVED***
        # List gets converted
        dt = np.dtype([('a', 'f4', l***REMOVED******REMOVED******REMOVED***
        assert_(isinstance(dt['a'***REMOVED***.shape, tuple***REMOVED******REMOVED***
        #

        class IntLike(object***REMOVED***:
            def __index__(self***REMOVED***:
                return 3

            def __int__(self***REMOVED***:
                # (a PyNumber_Check fails without __int__***REMOVED***
                return 3

        dt = np.dtype([('a', 'f4', IntLike(***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_(isinstance(dt['a'***REMOVED***.shape, tuple***REMOVED******REMOVED***
        assert_(isinstance(dt['a'***REMOVED***.shape[0***REMOVED***, int***REMOVED******REMOVED***
        dt = np.dtype([('a', 'f4', (IntLike(***REMOVED***,***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_(isinstance(dt['a'***REMOVED***.shape, tuple***REMOVED******REMOVED***
        assert_(isinstance(dt['a'***REMOVED***.shape[0***REMOVED***, int***REMOVED******REMOVED***

    def test_shape_invalid(self***REMOVED***:
        # Check that the shape is valid.
        max_int = np.iinfo(np.intc***REMOVED***.max
        max_intp = np.iinfo(np.intp***REMOVED***.max
        # Too large values (the datatype is part of this***REMOVED***
        assert_raises(ValueError, np.dtype, [('a', 'f4', max_int // 4 + 1***REMOVED******REMOVED******REMOVED***
        assert_raises(ValueError, np.dtype, [('a', 'f4', max_int + 1***REMOVED******REMOVED******REMOVED***
        assert_raises(ValueError, np.dtype, [('a', 'f4', (max_int, 2***REMOVED******REMOVED******REMOVED******REMOVED***
        # Takes a different code path (fails earlier:
        assert_raises(ValueError, np.dtype, [('a', 'f4', max_intp + 1***REMOVED******REMOVED******REMOVED***
        # Negative values
        assert_raises(ValueError, np.dtype, [('a', 'f4', -1***REMOVED******REMOVED******REMOVED***
        assert_raises(ValueError, np.dtype, [('a', 'f4', (-1, -1***REMOVED******REMOVED******REMOVED******REMOVED***

    def test_alignment(self***REMOVED***:
        #Check that subarrays are aligned
        t1 = np.dtype('1i4', align=True***REMOVED***
        t2 = np.dtype('2i4', align=True***REMOVED***
        assert_equal(t1.alignment, t2.alignment***REMOVED***


class TestMonsterType(TestCase***REMOVED***:
    ***REMOVED***Test deeply nested subtypes.***REMOVED***

    def test1(self***REMOVED***:
        simple1 = np.dtype({'names': ['r', 'b'***REMOVED***, 'formats': ['u1', 'u1'***REMOVED***,
            'titles': ['Red pixel', 'Blue pixel'***REMOVED******REMOVED******REMOVED***
        a = np.dtype([('yo', np.int***REMOVED***, ('ye', simple1***REMOVED***,
            ('yi', np.dtype((np.int, (3, 2***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        b = np.dtype([('yo', np.int***REMOVED***, ('ye', simple1***REMOVED***,
            ('yi', np.dtype((np.int, (3, 2***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        assert_dtype_equal(a, b***REMOVED***

        c = np.dtype([('yo', np.int***REMOVED***, ('ye', simple1***REMOVED***,
            ('yi', np.dtype((a, (3, 2***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        d = np.dtype([('yo', np.int***REMOVED***, ('ye', simple1***REMOVED***,
            ('yi', np.dtype((a, (3, 2***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        assert_dtype_equal(c, d***REMOVED***

class TestMetadata(TestCase***REMOVED***:
    def test_no_metadata(self***REMOVED***:
        d = np.dtype(int***REMOVED***
        self.assertEqual(d.metadata, None***REMOVED***

    def test_metadata_takes_dict(self***REMOVED***:
        d = np.dtype(int, metadata={'datum': 1***REMOVED******REMOVED***
        self.assertEqual(d.metadata, {'datum': 1***REMOVED******REMOVED***

    def test_metadata_rejects_nondict(self***REMOVED***:
        self.assertRaises(TypeError, np.dtype, int, metadata='datum'***REMOVED***
        self.assertRaises(TypeError, np.dtype, int, metadata=1***REMOVED***
        self.assertRaises(TypeError, np.dtype, int, metadata=None***REMOVED***

    def test_nested_metadata(self***REMOVED***:
        d = np.dtype([('a', np.dtype(int, metadata={'datum': 1***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        self.assertEqual(d['a'***REMOVED***.metadata, {'datum': 1***REMOVED******REMOVED***

    def base_metadata_copied(self***REMOVED***:
        d = np.dtype((np.void, np.dtype('i4,i4', metadata={'datum': 1***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_equal(d.metadata, {'datum': 1***REMOVED******REMOVED***

class TestString(TestCase***REMOVED***:
    def test_complex_dtype_str(self***REMOVED***:
        dt = np.dtype([('top', [('tiles', ('>f4', (64, 64***REMOVED******REMOVED***, (1,***REMOVED******REMOVED***,
                                ('rtile', '>f4', (64, 36***REMOVED******REMOVED******REMOVED***, (3,***REMOVED******REMOVED***,
                       ('bottom', [('bleft', ('>f4', (8, 64***REMOVED******REMOVED***, (1,***REMOVED******REMOVED***,
                                   ('bright', '>f4', (8, 36***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        assert_equal(str(dt***REMOVED***,
                     "[('top', [('tiles', ('>f4', (64, 64***REMOVED******REMOVED***, (1,***REMOVED******REMOVED***, "
                     "('rtile', '>f4', (64, 36***REMOVED******REMOVED******REMOVED***, (3,***REMOVED******REMOVED***, "
                     "('bottom', [('bleft', ('>f4', (8, 64***REMOVED******REMOVED***, (1,***REMOVED******REMOVED***, "
                     "('bright', '>f4', (8, 36***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***"***REMOVED***

        # If the sticky aligned flag is set to True, it makes the
        # str(***REMOVED*** function use a dict representation with an 'aligned' flag
        dt = np.dtype([('top', [('tiles', ('>f4', (64, 64***REMOVED******REMOVED***, (1,***REMOVED******REMOVED***,
                                ('rtile', '>f4', (64, 36***REMOVED******REMOVED******REMOVED***,
                                (3,***REMOVED******REMOVED***,
                       ('bottom', [('bleft', ('>f4', (8, 64***REMOVED******REMOVED***, (1,***REMOVED******REMOVED***,
                                   ('bright', '>f4', (8, 36***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***,
                       align=True***REMOVED***
        assert_equal(str(dt***REMOVED***,
                    "{'names':['top','bottom'***REMOVED***, "
                     "'formats':[([('tiles', ('>f4', (64, 64***REMOVED******REMOVED***, (1,***REMOVED******REMOVED***, "
                                  "('rtile', '>f4', (64, 36***REMOVED******REMOVED******REMOVED***, (3,***REMOVED******REMOVED***,"
                                 "[('bleft', ('>f4', (8, 64***REMOVED******REMOVED***, (1,***REMOVED******REMOVED***, "
                                  "('bright', '>f4', (8, 36***REMOVED******REMOVED******REMOVED******REMOVED***, "
                     "'offsets':[0,76800***REMOVED***, "
                     "'itemsize':80000, "
                     "'aligned':True***REMOVED***"***REMOVED***
        assert_equal(np.dtype(eval(str(dt***REMOVED******REMOVED******REMOVED***, dt***REMOVED***

        dt = np.dtype({'names': ['r', 'g', 'b'***REMOVED***, 'formats': ['u1', 'u1', 'u1'***REMOVED***,
                        'offsets': [0, 1, 2***REMOVED***,
                        'titles': ['Red pixel', 'Green pixel', 'Blue pixel'***REMOVED******REMOVED******REMOVED***
        assert_equal(str(dt***REMOVED***,
                    "[(('Red pixel', 'r'***REMOVED***, 'u1'***REMOVED***, "
                    "(('Green pixel', 'g'***REMOVED***, 'u1'***REMOVED***, "
                    "(('Blue pixel', 'b'***REMOVED***, 'u1'***REMOVED******REMOVED***"***REMOVED***

        dt = np.dtype({'names': ['rgba', 'r', 'g', 'b'***REMOVED***,
                       'formats': ['<u4', 'u1', 'u1', 'u1'***REMOVED***,
                       'offsets': [0, 0, 1, 2***REMOVED***,
                       'titles': ['Color', 'Red pixel',
                                  'Green pixel', 'Blue pixel'***REMOVED******REMOVED******REMOVED***
        assert_equal(str(dt***REMOVED***,
                    "{'names':['rgba','r','g','b'***REMOVED***,"
                    " 'formats':['<u4','u1','u1','u1'***REMOVED***,"
                    " 'offsets':[0,0,1,2***REMOVED***,"
                    " 'titles':['Color','Red pixel',"
                              "'Green pixel','Blue pixel'***REMOVED***,"
                    " 'itemsize':4***REMOVED***"***REMOVED***

        dt = np.dtype({'names': ['r', 'b'***REMOVED***, 'formats': ['u1', 'u1'***REMOVED***,
                        'offsets': [0, 2***REMOVED***,
                        'titles': ['Red pixel', 'Blue pixel'***REMOVED******REMOVED******REMOVED***
        assert_equal(str(dt***REMOVED***,
                    "{'names':['r','b'***REMOVED***,"
                    " 'formats':['u1','u1'***REMOVED***,"
                    " 'offsets':[0,2***REMOVED***,"
                    " 'titles':['Red pixel','Blue pixel'***REMOVED***,"
                    " 'itemsize':3***REMOVED***"***REMOVED***

        dt = np.dtype([('a', '<m8[D***REMOVED***'***REMOVED***, ('b', '<M8[us***REMOVED***'***REMOVED******REMOVED******REMOVED***
        assert_equal(str(dt***REMOVED***,
                    "[('a', '<m8[D***REMOVED***'***REMOVED***, ('b', '<M8[us***REMOVED***'***REMOVED******REMOVED***"***REMOVED***

    def test_complex_dtype_repr(self***REMOVED***:
        dt = np.dtype([('top', [('tiles', ('>f4', (64, 64***REMOVED******REMOVED***, (1,***REMOVED******REMOVED***,
                                ('rtile', '>f4', (64, 36***REMOVED******REMOVED******REMOVED***, (3,***REMOVED******REMOVED***,
                       ('bottom', [('bleft', ('>f4', (8, 64***REMOVED******REMOVED***, (1,***REMOVED******REMOVED***,
                                   ('bright', '>f4', (8, 36***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        assert_equal(repr(dt***REMOVED***,
                     "dtype([('top', [('tiles', ('>f4', (64, 64***REMOVED******REMOVED***, (1,***REMOVED******REMOVED***, "
                     "('rtile', '>f4', (64, 36***REMOVED******REMOVED******REMOVED***, (3,***REMOVED******REMOVED***, "
                     "('bottom', [('bleft', ('>f4', (8, 64***REMOVED******REMOVED***, (1,***REMOVED******REMOVED***, "
                     "('bright', '>f4', (8, 36***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***"***REMOVED***

        dt = np.dtype({'names': ['r', 'g', 'b'***REMOVED***, 'formats': ['u1', 'u1', 'u1'***REMOVED***,
                        'offsets': [0, 1, 2***REMOVED***,
                        'titles': ['Red pixel', 'Green pixel', 'Blue pixel'***REMOVED******REMOVED***,
                        align=True***REMOVED***
        assert_equal(repr(dt***REMOVED***,
                    "dtype([(('Red pixel', 'r'***REMOVED***, 'u1'***REMOVED***, "
                    "(('Green pixel', 'g'***REMOVED***, 'u1'***REMOVED***, "
                    "(('Blue pixel', 'b'***REMOVED***, 'u1'***REMOVED******REMOVED***, align=True***REMOVED***"***REMOVED***

        dt = np.dtype({'names': ['rgba', 'r', 'g', 'b'***REMOVED***,
                       'formats': ['<u4', 'u1', 'u1', 'u1'***REMOVED***,
                       'offsets': [0, 0, 1, 2***REMOVED***,
                       'titles': ['Color', 'Red pixel',
                                  'Green pixel', 'Blue pixel'***REMOVED******REMOVED***, align=True***REMOVED***
        assert_equal(repr(dt***REMOVED***,
                    "dtype({'names':['rgba','r','g','b'***REMOVED***,"
                    " 'formats':['<u4','u1','u1','u1'***REMOVED***,"
                    " 'offsets':[0,0,1,2***REMOVED***,"
                    " 'titles':['Color','Red pixel',"
                              "'Green pixel','Blue pixel'***REMOVED***,"
                    " 'itemsize':4***REMOVED***, align=True***REMOVED***"***REMOVED***

        dt = np.dtype({'names': ['r', 'b'***REMOVED***, 'formats': ['u1', 'u1'***REMOVED***,
                        'offsets': [0, 2***REMOVED***,
                        'titles': ['Red pixel', 'Blue pixel'***REMOVED***,
                        'itemsize': 4***REMOVED******REMOVED***
        assert_equal(repr(dt***REMOVED***,
                    "dtype({'names':['r','b'***REMOVED***, "
                    "'formats':['u1','u1'***REMOVED***, "
                    "'offsets':[0,2***REMOVED***, "
                    "'titles':['Red pixel','Blue pixel'***REMOVED***, "
                    "'itemsize':4***REMOVED******REMOVED***"***REMOVED***

        dt = np.dtype([('a', '<M8[D***REMOVED***'***REMOVED***, ('b', '<m8[us***REMOVED***'***REMOVED******REMOVED******REMOVED***
        assert_equal(repr(dt***REMOVED***,
                    "dtype([('a', '<M8[D***REMOVED***'***REMOVED***, ('b', '<m8[us***REMOVED***'***REMOVED******REMOVED******REMOVED***"***REMOVED***

    @dec.skipif(sys.version_info[0***REMOVED*** >= 3***REMOVED***
    def test_dtype_str_with_long_in_shape(self***REMOVED***:
        # Pull request #376, should not error
        np.dtype('(1L,***REMOVED***i4'***REMOVED***

    def test_base_dtype_with_object_type(self***REMOVED***:
        # Issue gh-2798, should not error.
        np.array(['a'***REMOVED***, dtype="O"***REMOVED***.astype(("O", [("name", "O"***REMOVED******REMOVED******REMOVED******REMOVED***

    def test_empty_string_to_object(self***REMOVED***:
        # Pull request #4722
        np.array(["", ""***REMOVED******REMOVED***.astype(object***REMOVED***

class TestDtypeAttributeDeletion(TestCase***REMOVED***:

    def test_dtype_non_writable_attributes_deletion(self***REMOVED***:
        dt = np.dtype(np.double***REMOVED***
        attr = ["subdtype", "descr", "str", "name", "base", "shape",
                "isbuiltin", "isnative", "isalignedstruct", "fields",
                "metadata", "hasobject"***REMOVED***

        for s in attr:
            assert_raises(AttributeError, delattr, dt, s***REMOVED***

    def test_dtype_writable_attributes_deletion(self***REMOVED***:
        dt = np.dtype(np.double***REMOVED***
        attr = ["names"***REMOVED***
        for s in attr:
            assert_raises(AttributeError, delattr, dt, s***REMOVED***


class TestDtypeAttributes(TestCase***REMOVED***:
    def test_descr_has_trailing_void(self***REMOVED***:
        # see gh-6359
        dtype = np.dtype({
            'names': ['A', 'B'***REMOVED***,
            'formats': ['f4', 'f4'***REMOVED***,
            'offsets': [0, 8***REMOVED***,
            'itemsize': 16***REMOVED******REMOVED***
        new_dtype = np.dtype(dtype.descr***REMOVED***
        assert_equal(new_dtype.itemsize, 16***REMOVED***


class TestDtypeAttributes(TestCase***REMOVED***:

    def test_name_builtin(self***REMOVED***:
        for t in np.typeDict.values(***REMOVED***:
            name = t.__name__
            if name.endswith('_'***REMOVED***:
                name = name[:-1***REMOVED***
            assert_equal(np.dtype(t***REMOVED***.name, name***REMOVED***

    def test_name_dtype_subclass(self***REMOVED***:
        # Ticket #4357
        class user_def_subcls(np.void***REMOVED***:
            pass
        assert_equal(np.dtype(user_def_subcls***REMOVED***.name, 'user_def_subcls'***REMOVED***


def test_rational_dtype(***REMOVED***:
    # test for bug gh-5719
    a = np.array([1111***REMOVED***, dtype=rational***REMOVED***.astype
    assert_raises(OverflowError, a, 'int8'***REMOVED***

    # test that dtype detection finds user-defined types
    x = rational(1***REMOVED***
    assert_equal(np.array([x,x***REMOVED******REMOVED***.dtype, np.dtype(rational***REMOVED******REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
