from __future__ import division, absolute_import, print_function

import platform

import numpy as np
from numpy import uint16, float16, float32, float64
from numpy.testing import TestCase, run_module_suite, assert_, assert_equal, \
    dec


def assert_raises_fpe(strmatch, callable, *args, **kwargs***REMOVED***:
    ***REMOVED***
        callable(*args, **kwargs***REMOVED***
    except FloatingPointError as exc:
        assert_(str(exc***REMOVED***.find(strmatch***REMOVED*** >= 0,
                "Did not raise floating point %s error" % strmatch***REMOVED***
    else:
        assert_(False,
                "Did not raise floating point %s error" % strmatch***REMOVED***

class TestHalf(TestCase***REMOVED***:
    def setUp(self***REMOVED***:
        # An array of all possible float16 values
        self.all_f16 = np.arange(0x10000, dtype=uint16***REMOVED***
        self.all_f16.dtype = float16
        self.all_f32 = np.array(self.all_f16, dtype=float32***REMOVED***
        self.all_f64 = np.array(self.all_f16, dtype=float64***REMOVED***

        # An array of all non-NaN float16 values, in sorted order
        self.nonan_f16 = np.concatenate(
                                (np.arange(0xfc00, 0x7fff, -1, dtype=uint16***REMOVED***,
                                 np.arange(0x0000, 0x7c01, 1, dtype=uint16***REMOVED******REMOVED******REMOVED***
        self.nonan_f16.dtype = float16
        self.nonan_f32 = np.array(self.nonan_f16, dtype=float32***REMOVED***
        self.nonan_f64 = np.array(self.nonan_f16, dtype=float64***REMOVED***

        # An array of all finite float16 values, in sorted order
        self.finite_f16 = self.nonan_f16[1:-1***REMOVED***
        self.finite_f32 = self.nonan_f32[1:-1***REMOVED***
        self.finite_f64 = self.nonan_f64[1:-1***REMOVED***

    def test_half_conversions(self***REMOVED***:
        ***REMOVED***Checks that all 16-bit values survive conversion
           to/from 32-bit and 64-bit float***REMOVED***
        # Because the underlying routines preserve the NaN bits, every
        # value is preserved when converting to/from other floats.

        # Convert from float32 back to float16
        b = np.array(self.all_f32, dtype=float16***REMOVED***
        assert_equal(self.all_f16.view(dtype=uint16***REMOVED***,
                     b.view(dtype=uint16***REMOVED******REMOVED***

        # Convert from float64 back to float16
        b = np.array(self.all_f64, dtype=float16***REMOVED***
        assert_equal(self.all_f16.view(dtype=uint16***REMOVED***,
                     b.view(dtype=uint16***REMOVED******REMOVED***

        # Convert float16 to longdouble and back
        # This doesn't necessarily preserve the extra NaN bits,
        # so exclude NaNs.
        a_ld = np.array(self.nonan_f16, dtype=np.longdouble***REMOVED***
        b = np.array(a_ld, dtype=float16***REMOVED***
        assert_equal(self.nonan_f16.view(dtype=uint16***REMOVED***,
                     b.view(dtype=uint16***REMOVED******REMOVED***

        # Check the range for which all integers can be represented
        i_int = np.arange(-2048, 2049***REMOVED***
        i_f16 = np.array(i_int, dtype=float16***REMOVED***
        j = np.array(i_f16, dtype=np.int***REMOVED***
        assert_equal(i_int, j***REMOVED***

    def test_nans_infs(self***REMOVED***:
        with np.errstate(all='ignore'***REMOVED***:
            # Check some of the ufuncs
            assert_equal(np.isnan(self.all_f16***REMOVED***, np.isnan(self.all_f32***REMOVED******REMOVED***
            assert_equal(np.isinf(self.all_f16***REMOVED***, np.isinf(self.all_f32***REMOVED******REMOVED***
            assert_equal(np.isfinite(self.all_f16***REMOVED***, np.isfinite(self.all_f32***REMOVED******REMOVED***
            assert_equal(np.signbit(self.all_f16***REMOVED***, np.signbit(self.all_f32***REMOVED******REMOVED***
            assert_equal(np.spacing(float16(65504***REMOVED******REMOVED***, np.inf***REMOVED***

            # Check comparisons of all values with NaN
            nan = float16(np.nan***REMOVED***

            assert_(not (self.all_f16 == nan***REMOVED***.any(***REMOVED******REMOVED***
            assert_(not (nan == self.all_f16***REMOVED***.any(***REMOVED******REMOVED***

            assert_((self.all_f16 != nan***REMOVED***.all(***REMOVED******REMOVED***
            assert_((nan != self.all_f16***REMOVED***.all(***REMOVED******REMOVED***

            assert_(not (self.all_f16 < nan***REMOVED***.any(***REMOVED******REMOVED***
            assert_(not (nan < self.all_f16***REMOVED***.any(***REMOVED******REMOVED***

            assert_(not (self.all_f16 <= nan***REMOVED***.any(***REMOVED******REMOVED***
            assert_(not (nan <= self.all_f16***REMOVED***.any(***REMOVED******REMOVED***

            assert_(not (self.all_f16 > nan***REMOVED***.any(***REMOVED******REMOVED***
            assert_(not (nan > self.all_f16***REMOVED***.any(***REMOVED******REMOVED***

            assert_(not (self.all_f16 >= nan***REMOVED***.any(***REMOVED******REMOVED***
            assert_(not (nan >= self.all_f16***REMOVED***.any(***REMOVED******REMOVED***

    def test_half_values(self***REMOVED***:
        ***REMOVED***Confirms a small number of known half values***REMOVED***
        a = np.array([1.0, -1.0,
                      2.0, -2.0,
                      0.0999755859375, 0.333251953125,  # 1/10, 1/3
                      65504, -65504,           # Maximum magnitude
                      2.0**(-14***REMOVED***, -2.0**(-14***REMOVED***,  # Minimum normal
                      2.0**(-24***REMOVED***, -2.0**(-24***REMOVED***,  # Minimum subnormal
                      0, -1/1e1000,            # Signed zeros
                      np.inf, -np.inf***REMOVED******REMOVED***
        b = np.array([0x3c00, 0xbc00,
                      0x4000, 0xc000,
                      0x2e66, 0x3555,
                      0x7bff, 0xfbff,
                      0x0400, 0x8400,
                      0x0001, 0x8001,
                      0x0000, 0x8000,
                      0x7c00, 0xfc00***REMOVED***, dtype=uint16***REMOVED***
        b.dtype = float16
        assert_equal(a, b***REMOVED***

    def test_half_rounding(self***REMOVED***:
        ***REMOVED***Checks that rounding when converting to half is correct***REMOVED***
        a = np.array([2.0**-25 + 2.0**-35,  # Rounds to minimum subnormal
                      2.0**-25,       # Underflows to zero (nearest even mode***REMOVED***
                      2.0**-26,       # Underflows to zero
                      1.0+2.0**-11 + 2.0**-16,  # rounds to 1.0+2**(-10***REMOVED***
                      1.0+2.0**-11,   # rounds to 1.0 (nearest even mode***REMOVED***
                      1.0+2.0**-12,   # rounds to 1.0
                      65519,          # rounds to 65504
                      65520***REMOVED***,         # rounds to inf
                      dtype=float64***REMOVED***
        rounded = [2.0**-24,
                   0.0,
                   0.0,
                   1.0+2.0**(-10***REMOVED***,
                   1.0,
                   1.0,
                   65504,
                   np.inf***REMOVED***

        # Check float64->float16 rounding
        b = np.array(a, dtype=float16***REMOVED***
        assert_equal(b, rounded***REMOVED***

        # Check float32->float16 rounding
        a = np.array(a, dtype=float32***REMOVED***
        b = np.array(a, dtype=float16***REMOVED***
        assert_equal(b, rounded***REMOVED***

    def test_half_correctness(self***REMOVED***:
        ***REMOVED***Take every finite float16, and check the casting functions with
           a manual conversion.***REMOVED***

        # Create an array of all finite float16s
        a_bits = self.finite_f16.view(dtype=uint16***REMOVED***

        # Convert to 64-bit float manually
        a_sgn = (-1.0***REMOVED*****((a_bits & 0x8000***REMOVED*** >> 15***REMOVED***
        a_exp = np.array((a_bits & 0x7c00***REMOVED*** >> 10, dtype=np.int32***REMOVED*** - 15
        a_man = (a_bits & 0x03ff***REMOVED*** * 2.0**(-10***REMOVED***
        # Implicit bit of normalized floats
        a_man[a_exp != -15***REMOVED*** += 1
        # Denormalized exponent is -14
        a_exp[a_exp == -15***REMOVED*** = -14

        a_manual = a_sgn * a_man * 2.0**a_exp

        a32_fail = np.nonzero(self.finite_f32 != a_manual***REMOVED***[0***REMOVED***
        if len(a32_fail***REMOVED*** != 0:
            bad_index = a32_fail[0***REMOVED***
            assert_equal(self.finite_f32, a_manual,
                 "First non-equal is half value %x -> %g != %g" %
                            (self.finite_f16[bad_index***REMOVED***,
                             self.finite_f32[bad_index***REMOVED***,
                             a_manual[bad_index***REMOVED******REMOVED******REMOVED***

        a64_fail = np.nonzero(self.finite_f64 != a_manual***REMOVED***[0***REMOVED***
        if len(a64_fail***REMOVED*** != 0:
            bad_index = a64_fail[0***REMOVED***
            assert_equal(self.finite_f64, a_manual,
                 "First non-equal is half value %x -> %g != %g" %
                            (self.finite_f16[bad_index***REMOVED***,
                             self.finite_f64[bad_index***REMOVED***,
                             a_manual[bad_index***REMOVED******REMOVED******REMOVED***

    def test_half_ordering(self***REMOVED***:
        ***REMOVED***Make sure comparisons are working right***REMOVED***

        # All non-NaN float16 values in reverse order
        a = self.nonan_f16[::-1***REMOVED***.copy(***REMOVED***

        # 32-bit float copy
        b = np.array(a, dtype=float32***REMOVED***

        # Should sort the same
        a.sort(***REMOVED***
        b.sort(***REMOVED***
        assert_equal(a, b***REMOVED***

        # Comparisons should work
        assert_((a[:-1***REMOVED*** <= a[1:***REMOVED******REMOVED***.all(***REMOVED******REMOVED***
        assert_(not (a[:-1***REMOVED*** > a[1:***REMOVED******REMOVED***.any(***REMOVED******REMOVED***
        assert_((a[1:***REMOVED*** >= a[:-1***REMOVED******REMOVED***.all(***REMOVED******REMOVED***
        assert_(not (a[1:***REMOVED*** < a[:-1***REMOVED******REMOVED***.any(***REMOVED******REMOVED***
        # All != except for +/-0
        assert_equal(np.nonzero(a[:-1***REMOVED*** < a[1:***REMOVED******REMOVED***[0***REMOVED***.size, a.size-2***REMOVED***
        assert_equal(np.nonzero(a[1:***REMOVED*** > a[:-1***REMOVED******REMOVED***[0***REMOVED***.size, a.size-2***REMOVED***

    def test_half_funcs(self***REMOVED***:
        ***REMOVED***Test the various ArrFuncs***REMOVED***

        # fill
        assert_equal(np.arange(10, dtype=float16***REMOVED***,
                     np.arange(10, dtype=float32***REMOVED******REMOVED***

        # fillwithscalar
        a = np.zeros((5,***REMOVED***, dtype=float16***REMOVED***
        a.fill(1***REMOVED***
        assert_equal(a, np.ones((5,***REMOVED***, dtype=float16***REMOVED******REMOVED***

        # nonzero and copyswap
        a = np.array([0, 0, -1, -1/1e20, 0, 2.0**-24, 7.629e-6***REMOVED***, dtype=float16***REMOVED***
        assert_equal(a.nonzero(***REMOVED***[0***REMOVED***,
                     [2, 5, 6***REMOVED******REMOVED***
        a = a.byteswap(***REMOVED***.newbyteorder(***REMOVED***
        assert_equal(a.nonzero(***REMOVED***[0***REMOVED***,
                     [2, 5, 6***REMOVED******REMOVED***

        # dot
        a = np.arange(0, 10, 0.5, dtype=float16***REMOVED***
        b = np.ones((20,***REMOVED***, dtype=float16***REMOVED***
        assert_equal(np.dot(a, b***REMOVED***,
                     95***REMOVED***

        # argmax
        a = np.array([0, -np.inf, -2, 0.5, 12.55, 7.3, 2.1, 12.4***REMOVED***, dtype=float16***REMOVED***
        assert_equal(a.argmax(***REMOVED***,
                     4***REMOVED***
        a = np.array([0, -np.inf, -2, np.inf, 12.55, np.nan, 2.1, 12.4***REMOVED***, dtype=float16***REMOVED***
        assert_equal(a.argmax(***REMOVED***,
                     5***REMOVED***

        # getitem
        a = np.arange(10, dtype=float16***REMOVED***
        for i in range(10***REMOVED***:
            assert_equal(a.item(i***REMOVED***, i***REMOVED***

    def test_spacing_nextafter(self***REMOVED***:
        ***REMOVED***Test np.spacing and np.nextafter***REMOVED***
        # All non-negative finite #'s
        a = np.arange(0x7c00, dtype=uint16***REMOVED***
        hinf = np.array((np.inf,***REMOVED***, dtype=float16***REMOVED***
        a_f16 = a.view(dtype=float16***REMOVED***

        assert_equal(np.spacing(a_f16[:-1***REMOVED******REMOVED***, a_f16[1:***REMOVED***-a_f16[:-1***REMOVED******REMOVED***

        assert_equal(np.nextafter(a_f16[:-1***REMOVED***, hinf***REMOVED***, a_f16[1:***REMOVED******REMOVED***
        assert_equal(np.nextafter(a_f16[0***REMOVED***, -hinf***REMOVED***, -a_f16[1***REMOVED******REMOVED***
        assert_equal(np.nextafter(a_f16[1:***REMOVED***, -hinf***REMOVED***, a_f16[:-1***REMOVED******REMOVED***

        # switch to negatives
        a |= 0x8000

        assert_equal(np.spacing(a_f16[0***REMOVED******REMOVED***, np.spacing(a_f16[1***REMOVED******REMOVED******REMOVED***
        assert_equal(np.spacing(a_f16[1:***REMOVED******REMOVED***, a_f16[:-1***REMOVED***-a_f16[1:***REMOVED******REMOVED***

        assert_equal(np.nextafter(a_f16[0***REMOVED***, hinf***REMOVED***, -a_f16[1***REMOVED******REMOVED***
        assert_equal(np.nextafter(a_f16[1:***REMOVED***, hinf***REMOVED***, a_f16[:-1***REMOVED******REMOVED***
        assert_equal(np.nextafter(a_f16[:-1***REMOVED***, -hinf***REMOVED***, a_f16[1:***REMOVED******REMOVED***

    def test_half_ufuncs(self***REMOVED***:
        ***REMOVED***Test the various ufuncs***REMOVED***

        a = np.array([0, 1, 2, 4, 2***REMOVED***, dtype=float16***REMOVED***
        b = np.array([-2, 5, 1, 4, 3***REMOVED***, dtype=float16***REMOVED***
        c = np.array([0, -1, -np.inf, np.nan, 6***REMOVED***, dtype=float16***REMOVED***

        assert_equal(np.add(a, b***REMOVED***, [-2, 6, 3, 8, 5***REMOVED******REMOVED***
        assert_equal(np.subtract(a, b***REMOVED***, [2, -4, 1, 0, -1***REMOVED******REMOVED***
        assert_equal(np.multiply(a, b***REMOVED***, [0, 5, 2, 16, 6***REMOVED******REMOVED***
        assert_equal(np.divide(a, b***REMOVED***, [0, 0.199951171875, 2, 1, 0.66650390625***REMOVED******REMOVED***

        assert_equal(np.equal(a, b***REMOVED***, [False, False, False, True, False***REMOVED******REMOVED***
        assert_equal(np.not_equal(a, b***REMOVED***, [True, True, True, False, True***REMOVED******REMOVED***
        assert_equal(np.less(a, b***REMOVED***, [False, True, False, False, True***REMOVED******REMOVED***
        assert_equal(np.less_equal(a, b***REMOVED***, [False, True, False, True, True***REMOVED******REMOVED***
        assert_equal(np.greater(a, b***REMOVED***, [True, False, True, False, False***REMOVED******REMOVED***
        assert_equal(np.greater_equal(a, b***REMOVED***, [True, False, True, True, False***REMOVED******REMOVED***
        assert_equal(np.logical_and(a, b***REMOVED***, [False, True, True, True, True***REMOVED******REMOVED***
        assert_equal(np.logical_or(a, b***REMOVED***, [True, True, True, True, True***REMOVED******REMOVED***
        assert_equal(np.logical_xor(a, b***REMOVED***, [True, False, False, False, False***REMOVED******REMOVED***
        assert_equal(np.logical_not(a***REMOVED***, [True, False, False, False, False***REMOVED******REMOVED***

        assert_equal(np.isnan(c***REMOVED***, [False, False, False, True, False***REMOVED******REMOVED***
        assert_equal(np.isinf(c***REMOVED***, [False, False, True, False, False***REMOVED******REMOVED***
        assert_equal(np.isfinite(c***REMOVED***, [True, True, False, False, True***REMOVED******REMOVED***
        assert_equal(np.signbit(b***REMOVED***, [True, False, False, False, False***REMOVED******REMOVED***

        assert_equal(np.copysign(b, a***REMOVED***, [2, 5, 1, 4, 3***REMOVED******REMOVED***

        assert_equal(np.maximum(a, b***REMOVED***, [0, 5, 2, 4, 3***REMOVED******REMOVED***
        x = np.maximum(b, c***REMOVED***
        assert_(np.isnan(x[3***REMOVED******REMOVED******REMOVED***
        x[3***REMOVED*** = 0
        assert_equal(x, [0, 5, 1, 0, 6***REMOVED******REMOVED***
        assert_equal(np.minimum(a, b***REMOVED***, [-2, 1, 1, 4, 2***REMOVED******REMOVED***
        x = np.minimum(b, c***REMOVED***
        assert_(np.isnan(x[3***REMOVED******REMOVED******REMOVED***
        x[3***REMOVED*** = 0
        assert_equal(x, [-2, -1, -np.inf, 0, 3***REMOVED******REMOVED***
        assert_equal(np.fmax(a, b***REMOVED***, [0, 5, 2, 4, 3***REMOVED******REMOVED***
        assert_equal(np.fmax(b, c***REMOVED***, [0, 5, 1, 4, 6***REMOVED******REMOVED***
        assert_equal(np.fmin(a, b***REMOVED***, [-2, 1, 1, 4, 2***REMOVED******REMOVED***
        assert_equal(np.fmin(b, c***REMOVED***, [-2, -1, -np.inf, 4, 3***REMOVED******REMOVED***

        assert_equal(np.floor_divide(a, b***REMOVED***, [0, 0, 2, 1, 0***REMOVED******REMOVED***
        assert_equal(np.remainder(a, b***REMOVED***, [0, 1, 0, 0, 2***REMOVED******REMOVED***
        assert_equal(np.square(b***REMOVED***, [4, 25, 1, 16, 9***REMOVED******REMOVED***
        assert_equal(np.reciprocal(b***REMOVED***, [-0.5, 0.199951171875, 1, 0.25, 0.333251953125***REMOVED******REMOVED***
        assert_equal(np.ones_like(b***REMOVED***, [1, 1, 1, 1, 1***REMOVED******REMOVED***
        assert_equal(np.conjugate(b***REMOVED***, b***REMOVED***
        assert_equal(np.absolute(b***REMOVED***, [2, 5, 1, 4, 3***REMOVED******REMOVED***
        assert_equal(np.negative(b***REMOVED***, [2, -5, -1, -4, -3***REMOVED******REMOVED***
        assert_equal(np.sign(b***REMOVED***, [-1, 1, 1, 1, 1***REMOVED******REMOVED***
        assert_equal(np.modf(b***REMOVED***, ([0, 0, 0, 0, 0***REMOVED***, b***REMOVED******REMOVED***
        assert_equal(np.frexp(b***REMOVED***, ([-0.5, 0.625, 0.5, 0.5, 0.75***REMOVED***, [2, 3, 1, 3, 2***REMOVED******REMOVED******REMOVED***
        assert_equal(np.ldexp(b, [0, 1, 2, 4, 2***REMOVED******REMOVED***, [-2, 10, 4, 64, 12***REMOVED******REMOVED***

    def test_half_coercion(self***REMOVED***:
        ***REMOVED***Test that half gets coerced properly with the other types***REMOVED***
        a16 = np.array((1,***REMOVED***, dtype=float16***REMOVED***
        a32 = np.array((1,***REMOVED***, dtype=float32***REMOVED***
        b16 = float16(1***REMOVED***
        b32 = float32(1***REMOVED***

        assert_equal(np.power(a16, 2***REMOVED***.dtype, float16***REMOVED***
        assert_equal(np.power(a16, 2.0***REMOVED***.dtype, float16***REMOVED***
        assert_equal(np.power(a16, b16***REMOVED***.dtype, float16***REMOVED***
        assert_equal(np.power(a16, b32***REMOVED***.dtype, float16***REMOVED***
        assert_equal(np.power(a16, a16***REMOVED***.dtype, float16***REMOVED***
        assert_equal(np.power(a16, a32***REMOVED***.dtype, float32***REMOVED***

        assert_equal(np.power(b16, 2***REMOVED***.dtype, float64***REMOVED***
        assert_equal(np.power(b16, 2.0***REMOVED***.dtype, float64***REMOVED***
        assert_equal(np.power(b16, b16***REMOVED***.dtype, float16***REMOVED***
        assert_equal(np.power(b16, b32***REMOVED***.dtype, float32***REMOVED***
        assert_equal(np.power(b16, a16***REMOVED***.dtype, float16***REMOVED***
        assert_equal(np.power(b16, a32***REMOVED***.dtype, float32***REMOVED***

        assert_equal(np.power(a32, a16***REMOVED***.dtype, float32***REMOVED***
        assert_equal(np.power(a32, b16***REMOVED***.dtype, float32***REMOVED***
        assert_equal(np.power(b32, a16***REMOVED***.dtype, float16***REMOVED***
        assert_equal(np.power(b32, b16***REMOVED***.dtype, float32***REMOVED***

    @dec.skipif(platform.machine(***REMOVED*** == "armv5tel", "See gh-413."***REMOVED***
    def test_half_fpe(self***REMOVED***:
        with np.errstate(all='raise'***REMOVED***:
            sx16 = np.array((1e-4,***REMOVED***, dtype=float16***REMOVED***
            bx16 = np.array((1e4,***REMOVED***, dtype=float16***REMOVED***
            sy16 = float16(1e-4***REMOVED***
            by16 = float16(1e4***REMOVED***

            # Underflow errors
            assert_raises_fpe('underflow', lambda a, b:a*b, sx16, sx16***REMOVED***
            assert_raises_fpe('underflow', lambda a, b:a*b, sx16, sy16***REMOVED***
            assert_raises_fpe('underflow', lambda a, b:a*b, sy16, sx16***REMOVED***
            assert_raises_fpe('underflow', lambda a, b:a*b, sy16, sy16***REMOVED***
            assert_raises_fpe('underflow', lambda a, b:a/b, sx16, bx16***REMOVED***
            assert_raises_fpe('underflow', lambda a, b:a/b, sx16, by16***REMOVED***
            assert_raises_fpe('underflow', lambda a, b:a/b, sy16, bx16***REMOVED***
            assert_raises_fpe('underflow', lambda a, b:a/b, sy16, by16***REMOVED***
            assert_raises_fpe('underflow', lambda a, b:a/b,
                                             float16(2.**-14***REMOVED***, float16(2**11***REMOVED******REMOVED***
            assert_raises_fpe('underflow', lambda a, b:a/b,
                                             float16(-2.**-14***REMOVED***, float16(2**11***REMOVED******REMOVED***
            assert_raises_fpe('underflow', lambda a, b:a/b,
                                             float16(2.**-14+2**-24***REMOVED***, float16(2***REMOVED******REMOVED***
            assert_raises_fpe('underflow', lambda a, b:a/b,
                                             float16(-2.**-14-2**-24***REMOVED***, float16(2***REMOVED******REMOVED***
            assert_raises_fpe('underflow', lambda a, b:a/b,
                                             float16(2.**-14+2**-23***REMOVED***, float16(4***REMOVED******REMOVED***

            # Overflow errors
            assert_raises_fpe('overflow', lambda a, b:a*b, bx16, bx16***REMOVED***
            assert_raises_fpe('overflow', lambda a, b:a*b, bx16, by16***REMOVED***
            assert_raises_fpe('overflow', lambda a, b:a*b, by16, bx16***REMOVED***
            assert_raises_fpe('overflow', lambda a, b:a*b, by16, by16***REMOVED***
            assert_raises_fpe('overflow', lambda a, b:a/b, bx16, sx16***REMOVED***
            assert_raises_fpe('overflow', lambda a, b:a/b, bx16, sy16***REMOVED***
            assert_raises_fpe('overflow', lambda a, b:a/b, by16, sx16***REMOVED***
            assert_raises_fpe('overflow', lambda a, b:a/b, by16, sy16***REMOVED***
            assert_raises_fpe('overflow', lambda a, b:a+b,
                                             float16(65504***REMOVED***, float16(17***REMOVED******REMOVED***
            assert_raises_fpe('overflow', lambda a, b:a-b,
                                             float16(-65504***REMOVED***, float16(17***REMOVED******REMOVED***
            assert_raises_fpe('overflow', np.nextafter, float16(65504***REMOVED***, float16(np.inf***REMOVED******REMOVED***
            assert_raises_fpe('overflow', np.nextafter, float16(-65504***REMOVED***, float16(-np.inf***REMOVED******REMOVED***
            assert_raises_fpe('overflow', np.spacing, float16(65504***REMOVED******REMOVED***

            # Invalid value errors
            assert_raises_fpe('invalid', np.divide, float16(np.inf***REMOVED***, float16(np.inf***REMOVED******REMOVED***
            assert_raises_fpe('invalid', np.spacing, float16(np.inf***REMOVED******REMOVED***
            assert_raises_fpe('invalid', np.spacing, float16(np.nan***REMOVED******REMOVED***
            assert_raises_fpe('invalid', np.nextafter, float16(np.inf***REMOVED***, float16(0***REMOVED******REMOVED***
            assert_raises_fpe('invalid', np.nextafter, float16(-np.inf***REMOVED***, float16(0***REMOVED******REMOVED***
            assert_raises_fpe('invalid', np.nextafter, float16(0***REMOVED***, float16(np.nan***REMOVED******REMOVED***

            # These should not raise
            float16(65472***REMOVED***+float16(32***REMOVED***
            float16(2**-13***REMOVED***/float16(2***REMOVED***
            float16(2**-14***REMOVED***/float16(2**10***REMOVED***
            np.spacing(float16(-65504***REMOVED******REMOVED***
            np.nextafter(float16(65504***REMOVED***, float16(-np.inf***REMOVED******REMOVED***
            np.nextafter(float16(-65504***REMOVED***, float16(np.inf***REMOVED******REMOVED***
            float16(2**-14***REMOVED***/float16(2**10***REMOVED***
            float16(-2**-14***REMOVED***/float16(2**10***REMOVED***
            float16(2**-14+2**-23***REMOVED***/float16(2***REMOVED***
            float16(-2**-14-2**-23***REMOVED***/float16(2***REMOVED***

    def test_half_array_interface(self***REMOVED***:
        ***REMOVED***Test that half is compatible with __array_interface__***REMOVED***
        class Dummy:
            pass

        a = np.ones((1,***REMOVED***, dtype=float16***REMOVED***
        b = Dummy(***REMOVED***
        b.__array_interface__ = a.__array_interface__
        c = np.array(b***REMOVED***
        assert_(c.dtype == float16***REMOVED***
        assert_equal(a, c***REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
