from __future__ import division, absolute_import, print_function

import sys

import numpy as np
from numpy.testing import (
    TestCase, run_module_suite, assert_, assert_raises,
    assert_array_equal
***REMOVED***


class TestTake(TestCase***REMOVED***:
    def test_simple(self***REMOVED***:
        a = [[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED***
        a_str = [[b'1', b'2'***REMOVED***, [b'3', b'4'***REMOVED******REMOVED***
        modes = ['raise', 'wrap', 'clip'***REMOVED***
        indices = [-1, 4***REMOVED***
        index_arrays = [np.empty(0, dtype=np.intp***REMOVED***,
                        np.empty(tuple(***REMOVED***, dtype=np.intp***REMOVED***,
                        np.empty((1, 1***REMOVED***, dtype=np.intp***REMOVED******REMOVED***
        real_indices = {'raise': {-1: 1, 4: IndexError***REMOVED***,
                        'wrap': {-1: 1, 4: 0***REMOVED***,
                        'clip': {-1: 0, 4: 1***REMOVED******REMOVED***
        # Currently all types but object, use the same function generation.
        # So it should not be necessary to test all. However test also a non
        # refcounted struct on top of object.
        types = np.int, np.object, np.dtype([('', 'i', 2***REMOVED******REMOVED******REMOVED***
        for t in types:
            # ta works, even if the array may be odd if buffer interface is used
            ta = np.array(a if np.issubdtype(t, np.number***REMOVED*** else a_str, dtype=t***REMOVED***
            tresult = list(ta.T.copy(***REMOVED******REMOVED***
            for index_array in index_arrays:
                if index_array.size != 0:
                    tresult[0***REMOVED***.shape = (2,***REMOVED*** + index_array.shape
                    tresult[1***REMOVED***.shape = (2,***REMOVED*** + index_array.shape
                for mode in modes:
                    for index in indices:
                        real_index = real_indices[mode***REMOVED***[index***REMOVED***
                        if real_index is IndexError and index_array.size != 0:
                            index_array.put(0, index***REMOVED***
                            assert_raises(IndexError, ta.take, index_array,
                                          mode=mode, axis=1***REMOVED***
                        elif index_array.size != 0:
                            index_array.put(0, index***REMOVED***
                            res = ta.take(index_array, mode=mode, axis=1***REMOVED***
                            assert_array_equal(res, tresult[real_index***REMOVED******REMOVED***
                        else:
                            res = ta.take(index_array, mode=mode, axis=1***REMOVED***
                            assert_(res.shape == (2,***REMOVED*** + index_array.shape***REMOVED***

    def test_refcounting(self***REMOVED***:
        objects = [object(***REMOVED*** for i in range(10***REMOVED******REMOVED***
        for mode in ('raise', 'clip', 'wrap'***REMOVED***:
            a = np.array(objects***REMOVED***
            b = np.array([2, 2, 4, 5, 3, 5***REMOVED******REMOVED***
            a.take(b, out=a[:6***REMOVED******REMOVED***
            del a
            assert_(all(sys.getrefcount(o***REMOVED*** == 3 for o in objects***REMOVED******REMOVED***
            # not contiguous, example:
            a = np.array(objects * 2***REMOVED***[::2***REMOVED***
            a.take(b, out=a[:6***REMOVED******REMOVED***
            del a
            assert_(all(sys.getrefcount(o***REMOVED*** == 3 for o in objects***REMOVED******REMOVED***

    def test_unicode_mode(self***REMOVED***:
        d = np.arange(10***REMOVED***
        k = b'\xc3\xa4'.decode("UTF8"***REMOVED***
        assert_raises(ValueError, d.take, 5, mode=k***REMOVED***

    def test_empty_partition(self***REMOVED***:
        # In reference to github issue #6530
        a_original = np.array([0, 2, 4, 6, 8, 10***REMOVED******REMOVED***
        a = a_original.copy(***REMOVED***

        # An empty partition should be a successful no-op
        a.partition(np.array([***REMOVED***, dtype=np.int16***REMOVED******REMOVED***

        assert_array_equal(a, a_original***REMOVED***

    def test_empty_argpartition(self***REMOVED***:
            # In reference to github issue #6530
            a = np.array([0, 2, 4, 6, 8, 10***REMOVED******REMOVED***
            a = a.argpartition(np.array([***REMOVED***, dtype=np.int16***REMOVED******REMOVED***

            b = np.array([0, 1, 2, 3, 4, 5***REMOVED******REMOVED***
            assert_array_equal(a, b***REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
