from __future__ import division, absolute_import, print_function

import sys
import itertools
import contextlib
import operator

import numpy as np
import numpy.core.multiarray_tests as mt
from numpy.compat import long

from numpy.testing import assert_raises, assert_equal


INT64_MAX = np.iinfo(np.int64***REMOVED***.max
INT64_MIN = np.iinfo(np.int64***REMOVED***.min
INT64_MID = 2**32

# int128 is not two's complement, the sign bit is separate
INT128_MAX = 2**128 - 1
INT128_MIN = -INT128_MAX
INT128_MID = 2**64

INT64_VALUES = (
    [INT64_MIN + j for j in range(20***REMOVED******REMOVED*** +
    [INT64_MAX - j for j in range(20***REMOVED******REMOVED*** +
    [INT64_MID + j for j in range(-20, 20***REMOVED******REMOVED*** +
    [2*INT64_MID + j for j in range(-20, 20***REMOVED******REMOVED*** +
    [INT64_MID//2 + j for j in range(-20, 20***REMOVED******REMOVED*** +
    list(range(-70, 70***REMOVED******REMOVED***
***REMOVED***

INT128_VALUES = (
    [INT128_MIN + j for j in range(20***REMOVED******REMOVED*** +
    [INT128_MAX - j for j in range(20***REMOVED******REMOVED*** +
    [INT128_MID + j for j in range(-20, 20***REMOVED******REMOVED*** +
    [2*INT128_MID + j for j in range(-20, 20***REMOVED******REMOVED*** +
    [INT128_MID//2 + j for j in range(-20, 20***REMOVED******REMOVED*** +
    list(range(-70, 70***REMOVED******REMOVED*** +
    [False***REMOVED***  # negative zero
***REMOVED***

INT64_POS_VALUES = [x for x in INT64_VALUES if x > 0***REMOVED***


@contextlib.contextmanager
def exc_iter(*args***REMOVED***:
    ***REMOVED***
    Iterate over Cartesian product of *args, and if an exception is raised,
    add information of the current iterate.
    ***REMOVED***

    value = [None***REMOVED***

    def iterate(***REMOVED***:
        for v in itertools.product(*args***REMOVED***:
            value[0***REMOVED*** = v
            yield v

    ***REMOVED***
        yield iterate(***REMOVED***
    ***REMOVED***
        import traceback
        msg = "At: %r\n%s" % (repr(value[0***REMOVED******REMOVED***,
                              traceback.format_exc(***REMOVED******REMOVED***
        raise AssertionError(msg***REMOVED***


def test_safe_binop(***REMOVED***:
    # Test checked arithmetic routines

    ops = [
        (operator.add, 1***REMOVED***,
        (operator.sub, 2***REMOVED***,
        (operator.mul, 3***REMOVED***
    ***REMOVED***

    with exc_iter(ops, INT64_VALUES, INT64_VALUES***REMOVED*** as it:
        for xop, a, b in it:
            pyop, op = xop
            c = pyop(a, b***REMOVED***

            if not (INT64_MIN <= c <= INT64_MAX***REMOVED***:
                assert_raises(OverflowError, mt.extint_safe_binop, a, b, op***REMOVED***
            else:
                d = mt.extint_safe_binop(a, b, op***REMOVED***
                if c != d:
                    # assert_equal is slow
                    assert_equal(d, c***REMOVED***


def test_to_128(***REMOVED***:
    with exc_iter(INT64_VALUES***REMOVED*** as it:
        for a, in it:
            b = mt.extint_to_128(a***REMOVED***
            if a != b:
                assert_equal(b, a***REMOVED***


def test_to_64(***REMOVED***:
    with exc_iter(INT128_VALUES***REMOVED*** as it:
        for a, in it:
            if not (INT64_MIN <= a <= INT64_MAX***REMOVED***:
                assert_raises(OverflowError, mt.extint_to_64, a***REMOVED***
            else:
                b = mt.extint_to_64(a***REMOVED***
                if a != b:
                    assert_equal(b, a***REMOVED***


def test_mul_64_64(***REMOVED***:
    with exc_iter(INT64_VALUES, INT64_VALUES***REMOVED*** as it:
        for a, b in it:
            c = a * b
            d = mt.extint_mul_64_64(a, b***REMOVED***
            if c != d:
                assert_equal(d, c***REMOVED***


def test_add_128(***REMOVED***:
    with exc_iter(INT128_VALUES, INT128_VALUES***REMOVED*** as it:
        for a, b in it:
            c = a + b
            if not (INT128_MIN <= c <= INT128_MAX***REMOVED***:
                assert_raises(OverflowError, mt.extint_add_128, a, b***REMOVED***
            else:
                d = mt.extint_add_128(a, b***REMOVED***
                if c != d:
                    assert_equal(d, c***REMOVED***


def test_sub_128(***REMOVED***:
    with exc_iter(INT128_VALUES, INT128_VALUES***REMOVED*** as it:
        for a, b in it:
            c = a - b
            if not (INT128_MIN <= c <= INT128_MAX***REMOVED***:
                assert_raises(OverflowError, mt.extint_sub_128, a, b***REMOVED***
            else:
                d = mt.extint_sub_128(a, b***REMOVED***
                if c != d:
                    assert_equal(d, c***REMOVED***


def test_neg_128(***REMOVED***:
    with exc_iter(INT128_VALUES***REMOVED*** as it:
        for a, in it:
            b = -a
            c = mt.extint_neg_128(a***REMOVED***
            if b != c:
                assert_equal(c, b***REMOVED***


def test_shl_128(***REMOVED***:
    with exc_iter(INT128_VALUES***REMOVED*** as it:
        for a, in it:
            if a < 0:
                b = -(((-a***REMOVED*** << 1***REMOVED*** & (2**128-1***REMOVED******REMOVED***
            else:
                b = (a << 1***REMOVED*** & (2**128-1***REMOVED***
            c = mt.extint_shl_128(a***REMOVED***
            if b != c:
                assert_equal(c, b***REMOVED***


def test_shr_128(***REMOVED***:
    with exc_iter(INT128_VALUES***REMOVED*** as it:
        for a, in it:
            if a < 0:
                b = -((-a***REMOVED*** >> 1***REMOVED***
            else:
                b = a >> 1
            c = mt.extint_shr_128(a***REMOVED***
            if b != c:
                assert_equal(c, b***REMOVED***


def test_gt_128(***REMOVED***:
    with exc_iter(INT128_VALUES, INT128_VALUES***REMOVED*** as it:
        for a, b in it:
            c = a > b
            d = mt.extint_gt_128(a, b***REMOVED***
            if c != d:
                assert_equal(d, c***REMOVED***


def test_divmod_128_64(***REMOVED***:
    with exc_iter(INT128_VALUES, INT64_POS_VALUES***REMOVED*** as it:
        for a, b in it:
            if a >= 0:
                c, cr = divmod(a, b***REMOVED***
            else:
                c, cr = divmod(-a, b***REMOVED***
                c = -c
                cr = -cr

            d, dr = mt.extint_divmod_128_64(a, b***REMOVED***

            if c != d or d != dr or b*d + dr != a:
                assert_equal(d, c***REMOVED***
                assert_equal(dr, cr***REMOVED***
                assert_equal(b*d + dr, a***REMOVED***


def test_floordiv_128_64(***REMOVED***:
    with exc_iter(INT128_VALUES, INT64_POS_VALUES***REMOVED*** as it:
        for a, b in it:
            c = a // b
            d = mt.extint_floordiv_128_64(a, b***REMOVED***

            if c != d:
                assert_equal(d, c***REMOVED***


def test_ceildiv_128_64(***REMOVED***:
    with exc_iter(INT128_VALUES, INT64_POS_VALUES***REMOVED*** as it:
        for a, b in it:
            c = (a + b - 1***REMOVED*** // b
            d = mt.extint_ceildiv_128_64(a, b***REMOVED***

            if c != d:
                assert_equal(d, c***REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
