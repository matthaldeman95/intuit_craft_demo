from __future__ import division, absolute_import, print_function

import sys

import numpy as np
from numpy.compat import sixu
from numpy.testing import (
     run_module_suite, assert_, assert_equal, assert_array_equal,
     assert_raises
***REMOVED***

# Switch between new behaviour when NPY_RELAXED_STRIDES_CHECKING is set.
NPY_RELAXED_STRIDES_CHECKING = np.ones((10, 1***REMOVED***, order='C'***REMOVED***.flags.f_contiguous


def test_array_array(***REMOVED***:
    tobj = type(object***REMOVED***
    ones11 = np.ones((1, 1***REMOVED***, np.float64***REMOVED***
    tndarray = type(ones11***REMOVED***
    # Test is_ndarray
    assert_equal(np.array(ones11, dtype=np.float64***REMOVED***, ones11***REMOVED***
    old_refcount = sys.getrefcount(tndarray***REMOVED***
    np.array(ones11***REMOVED***
    assert_equal(old_refcount, sys.getrefcount(tndarray***REMOVED******REMOVED***

    # test None
    assert_equal(np.array(None, dtype=np.float64***REMOVED***,
                 np.array(np.nan, dtype=np.float64***REMOVED******REMOVED***
    old_refcount = sys.getrefcount(tobj***REMOVED***
    np.array(None, dtype=np.float64***REMOVED***
    assert_equal(old_refcount, sys.getrefcount(tobj***REMOVED******REMOVED***

    # test scalar
    assert_equal(np.array(1.0, dtype=np.float64***REMOVED***,
                 np.ones((***REMOVED***, dtype=np.float64***REMOVED******REMOVED***
    old_refcount = sys.getrefcount(np.float64***REMOVED***
    np.array(np.array(1.0, dtype=np.float64***REMOVED***, dtype=np.float64***REMOVED***
    assert_equal(old_refcount, sys.getrefcount(np.float64***REMOVED******REMOVED***

    # test string
    S2 = np.dtype((str, 2***REMOVED******REMOVED***
    S3 = np.dtype((str, 3***REMOVED******REMOVED***
    S5 = np.dtype((str, 5***REMOVED******REMOVED***
    assert_equal(np.array("1.0", dtype=np.float64***REMOVED***,
                 np.ones((***REMOVED***, dtype=np.float64***REMOVED******REMOVED***
    assert_equal(np.array("1.0"***REMOVED***.dtype, S3***REMOVED***
    assert_equal(np.array("1.0", dtype=str***REMOVED***.dtype, S3***REMOVED***
    assert_equal(np.array("1.0", dtype=S2***REMOVED***, np.array("1."***REMOVED******REMOVED***
    assert_equal(np.array("1", dtype=S5***REMOVED***, np.ones((***REMOVED***, dtype=S5***REMOVED******REMOVED***

    # test unicode
    _unicode = globals(***REMOVED***.get("unicode"***REMOVED***
    if _unicode:
        U2 = np.dtype((_unicode, 2***REMOVED******REMOVED***
        U3 = np.dtype((_unicode, 3***REMOVED******REMOVED***
        U5 = np.dtype((_unicode, 5***REMOVED******REMOVED***
        assert_equal(np.array(_unicode("1.0"***REMOVED***, dtype=np.float64***REMOVED***,
                     np.ones((***REMOVED***, dtype=np.float64***REMOVED******REMOVED***
        assert_equal(np.array(_unicode("1.0"***REMOVED******REMOVED***.dtype, U3***REMOVED***
        assert_equal(np.array(_unicode("1.0"***REMOVED***, dtype=_unicode***REMOVED***.dtype, U3***REMOVED***
        assert_equal(np.array(_unicode("1.0"***REMOVED***, dtype=U2***REMOVED***,
                     np.array(_unicode("1."***REMOVED******REMOVED******REMOVED***
        assert_equal(np.array(_unicode("1"***REMOVED***, dtype=U5***REMOVED***,
                     np.ones((***REMOVED***, dtype=U5***REMOVED******REMOVED***

    builtins = getattr(__builtins__, '__dict__', __builtins__***REMOVED***
    assert_(isinstance(builtins, dict***REMOVED******REMOVED***

    # test buffer
    _buffer = builtins.get("buffer"***REMOVED***
    if _buffer and sys.version_info[:3***REMOVED*** >= (2, 7, 5***REMOVED***:
        # This test fails for earlier versions of Python.
        # Evidently a bug got fixed in 2.7.5.
        dat = np.array(_buffer('1.0'***REMOVED***, dtype=np.float64***REMOVED***
        assert_equal(dat, [49.0, 46.0, 48.0***REMOVED******REMOVED***
        assert_(dat.dtype.type is np.float64***REMOVED***

        dat = np.array(_buffer(b'1.0'***REMOVED******REMOVED***
        assert_equal(dat, [49, 46, 48***REMOVED******REMOVED***
        assert_(dat.dtype.type is np.uint8***REMOVED***

    # test memoryview, new version of buffer
    _memoryview = builtins.get("memoryview"***REMOVED***
    if _memoryview:
        dat = np.array(_memoryview(b'1.0'***REMOVED***, dtype=np.float64***REMOVED***
        assert_equal(dat, [49.0, 46.0, 48.0***REMOVED******REMOVED***
        assert_(dat.dtype.type is np.float64***REMOVED***

        dat = np.array(_memoryview(b'1.0'***REMOVED******REMOVED***
        assert_equal(dat, [49, 46, 48***REMOVED******REMOVED***
        assert_(dat.dtype.type is np.uint8***REMOVED***

    # test array interface
    a = np.array(100.0, dtype=np.float64***REMOVED***
    o = type("o", (object,***REMOVED***,
             dict(__array_interface__=a.__array_interface__***REMOVED******REMOVED***
    assert_equal(np.array(o, dtype=np.float64***REMOVED***, a***REMOVED***

    # test array_struct interface
    a = np.array([(1, 4.0, 'Hello'***REMOVED***, (2, 6.0, 'World'***REMOVED******REMOVED***,
                 dtype=[('f0', int***REMOVED***, ('f1', float***REMOVED***, ('f2', str***REMOVED******REMOVED******REMOVED***
    o = type("o", (object,***REMOVED***,
             dict(__array_struct__=a.__array_struct__***REMOVED******REMOVED***
    ## wasn't what I expected... is np.array(o***REMOVED*** supposed to equal a ?
    ## instead we get a array([...***REMOVED***, dtype=">V18"***REMOVED***
    assert_equal(str(np.array(o***REMOVED***.data***REMOVED***, str(a.data***REMOVED******REMOVED***

    # test array
    o = type("o", (object,***REMOVED***,
             dict(__array__=lambda *x: np.array(100.0, dtype=np.float64***REMOVED******REMOVED******REMOVED***(***REMOVED***
    assert_equal(np.array(o, dtype=np.float64***REMOVED***, np.array(100.0, np.float64***REMOVED******REMOVED***

    # test recursion
    nested = 1.5
    for i in range(np.MAXDIMS***REMOVED***:
        nested = [nested***REMOVED***

    # no error
    np.array(nested***REMOVED***

    # Exceeds recursion limit
    assert_raises(ValueError, np.array, [nested***REMOVED***, dtype=np.float64***REMOVED***

    # Try with lists...
    assert_equal(np.array([None***REMOVED*** * 10, dtype=np.float64***REMOVED***,
                 np.full((10,***REMOVED***, np.nan, dtype=np.float64***REMOVED******REMOVED***
    assert_equal(np.array([[None***REMOVED******REMOVED*** * 10, dtype=np.float64***REMOVED***,
                 np.full((10, 1***REMOVED***, np.nan, dtype=np.float64***REMOVED******REMOVED***
    assert_equal(np.array([[None***REMOVED*** * 10***REMOVED***, dtype=np.float64***REMOVED***,
                 np.full((1, 10***REMOVED***, np.nan, dtype=np.float64***REMOVED******REMOVED***
    assert_equal(np.array([[None***REMOVED*** * 10***REMOVED*** * 10, dtype=np.float64***REMOVED***,
                 np.full((10, 10***REMOVED***, np.nan, dtype=np.float64***REMOVED******REMOVED***

    assert_equal(np.array([1.0***REMOVED*** * 10, dtype=np.float64***REMOVED***,
                 np.ones((10,***REMOVED***, dtype=np.float64***REMOVED******REMOVED***
    assert_equal(np.array([[1.0***REMOVED******REMOVED*** * 10, dtype=np.float64***REMOVED***,
                 np.ones((10, 1***REMOVED***, dtype=np.float64***REMOVED******REMOVED***
    assert_equal(np.array([[1.0***REMOVED*** * 10***REMOVED***, dtype=np.float64***REMOVED***,
                 np.ones((1, 10***REMOVED***, dtype=np.float64***REMOVED******REMOVED***
    assert_equal(np.array([[1.0***REMOVED*** * 10***REMOVED*** * 10, dtype=np.float64***REMOVED***,
                 np.ones((10, 10***REMOVED***, dtype=np.float64***REMOVED******REMOVED***

    # Try with tuples
    assert_equal(np.array((None,***REMOVED*** * 10, dtype=np.float64***REMOVED***,
                 np.full((10,***REMOVED***, np.nan, dtype=np.float64***REMOVED******REMOVED***
    assert_equal(np.array([(None,***REMOVED******REMOVED*** * 10, dtype=np.float64***REMOVED***,
                 np.full((10, 1***REMOVED***, np.nan, dtype=np.float64***REMOVED******REMOVED***
    assert_equal(np.array([(None,***REMOVED*** * 10***REMOVED***, dtype=np.float64***REMOVED***,
                 np.full((1, 10***REMOVED***, np.nan, dtype=np.float64***REMOVED******REMOVED***
    assert_equal(np.array([(None,***REMOVED*** * 10***REMOVED*** * 10, dtype=np.float64***REMOVED***,
                 np.full((10, 10***REMOVED***, np.nan, dtype=np.float64***REMOVED******REMOVED***

    assert_equal(np.array((1.0,***REMOVED*** * 10, dtype=np.float64***REMOVED***,
                 np.ones((10,***REMOVED***, dtype=np.float64***REMOVED******REMOVED***
    assert_equal(np.array([(1.0,***REMOVED******REMOVED*** * 10, dtype=np.float64***REMOVED***,
                 np.ones((10, 1***REMOVED***, dtype=np.float64***REMOVED******REMOVED***
    assert_equal(np.array([(1.0,***REMOVED*** * 10***REMOVED***, dtype=np.float64***REMOVED***,
                 np.ones((1, 10***REMOVED***, dtype=np.float64***REMOVED******REMOVED***
    assert_equal(np.array([(1.0,***REMOVED*** * 10***REMOVED*** * 10, dtype=np.float64***REMOVED***,
                 np.ones((10, 10***REMOVED***, dtype=np.float64***REMOVED******REMOVED***


def test_fastCopyAndTranspose(***REMOVED***:
    # 0D array
    a = np.array(2***REMOVED***
    b = np.fastCopyAndTranspose(a***REMOVED***
    assert_equal(b, a.T***REMOVED***
    assert_(b.flags.owndata***REMOVED***

    # 1D array
    a = np.array([3, 2, 7, 0***REMOVED******REMOVED***
    b = np.fastCopyAndTranspose(a***REMOVED***
    assert_equal(b, a.T***REMOVED***
    assert_(b.flags.owndata***REMOVED***

    # 2D array
    a = np.arange(6***REMOVED***.reshape(2, 3***REMOVED***
    b = np.fastCopyAndTranspose(a***REMOVED***
    assert_equal(b, a.T***REMOVED***
    assert_(b.flags.owndata***REMOVED***

def test_array_astype(***REMOVED***:
    a = np.arange(6, dtype='f4'***REMOVED***.reshape(2, 3***REMOVED***
    # Default behavior: allows unsafe casts, keeps memory layout,
    #                   always copies.
    b = a.astype('i4'***REMOVED***
    assert_equal(a, b***REMOVED***
    assert_equal(b.dtype, np.dtype('i4'***REMOVED******REMOVED***
    assert_equal(a.strides, b.strides***REMOVED***
    b = a.T.astype('i4'***REMOVED***
    assert_equal(a.T, b***REMOVED***
    assert_equal(b.dtype, np.dtype('i4'***REMOVED******REMOVED***
    assert_equal(a.T.strides, b.strides***REMOVED***
    b = a.astype('f4'***REMOVED***
    assert_equal(a, b***REMOVED***
    assert_(not (a is b***REMOVED******REMOVED***

    # copy=False parameter can sometimes skip a copy
    b = a.astype('f4', copy=False***REMOVED***
    assert_(a is b***REMOVED***

    # order parameter allows overriding of the memory layout,
    # forcing a copy if the layout is wrong
    b = a.astype('f4', order='F', copy=False***REMOVED***
    assert_equal(a, b***REMOVED***
    assert_(not (a is b***REMOVED******REMOVED***
    assert_(b.flags.f_contiguous***REMOVED***

    b = a.astype('f4', order='C', copy=False***REMOVED***
    assert_equal(a, b***REMOVED***
    assert_(a is b***REMOVED***
    assert_(b.flags.c_contiguous***REMOVED***

    # casting parameter allows catching bad casts
    b = a.astype('c8', casting='safe'***REMOVED***
    assert_equal(a, b***REMOVED***
    assert_equal(b.dtype, np.dtype('c8'***REMOVED******REMOVED***

    assert_raises(TypeError, a.astype, 'i4', casting='safe'***REMOVED***

    # subok=False passes through a non-subclassed array
    b = a.astype('f4', subok=0, copy=False***REMOVED***
    assert_(a is b***REMOVED***

    a = np.matrix([[0, 1, 2***REMOVED***, [3, 4, 5***REMOVED******REMOVED***, dtype='f4'***REMOVED***

    # subok=True passes through a matrix
    b = a.astype('f4', subok=True, copy=False***REMOVED***
    assert_(a is b***REMOVED***

    # subok=True is default, and creates a subtype on a cast
    b = a.astype('i4', copy=False***REMOVED***
    assert_equal(a, b***REMOVED***
    assert_equal(type(b***REMOVED***, np.matrix***REMOVED***

    # subok=False never returns a matrix
    b = a.astype('f4', subok=False, copy=False***REMOVED***
    assert_equal(a, b***REMOVED***
    assert_(not (a is b***REMOVED******REMOVED***
    assert_(type(b***REMOVED*** is not np.matrix***REMOVED***

    # Make sure converting from string object to fixed length string
    # does not truncate.
    a = np.array([b'a'*100***REMOVED***, dtype='O'***REMOVED***
    b = a.astype('S'***REMOVED***
    assert_equal(a, b***REMOVED***
    assert_equal(b.dtype, np.dtype('S100'***REMOVED******REMOVED***
    a = np.array([sixu('a'***REMOVED****100***REMOVED***, dtype='O'***REMOVED***
    b = a.astype('U'***REMOVED***
    assert_equal(a, b***REMOVED***
    assert_equal(b.dtype, np.dtype('U100'***REMOVED******REMOVED***

    # Same test as above but for strings shorter than 64 characters
    a = np.array([b'a'*10***REMOVED***, dtype='O'***REMOVED***
    b = a.astype('S'***REMOVED***
    assert_equal(a, b***REMOVED***
    assert_equal(b.dtype, np.dtype('S10'***REMOVED******REMOVED***
    a = np.array([sixu('a'***REMOVED****10***REMOVED***, dtype='O'***REMOVED***
    b = a.astype('U'***REMOVED***
    assert_equal(a, b***REMOVED***
    assert_equal(b.dtype, np.dtype('U10'***REMOVED******REMOVED***

    a = np.array(123456789012345678901234567890, dtype='O'***REMOVED***.astype('S'***REMOVED***
    assert_array_equal(a, np.array(b'1234567890' * 3, dtype='S30'***REMOVED******REMOVED***
    a = np.array(123456789012345678901234567890, dtype='O'***REMOVED***.astype('U'***REMOVED***
    assert_array_equal(a, np.array(sixu('1234567890' * 3***REMOVED***, dtype='U30'***REMOVED******REMOVED***

    a = np.array([123456789012345678901234567890***REMOVED***, dtype='O'***REMOVED***.astype('S'***REMOVED***
    assert_array_equal(a, np.array(b'1234567890' * 3, dtype='S30'***REMOVED******REMOVED***
    a = np.array([123456789012345678901234567890***REMOVED***, dtype='O'***REMOVED***.astype('U'***REMOVED***
    assert_array_equal(a, np.array(sixu('1234567890' * 3***REMOVED***, dtype='U30'***REMOVED******REMOVED***

    a = np.array(123456789012345678901234567890, dtype='S'***REMOVED***
    assert_array_equal(a, np.array(b'1234567890' * 3, dtype='S30'***REMOVED******REMOVED***
    a = np.array(123456789012345678901234567890, dtype='U'***REMOVED***
    assert_array_equal(a, np.array(sixu('1234567890' * 3***REMOVED***, dtype='U30'***REMOVED******REMOVED***

    a = np.array(sixu('a\u0140'***REMOVED***, dtype='U'***REMOVED***
    b = np.ndarray(buffer=a, dtype='uint32', shape=2***REMOVED***
    assert_(b.size == 2***REMOVED***

    a = np.array([1000***REMOVED***, dtype='i4'***REMOVED***
    assert_raises(TypeError, a.astype, 'S1', casting='safe'***REMOVED***

    a = np.array(1000, dtype='i4'***REMOVED***
    assert_raises(TypeError, a.astype, 'U1', casting='safe'***REMOVED***

def test_copyto_fromscalar(***REMOVED***:
    a = np.arange(6, dtype='f4'***REMOVED***.reshape(2, 3***REMOVED***

    # Simple copy
    np.copyto(a, 1.5***REMOVED***
    assert_equal(a, 1.5***REMOVED***
    np.copyto(a.T, 2.5***REMOVED***
    assert_equal(a, 2.5***REMOVED***

    # Where-masked copy
    mask = np.array([[0, 1, 0***REMOVED***, [0, 0, 1***REMOVED******REMOVED***, dtype='?'***REMOVED***
    np.copyto(a, 3.5, where=mask***REMOVED***
    assert_equal(a, [[2.5, 3.5, 2.5***REMOVED***, [2.5, 2.5, 3.5***REMOVED******REMOVED******REMOVED***
    mask = np.array([[0, 1***REMOVED***, [1, 1***REMOVED***, [1, 0***REMOVED******REMOVED***, dtype='?'***REMOVED***
    np.copyto(a.T, 4.5, where=mask***REMOVED***
    assert_equal(a, [[2.5, 4.5, 4.5***REMOVED***, [4.5, 4.5, 3.5***REMOVED******REMOVED******REMOVED***

def test_copyto(***REMOVED***:
    a = np.arange(6, dtype='i4'***REMOVED***.reshape(2, 3***REMOVED***

    # Simple copy
    np.copyto(a, [[3, 1, 5***REMOVED***, [6, 2, 1***REMOVED******REMOVED******REMOVED***
    assert_equal(a, [[3, 1, 5***REMOVED***, [6, 2, 1***REMOVED******REMOVED******REMOVED***

    # Overlapping copy should work
    np.copyto(a[:, :2***REMOVED***, a[::-1, 1::-1***REMOVED******REMOVED***
    assert_equal(a, [[2, 6, 5***REMOVED***, [1, 3, 1***REMOVED******REMOVED******REMOVED***

    # Defaults to 'same_kind' casting
    assert_raises(TypeError, np.copyto, a, 1.5***REMOVED***

    # Force a copy with 'unsafe' casting, truncating 1.5 to 1
    np.copyto(a, 1.5, casting='unsafe'***REMOVED***
    assert_equal(a, 1***REMOVED***

    # Copying with a mask
    np.copyto(a, 3, where=[True, False, True***REMOVED******REMOVED***
    assert_equal(a, [[3, 1, 3***REMOVED***, [3, 1, 3***REMOVED******REMOVED******REMOVED***

    # Casting rule still applies with a mask
    assert_raises(TypeError, np.copyto, a, 3.5, where=[True, False, True***REMOVED******REMOVED***

    # Lists of integer 0's and 1's is ok too
    np.copyto(a, 4.0, casting='unsafe', where=[[0, 1, 1***REMOVED***, [1, 0, 0***REMOVED******REMOVED******REMOVED***
    assert_equal(a, [[3, 4, 4***REMOVED***, [4, 1, 3***REMOVED******REMOVED******REMOVED***

    # Overlapping copy with mask should work
    np.copyto(a[:, :2***REMOVED***, a[::-1, 1::-1***REMOVED***, where=[[0, 1***REMOVED***, [1, 1***REMOVED******REMOVED******REMOVED***
    assert_equal(a, [[3, 4, 4***REMOVED***, [4, 3, 3***REMOVED******REMOVED******REMOVED***

    # 'dst' must be an array
    assert_raises(TypeError, np.copyto, [1, 2, 3***REMOVED***, [2, 3, 4***REMOVED******REMOVED***

def test_copyto_permut(***REMOVED***:
    # test explicit overflow case
    pad = 500
    l = [True***REMOVED*** * pad + [True, True, True, True***REMOVED***
    r = np.zeros(len(l***REMOVED***-pad***REMOVED***
    d = np.ones(len(l***REMOVED***-pad***REMOVED***
    mask = np.array(l***REMOVED***[pad:***REMOVED***
    np.copyto(r, d, where=mask[::-1***REMOVED******REMOVED***

    # test all permutation of possible masks, 9 should be sufficient for
    # current 4 byte unrolled code
    power = 9
    d = np.ones(power***REMOVED***
    for i in range(2**power***REMOVED***:
        r = np.zeros(power***REMOVED***
        l = [(i & x***REMOVED*** != 0 for x in range(power***REMOVED******REMOVED***
        mask = np.array(l***REMOVED***
        np.copyto(r, d, where=mask***REMOVED***
        assert_array_equal(r == 1, l***REMOVED***
        assert_equal(r.sum(***REMOVED***, sum(l***REMOVED******REMOVED***

        r = np.zeros(power***REMOVED***
        np.copyto(r, d, where=mask[::-1***REMOVED******REMOVED***
        assert_array_equal(r == 1, l[::-1***REMOVED******REMOVED***
        assert_equal(r.sum(***REMOVED***, sum(l***REMOVED******REMOVED***

        r = np.zeros(power***REMOVED***
        np.copyto(r[::2***REMOVED***, d[::2***REMOVED***, where=mask[::2***REMOVED******REMOVED***
        assert_array_equal(r[::2***REMOVED*** == 1, l[::2***REMOVED******REMOVED***
        assert_equal(r[::2***REMOVED***.sum(***REMOVED***, sum(l[::2***REMOVED******REMOVED******REMOVED***

        r = np.zeros(power***REMOVED***
        np.copyto(r[::2***REMOVED***, d[::2***REMOVED***, where=mask[::-2***REMOVED******REMOVED***
        assert_array_equal(r[::2***REMOVED*** == 1, l[::-2***REMOVED******REMOVED***
        assert_equal(r[::2***REMOVED***.sum(***REMOVED***, sum(l[::-2***REMOVED******REMOVED******REMOVED***

        for c in [0xFF, 0x7F, 0x02, 0x10***REMOVED***:
            r = np.zeros(power***REMOVED***
            mask = np.array(l***REMOVED***
            imask = np.array(l***REMOVED***.view(np.uint8***REMOVED***
            imask[mask != 0***REMOVED*** = c
            np.copyto(r, d, where=mask***REMOVED***
            assert_array_equal(r == 1, l***REMOVED***
            assert_equal(r.sum(***REMOVED***, sum(l***REMOVED******REMOVED***

    r = np.zeros(power***REMOVED***
    np.copyto(r, d, where=True***REMOVED***
    assert_equal(r.sum(***REMOVED***, r.size***REMOVED***
    r = np.ones(power***REMOVED***
    d = np.zeros(power***REMOVED***
    np.copyto(r, d, where=False***REMOVED***
    assert_equal(r.sum(***REMOVED***, r.size***REMOVED***

def test_copy_order(***REMOVED***:
    a = np.arange(24***REMOVED***.reshape(2, 1, 3, 4***REMOVED***
    b = a.copy(order='F'***REMOVED***
    c = np.arange(24***REMOVED***.reshape(2, 1, 4, 3***REMOVED***.swapaxes(2, 3***REMOVED***

    def check_copy_result(x, y, ccontig, fcontig, strides=False***REMOVED***:
        assert_(not (x is y***REMOVED******REMOVED***
        assert_equal(x, y***REMOVED***
        assert_equal(res.flags.c_contiguous, ccontig***REMOVED***
        assert_equal(res.flags.f_contiguous, fcontig***REMOVED***
        # This check is impossible only because
        # NPY_RELAXED_STRIDES_CHECKING changes the strides actively
        if not NPY_RELAXED_STRIDES_CHECKING:
            if strides:
                assert_equal(x.strides, y.strides***REMOVED***
            else:
                assert_(x.strides != y.strides***REMOVED***

    # Validate the initial state of a, b, and c
    assert_(a.flags.c_contiguous***REMOVED***
    assert_(not a.flags.f_contiguous***REMOVED***
    assert_(not b.flags.c_contiguous***REMOVED***
    assert_(b.flags.f_contiguous***REMOVED***
    assert_(not c.flags.c_contiguous***REMOVED***
    assert_(not c.flags.f_contiguous***REMOVED***

    # Copy with order='C'
    res = a.copy(order='C'***REMOVED***
    check_copy_result(res, a, ccontig=True, fcontig=False, strides=True***REMOVED***
    res = b.copy(order='C'***REMOVED***
    check_copy_result(res, b, ccontig=True, fcontig=False, strides=False***REMOVED***
    res = c.copy(order='C'***REMOVED***
    check_copy_result(res, c, ccontig=True, fcontig=False, strides=False***REMOVED***
    res = np.copy(a, order='C'***REMOVED***
    check_copy_result(res, a, ccontig=True, fcontig=False, strides=True***REMOVED***
    res = np.copy(b, order='C'***REMOVED***
    check_copy_result(res, b, ccontig=True, fcontig=False, strides=False***REMOVED***
    res = np.copy(c, order='C'***REMOVED***
    check_copy_result(res, c, ccontig=True, fcontig=False, strides=False***REMOVED***

    # Copy with order='F'
    res = a.copy(order='F'***REMOVED***
    check_copy_result(res, a, ccontig=False, fcontig=True, strides=False***REMOVED***
    res = b.copy(order='F'***REMOVED***
    check_copy_result(res, b, ccontig=False, fcontig=True, strides=True***REMOVED***
    res = c.copy(order='F'***REMOVED***
    check_copy_result(res, c, ccontig=False, fcontig=True, strides=False***REMOVED***
    res = np.copy(a, order='F'***REMOVED***
    check_copy_result(res, a, ccontig=False, fcontig=True, strides=False***REMOVED***
    res = np.copy(b, order='F'***REMOVED***
    check_copy_result(res, b, ccontig=False, fcontig=True, strides=True***REMOVED***
    res = np.copy(c, order='F'***REMOVED***
    check_copy_result(res, c, ccontig=False, fcontig=True, strides=False***REMOVED***

    # Copy with order='K'
    res = a.copy(order='K'***REMOVED***
    check_copy_result(res, a, ccontig=True, fcontig=False, strides=True***REMOVED***
    res = b.copy(order='K'***REMOVED***
    check_copy_result(res, b, ccontig=False, fcontig=True, strides=True***REMOVED***
    res = c.copy(order='K'***REMOVED***
    check_copy_result(res, c, ccontig=False, fcontig=False, strides=True***REMOVED***
    res = np.copy(a, order='K'***REMOVED***
    check_copy_result(res, a, ccontig=True, fcontig=False, strides=True***REMOVED***
    res = np.copy(b, order='K'***REMOVED***
    check_copy_result(res, b, ccontig=False, fcontig=True, strides=True***REMOVED***
    res = np.copy(c, order='K'***REMOVED***
    check_copy_result(res, c, ccontig=False, fcontig=False, strides=True***REMOVED***

def test_contiguous_flags(***REMOVED***:
    a = np.ones((4, 4, 1***REMOVED******REMOVED***[::2,:,:***REMOVED***
    if NPY_RELAXED_STRIDES_CHECKING:
        a.strides = a.strides[:2***REMOVED*** + (-123,***REMOVED***
    b = np.ones((2, 2, 1, 2, 2***REMOVED******REMOVED***.swapaxes(3, 4***REMOVED***

    def check_contig(a, ccontig, fcontig***REMOVED***:
        assert_(a.flags.c_contiguous == ccontig***REMOVED***
        assert_(a.flags.f_contiguous == fcontig***REMOVED***

    # Check if new arrays are correct:
    check_contig(a, False, False***REMOVED***
    check_contig(b, False, False***REMOVED***
    if NPY_RELAXED_STRIDES_CHECKING:
        check_contig(np.empty((2, 2, 0, 2, 2***REMOVED******REMOVED***, True, True***REMOVED***
        check_contig(np.array([[[1***REMOVED***, [2***REMOVED******REMOVED******REMOVED***, order='F'***REMOVED***, True, True***REMOVED***
    else:
        check_contig(np.empty((2, 2, 0, 2, 2***REMOVED******REMOVED***, True, False***REMOVED***
        check_contig(np.array([[[1***REMOVED***, [2***REMOVED******REMOVED******REMOVED***, order='F'***REMOVED***, False, True***REMOVED***
    check_contig(np.empty((2, 2***REMOVED******REMOVED***, True, False***REMOVED***
    check_contig(np.empty((2, 2***REMOVED***, order='F'***REMOVED***, False, True***REMOVED***

    # Check that np.array creates correct contiguous flags:
    check_contig(np.array(a, copy=False***REMOVED***, False, False***REMOVED***
    check_contig(np.array(a, copy=False, order='C'***REMOVED***, True, False***REMOVED***
    check_contig(np.array(a, ndmin=4, copy=False, order='F'***REMOVED***, False, True***REMOVED***

    if NPY_RELAXED_STRIDES_CHECKING:
        # Check slicing update of flags and :
        check_contig(a[0***REMOVED***, True, True***REMOVED***
        check_contig(a[None, ::4, ..., None***REMOVED***, True, True***REMOVED***
        check_contig(b[0, 0, ...***REMOVED***, False, True***REMOVED***
        check_contig(b[:,:, 0:0,:,:***REMOVED***, True, True***REMOVED***
    else:
        # Check slicing update of flags:
        check_contig(a[0***REMOVED***, True, False***REMOVED***
        # Would be nice if this was C-Contiguous:
        check_contig(a[None, 0, ..., None***REMOVED***, False, False***REMOVED***
        check_contig(b[0, 0, 0, ...***REMOVED***, False, True***REMOVED***

    # Test ravel and squeeze.
    check_contig(a.ravel(***REMOVED***, True, True***REMOVED***
    check_contig(np.ones((1, 3, 1***REMOVED******REMOVED***.squeeze(***REMOVED***, True, True***REMOVED***

def test_broadcast_arrays(***REMOVED***:
    # Test user defined dtypes
    a = np.array([(1, 2, 3***REMOVED******REMOVED***, dtype='u4,u4,u4'***REMOVED***
    b = np.array([(1, 2, 3***REMOVED***, (4, 5, 6***REMOVED***, (7, 8, 9***REMOVED******REMOVED***, dtype='u4,u4,u4'***REMOVED***
    result = np.broadcast_arrays(a, b***REMOVED***
    assert_equal(result[0***REMOVED***, np.array([(1, 2, 3***REMOVED***, (1, 2, 3***REMOVED***, (1, 2, 3***REMOVED******REMOVED***, dtype='u4,u4,u4'***REMOVED******REMOVED***
    assert_equal(result[1***REMOVED***, np.array([(1, 2, 3***REMOVED***, (4, 5, 6***REMOVED***, (7, 8, 9***REMOVED******REMOVED***, dtype='u4,u4,u4'***REMOVED******REMOVED***

if __name__ == "__main__":
    run_module_suite(***REMOVED***
