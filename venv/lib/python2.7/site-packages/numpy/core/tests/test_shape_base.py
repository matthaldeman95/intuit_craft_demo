from __future__ import division, absolute_import, print_function

import numpy as np
from numpy.compat import long
from numpy.core import (array, arange, atleast_1d, atleast_2d, atleast_3d,
                        vstack, hstack, newaxis, concatenate, stack***REMOVED***
from numpy.testing import (TestCase, assert_, assert_raises, assert_array_equal,
                           assert_equal, run_module_suite, assert_raises_regex***REMOVED***

class TestAtleast1d(TestCase***REMOVED***:
    def test_0D_array(self***REMOVED***:
        a = array(1***REMOVED***
        b = array(2***REMOVED***
        res = [atleast_1d(a***REMOVED***, atleast_1d(b***REMOVED******REMOVED***
        desired = [array([1***REMOVED******REMOVED***, array([2***REMOVED******REMOVED******REMOVED***
        assert_array_equal(res, desired***REMOVED***

    def test_1D_array(self***REMOVED***:
        a = array([1, 2***REMOVED******REMOVED***
        b = array([2, 3***REMOVED******REMOVED***
        res = [atleast_1d(a***REMOVED***, atleast_1d(b***REMOVED******REMOVED***
        desired = [array([1, 2***REMOVED******REMOVED***, array([2, 3***REMOVED******REMOVED******REMOVED***
        assert_array_equal(res, desired***REMOVED***

    def test_2D_array(self***REMOVED***:
        a = array([[1, 2***REMOVED***, [1, 2***REMOVED******REMOVED******REMOVED***
        b = array([[2, 3***REMOVED***, [2, 3***REMOVED******REMOVED******REMOVED***
        res = [atleast_1d(a***REMOVED***, atleast_1d(b***REMOVED******REMOVED***
        desired = [a, b***REMOVED***
        assert_array_equal(res, desired***REMOVED***

    def test_3D_array(self***REMOVED***:
        a = array([[1, 2***REMOVED***, [1, 2***REMOVED******REMOVED******REMOVED***
        b = array([[2, 3***REMOVED***, [2, 3***REMOVED******REMOVED******REMOVED***
        a = array([a, a***REMOVED******REMOVED***
        b = array([b, b***REMOVED******REMOVED***
        res = [atleast_1d(a***REMOVED***, atleast_1d(b***REMOVED******REMOVED***
        desired = [a, b***REMOVED***
        assert_array_equal(res, desired***REMOVED***

    def test_r1array(self***REMOVED***:
        ***REMOVED*** Test to make sure equivalent Travis O's r1array function
        ***REMOVED***
        assert_(atleast_1d(3***REMOVED***.shape == (1,***REMOVED******REMOVED***
        assert_(atleast_1d(3j***REMOVED***.shape == (1,***REMOVED******REMOVED***
        assert_(atleast_1d(long(3***REMOVED******REMOVED***.shape == (1,***REMOVED******REMOVED***
        assert_(atleast_1d(3.0***REMOVED***.shape == (1,***REMOVED******REMOVED***
        assert_(atleast_1d([[2, 3***REMOVED***, [4, 5***REMOVED******REMOVED******REMOVED***.shape == (2, 2***REMOVED******REMOVED***


class TestAtleast2d(TestCase***REMOVED***:
    def test_0D_array(self***REMOVED***:
        a = array(1***REMOVED***
        b = array(2***REMOVED***
        res = [atleast_2d(a***REMOVED***, atleast_2d(b***REMOVED******REMOVED***
        desired = [array([[1***REMOVED******REMOVED******REMOVED***, array([[2***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_array_equal(res, desired***REMOVED***

    def test_1D_array(self***REMOVED***:
        a = array([1, 2***REMOVED******REMOVED***
        b = array([2, 3***REMOVED******REMOVED***
        res = [atleast_2d(a***REMOVED***, atleast_2d(b***REMOVED******REMOVED***
        desired = [array([[1, 2***REMOVED******REMOVED******REMOVED***, array([[2, 3***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_array_equal(res, desired***REMOVED***

    def test_2D_array(self***REMOVED***:
        a = array([[1, 2***REMOVED***, [1, 2***REMOVED******REMOVED******REMOVED***
        b = array([[2, 3***REMOVED***, [2, 3***REMOVED******REMOVED******REMOVED***
        res = [atleast_2d(a***REMOVED***, atleast_2d(b***REMOVED******REMOVED***
        desired = [a, b***REMOVED***
        assert_array_equal(res, desired***REMOVED***

    def test_3D_array(self***REMOVED***:
        a = array([[1, 2***REMOVED***, [1, 2***REMOVED******REMOVED******REMOVED***
        b = array([[2, 3***REMOVED***, [2, 3***REMOVED******REMOVED******REMOVED***
        a = array([a, a***REMOVED******REMOVED***
        b = array([b, b***REMOVED******REMOVED***
        res = [atleast_2d(a***REMOVED***, atleast_2d(b***REMOVED******REMOVED***
        desired = [a, b***REMOVED***
        assert_array_equal(res, desired***REMOVED***

    def test_r2array(self***REMOVED***:
        ***REMOVED*** Test to make sure equivalent Travis O's r2array function
        ***REMOVED***
        assert_(atleast_2d(3***REMOVED***.shape == (1, 1***REMOVED******REMOVED***
        assert_(atleast_2d([3j, 1***REMOVED******REMOVED***.shape == (1, 2***REMOVED******REMOVED***
        assert_(atleast_2d([[[3, 1***REMOVED***, [4, 5***REMOVED******REMOVED***, [[3, 5***REMOVED***, [1, 2***REMOVED******REMOVED******REMOVED******REMOVED***.shape == (2, 2, 2***REMOVED******REMOVED***


class TestAtleast3d(TestCase***REMOVED***:
    def test_0D_array(self***REMOVED***:
        a = array(1***REMOVED***
        b = array(2***REMOVED***
        res = [atleast_3d(a***REMOVED***, atleast_3d(b***REMOVED******REMOVED***
        desired = [array([[[1***REMOVED******REMOVED******REMOVED******REMOVED***, array([[[2***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        assert_array_equal(res, desired***REMOVED***

    def test_1D_array(self***REMOVED***:
        a = array([1, 2***REMOVED******REMOVED***
        b = array([2, 3***REMOVED******REMOVED***
        res = [atleast_3d(a***REMOVED***, atleast_3d(b***REMOVED******REMOVED***
        desired = [array([[[1***REMOVED***, [2***REMOVED******REMOVED******REMOVED******REMOVED***, array([[[2***REMOVED***, [3***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        assert_array_equal(res, desired***REMOVED***

    def test_2D_array(self***REMOVED***:
        a = array([[1, 2***REMOVED***, [1, 2***REMOVED******REMOVED******REMOVED***
        b = array([[2, 3***REMOVED***, [2, 3***REMOVED******REMOVED******REMOVED***
        res = [atleast_3d(a***REMOVED***, atleast_3d(b***REMOVED******REMOVED***
        desired = [a[:,:, newaxis***REMOVED***, b[:,:, newaxis***REMOVED******REMOVED***
        assert_array_equal(res, desired***REMOVED***

    def test_3D_array(self***REMOVED***:
        a = array([[1, 2***REMOVED***, [1, 2***REMOVED******REMOVED******REMOVED***
        b = array([[2, 3***REMOVED***, [2, 3***REMOVED******REMOVED******REMOVED***
        a = array([a, a***REMOVED******REMOVED***
        b = array([b, b***REMOVED******REMOVED***
        res = [atleast_3d(a***REMOVED***, atleast_3d(b***REMOVED******REMOVED***
        desired = [a, b***REMOVED***
        assert_array_equal(res, desired***REMOVED***


class TestHstack(TestCase***REMOVED***:
    def test_0D_array(self***REMOVED***:
        a = array(1***REMOVED***
        b = array(2***REMOVED***
        res = hstack([a, b***REMOVED******REMOVED***
        desired = array([1, 2***REMOVED******REMOVED***
        assert_array_equal(res, desired***REMOVED***

    def test_1D_array(self***REMOVED***:
        a = array([1***REMOVED******REMOVED***
        b = array([2***REMOVED******REMOVED***
        res = hstack([a, b***REMOVED******REMOVED***
        desired = array([1, 2***REMOVED******REMOVED***
        assert_array_equal(res, desired***REMOVED***

    def test_2D_array(self***REMOVED***:
        a = array([[1***REMOVED***, [2***REMOVED******REMOVED******REMOVED***
        b = array([[1***REMOVED***, [2***REMOVED******REMOVED******REMOVED***
        res = hstack([a, b***REMOVED******REMOVED***
        desired = array([[1, 1***REMOVED***, [2, 2***REMOVED******REMOVED******REMOVED***
        assert_array_equal(res, desired***REMOVED***


class TestVstack(TestCase***REMOVED***:
    def test_0D_array(self***REMOVED***:
        a = array(1***REMOVED***
        b = array(2***REMOVED***
        res = vstack([a, b***REMOVED******REMOVED***
        desired = array([[1***REMOVED***, [2***REMOVED******REMOVED******REMOVED***
        assert_array_equal(res, desired***REMOVED***

    def test_1D_array(self***REMOVED***:
        a = array([1***REMOVED******REMOVED***
        b = array([2***REMOVED******REMOVED***
        res = vstack([a, b***REMOVED******REMOVED***
        desired = array([[1***REMOVED***, [2***REMOVED******REMOVED******REMOVED***
        assert_array_equal(res, desired***REMOVED***

    def test_2D_array(self***REMOVED***:
        a = array([[1***REMOVED***, [2***REMOVED******REMOVED******REMOVED***
        b = array([[1***REMOVED***, [2***REMOVED******REMOVED******REMOVED***
        res = vstack([a, b***REMOVED******REMOVED***
        desired = array([[1***REMOVED***, [2***REMOVED***, [1***REMOVED***, [2***REMOVED******REMOVED******REMOVED***
        assert_array_equal(res, desired***REMOVED***

    def test_2D_array2(self***REMOVED***:
        a = array([1, 2***REMOVED******REMOVED***
        b = array([1, 2***REMOVED******REMOVED***
        res = vstack([a, b***REMOVED******REMOVED***
        desired = array([[1, 2***REMOVED***, [1, 2***REMOVED******REMOVED******REMOVED***
        assert_array_equal(res, desired***REMOVED***


class TestConcatenate(TestCase***REMOVED***:
    def test_exceptions(self***REMOVED***:
        # test axis must be in bounds
        for ndim in [1, 2, 3***REMOVED***:
            a = np.ones((1,***REMOVED****ndim***REMOVED***
            np.concatenate((a, a***REMOVED***, axis=0***REMOVED***  # OK
            assert_raises(IndexError, np.concatenate, (a, a***REMOVED***, axis=ndim***REMOVED***
            assert_raises(IndexError, np.concatenate, (a, a***REMOVED***, axis=-(ndim + 1***REMOVED******REMOVED***

        # Scalars cannot be concatenated
        assert_raises(ValueError, concatenate, (0,***REMOVED******REMOVED***
        assert_raises(ValueError, concatenate, (np.array(0***REMOVED***,***REMOVED******REMOVED***

        # test shapes must match except for concatenation axis
        a = np.ones((1, 2, 3***REMOVED******REMOVED***
        b = np.ones((2, 2, 3***REMOVED******REMOVED***
        axis = list(range(3***REMOVED******REMOVED***
        for i in range(3***REMOVED***:
            np.concatenate((a, b***REMOVED***, axis=axis[0***REMOVED******REMOVED***  # OK
            assert_raises(ValueError, np.concatenate, (a, b***REMOVED***, axis=axis[1***REMOVED******REMOVED***
            assert_raises(ValueError, np.concatenate, (a, b***REMOVED***, axis=axis[2***REMOVED******REMOVED***
            a = np.rollaxis(a, -1***REMOVED***
            b = np.rollaxis(b, -1***REMOVED***
            axis.append(axis.pop(0***REMOVED******REMOVED***

        # No arrays to concatenate raises ValueError
        assert_raises(ValueError, concatenate, (***REMOVED******REMOVED***

    def test_concatenate_axis_None(self***REMOVED***:
        a = np.arange(4, dtype=np.float64***REMOVED***.reshape((2, 2***REMOVED******REMOVED***
        b = list(range(3***REMOVED******REMOVED***
        c = ['x'***REMOVED***
        r = np.concatenate((a, a***REMOVED***, axis=None***REMOVED***
        assert_equal(r.dtype, a.dtype***REMOVED***
        assert_equal(r.ndim, 1***REMOVED***
        r = np.concatenate((a, b***REMOVED***, axis=None***REMOVED***
        assert_equal(r.size, a.size + len(b***REMOVED******REMOVED***
        assert_equal(r.dtype, a.dtype***REMOVED***
        r = np.concatenate((a, b, c***REMOVED***, axis=None***REMOVED***
        d = array(['0.0', '1.0', '2.0', '3.0',
                   '0', '1', '2', 'x'***REMOVED******REMOVED***
        assert_array_equal(r, d***REMOVED***

    def test_large_concatenate_axis_None(self***REMOVED***:
        # When no axis is given, concatenate uses flattened versions.
        # This also had a bug with many arrays (see gh-5979***REMOVED***.
        x = np.arange(1, 100***REMOVED***
        r = np.concatenate(x, None***REMOVED***
        assert_array_equal(x, r***REMOVED***

        # This should probably be deprecated:
        r = np.concatenate(x, 100***REMOVED***  # axis is >= MAXDIMS
        assert_array_equal(x, r***REMOVED***

    def test_concatenate(self***REMOVED***:
        # Test concatenate function
        # One sequence returns unmodified (but as array***REMOVED***
        r4 = list(range(4***REMOVED******REMOVED***
        assert_array_equal(concatenate((r4,***REMOVED******REMOVED***, r4***REMOVED***
        # Any sequence
        assert_array_equal(concatenate((tuple(r4***REMOVED***,***REMOVED******REMOVED***, r4***REMOVED***
        assert_array_equal(concatenate((array(r4***REMOVED***,***REMOVED******REMOVED***, r4***REMOVED***
        # 1D default concatenation
        r3 = list(range(3***REMOVED******REMOVED***
        assert_array_equal(concatenate((r4, r3***REMOVED******REMOVED***, r4 + r3***REMOVED***
        # Mixed sequence types
        assert_array_equal(concatenate((tuple(r4***REMOVED***, r3***REMOVED******REMOVED***, r4 + r3***REMOVED***
        assert_array_equal(concatenate((array(r4***REMOVED***, r3***REMOVED******REMOVED***, r4 + r3***REMOVED***
        # Explicit axis specification
        assert_array_equal(concatenate((r4, r3***REMOVED***, 0***REMOVED***, r4 + r3***REMOVED***
        # Including negative
        assert_array_equal(concatenate((r4, r3***REMOVED***, -1***REMOVED***, r4 + r3***REMOVED***
        # 2D
        a23 = array([[10, 11, 12***REMOVED***, [13, 14, 15***REMOVED******REMOVED******REMOVED***
        a13 = array([[0, 1, 2***REMOVED******REMOVED******REMOVED***
        res = array([[10, 11, 12***REMOVED***, [13, 14, 15***REMOVED***, [0, 1, 2***REMOVED******REMOVED******REMOVED***
        assert_array_equal(concatenate((a23, a13***REMOVED******REMOVED***, res***REMOVED***
        assert_array_equal(concatenate((a23, a13***REMOVED***, 0***REMOVED***, res***REMOVED***
        assert_array_equal(concatenate((a23.T, a13.T***REMOVED***, 1***REMOVED***, res.T***REMOVED***
        assert_array_equal(concatenate((a23.T, a13.T***REMOVED***, -1***REMOVED***, res.T***REMOVED***
        # Arrays much match shape
        assert_raises(ValueError, concatenate, (a23.T, a13.T***REMOVED***, 0***REMOVED***
        # 3D
        res = arange(2 * 3 * 7***REMOVED***.reshape((2, 3, 7***REMOVED******REMOVED***
        a0 = res[..., :4***REMOVED***
        a1 = res[..., 4:6***REMOVED***
        a2 = res[..., 6:***REMOVED***
        assert_array_equal(concatenate((a0, a1, a2***REMOVED***, 2***REMOVED***, res***REMOVED***
        assert_array_equal(concatenate((a0, a1, a2***REMOVED***, -1***REMOVED***, res***REMOVED***
        assert_array_equal(concatenate((a0.T, a1.T, a2.T***REMOVED***, 0***REMOVED***, res.T***REMOVED***


def test_stack(***REMOVED***:
    # 0d input
    for input_ in [(1, 2, 3***REMOVED***,
                   [np.int32(1***REMOVED***, np.int32(2***REMOVED***, np.int32(3***REMOVED******REMOVED***,
                   [np.array(1***REMOVED***, np.array(2***REMOVED***, np.array(3***REMOVED******REMOVED******REMOVED***:
        assert_array_equal(stack(input_***REMOVED***, [1, 2, 3***REMOVED******REMOVED***
    # 1d input examples
    a = np.array([1, 2, 3***REMOVED******REMOVED***
    b = np.array([4, 5, 6***REMOVED******REMOVED***
    r1 = array([[1, 2, 3***REMOVED***, [4, 5, 6***REMOVED******REMOVED******REMOVED***
    assert_array_equal(np.stack((a, b***REMOVED******REMOVED***, r1***REMOVED***
    assert_array_equal(np.stack((a, b***REMOVED***, axis=1***REMOVED***, r1.T***REMOVED***
    # all input types
    assert_array_equal(np.stack(list([a, b***REMOVED******REMOVED******REMOVED***, r1***REMOVED***
    assert_array_equal(np.stack(array([a, b***REMOVED******REMOVED******REMOVED***, r1***REMOVED***
    # all shapes for 1d input
    arrays = [np.random.randn(3***REMOVED*** for _ in range(10***REMOVED******REMOVED***
    axes = [0, 1, -1, -2***REMOVED***
    expected_shapes = [(10, 3***REMOVED***, (3, 10***REMOVED***, (3, 10***REMOVED***, (10, 3***REMOVED******REMOVED***
    for axis, expected_shape in zip(axes, expected_shapes***REMOVED***:
        assert_equal(np.stack(arrays, axis***REMOVED***.shape, expected_shape***REMOVED***
    assert_raises_regex(IndexError, 'out of bounds', stack, arrays, axis=2***REMOVED***
    assert_raises_regex(IndexError, 'out of bounds', stack, arrays, axis=-3***REMOVED***
    # all shapes for 2d input
    arrays = [np.random.randn(3, 4***REMOVED*** for _ in range(10***REMOVED******REMOVED***
    axes = [0, 1, 2, -1, -2, -3***REMOVED***
    expected_shapes = [(10, 3, 4***REMOVED***, (3, 10, 4***REMOVED***, (3, 4, 10***REMOVED***,
                        (3, 4, 10***REMOVED***, (3, 10, 4***REMOVED***, (10, 3, 4***REMOVED******REMOVED***
    for axis, expected_shape in zip(axes, expected_shapes***REMOVED***:
        assert_equal(np.stack(arrays, axis***REMOVED***.shape, expected_shape***REMOVED***
    # empty arrays
    assert_(stack([[***REMOVED***, [***REMOVED***, [***REMOVED******REMOVED******REMOVED***.shape == (3, 0***REMOVED******REMOVED***
    assert_(stack([[***REMOVED***, [***REMOVED***, [***REMOVED******REMOVED***, axis=1***REMOVED***.shape == (0, 3***REMOVED******REMOVED***
    # edge cases
    assert_raises_regex(ValueError, 'need at least one array', stack, [***REMOVED******REMOVED***
    assert_raises_regex(ValueError, 'must have the same shape',
                        stack, [1, np.arange(3***REMOVED******REMOVED******REMOVED***
    assert_raises_regex(ValueError, 'must have the same shape',
                        stack, [np.arange(3***REMOVED***, 1***REMOVED******REMOVED***
    assert_raises_regex(ValueError, 'must have the same shape',
                        stack, [np.arange(3***REMOVED***, 1***REMOVED***, axis=1***REMOVED***
    assert_raises_regex(ValueError, 'must have the same shape',
                        stack, [np.zeros((3, 3***REMOVED******REMOVED***, np.zeros(3***REMOVED******REMOVED***, axis=1***REMOVED***
    assert_raises_regex(ValueError, 'must have the same shape',
                        stack, [np.arange(2***REMOVED***, np.arange(3***REMOVED******REMOVED******REMOVED***
    # np.matrix
    m = np.matrix([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED******REMOVED***
    assert_raises_regex(ValueError, 'shape too large to be a matrix',
                        stack, [m, m***REMOVED******REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
