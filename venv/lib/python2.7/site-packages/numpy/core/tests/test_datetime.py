from __future__ import division, absolute_import, print_function

import pickle
import warnings

import numpy
import numpy as np
import datetime
from numpy.compat import asbytes
from numpy.testing import (
    TestCase, run_module_suite, assert_, assert_equal, assert_raises,
    assert_warns, dec
***REMOVED***

# Use pytz to test out various time zones if available
***REMOVED***
    from pytz import timezone as tz
    _has_pytz = True
except ImportError:
    _has_pytz = False


class TestDateTime(TestCase***REMOVED***:
    def test_datetime_dtype_creation(self***REMOVED***:
        for unit in ['Y', 'M', 'W', 'D',
                     'h', 'm', 's', 'ms', 'us',
                     'ns', 'ps', 'fs', 'as'***REMOVED***:
            dt1 = np.dtype('M8[750%s***REMOVED***' % unit***REMOVED***
            assert_(dt1 == np.dtype('datetime64[750%s***REMOVED***' % unit***REMOVED******REMOVED***
            dt2 = np.dtype('m8[%s***REMOVED***' % unit***REMOVED***
            assert_(dt2 == np.dtype('timedelta64[%s***REMOVED***' % unit***REMOVED******REMOVED***

        # Generic units shouldn't add [***REMOVED*** to the end
        assert_equal(str(np.dtype("M8"***REMOVED******REMOVED***, "datetime64"***REMOVED***

        # Should be possible to specify the endianness
        assert_equal(np.dtype("=M8"***REMOVED***, np.dtype("M8"***REMOVED******REMOVED***
        assert_equal(np.dtype("=M8[s***REMOVED***"***REMOVED***, np.dtype("M8[s***REMOVED***"***REMOVED******REMOVED***
        assert_(np.dtype(">M8"***REMOVED*** == np.dtype("M8"***REMOVED*** or
                np.dtype("<M8"***REMOVED*** == np.dtype("M8"***REMOVED******REMOVED***
        assert_(np.dtype(">M8[D***REMOVED***"***REMOVED*** == np.dtype("M8[D***REMOVED***"***REMOVED*** or
                np.dtype("<M8[D***REMOVED***"***REMOVED*** == np.dtype("M8[D***REMOVED***"***REMOVED******REMOVED***
        assert_(np.dtype(">M8"***REMOVED*** != np.dtype("<M8"***REMOVED******REMOVED***

        assert_equal(np.dtype("=m8"***REMOVED***, np.dtype("m8"***REMOVED******REMOVED***
        assert_equal(np.dtype("=m8[s***REMOVED***"***REMOVED***, np.dtype("m8[s***REMOVED***"***REMOVED******REMOVED***
        assert_(np.dtype(">m8"***REMOVED*** == np.dtype("m8"***REMOVED*** or
                np.dtype("<m8"***REMOVED*** == np.dtype("m8"***REMOVED******REMOVED***
        assert_(np.dtype(">m8[D***REMOVED***"***REMOVED*** == np.dtype("m8[D***REMOVED***"***REMOVED*** or
                np.dtype("<m8[D***REMOVED***"***REMOVED*** == np.dtype("m8[D***REMOVED***"***REMOVED******REMOVED***
        assert_(np.dtype(">m8"***REMOVED*** != np.dtype("<m8"***REMOVED******REMOVED***

        # Check that the parser rejects bad datetime types
        assert_raises(TypeError, np.dtype, 'M8[badunit***REMOVED***'***REMOVED***
        assert_raises(TypeError, np.dtype, 'm8[badunit***REMOVED***'***REMOVED***
        assert_raises(TypeError, np.dtype, 'M8[YY***REMOVED***'***REMOVED***
        assert_raises(TypeError, np.dtype, 'm8[YY***REMOVED***'***REMOVED***
        assert_raises(TypeError, np.dtype, 'm4'***REMOVED***
        assert_raises(TypeError, np.dtype, 'M7'***REMOVED***
        assert_raises(TypeError, np.dtype, 'm7'***REMOVED***
        assert_raises(TypeError, np.dtype, 'M16'***REMOVED***
        assert_raises(TypeError, np.dtype, 'm16'***REMOVED***

    def test_datetime_casting_rules(self***REMOVED***:
        # Cannot cast safely/same_kind between timedelta and datetime
        assert_(not np.can_cast('m8', 'M8', casting='same_kind'***REMOVED******REMOVED***
        assert_(not np.can_cast('M8', 'm8', casting='same_kind'***REMOVED******REMOVED***
        assert_(not np.can_cast('m8', 'M8', casting='safe'***REMOVED******REMOVED***
        assert_(not np.can_cast('M8', 'm8', casting='safe'***REMOVED******REMOVED***

        # Can cast safely/same_kind from integer to timedelta
        assert_(np.can_cast('i8', 'm8', casting='same_kind'***REMOVED******REMOVED***
        assert_(np.can_cast('i8', 'm8', casting='safe'***REMOVED******REMOVED***

        # Cannot cast safely/same_kind from float to timedelta
        assert_(not np.can_cast('f4', 'm8', casting='same_kind'***REMOVED******REMOVED***
        assert_(not np.can_cast('f4', 'm8', casting='safe'***REMOVED******REMOVED***

        # Cannot cast safely/same_kind from integer to datetime
        assert_(not np.can_cast('i8', 'M8', casting='same_kind'***REMOVED******REMOVED***
        assert_(not np.can_cast('i8', 'M8', casting='safe'***REMOVED******REMOVED***

        # Cannot cast safely/same_kind from bool to datetime
        assert_(not np.can_cast('b1', 'M8', casting='same_kind'***REMOVED******REMOVED***
        assert_(not np.can_cast('b1', 'M8', casting='safe'***REMOVED******REMOVED***
        # Can cast safely/same_kind from bool to timedelta
        assert_(np.can_cast('b1', 'm8', casting='same_kind'***REMOVED******REMOVED***
        assert_(np.can_cast('b1', 'm8', casting='safe'***REMOVED******REMOVED***

        # Can cast datetime safely from months/years to days
        assert_(np.can_cast('M8[M***REMOVED***', 'M8[D***REMOVED***', casting='safe'***REMOVED******REMOVED***
        assert_(np.can_cast('M8[Y***REMOVED***', 'M8[D***REMOVED***', casting='safe'***REMOVED******REMOVED***
        # Cannot cast timedelta safely from months/years to days
        assert_(not np.can_cast('m8[M***REMOVED***', 'm8[D***REMOVED***', casting='safe'***REMOVED******REMOVED***
        assert_(not np.can_cast('m8[Y***REMOVED***', 'm8[D***REMOVED***', casting='safe'***REMOVED******REMOVED***
        # Can cast datetime same_kind from months/years to days
        assert_(np.can_cast('M8[M***REMOVED***', 'M8[D***REMOVED***', casting='same_kind'***REMOVED******REMOVED***
        assert_(np.can_cast('M8[Y***REMOVED***', 'M8[D***REMOVED***', casting='same_kind'***REMOVED******REMOVED***
        # Can't cast timedelta same_kind from months/years to days
        assert_(not np.can_cast('m8[M***REMOVED***', 'm8[D***REMOVED***', casting='same_kind'***REMOVED******REMOVED***
        assert_(not np.can_cast('m8[Y***REMOVED***', 'm8[D***REMOVED***', casting='same_kind'***REMOVED******REMOVED***
        # Can cast datetime same_kind across the date/time boundary
        assert_(np.can_cast('M8[D***REMOVED***', 'M8[h***REMOVED***', casting='same_kind'***REMOVED******REMOVED***
        # Can cast timedelta same_kind across the date/time boundary
        assert_(np.can_cast('m8[D***REMOVED***', 'm8[h***REMOVED***', casting='same_kind'***REMOVED******REMOVED***
        assert_(np.can_cast('m8[h***REMOVED***', 'm8[D***REMOVED***', casting='same_kind'***REMOVED******REMOVED***

        # Cannot cast safely if the integer multiplier doesn't divide
        assert_(not np.can_cast('M8[7h***REMOVED***', 'M8[3h***REMOVED***', casting='safe'***REMOVED******REMOVED***
        assert_(not np.can_cast('M8[3h***REMOVED***', 'M8[6h***REMOVED***', casting='safe'***REMOVED******REMOVED***
        # But can cast same_kind
        assert_(np.can_cast('M8[7h***REMOVED***', 'M8[3h***REMOVED***', casting='same_kind'***REMOVED******REMOVED***
        # Can cast safely if the integer multiplier does divide
        assert_(np.can_cast('M8[6h***REMOVED***', 'M8[3h***REMOVED***', casting='safe'***REMOVED******REMOVED***

        # We can always cast types with generic units (corresponding to NaT***REMOVED*** to
        # more specific types
        assert_(np.can_cast('m8', 'm8[h***REMOVED***', casting='same_kind'***REMOVED******REMOVED***
        assert_(np.can_cast('m8', 'm8[h***REMOVED***', casting='safe'***REMOVED******REMOVED***
        assert_(np.can_cast('M8', 'M8[h***REMOVED***', casting='same_kind'***REMOVED******REMOVED***
        assert_(np.can_cast('M8', 'M8[h***REMOVED***', casting='safe'***REMOVED******REMOVED***
        # but not the other way around
        assert_(not np.can_cast('m8[h***REMOVED***', 'm8', casting='same_kind'***REMOVED******REMOVED***
        assert_(not np.can_cast('m8[h***REMOVED***', 'm8', casting='safe'***REMOVED******REMOVED***
        assert_(not np.can_cast('M8[h***REMOVED***', 'M8', casting='same_kind'***REMOVED******REMOVED***
        assert_(not np.can_cast('M8[h***REMOVED***', 'M8', casting='safe'***REMOVED******REMOVED***

    def test_compare_generic_nat(self***REMOVED***:
        # regression tests for GH6452
        assert_equal(np.datetime64('NaT'***REMOVED***,
                     np.datetime64('2000'***REMOVED*** + np.timedelta64('NaT'***REMOVED******REMOVED***
        # nb. we may want to make NaT != NaT true in the future; this test
        # verifies the existing behavior (and that it should not warn***REMOVED***
        assert_(np.datetime64('NaT'***REMOVED*** == np.datetime64('NaT', 'us'***REMOVED******REMOVED***
        assert_(np.datetime64('NaT', 'us'***REMOVED*** == np.datetime64('NaT'***REMOVED******REMOVED***

    def test_datetime_scalar_construction(self***REMOVED***:
        # Construct with different units
        assert_equal(np.datetime64('1950-03-12', 'D'***REMOVED***,
                     np.datetime64('1950-03-12'***REMOVED******REMOVED***
        assert_equal(np.datetime64('1950-03-12T13', 's'***REMOVED***,
                     np.datetime64('1950-03-12T13', 'm'***REMOVED******REMOVED***

        # Default construction means NaT
        assert_equal(np.datetime64(***REMOVED***, np.datetime64('NaT'***REMOVED******REMOVED***

        # Some basic strings and repr
        assert_equal(str(np.datetime64('NaT'***REMOVED******REMOVED***, 'NaT'***REMOVED***
        assert_equal(repr(np.datetime64('NaT'***REMOVED******REMOVED***,
                     "numpy.datetime64('NaT'***REMOVED***"***REMOVED***
        assert_equal(str(np.datetime64('2011-02'***REMOVED******REMOVED***, '2011-02'***REMOVED***
        assert_equal(repr(np.datetime64('2011-02'***REMOVED******REMOVED***,
                     "numpy.datetime64('2011-02'***REMOVED***"***REMOVED***

        # None gets constructed as NaT
        assert_equal(np.datetime64(None***REMOVED***, np.datetime64('NaT'***REMOVED******REMOVED***

        # Default construction of NaT is in generic units
        assert_equal(np.datetime64(***REMOVED***.dtype, np.dtype('M8'***REMOVED******REMOVED***
        assert_equal(np.datetime64('NaT'***REMOVED***.dtype, np.dtype('M8'***REMOVED******REMOVED***

        # Construction from integers requires a specified unit
        assert_raises(ValueError, np.datetime64, 17***REMOVED***

        # When constructing from a scalar or zero-dimensional array,
        # it either keeps the units or you can override them.
        a = np.datetime64('2000-03-18T16', 'h'***REMOVED***
        b = np.array('2000-03-18T16', dtype='M8[h***REMOVED***'***REMOVED***

        assert_equal(a.dtype, np.dtype('M8[h***REMOVED***'***REMOVED******REMOVED***
        assert_equal(b.dtype, np.dtype('M8[h***REMOVED***'***REMOVED******REMOVED***

        assert_equal(np.datetime64(a***REMOVED***, a***REMOVED***
        assert_equal(np.datetime64(a***REMOVED***.dtype, np.dtype('M8[h***REMOVED***'***REMOVED******REMOVED***

        assert_equal(np.datetime64(b***REMOVED***, a***REMOVED***
        assert_equal(np.datetime64(b***REMOVED***.dtype, np.dtype('M8[h***REMOVED***'***REMOVED******REMOVED***

        assert_equal(np.datetime64(a, 's'***REMOVED***, a***REMOVED***
        assert_equal(np.datetime64(a, 's'***REMOVED***.dtype, np.dtype('M8[s***REMOVED***'***REMOVED******REMOVED***

        assert_equal(np.datetime64(b, 's'***REMOVED***, a***REMOVED***
        assert_equal(np.datetime64(b, 's'***REMOVED***.dtype, np.dtype('M8[s***REMOVED***'***REMOVED******REMOVED***

        # Construction from datetime.date
        assert_equal(np.datetime64('1945-03-25'***REMOVED***,
                     np.datetime64(datetime.date(1945, 3, 25***REMOVED******REMOVED******REMOVED***
        assert_equal(np.datetime64('2045-03-25', 'D'***REMOVED***,
                     np.datetime64(datetime.date(2045, 3, 25***REMOVED***, 'D'***REMOVED******REMOVED***
        # Construction from datetime.datetime
        assert_equal(np.datetime64('1980-01-25T14:36:22.5'***REMOVED***,
                     np.datetime64(datetime.datetime(1980, 1, 25,
                                                14, 36, 22, 500000***REMOVED******REMOVED******REMOVED***

        # Construction with time units from a date is okay
        assert_equal(np.datetime64('1920-03-13', 'h'***REMOVED***,
                     np.datetime64('1920-03-13T00'***REMOVED******REMOVED***
        assert_equal(np.datetime64('1920-03', 'm'***REMOVED***,
                     np.datetime64('1920-03-01T00:00'***REMOVED******REMOVED***
        assert_equal(np.datetime64('1920', 's'***REMOVED***,
                     np.datetime64('1920-01-01T00:00:00'***REMOVED******REMOVED***
        assert_equal(np.datetime64(datetime.date(2045, 3, 25***REMOVED***, 'ms'***REMOVED***,
                     np.datetime64('2045-03-25T00:00:00.000'***REMOVED******REMOVED***

        # Construction with date units from a datetime is also okay
        assert_equal(np.datetime64('1920-03-13T18', 'D'***REMOVED***,
                     np.datetime64('1920-03-13'***REMOVED******REMOVED***
        assert_equal(np.datetime64('1920-03-13T18:33:12', 'M'***REMOVED***,
                     np.datetime64('1920-03'***REMOVED******REMOVED***
        assert_equal(np.datetime64('1920-03-13T18:33:12.5', 'Y'***REMOVED***,
                     np.datetime64('1920'***REMOVED******REMOVED***

    def test_datetime_scalar_construction_timezone(self***REMOVED***:
        # verify that supplying an explicit timezone works, but is deprecated
        with assert_warns(DeprecationWarning***REMOVED***:
            assert_equal(np.datetime64('2000-01-01T00Z'***REMOVED***,
                         np.datetime64('2000-01-01T00'***REMOVED******REMOVED***
        with assert_warns(DeprecationWarning***REMOVED***:
            assert_equal(np.datetime64('2000-01-01T00-08'***REMOVED***,
                         np.datetime64('2000-01-01T08'***REMOVED******REMOVED***

    def test_datetime_array_find_type(self***REMOVED***:
        dt = np.datetime64('1970-01-01', 'M'***REMOVED***
        arr = np.array([dt***REMOVED******REMOVED***
        assert_equal(arr.dtype, np.dtype('M8[M***REMOVED***'***REMOVED******REMOVED***

        # at the moment, we don't automatically convert these to datetime64

        dt = datetime.date(1970, 1, 1***REMOVED***
        arr = np.array([dt***REMOVED******REMOVED***
        assert_equal(arr.dtype, np.dtype('O'***REMOVED******REMOVED***

        dt = datetime.datetime(1970, 1, 1, 12, 30, 40***REMOVED***
        arr = np.array([dt***REMOVED******REMOVED***
        assert_equal(arr.dtype, np.dtype('O'***REMOVED******REMOVED***

        # find "supertype" for non-dates and dates

        b = np.bool_(True***REMOVED***
        dt = np.datetime64('1970-01-01', 'M'***REMOVED***
        arr = np.array([b, dt***REMOVED******REMOVED***
        assert_equal(arr.dtype, np.dtype('O'***REMOVED******REMOVED***

        dt = datetime.date(1970, 1, 1***REMOVED***
        arr = np.array([b, dt***REMOVED******REMOVED***
        assert_equal(arr.dtype, np.dtype('O'***REMOVED******REMOVED***

        dt = datetime.datetime(1970, 1, 1, 12, 30, 40***REMOVED***
        arr = np.array([b, dt***REMOVED******REMOVED***
        assert_equal(arr.dtype, np.dtype('O'***REMOVED******REMOVED***

    def test_timedelta_scalar_construction(self***REMOVED***:
        # Construct with different units
        assert_equal(np.timedelta64(7, 'D'***REMOVED***,
                     np.timedelta64(1, 'W'***REMOVED******REMOVED***
        assert_equal(np.timedelta64(120, 's'***REMOVED***,
                     np.timedelta64(2, 'm'***REMOVED******REMOVED***

        # Default construction means 0
        assert_equal(np.timedelta64(***REMOVED***, np.timedelta64(0***REMOVED******REMOVED***

        # None gets constructed as NaT
        assert_equal(np.timedelta64(None***REMOVED***, np.timedelta64('NaT'***REMOVED******REMOVED***

        # Some basic strings and repr
        assert_equal(str(np.timedelta64('NaT'***REMOVED******REMOVED***, 'NaT'***REMOVED***
        assert_equal(repr(np.timedelta64('NaT'***REMOVED******REMOVED***,
                     "numpy.timedelta64('NaT'***REMOVED***"***REMOVED***
        assert_equal(str(np.timedelta64(3, 's'***REMOVED******REMOVED***, '3 seconds'***REMOVED***
        assert_equal(repr(np.timedelta64(-3, 's'***REMOVED******REMOVED***,
                     "numpy.timedelta64(-3,'s'***REMOVED***"***REMOVED***
        assert_equal(repr(np.timedelta64(12***REMOVED******REMOVED***,
                     "numpy.timedelta64(12***REMOVED***"***REMOVED***

        # Construction from an integer produces generic units
        assert_equal(np.timedelta64(12***REMOVED***.dtype, np.dtype('m8'***REMOVED******REMOVED***

        # When constructing from a scalar or zero-dimensional array,
        # it either keeps the units or you can override them.
        a = np.timedelta64(2, 'h'***REMOVED***
        b = np.array(2, dtype='m8[h***REMOVED***'***REMOVED***

        assert_equal(a.dtype, np.dtype('m8[h***REMOVED***'***REMOVED******REMOVED***
        assert_equal(b.dtype, np.dtype('m8[h***REMOVED***'***REMOVED******REMOVED***

        assert_equal(np.timedelta64(a***REMOVED***, a***REMOVED***
        assert_equal(np.timedelta64(a***REMOVED***.dtype, np.dtype('m8[h***REMOVED***'***REMOVED******REMOVED***

        assert_equal(np.timedelta64(b***REMOVED***, a***REMOVED***
        assert_equal(np.timedelta64(b***REMOVED***.dtype, np.dtype('m8[h***REMOVED***'***REMOVED******REMOVED***

        assert_equal(np.timedelta64(a, 's'***REMOVED***, a***REMOVED***
        assert_equal(np.timedelta64(a, 's'***REMOVED***.dtype, np.dtype('m8[s***REMOVED***'***REMOVED******REMOVED***

        assert_equal(np.timedelta64(b, 's'***REMOVED***, a***REMOVED***
        assert_equal(np.timedelta64(b, 's'***REMOVED***.dtype, np.dtype('m8[s***REMOVED***'***REMOVED******REMOVED***

        # Construction from datetime.timedelta
        assert_equal(np.timedelta64(5, 'D'***REMOVED***,
                     np.timedelta64(datetime.timedelta(days=5***REMOVED******REMOVED******REMOVED***
        assert_equal(np.timedelta64(102347621, 's'***REMOVED***,
                     np.timedelta64(datetime.timedelta(seconds=102347621***REMOVED******REMOVED******REMOVED***
        assert_equal(np.timedelta64(-10234760000, 'us'***REMOVED***,
                     np.timedelta64(datetime.timedelta(
                                            microseconds=-10234760000***REMOVED******REMOVED******REMOVED***
        assert_equal(np.timedelta64(10234760000, 'us'***REMOVED***,
                     np.timedelta64(datetime.timedelta(
                                            microseconds=10234760000***REMOVED******REMOVED******REMOVED***
        assert_equal(np.timedelta64(1023476, 'ms'***REMOVED***,
                     np.timedelta64(datetime.timedelta(milliseconds=1023476***REMOVED******REMOVED******REMOVED***
        assert_equal(np.timedelta64(10, 'm'***REMOVED***,
                     np.timedelta64(datetime.timedelta(minutes=10***REMOVED******REMOVED******REMOVED***
        assert_equal(np.timedelta64(281, 'h'***REMOVED***,
                     np.timedelta64(datetime.timedelta(hours=281***REMOVED******REMOVED******REMOVED***
        assert_equal(np.timedelta64(28, 'W'***REMOVED***,
                     np.timedelta64(datetime.timedelta(weeks=28***REMOVED******REMOVED******REMOVED***

        # Cannot construct across nonlinear time unit boundaries
        a = np.timedelta64(3, 's'***REMOVED***
        assert_raises(TypeError, np.timedelta64, a, 'M'***REMOVED***
        assert_raises(TypeError, np.timedelta64, a, 'Y'***REMOVED***
        a = np.timedelta64(6, 'M'***REMOVED***
        assert_raises(TypeError, np.timedelta64, a, 'D'***REMOVED***
        assert_raises(TypeError, np.timedelta64, a, 'h'***REMOVED***
        a = np.timedelta64(1, 'Y'***REMOVED***
        assert_raises(TypeError, np.timedelta64, a, 'D'***REMOVED***
        assert_raises(TypeError, np.timedelta64, a, 'm'***REMOVED***

    def test_timedelta_scalar_construction_units(self***REMOVED***:
        # String construction detecting units
        assert_equal(np.datetime64('2010'***REMOVED***.dtype,
                     np.dtype('M8[Y***REMOVED***'***REMOVED******REMOVED***
        assert_equal(np.datetime64('2010-03'***REMOVED***.dtype,
                     np.dtype('M8[M***REMOVED***'***REMOVED******REMOVED***
        assert_equal(np.datetime64('2010-03-12'***REMOVED***.dtype,
                     np.dtype('M8[D***REMOVED***'***REMOVED******REMOVED***
        assert_equal(np.datetime64('2010-03-12T17'***REMOVED***.dtype,
                     np.dtype('M8[h***REMOVED***'***REMOVED******REMOVED***
        assert_equal(np.datetime64('2010-03-12T17:15'***REMOVED***.dtype,
                     np.dtype('M8[m***REMOVED***'***REMOVED******REMOVED***
        assert_equal(np.datetime64('2010-03-12T17:15:08'***REMOVED***.dtype,
                     np.dtype('M8[s***REMOVED***'***REMOVED******REMOVED***

        assert_equal(np.datetime64('2010-03-12T17:15:08.1'***REMOVED***.dtype,
                     np.dtype('M8[ms***REMOVED***'***REMOVED******REMOVED***
        assert_equal(np.datetime64('2010-03-12T17:15:08.12'***REMOVED***.dtype,
                     np.dtype('M8[ms***REMOVED***'***REMOVED******REMOVED***
        assert_equal(np.datetime64('2010-03-12T17:15:08.123'***REMOVED***.dtype,
                     np.dtype('M8[ms***REMOVED***'***REMOVED******REMOVED***

        assert_equal(np.datetime64('2010-03-12T17:15:08.1234'***REMOVED***.dtype,
                     np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        assert_equal(np.datetime64('2010-03-12T17:15:08.12345'***REMOVED***.dtype,
                     np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        assert_equal(np.datetime64('2010-03-12T17:15:08.123456'***REMOVED***.dtype,
                     np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***

        assert_equal(np.datetime64('1970-01-01T00:00:02.1234567'***REMOVED***.dtype,
                     np.dtype('M8[ns***REMOVED***'***REMOVED******REMOVED***
        assert_equal(np.datetime64('1970-01-01T00:00:02.12345678'***REMOVED***.dtype,
                     np.dtype('M8[ns***REMOVED***'***REMOVED******REMOVED***
        assert_equal(np.datetime64('1970-01-01T00:00:02.123456789'***REMOVED***.dtype,
                     np.dtype('M8[ns***REMOVED***'***REMOVED******REMOVED***

        assert_equal(np.datetime64('1970-01-01T00:00:02.1234567890'***REMOVED***.dtype,
                     np.dtype('M8[ps***REMOVED***'***REMOVED******REMOVED***
        assert_equal(np.datetime64('1970-01-01T00:00:02.12345678901'***REMOVED***.dtype,
                     np.dtype('M8[ps***REMOVED***'***REMOVED******REMOVED***
        assert_equal(np.datetime64('1970-01-01T00:00:02.123456789012'***REMOVED***.dtype,
                     np.dtype('M8[ps***REMOVED***'***REMOVED******REMOVED***

        assert_equal(np.datetime64(
                     '1970-01-01T00:00:02.1234567890123'***REMOVED***.dtype,
                     np.dtype('M8[fs***REMOVED***'***REMOVED******REMOVED***
        assert_equal(np.datetime64(
                     '1970-01-01T00:00:02.12345678901234'***REMOVED***.dtype,
                     np.dtype('M8[fs***REMOVED***'***REMOVED******REMOVED***
        assert_equal(np.datetime64(
                     '1970-01-01T00:00:02.123456789012345'***REMOVED***.dtype,
                     np.dtype('M8[fs***REMOVED***'***REMOVED******REMOVED***

        assert_equal(np.datetime64(
                    '1970-01-01T00:00:02.1234567890123456'***REMOVED***.dtype,
                     np.dtype('M8[as***REMOVED***'***REMOVED******REMOVED***
        assert_equal(np.datetime64(
                    '1970-01-01T00:00:02.12345678901234567'***REMOVED***.dtype,
                     np.dtype('M8[as***REMOVED***'***REMOVED******REMOVED***
        assert_equal(np.datetime64(
                    '1970-01-01T00:00:02.123456789012345678'***REMOVED***.dtype,
                     np.dtype('M8[as***REMOVED***'***REMOVED******REMOVED***

        # Python date object
        assert_equal(np.datetime64(datetime.date(2010, 4, 16***REMOVED******REMOVED***.dtype,
                     np.dtype('M8[D***REMOVED***'***REMOVED******REMOVED***

        # Python datetime object
        assert_equal(np.datetime64(
                        datetime.datetime(2010, 4, 16, 13, 45, 18***REMOVED******REMOVED***.dtype,
                     np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***

        # 'today' special value
        assert_equal(np.datetime64('today'***REMOVED***.dtype,
                     np.dtype('M8[D***REMOVED***'***REMOVED******REMOVED***

        # 'now' special value
        assert_equal(np.datetime64('now'***REMOVED***.dtype,
                     np.dtype('M8[s***REMOVED***'***REMOVED******REMOVED***

    def test_datetime_nat_casting(self***REMOVED***:
        a = np.array('NaT', dtype='M8[D***REMOVED***'***REMOVED***
        b = np.datetime64('NaT', '[D***REMOVED***'***REMOVED***

        # Arrays
        assert_equal(a.astype('M8[s***REMOVED***'***REMOVED***, np.array('NaT', dtype='M8[s***REMOVED***'***REMOVED******REMOVED***
        assert_equal(a.astype('M8[ms***REMOVED***'***REMOVED***, np.array('NaT', dtype='M8[ms***REMOVED***'***REMOVED******REMOVED***
        assert_equal(a.astype('M8[M***REMOVED***'***REMOVED***, np.array('NaT', dtype='M8[M***REMOVED***'***REMOVED******REMOVED***
        assert_equal(a.astype('M8[Y***REMOVED***'***REMOVED***, np.array('NaT', dtype='M8[Y***REMOVED***'***REMOVED******REMOVED***
        assert_equal(a.astype('M8[W***REMOVED***'***REMOVED***, np.array('NaT', dtype='M8[W***REMOVED***'***REMOVED******REMOVED***

        # Scalars -> Scalars
        assert_equal(np.datetime64(b, '[s***REMOVED***'***REMOVED***, np.datetime64('NaT', '[s***REMOVED***'***REMOVED******REMOVED***
        assert_equal(np.datetime64(b, '[ms***REMOVED***'***REMOVED***, np.datetime64('NaT', '[ms***REMOVED***'***REMOVED******REMOVED***
        assert_equal(np.datetime64(b, '[M***REMOVED***'***REMOVED***, np.datetime64('NaT', '[M***REMOVED***'***REMOVED******REMOVED***
        assert_equal(np.datetime64(b, '[Y***REMOVED***'***REMOVED***, np.datetime64('NaT', '[Y***REMOVED***'***REMOVED******REMOVED***
        assert_equal(np.datetime64(b, '[W***REMOVED***'***REMOVED***, np.datetime64('NaT', '[W***REMOVED***'***REMOVED******REMOVED***

        # Arrays -> Scalars
        assert_equal(np.datetime64(a, '[s***REMOVED***'***REMOVED***, np.datetime64('NaT', '[s***REMOVED***'***REMOVED******REMOVED***
        assert_equal(np.datetime64(a, '[ms***REMOVED***'***REMOVED***, np.datetime64('NaT', '[ms***REMOVED***'***REMOVED******REMOVED***
        assert_equal(np.datetime64(a, '[M***REMOVED***'***REMOVED***, np.datetime64('NaT', '[M***REMOVED***'***REMOVED******REMOVED***
        assert_equal(np.datetime64(a, '[Y***REMOVED***'***REMOVED***, np.datetime64('NaT', '[Y***REMOVED***'***REMOVED******REMOVED***
        assert_equal(np.datetime64(a, '[W***REMOVED***'***REMOVED***, np.datetime64('NaT', '[W***REMOVED***'***REMOVED******REMOVED***

    def test_days_creation(self***REMOVED***:
        assert_equal(np.array('1599', dtype='M8[D***REMOVED***'***REMOVED***.astype('i8'***REMOVED***,
                (1600-1970***REMOVED****365 - (1972-1600***REMOVED***/4 + 3 - 365***REMOVED***
        assert_equal(np.array('1600', dtype='M8[D***REMOVED***'***REMOVED***.astype('i8'***REMOVED***,
                (1600-1970***REMOVED****365 - (1972-1600***REMOVED***/4 + 3***REMOVED***
        assert_equal(np.array('1601', dtype='M8[D***REMOVED***'***REMOVED***.astype('i8'***REMOVED***,
                (1600-1970***REMOVED****365 - (1972-1600***REMOVED***/4 + 3 + 366***REMOVED***
        assert_equal(np.array('1900', dtype='M8[D***REMOVED***'***REMOVED***.astype('i8'***REMOVED***,
                (1900-1970***REMOVED****365 - (1970-1900***REMOVED***//4***REMOVED***
        assert_equal(np.array('1901', dtype='M8[D***REMOVED***'***REMOVED***.astype('i8'***REMOVED***,
                (1900-1970***REMOVED****365 - (1970-1900***REMOVED***//4 + 365***REMOVED***
        assert_equal(np.array('1967', dtype='M8[D***REMOVED***'***REMOVED***.astype('i8'***REMOVED***, -3*365 - 1***REMOVED***
        assert_equal(np.array('1968', dtype='M8[D***REMOVED***'***REMOVED***.astype('i8'***REMOVED***, -2*365 - 1***REMOVED***
        assert_equal(np.array('1969', dtype='M8[D***REMOVED***'***REMOVED***.astype('i8'***REMOVED***, -1*365***REMOVED***
        assert_equal(np.array('1970', dtype='M8[D***REMOVED***'***REMOVED***.astype('i8'***REMOVED***, 0*365***REMOVED***
        assert_equal(np.array('1971', dtype='M8[D***REMOVED***'***REMOVED***.astype('i8'***REMOVED***, 1*365***REMOVED***
        assert_equal(np.array('1972', dtype='M8[D***REMOVED***'***REMOVED***.astype('i8'***REMOVED***, 2*365***REMOVED***
        assert_equal(np.array('1973', dtype='M8[D***REMOVED***'***REMOVED***.astype('i8'***REMOVED***, 3*365 + 1***REMOVED***
        assert_equal(np.array('1974', dtype='M8[D***REMOVED***'***REMOVED***.astype('i8'***REMOVED***, 4*365 + 1***REMOVED***
        assert_equal(np.array('2000', dtype='M8[D***REMOVED***'***REMOVED***.astype('i8'***REMOVED***,
                 (2000 - 1970***REMOVED****365 + (2000 - 1972***REMOVED***//4***REMOVED***
        assert_equal(np.array('2001', dtype='M8[D***REMOVED***'***REMOVED***.astype('i8'***REMOVED***,
                 (2000 - 1970***REMOVED****365 + (2000 - 1972***REMOVED***//4 + 366***REMOVED***
        assert_equal(np.array('2400', dtype='M8[D***REMOVED***'***REMOVED***.astype('i8'***REMOVED***,
                 (2400 - 1970***REMOVED****365 + (2400 - 1972***REMOVED***//4 - 3***REMOVED***
        assert_equal(np.array('2401', dtype='M8[D***REMOVED***'***REMOVED***.astype('i8'***REMOVED***,
                 (2400 - 1970***REMOVED****365 + (2400 - 1972***REMOVED***//4 - 3 + 366***REMOVED***

        assert_equal(np.array('1600-02-29', dtype='M8[D***REMOVED***'***REMOVED***.astype('i8'***REMOVED***,
                (1600-1970***REMOVED****365 - (1972-1600***REMOVED***//4 + 3 + 31 + 28***REMOVED***
        assert_equal(np.array('1600-03-01', dtype='M8[D***REMOVED***'***REMOVED***.astype('i8'***REMOVED***,
                (1600-1970***REMOVED****365 - (1972-1600***REMOVED***//4 + 3 + 31 + 29***REMOVED***
        assert_equal(np.array('2000-02-29', dtype='M8[D***REMOVED***'***REMOVED***.astype('i8'***REMOVED***,
                 (2000 - 1970***REMOVED****365 + (2000 - 1972***REMOVED***//4 + 31 + 28***REMOVED***
        assert_equal(np.array('2000-03-01', dtype='M8[D***REMOVED***'***REMOVED***.astype('i8'***REMOVED***,
                 (2000 - 1970***REMOVED****365 + (2000 - 1972***REMOVED***//4 + 31 + 29***REMOVED***
        assert_equal(np.array('2001-03-22', dtype='M8[D***REMOVED***'***REMOVED***.astype('i8'***REMOVED***,
                 (2000 - 1970***REMOVED****365 + (2000 - 1972***REMOVED***//4 + 366 + 31 + 28 + 21***REMOVED***

    def test_days_to_pydate(self***REMOVED***:
        assert_equal(np.array('1599', dtype='M8[D***REMOVED***'***REMOVED***.astype('O'***REMOVED***,
                    datetime.date(1599, 1, 1***REMOVED******REMOVED***
        assert_equal(np.array('1600', dtype='M8[D***REMOVED***'***REMOVED***.astype('O'***REMOVED***,
                    datetime.date(1600, 1, 1***REMOVED******REMOVED***
        assert_equal(np.array('1601', dtype='M8[D***REMOVED***'***REMOVED***.astype('O'***REMOVED***,
                    datetime.date(1601, 1, 1***REMOVED******REMOVED***
        assert_equal(np.array('1900', dtype='M8[D***REMOVED***'***REMOVED***.astype('O'***REMOVED***,
                    datetime.date(1900, 1, 1***REMOVED******REMOVED***
        assert_equal(np.array('1901', dtype='M8[D***REMOVED***'***REMOVED***.astype('O'***REMOVED***,
                    datetime.date(1901, 1, 1***REMOVED******REMOVED***
        assert_equal(np.array('2000', dtype='M8[D***REMOVED***'***REMOVED***.astype('O'***REMOVED***,
                    datetime.date(2000, 1, 1***REMOVED******REMOVED***
        assert_equal(np.array('2001', dtype='M8[D***REMOVED***'***REMOVED***.astype('O'***REMOVED***,
                    datetime.date(2001, 1, 1***REMOVED******REMOVED***
        assert_equal(np.array('1600-02-29', dtype='M8[D***REMOVED***'***REMOVED***.astype('O'***REMOVED***,
                    datetime.date(1600, 2, 29***REMOVED******REMOVED***
        assert_equal(np.array('1600-03-01', dtype='M8[D***REMOVED***'***REMOVED***.astype('O'***REMOVED***,
                    datetime.date(1600, 3, 1***REMOVED******REMOVED***
        assert_equal(np.array('2001-03-22', dtype='M8[D***REMOVED***'***REMOVED***.astype('O'***REMOVED***,
                    datetime.date(2001, 3, 22***REMOVED******REMOVED***

    def test_dtype_comparison(self***REMOVED***:
        assert_(not (np.dtype('M8[us***REMOVED***'***REMOVED*** == np.dtype('M8[ms***REMOVED***'***REMOVED******REMOVED******REMOVED***
        assert_(np.dtype('M8[us***REMOVED***'***REMOVED*** != np.dtype('M8[ms***REMOVED***'***REMOVED******REMOVED***
        assert_(np.dtype('M8[2D***REMOVED***'***REMOVED*** != np.dtype('M8[D***REMOVED***'***REMOVED******REMOVED***
        assert_(np.dtype('M8[D***REMOVED***'***REMOVED*** != np.dtype('M8[2D***REMOVED***'***REMOVED******REMOVED***

    def test_pydatetime_creation(self***REMOVED***:
        a = np.array(['1960-03-12', datetime.date(1960, 3, 12***REMOVED******REMOVED***, dtype='M8[D***REMOVED***'***REMOVED***
        assert_equal(a[0***REMOVED***, a[1***REMOVED******REMOVED***
        a = np.array(['1999-12-31', datetime.date(1999, 12, 31***REMOVED******REMOVED***, dtype='M8[D***REMOVED***'***REMOVED***
        assert_equal(a[0***REMOVED***, a[1***REMOVED******REMOVED***
        a = np.array(['2000-01-01', datetime.date(2000, 1, 1***REMOVED******REMOVED***, dtype='M8[D***REMOVED***'***REMOVED***
        assert_equal(a[0***REMOVED***, a[1***REMOVED******REMOVED***
        # Will fail if the date changes during the exact right moment
        a = np.array(['today', datetime.date.today(***REMOVED******REMOVED***, dtype='M8[D***REMOVED***'***REMOVED***
        assert_equal(a[0***REMOVED***, a[1***REMOVED******REMOVED***
        # datetime.datetime.now(***REMOVED*** returns local time, not UTC
        #a = np.array(['now', datetime.datetime.now(***REMOVED******REMOVED***, dtype='M8[s***REMOVED***'***REMOVED***
        #assert_equal(a[0***REMOVED***, a[1***REMOVED******REMOVED***

        # we can give a datetime.date time units
        assert_equal(np.array(datetime.date(1960, 3, 12***REMOVED***, dtype='M8[s***REMOVED***'***REMOVED***,
                     np.array(np.datetime64('1960-03-12T00:00:00'***REMOVED******REMOVED******REMOVED***

    def test_datetime_string_conversion(self***REMOVED***:
        a = ['2011-03-16', '1920-01-01', '2013-05-19'***REMOVED***
        str_a = np.array(a, dtype='S'***REMOVED***
        dt_a = np.array(a, dtype='M'***REMOVED***
        str_b = np.empty_like(str_a***REMOVED***
        dt_b = np.empty_like(dt_a***REMOVED***

        # String to datetime
        assert_equal(dt_a, str_a.astype('M'***REMOVED******REMOVED***
        assert_equal(dt_a.dtype, str_a.astype('M'***REMOVED***.dtype***REMOVED***
        dt_b[...***REMOVED*** = str_a
        assert_equal(dt_a, dt_b***REMOVED***
        # Datetime to string
        assert_equal(str_a, dt_a.astype('S0'***REMOVED******REMOVED***
        str_b[...***REMOVED*** = dt_a
        assert_equal(str_a, str_b***REMOVED***

        # Convert the 'S' to 'U'
        str_a = str_a.astype('U'***REMOVED***
        str_b = str_b.astype('U'***REMOVED***

        # Unicode to datetime
        assert_equal(dt_a, str_a.astype('M'***REMOVED******REMOVED***
        assert_equal(dt_a.dtype, str_a.astype('M'***REMOVED***.dtype***REMOVED***
        dt_b[...***REMOVED*** = str_a
        assert_equal(dt_a, dt_b***REMOVED***
        # Datetime to unicode
        assert_equal(str_a, dt_a.astype('U'***REMOVED******REMOVED***
        str_b[...***REMOVED*** = dt_a
        assert_equal(str_a, str_b***REMOVED***

    def test_datetime_array_str(self***REMOVED***:
        a = np.array(['2011-03-16', '1920-01-01', '2013-05-19'***REMOVED***, dtype='M'***REMOVED***
        assert_equal(str(a***REMOVED***, "['2011-03-16' '1920-01-01' '2013-05-19'***REMOVED***"***REMOVED***

        a = np.array(['2011-03-16T13:55', '1920-01-01T03:12'***REMOVED***, dtype='M'***REMOVED***
        assert_equal(np.array2string(a, separator=', ',
                    formatter={'datetime': lambda x:
                            "'%s'" % np.datetime_as_string(x, timezone='UTC'***REMOVED******REMOVED******REMOVED***,
                     "['2011-03-16T13:55Z', '1920-01-01T03:12Z'***REMOVED***"***REMOVED***

        # Check that one NaT doesn't corrupt subsequent entries
        a = np.array(['2010', 'NaT', '2030'***REMOVED******REMOVED***.astype('M'***REMOVED***
        assert_equal(str(a***REMOVED***, "['2010' 'NaT' '2030'***REMOVED***"***REMOVED***

    def test_timedelta_array_str(self***REMOVED***:
        a = np.array([-1, 0, 100***REMOVED***, dtype='m'***REMOVED***
        assert_equal(str(a***REMOVED***, "[ -1   0 100***REMOVED***"***REMOVED***
        a = np.array(['NaT', 'NaT'***REMOVED***, dtype='m'***REMOVED***
        assert_equal(str(a***REMOVED***, "['NaT' 'NaT'***REMOVED***"***REMOVED***
        # Check right-alignment with NaTs
        a = np.array([-1, 'NaT', 0***REMOVED***, dtype='m'***REMOVED***
        assert_equal(str(a***REMOVED***, "[   -1 'NaT'     0***REMOVED***"***REMOVED***
        a = np.array([-1, 'NaT', 1234567***REMOVED***, dtype='m'***REMOVED***
        assert_equal(str(a***REMOVED***, "[     -1   'NaT' 1234567***REMOVED***"***REMOVED***

    def test_pickle(self***REMOVED***:
        # Check that pickle roundtripping works
        dt = np.dtype('M8[7D***REMOVED***'***REMOVED***
        assert_equal(pickle.loads(pickle.dumps(dt***REMOVED******REMOVED***, dt***REMOVED***
        dt = np.dtype('M8[W***REMOVED***'***REMOVED***
        assert_equal(pickle.loads(pickle.dumps(dt***REMOVED******REMOVED***, dt***REMOVED***

        # Check that loading pickles from 1.6 works
        pkl = "cnumpy\ndtype\np0\n(S'M8'\np1\nI0\nI1\ntp2\nRp3\n" + \
              "(I4\nS'<'\np4\nNNNI-1\nI-1\nI0\n((dp5\n(S'D'\np6\n" + \
              "I7\nI1\nI1\ntp7\ntp8\ntp9\nb."
        assert_equal(pickle.loads(asbytes(pkl***REMOVED******REMOVED***, np.dtype('<M8[7D***REMOVED***'***REMOVED******REMOVED***
        pkl = "cnumpy\ndtype\np0\n(S'M8'\np1\nI0\nI1\ntp2\nRp3\n" + \
              "(I4\nS'<'\np4\nNNNI-1\nI-1\nI0\n((dp5\n(S'W'\np6\n" + \
              "I1\nI1\nI1\ntp7\ntp8\ntp9\nb."
        assert_equal(pickle.loads(asbytes(pkl***REMOVED******REMOVED***, np.dtype('<M8[W***REMOVED***'***REMOVED******REMOVED***
        pkl = "cnumpy\ndtype\np0\n(S'M8'\np1\nI0\nI1\ntp2\nRp3\n" + \
              "(I4\nS'>'\np4\nNNNI-1\nI-1\nI0\n((dp5\n(S'us'\np6\n" + \
              "I1\nI1\nI1\ntp7\ntp8\ntp9\nb."
        assert_equal(pickle.loads(asbytes(pkl***REMOVED******REMOVED***, np.dtype('>M8[us***REMOVED***'***REMOVED******REMOVED***

    def test_setstate(self***REMOVED***:
        "Verify that datetime dtype __setstate__ can handle bad arguments"
        dt = np.dtype('>M8[us***REMOVED***'***REMOVED***
        assert_raises(ValueError, dt.__setstate__, (4, '>', None, None, None, -1, -1, 0, 1***REMOVED******REMOVED***
        assert_(dt.__reduce__(***REMOVED***[2***REMOVED*** == np.dtype('>M8[us***REMOVED***'***REMOVED***.__reduce__(***REMOVED***[2***REMOVED******REMOVED***
        assert_raises(TypeError, dt.__setstate__, (4, '>', None, None, None, -1, -1, 0, ({***REMOVED***, 'xxx'***REMOVED******REMOVED******REMOVED***
        assert_(dt.__reduce__(***REMOVED***[2***REMOVED*** == np.dtype('>M8[us***REMOVED***'***REMOVED***.__reduce__(***REMOVED***[2***REMOVED******REMOVED***

    def test_dtype_promotion(self***REMOVED***:
        # datetime <op> datetime computes the metadata gcd
        # timedelta <op> timedelta computes the metadata gcd
        for mM in ['m', 'M'***REMOVED***:
            assert_equal(
                np.promote_types(np.dtype(mM+'8[2Y***REMOVED***'***REMOVED***, np.dtype(mM+'8[2Y***REMOVED***'***REMOVED******REMOVED***,
                np.dtype(mM+'8[2Y***REMOVED***'***REMOVED******REMOVED***
            assert_equal(
                np.promote_types(np.dtype(mM+'8[12Y***REMOVED***'***REMOVED***, np.dtype(mM+'8[15Y***REMOVED***'***REMOVED******REMOVED***,
                np.dtype(mM+'8[3Y***REMOVED***'***REMOVED******REMOVED***
            assert_equal(
                np.promote_types(np.dtype(mM+'8[62M***REMOVED***'***REMOVED***, np.dtype(mM+'8[24M***REMOVED***'***REMOVED******REMOVED***,
                np.dtype(mM+'8[2M***REMOVED***'***REMOVED******REMOVED***
            assert_equal(
                np.promote_types(np.dtype(mM+'8[1W***REMOVED***'***REMOVED***, np.dtype(mM+'8[2D***REMOVED***'***REMOVED******REMOVED***,
                np.dtype(mM+'8[1D***REMOVED***'***REMOVED******REMOVED***
            assert_equal(
                np.promote_types(np.dtype(mM+'8[W***REMOVED***'***REMOVED***, np.dtype(mM+'8[13s***REMOVED***'***REMOVED******REMOVED***,
                np.dtype(mM+'8[s***REMOVED***'***REMOVED******REMOVED***
            assert_equal(
                np.promote_types(np.dtype(mM+'8[13W***REMOVED***'***REMOVED***, np.dtype(mM+'8[49s***REMOVED***'***REMOVED******REMOVED***,
                np.dtype(mM+'8[7s***REMOVED***'***REMOVED******REMOVED***
        # timedelta <op> timedelta raises when there is no reasonable gcd
        assert_raises(TypeError, np.promote_types,
                            np.dtype('m8[Y***REMOVED***'***REMOVED***, np.dtype('m8[D***REMOVED***'***REMOVED******REMOVED***
        assert_raises(TypeError, np.promote_types,
                            np.dtype('m8[M***REMOVED***'***REMOVED***, np.dtype('m8[W***REMOVED***'***REMOVED******REMOVED***
        # timedelta <op> timedelta may overflow with big unit ranges
        assert_raises(OverflowError, np.promote_types,
                            np.dtype('m8[W***REMOVED***'***REMOVED***, np.dtype('m8[fs***REMOVED***'***REMOVED******REMOVED***
        assert_raises(OverflowError, np.promote_types,
                            np.dtype('m8[s***REMOVED***'***REMOVED***, np.dtype('m8[as***REMOVED***'***REMOVED******REMOVED***

    def test_cast_overflow(self***REMOVED***:
        # gh-4486
        def cast(***REMOVED***:
            numpy.datetime64("1971-01-01 00:00:00.000000000000000"***REMOVED***.astype("<M8[D***REMOVED***"***REMOVED***
        assert_raises(OverflowError, cast***REMOVED***

        def cast2(***REMOVED***:
            numpy.datetime64("2014"***REMOVED***.astype("<M8[fs***REMOVED***"***REMOVED***
        assert_raises(OverflowError, cast2***REMOVED***

    def test_pyobject_roundtrip(self***REMOVED***:
        # All datetime types should be able to roundtrip through object
        a = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0,
                      -1020040340, -2942398, -1, 0, 1, 234523453, 1199164176***REMOVED***,
                                                        dtype=np.int64***REMOVED***
        # With date units
        for unit in ['M8[D***REMOVED***', 'M8[W***REMOVED***', 'M8[M***REMOVED***', 'M8[Y***REMOVED***'***REMOVED***:
            b = a.copy(***REMOVED***.view(dtype=unit***REMOVED***
            b[0***REMOVED*** = '-0001-01-01'
            b[1***REMOVED*** = '-0001-12-31'
            b[2***REMOVED*** = '0000-01-01'
            b[3***REMOVED*** = '0001-01-01'
            b[4***REMOVED*** = '1969-12-31'
            b[5***REMOVED*** = '1970-01-01'
            b[6***REMOVED*** = '9999-12-31'
            b[7***REMOVED*** = '10000-01-01'
            b[8***REMOVED*** = 'NaT'

            assert_equal(b.astype(object***REMOVED***.astype(unit***REMOVED***, b,
                            "Error roundtripping unit %s" % unit***REMOVED***
        # With time units
        for unit in ['M8[as***REMOVED***', 'M8[16fs***REMOVED***', 'M8[ps***REMOVED***', 'M8[us***REMOVED***',
                     'M8[300as***REMOVED***', 'M8[20us***REMOVED***'***REMOVED***:
            b = a.copy(***REMOVED***.view(dtype=unit***REMOVED***
            b[0***REMOVED*** = '-0001-01-01T00'
            b[1***REMOVED*** = '-0001-12-31T00'
            b[2***REMOVED*** = '0000-01-01T00'
            b[3***REMOVED*** = '0001-01-01T00'
            b[4***REMOVED*** = '1969-12-31T23:59:59.999999'
            b[5***REMOVED*** = '1970-01-01T00'
            b[6***REMOVED*** = '9999-12-31T23:59:59.999999'
            b[7***REMOVED*** = '10000-01-01T00'
            b[8***REMOVED*** = 'NaT'

            assert_equal(b.astype(object***REMOVED***.astype(unit***REMOVED***, b,
                            "Error roundtripping unit %s" % unit***REMOVED***

    def test_month_truncation(self***REMOVED***:
        # Make sure that months are truncating correctly
        assert_equal(np.array('1945-03-01', dtype='M8[M***REMOVED***'***REMOVED***,
                     np.array('1945-03-31', dtype='M8[M***REMOVED***'***REMOVED******REMOVED***
        assert_equal(np.array('1969-11-01', dtype='M8[M***REMOVED***'***REMOVED***,
             np.array('1969-11-30T23:59:59.99999', dtype='M'***REMOVED***.astype('M8[M***REMOVED***'***REMOVED******REMOVED***
        assert_equal(np.array('1969-12-01', dtype='M8[M***REMOVED***'***REMOVED***,
             np.array('1969-12-31T23:59:59.99999', dtype='M'***REMOVED***.astype('M8[M***REMOVED***'***REMOVED******REMOVED***
        assert_equal(np.array('1970-01-01', dtype='M8[M***REMOVED***'***REMOVED***,
             np.array('1970-01-31T23:59:59.99999', dtype='M'***REMOVED***.astype('M8[M***REMOVED***'***REMOVED******REMOVED***
        assert_equal(np.array('1980-02-01', dtype='M8[M***REMOVED***'***REMOVED***,
             np.array('1980-02-29T23:59:59.99999', dtype='M'***REMOVED***.astype('M8[M***REMOVED***'***REMOVED******REMOVED***

    def test_different_unit_comparison(self***REMOVED***:
        # Check some years with date units
        for unit1 in ['Y', 'M', 'D'***REMOVED***:
            dt1 = np.dtype('M8[%s***REMOVED***' % unit1***REMOVED***
            for unit2 in ['Y', 'M', 'D'***REMOVED***:
                dt2 = np.dtype('M8[%s***REMOVED***' % unit2***REMOVED***
                assert_equal(np.array('1945', dtype=dt1***REMOVED***,
                             np.array('1945', dtype=dt2***REMOVED******REMOVED***
                assert_equal(np.array('1970', dtype=dt1***REMOVED***,
                             np.array('1970', dtype=dt2***REMOVED******REMOVED***
                assert_equal(np.array('9999', dtype=dt1***REMOVED***,
                             np.array('9999', dtype=dt2***REMOVED******REMOVED***
                assert_equal(np.array('10000', dtype=dt1***REMOVED***,
                             np.array('10000-01-01', dtype=dt2***REMOVED******REMOVED***
                assert_equal(np.datetime64('1945', unit1***REMOVED***,
                             np.datetime64('1945', unit2***REMOVED******REMOVED***
                assert_equal(np.datetime64('1970', unit1***REMOVED***,
                             np.datetime64('1970', unit2***REMOVED******REMOVED***
                assert_equal(np.datetime64('9999', unit1***REMOVED***,
                             np.datetime64('9999', unit2***REMOVED******REMOVED***
                assert_equal(np.datetime64('10000', unit1***REMOVED***,
                             np.datetime64('10000-01-01', unit2***REMOVED******REMOVED***
        # Check some datetimes with time units
        for unit1 in ['6h', 'h', 'm', 's', '10ms', 'ms', 'us'***REMOVED***:
            dt1 = np.dtype('M8[%s***REMOVED***' % unit1***REMOVED***
            for unit2 in ['h', 'm', 's', 'ms', 'us'***REMOVED***:
                dt2 = np.dtype('M8[%s***REMOVED***' % unit2***REMOVED***
                assert_equal(np.array('1945-03-12T18', dtype=dt1***REMOVED***,
                             np.array('1945-03-12T18', dtype=dt2***REMOVED******REMOVED***
                assert_equal(np.array('1970-03-12T18', dtype=dt1***REMOVED***,
                             np.array('1970-03-12T18', dtype=dt2***REMOVED******REMOVED***
                assert_equal(np.array('9999-03-12T18', dtype=dt1***REMOVED***,
                             np.array('9999-03-12T18', dtype=dt2***REMOVED******REMOVED***
                assert_equal(np.array('10000-01-01T00', dtype=dt1***REMOVED***,
                             np.array('10000-01-01T00', dtype=dt2***REMOVED******REMOVED***
                assert_equal(np.datetime64('1945-03-12T18', unit1***REMOVED***,
                             np.datetime64('1945-03-12T18', unit2***REMOVED******REMOVED***
                assert_equal(np.datetime64('1970-03-12T18', unit1***REMOVED***,
                             np.datetime64('1970-03-12T18', unit2***REMOVED******REMOVED***
                assert_equal(np.datetime64('9999-03-12T18', unit1***REMOVED***,
                             np.datetime64('9999-03-12T18', unit2***REMOVED******REMOVED***
                assert_equal(np.datetime64('10000-01-01T00', unit1***REMOVED***,
                             np.datetime64('10000-01-01T00', unit2***REMOVED******REMOVED***
        # Check some days with units that won't overflow
        for unit1 in ['D', '12h', 'h', 'm', 's', '4s', 'ms', 'us'***REMOVED***:
            dt1 = np.dtype('M8[%s***REMOVED***' % unit1***REMOVED***
            for unit2 in ['D', 'h', 'm', 's', 'ms', 'us'***REMOVED***:
                dt2 = np.dtype('M8[%s***REMOVED***' % unit2***REMOVED***
                assert_(np.equal(np.array('1932-02-17', dtype='M'***REMOVED***.astype(dt1***REMOVED***,
                     np.array('1932-02-17T00:00:00', dtype='M'***REMOVED***.astype(dt2***REMOVED***,
                     casting='unsafe'***REMOVED******REMOVED***
                assert_(np.equal(np.array('10000-04-27', dtype='M'***REMOVED***.astype(dt1***REMOVED***,
                     np.array('10000-04-27T00:00:00', dtype='M'***REMOVED***.astype(dt2***REMOVED***,
                     casting='unsafe'***REMOVED******REMOVED***

        # Shouldn't be able to compare datetime and timedelta
        # TODO: Changing to 'same_kind' or 'safe' casting in the ufuncs by
        #       default is needed to properly catch this kind of thing...
        a = np.array('2012-12-21', dtype='M8[D***REMOVED***'***REMOVED***
        b = np.array(3, dtype='m8[D***REMOVED***'***REMOVED***
        #assert_raises(TypeError, np.less, a, b***REMOVED***
        assert_raises(TypeError, np.less, a, b, casting='same_kind'***REMOVED***

    def test_datetime_like(self***REMOVED***:
        a = np.array([3***REMOVED***, dtype='m8[4D***REMOVED***'***REMOVED***
        b = np.array(['2012-12-21'***REMOVED***, dtype='M8[D***REMOVED***'***REMOVED***

        assert_equal(np.ones_like(a***REMOVED***.dtype, a.dtype***REMOVED***
        assert_equal(np.zeros_like(a***REMOVED***.dtype, a.dtype***REMOVED***
        assert_equal(np.empty_like(a***REMOVED***.dtype, a.dtype***REMOVED***
        assert_equal(np.ones_like(b***REMOVED***.dtype, b.dtype***REMOVED***
        assert_equal(np.zeros_like(b***REMOVED***.dtype, b.dtype***REMOVED***
        assert_equal(np.empty_like(b***REMOVED***.dtype, b.dtype***REMOVED***

    def test_datetime_unary(self***REMOVED***:
        for tda, tdb, tdzero, tdone, tdmone in \
                [
                 # One-dimensional arrays
                 (np.array([3***REMOVED***, dtype='m8[D***REMOVED***'***REMOVED***,
                  np.array([-3***REMOVED***, dtype='m8[D***REMOVED***'***REMOVED***,
                  np.array([0***REMOVED***, dtype='m8[D***REMOVED***'***REMOVED***,
                  np.array([1***REMOVED***, dtype='m8[D***REMOVED***'***REMOVED***,
                  np.array([-1***REMOVED***, dtype='m8[D***REMOVED***'***REMOVED******REMOVED***,
                 # NumPy scalars
                 (np.timedelta64(3, '[D***REMOVED***'***REMOVED***,
                  np.timedelta64(-3, '[D***REMOVED***'***REMOVED***,
                  np.timedelta64(0, '[D***REMOVED***'***REMOVED***,
                  np.timedelta64(1, '[D***REMOVED***'***REMOVED***,
                  np.timedelta64(-1, '[D***REMOVED***'***REMOVED******REMOVED******REMOVED***:
            # negative ufunc
            assert_equal(-tdb, tda***REMOVED***
            assert_equal((-tdb***REMOVED***.dtype, tda.dtype***REMOVED***
            assert_equal(np.negative(tdb***REMOVED***, tda***REMOVED***
            assert_equal(np.negative(tdb***REMOVED***.dtype, tda.dtype***REMOVED***

            # absolute ufunc
            assert_equal(np.absolute(tdb***REMOVED***, tda***REMOVED***
            assert_equal(np.absolute(tdb***REMOVED***.dtype, tda.dtype***REMOVED***

            # sign ufunc
            assert_equal(np.sign(tda***REMOVED***, tdone***REMOVED***
            assert_equal(np.sign(tdb***REMOVED***, tdmone***REMOVED***
            assert_equal(np.sign(tdzero***REMOVED***, tdzero***REMOVED***
            assert_equal(np.sign(tda***REMOVED***.dtype, tda.dtype***REMOVED***

            # The ufuncs always produce native-endian results
            assert_

    def test_datetime_add(self***REMOVED***:
        for dta, dtb, dtc, dtnat, tda, tdb, tdc in \
                    [
                     # One-dimensional arrays
                     (np.array(['2012-12-21'***REMOVED***, dtype='M8[D***REMOVED***'***REMOVED***,
                      np.array(['2012-12-24'***REMOVED***, dtype='M8[D***REMOVED***'***REMOVED***,
                      np.array(['2012-12-21T11'***REMOVED***, dtype='M8[h***REMOVED***'***REMOVED***,
                      np.array(['NaT'***REMOVED***, dtype='M8[D***REMOVED***'***REMOVED***,
                      np.array([3***REMOVED***, dtype='m8[D***REMOVED***'***REMOVED***,
                      np.array([11***REMOVED***, dtype='m8[h***REMOVED***'***REMOVED***,
                      np.array([3*24 + 11***REMOVED***, dtype='m8[h***REMOVED***'***REMOVED******REMOVED***,
                     # NumPy scalars
                     (np.datetime64('2012-12-21', '[D***REMOVED***'***REMOVED***,
                      np.datetime64('2012-12-24', '[D***REMOVED***'***REMOVED***,
                      np.datetime64('2012-12-21T11', '[h***REMOVED***'***REMOVED***,
                      np.datetime64('NaT', '[D***REMOVED***'***REMOVED***,
                      np.timedelta64(3, '[D***REMOVED***'***REMOVED***,
                      np.timedelta64(11, '[h***REMOVED***'***REMOVED***,
                      np.timedelta64(3*24 + 11, '[h***REMOVED***'***REMOVED******REMOVED******REMOVED***:
            # m8 + m8
            assert_equal(tda + tdb, tdc***REMOVED***
            assert_equal((tda + tdb***REMOVED***.dtype, np.dtype('m8[h***REMOVED***'***REMOVED******REMOVED***
            # m8 + bool
            assert_equal(tdb + True, tdb + 1***REMOVED***
            assert_equal((tdb + True***REMOVED***.dtype, np.dtype('m8[h***REMOVED***'***REMOVED******REMOVED***
            # m8 + int
            assert_equal(tdb + 3*24, tdc***REMOVED***
            assert_equal((tdb + 3*24***REMOVED***.dtype, np.dtype('m8[h***REMOVED***'***REMOVED******REMOVED***
            # bool + m8
            assert_equal(False + tdb, tdb***REMOVED***
            assert_equal((False + tdb***REMOVED***.dtype, np.dtype('m8[h***REMOVED***'***REMOVED******REMOVED***
            # int + m8
            assert_equal(3*24 + tdb, tdc***REMOVED***
            assert_equal((3*24 + tdb***REMOVED***.dtype, np.dtype('m8[h***REMOVED***'***REMOVED******REMOVED***
            # M8 + bool
            assert_equal(dta + True, dta + 1***REMOVED***
            assert_equal(dtnat + True, dtnat***REMOVED***
            assert_equal((dta + True***REMOVED***.dtype, np.dtype('M8[D***REMOVED***'***REMOVED******REMOVED***
            # M8 + int
            assert_equal(dta + 3, dtb***REMOVED***
            assert_equal(dtnat + 3, dtnat***REMOVED***
            assert_equal((dta + 3***REMOVED***.dtype, np.dtype('M8[D***REMOVED***'***REMOVED******REMOVED***
            # bool + M8
            assert_equal(False + dta, dta***REMOVED***
            assert_equal(False + dtnat, dtnat***REMOVED***
            assert_equal((False + dta***REMOVED***.dtype, np.dtype('M8[D***REMOVED***'***REMOVED******REMOVED***
            # int + M8
            assert_equal(3 + dta, dtb***REMOVED***
            assert_equal(3 + dtnat, dtnat***REMOVED***
            assert_equal((3 + dta***REMOVED***.dtype, np.dtype('M8[D***REMOVED***'***REMOVED******REMOVED***
            # M8 + m8
            assert_equal(dta + tda, dtb***REMOVED***
            assert_equal(dtnat + tda, dtnat***REMOVED***
            assert_equal((dta + tda***REMOVED***.dtype, np.dtype('M8[D***REMOVED***'***REMOVED******REMOVED***
            # m8 + M8
            assert_equal(tda + dta, dtb***REMOVED***
            assert_equal(tda + dtnat, dtnat***REMOVED***
            assert_equal((tda + dta***REMOVED***.dtype, np.dtype('M8[D***REMOVED***'***REMOVED******REMOVED***

            # In M8 + m8, the result goes to higher precision
            assert_equal(np.add(dta, tdb, casting='unsafe'***REMOVED***, dtc***REMOVED***
            assert_equal(np.add(dta, tdb, casting='unsafe'***REMOVED***.dtype,
                         np.dtype('M8[h***REMOVED***'***REMOVED******REMOVED***
            assert_equal(np.add(tdb, dta, casting='unsafe'***REMOVED***, dtc***REMOVED***
            assert_equal(np.add(tdb, dta, casting='unsafe'***REMOVED***.dtype,
                         np.dtype('M8[h***REMOVED***'***REMOVED******REMOVED***

            # M8 + M8
            assert_raises(TypeError, np.add, dta, dtb***REMOVED***

    def test_datetime_subtract(self***REMOVED***:
        for dta, dtb, dtc, dtd, dte, dtnat, tda, tdb, tdc in \
                    [
                     # One-dimensional arrays
                     (np.array(['2012-12-21'***REMOVED***, dtype='M8[D***REMOVED***'***REMOVED***,
                      np.array(['2012-12-24'***REMOVED***, dtype='M8[D***REMOVED***'***REMOVED***,
                      np.array(['1940-12-24'***REMOVED***, dtype='M8[D***REMOVED***'***REMOVED***,
                      np.array(['1940-12-24T00'***REMOVED***, dtype='M8[h***REMOVED***'***REMOVED***,
                      np.array(['1940-12-23T13'***REMOVED***, dtype='M8[h***REMOVED***'***REMOVED***,
                      np.array(['NaT'***REMOVED***, dtype='M8[D***REMOVED***'***REMOVED***,
                      np.array([3***REMOVED***, dtype='m8[D***REMOVED***'***REMOVED***,
                      np.array([11***REMOVED***, dtype='m8[h***REMOVED***'***REMOVED***,
                      np.array([3*24 - 11***REMOVED***, dtype='m8[h***REMOVED***'***REMOVED******REMOVED***,
                     # NumPy scalars
                     (np.datetime64('2012-12-21', '[D***REMOVED***'***REMOVED***,
                      np.datetime64('2012-12-24', '[D***REMOVED***'***REMOVED***,
                      np.datetime64('1940-12-24', '[D***REMOVED***'***REMOVED***,
                      np.datetime64('1940-12-24T00', '[h***REMOVED***'***REMOVED***,
                      np.datetime64('1940-12-23T13', '[h***REMOVED***'***REMOVED***,
                      np.datetime64('NaT', '[D***REMOVED***'***REMOVED***,
                      np.timedelta64(3, '[D***REMOVED***'***REMOVED***,
                      np.timedelta64(11, '[h***REMOVED***'***REMOVED***,
                      np.timedelta64(3*24 - 11, '[h***REMOVED***'***REMOVED******REMOVED******REMOVED***:
            # m8 - m8
            assert_equal(tda - tdb, tdc***REMOVED***
            assert_equal((tda - tdb***REMOVED***.dtype, np.dtype('m8[h***REMOVED***'***REMOVED******REMOVED***
            assert_equal(tdb - tda, -tdc***REMOVED***
            assert_equal((tdb - tda***REMOVED***.dtype, np.dtype('m8[h***REMOVED***'***REMOVED******REMOVED***
            # m8 - bool
            assert_equal(tdc - True, tdc - 1***REMOVED***
            assert_equal((tdc - True***REMOVED***.dtype, np.dtype('m8[h***REMOVED***'***REMOVED******REMOVED***
            # m8 - int
            assert_equal(tdc - 3*24, -tdb***REMOVED***
            assert_equal((tdc - 3*24***REMOVED***.dtype, np.dtype('m8[h***REMOVED***'***REMOVED******REMOVED***
            # int - m8
            assert_equal(False - tdb, -tdb***REMOVED***
            assert_equal((False - tdb***REMOVED***.dtype, np.dtype('m8[h***REMOVED***'***REMOVED******REMOVED***
            # int - m8
            assert_equal(3*24 - tdb, tdc***REMOVED***
            assert_equal((3*24 - tdb***REMOVED***.dtype, np.dtype('m8[h***REMOVED***'***REMOVED******REMOVED***
            # M8 - bool
            assert_equal(dtb - True, dtb - 1***REMOVED***
            assert_equal(dtnat - True, dtnat***REMOVED***
            assert_equal((dtb - True***REMOVED***.dtype, np.dtype('M8[D***REMOVED***'***REMOVED******REMOVED***
            # M8 - int
            assert_equal(dtb - 3, dta***REMOVED***
            assert_equal(dtnat - 3, dtnat***REMOVED***
            assert_equal((dtb - 3***REMOVED***.dtype, np.dtype('M8[D***REMOVED***'***REMOVED******REMOVED***
            # M8 - m8
            assert_equal(dtb - tda, dta***REMOVED***
            assert_equal(dtnat - tda, dtnat***REMOVED***
            assert_equal((dtb - tda***REMOVED***.dtype, np.dtype('M8[D***REMOVED***'***REMOVED******REMOVED***

            # In M8 - m8, the result goes to higher precision
            assert_equal(np.subtract(dtc, tdb, casting='unsafe'***REMOVED***, dte***REMOVED***
            assert_equal(np.subtract(dtc, tdb, casting='unsafe'***REMOVED***.dtype,
                         np.dtype('M8[h***REMOVED***'***REMOVED******REMOVED***

            # M8 - M8 with different goes to higher precision
            assert_equal(np.subtract(dtc, dtd, casting='unsafe'***REMOVED***,
                         np.timedelta64(0, 'h'***REMOVED******REMOVED***
            assert_equal(np.subtract(dtc, dtd, casting='unsafe'***REMOVED***.dtype,
                         np.dtype('m8[h***REMOVED***'***REMOVED******REMOVED***
            assert_equal(np.subtract(dtd, dtc, casting='unsafe'***REMOVED***,
                         np.timedelta64(0, 'h'***REMOVED******REMOVED***
            assert_equal(np.subtract(dtd, dtc, casting='unsafe'***REMOVED***.dtype,
                         np.dtype('m8[h***REMOVED***'***REMOVED******REMOVED***

            # m8 - M8
            assert_raises(TypeError, np.subtract, tda, dta***REMOVED***
            # bool - M8
            assert_raises(TypeError, np.subtract, False, dta***REMOVED***
            # int - M8
            assert_raises(TypeError, np.subtract, 3, dta***REMOVED***

    def test_datetime_multiply(self***REMOVED***:
        for dta, tda, tdb, tdc in \
                    [
                     # One-dimensional arrays
                     (np.array(['2012-12-21'***REMOVED***, dtype='M8[D***REMOVED***'***REMOVED***,
                      np.array([6***REMOVED***, dtype='m8[h***REMOVED***'***REMOVED***,
                      np.array([9***REMOVED***, dtype='m8[h***REMOVED***'***REMOVED***,
                      np.array([12***REMOVED***, dtype='m8[h***REMOVED***'***REMOVED******REMOVED***,
                     # NumPy scalars
                     (np.datetime64('2012-12-21', '[D***REMOVED***'***REMOVED***,
                      np.timedelta64(6, '[h***REMOVED***'***REMOVED***,
                      np.timedelta64(9, '[h***REMOVED***'***REMOVED***,
                      np.timedelta64(12, '[h***REMOVED***'***REMOVED******REMOVED******REMOVED***:
            # m8 * int
            assert_equal(tda * 2, tdc***REMOVED***
            assert_equal((tda * 2***REMOVED***.dtype, np.dtype('m8[h***REMOVED***'***REMOVED******REMOVED***
            # int * m8
            assert_equal(2 * tda, tdc***REMOVED***
            assert_equal((2 * tda***REMOVED***.dtype, np.dtype('m8[h***REMOVED***'***REMOVED******REMOVED***
            # m8 * float
            assert_equal(tda * 1.5, tdb***REMOVED***
            assert_equal((tda * 1.5***REMOVED***.dtype, np.dtype('m8[h***REMOVED***'***REMOVED******REMOVED***
            # float * m8
            assert_equal(1.5 * tda, tdb***REMOVED***
            assert_equal((1.5 * tda***REMOVED***.dtype, np.dtype('m8[h***REMOVED***'***REMOVED******REMOVED***

            # m8 * m8
            assert_raises(TypeError, np.multiply, tda, tdb***REMOVED***
            # m8 * M8
            assert_raises(TypeError, np.multiply, dta, tda***REMOVED***
            # M8 * m8
            assert_raises(TypeError, np.multiply, tda, dta***REMOVED***
            # M8 * int
            assert_raises(TypeError, np.multiply, dta, 2***REMOVED***
            # int * M8
            assert_raises(TypeError, np.multiply, 2, dta***REMOVED***
            # M8 * float
            assert_raises(TypeError, np.multiply, dta, 1.5***REMOVED***
            # float * M8
            assert_raises(TypeError, np.multiply, 1.5, dta***REMOVED***

        # NaTs
        with warnings.catch_warnings(***REMOVED***:
            warnings.filterwarnings('ignore', category=RuntimeWarning***REMOVED***
            nat = np.timedelta64('NaT'***REMOVED***
            def check(a, b, res***REMOVED***:
                assert_equal(a * b, res***REMOVED***
                assert_equal(b * a, res***REMOVED***
            for tp in (int, float***REMOVED***:
                check(nat, tp(2***REMOVED***, nat***REMOVED***
                check(nat, tp(0***REMOVED***, nat***REMOVED***
            for f in (float('inf'***REMOVED***, float('nan'***REMOVED******REMOVED***:
                check(np.timedelta64(1***REMOVED***, f, nat***REMOVED***
                check(np.timedelta64(0***REMOVED***, f, nat***REMOVED***
                check(nat, f, nat***REMOVED***

    def test_datetime_divide(self***REMOVED***:
        for dta, tda, tdb, tdc, tdd in \
                    [
                     # One-dimensional arrays
                     (np.array(['2012-12-21'***REMOVED***, dtype='M8[D***REMOVED***'***REMOVED***,
                      np.array([6***REMOVED***, dtype='m8[h***REMOVED***'***REMOVED***,
                      np.array([9***REMOVED***, dtype='m8[h***REMOVED***'***REMOVED***,
                      np.array([12***REMOVED***, dtype='m8[h***REMOVED***'***REMOVED***,
                      np.array([6***REMOVED***, dtype='m8[m***REMOVED***'***REMOVED******REMOVED***,
                     # NumPy scalars
                     (np.datetime64('2012-12-21', '[D***REMOVED***'***REMOVED***,
                      np.timedelta64(6, '[h***REMOVED***'***REMOVED***,
                      np.timedelta64(9, '[h***REMOVED***'***REMOVED***,
                      np.timedelta64(12, '[h***REMOVED***'***REMOVED***,
                      np.timedelta64(6, '[m***REMOVED***'***REMOVED******REMOVED******REMOVED***:
            # m8 / int
            assert_equal(tdc / 2, tda***REMOVED***
            assert_equal((tdc / 2***REMOVED***.dtype, np.dtype('m8[h***REMOVED***'***REMOVED******REMOVED***
            # m8 / float
            assert_equal(tda / 0.5, tdc***REMOVED***
            assert_equal((tda / 0.5***REMOVED***.dtype, np.dtype('m8[h***REMOVED***'***REMOVED******REMOVED***
            # m8 / m8
            assert_equal(tda / tdb, 6.0 / 9.0***REMOVED***
            assert_equal(np.divide(tda, tdb***REMOVED***, 6.0 / 9.0***REMOVED***
            assert_equal(np.true_divide(tda, tdb***REMOVED***, 6.0 / 9.0***REMOVED***
            assert_equal(tdb / tda, 9.0 / 6.0***REMOVED***
            assert_equal((tda / tdb***REMOVED***.dtype, np.dtype('f8'***REMOVED******REMOVED***
            assert_equal(tda / tdd, 60.0***REMOVED***
            assert_equal(tdd / tda, 1.0 / 60.0***REMOVED***

            # m8 // m8
            assert_raises(TypeError, np.floor_divide, tda, tdb***REMOVED***
            # int / m8
            assert_raises(TypeError, np.divide, 2, tdb***REMOVED***
            # float / m8
            assert_raises(TypeError, np.divide, 0.5, tdb***REMOVED***
            # m8 / M8
            assert_raises(TypeError, np.divide, dta, tda***REMOVED***
            # M8 / m8
            assert_raises(TypeError, np.divide, tda, dta***REMOVED***
            # M8 / int
            assert_raises(TypeError, np.divide, dta, 2***REMOVED***
            # int / M8
            assert_raises(TypeError, np.divide, 2, dta***REMOVED***
            # M8 / float
            assert_raises(TypeError, np.divide, dta, 1.5***REMOVED***
            # float / M8
            assert_raises(TypeError, np.divide, 1.5, dta***REMOVED***

        # NaTs
        with warnings.catch_warnings(***REMOVED***:
            warnings.filterwarnings('ignore', category=RuntimeWarning***REMOVED***
            nat = np.timedelta64('NaT'***REMOVED***
            for tp in (int, float***REMOVED***:
                assert_equal(np.timedelta64(1***REMOVED*** / tp(0***REMOVED***, nat***REMOVED***
                assert_equal(np.timedelta64(0***REMOVED*** / tp(0***REMOVED***, nat***REMOVED***
                assert_equal(nat / tp(0***REMOVED***, nat***REMOVED***
                assert_equal(nat / tp(2***REMOVED***, nat***REMOVED***
            # Division by inf
            assert_equal(np.timedelta64(1***REMOVED*** / float('inf'***REMOVED***, np.timedelta64(0***REMOVED******REMOVED***
            assert_equal(np.timedelta64(0***REMOVED*** / float('inf'***REMOVED***, np.timedelta64(0***REMOVED******REMOVED***
            assert_equal(nat / float('inf'***REMOVED***, nat***REMOVED***
            # Division by nan
            assert_equal(np.timedelta64(1***REMOVED*** / float('nan'***REMOVED***, nat***REMOVED***
            assert_equal(np.timedelta64(0***REMOVED*** / float('nan'***REMOVED***, nat***REMOVED***
            assert_equal(nat / float('nan'***REMOVED***, nat***REMOVED***

    def test_datetime_compare(self***REMOVED***:
        # Test all the comparison operators
        a = np.datetime64('2000-03-12T18:00:00.000000'***REMOVED***
        b = np.array(['2000-03-12T18:00:00.000000',
                      '2000-03-12T17:59:59.999999',
                      '2000-03-12T18:00:00.000001',
                      '1970-01-11T12:00:00.909090',
                      '2016-01-11T12:00:00.909090'***REMOVED***,
                      dtype='datetime64[us***REMOVED***'***REMOVED***
        assert_equal(np.equal(a, b***REMOVED***, [1, 0, 0, 0, 0***REMOVED******REMOVED***
        assert_equal(np.not_equal(a, b***REMOVED***, [0, 1, 1, 1, 1***REMOVED******REMOVED***
        assert_equal(np.less(a, b***REMOVED***, [0, 0, 1, 0, 1***REMOVED******REMOVED***
        assert_equal(np.less_equal(a, b***REMOVED***, [1, 0, 1, 0, 1***REMOVED******REMOVED***
        assert_equal(np.greater(a, b***REMOVED***, [0, 1, 0, 1, 0***REMOVED******REMOVED***
        assert_equal(np.greater_equal(a, b***REMOVED***, [1, 1, 0, 1, 0***REMOVED******REMOVED***

    def test_datetime_compare_nat(self***REMOVED***:
        dt_nat = np.datetime64('NaT', 'D'***REMOVED***
        dt_other = np.datetime64('2000-01-01'***REMOVED***
        td_nat = np.timedelta64('NaT', 'h'***REMOVED***
        td_other = np.timedelta64(1, 'h'***REMOVED***

        for op in [np.equal, np.less, np.less_equal,
                   np.greater, np.greater_equal***REMOVED***:
            if op(dt_nat, dt_nat***REMOVED***:
                assert_warns(FutureWarning, op, dt_nat, dt_nat***REMOVED***
            if op(dt_nat, dt_other***REMOVED***:
                assert_warns(FutureWarning, op, dt_nat, dt_other***REMOVED***
            if op(dt_other, dt_nat***REMOVED***:
                assert_warns(FutureWarning, op, dt_other, dt_nat***REMOVED***
            if op(td_nat, td_nat***REMOVED***:
                assert_warns(FutureWarning, op, td_nat, td_nat***REMOVED***
            if op(td_nat, td_other***REMOVED***:
                assert_warns(FutureWarning, op, td_nat, td_other***REMOVED***
            if op(td_other, td_nat***REMOVED***:
                assert_warns(FutureWarning, op, td_other, td_nat***REMOVED***

        assert_warns(FutureWarning, np.not_equal, dt_nat, dt_nat***REMOVED***
        assert_(np.not_equal(dt_nat, dt_other***REMOVED******REMOVED***
        assert_(np.not_equal(dt_other, dt_nat***REMOVED******REMOVED***
        assert_warns(FutureWarning, np.not_equal, td_nat, td_nat***REMOVED***
        assert_(np.not_equal(td_nat, td_other***REMOVED******REMOVED***
        assert_(np.not_equal(td_other, td_nat***REMOVED******REMOVED***

    def test_datetime_minmax(self***REMOVED***:
        # The metadata of the result should become the GCD
        # of the operand metadata
        a = np.array('1999-03-12T13', dtype='M8[2m***REMOVED***'***REMOVED***
        b = np.array('1999-03-12T12', dtype='M8[s***REMOVED***'***REMOVED***
        assert_equal(np.minimum(a, b***REMOVED***, b***REMOVED***
        assert_equal(np.minimum(a, b***REMOVED***.dtype, np.dtype('M8[s***REMOVED***'***REMOVED******REMOVED***
        assert_equal(np.fmin(a, b***REMOVED***, b***REMOVED***
        assert_equal(np.fmin(a, b***REMOVED***.dtype, np.dtype('M8[s***REMOVED***'***REMOVED******REMOVED***
        assert_equal(np.maximum(a, b***REMOVED***, a***REMOVED***
        assert_equal(np.maximum(a, b***REMOVED***.dtype, np.dtype('M8[s***REMOVED***'***REMOVED******REMOVED***
        assert_equal(np.fmax(a, b***REMOVED***, a***REMOVED***
        assert_equal(np.fmax(a, b***REMOVED***.dtype, np.dtype('M8[s***REMOVED***'***REMOVED******REMOVED***
        # Viewed as integers, the comparison is opposite because
        # of the units chosen
        assert_equal(np.minimum(a.view('i8'***REMOVED***, b.view('i8'***REMOVED******REMOVED***, a.view('i8'***REMOVED******REMOVED***

        # Interaction with NaT
        a = np.array('1999-03-12T13', dtype='M8[2m***REMOVED***'***REMOVED***
        dtnat = np.array('NaT', dtype='M8[h***REMOVED***'***REMOVED***
        assert_equal(np.minimum(a, dtnat***REMOVED***, a***REMOVED***
        assert_equal(np.minimum(dtnat, a***REMOVED***, a***REMOVED***
        assert_equal(np.maximum(a, dtnat***REMOVED***, a***REMOVED***
        assert_equal(np.maximum(dtnat, a***REMOVED***, a***REMOVED***

        # Also do timedelta
        a = np.array(3, dtype='m8[h***REMOVED***'***REMOVED***
        b = np.array(3*3600 - 3, dtype='m8[s***REMOVED***'***REMOVED***
        assert_equal(np.minimum(a, b***REMOVED***, b***REMOVED***
        assert_equal(np.minimum(a, b***REMOVED***.dtype, np.dtype('m8[s***REMOVED***'***REMOVED******REMOVED***
        assert_equal(np.fmin(a, b***REMOVED***, b***REMOVED***
        assert_equal(np.fmin(a, b***REMOVED***.dtype, np.dtype('m8[s***REMOVED***'***REMOVED******REMOVED***
        assert_equal(np.maximum(a, b***REMOVED***, a***REMOVED***
        assert_equal(np.maximum(a, b***REMOVED***.dtype, np.dtype('m8[s***REMOVED***'***REMOVED******REMOVED***
        assert_equal(np.fmax(a, b***REMOVED***, a***REMOVED***
        assert_equal(np.fmax(a, b***REMOVED***.dtype, np.dtype('m8[s***REMOVED***'***REMOVED******REMOVED***
        # Viewed as integers, the comparison is opposite because
        # of the units chosen
        assert_equal(np.minimum(a.view('i8'***REMOVED***, b.view('i8'***REMOVED******REMOVED***, a.view('i8'***REMOVED******REMOVED***

        # should raise between datetime and timedelta
        #
        # TODO: Allowing unsafe casting by
        #       default in ufuncs strikes again... :(
        a = np.array(3, dtype='m8[h***REMOVED***'***REMOVED***
        b = np.array('1999-03-12T12', dtype='M8[s***REMOVED***'***REMOVED***
        #assert_raises(TypeError, np.minimum, a, b***REMOVED***
        #assert_raises(TypeError, np.maximum, a, b***REMOVED***
        #assert_raises(TypeError, np.fmin, a, b***REMOVED***
        #assert_raises(TypeError, np.fmax, a, b***REMOVED***
        assert_raises(TypeError, np.minimum, a, b, casting='same_kind'***REMOVED***
        assert_raises(TypeError, np.maximum, a, b, casting='same_kind'***REMOVED***
        assert_raises(TypeError, np.fmin, a, b, casting='same_kind'***REMOVED***
        assert_raises(TypeError, np.fmax, a, b, casting='same_kind'***REMOVED***

    def test_hours(self***REMOVED***:
        t = np.ones(3, dtype='M8[s***REMOVED***'***REMOVED***
        t[0***REMOVED*** = 60*60*24 + 60*60*10
        assert_(t[0***REMOVED***.item(***REMOVED***.hour == 10***REMOVED***

    def test_divisor_conversion_year(self***REMOVED***:
        assert_(np.dtype('M8[Y/4***REMOVED***'***REMOVED*** == np.dtype('M8[3M***REMOVED***'***REMOVED******REMOVED***
        assert_(np.dtype('M8[Y/13***REMOVED***'***REMOVED*** == np.dtype('M8[4W***REMOVED***'***REMOVED******REMOVED***
        assert_(np.dtype('M8[3Y/73***REMOVED***'***REMOVED*** == np.dtype('M8[15D***REMOVED***'***REMOVED******REMOVED***

    def test_divisor_conversion_month(self***REMOVED***:
        assert_(np.dtype('M8[M/2***REMOVED***'***REMOVED*** == np.dtype('M8[2W***REMOVED***'***REMOVED******REMOVED***
        assert_(np.dtype('M8[M/15***REMOVED***'***REMOVED*** == np.dtype('M8[2D***REMOVED***'***REMOVED******REMOVED***
        assert_(np.dtype('M8[3M/40***REMOVED***'***REMOVED*** == np.dtype('M8[54h***REMOVED***'***REMOVED******REMOVED***

    def test_divisor_conversion_week(self***REMOVED***:
        assert_(np.dtype('m8[W/7***REMOVED***'***REMOVED*** == np.dtype('m8[D***REMOVED***'***REMOVED******REMOVED***
        assert_(np.dtype('m8[3W/14***REMOVED***'***REMOVED*** == np.dtype('m8[36h***REMOVED***'***REMOVED******REMOVED***
        assert_(np.dtype('m8[5W/140***REMOVED***'***REMOVED*** == np.dtype('m8[360m***REMOVED***'***REMOVED******REMOVED***

    def test_divisor_conversion_day(self***REMOVED***:
        assert_(np.dtype('M8[D/12***REMOVED***'***REMOVED*** == np.dtype('M8[2h***REMOVED***'***REMOVED******REMOVED***
        assert_(np.dtype('M8[D/120***REMOVED***'***REMOVED*** == np.dtype('M8[12m***REMOVED***'***REMOVED******REMOVED***
        assert_(np.dtype('M8[3D/960***REMOVED***'***REMOVED*** == np.dtype('M8[270s***REMOVED***'***REMOVED******REMOVED***

    def test_divisor_conversion_hour(self***REMOVED***:
        assert_(np.dtype('m8[h/30***REMOVED***'***REMOVED*** == np.dtype('m8[2m***REMOVED***'***REMOVED******REMOVED***
        assert_(np.dtype('m8[3h/300***REMOVED***'***REMOVED*** == np.dtype('m8[36s***REMOVED***'***REMOVED******REMOVED***

    def test_divisor_conversion_minute(self***REMOVED***:
        assert_(np.dtype('m8[m/30***REMOVED***'***REMOVED*** == np.dtype('m8[2s***REMOVED***'***REMOVED******REMOVED***
        assert_(np.dtype('m8[3m/300***REMOVED***'***REMOVED*** == np.dtype('m8[600ms***REMOVED***'***REMOVED******REMOVED***

    def test_divisor_conversion_second(self***REMOVED***:
        assert_(np.dtype('m8[s/100***REMOVED***'***REMOVED*** == np.dtype('m8[10ms***REMOVED***'***REMOVED******REMOVED***
        assert_(np.dtype('m8[3s/10000***REMOVED***'***REMOVED*** == np.dtype('m8[300us***REMOVED***'***REMOVED******REMOVED***

    def test_divisor_conversion_fs(self***REMOVED***:
        assert_(np.dtype('M8[fs/100***REMOVED***'***REMOVED*** == np.dtype('M8[10as***REMOVED***'***REMOVED******REMOVED***
        self.assertRaises(ValueError, lambda: np.dtype('M8[3fs/10000***REMOVED***'***REMOVED******REMOVED***

    def test_divisor_conversion_as(self***REMOVED***:
        self.assertRaises(ValueError, lambda: np.dtype('M8[as/10***REMOVED***'***REMOVED******REMOVED***

    def test_string_parser_variants(self***REMOVED***:
        # Allow space instead of 'T' between date and time
        assert_equal(np.array(['1980-02-29T01:02:03'***REMOVED***, np.dtype('M8[s***REMOVED***'***REMOVED******REMOVED***,
                     np.array(['1980-02-29 01:02:03'***REMOVED***, np.dtype('M8[s***REMOVED***'***REMOVED******REMOVED******REMOVED***
        # Allow negative years
        assert_equal(np.array(['-1980-02-29T01:02:03'***REMOVED***, np.dtype('M8[s***REMOVED***'***REMOVED******REMOVED***,
                     np.array(['-1980-02-29 01:02:03'***REMOVED***, np.dtype('M8[s***REMOVED***'***REMOVED******REMOVED******REMOVED***
        # UTC specifier
        with assert_warns(DeprecationWarning***REMOVED***:
            assert_equal(
                np.array(['-1980-02-29T01:02:03'***REMOVED***, np.dtype('M8[s***REMOVED***'***REMOVED******REMOVED***,
                np.array(['-1980-02-29 01:02:03Z'***REMOVED***, np.dtype('M8[s***REMOVED***'***REMOVED******REMOVED******REMOVED***
        # Time zone offset
        with assert_warns(DeprecationWarning***REMOVED***:
            assert_equal(
                np.array(['1980-02-29T02:02:03'***REMOVED***, np.dtype('M8[s***REMOVED***'***REMOVED******REMOVED***,
                np.array(['1980-02-29 00:32:03-0130'***REMOVED***, np.dtype('M8[s***REMOVED***'***REMOVED******REMOVED******REMOVED***
        with assert_warns(DeprecationWarning***REMOVED***:
            assert_equal(
                np.array(['1980-02-28T22:32:03'***REMOVED***, np.dtype('M8[s***REMOVED***'***REMOVED******REMOVED***,
                np.array(['1980-02-29 00:02:03+01:30'***REMOVED***, np.dtype('M8[s***REMOVED***'***REMOVED******REMOVED******REMOVED***
        with assert_warns(DeprecationWarning***REMOVED***:
            assert_equal(
                np.array(['1980-02-29T02:32:03.506'***REMOVED***, np.dtype('M8[s***REMOVED***'***REMOVED******REMOVED***,
                np.array(['1980-02-29 00:32:03.506-02'***REMOVED***, np.dtype('M8[s***REMOVED***'***REMOVED******REMOVED******REMOVED***
        with assert_warns(DeprecationWarning***REMOVED***:
            assert_equal(np.datetime64('1977-03-02T12:30-0230'***REMOVED***,
                         np.datetime64('1977-03-02T15:00'***REMOVED******REMOVED***

    def test_string_parser_error_check(self***REMOVED***:
        # Arbitrary bad string
        assert_raises(ValueError, np.array, ['badvalue'***REMOVED***, np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        # Character after year must be '-'
        assert_raises(ValueError, np.array, ['1980X'***REMOVED***, np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        # Cannot have trailing '-'
        assert_raises(ValueError, np.array, ['1980-'***REMOVED***, np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        # Month must be in range [1,12***REMOVED***
        assert_raises(ValueError, np.array, ['1980-00'***REMOVED***, np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        assert_raises(ValueError, np.array, ['1980-13'***REMOVED***, np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        # Month must have two digits
        assert_raises(ValueError, np.array, ['1980-1'***REMOVED***, np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        assert_raises(ValueError, np.array, ['1980-1-02'***REMOVED***, np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        # 'Mor' is not a valid month
        assert_raises(ValueError, np.array, ['1980-Mor'***REMOVED***, np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        # Cannot have trailing '-'
        assert_raises(ValueError, np.array, ['1980-01-'***REMOVED***, np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        # Day must be in range [1,len(month***REMOVED******REMOVED***
        assert_raises(ValueError, np.array, ['1980-01-0'***REMOVED***, np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        assert_raises(ValueError, np.array, ['1980-01-00'***REMOVED***, np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        assert_raises(ValueError, np.array, ['1980-01-32'***REMOVED***, np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        assert_raises(ValueError, np.array, ['1979-02-29'***REMOVED***, np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        assert_raises(ValueError, np.array, ['1980-02-30'***REMOVED***, np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        assert_raises(ValueError, np.array, ['1980-03-32'***REMOVED***, np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        assert_raises(ValueError, np.array, ['1980-04-31'***REMOVED***, np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        assert_raises(ValueError, np.array, ['1980-05-32'***REMOVED***, np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        assert_raises(ValueError, np.array, ['1980-06-31'***REMOVED***, np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        assert_raises(ValueError, np.array, ['1980-07-32'***REMOVED***, np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        assert_raises(ValueError, np.array, ['1980-08-32'***REMOVED***, np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        assert_raises(ValueError, np.array, ['1980-09-31'***REMOVED***, np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        assert_raises(ValueError, np.array, ['1980-10-32'***REMOVED***, np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        assert_raises(ValueError, np.array, ['1980-11-31'***REMOVED***, np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        assert_raises(ValueError, np.array, ['1980-12-32'***REMOVED***, np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        # Cannot have trailing characters
        assert_raises(ValueError, np.array, ['1980-02-03%'***REMOVED***,
                                                        np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        assert_raises(ValueError, np.array, ['1980-02-03 q'***REMOVED***,
                                                        np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***

        # Hours must be in range [0, 23***REMOVED***
        assert_raises(ValueError, np.array, ['1980-02-03 25'***REMOVED***,
                                                        np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        assert_raises(ValueError, np.array, ['1980-02-03T25'***REMOVED***,
                                                        np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        assert_raises(ValueError, np.array, ['1980-02-03 24:01'***REMOVED***,
                                                        np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        assert_raises(ValueError, np.array, ['1980-02-03T24:01'***REMOVED***,
                                                        np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        assert_raises(ValueError, np.array, ['1980-02-03 -1'***REMOVED***,
                                                        np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        # No trailing ':'
        assert_raises(ValueError, np.array, ['1980-02-03 01:'***REMOVED***,
                                                        np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        # Minutes must be in range [0, 59***REMOVED***
        assert_raises(ValueError, np.array, ['1980-02-03 01:-1'***REMOVED***,
                                                        np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        assert_raises(ValueError, np.array, ['1980-02-03 01:60'***REMOVED***,
                                                        np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        # No trailing ':'
        assert_raises(ValueError, np.array, ['1980-02-03 01:60:'***REMOVED***,
                                                        np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        # Seconds must be in range [0, 59***REMOVED***
        assert_raises(ValueError, np.array, ['1980-02-03 01:10:-1'***REMOVED***,
                                                        np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        assert_raises(ValueError, np.array, ['1980-02-03 01:01:60'***REMOVED***,
                                                        np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        # Timezone offset must within a reasonable range
        with assert_warns(DeprecationWarning***REMOVED***:
            assert_raises(ValueError, np.array, ['1980-02-03 01:01:00+0661'***REMOVED***,
                                                            np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        with assert_warns(DeprecationWarning***REMOVED***:
            assert_raises(ValueError, np.array, ['1980-02-03 01:01:00+2500'***REMOVED***,
                                                            np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        with assert_warns(DeprecationWarning***REMOVED***:
            assert_raises(ValueError, np.array, ['1980-02-03 01:01:00-0070'***REMOVED***,
                                                            np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        with assert_warns(DeprecationWarning***REMOVED***:
            assert_raises(ValueError, np.array, ['1980-02-03 01:01:00-3000'***REMOVED***,
                                                            np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***
        with assert_warns(DeprecationWarning***REMOVED***:
            assert_raises(ValueError, np.array, ['1980-02-03 01:01:00-25:00'***REMOVED***,
                                                            np.dtype('M8[us***REMOVED***'***REMOVED******REMOVED***

    def test_creation_overflow(self***REMOVED***:
        date = '1980-03-23 20:00:00'
        timesteps = np.array([date***REMOVED***, dtype='datetime64[s***REMOVED***'***REMOVED***[0***REMOVED***.astype(np.int64***REMOVED***
        for unit in ['ms', 'us', 'ns'***REMOVED***:
            timesteps *= 1000
            x = np.array([date***REMOVED***, dtype='datetime64[%s***REMOVED***' % unit***REMOVED***

            assert_equal(timesteps, x[0***REMOVED***.astype(np.int64***REMOVED***,
                         err_msg='Datetime conversion error for unit %s' % unit***REMOVED***

        assert_equal(x[0***REMOVED***.astype(np.int64***REMOVED***, 322689600000000000***REMOVED***

    def test_datetime_as_string(self***REMOVED***:
        # Check all the units with default string conversion
        date = '1959-10-13'
        datetime = '1959-10-13T12:34:56.789012345678901234'

        assert_equal(np.datetime_as_string(np.datetime64(date, 'Y'***REMOVED******REMOVED***,
                     '1959'***REMOVED***
        assert_equal(np.datetime_as_string(np.datetime64(date, 'M'***REMOVED******REMOVED***,
                     '1959-10'***REMOVED***
        assert_equal(np.datetime_as_string(np.datetime64(date, 'D'***REMOVED******REMOVED***,
                     '1959-10-13'***REMOVED***
        assert_equal(np.datetime_as_string(np.datetime64(datetime, 'h'***REMOVED******REMOVED***,
                     '1959-10-13T12'***REMOVED***
        assert_equal(np.datetime_as_string(np.datetime64(datetime, 'm'***REMOVED******REMOVED***,
                     '1959-10-13T12:34'***REMOVED***
        assert_equal(np.datetime_as_string(np.datetime64(datetime, 's'***REMOVED******REMOVED***,
                     '1959-10-13T12:34:56'***REMOVED***
        assert_equal(np.datetime_as_string(np.datetime64(datetime, 'ms'***REMOVED******REMOVED***,
                     '1959-10-13T12:34:56.789'***REMOVED***
        assert_equal(np.datetime_as_string(np.datetime64(datetime, 'us'***REMOVED******REMOVED***,
                     '1959-10-13T12:34:56.789012'***REMOVED***

        datetime = '1969-12-31T23:34:56.789012345678901234'

        assert_equal(np.datetime_as_string(np.datetime64(datetime, 'ns'***REMOVED******REMOVED***,
                     '1969-12-31T23:34:56.789012345'***REMOVED***
        assert_equal(np.datetime_as_string(np.datetime64(datetime, 'ps'***REMOVED******REMOVED***,
                     '1969-12-31T23:34:56.789012345678'***REMOVED***
        assert_equal(np.datetime_as_string(np.datetime64(datetime, 'fs'***REMOVED******REMOVED***,
                     '1969-12-31T23:34:56.789012345678901'***REMOVED***

        datetime = '1969-12-31T23:59:57.789012345678901234'

        assert_equal(np.datetime_as_string(np.datetime64(datetime, 'as'***REMOVED******REMOVED***,
                     datetime***REMOVED***
        datetime = '1970-01-01T00:34:56.789012345678901234'

        assert_equal(np.datetime_as_string(np.datetime64(datetime, 'ns'***REMOVED******REMOVED***,
                     '1970-01-01T00:34:56.789012345'***REMOVED***
        assert_equal(np.datetime_as_string(np.datetime64(datetime, 'ps'***REMOVED******REMOVED***,
                     '1970-01-01T00:34:56.789012345678'***REMOVED***
        assert_equal(np.datetime_as_string(np.datetime64(datetime, 'fs'***REMOVED******REMOVED***,
                     '1970-01-01T00:34:56.789012345678901'***REMOVED***

        datetime = '1970-01-01T00:00:05.789012345678901234'

        assert_equal(np.datetime_as_string(np.datetime64(datetime, 'as'***REMOVED******REMOVED***,
                     datetime***REMOVED***

        # String conversion with the unit= parameter
        a = np.datetime64('2032-07-18T12:23:34.123456', 'us'***REMOVED***
        assert_equal(np.datetime_as_string(a, unit='Y', casting='unsafe'***REMOVED***,
                            '2032'***REMOVED***
        assert_equal(np.datetime_as_string(a, unit='M', casting='unsafe'***REMOVED***,
                            '2032-07'***REMOVED***
        assert_equal(np.datetime_as_string(a, unit='W', casting='unsafe'***REMOVED***,
                            '2032-07-18'***REMOVED***
        assert_equal(np.datetime_as_string(a, unit='D', casting='unsafe'***REMOVED***,
                            '2032-07-18'***REMOVED***
        assert_equal(np.datetime_as_string(a, unit='h'***REMOVED***, '2032-07-18T12'***REMOVED***
        assert_equal(np.datetime_as_string(a, unit='m'***REMOVED***,
                            '2032-07-18T12:23'***REMOVED***
        assert_equal(np.datetime_as_string(a, unit='s'***REMOVED***,
                            '2032-07-18T12:23:34'***REMOVED***
        assert_equal(np.datetime_as_string(a, unit='ms'***REMOVED***,
                            '2032-07-18T12:23:34.123'***REMOVED***
        assert_equal(np.datetime_as_string(a, unit='us'***REMOVED***,
                            '2032-07-18T12:23:34.123456'***REMOVED***
        assert_equal(np.datetime_as_string(a, unit='ns'***REMOVED***,
                            '2032-07-18T12:23:34.123456000'***REMOVED***
        assert_equal(np.datetime_as_string(a, unit='ps'***REMOVED***,
                            '2032-07-18T12:23:34.123456000000'***REMOVED***
        assert_equal(np.datetime_as_string(a, unit='fs'***REMOVED***,
                            '2032-07-18T12:23:34.123456000000000'***REMOVED***
        assert_equal(np.datetime_as_string(a, unit='as'***REMOVED***,
                            '2032-07-18T12:23:34.123456000000000000'***REMOVED***

        # unit='auto' parameter
        assert_equal(np.datetime_as_string(
                np.datetime64('2032-07-18T12:23:34.123456', 'us'***REMOVED***, unit='auto'***REMOVED***,
                '2032-07-18T12:23:34.123456'***REMOVED***
        assert_equal(np.datetime_as_string(
                np.datetime64('2032-07-18T12:23:34.12', 'us'***REMOVED***, unit='auto'***REMOVED***,
                '2032-07-18T12:23:34.120'***REMOVED***
        assert_equal(np.datetime_as_string(
                np.datetime64('2032-07-18T12:23:34', 'us'***REMOVED***, unit='auto'***REMOVED***,
                '2032-07-18T12:23:34'***REMOVED***
        assert_equal(np.datetime_as_string(
                np.datetime64('2032-07-18T12:23:00', 'us'***REMOVED***, unit='auto'***REMOVED***,
                '2032-07-18T12:23'***REMOVED***
        # 'auto' doesn't split up hour and minute
        assert_equal(np.datetime_as_string(
                np.datetime64('2032-07-18T12:00:00', 'us'***REMOVED***, unit='auto'***REMOVED***,
                '2032-07-18T12:00'***REMOVED***
        assert_equal(np.datetime_as_string(
                np.datetime64('2032-07-18T00:00:00', 'us'***REMOVED***, unit='auto'***REMOVED***,
                '2032-07-18'***REMOVED***
        # 'auto' doesn't split up the date
        assert_equal(np.datetime_as_string(
                np.datetime64('2032-07-01T00:00:00', 'us'***REMOVED***, unit='auto'***REMOVED***,
                '2032-07-01'***REMOVED***
        assert_equal(np.datetime_as_string(
                np.datetime64('2032-01-01T00:00:00', 'us'***REMOVED***, unit='auto'***REMOVED***,
                '2032-01-01'***REMOVED***

    @dec.skipif(not _has_pytz, "The pytz module is not available."***REMOVED***
    def test_datetime_as_string_timezone(self***REMOVED***:
        # timezone='local' vs 'UTC'
        a = np.datetime64('2010-03-15T06:30', 'm'***REMOVED***
        assert_equal(np.datetime_as_string(a***REMOVED***,
                '2010-03-15T06:30'***REMOVED***
        assert_equal(np.datetime_as_string(a, timezone='naive'***REMOVED***,
                '2010-03-15T06:30'***REMOVED***
        assert_equal(np.datetime_as_string(a, timezone='UTC'***REMOVED***,
                '2010-03-15T06:30Z'***REMOVED***
        assert_(np.datetime_as_string(a, timezone='local'***REMOVED*** !=
                '2010-03-15T06:30'***REMOVED***

        b = np.datetime64('2010-02-15T06:30', 'm'***REMOVED***

        assert_equal(np.datetime_as_string(a, timezone=tz('US/Central'***REMOVED******REMOVED***,
                     '2010-03-15T01:30-0500'***REMOVED***
        assert_equal(np.datetime_as_string(a, timezone=tz('US/Eastern'***REMOVED******REMOVED***,
                     '2010-03-15T02:30-0400'***REMOVED***
        assert_equal(np.datetime_as_string(a, timezone=tz('US/Pacific'***REMOVED******REMOVED***,
                     '2010-03-14T23:30-0700'***REMOVED***

        assert_equal(np.datetime_as_string(b, timezone=tz('US/Central'***REMOVED******REMOVED***,
                     '2010-02-15T00:30-0600'***REMOVED***
        assert_equal(np.datetime_as_string(b, timezone=tz('US/Eastern'***REMOVED******REMOVED***,
                     '2010-02-15T01:30-0500'***REMOVED***
        assert_equal(np.datetime_as_string(b, timezone=tz('US/Pacific'***REMOVED******REMOVED***,
                     '2010-02-14T22:30-0800'***REMOVED***

        # Dates to strings with a timezone attached is disabled by default
        assert_raises(TypeError, np.datetime_as_string, a, unit='D',
                           timezone=tz('US/Pacific'***REMOVED******REMOVED***
        # Check that we can print out the date in the specified time zone
        assert_equal(np.datetime_as_string(a, unit='D',
                           timezone=tz('US/Pacific'***REMOVED***, casting='unsafe'***REMOVED***,
                     '2010-03-14'***REMOVED***
        assert_equal(np.datetime_as_string(b, unit='D',
                           timezone=tz('US/Central'***REMOVED***, casting='unsafe'***REMOVED***,
                     '2010-02-15'***REMOVED***

    def test_datetime_arange(self***REMOVED***:
        # With two datetimes provided as strings
        a = np.arange('2010-01-05', '2010-01-10', dtype='M8[D***REMOVED***'***REMOVED***
        assert_equal(a.dtype, np.dtype('M8[D***REMOVED***'***REMOVED******REMOVED***
        assert_equal(a,
            np.array(['2010-01-05', '2010-01-06', '2010-01-07',
                      '2010-01-08', '2010-01-09'***REMOVED***, dtype='M8[D***REMOVED***'***REMOVED******REMOVED***

        a = np.arange('1950-02-10', '1950-02-06', -1, dtype='M8[D***REMOVED***'***REMOVED***
        assert_equal(a.dtype, np.dtype('M8[D***REMOVED***'***REMOVED******REMOVED***
        assert_equal(a,
            np.array(['1950-02-10', '1950-02-09', '1950-02-08',
                      '1950-02-07'***REMOVED***, dtype='M8[D***REMOVED***'***REMOVED******REMOVED***

        # Unit should be detected as months here
        a = np.arange('1969-05', '1970-05', 2, dtype='M8'***REMOVED***
        assert_equal(a.dtype, np.dtype('M8[M***REMOVED***'***REMOVED******REMOVED***
        assert_equal(a,
            np.datetime64('1969-05'***REMOVED*** + np.arange(12, step=2***REMOVED******REMOVED***

        # datetime, integer|timedelta works as well
        # produces arange (start, start + stop***REMOVED*** in this case
        a = np.arange('1969', 18, 3, dtype='M8'***REMOVED***
        assert_equal(a.dtype, np.dtype('M8[Y***REMOVED***'***REMOVED******REMOVED***
        assert_equal(a,
            np.datetime64('1969'***REMOVED*** + np.arange(18, step=3***REMOVED******REMOVED***
        a = np.arange('1969-12-19', 22, np.timedelta64(2***REMOVED***, dtype='M8'***REMOVED***
        assert_equal(a.dtype, np.dtype('M8[D***REMOVED***'***REMOVED******REMOVED***
        assert_equal(a,
            np.datetime64('1969-12-19'***REMOVED*** + np.arange(22, step=2***REMOVED******REMOVED***

        # Step of 0 is disallowed
        assert_raises(ValueError, np.arange, np.datetime64('today'***REMOVED***,
                                np.datetime64('today'***REMOVED*** + 3, 0***REMOVED***
        # Promotion across nonlinear unit boundaries is disallowed
        assert_raises(TypeError, np.arange, np.datetime64('2011-03-01', 'D'***REMOVED***,
                                np.timedelta64(5, 'M'***REMOVED******REMOVED***
        assert_raises(TypeError, np.arange,
                                np.datetime64('2012-02-03T14', 's'***REMOVED***,
                                np.timedelta64(5, 'Y'***REMOVED******REMOVED***

    def test_datetime_arange_no_dtype(self***REMOVED***:
        d = np.array('2010-01-04', dtype="M8[D***REMOVED***"***REMOVED***
        assert_equal(np.arange(d, d + 1***REMOVED***, d***REMOVED***
        assert_raises(ValueError, np.arange, d***REMOVED***

    def test_timedelta_arange(self***REMOVED***:
        a = np.arange(3, 10, dtype='m8'***REMOVED***
        assert_equal(a.dtype, np.dtype('m8'***REMOVED******REMOVED***
        assert_equal(a, np.timedelta64(0***REMOVED*** + np.arange(3, 10***REMOVED******REMOVED***

        a = np.arange(np.timedelta64(3, 's'***REMOVED***, 10, 2, dtype='m8'***REMOVED***
        assert_equal(a.dtype, np.dtype('m8[s***REMOVED***'***REMOVED******REMOVED***
        assert_equal(a, np.timedelta64(0, 's'***REMOVED*** + np.arange(3, 10, 2***REMOVED******REMOVED***

        # Step of 0 is disallowed
        assert_raises(ValueError, np.arange, np.timedelta64(0***REMOVED***,
                                np.timedelta64(5***REMOVED***, 0***REMOVED***
        # Promotion across nonlinear unit boundaries is disallowed
        assert_raises(TypeError, np.arange, np.timedelta64(0, 'D'***REMOVED***,
                                np.timedelta64(5, 'M'***REMOVED******REMOVED***
        assert_raises(TypeError, np.arange, np.timedelta64(0, 'Y'***REMOVED***,
                                np.timedelta64(5, 'D'***REMOVED******REMOVED***

    def test_timedelta_arange_no_dtype(self***REMOVED***:
        d = np.array(5, dtype="m8[D***REMOVED***"***REMOVED***
        assert_equal(np.arange(d, d + 1***REMOVED***, d***REMOVED***
        assert_raises(ValueError, np.arange, d***REMOVED***

    def test_datetime_maximum_reduce(self***REMOVED***:
        a = np.array(['2010-01-02', '1999-03-14', '1833-03'***REMOVED***, dtype='M8[D***REMOVED***'***REMOVED***
        assert_equal(np.maximum.reduce(a***REMOVED***.dtype, np.dtype('M8[D***REMOVED***'***REMOVED******REMOVED***
        assert_equal(np.maximum.reduce(a***REMOVED***,
                     np.datetime64('2010-01-02'***REMOVED******REMOVED***

        a = np.array([1, 4, 0, 7, 2***REMOVED***, dtype='m8[s***REMOVED***'***REMOVED***
        assert_equal(np.maximum.reduce(a***REMOVED***.dtype, np.dtype('m8[s***REMOVED***'***REMOVED******REMOVED***
        assert_equal(np.maximum.reduce(a***REMOVED***,
                     np.timedelta64(7, 's'***REMOVED******REMOVED***

    def test_datetime_busday_offset(self***REMOVED***:
        # First Monday in June
        assert_equal(
            np.busday_offset('2011-06', 0, roll='forward', weekmask='Mon'***REMOVED***,
            np.datetime64('2011-06-06'***REMOVED******REMOVED***
        # Last Monday in June
        assert_equal(
            np.busday_offset('2011-07', -1, roll='forward', weekmask='Mon'***REMOVED***,
            np.datetime64('2011-06-27'***REMOVED******REMOVED***
        assert_equal(
            np.busday_offset('2011-07', -1, roll='forward', weekmask='Mon'***REMOVED***,
            np.datetime64('2011-06-27'***REMOVED******REMOVED***

        # Default M-F business days, different roll modes
        assert_equal(np.busday_offset('2010-08', 0, roll='backward'***REMOVED***,
                     np.datetime64('2010-07-30'***REMOVED******REMOVED***
        assert_equal(np.busday_offset('2010-08', 0, roll='preceding'***REMOVED***,
                     np.datetime64('2010-07-30'***REMOVED******REMOVED***
        assert_equal(np.busday_offset('2010-08', 0, roll='modifiedpreceding'***REMOVED***,
                     np.datetime64('2010-08-02'***REMOVED******REMOVED***
        assert_equal(np.busday_offset('2010-08', 0, roll='modifiedfollowing'***REMOVED***,
                     np.datetime64('2010-08-02'***REMOVED******REMOVED***
        assert_equal(np.busday_offset('2010-08', 0, roll='forward'***REMOVED***,
                     np.datetime64('2010-08-02'***REMOVED******REMOVED***
        assert_equal(np.busday_offset('2010-08', 0, roll='following'***REMOVED***,
                     np.datetime64('2010-08-02'***REMOVED******REMOVED***
        assert_equal(np.busday_offset('2010-10-30', 0, roll='following'***REMOVED***,
                     np.datetime64('2010-11-01'***REMOVED******REMOVED***
        assert_equal(
                np.busday_offset('2010-10-30', 0, roll='modifiedfollowing'***REMOVED***,
                np.datetime64('2010-10-29'***REMOVED******REMOVED***
        assert_equal(
                np.busday_offset('2010-10-30', 0, roll='modifiedpreceding'***REMOVED***,
                np.datetime64('2010-10-29'***REMOVED******REMOVED***
        assert_equal(
                np.busday_offset('2010-10-16', 0, roll='modifiedfollowing'***REMOVED***,
                np.datetime64('2010-10-18'***REMOVED******REMOVED***
        assert_equal(
                np.busday_offset('2010-10-16', 0, roll='modifiedpreceding'***REMOVED***,
                np.datetime64('2010-10-15'***REMOVED******REMOVED***
        # roll='raise' by default
        assert_raises(ValueError, np.busday_offset, '2011-06-04', 0***REMOVED***

        # Bigger offset values
        assert_equal(np.busday_offset('2006-02-01', 25***REMOVED***,
                     np.datetime64('2006-03-08'***REMOVED******REMOVED***
        assert_equal(np.busday_offset('2006-03-08', -25***REMOVED***,
                     np.datetime64('2006-02-01'***REMOVED******REMOVED***
        assert_equal(np.busday_offset('2007-02-25', 11, weekmask='SatSun'***REMOVED***,
                     np.datetime64('2007-04-07'***REMOVED******REMOVED***
        assert_equal(np.busday_offset('2007-04-07', -11, weekmask='SatSun'***REMOVED***,
                     np.datetime64('2007-02-25'***REMOVED******REMOVED***

        # NaT values when roll is not raise
        assert_equal(np.busday_offset(np.datetime64('NaT'***REMOVED***, 1, roll='nat'***REMOVED***,
                     np.datetime64('NaT'***REMOVED******REMOVED***
        assert_equal(np.busday_offset(np.datetime64('NaT'***REMOVED***, 1, roll='following'***REMOVED***,
                     np.datetime64('NaT'***REMOVED******REMOVED***
        assert_equal(np.busday_offset(np.datetime64('NaT'***REMOVED***, 1, roll='preceding'***REMOVED***,
                     np.datetime64('NaT'***REMOVED******REMOVED***


    def test_datetime_busdaycalendar(self***REMOVED***:
        # Check that it removes NaT, duplicates, and weekends
        # and sorts the result.
        bdd = np.busdaycalendar(
            holidays=['NaT', '2011-01-17', '2011-03-06', 'NaT',
                       '2011-12-26', '2011-05-30', '2011-01-17'***REMOVED******REMOVED***
        assert_equal(bdd.holidays,
            np.array(['2011-01-17', '2011-05-30', '2011-12-26'***REMOVED***, dtype='M8'***REMOVED******REMOVED***
        # Default M-F weekmask
        assert_equal(bdd.weekmask, np.array([1, 1, 1, 1, 1, 0, 0***REMOVED***, dtype='?'***REMOVED******REMOVED***

        # Check string weekmask with varying whitespace.
        bdd = np.busdaycalendar(weekmask="Sun TueWed  Thu\tFri"***REMOVED***
        assert_equal(bdd.weekmask, np.array([0, 1, 1, 1, 1, 0, 1***REMOVED***, dtype='?'***REMOVED******REMOVED***

        # Check length 7 0/1 string
        bdd = np.busdaycalendar(weekmask="0011001"***REMOVED***
        assert_equal(bdd.weekmask, np.array([0, 0, 1, 1, 0, 0, 1***REMOVED***, dtype='?'***REMOVED******REMOVED***

        # Check length 7 string weekmask.
        bdd = np.busdaycalendar(weekmask="Mon Tue"***REMOVED***
        assert_equal(bdd.weekmask, np.array([1, 1, 0, 0, 0, 0, 0***REMOVED***, dtype='?'***REMOVED******REMOVED***

        # All-zeros weekmask should raise
        assert_raises(ValueError, np.busdaycalendar, weekmask=[0, 0, 0, 0, 0, 0, 0***REMOVED******REMOVED***
        # weekday names must be correct case
        assert_raises(ValueError, np.busdaycalendar, weekmask="satsun"***REMOVED***
        # All-zeros weekmask should raise
        assert_raises(ValueError, np.busdaycalendar, weekmask=""***REMOVED***
        # Invalid weekday name codes should raise
        assert_raises(ValueError, np.busdaycalendar, weekmask="Mon Tue We"***REMOVED***
        assert_raises(ValueError, np.busdaycalendar, weekmask="Max"***REMOVED***
        assert_raises(ValueError, np.busdaycalendar, weekmask="Monday Tue"***REMOVED***

    def test_datetime_busday_holidays_offset(self***REMOVED***:
        # With exactly one holiday
        assert_equal(
            np.busday_offset('2011-11-10', 1, holidays=['2011-11-11'***REMOVED******REMOVED***,
            np.datetime64('2011-11-14'***REMOVED******REMOVED***
        assert_equal(
            np.busday_offset('2011-11-04', 5, holidays=['2011-11-11'***REMOVED******REMOVED***,
            np.datetime64('2011-11-14'***REMOVED******REMOVED***
        assert_equal(
            np.busday_offset('2011-11-10', 5, holidays=['2011-11-11'***REMOVED******REMOVED***,
            np.datetime64('2011-11-18'***REMOVED******REMOVED***
        assert_equal(
            np.busday_offset('2011-11-14', -1, holidays=['2011-11-11'***REMOVED******REMOVED***,
            np.datetime64('2011-11-10'***REMOVED******REMOVED***
        assert_equal(
            np.busday_offset('2011-11-18', -5, holidays=['2011-11-11'***REMOVED******REMOVED***,
            np.datetime64('2011-11-10'***REMOVED******REMOVED***
        assert_equal(
            np.busday_offset('2011-11-14', -5, holidays=['2011-11-11'***REMOVED******REMOVED***,
            np.datetime64('2011-11-04'***REMOVED******REMOVED***
        # With the holiday appearing twice
        assert_equal(
            np.busday_offset('2011-11-10', 1,
                holidays=['2011-11-11', '2011-11-11'***REMOVED******REMOVED***,
            np.datetime64('2011-11-14'***REMOVED******REMOVED***
        assert_equal(
            np.busday_offset('2011-11-14', -1,
                holidays=['2011-11-11', '2011-11-11'***REMOVED******REMOVED***,
            np.datetime64('2011-11-10'***REMOVED******REMOVED***
        # With a NaT holiday
        assert_equal(
            np.busday_offset('2011-11-10', 1,
                holidays=['2011-11-11', 'NaT'***REMOVED******REMOVED***,
            np.datetime64('2011-11-14'***REMOVED******REMOVED***
        assert_equal(
            np.busday_offset('2011-11-14', -1,
                holidays=['NaT', '2011-11-11'***REMOVED******REMOVED***,
            np.datetime64('2011-11-10'***REMOVED******REMOVED***
        # With another holiday after
        assert_equal(
            np.busday_offset('2011-11-10', 1,
                holidays=['2011-11-11', '2011-11-24'***REMOVED******REMOVED***,
            np.datetime64('2011-11-14'***REMOVED******REMOVED***
        assert_equal(
            np.busday_offset('2011-11-14', -1,
                holidays=['2011-11-11', '2011-11-24'***REMOVED******REMOVED***,
            np.datetime64('2011-11-10'***REMOVED******REMOVED***
        # With another holiday before
        assert_equal(
            np.busday_offset('2011-11-10', 1,
                holidays=['2011-10-10', '2011-11-11'***REMOVED******REMOVED***,
            np.datetime64('2011-11-14'***REMOVED******REMOVED***
        assert_equal(
            np.busday_offset('2011-11-14', -1,
                holidays=['2011-10-10', '2011-11-11'***REMOVED******REMOVED***,
            np.datetime64('2011-11-10'***REMOVED******REMOVED***
        # With another holiday before and after
        assert_equal(
            np.busday_offset('2011-11-10', 1,
                holidays=['2011-10-10', '2011-11-11', '2011-11-24'***REMOVED******REMOVED***,
            np.datetime64('2011-11-14'***REMOVED******REMOVED***
        assert_equal(
            np.busday_offset('2011-11-14', -1,
                holidays=['2011-10-10', '2011-11-11', '2011-11-24'***REMOVED******REMOVED***,
            np.datetime64('2011-11-10'***REMOVED******REMOVED***

        # A bigger forward jump across more than one week/holiday
        holidays = ['2011-10-10', '2011-11-11', '2011-11-24',
                  '2011-12-25', '2011-05-30', '2011-02-21',
                  '2011-12-26', '2012-01-02'***REMOVED***
        bdd = np.busdaycalendar(weekmask='1111100', holidays=holidays***REMOVED***
        assert_equal(
            np.busday_offset('2011-10-03', 4, holidays=holidays***REMOVED***,
            np.busday_offset('2011-10-03', 4***REMOVED******REMOVED***
        assert_equal(
            np.busday_offset('2011-10-03', 5, holidays=holidays***REMOVED***,
            np.busday_offset('2011-10-03', 5 + 1***REMOVED******REMOVED***
        assert_equal(
            np.busday_offset('2011-10-03', 27, holidays=holidays***REMOVED***,
            np.busday_offset('2011-10-03', 27 + 1***REMOVED******REMOVED***
        assert_equal(
            np.busday_offset('2011-10-03', 28, holidays=holidays***REMOVED***,
            np.busday_offset('2011-10-03', 28 + 2***REMOVED******REMOVED***
        assert_equal(
            np.busday_offset('2011-10-03', 35, holidays=holidays***REMOVED***,
            np.busday_offset('2011-10-03', 35 + 2***REMOVED******REMOVED***
        assert_equal(
            np.busday_offset('2011-10-03', 36, holidays=holidays***REMOVED***,
            np.busday_offset('2011-10-03', 36 + 3***REMOVED******REMOVED***
        assert_equal(
            np.busday_offset('2011-10-03', 56, holidays=holidays***REMOVED***,
            np.busday_offset('2011-10-03', 56 + 3***REMOVED******REMOVED***
        assert_equal(
            np.busday_offset('2011-10-03', 57, holidays=holidays***REMOVED***,
            np.busday_offset('2011-10-03', 57 + 4***REMOVED******REMOVED***
        assert_equal(
            np.busday_offset('2011-10-03', 60, holidays=holidays***REMOVED***,
            np.busday_offset('2011-10-03', 60 + 4***REMOVED******REMOVED***
        assert_equal(
            np.busday_offset('2011-10-03', 61, holidays=holidays***REMOVED***,
            np.busday_offset('2011-10-03', 61 + 5***REMOVED******REMOVED***
        assert_equal(
            np.busday_offset('2011-10-03', 61, busdaycal=bdd***REMOVED***,
            np.busday_offset('2011-10-03', 61 + 5***REMOVED******REMOVED***
        # A bigger backward jump across more than one week/holiday
        assert_equal(
            np.busday_offset('2012-01-03', -1, holidays=holidays***REMOVED***,
            np.busday_offset('2012-01-03', -1 - 1***REMOVED******REMOVED***
        assert_equal(
            np.busday_offset('2012-01-03', -4, holidays=holidays***REMOVED***,
            np.busday_offset('2012-01-03', -4 - 1***REMOVED******REMOVED***
        assert_equal(
            np.busday_offset('2012-01-03', -5, holidays=holidays***REMOVED***,
            np.busday_offset('2012-01-03', -5 - 2***REMOVED******REMOVED***
        assert_equal(
            np.busday_offset('2012-01-03', -25, holidays=holidays***REMOVED***,
            np.busday_offset('2012-01-03', -25 - 2***REMOVED******REMOVED***
        assert_equal(
            np.busday_offset('2012-01-03', -26, holidays=holidays***REMOVED***,
            np.busday_offset('2012-01-03', -26 - 3***REMOVED******REMOVED***
        assert_equal(
            np.busday_offset('2012-01-03', -33, holidays=holidays***REMOVED***,
            np.busday_offset('2012-01-03', -33 - 3***REMOVED******REMOVED***
        assert_equal(
            np.busday_offset('2012-01-03', -34, holidays=holidays***REMOVED***,
            np.busday_offset('2012-01-03', -34 - 4***REMOVED******REMOVED***
        assert_equal(
            np.busday_offset('2012-01-03', -56, holidays=holidays***REMOVED***,
            np.busday_offset('2012-01-03', -56 - 4***REMOVED******REMOVED***
        assert_equal(
            np.busday_offset('2012-01-03', -57, holidays=holidays***REMOVED***,
            np.busday_offset('2012-01-03', -57 - 5***REMOVED******REMOVED***
        assert_equal(
            np.busday_offset('2012-01-03', -57, busdaycal=bdd***REMOVED***,
            np.busday_offset('2012-01-03', -57 - 5***REMOVED******REMOVED***

        # Can't supply both a weekmask/holidays and busdaycal
        assert_raises(ValueError, np.busday_offset, '2012-01-03', -15,
                        weekmask='1111100', busdaycal=bdd***REMOVED***
        assert_raises(ValueError, np.busday_offset, '2012-01-03', -15,
                        holidays=holidays, busdaycal=bdd***REMOVED***

        # Roll with the holidays
        assert_equal(
            np.busday_offset('2011-12-25', 0,
                roll='forward', holidays=holidays***REMOVED***,
            np.datetime64('2011-12-27'***REMOVED******REMOVED***
        assert_equal(
            np.busday_offset('2011-12-26', 0,
                roll='forward', holidays=holidays***REMOVED***,
            np.datetime64('2011-12-27'***REMOVED******REMOVED***
        assert_equal(
            np.busday_offset('2011-12-26', 0,
                roll='backward', holidays=holidays***REMOVED***,
            np.datetime64('2011-12-23'***REMOVED******REMOVED***
        assert_equal(
            np.busday_offset('2012-02-27', 0,
                roll='modifiedfollowing',
                holidays=['2012-02-27', '2012-02-26', '2012-02-28',
                          '2012-03-01', '2012-02-29'***REMOVED******REMOVED***,
            np.datetime64('2012-02-24'***REMOVED******REMOVED***
        assert_equal(
            np.busday_offset('2012-03-06', 0,
                roll='modifiedpreceding',
                holidays=['2012-03-02', '2012-03-03', '2012-03-01',
                          '2012-03-05', '2012-03-07', '2012-03-06'***REMOVED******REMOVED***,
            np.datetime64('2012-03-08'***REMOVED******REMOVED***

    def test_datetime_busday_holidays_count(self***REMOVED***:
        holidays = ['2011-01-01', '2011-10-10', '2011-11-11', '2011-11-24',
                    '2011-12-25', '2011-05-30', '2011-02-21', '2011-01-17',
                    '2011-12-26', '2012-01-02', '2011-02-21', '2011-05-30',
                    '2011-07-01', '2011-07-04', '2011-09-05', '2011-10-10'***REMOVED***
        bdd = np.busdaycalendar(weekmask='1111100', holidays=holidays***REMOVED***

        # Validate against busday_offset broadcast against
        # a range of offsets
        dates = np.busday_offset('2011-01-01', np.arange(366***REMOVED***,
                        roll='forward', busdaycal=bdd***REMOVED***
        assert_equal(np.busday_count('2011-01-01', dates, busdaycal=bdd***REMOVED***,
                     np.arange(366***REMOVED******REMOVED***
        # Returns negative value when reversed
        assert_equal(np.busday_count(dates, '2011-01-01', busdaycal=bdd***REMOVED***,
                     -np.arange(366***REMOVED******REMOVED***

        dates = np.busday_offset('2011-12-31', -np.arange(366***REMOVED***,
                        roll='forward', busdaycal=bdd***REMOVED***
        assert_equal(np.busday_count(dates, '2011-12-31', busdaycal=bdd***REMOVED***,
                     np.arange(366***REMOVED******REMOVED***
        # Returns negative value when reversed
        assert_equal(np.busday_count('2011-12-31', dates, busdaycal=bdd***REMOVED***,
                     -np.arange(366***REMOVED******REMOVED***

        # Can't supply both a weekmask/holidays and busdaycal
        assert_raises(ValueError, np.busday_offset, '2012-01-03', '2012-02-03',
                        weekmask='1111100', busdaycal=bdd***REMOVED***
        assert_raises(ValueError, np.busday_offset, '2012-01-03', '2012-02-03',
                        holidays=holidays, busdaycal=bdd***REMOVED***

        # Number of Mondays in March 2011
        assert_equal(np.busday_count('2011-03', '2011-04', weekmask='Mon'***REMOVED***, 4***REMOVED***
        # Returns negative value when reversed
        assert_equal(np.busday_count('2011-04', '2011-03', weekmask='Mon'***REMOVED***, -4***REMOVED***

    def test_datetime_is_busday(self***REMOVED***:
        holidays = ['2011-01-01', '2011-10-10', '2011-11-11', '2011-11-24',
                    '2011-12-25', '2011-05-30', '2011-02-21', '2011-01-17',
                    '2011-12-26', '2012-01-02', '2011-02-21', '2011-05-30',
                    '2011-07-01', '2011-07-04', '2011-09-05', '2011-10-10',
                    'NaT'***REMOVED***
        bdd = np.busdaycalendar(weekmask='1111100', holidays=holidays***REMOVED***

        # Weekend/weekday tests
        assert_equal(np.is_busday('2011-01-01'***REMOVED***, False***REMOVED***
        assert_equal(np.is_busday('2011-01-02'***REMOVED***, False***REMOVED***
        assert_equal(np.is_busday('2011-01-03'***REMOVED***, True***REMOVED***

        # All the holidays are not business days
        assert_equal(np.is_busday(holidays, busdaycal=bdd***REMOVED***,
                     np.zeros(len(holidays***REMOVED***, dtype='?'***REMOVED******REMOVED***

    def test_datetime_y2038(self***REMOVED***:
        # Test parsing on either side of the Y2038 boundary
        a = np.datetime64('2038-01-19T03:14:07'***REMOVED***
        assert_equal(a.view(np.int64***REMOVED***, 2**31 - 1***REMOVED***
        a = np.datetime64('2038-01-19T03:14:08'***REMOVED***
        assert_equal(a.view(np.int64***REMOVED***, 2**31***REMOVED***

        # Test parsing on either side of the Y2038 boundary with
        # a manually specified timezone offset
        with assert_warns(DeprecationWarning***REMOVED***:
            a = np.datetime64('2038-01-19T04:14:07+0100'***REMOVED***
            assert_equal(a.view(np.int64***REMOVED***, 2**31 - 1***REMOVED***
        with assert_warns(DeprecationWarning***REMOVED***:
            a = np.datetime64('2038-01-19T04:14:08+0100'***REMOVED***
            assert_equal(a.view(np.int64***REMOVED***, 2**31***REMOVED***

        # Test parsing a date after Y2038
        a = np.datetime64('2038-01-20T13:21:14'***REMOVED***
        assert_equal(str(a***REMOVED***, '2038-01-20T13:21:14'***REMOVED***

class TestDateTimeData(TestCase***REMOVED***:

    def test_basic(self***REMOVED***:
        a = np.array(['1980-03-23'***REMOVED***, dtype=np.datetime64***REMOVED***
        assert_equal(np.datetime_data(a.dtype***REMOVED***, ('D', 1***REMOVED******REMOVED***

if __name__ == "__main__":
    run_module_suite(***REMOVED***
