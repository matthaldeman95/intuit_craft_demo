from __future__ import division, absolute_import, print_function

from numpy import (logspace, linspace, dtype, array, finfo, typecodes, arange,
                   isnan, ndarray***REMOVED***
from numpy.testing import (
    TestCase, run_module_suite, assert_, assert_equal, assert_raises,
    assert_array_equal
***REMOVED***


class TestLogspace(TestCase***REMOVED***:

    def test_basic(self***REMOVED***:
        y = logspace(0, 6***REMOVED***
        assert_(len(y***REMOVED*** == 50***REMOVED***
        y = logspace(0, 6, num=100***REMOVED***
        assert_(y[-1***REMOVED*** == 10 ** 6***REMOVED***
        y = logspace(0, 6, endpoint=0***REMOVED***
        assert_(y[-1***REMOVED*** < 10 ** 6***REMOVED***
        y = logspace(0, 6, num=7***REMOVED***
        assert_array_equal(y, [1, 10, 100, 1e3, 1e4, 1e5, 1e6***REMOVED******REMOVED***

    def test_dtype(self***REMOVED***:
        y = logspace(0, 6, dtype='float32'***REMOVED***
        assert_equal(y.dtype, dtype('float32'***REMOVED******REMOVED***
        y = logspace(0, 6, dtype='float64'***REMOVED***
        assert_equal(y.dtype, dtype('float64'***REMOVED******REMOVED***
        y = logspace(0, 6, dtype='int32'***REMOVED***
        assert_equal(y.dtype, dtype('int32'***REMOVED******REMOVED***


class TestLinspace(TestCase***REMOVED***:

    def test_basic(self***REMOVED***:
        y = linspace(0, 10***REMOVED***
        assert_(len(y***REMOVED*** == 50***REMOVED***
        y = linspace(2, 10, num=100***REMOVED***
        assert_(y[-1***REMOVED*** == 10***REMOVED***
        y = linspace(2, 10, endpoint=0***REMOVED***
        assert_(y[-1***REMOVED*** < 10***REMOVED***
        assert_raises(ValueError, linspace, 0, 10, num=-1***REMOVED***

    def test_corner(self***REMOVED***:
        y = list(linspace(0, 1, 1***REMOVED******REMOVED***
        assert_(y == [0.0***REMOVED***, y***REMOVED***
        y = list(linspace(0, 1, 2.5***REMOVED******REMOVED***
        assert_(y == [0.0, 1.0***REMOVED******REMOVED***

    def test_type(self***REMOVED***:
        t1 = linspace(0, 1, 0***REMOVED***.dtype
        t2 = linspace(0, 1, 1***REMOVED***.dtype
        t3 = linspace(0, 1, 2***REMOVED***.dtype
        assert_equal(t1, t2***REMOVED***
        assert_equal(t2, t3***REMOVED***

    def test_dtype(self***REMOVED***:
        y = linspace(0, 6, dtype='float32'***REMOVED***
        assert_equal(y.dtype, dtype('float32'***REMOVED******REMOVED***
        y = linspace(0, 6, dtype='float64'***REMOVED***
        assert_equal(y.dtype, dtype('float64'***REMOVED******REMOVED***
        y = linspace(0, 6, dtype='int32'***REMOVED***
        assert_equal(y.dtype, dtype('int32'***REMOVED******REMOVED***

    def test_array_scalar(self***REMOVED***:
        lim1 = array([-120, 100***REMOVED***, dtype="int8"***REMOVED***
        lim2 = array([120, -100***REMOVED***, dtype="int8"***REMOVED***
        lim3 = array([1200, 1000***REMOVED***, dtype="uint16"***REMOVED***
        t1 = linspace(lim1[0***REMOVED***, lim1[1***REMOVED***, 5***REMOVED***
        t2 = linspace(lim2[0***REMOVED***, lim2[1***REMOVED***, 5***REMOVED***
        t3 = linspace(lim3[0***REMOVED***, lim3[1***REMOVED***, 5***REMOVED***
        t4 = linspace(-120.0, 100.0, 5***REMOVED***
        t5 = linspace(120.0, -100.0, 5***REMOVED***
        t6 = linspace(1200.0, 1000.0, 5***REMOVED***
        assert_equal(t1, t4***REMOVED***
        assert_equal(t2, t5***REMOVED***
        assert_equal(t3, t6***REMOVED***

    def test_complex(self***REMOVED***:
        lim1 = linspace(1 + 2j, 3 + 4j, 5***REMOVED***
        t1 = array([ 1.0+2.j,  1.5+2.5j,  2.0+3.j,  2.5+3.5j,  3.0+4.j***REMOVED******REMOVED***
        lim2 = linspace(1j, 10, 5***REMOVED***
        t2 = array([  0.0+1.j,   2.5+0.75j,   5.0+0.5j,   7.5+0.25j,  10.0+0.j***REMOVED******REMOVED***
        assert_equal(lim1, t1***REMOVED***
        assert_equal(lim2, t2***REMOVED***

    def test_physical_quantities(self***REMOVED***:
        class PhysicalQuantity(float***REMOVED***:
            def __new__(cls, value***REMOVED***:
                return float.__new__(cls, value***REMOVED***

            def __add__(self, x***REMOVED***:
                assert_(isinstance(x, PhysicalQuantity***REMOVED******REMOVED***
                return PhysicalQuantity(float(x***REMOVED*** + float(self***REMOVED******REMOVED***
            __radd__ = __add__

            def __sub__(self, x***REMOVED***:
                assert_(isinstance(x, PhysicalQuantity***REMOVED******REMOVED***
                return PhysicalQuantity(float(self***REMOVED*** - float(x***REMOVED******REMOVED***

            def __rsub__(self, x***REMOVED***:
                assert_(isinstance(x, PhysicalQuantity***REMOVED******REMOVED***
                return PhysicalQuantity(float(x***REMOVED*** - float(self***REMOVED******REMOVED***

            def __mul__(self, x***REMOVED***:
                return PhysicalQuantity(float(x***REMOVED*** * float(self***REMOVED******REMOVED***
            __rmul__ = __mul__

            def __div__(self, x***REMOVED***:
                return PhysicalQuantity(float(self***REMOVED*** / float(x***REMOVED******REMOVED***

            def __rdiv__(self, x***REMOVED***:
                return PhysicalQuantity(float(x***REMOVED*** / float(self***REMOVED******REMOVED***

        a = PhysicalQuantity(0.0***REMOVED***
        b = PhysicalQuantity(1.0***REMOVED***
        assert_equal(linspace(a, b***REMOVED***, linspace(0.0, 1.0***REMOVED******REMOVED***

    def test_subclass(self***REMOVED***:
        class PhysicalQuantity2(ndarray***REMOVED***:
            __array_priority__ = 10

        a = array(0***REMOVED***.view(PhysicalQuantity2***REMOVED***
        b = array(1***REMOVED***.view(PhysicalQuantity2***REMOVED***
        ls = linspace(a, b***REMOVED***
        assert type(ls***REMOVED*** is PhysicalQuantity2
        assert_equal(ls, linspace(0.0, 1.0***REMOVED******REMOVED***
        ls = linspace(a, b, 1***REMOVED***
        assert type(ls***REMOVED*** is PhysicalQuantity2
        assert_equal(ls, linspace(0.0, 1.0, 1***REMOVED******REMOVED***

    def test_denormal_numbers(self***REMOVED***:
        # Regression test for gh-5437. Will probably fail when compiled
        # with ICC, which flushes denormals to zero
        for dt in (dtype(f***REMOVED*** for f in typecodes['Float'***REMOVED******REMOVED***:
            stop = finfo(dt***REMOVED***.tiny * finfo(dt***REMOVED***.resolution
            assert_(any(linspace(0, stop, 10, endpoint=False, dtype=dt***REMOVED******REMOVED******REMOVED***

    def test_equivalent_to_arange(self***REMOVED***:
        for j in range(1000***REMOVED***:
            assert_equal(linspace(0, j, j+1, dtype=int***REMOVED***,
                         arange(j+1, dtype=int***REMOVED******REMOVED***

    def test_retstep(self***REMOVED***:
        y = linspace(0, 1, 2, retstep=True***REMOVED***
        assert_(isinstance(y, tuple***REMOVED*** and len(y***REMOVED*** == 2***REMOVED***
        for num in (0, 1***REMOVED***:
            for ept in (False, True***REMOVED***:
                y = linspace(0, 1, num, endpoint=ept, retstep=True***REMOVED***
                assert_(isinstance(y, tuple***REMOVED*** and len(y***REMOVED*** == 2 and
                        len(y[0***REMOVED******REMOVED*** == num and isnan(y[1***REMOVED******REMOVED***,
                        'num={0***REMOVED***, endpoint={1***REMOVED***'.format(num, ept***REMOVED******REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
