from __future__ import division, absolute_import, print_function

import platform

import numpy as np
from numpy.testing import TestCase, assert_, run_module_suite, dec


class TestErrstate(TestCase***REMOVED***:
    @dec.skipif(platform.machine(***REMOVED*** == "armv5tel", "See gh-413."***REMOVED***
    def test_invalid(self***REMOVED***:
        with np.errstate(all='raise', under='ignore'***REMOVED***:
            a = -np.arange(3***REMOVED***
            # This should work
            with np.errstate(invalid='ignore'***REMOVED***:
                np.sqrt(a***REMOVED***
            # While this should fail!
            ***REMOVED***
                np.sqrt(a***REMOVED***
            except FloatingPointError:
                pass
            else:
                self.fail("Did not raise an invalid error"***REMOVED***

    def test_divide(self***REMOVED***:
        with np.errstate(all='raise', under='ignore'***REMOVED***:
            a = -np.arange(3***REMOVED***
            # This should work
            with np.errstate(divide='ignore'***REMOVED***:
                a // 0
            # While this should fail!
            ***REMOVED***
                a // 0
            except FloatingPointError:
                pass
            else:
                self.fail("Did not raise divide by zero error"***REMOVED***

    def test_errcall(self***REMOVED***:
        def foo(*args***REMOVED***:
            print(args***REMOVED***

        olderrcall = np.geterrcall(***REMOVED***
        with np.errstate(call=foo***REMOVED***:
            assert_(np.geterrcall(***REMOVED*** is foo, 'call is not foo'***REMOVED***
            with np.errstate(call=None***REMOVED***:
                assert_(np.geterrcall(***REMOVED*** is None, 'call is not None'***REMOVED***
        assert_(np.geterrcall(***REMOVED*** is olderrcall, 'call is not olderrcall'***REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
