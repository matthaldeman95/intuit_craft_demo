***REMOVED*** Test functions for limits module.

***REMOVED***
from __future__ import division, absolute_import, print_function

import numpy as np
from numpy.core import finfo, iinfo
from numpy import half, single, double, longdouble
from numpy.testing import (
    TestCase, run_module_suite, assert_equal
***REMOVED***

##################################################

class TestPythonFloat(TestCase***REMOVED***:
    def test_singleton(self***REMOVED***:
        ftype = finfo(float***REMOVED***
        ftype2 = finfo(float***REMOVED***
        assert_equal(id(ftype***REMOVED***, id(ftype2***REMOVED******REMOVED***

class TestHalf(TestCase***REMOVED***:
    def test_singleton(self***REMOVED***:
        ftype = finfo(half***REMOVED***
        ftype2 = finfo(half***REMOVED***
        assert_equal(id(ftype***REMOVED***, id(ftype2***REMOVED******REMOVED***

class TestSingle(TestCase***REMOVED***:
    def test_singleton(self***REMOVED***:
        ftype = finfo(single***REMOVED***
        ftype2 = finfo(single***REMOVED***
        assert_equal(id(ftype***REMOVED***, id(ftype2***REMOVED******REMOVED***

class TestDouble(TestCase***REMOVED***:
    def test_singleton(self***REMOVED***:
        ftype = finfo(double***REMOVED***
        ftype2 = finfo(double***REMOVED***
        assert_equal(id(ftype***REMOVED***, id(ftype2***REMOVED******REMOVED***

class TestLongdouble(TestCase***REMOVED***:
    def test_singleton(self,level=2***REMOVED***:
        ftype = finfo(longdouble***REMOVED***
        ftype2 = finfo(longdouble***REMOVED***
        assert_equal(id(ftype***REMOVED***, id(ftype2***REMOVED******REMOVED***

class TestIinfo(TestCase***REMOVED***:
    def test_basic(self***REMOVED***:
        dts = list(zip(['i1', 'i2', 'i4', 'i8',
                   'u1', 'u2', 'u4', 'u8'***REMOVED***,
                  [np.int8, np.int16, np.int32, np.int64,
                   np.uint8, np.uint16, np.uint32, np.uint64***REMOVED******REMOVED******REMOVED***
        for dt1, dt2 in dts:
            assert_equal(iinfo(dt1***REMOVED***.min, iinfo(dt2***REMOVED***.min***REMOVED***
            assert_equal(iinfo(dt1***REMOVED***.max, iinfo(dt2***REMOVED***.max***REMOVED***
        self.assertRaises(ValueError, iinfo, 'f4'***REMOVED***

    def test_unsigned_max(self***REMOVED***:
        types = np.sctypes['uint'***REMOVED***
        for T in types:
            assert_equal(iinfo(T***REMOVED***.max, T(-1***REMOVED******REMOVED***

class TestRepr(TestCase***REMOVED***:
    def test_iinfo_repr(self***REMOVED***:
        expected = "iinfo(min=-32768, max=32767, dtype=int16***REMOVED***"
        assert_equal(repr(np.iinfo(np.int16***REMOVED******REMOVED***, expected***REMOVED***

    def test_finfo_repr(self***REMOVED***:
        expected = "finfo(resolution=1e-06, min=-3.4028235e+38," + \
                   " max=3.4028235e+38, dtype=float32***REMOVED***"
        assert_equal(repr(np.finfo(np.float32***REMOVED******REMOVED***, expected***REMOVED***


def test_instances(***REMOVED***:
    iinfo(10***REMOVED***
    finfo(3.0***REMOVED***

if __name__ == "__main__":
    run_module_suite(***REMOVED***
