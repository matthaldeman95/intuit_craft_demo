from __future__ import division, absolute_import, print_function

import sys
import warnings

import numpy as np
from numpy import array, arange, nditer, all
from numpy.compat import asbytes, sixu
from numpy.core.multiarray_tests import test_nditer_too_large
from numpy.testing import (
    run_module_suite, assert_, assert_equal, assert_array_equal,
    assert_raises, dec
    ***REMOVED***


def iter_multi_index(i***REMOVED***:
    ret = [***REMOVED***
    while not i.finished:
        ret.append(i.multi_index***REMOVED***
        i.iternext(***REMOVED***
    return ret

def iter_indices(i***REMOVED***:
    ret = [***REMOVED***
    while not i.finished:
        ret.append(i.index***REMOVED***
        i.iternext(***REMOVED***
    return ret

def iter_iterindices(i***REMOVED***:
    ret = [***REMOVED***
    while not i.finished:
        ret.append(i.iterindex***REMOVED***
        i.iternext(***REMOVED***
    return ret

def test_iter_refcount(***REMOVED***:
    # Make sure the iterator doesn't leak

    # Basic
    a = arange(6***REMOVED***
    dt = np.dtype('f4'***REMOVED***.newbyteorder(***REMOVED***
    rc_a = sys.getrefcount(a***REMOVED***
    rc_dt = sys.getrefcount(dt***REMOVED***
    it = nditer(a, [***REMOVED***,
                [['readwrite', 'updateifcopy'***REMOVED******REMOVED***,
                casting='unsafe',
                op_dtypes=[dt***REMOVED******REMOVED***
    assert_(not it.iterationneedsapi***REMOVED***
    assert_(sys.getrefcount(a***REMOVED*** > rc_a***REMOVED***
    assert_(sys.getrefcount(dt***REMOVED*** > rc_dt***REMOVED***
    it = None
    assert_equal(sys.getrefcount(a***REMOVED***, rc_a***REMOVED***
    assert_equal(sys.getrefcount(dt***REMOVED***, rc_dt***REMOVED***

    # With a copy
    a = arange(6, dtype='f4'***REMOVED***
    dt = np.dtype('f4'***REMOVED***
    rc_a = sys.getrefcount(a***REMOVED***
    rc_dt = sys.getrefcount(dt***REMOVED***
    it = nditer(a, [***REMOVED***,
                [['readwrite'***REMOVED******REMOVED***,
                op_dtypes=[dt***REMOVED******REMOVED***
    rc2_a = sys.getrefcount(a***REMOVED***
    rc2_dt = sys.getrefcount(dt***REMOVED***
    it2 = it.copy(***REMOVED***
    assert_(sys.getrefcount(a***REMOVED*** > rc2_a***REMOVED***
    assert_(sys.getrefcount(dt***REMOVED*** > rc2_dt***REMOVED***
    it = None
    assert_equal(sys.getrefcount(a***REMOVED***, rc2_a***REMOVED***
    assert_equal(sys.getrefcount(dt***REMOVED***, rc2_dt***REMOVED***
    it2 = None
    assert_equal(sys.getrefcount(a***REMOVED***, rc_a***REMOVED***
    assert_equal(sys.getrefcount(dt***REMOVED***, rc_dt***REMOVED***

    del it2  # avoid pyflakes unused variable warning

def test_iter_best_order(***REMOVED***:
    # The iterator should always find the iteration order
    # with increasing memory addresses

    # Test the ordering for 1-D to 5-D shapes
    for shape in [(5,***REMOVED***, (3, 4***REMOVED***, (2, 3, 4***REMOVED***, (2, 3, 4, 3***REMOVED***, (2, 3, 2, 2, 3***REMOVED******REMOVED***:
        a = arange(np.prod(shape***REMOVED******REMOVED***
        # Test each combination of positive and negative strides
        for dirs in range(2**len(shape***REMOVED******REMOVED***:
            dirs_index = [slice(None***REMOVED******REMOVED****len(shape***REMOVED***
            for bit in range(len(shape***REMOVED******REMOVED***:
                if ((2**bit***REMOVED*** & dirs***REMOVED***:
                    dirs_index[bit***REMOVED*** = slice(None, None, -1***REMOVED***
            dirs_index = tuple(dirs_index***REMOVED***

            aview = a.reshape(shape***REMOVED***[dirs_index***REMOVED***
            # C-order
            i = nditer(aview, [***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
            assert_equal([x for x in i***REMOVED***, a***REMOVED***
            # Fortran-order
            i = nditer(aview.T, [***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
            assert_equal([x for x in i***REMOVED***, a***REMOVED***
            # Other order
            if len(shape***REMOVED*** > 2:
                i = nditer(aview.swapaxes(0, 1***REMOVED***, [***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
                assert_equal([x for x in i***REMOVED***, a***REMOVED***

def test_iter_c_order(***REMOVED***:
    # Test forcing C order

    # Test the ordering for 1-D to 5-D shapes
    for shape in [(5,***REMOVED***, (3, 4***REMOVED***, (2, 3, 4***REMOVED***, (2, 3, 4, 3***REMOVED***, (2, 3, 2, 2, 3***REMOVED******REMOVED***:
        a = arange(np.prod(shape***REMOVED******REMOVED***
        # Test each combination of positive and negative strides
        for dirs in range(2**len(shape***REMOVED******REMOVED***:
            dirs_index = [slice(None***REMOVED******REMOVED****len(shape***REMOVED***
            for bit in range(len(shape***REMOVED******REMOVED***:
                if ((2**bit***REMOVED*** & dirs***REMOVED***:
                    dirs_index[bit***REMOVED*** = slice(None, None, -1***REMOVED***
            dirs_index = tuple(dirs_index***REMOVED***

            aview = a.reshape(shape***REMOVED***[dirs_index***REMOVED***
            # C-order
            i = nditer(aview, order='C'***REMOVED***
            assert_equal([x for x in i***REMOVED***, aview.ravel(order='C'***REMOVED******REMOVED***
            # Fortran-order
            i = nditer(aview.T, order='C'***REMOVED***
            assert_equal([x for x in i***REMOVED***, aview.T.ravel(order='C'***REMOVED******REMOVED***
            # Other order
            if len(shape***REMOVED*** > 2:
                i = nditer(aview.swapaxes(0, 1***REMOVED***, order='C'***REMOVED***
                assert_equal([x for x in i***REMOVED***,
                                    aview.swapaxes(0, 1***REMOVED***.ravel(order='C'***REMOVED******REMOVED***

def test_iter_f_order(***REMOVED***:
    # Test forcing F order

    # Test the ordering for 1-D to 5-D shapes
    for shape in [(5,***REMOVED***, (3, 4***REMOVED***, (2, 3, 4***REMOVED***, (2, 3, 4, 3***REMOVED***, (2, 3, 2, 2, 3***REMOVED******REMOVED***:
        a = arange(np.prod(shape***REMOVED******REMOVED***
        # Test each combination of positive and negative strides
        for dirs in range(2**len(shape***REMOVED******REMOVED***:
            dirs_index = [slice(None***REMOVED******REMOVED****len(shape***REMOVED***
            for bit in range(len(shape***REMOVED******REMOVED***:
                if ((2**bit***REMOVED*** & dirs***REMOVED***:
                    dirs_index[bit***REMOVED*** = slice(None, None, -1***REMOVED***
            dirs_index = tuple(dirs_index***REMOVED***

            aview = a.reshape(shape***REMOVED***[dirs_index***REMOVED***
            # C-order
            i = nditer(aview, order='F'***REMOVED***
            assert_equal([x for x in i***REMOVED***, aview.ravel(order='F'***REMOVED******REMOVED***
            # Fortran-order
            i = nditer(aview.T, order='F'***REMOVED***
            assert_equal([x for x in i***REMOVED***, aview.T.ravel(order='F'***REMOVED******REMOVED***
            # Other order
            if len(shape***REMOVED*** > 2:
                i = nditer(aview.swapaxes(0, 1***REMOVED***, order='F'***REMOVED***
                assert_equal([x for x in i***REMOVED***,
                                    aview.swapaxes(0, 1***REMOVED***.ravel(order='F'***REMOVED******REMOVED***

def test_iter_c_or_f_order(***REMOVED***:
    # Test forcing any contiguous (C or F***REMOVED*** order

    # Test the ordering for 1-D to 5-D shapes
    for shape in [(5,***REMOVED***, (3, 4***REMOVED***, (2, 3, 4***REMOVED***, (2, 3, 4, 3***REMOVED***, (2, 3, 2, 2, 3***REMOVED******REMOVED***:
        a = arange(np.prod(shape***REMOVED******REMOVED***
        # Test each combination of positive and negative strides
        for dirs in range(2**len(shape***REMOVED******REMOVED***:
            dirs_index = [slice(None***REMOVED******REMOVED****len(shape***REMOVED***
            for bit in range(len(shape***REMOVED******REMOVED***:
                if ((2**bit***REMOVED*** & dirs***REMOVED***:
                    dirs_index[bit***REMOVED*** = slice(None, None, -1***REMOVED***
            dirs_index = tuple(dirs_index***REMOVED***

            aview = a.reshape(shape***REMOVED***[dirs_index***REMOVED***
            # C-order
            i = nditer(aview, order='A'***REMOVED***
            assert_equal([x for x in i***REMOVED***, aview.ravel(order='A'***REMOVED******REMOVED***
            # Fortran-order
            i = nditer(aview.T, order='A'***REMOVED***
            assert_equal([x for x in i***REMOVED***, aview.T.ravel(order='A'***REMOVED******REMOVED***
            # Other order
            if len(shape***REMOVED*** > 2:
                i = nditer(aview.swapaxes(0, 1***REMOVED***, order='A'***REMOVED***
                assert_equal([x for x in i***REMOVED***,
                                    aview.swapaxes(0, 1***REMOVED***.ravel(order='A'***REMOVED******REMOVED***

def test_iter_best_order_multi_index_1d(***REMOVED***:
    # The multi-indices should be correct with any reordering

    a = arange(4***REMOVED***
    # 1D order
    i = nditer(a, ['multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_multi_index(i***REMOVED***, [(0,***REMOVED***, (1,***REMOVED***, (2,***REMOVED***, (3,***REMOVED******REMOVED******REMOVED***
    # 1D reversed order
    i = nditer(a[::-1***REMOVED***, ['multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_multi_index(i***REMOVED***, [(3,***REMOVED***, (2,***REMOVED***, (1,***REMOVED***, (0,***REMOVED******REMOVED******REMOVED***

def test_iter_best_order_multi_index_2d(***REMOVED***:
    # The multi-indices should be correct with any reordering

    a = arange(6***REMOVED***
    # 2D C-order
    i = nditer(a.reshape(2, 3***REMOVED***, ['multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_multi_index(i***REMOVED***, [(0, 0***REMOVED***, (0, 1***REMOVED***, (0, 2***REMOVED***, (1, 0***REMOVED***, (1, 1***REMOVED***, (1, 2***REMOVED******REMOVED******REMOVED***
    # 2D Fortran-order
    i = nditer(a.reshape(2, 3***REMOVED***.copy(order='F'***REMOVED***, ['multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_multi_index(i***REMOVED***, [(0, 0***REMOVED***, (1, 0***REMOVED***, (0, 1***REMOVED***, (1, 1***REMOVED***, (0, 2***REMOVED***, (1, 2***REMOVED******REMOVED******REMOVED***
    # 2D reversed C-order
    i = nditer(a.reshape(2, 3***REMOVED***[::-1***REMOVED***, ['multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_multi_index(i***REMOVED***, [(1, 0***REMOVED***, (1, 1***REMOVED***, (1, 2***REMOVED***, (0, 0***REMOVED***, (0, 1***REMOVED***, (0, 2***REMOVED******REMOVED******REMOVED***
    i = nditer(a.reshape(2, 3***REMOVED***[:, ::-1***REMOVED***, ['multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_multi_index(i***REMOVED***, [(0, 2***REMOVED***, (0, 1***REMOVED***, (0, 0***REMOVED***, (1, 2***REMOVED***, (1, 1***REMOVED***, (1, 0***REMOVED******REMOVED******REMOVED***
    i = nditer(a.reshape(2, 3***REMOVED***[::-1, ::-1***REMOVED***, ['multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_multi_index(i***REMOVED***, [(1, 2***REMOVED***, (1, 1***REMOVED***, (1, 0***REMOVED***, (0, 2***REMOVED***, (0, 1***REMOVED***, (0, 0***REMOVED******REMOVED******REMOVED***
    # 2D reversed Fortran-order
    i = nditer(a.reshape(2, 3***REMOVED***.copy(order='F'***REMOVED***[::-1***REMOVED***, ['multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_multi_index(i***REMOVED***, [(1, 0***REMOVED***, (0, 0***REMOVED***, (1, 1***REMOVED***, (0, 1***REMOVED***, (1, 2***REMOVED***, (0, 2***REMOVED******REMOVED******REMOVED***
    i = nditer(a.reshape(2, 3***REMOVED***.copy(order='F'***REMOVED***[:, ::-1***REMOVED***,
                                                   ['multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_multi_index(i***REMOVED***, [(0, 2***REMOVED***, (1, 2***REMOVED***, (0, 1***REMOVED***, (1, 1***REMOVED***, (0, 0***REMOVED***, (1, 0***REMOVED******REMOVED******REMOVED***
    i = nditer(a.reshape(2, 3***REMOVED***.copy(order='F'***REMOVED***[::-1, ::-1***REMOVED***,
                                                   ['multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_multi_index(i***REMOVED***, [(1, 2***REMOVED***, (0, 2***REMOVED***, (1, 1***REMOVED***, (0, 1***REMOVED***, (1, 0***REMOVED***, (0, 0***REMOVED******REMOVED******REMOVED***

def test_iter_best_order_multi_index_3d(***REMOVED***:
    # The multi-indices should be correct with any reordering

    a = arange(12***REMOVED***
    # 3D C-order
    i = nditer(a.reshape(2, 3, 2***REMOVED***, ['multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_multi_index(i***REMOVED***,
                            [(0, 0, 0***REMOVED***, (0, 0, 1***REMOVED***, (0, 1, 0***REMOVED***, (0, 1, 1***REMOVED***, (0, 2, 0***REMOVED***, (0, 2, 1***REMOVED***,
                             (1, 0, 0***REMOVED***, (1, 0, 1***REMOVED***, (1, 1, 0***REMOVED***, (1, 1, 1***REMOVED***, (1, 2, 0***REMOVED***, (1, 2, 1***REMOVED******REMOVED******REMOVED***
    # 3D Fortran-order
    i = nditer(a.reshape(2, 3, 2***REMOVED***.copy(order='F'***REMOVED***, ['multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_multi_index(i***REMOVED***,
                            [(0, 0, 0***REMOVED***, (1, 0, 0***REMOVED***, (0, 1, 0***REMOVED***, (1, 1, 0***REMOVED***, (0, 2, 0***REMOVED***, (1, 2, 0***REMOVED***,
                             (0, 0, 1***REMOVED***, (1, 0, 1***REMOVED***, (0, 1, 1***REMOVED***, (1, 1, 1***REMOVED***, (0, 2, 1***REMOVED***, (1, 2, 1***REMOVED******REMOVED******REMOVED***
    # 3D reversed C-order
    i = nditer(a.reshape(2, 3, 2***REMOVED***[::-1***REMOVED***, ['multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_multi_index(i***REMOVED***,
                            [(1, 0, 0***REMOVED***, (1, 0, 1***REMOVED***, (1, 1, 0***REMOVED***, (1, 1, 1***REMOVED***, (1, 2, 0***REMOVED***, (1, 2, 1***REMOVED***,
                             (0, 0, 0***REMOVED***, (0, 0, 1***REMOVED***, (0, 1, 0***REMOVED***, (0, 1, 1***REMOVED***, (0, 2, 0***REMOVED***, (0, 2, 1***REMOVED******REMOVED******REMOVED***
    i = nditer(a.reshape(2, 3, 2***REMOVED***[:, ::-1***REMOVED***, ['multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_multi_index(i***REMOVED***,
                            [(0, 2, 0***REMOVED***, (0, 2, 1***REMOVED***, (0, 1, 0***REMOVED***, (0, 1, 1***REMOVED***, (0, 0, 0***REMOVED***, (0, 0, 1***REMOVED***,
                             (1, 2, 0***REMOVED***, (1, 2, 1***REMOVED***, (1, 1, 0***REMOVED***, (1, 1, 1***REMOVED***, (1, 0, 0***REMOVED***, (1, 0, 1***REMOVED******REMOVED******REMOVED***
    i = nditer(a.reshape(2, 3, 2***REMOVED***[:,:, ::-1***REMOVED***, ['multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_multi_index(i***REMOVED***,
                            [(0, 0, 1***REMOVED***, (0, 0, 0***REMOVED***, (0, 1, 1***REMOVED***, (0, 1, 0***REMOVED***, (0, 2, 1***REMOVED***, (0, 2, 0***REMOVED***,
                             (1, 0, 1***REMOVED***, (1, 0, 0***REMOVED***, (1, 1, 1***REMOVED***, (1, 1, 0***REMOVED***, (1, 2, 1***REMOVED***, (1, 2, 0***REMOVED******REMOVED******REMOVED***
    # 3D reversed Fortran-order
    i = nditer(a.reshape(2, 3, 2***REMOVED***.copy(order='F'***REMOVED***[::-1***REMOVED***,
                                                    ['multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_multi_index(i***REMOVED***,
                            [(1, 0, 0***REMOVED***, (0, 0, 0***REMOVED***, (1, 1, 0***REMOVED***, (0, 1, 0***REMOVED***, (1, 2, 0***REMOVED***, (0, 2, 0***REMOVED***,
                             (1, 0, 1***REMOVED***, (0, 0, 1***REMOVED***, (1, 1, 1***REMOVED***, (0, 1, 1***REMOVED***, (1, 2, 1***REMOVED***, (0, 2, 1***REMOVED******REMOVED******REMOVED***
    i = nditer(a.reshape(2, 3, 2***REMOVED***.copy(order='F'***REMOVED***[:, ::-1***REMOVED***,
                                                    ['multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_multi_index(i***REMOVED***,
                            [(0, 2, 0***REMOVED***, (1, 2, 0***REMOVED***, (0, 1, 0***REMOVED***, (1, 1, 0***REMOVED***, (0, 0, 0***REMOVED***, (1, 0, 0***REMOVED***,
                             (0, 2, 1***REMOVED***, (1, 2, 1***REMOVED***, (0, 1, 1***REMOVED***, (1, 1, 1***REMOVED***, (0, 0, 1***REMOVED***, (1, 0, 1***REMOVED******REMOVED******REMOVED***
    i = nditer(a.reshape(2, 3, 2***REMOVED***.copy(order='F'***REMOVED***[:,:, ::-1***REMOVED***,
                                                    ['multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_multi_index(i***REMOVED***,
                            [(0, 0, 1***REMOVED***, (1, 0, 1***REMOVED***, (0, 1, 1***REMOVED***, (1, 1, 1***REMOVED***, (0, 2, 1***REMOVED***, (1, 2, 1***REMOVED***,
                             (0, 0, 0***REMOVED***, (1, 0, 0***REMOVED***, (0, 1, 0***REMOVED***, (1, 1, 0***REMOVED***, (0, 2, 0***REMOVED***, (1, 2, 0***REMOVED******REMOVED******REMOVED***

def test_iter_best_order_c_index_1d(***REMOVED***:
    # The C index should be correct with any reordering

    a = arange(4***REMOVED***
    # 1D order
    i = nditer(a, ['c_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_indices(i***REMOVED***, [0, 1, 2, 3***REMOVED******REMOVED***
    # 1D reversed order
    i = nditer(a[::-1***REMOVED***, ['c_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_indices(i***REMOVED***, [3, 2, 1, 0***REMOVED******REMOVED***

def test_iter_best_order_c_index_2d(***REMOVED***:
    # The C index should be correct with any reordering

    a = arange(6***REMOVED***
    # 2D C-order
    i = nditer(a.reshape(2, 3***REMOVED***, ['c_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_indices(i***REMOVED***, [0, 1, 2, 3, 4, 5***REMOVED******REMOVED***
    # 2D Fortran-order
    i = nditer(a.reshape(2, 3***REMOVED***.copy(order='F'***REMOVED***,
                                    ['c_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_indices(i***REMOVED***, [0, 3, 1, 4, 2, 5***REMOVED******REMOVED***
    # 2D reversed C-order
    i = nditer(a.reshape(2, 3***REMOVED***[::-1***REMOVED***, ['c_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_indices(i***REMOVED***, [3, 4, 5, 0, 1, 2***REMOVED******REMOVED***
    i = nditer(a.reshape(2, 3***REMOVED***[:, ::-1***REMOVED***, ['c_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_indices(i***REMOVED***, [2, 1, 0, 5, 4, 3***REMOVED******REMOVED***
    i = nditer(a.reshape(2, 3***REMOVED***[::-1, ::-1***REMOVED***, ['c_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_indices(i***REMOVED***, [5, 4, 3, 2, 1, 0***REMOVED******REMOVED***
    # 2D reversed Fortran-order
    i = nditer(a.reshape(2, 3***REMOVED***.copy(order='F'***REMOVED***[::-1***REMOVED***,
                                    ['c_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_indices(i***REMOVED***, [3, 0, 4, 1, 5, 2***REMOVED******REMOVED***
    i = nditer(a.reshape(2, 3***REMOVED***.copy(order='F'***REMOVED***[:, ::-1***REMOVED***,
                                    ['c_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_indices(i***REMOVED***, [2, 5, 1, 4, 0, 3***REMOVED******REMOVED***
    i = nditer(a.reshape(2, 3***REMOVED***.copy(order='F'***REMOVED***[::-1, ::-1***REMOVED***,
                                    ['c_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_indices(i***REMOVED***, [5, 2, 4, 1, 3, 0***REMOVED******REMOVED***

def test_iter_best_order_c_index_3d(***REMOVED***:
    # The C index should be correct with any reordering

    a = arange(12***REMOVED***
    # 3D C-order
    i = nditer(a.reshape(2, 3, 2***REMOVED***, ['c_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_indices(i***REMOVED***,
                            [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11***REMOVED******REMOVED***
    # 3D Fortran-order
    i = nditer(a.reshape(2, 3, 2***REMOVED***.copy(order='F'***REMOVED***,
                                    ['c_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_indices(i***REMOVED***,
                            [0, 6, 2, 8, 4, 10, 1, 7, 3, 9, 5, 11***REMOVED******REMOVED***
    # 3D reversed C-order
    i = nditer(a.reshape(2, 3, 2***REMOVED***[::-1***REMOVED***, ['c_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_indices(i***REMOVED***,
                            [6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5***REMOVED******REMOVED***
    i = nditer(a.reshape(2, 3, 2***REMOVED***[:, ::-1***REMOVED***, ['c_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_indices(i***REMOVED***,
                            [4, 5, 2, 3, 0, 1, 10, 11, 8, 9, 6, 7***REMOVED******REMOVED***
    i = nditer(a.reshape(2, 3, 2***REMOVED***[:,:, ::-1***REMOVED***, ['c_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_indices(i***REMOVED***,
                            [1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10***REMOVED******REMOVED***
    # 3D reversed Fortran-order
    i = nditer(a.reshape(2, 3, 2***REMOVED***.copy(order='F'***REMOVED***[::-1***REMOVED***,
                                    ['c_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_indices(i***REMOVED***,
                            [6, 0, 8, 2, 10, 4, 7, 1, 9, 3, 11, 5***REMOVED******REMOVED***
    i = nditer(a.reshape(2, 3, 2***REMOVED***.copy(order='F'***REMOVED***[:, ::-1***REMOVED***,
                                    ['c_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_indices(i***REMOVED***,
                            [4, 10, 2, 8, 0, 6, 5, 11, 3, 9, 1, 7***REMOVED******REMOVED***
    i = nditer(a.reshape(2, 3, 2***REMOVED***.copy(order='F'***REMOVED***[:,:, ::-1***REMOVED***,
                                    ['c_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_indices(i***REMOVED***,
                            [1, 7, 3, 9, 5, 11, 0, 6, 2, 8, 4, 10***REMOVED******REMOVED***

def test_iter_best_order_f_index_1d(***REMOVED***:
    # The Fortran index should be correct with any reordering

    a = arange(4***REMOVED***
    # 1D order
    i = nditer(a, ['f_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_indices(i***REMOVED***, [0, 1, 2, 3***REMOVED******REMOVED***
    # 1D reversed order
    i = nditer(a[::-1***REMOVED***, ['f_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_indices(i***REMOVED***, [3, 2, 1, 0***REMOVED******REMOVED***

def test_iter_best_order_f_index_2d(***REMOVED***:
    # The Fortran index should be correct with any reordering

    a = arange(6***REMOVED***
    # 2D C-order
    i = nditer(a.reshape(2, 3***REMOVED***, ['f_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_indices(i***REMOVED***, [0, 2, 4, 1, 3, 5***REMOVED******REMOVED***
    # 2D Fortran-order
    i = nditer(a.reshape(2, 3***REMOVED***.copy(order='F'***REMOVED***,
                                    ['f_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_indices(i***REMOVED***, [0, 1, 2, 3, 4, 5***REMOVED******REMOVED***
    # 2D reversed C-order
    i = nditer(a.reshape(2, 3***REMOVED***[::-1***REMOVED***, ['f_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_indices(i***REMOVED***, [1, 3, 5, 0, 2, 4***REMOVED******REMOVED***
    i = nditer(a.reshape(2, 3***REMOVED***[:, ::-1***REMOVED***, ['f_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_indices(i***REMOVED***, [4, 2, 0, 5, 3, 1***REMOVED******REMOVED***
    i = nditer(a.reshape(2, 3***REMOVED***[::-1, ::-1***REMOVED***, ['f_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_indices(i***REMOVED***, [5, 3, 1, 4, 2, 0***REMOVED******REMOVED***
    # 2D reversed Fortran-order
    i = nditer(a.reshape(2, 3***REMOVED***.copy(order='F'***REMOVED***[::-1***REMOVED***,
                                    ['f_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_indices(i***REMOVED***, [1, 0, 3, 2, 5, 4***REMOVED******REMOVED***
    i = nditer(a.reshape(2, 3***REMOVED***.copy(order='F'***REMOVED***[:, ::-1***REMOVED***,
                                    ['f_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_indices(i***REMOVED***, [4, 5, 2, 3, 0, 1***REMOVED******REMOVED***
    i = nditer(a.reshape(2, 3***REMOVED***.copy(order='F'***REMOVED***[::-1, ::-1***REMOVED***,
                                    ['f_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_indices(i***REMOVED***, [5, 4, 3, 2, 1, 0***REMOVED******REMOVED***

def test_iter_best_order_f_index_3d(***REMOVED***:
    # The Fortran index should be correct with any reordering

    a = arange(12***REMOVED***
    # 3D C-order
    i = nditer(a.reshape(2, 3, 2***REMOVED***, ['f_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_indices(i***REMOVED***,
                            [0, 6, 2, 8, 4, 10, 1, 7, 3, 9, 5, 11***REMOVED******REMOVED***
    # 3D Fortran-order
    i = nditer(a.reshape(2, 3, 2***REMOVED***.copy(order='F'***REMOVED***,
                                    ['f_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_indices(i***REMOVED***,
                            [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11***REMOVED******REMOVED***
    # 3D reversed C-order
    i = nditer(a.reshape(2, 3, 2***REMOVED***[::-1***REMOVED***, ['f_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_indices(i***REMOVED***,
                            [1, 7, 3, 9, 5, 11, 0, 6, 2, 8, 4, 10***REMOVED******REMOVED***
    i = nditer(a.reshape(2, 3, 2***REMOVED***[:, ::-1***REMOVED***, ['f_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_indices(i***REMOVED***,
                            [4, 10, 2, 8, 0, 6, 5, 11, 3, 9, 1, 7***REMOVED******REMOVED***
    i = nditer(a.reshape(2, 3, 2***REMOVED***[:,:, ::-1***REMOVED***, ['f_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_indices(i***REMOVED***,
                            [6, 0, 8, 2, 10, 4, 7, 1, 9, 3, 11, 5***REMOVED******REMOVED***
    # 3D reversed Fortran-order
    i = nditer(a.reshape(2, 3, 2***REMOVED***.copy(order='F'***REMOVED***[::-1***REMOVED***,
                                    ['f_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_indices(i***REMOVED***,
                            [1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10***REMOVED******REMOVED***
    i = nditer(a.reshape(2, 3, 2***REMOVED***.copy(order='F'***REMOVED***[:, ::-1***REMOVED***,
                                    ['f_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_indices(i***REMOVED***,
                            [4, 5, 2, 3, 0, 1, 10, 11, 8, 9, 6, 7***REMOVED******REMOVED***
    i = nditer(a.reshape(2, 3, 2***REMOVED***.copy(order='F'***REMOVED***[:,:, ::-1***REMOVED***,
                                    ['f_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(iter_indices(i***REMOVED***,
                            [6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5***REMOVED******REMOVED***

def test_iter_no_inner_full_coalesce(***REMOVED***:
    # Check no_inner iterators which coalesce into a single inner loop

    for shape in [(5,***REMOVED***, (3, 4***REMOVED***, (2, 3, 4***REMOVED***, (2, 3, 4, 3***REMOVED***, (2, 3, 2, 2, 3***REMOVED******REMOVED***:
        size = np.prod(shape***REMOVED***
        a = arange(size***REMOVED***
        # Test each combination of forward and backwards indexing
        for dirs in range(2**len(shape***REMOVED******REMOVED***:
            dirs_index = [slice(None***REMOVED******REMOVED****len(shape***REMOVED***
            for bit in range(len(shape***REMOVED******REMOVED***:
                if ((2**bit***REMOVED*** & dirs***REMOVED***:
                    dirs_index[bit***REMOVED*** = slice(None, None, -1***REMOVED***
            dirs_index = tuple(dirs_index***REMOVED***

            aview = a.reshape(shape***REMOVED***[dirs_index***REMOVED***
            # C-order
            i = nditer(aview, ['external_loop'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
            assert_equal(i.ndim, 1***REMOVED***
            assert_equal(i[0***REMOVED***.shape, (size,***REMOVED******REMOVED***
            # Fortran-order
            i = nditer(aview.T, ['external_loop'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
            assert_equal(i.ndim, 1***REMOVED***
            assert_equal(i[0***REMOVED***.shape, (size,***REMOVED******REMOVED***
            # Other order
            if len(shape***REMOVED*** > 2:
                i = nditer(aview.swapaxes(0, 1***REMOVED***,
                                    ['external_loop'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
                assert_equal(i.ndim, 1***REMOVED***
                assert_equal(i[0***REMOVED***.shape, (size,***REMOVED******REMOVED***

def test_iter_no_inner_dim_coalescing(***REMOVED***:
    # Check no_inner iterators whose dimensions may not coalesce completely

    # Skipping the last element in a dimension prevents coalescing
    # with the next-bigger dimension
    a = arange(24***REMOVED***.reshape(2, 3, 4***REMOVED***[:,:, :-1***REMOVED***
    i = nditer(a, ['external_loop'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(i.ndim, 2***REMOVED***
    assert_equal(i[0***REMOVED***.shape, (3,***REMOVED******REMOVED***
    a = arange(24***REMOVED***.reshape(2, 3, 4***REMOVED***[:, :-1,:***REMOVED***
    i = nditer(a, ['external_loop'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(i.ndim, 2***REMOVED***
    assert_equal(i[0***REMOVED***.shape, (8,***REMOVED******REMOVED***
    a = arange(24***REMOVED***.reshape(2, 3, 4***REMOVED***[:-1,:,:***REMOVED***
    i = nditer(a, ['external_loop'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(i.ndim, 1***REMOVED***
    assert_equal(i[0***REMOVED***.shape, (12,***REMOVED******REMOVED***

    # Even with lots of 1-sized dimensions, should still coalesce
    a = arange(24***REMOVED***.reshape(1, 1, 2, 1, 1, 3, 1, 1, 4, 1, 1***REMOVED***
    i = nditer(a, ['external_loop'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(i.ndim, 1***REMOVED***
    assert_equal(i[0***REMOVED***.shape, (24,***REMOVED******REMOVED***

def test_iter_dim_coalescing(***REMOVED***:
    # Check that the correct number of dimensions are coalesced

    # Tracking a multi-index disables coalescing
    a = arange(24***REMOVED***.reshape(2, 3, 4***REMOVED***
    i = nditer(a, ['multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(i.ndim, 3***REMOVED***

    # A tracked index can allow coalescing if it's compatible with the array
    a3d = arange(24***REMOVED***.reshape(2, 3, 4***REMOVED***
    i = nditer(a3d, ['c_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(i.ndim, 1***REMOVED***
    i = nditer(a3d.swapaxes(0, 1***REMOVED***, ['c_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(i.ndim, 3***REMOVED***
    i = nditer(a3d.T, ['c_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(i.ndim, 3***REMOVED***
    i = nditer(a3d.T, ['f_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(i.ndim, 1***REMOVED***
    i = nditer(a3d.T.swapaxes(0, 1***REMOVED***, ['f_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_equal(i.ndim, 3***REMOVED***

    # When C or F order is forced, coalescing may still occur
    a3d = arange(24***REMOVED***.reshape(2, 3, 4***REMOVED***
    i = nditer(a3d, order='C'***REMOVED***
    assert_equal(i.ndim, 1***REMOVED***
    i = nditer(a3d.T, order='C'***REMOVED***
    assert_equal(i.ndim, 3***REMOVED***
    i = nditer(a3d, order='F'***REMOVED***
    assert_equal(i.ndim, 3***REMOVED***
    i = nditer(a3d.T, order='F'***REMOVED***
    assert_equal(i.ndim, 1***REMOVED***
    i = nditer(a3d, order='A'***REMOVED***
    assert_equal(i.ndim, 1***REMOVED***
    i = nditer(a3d.T, order='A'***REMOVED***
    assert_equal(i.ndim, 1***REMOVED***

def test_iter_broadcasting(***REMOVED***:
    # Standard NumPy broadcasting rules

    # 1D with scalar
    i = nditer([arange(6***REMOVED***, np.int32(2***REMOVED******REMOVED***, ['multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED****2***REMOVED***
    assert_equal(i.itersize, 6***REMOVED***
    assert_equal(i.shape, (6,***REMOVED******REMOVED***

    # 2D with scalar
    i = nditer([arange(6***REMOVED***.reshape(2, 3***REMOVED***, np.int32(2***REMOVED******REMOVED***,
                        ['multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED****2***REMOVED***
    assert_equal(i.itersize, 6***REMOVED***
    assert_equal(i.shape, (2, 3***REMOVED******REMOVED***
    # 2D with 1D
    i = nditer([arange(6***REMOVED***.reshape(2, 3***REMOVED***, arange(3***REMOVED******REMOVED***,
                        ['multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED****2***REMOVED***
    assert_equal(i.itersize, 6***REMOVED***
    assert_equal(i.shape, (2, 3***REMOVED******REMOVED***
    i = nditer([arange(2***REMOVED***.reshape(2, 1***REMOVED***, arange(3***REMOVED******REMOVED***,
                        ['multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED****2***REMOVED***
    assert_equal(i.itersize, 6***REMOVED***
    assert_equal(i.shape, (2, 3***REMOVED******REMOVED***
    # 2D with 2D
    i = nditer([arange(2***REMOVED***.reshape(2, 1***REMOVED***, arange(3***REMOVED***.reshape(1, 3***REMOVED******REMOVED***,
                        ['multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED****2***REMOVED***
    assert_equal(i.itersize, 6***REMOVED***
    assert_equal(i.shape, (2, 3***REMOVED******REMOVED***

    # 3D with scalar
    i = nditer([np.int32(2***REMOVED***, arange(24***REMOVED***.reshape(4, 2, 3***REMOVED******REMOVED***,
                        ['multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED****2***REMOVED***
    assert_equal(i.itersize, 24***REMOVED***
    assert_equal(i.shape, (4, 2, 3***REMOVED******REMOVED***
    # 3D with 1D
    i = nditer([arange(3***REMOVED***, arange(24***REMOVED***.reshape(4, 2, 3***REMOVED******REMOVED***,
                        ['multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED****2***REMOVED***
    assert_equal(i.itersize, 24***REMOVED***
    assert_equal(i.shape, (4, 2, 3***REMOVED******REMOVED***
    i = nditer([arange(3***REMOVED***, arange(8***REMOVED***.reshape(4, 2, 1***REMOVED******REMOVED***,
                        ['multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED****2***REMOVED***
    assert_equal(i.itersize, 24***REMOVED***
    assert_equal(i.shape, (4, 2, 3***REMOVED******REMOVED***
    # 3D with 2D
    i = nditer([arange(6***REMOVED***.reshape(2, 3***REMOVED***, arange(24***REMOVED***.reshape(4, 2, 3***REMOVED******REMOVED***,
                        ['multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED****2***REMOVED***
    assert_equal(i.itersize, 24***REMOVED***
    assert_equal(i.shape, (4, 2, 3***REMOVED******REMOVED***
    i = nditer([arange(2***REMOVED***.reshape(2, 1***REMOVED***, arange(24***REMOVED***.reshape(4, 2, 3***REMOVED******REMOVED***,
                        ['multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED****2***REMOVED***
    assert_equal(i.itersize, 24***REMOVED***
    assert_equal(i.shape, (4, 2, 3***REMOVED******REMOVED***
    i = nditer([arange(3***REMOVED***.reshape(1, 3***REMOVED***, arange(8***REMOVED***.reshape(4, 2, 1***REMOVED******REMOVED***,
                        ['multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED****2***REMOVED***
    assert_equal(i.itersize, 24***REMOVED***
    assert_equal(i.shape, (4, 2, 3***REMOVED******REMOVED***
    # 3D with 3D
    i = nditer([arange(2***REMOVED***.reshape(1, 2, 1***REMOVED***, arange(3***REMOVED***.reshape(1, 1, 3***REMOVED***,
                        arange(4***REMOVED***.reshape(4, 1, 1***REMOVED******REMOVED***,
                        ['multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED****3***REMOVED***
    assert_equal(i.itersize, 24***REMOVED***
    assert_equal(i.shape, (4, 2, 3***REMOVED******REMOVED***
    i = nditer([arange(6***REMOVED***.reshape(1, 2, 3***REMOVED***, arange(4***REMOVED***.reshape(4, 1, 1***REMOVED******REMOVED***,
                        ['multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED****2***REMOVED***
    assert_equal(i.itersize, 24***REMOVED***
    assert_equal(i.shape, (4, 2, 3***REMOVED******REMOVED***
    i = nditer([arange(24***REMOVED***.reshape(4, 2, 3***REMOVED***, arange(12***REMOVED***.reshape(4, 1, 3***REMOVED******REMOVED***,
                        ['multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED****2***REMOVED***
    assert_equal(i.itersize, 24***REMOVED***
    assert_equal(i.shape, (4, 2, 3***REMOVED******REMOVED***

def test_iter_itershape(***REMOVED***:
    # Check that allocated outputs work with a specified shape
    a = np.arange(6, dtype='i2'***REMOVED***.reshape(2, 3***REMOVED***
    i = nditer([a, None***REMOVED***, [***REMOVED***, [['readonly'***REMOVED***, ['writeonly', 'allocate'***REMOVED******REMOVED***,
                            op_axes=[[0, 1, None***REMOVED***, None***REMOVED***,
                            itershape=(-1, -1, 4***REMOVED******REMOVED***
    assert_equal(i.operands[1***REMOVED***.shape, (2, 3, 4***REMOVED******REMOVED***
    assert_equal(i.operands[1***REMOVED***.strides, (24, 8, 2***REMOVED******REMOVED***

    i = nditer([a.T, None***REMOVED***, [***REMOVED***, [['readonly'***REMOVED***, ['writeonly', 'allocate'***REMOVED******REMOVED***,
                            op_axes=[[0, 1, None***REMOVED***, None***REMOVED***,
                            itershape=(-1, -1, 4***REMOVED******REMOVED***
    assert_equal(i.operands[1***REMOVED***.shape, (3, 2, 4***REMOVED******REMOVED***
    assert_equal(i.operands[1***REMOVED***.strides, (8, 24, 2***REMOVED******REMOVED***

    i = nditer([a.T, None***REMOVED***, [***REMOVED***, [['readonly'***REMOVED***, ['writeonly', 'allocate'***REMOVED******REMOVED***,
                            order='F',
                            op_axes=[[0, 1, None***REMOVED***, None***REMOVED***,
                            itershape=(-1, -1, 4***REMOVED******REMOVED***
    assert_equal(i.operands[1***REMOVED***.shape, (3, 2, 4***REMOVED******REMOVED***
    assert_equal(i.operands[1***REMOVED***.strides, (2, 6, 12***REMOVED******REMOVED***

    # If we specify 1 in the itershape, it shouldn't allow broadcasting
    # of that dimension to a bigger value
    assert_raises(ValueError, nditer, [a, None***REMOVED***, [***REMOVED***,
                            [['readonly'***REMOVED***, ['writeonly', 'allocate'***REMOVED******REMOVED***,
                            op_axes=[[0, 1, None***REMOVED***, None***REMOVED***,
                            itershape=(-1, 1, 4***REMOVED******REMOVED***
    # Test bug that for no op_axes but itershape, they are NULLed correctly
    i = np.nditer([np.ones(2***REMOVED***, None, None***REMOVED***, itershape=(2,***REMOVED******REMOVED***

def test_iter_broadcasting_errors(***REMOVED***:
    # Check that errors are thrown for bad broadcasting shapes

    # 1D with 1D
    assert_raises(ValueError, nditer, [arange(2***REMOVED***, arange(3***REMOVED******REMOVED***,
                    [***REMOVED***, [['readonly'***REMOVED******REMOVED****2***REMOVED***
    # 2D with 1D
    assert_raises(ValueError, nditer,
                    [arange(6***REMOVED***.reshape(2, 3***REMOVED***, arange(2***REMOVED******REMOVED***,
                    [***REMOVED***, [['readonly'***REMOVED******REMOVED****2***REMOVED***
    # 2D with 2D
    assert_raises(ValueError, nditer,
                    [arange(6***REMOVED***.reshape(2, 3***REMOVED***, arange(9***REMOVED***.reshape(3, 3***REMOVED******REMOVED***,
                    [***REMOVED***, [['readonly'***REMOVED******REMOVED****2***REMOVED***
    assert_raises(ValueError, nditer,
                    [arange(6***REMOVED***.reshape(2, 3***REMOVED***, arange(4***REMOVED***.reshape(2, 2***REMOVED******REMOVED***,
                    [***REMOVED***, [['readonly'***REMOVED******REMOVED****2***REMOVED***
    # 3D with 3D
    assert_raises(ValueError, nditer,
                    [arange(36***REMOVED***.reshape(3, 3, 4***REMOVED***, arange(24***REMOVED***.reshape(2, 3, 4***REMOVED******REMOVED***,
                    [***REMOVED***, [['readonly'***REMOVED******REMOVED****2***REMOVED***
    assert_raises(ValueError, nditer,
                    [arange(8***REMOVED***.reshape(2, 4, 1***REMOVED***, arange(24***REMOVED***.reshape(2, 3, 4***REMOVED******REMOVED***,
                    [***REMOVED***, [['readonly'***REMOVED******REMOVED****2***REMOVED***

    # Verify that the error message mentions the right shapes
    ***REMOVED***
        nditer([arange(2***REMOVED***.reshape(1, 2, 1***REMOVED***,
                arange(3***REMOVED***.reshape(1, 3***REMOVED***,
                arange(6***REMOVED***.reshape(2, 3***REMOVED******REMOVED***,
               [***REMOVED***,
               [['readonly'***REMOVED***, ['readonly'***REMOVED***, ['writeonly', 'no_broadcast'***REMOVED******REMOVED******REMOVED***
        raise AssertionError('Should have raised a broadcast error'***REMOVED***
    except ValueError as e:
        msg = str(e***REMOVED***
        # The message should contain the shape of the 3rd operand
        assert_(msg.find('(2,3***REMOVED***'***REMOVED*** >= 0,
                'Message "%s" doesn\'t contain operand shape (2,3***REMOVED***' % msg***REMOVED***
        # The message should contain the broadcast shape
        assert_(msg.find('(1,2,3***REMOVED***'***REMOVED*** >= 0,
                'Message "%s" doesn\'t contain broadcast shape (1,2,3***REMOVED***' % msg***REMOVED***

    ***REMOVED***
        nditer([arange(6***REMOVED***.reshape(2, 3***REMOVED***, arange(2***REMOVED******REMOVED***,
               [***REMOVED***,
               [['readonly'***REMOVED***, ['readonly'***REMOVED******REMOVED***,
               op_axes=[[0, 1***REMOVED***, [0, np.newaxis***REMOVED******REMOVED***,
               itershape=(4, 3***REMOVED******REMOVED***
        raise AssertionError('Should have raised a broadcast error'***REMOVED***
    except ValueError as e:
        msg = str(e***REMOVED***
        # The message should contain "shape->remappedshape" for each operand
        assert_(msg.find('(2,3***REMOVED***->(2,3***REMOVED***'***REMOVED*** >= 0,
            'Message "%s" doesn\'t contain operand shape (2,3***REMOVED***->(2,3***REMOVED***' % msg***REMOVED***
        assert_(msg.find('(2,***REMOVED***->(2,newaxis***REMOVED***'***REMOVED*** >= 0,
                ('Message "%s" doesn\'t contain remapped operand shape' +
                '(2,***REMOVED***->(2,newaxis***REMOVED***'***REMOVED*** % msg***REMOVED***
        # The message should contain the itershape parameter
        assert_(msg.find('(4,3***REMOVED***'***REMOVED*** >= 0,
                'Message "%s" doesn\'t contain itershape parameter (4,3***REMOVED***' % msg***REMOVED***

    ***REMOVED***
        nditer([np.zeros((2, 1, 1***REMOVED******REMOVED***, np.zeros((2,***REMOVED******REMOVED******REMOVED***,
               [***REMOVED***,
               [['writeonly', 'no_broadcast'***REMOVED***, ['readonly'***REMOVED******REMOVED******REMOVED***
        raise AssertionError('Should have raised a broadcast error'***REMOVED***
    except ValueError as e:
        msg = str(e***REMOVED***
        # The message should contain the shape of the bad operand
        assert_(msg.find('(2,1,1***REMOVED***'***REMOVED*** >= 0,
            'Message "%s" doesn\'t contain operand shape (2,1,1***REMOVED***' % msg***REMOVED***
        # The message should contain the broadcast shape
        assert_(msg.find('(2,1,2***REMOVED***'***REMOVED*** >= 0,
                'Message "%s" doesn\'t contain the broadcast shape (2,1,2***REMOVED***' % msg***REMOVED***

def test_iter_flags_errors(***REMOVED***:
    # Check that bad combinations of flags produce errors

    a = arange(6***REMOVED***

    # Not enough operands
    assert_raises(ValueError, nditer, [***REMOVED***, [***REMOVED***, [***REMOVED******REMOVED***
    # Too many operands
    assert_raises(ValueError, nditer, [a***REMOVED****100, [***REMOVED***, [['readonly'***REMOVED******REMOVED****100***REMOVED***
    # Bad global flag
    assert_raises(ValueError, nditer, [a***REMOVED***, ['bad flag'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    # Bad op flag
    assert_raises(ValueError, nditer, [a***REMOVED***, [***REMOVED***, [['readonly', 'bad flag'***REMOVED******REMOVED******REMOVED***
    # Bad order parameter
    assert_raises(ValueError, nditer, [a***REMOVED***, [***REMOVED***, [['readonly'***REMOVED******REMOVED***, order='G'***REMOVED***
    # Bad casting parameter
    assert_raises(ValueError, nditer, [a***REMOVED***, [***REMOVED***, [['readonly'***REMOVED******REMOVED***, casting='noon'***REMOVED***
    # op_flags must match ops
    assert_raises(ValueError, nditer, [a***REMOVED****3, [***REMOVED***, [['readonly'***REMOVED******REMOVED****2***REMOVED***
    # Cannot track both a C and an F index
    assert_raises(ValueError, nditer, a,
                ['c_index', 'f_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    # Inner iteration and multi-indices/indices are incompatible
    assert_raises(ValueError, nditer, a,
                ['external_loop', 'multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_raises(ValueError, nditer, a,
                ['external_loop', 'c_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_raises(ValueError, nditer, a,
                ['external_loop', 'f_index'***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    # Must specify exactly one of readwrite/readonly/writeonly per operand
    assert_raises(ValueError, nditer, a, [***REMOVED***, [[***REMOVED******REMOVED******REMOVED***
    assert_raises(ValueError, nditer, a, [***REMOVED***, [['readonly', 'writeonly'***REMOVED******REMOVED******REMOVED***
    assert_raises(ValueError, nditer, a, [***REMOVED***, [['readonly', 'readwrite'***REMOVED******REMOVED******REMOVED***
    assert_raises(ValueError, nditer, a, [***REMOVED***, [['writeonly', 'readwrite'***REMOVED******REMOVED******REMOVED***
    assert_raises(ValueError, nditer, a,
                [***REMOVED***, [['readonly', 'writeonly', 'readwrite'***REMOVED******REMOVED******REMOVED***
    # Python scalars are always readonly
    assert_raises(TypeError, nditer, 1.5, [***REMOVED***, [['writeonly'***REMOVED******REMOVED******REMOVED***
    assert_raises(TypeError, nditer, 1.5, [***REMOVED***, [['readwrite'***REMOVED******REMOVED******REMOVED***
    # Array scalars are always readonly
    assert_raises(TypeError, nditer, np.int32(1***REMOVED***, [***REMOVED***, [['writeonly'***REMOVED******REMOVED******REMOVED***
    assert_raises(TypeError, nditer, np.int32(1***REMOVED***, [***REMOVED***, [['readwrite'***REMOVED******REMOVED******REMOVED***
    # Check readonly array
    a.flags.writeable = False
    assert_raises(ValueError, nditer, a, [***REMOVED***, [['writeonly'***REMOVED******REMOVED******REMOVED***
    assert_raises(ValueError, nditer, a, [***REMOVED***, [['readwrite'***REMOVED******REMOVED******REMOVED***
    a.flags.writeable = True
    # Multi-indices available only with the multi_index flag
    i = nditer(arange(6***REMOVED***, [***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_raises(ValueError, lambda i:i.multi_index, i***REMOVED***
    # Index available only with an index flag
    assert_raises(ValueError, lambda i:i.index, i***REMOVED***
    # GotoCoords and GotoIndex incompatible with buffering or no_inner

    def assign_multi_index(i***REMOVED***:
        i.multi_index = (0,***REMOVED***

    def assign_index(i***REMOVED***:
        i.index = 0

    def assign_iterindex(i***REMOVED***:
        i.iterindex = 0

    def assign_iterrange(i***REMOVED***:
        i.iterrange = (0, 1***REMOVED***
    i = nditer(arange(6***REMOVED***, ['external_loop'***REMOVED******REMOVED***
    assert_raises(ValueError, assign_multi_index, i***REMOVED***
    assert_raises(ValueError, assign_index, i***REMOVED***
    assert_raises(ValueError, assign_iterindex, i***REMOVED***
    assert_raises(ValueError, assign_iterrange, i***REMOVED***
    i = nditer(arange(6***REMOVED***, ['buffered'***REMOVED******REMOVED***
    assert_raises(ValueError, assign_multi_index, i***REMOVED***
    assert_raises(ValueError, assign_index, i***REMOVED***
    assert_raises(ValueError, assign_iterrange, i***REMOVED***
    # Can't iterate if size is zero
    assert_raises(ValueError, nditer, np.array([***REMOVED******REMOVED******REMOVED***

def test_iter_slice(***REMOVED***:
    a, b, c = np.arange(3***REMOVED***, np.arange(3***REMOVED***, np.arange(3.***REMOVED***
    i = nditer([a, b, c***REMOVED***, [***REMOVED***, ['readwrite'***REMOVED******REMOVED***
    i[0:2***REMOVED*** = (3, 3***REMOVED***
    assert_equal(a, [3, 1, 2***REMOVED******REMOVED***
    assert_equal(b, [3, 1, 2***REMOVED******REMOVED***
    assert_equal(c, [0, 1, 2***REMOVED******REMOVED***
    i[1***REMOVED*** = 12
    assert_equal(i[0:2***REMOVED***, [3, 12***REMOVED******REMOVED***

def test_iter_nbo_align_contig(***REMOVED***:
    # Check that byte order, alignment, and contig changes work

    # Byte order change by requesting a specific dtype
    a = np.arange(6, dtype='f4'***REMOVED***
    au = a.byteswap(***REMOVED***.newbyteorder(***REMOVED***
    assert_(a.dtype.byteorder != au.dtype.byteorder***REMOVED***
    i = nditer(au, [***REMOVED***, [['readwrite', 'updateifcopy'***REMOVED******REMOVED***,
                        casting='equiv',
                        op_dtypes=[np.dtype('f4'***REMOVED******REMOVED******REMOVED***
    assert_equal(i.dtypes[0***REMOVED***.byteorder, a.dtype.byteorder***REMOVED***
    assert_equal(i.operands[0***REMOVED***.dtype.byteorder, a.dtype.byteorder***REMOVED***
    assert_equal(i.operands[0***REMOVED***, a***REMOVED***
    i.operands[0***REMOVED***[:***REMOVED*** = 2
    i = None
    assert_equal(au, [2***REMOVED****6***REMOVED***

    # Byte order change by requesting NBO
    a = np.arange(6, dtype='f4'***REMOVED***
    au = a.byteswap(***REMOVED***.newbyteorder(***REMOVED***
    assert_(a.dtype.byteorder != au.dtype.byteorder***REMOVED***
    i = nditer(au, [***REMOVED***, [['readwrite', 'updateifcopy', 'nbo'***REMOVED******REMOVED***, casting='equiv'***REMOVED***
    assert_equal(i.dtypes[0***REMOVED***.byteorder, a.dtype.byteorder***REMOVED***
    assert_equal(i.operands[0***REMOVED***.dtype.byteorder, a.dtype.byteorder***REMOVED***
    assert_equal(i.operands[0***REMOVED***, a***REMOVED***
    i.operands[0***REMOVED***[:***REMOVED*** = 2
    i = None
    assert_equal(au, [2***REMOVED****6***REMOVED***

    # Unaligned input
    a = np.zeros((6*4+1,***REMOVED***, dtype='i1'***REMOVED***[1:***REMOVED***
    a.dtype = 'f4'
    a[:***REMOVED*** = np.arange(6, dtype='f4'***REMOVED***
    assert_(not a.flags.aligned***REMOVED***
    # Without 'aligned', shouldn't copy
    i = nditer(a, [***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_(not i.operands[0***REMOVED***.flags.aligned***REMOVED***
    assert_equal(i.operands[0***REMOVED***, a***REMOVED***
    # With 'aligned', should make a copy
    i = nditer(a, [***REMOVED***, [['readwrite', 'updateifcopy', 'aligned'***REMOVED******REMOVED******REMOVED***
    assert_(i.operands[0***REMOVED***.flags.aligned***REMOVED***
    assert_equal(i.operands[0***REMOVED***, a***REMOVED***
    i.operands[0***REMOVED***[:***REMOVED*** = 3
    i = None
    assert_equal(a, [3***REMOVED****6***REMOVED***

    # Discontiguous input
    a = arange(12***REMOVED***
    # If it is contiguous, shouldn't copy
    i = nditer(a[:6***REMOVED***, [***REMOVED***, [['readonly'***REMOVED******REMOVED******REMOVED***
    assert_(i.operands[0***REMOVED***.flags.contiguous***REMOVED***
    assert_equal(i.operands[0***REMOVED***, a[:6***REMOVED******REMOVED***
    # If it isn't contiguous, should buffer
    i = nditer(a[::2***REMOVED***, ['buffered', 'external_loop'***REMOVED***,
                        [['readonly', 'contig'***REMOVED******REMOVED***,
                        buffersize=10***REMOVED***
    assert_(i[0***REMOVED***.flags.contiguous***REMOVED***
    assert_equal(i[0***REMOVED***, a[::2***REMOVED******REMOVED***

def test_iter_array_cast(***REMOVED***:
    # Check that arrays are cast as requested

    # No cast 'f4' -> 'f4'
    a = np.arange(6, dtype='f4'***REMOVED***.reshape(2, 3***REMOVED***
    i = nditer(a, [***REMOVED***, [['readwrite'***REMOVED******REMOVED***, op_dtypes=[np.dtype('f4'***REMOVED******REMOVED******REMOVED***
    assert_equal(i.operands[0***REMOVED***, a***REMOVED***
    assert_equal(i.operands[0***REMOVED***.dtype, np.dtype('f4'***REMOVED******REMOVED***

    # Byte-order cast '<f4' -> '>f4'
    a = np.arange(6, dtype='<f4'***REMOVED***.reshape(2, 3***REMOVED***
    i = nditer(a, [***REMOVED***, [['readwrite', 'updateifcopy'***REMOVED******REMOVED***,
            casting='equiv',
            op_dtypes=[np.dtype('>f4'***REMOVED******REMOVED******REMOVED***
    assert_equal(i.operands[0***REMOVED***, a***REMOVED***
    assert_equal(i.operands[0***REMOVED***.dtype, np.dtype('>f4'***REMOVED******REMOVED***

    # Safe case 'f4' -> 'f8'
    a = np.arange(24, dtype='f4'***REMOVED***.reshape(2, 3, 4***REMOVED***.swapaxes(1, 2***REMOVED***
    i = nditer(a, [***REMOVED***, [['readonly', 'copy'***REMOVED******REMOVED***,
            casting='safe',
            op_dtypes=[np.dtype('f8'***REMOVED******REMOVED******REMOVED***
    assert_equal(i.operands[0***REMOVED***, a***REMOVED***
    assert_equal(i.operands[0***REMOVED***.dtype, np.dtype('f8'***REMOVED******REMOVED***
    # The memory layout of the temporary should match a (a is (48,4,16***REMOVED******REMOVED***
    # except negative strides get flipped to positive strides.
    assert_equal(i.operands[0***REMOVED***.strides, (96, 8, 32***REMOVED******REMOVED***
    a = a[::-1,:, ::-1***REMOVED***
    i = nditer(a, [***REMOVED***, [['readonly', 'copy'***REMOVED******REMOVED***,
            casting='safe',
            op_dtypes=[np.dtype('f8'***REMOVED******REMOVED******REMOVED***
    assert_equal(i.operands[0***REMOVED***, a***REMOVED***
    assert_equal(i.operands[0***REMOVED***.dtype, np.dtype('f8'***REMOVED******REMOVED***
    assert_equal(i.operands[0***REMOVED***.strides, (96, 8, 32***REMOVED******REMOVED***

    # Same-kind cast 'f8' -> 'f4' -> 'f8'
    a = np.arange(24, dtype='f8'***REMOVED***.reshape(2, 3, 4***REMOVED***.T
    i = nditer(a, [***REMOVED***,
            [['readwrite', 'updateifcopy'***REMOVED******REMOVED***,
            casting='same_kind',
            op_dtypes=[np.dtype('f4'***REMOVED******REMOVED******REMOVED***
    assert_equal(i.operands[0***REMOVED***, a***REMOVED***
    assert_equal(i.operands[0***REMOVED***.dtype, np.dtype('f4'***REMOVED******REMOVED***
    assert_equal(i.operands[0***REMOVED***.strides, (4, 16, 48***REMOVED******REMOVED***
    # Check that UPDATEIFCOPY is activated
    i.operands[0***REMOVED***[2, 1, 1***REMOVED*** = -12.5
    assert_(a[2, 1, 1***REMOVED*** != -12.5***REMOVED***
    i = None
    assert_equal(a[2, 1, 1***REMOVED***, -12.5***REMOVED***

    a = np.arange(6, dtype='i4'***REMOVED***[::-2***REMOVED***
    i = nditer(a, [***REMOVED***,
            [['writeonly', 'updateifcopy'***REMOVED******REMOVED***,
            casting='unsafe',
            op_dtypes=[np.dtype('f4'***REMOVED******REMOVED******REMOVED***
    assert_equal(i.operands[0***REMOVED***.dtype, np.dtype('f4'***REMOVED******REMOVED***
    # Even though the stride was negative in 'a', it
    # becomes positive in the temporary
    assert_equal(i.operands[0***REMOVED***.strides, (4,***REMOVED******REMOVED***
    i.operands[0***REMOVED***[:***REMOVED*** = [1, 2, 3***REMOVED***
    i = None
    assert_equal(a, [1, 2, 3***REMOVED******REMOVED***

def test_iter_array_cast_errors(***REMOVED***:
    # Check that invalid casts are caught

    # Need to enable copying for casts to occur
    assert_raises(TypeError, nditer, arange(2, dtype='f4'***REMOVED***, [***REMOVED***,
                [['readonly'***REMOVED******REMOVED***, op_dtypes=[np.dtype('f8'***REMOVED******REMOVED******REMOVED***
    # Also need to allow casting for casts to occur
    assert_raises(TypeError, nditer, arange(2, dtype='f4'***REMOVED***, [***REMOVED***,
                [['readonly', 'copy'***REMOVED******REMOVED***, casting='no',
                op_dtypes=[np.dtype('f8'***REMOVED******REMOVED******REMOVED***
    assert_raises(TypeError, nditer, arange(2, dtype='f4'***REMOVED***, [***REMOVED***,
                [['readonly', 'copy'***REMOVED******REMOVED***, casting='equiv',
                op_dtypes=[np.dtype('f8'***REMOVED******REMOVED******REMOVED***
    assert_raises(TypeError, nditer, arange(2, dtype='f8'***REMOVED***, [***REMOVED***,
                [['writeonly', 'updateifcopy'***REMOVED******REMOVED***,
                casting='no',
                op_dtypes=[np.dtype('f4'***REMOVED******REMOVED******REMOVED***
    assert_raises(TypeError, nditer, arange(2, dtype='f8'***REMOVED***, [***REMOVED***,
                [['writeonly', 'updateifcopy'***REMOVED******REMOVED***,
                casting='equiv',
                op_dtypes=[np.dtype('f4'***REMOVED******REMOVED******REMOVED***
    # '<f4' -> '>f4' should not work with casting='no'
    assert_raises(TypeError, nditer, arange(2, dtype='<f4'***REMOVED***, [***REMOVED***,
                [['readonly', 'copy'***REMOVED******REMOVED***, casting='no',
                op_dtypes=[np.dtype('>f4'***REMOVED******REMOVED******REMOVED***
    # 'f4' -> 'f8' is a safe cast, but 'f8' -> 'f4' isn't
    assert_raises(TypeError, nditer, arange(2, dtype='f4'***REMOVED***, [***REMOVED***,
                [['readwrite', 'updateifcopy'***REMOVED******REMOVED***,
                casting='safe',
                op_dtypes=[np.dtype('f8'***REMOVED******REMOVED******REMOVED***
    assert_raises(TypeError, nditer, arange(2, dtype='f8'***REMOVED***, [***REMOVED***,
                [['readwrite', 'updateifcopy'***REMOVED******REMOVED***,
                casting='safe',
                op_dtypes=[np.dtype('f4'***REMOVED******REMOVED******REMOVED***
    # 'f4' -> 'i4' is neither a safe nor a same-kind cast
    assert_raises(TypeError, nditer, arange(2, dtype='f4'***REMOVED***, [***REMOVED***,
                [['readonly', 'copy'***REMOVED******REMOVED***,
                casting='same_kind',
                op_dtypes=[np.dtype('i4'***REMOVED******REMOVED******REMOVED***
    assert_raises(TypeError, nditer, arange(2, dtype='i4'***REMOVED***, [***REMOVED***,
                [['writeonly', 'updateifcopy'***REMOVED******REMOVED***,
                casting='same_kind',
                op_dtypes=[np.dtype('f4'***REMOVED******REMOVED******REMOVED***

def test_iter_scalar_cast(***REMOVED***:
    # Check that scalars are cast as requested

    # No cast 'f4' -> 'f4'
    i = nditer(np.float32(2.5***REMOVED***, [***REMOVED***, [['readonly'***REMOVED******REMOVED***,
                    op_dtypes=[np.dtype('f4'***REMOVED******REMOVED******REMOVED***
    assert_equal(i.dtypes[0***REMOVED***, np.dtype('f4'***REMOVED******REMOVED***
    assert_equal(i.value.dtype, np.dtype('f4'***REMOVED******REMOVED***
    assert_equal(i.value, 2.5***REMOVED***
    # Safe cast 'f4' -> 'f8'
    i = nditer(np.float32(2.5***REMOVED***, [***REMOVED***,
                    [['readonly', 'copy'***REMOVED******REMOVED***,
                    casting='safe',
                    op_dtypes=[np.dtype('f8'***REMOVED******REMOVED******REMOVED***
    assert_equal(i.dtypes[0***REMOVED***, np.dtype('f8'***REMOVED******REMOVED***
    assert_equal(i.value.dtype, np.dtype('f8'***REMOVED******REMOVED***
    assert_equal(i.value, 2.5***REMOVED***
    # Same-kind cast 'f8' -> 'f4'
    i = nditer(np.float64(2.5***REMOVED***, [***REMOVED***,
                    [['readonly', 'copy'***REMOVED******REMOVED***,
                    casting='same_kind',
                    op_dtypes=[np.dtype('f4'***REMOVED******REMOVED******REMOVED***
    assert_equal(i.dtypes[0***REMOVED***, np.dtype('f4'***REMOVED******REMOVED***
    assert_equal(i.value.dtype, np.dtype('f4'***REMOVED******REMOVED***
    assert_equal(i.value, 2.5***REMOVED***
    # Unsafe cast 'f8' -> 'i4'
    i = nditer(np.float64(3.0***REMOVED***, [***REMOVED***,
                    [['readonly', 'copy'***REMOVED******REMOVED***,
                    casting='unsafe',
                    op_dtypes=[np.dtype('i4'***REMOVED******REMOVED******REMOVED***
    assert_equal(i.dtypes[0***REMOVED***, np.dtype('i4'***REMOVED******REMOVED***
    assert_equal(i.value.dtype, np.dtype('i4'***REMOVED******REMOVED***
    assert_equal(i.value, 3***REMOVED***
    # Readonly scalars may be cast even without setting COPY or BUFFERED
    i = nditer(3, [***REMOVED***, [['readonly'***REMOVED******REMOVED***, op_dtypes=[np.dtype('f8'***REMOVED******REMOVED******REMOVED***
    assert_equal(i[0***REMOVED***.dtype, np.dtype('f8'***REMOVED******REMOVED***
    assert_equal(i[0***REMOVED***, 3.***REMOVED***

def test_iter_scalar_cast_errors(***REMOVED***:
    # Check that invalid casts are caught

    # Need to allow copying/buffering for write casts of scalars to occur
    assert_raises(TypeError, nditer, np.float32(2***REMOVED***, [***REMOVED***,
                [['readwrite'***REMOVED******REMOVED***, op_dtypes=[np.dtype('f8'***REMOVED******REMOVED******REMOVED***
    assert_raises(TypeError, nditer, 2.5, [***REMOVED***,
                [['readwrite'***REMOVED******REMOVED***, op_dtypes=[np.dtype('f4'***REMOVED******REMOVED******REMOVED***
    # 'f8' -> 'f4' isn't a safe cast if the value would overflow
    assert_raises(TypeError, nditer, np.float64(1e60***REMOVED***, [***REMOVED***,
                [['readonly'***REMOVED******REMOVED***,
                casting='safe',
                op_dtypes=[np.dtype('f4'***REMOVED******REMOVED******REMOVED***
    # 'f4' -> 'i4' is neither a safe nor a same-kind cast
    assert_raises(TypeError, nditer, np.float32(2***REMOVED***, [***REMOVED***,
                [['readonly'***REMOVED******REMOVED***,
                casting='same_kind',
                op_dtypes=[np.dtype('i4'***REMOVED******REMOVED******REMOVED***

def test_iter_object_arrays_basic(***REMOVED***:
    # Check that object arrays work

    obj = {'a':3,'b':'d'***REMOVED***
    a = np.array([[1, 2, 3***REMOVED***, None, obj, None***REMOVED***, dtype='O'***REMOVED***
    rc = sys.getrefcount(obj***REMOVED***

    # Need to allow references for object arrays
    assert_raises(TypeError, nditer, a***REMOVED***
    assert_equal(sys.getrefcount(obj***REMOVED***, rc***REMOVED***

    i = nditer(a, ['refs_ok'***REMOVED***, ['readonly'***REMOVED******REMOVED***
    vals = [x_[(***REMOVED******REMOVED*** for x_ in i***REMOVED***
    assert_equal(np.array(vals, dtype='O'***REMOVED***, a***REMOVED***
    vals, i, x = [None***REMOVED****3
    assert_equal(sys.getrefcount(obj***REMOVED***, rc***REMOVED***

    i = nditer(a.reshape(2, 2***REMOVED***.T, ['refs_ok', 'buffered'***REMOVED***,
                        ['readonly'***REMOVED***, order='C'***REMOVED***
    assert_(i.iterationneedsapi***REMOVED***
    vals = [x_[(***REMOVED******REMOVED*** for x_ in i***REMOVED***
    assert_equal(np.array(vals, dtype='O'***REMOVED***, a.reshape(2, 2***REMOVED***.ravel(order='F'***REMOVED******REMOVED***
    vals, i, x = [None***REMOVED****3
    assert_equal(sys.getrefcount(obj***REMOVED***, rc***REMOVED***

    i = nditer(a.reshape(2, 2***REMOVED***.T, ['refs_ok', 'buffered'***REMOVED***,
                        ['readwrite'***REMOVED***, order='C'***REMOVED***
    for x in i:
        x[...***REMOVED*** = None
    vals, i, x = [None***REMOVED****3
    assert_equal(sys.getrefcount(obj***REMOVED***, rc-1***REMOVED***
    assert_equal(a, np.array([None***REMOVED****4, dtype='O'***REMOVED******REMOVED***

def test_iter_object_arrays_conversions(***REMOVED***:
    # Conversions to/from objects
    a = np.arange(6, dtype='O'***REMOVED***
    i = nditer(a, ['refs_ok', 'buffered'***REMOVED***, ['readwrite'***REMOVED***,
                    casting='unsafe', op_dtypes='i4'***REMOVED***
    for x in i:
        x[...***REMOVED*** += 1
    assert_equal(a, np.arange(6***REMOVED***+1***REMOVED***

    a = np.arange(6, dtype='i4'***REMOVED***
    i = nditer(a, ['refs_ok', 'buffered'***REMOVED***, ['readwrite'***REMOVED***,
                    casting='unsafe', op_dtypes='O'***REMOVED***
    for x in i:
        x[...***REMOVED*** += 1
    assert_equal(a, np.arange(6***REMOVED***+1***REMOVED***

    # Non-contiguous object array
    a = np.zeros((6,***REMOVED***, dtype=[('p', 'i1'***REMOVED***, ('a', 'O'***REMOVED******REMOVED******REMOVED***
    a = a['a'***REMOVED***
    a[:***REMOVED*** = np.arange(6***REMOVED***
    i = nditer(a, ['refs_ok', 'buffered'***REMOVED***, ['readwrite'***REMOVED***,
                    casting='unsafe', op_dtypes='i4'***REMOVED***
    for x in i:
        x[...***REMOVED*** += 1
    assert_equal(a, np.arange(6***REMOVED***+1***REMOVED***

    #Non-contiguous value array
    a = np.zeros((6,***REMOVED***, dtype=[('p', 'i1'***REMOVED***, ('a', 'i4'***REMOVED******REMOVED******REMOVED***
    a = a['a'***REMOVED***
    a[:***REMOVED*** = np.arange(6***REMOVED*** + 98172488
    i = nditer(a, ['refs_ok', 'buffered'***REMOVED***, ['readwrite'***REMOVED***,
                    casting='unsafe', op_dtypes='O'***REMOVED***
    ob = i[0***REMOVED***[(***REMOVED******REMOVED***
    rc = sys.getrefcount(ob***REMOVED***
    for x in i:
        x[...***REMOVED*** += 1
    assert_equal(sys.getrefcount(ob***REMOVED***, rc-1***REMOVED***
    assert_equal(a, np.arange(6***REMOVED***+98172489***REMOVED***

def test_iter_common_dtype(***REMOVED***:
    # Check that the iterator finds a common data type correctly

    i = nditer([array([3***REMOVED***, dtype='f4'***REMOVED***, array([0***REMOVED***, dtype='f8'***REMOVED******REMOVED***,
                    ['common_dtype'***REMOVED***,
                    [['readonly', 'copy'***REMOVED******REMOVED****2,
                    casting='safe'***REMOVED***
    assert_equal(i.dtypes[0***REMOVED***, np.dtype('f8'***REMOVED******REMOVED***
    assert_equal(i.dtypes[1***REMOVED***, np.dtype('f8'***REMOVED******REMOVED***
    i = nditer([array([3***REMOVED***, dtype='i4'***REMOVED***, array([0***REMOVED***, dtype='f4'***REMOVED******REMOVED***,
                    ['common_dtype'***REMOVED***,
                    [['readonly', 'copy'***REMOVED******REMOVED****2,
                    casting='safe'***REMOVED***
    assert_equal(i.dtypes[0***REMOVED***, np.dtype('f8'***REMOVED******REMOVED***
    assert_equal(i.dtypes[1***REMOVED***, np.dtype('f8'***REMOVED******REMOVED***
    i = nditer([array([3***REMOVED***, dtype='f4'***REMOVED***, array(0, dtype='f8'***REMOVED******REMOVED***,
                    ['common_dtype'***REMOVED***,
                    [['readonly', 'copy'***REMOVED******REMOVED****2,
                    casting='same_kind'***REMOVED***
    assert_equal(i.dtypes[0***REMOVED***, np.dtype('f4'***REMOVED******REMOVED***
    assert_equal(i.dtypes[1***REMOVED***, np.dtype('f4'***REMOVED******REMOVED***
    i = nditer([array([3***REMOVED***, dtype='u4'***REMOVED***, array(0, dtype='i4'***REMOVED******REMOVED***,
                    ['common_dtype'***REMOVED***,
                    [['readonly', 'copy'***REMOVED******REMOVED****2,
                    casting='safe'***REMOVED***
    assert_equal(i.dtypes[0***REMOVED***, np.dtype('u4'***REMOVED******REMOVED***
    assert_equal(i.dtypes[1***REMOVED***, np.dtype('u4'***REMOVED******REMOVED***
    i = nditer([array([3***REMOVED***, dtype='u4'***REMOVED***, array(-12, dtype='i4'***REMOVED******REMOVED***,
                    ['common_dtype'***REMOVED***,
                    [['readonly', 'copy'***REMOVED******REMOVED****2,
                    casting='safe'***REMOVED***
    assert_equal(i.dtypes[0***REMOVED***, np.dtype('i8'***REMOVED******REMOVED***
    assert_equal(i.dtypes[1***REMOVED***, np.dtype('i8'***REMOVED******REMOVED***
    i = nditer([array([3***REMOVED***, dtype='u4'***REMOVED***, array(-12, dtype='i4'***REMOVED***,
                 array([2j***REMOVED***, dtype='c8'***REMOVED***, array([9***REMOVED***, dtype='f8'***REMOVED******REMOVED***,
                    ['common_dtype'***REMOVED***,
                    [['readonly', 'copy'***REMOVED******REMOVED****4,
                    casting='safe'***REMOVED***
    assert_equal(i.dtypes[0***REMOVED***, np.dtype('c16'***REMOVED******REMOVED***
    assert_equal(i.dtypes[1***REMOVED***, np.dtype('c16'***REMOVED******REMOVED***
    assert_equal(i.dtypes[2***REMOVED***, np.dtype('c16'***REMOVED******REMOVED***
    assert_equal(i.dtypes[3***REMOVED***, np.dtype('c16'***REMOVED******REMOVED***
    assert_equal(i.value, (3, -12, 2j, 9***REMOVED******REMOVED***

    # When allocating outputs, other outputs aren't factored in
    i = nditer([array([3***REMOVED***, dtype='i4'***REMOVED***, None, array([2j***REMOVED***, dtype='c16'***REMOVED******REMOVED***, [***REMOVED***,
                    [['readonly', 'copy'***REMOVED***,
                     ['writeonly', 'allocate'***REMOVED***,
                     ['writeonly'***REMOVED******REMOVED***,
                    casting='safe'***REMOVED***
    assert_equal(i.dtypes[0***REMOVED***, np.dtype('i4'***REMOVED******REMOVED***
    assert_equal(i.dtypes[1***REMOVED***, np.dtype('i4'***REMOVED******REMOVED***
    assert_equal(i.dtypes[2***REMOVED***, np.dtype('c16'***REMOVED******REMOVED***
    # But, if common data types are requested, they are
    i = nditer([array([3***REMOVED***, dtype='i4'***REMOVED***, None, array([2j***REMOVED***, dtype='c16'***REMOVED******REMOVED***,
                    ['common_dtype'***REMOVED***,
                    [['readonly', 'copy'***REMOVED***,
                     ['writeonly', 'allocate'***REMOVED***,
                     ['writeonly'***REMOVED******REMOVED***,
                    casting='safe'***REMOVED***
    assert_equal(i.dtypes[0***REMOVED***, np.dtype('c16'***REMOVED******REMOVED***
    assert_equal(i.dtypes[1***REMOVED***, np.dtype('c16'***REMOVED******REMOVED***
    assert_equal(i.dtypes[2***REMOVED***, np.dtype('c16'***REMOVED******REMOVED***

def test_iter_op_axes(***REMOVED***:
    # Check that custom axes work

    # Reverse the axes
    a = arange(6***REMOVED***.reshape(2, 3***REMOVED***
    i = nditer([a, a.T***REMOVED***, [***REMOVED***, [['readonly'***REMOVED******REMOVED****2, op_axes=[[0, 1***REMOVED***, [1, 0***REMOVED******REMOVED******REMOVED***
    assert_(all([x == y for (x, y***REMOVED*** in i***REMOVED******REMOVED******REMOVED***
    a = arange(24***REMOVED***.reshape(2, 3, 4***REMOVED***
    i = nditer([a.T, a***REMOVED***, [***REMOVED***, [['readonly'***REMOVED******REMOVED****2, op_axes=[[2, 1, 0***REMOVED***, None***REMOVED******REMOVED***
    assert_(all([x == y for (x, y***REMOVED*** in i***REMOVED******REMOVED******REMOVED***

    # Broadcast 1D to any dimension
    a = arange(1, 31***REMOVED***.reshape(2, 3, 5***REMOVED***
    b = arange(1, 3***REMOVED***
    i = nditer([a, b***REMOVED***, [***REMOVED***, [['readonly'***REMOVED******REMOVED****2, op_axes=[None, [0, -1, -1***REMOVED******REMOVED******REMOVED***
    assert_equal([x*y for (x, y***REMOVED*** in i***REMOVED***, (a*b.reshape(2, 1, 1***REMOVED******REMOVED***.ravel(***REMOVED******REMOVED***
    b = arange(1, 4***REMOVED***
    i = nditer([a, b***REMOVED***, [***REMOVED***, [['readonly'***REMOVED******REMOVED****2, op_axes=[None, [-1, 0, -1***REMOVED******REMOVED******REMOVED***
    assert_equal([x*y for (x, y***REMOVED*** in i***REMOVED***, (a*b.reshape(1, 3, 1***REMOVED******REMOVED***.ravel(***REMOVED******REMOVED***
    b = arange(1, 6***REMOVED***
    i = nditer([a, b***REMOVED***, [***REMOVED***, [['readonly'***REMOVED******REMOVED****2,
                            op_axes=[None, [np.newaxis, np.newaxis, 0***REMOVED******REMOVED******REMOVED***
    assert_equal([x*y for (x, y***REMOVED*** in i***REMOVED***, (a*b.reshape(1, 1, 5***REMOVED******REMOVED***.ravel(***REMOVED******REMOVED***

    # Inner product-style broadcasting
    a = arange(24***REMOVED***.reshape(2, 3, 4***REMOVED***
    b = arange(40***REMOVED***.reshape(5, 2, 4***REMOVED***
    i = nditer([a, b***REMOVED***, ['multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED****2,
                            op_axes=[[0, 1, -1, -1***REMOVED***, [-1, -1, 0, 1***REMOVED******REMOVED******REMOVED***
    assert_equal(i.shape, (2, 3, 5, 2***REMOVED******REMOVED***

    # Matrix product-style broadcasting
    a = arange(12***REMOVED***.reshape(3, 4***REMOVED***
    b = arange(20***REMOVED***.reshape(4, 5***REMOVED***
    i = nditer([a, b***REMOVED***, ['multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED****2,
                            op_axes=[[0, -1***REMOVED***, [-1, 1***REMOVED******REMOVED******REMOVED***
    assert_equal(i.shape, (3, 5***REMOVED******REMOVED***

def test_iter_op_axes_errors(***REMOVED***:
    # Check that custom axes throws errors for bad inputs

    # Wrong number of items in op_axes
    a = arange(6***REMOVED***.reshape(2, 3***REMOVED***
    assert_raises(ValueError, nditer, [a, a***REMOVED***, [***REMOVED***, [['readonly'***REMOVED******REMOVED****2,
                                    op_axes=[[0***REMOVED***, [1***REMOVED***, [0***REMOVED******REMOVED******REMOVED***
    # Out of bounds items in op_axes
    assert_raises(ValueError, nditer, [a, a***REMOVED***, [***REMOVED***, [['readonly'***REMOVED******REMOVED****2,
                                    op_axes=[[2, 1***REMOVED***, [0, 1***REMOVED******REMOVED******REMOVED***
    assert_raises(ValueError, nditer, [a, a***REMOVED***, [***REMOVED***, [['readonly'***REMOVED******REMOVED****2,
                                    op_axes=[[0, 1***REMOVED***, [2, -1***REMOVED******REMOVED******REMOVED***
    # Duplicate items in op_axes
    assert_raises(ValueError, nditer, [a, a***REMOVED***, [***REMOVED***, [['readonly'***REMOVED******REMOVED****2,
                                    op_axes=[[0, 0***REMOVED***, [0, 1***REMOVED******REMOVED******REMOVED***
    assert_raises(ValueError, nditer, [a, a***REMOVED***, [***REMOVED***, [['readonly'***REMOVED******REMOVED****2,
                                    op_axes=[[0, 1***REMOVED***, [1, 1***REMOVED******REMOVED******REMOVED***

    # Different sized arrays in op_axes
    assert_raises(ValueError, nditer, [a, a***REMOVED***, [***REMOVED***, [['readonly'***REMOVED******REMOVED****2,
                                    op_axes=[[0, 1***REMOVED***, [0, 1, 0***REMOVED******REMOVED******REMOVED***

    # Non-broadcastable dimensions in the result
    assert_raises(ValueError, nditer, [a, a***REMOVED***, [***REMOVED***, [['readonly'***REMOVED******REMOVED****2,
                                    op_axes=[[0, 1***REMOVED***, [1, 0***REMOVED******REMOVED******REMOVED***

def test_iter_copy(***REMOVED***:
    # Check that copying the iterator works correctly
    a = arange(24***REMOVED***.reshape(2, 3, 4***REMOVED***

    # Simple iterator
    i = nditer(a***REMOVED***
    j = i.copy(***REMOVED***
    assert_equal([x[(***REMOVED******REMOVED*** for x in i***REMOVED***, [x[(***REMOVED******REMOVED*** for x in j***REMOVED******REMOVED***

    i.iterindex = 3
    j = i.copy(***REMOVED***
    assert_equal([x[(***REMOVED******REMOVED*** for x in i***REMOVED***, [x[(***REMOVED******REMOVED*** for x in j***REMOVED******REMOVED***

    # Buffered iterator
    i = nditer(a, ['buffered', 'ranged'***REMOVED***, order='F', buffersize=3***REMOVED***
    j = i.copy(***REMOVED***
    assert_equal([x[(***REMOVED******REMOVED*** for x in i***REMOVED***, [x[(***REMOVED******REMOVED*** for x in j***REMOVED******REMOVED***

    i.iterindex = 3
    j = i.copy(***REMOVED***
    assert_equal([x[(***REMOVED******REMOVED*** for x in i***REMOVED***, [x[(***REMOVED******REMOVED*** for x in j***REMOVED******REMOVED***

    i.iterrange = (3, 9***REMOVED***
    j = i.copy(***REMOVED***
    assert_equal([x[(***REMOVED******REMOVED*** for x in i***REMOVED***, [x[(***REMOVED******REMOVED*** for x in j***REMOVED******REMOVED***

    i.iterrange = (2, 18***REMOVED***
    next(i***REMOVED***
    next(i***REMOVED***
    j = i.copy(***REMOVED***
    assert_equal([x[(***REMOVED******REMOVED*** for x in i***REMOVED***, [x[(***REMOVED******REMOVED*** for x in j***REMOVED******REMOVED***

    # Casting iterator
    i = nditer(a, ['buffered'***REMOVED***, order='F', casting='unsafe',
                op_dtypes='f8', buffersize=5***REMOVED***
    j = i.copy(***REMOVED***
    i = None
    assert_equal([x[(***REMOVED******REMOVED*** for x in j***REMOVED***, a.ravel(order='F'***REMOVED******REMOVED***

    a = arange(24, dtype='<i4'***REMOVED***.reshape(2, 3, 4***REMOVED***
    i = nditer(a, ['buffered'***REMOVED***, order='F', casting='unsafe',
                op_dtypes='>f8', buffersize=5***REMOVED***
    j = i.copy(***REMOVED***
    i = None
    assert_equal([x[(***REMOVED******REMOVED*** for x in j***REMOVED***, a.ravel(order='F'***REMOVED******REMOVED***

def test_iter_allocate_output_simple(***REMOVED***:
    # Check that the iterator will properly allocate outputs

    # Simple case
    a = arange(6***REMOVED***
    i = nditer([a, None***REMOVED***, [***REMOVED***, [['readonly'***REMOVED***, ['writeonly', 'allocate'***REMOVED******REMOVED***,
                        op_dtypes=[None, np.dtype('f4'***REMOVED******REMOVED******REMOVED***
    assert_equal(i.operands[1***REMOVED***.shape, a.shape***REMOVED***
    assert_equal(i.operands[1***REMOVED***.dtype, np.dtype('f4'***REMOVED******REMOVED***

def test_iter_allocate_output_buffered_readwrite(***REMOVED***:
    # Allocated output with buffering + delay_bufalloc

    a = arange(6***REMOVED***
    i = nditer([a, None***REMOVED***, ['buffered', 'delay_bufalloc'***REMOVED***,
                        [['readonly'***REMOVED***, ['allocate', 'readwrite'***REMOVED******REMOVED******REMOVED***
    i.operands[1***REMOVED***[:***REMOVED*** = 1
    i.reset(***REMOVED***
    for x in i:
        x[1***REMOVED***[...***REMOVED*** += x[0***REMOVED***[...***REMOVED***
    assert_equal(i.operands[1***REMOVED***, a+1***REMOVED***

def test_iter_allocate_output_itorder(***REMOVED***:
    # The allocated output should match the iteration order

    # C-order input, best iteration order
    a = arange(6, dtype='i4'***REMOVED***.reshape(2, 3***REMOVED***
    i = nditer([a, None***REMOVED***, [***REMOVED***, [['readonly'***REMOVED***, ['writeonly', 'allocate'***REMOVED******REMOVED***,
                        op_dtypes=[None, np.dtype('f4'***REMOVED******REMOVED******REMOVED***
    assert_equal(i.operands[1***REMOVED***.shape, a.shape***REMOVED***
    assert_equal(i.operands[1***REMOVED***.strides, a.strides***REMOVED***
    assert_equal(i.operands[1***REMOVED***.dtype, np.dtype('f4'***REMOVED******REMOVED***
    # F-order input, best iteration order
    a = arange(24, dtype='i4'***REMOVED***.reshape(2, 3, 4***REMOVED***.T
    i = nditer([a, None***REMOVED***, [***REMOVED***, [['readonly'***REMOVED***, ['writeonly', 'allocate'***REMOVED******REMOVED***,
                        op_dtypes=[None, np.dtype('f4'***REMOVED******REMOVED******REMOVED***
    assert_equal(i.operands[1***REMOVED***.shape, a.shape***REMOVED***
    assert_equal(i.operands[1***REMOVED***.strides, a.strides***REMOVED***
    assert_equal(i.operands[1***REMOVED***.dtype, np.dtype('f4'***REMOVED******REMOVED***
    # Non-contiguous input, C iteration order
    a = arange(24, dtype='i4'***REMOVED***.reshape(2, 3, 4***REMOVED***.swapaxes(0, 1***REMOVED***
    i = nditer([a, None***REMOVED***, [***REMOVED***,
                        [['readonly'***REMOVED***, ['writeonly', 'allocate'***REMOVED******REMOVED***,
                        order='C',
                        op_dtypes=[None, np.dtype('f4'***REMOVED******REMOVED******REMOVED***
    assert_equal(i.operands[1***REMOVED***.shape, a.shape***REMOVED***
    assert_equal(i.operands[1***REMOVED***.strides, (32, 16, 4***REMOVED******REMOVED***
    assert_equal(i.operands[1***REMOVED***.dtype, np.dtype('f4'***REMOVED******REMOVED***

def test_iter_allocate_output_opaxes(***REMOVED***:
    # Specifing op_axes should work

    a = arange(24, dtype='i4'***REMOVED***.reshape(2, 3, 4***REMOVED***
    i = nditer([None, a***REMOVED***, [***REMOVED***, [['writeonly', 'allocate'***REMOVED***, ['readonly'***REMOVED******REMOVED***,
                        op_dtypes=[np.dtype('u4'***REMOVED***, None***REMOVED***,
                        op_axes=[[1, 2, 0***REMOVED***, None***REMOVED******REMOVED***
    assert_equal(i.operands[0***REMOVED***.shape, (4, 2, 3***REMOVED******REMOVED***
    assert_equal(i.operands[0***REMOVED***.strides, (4, 48, 16***REMOVED******REMOVED***
    assert_equal(i.operands[0***REMOVED***.dtype, np.dtype('u4'***REMOVED******REMOVED***

def test_iter_allocate_output_types_promotion(***REMOVED***:
    # Check type promotion of automatic outputs

    i = nditer([array([3***REMOVED***, dtype='f4'***REMOVED***, array([0***REMOVED***, dtype='f8'***REMOVED***, None***REMOVED***, [***REMOVED***,
                    [['readonly'***REMOVED******REMOVED****2+[['writeonly', 'allocate'***REMOVED******REMOVED******REMOVED***
    assert_equal(i.dtypes[2***REMOVED***, np.dtype('f8'***REMOVED******REMOVED***
    i = nditer([array([3***REMOVED***, dtype='i4'***REMOVED***, array([0***REMOVED***, dtype='f4'***REMOVED***, None***REMOVED***, [***REMOVED***,
                    [['readonly'***REMOVED******REMOVED****2+[['writeonly', 'allocate'***REMOVED******REMOVED******REMOVED***
    assert_equal(i.dtypes[2***REMOVED***, np.dtype('f8'***REMOVED******REMOVED***
    i = nditer([array([3***REMOVED***, dtype='f4'***REMOVED***, array(0, dtype='f8'***REMOVED***, None***REMOVED***, [***REMOVED***,
                    [['readonly'***REMOVED******REMOVED****2+[['writeonly', 'allocate'***REMOVED******REMOVED******REMOVED***
    assert_equal(i.dtypes[2***REMOVED***, np.dtype('f4'***REMOVED******REMOVED***
    i = nditer([array([3***REMOVED***, dtype='u4'***REMOVED***, array(0, dtype='i4'***REMOVED***, None***REMOVED***, [***REMOVED***,
                    [['readonly'***REMOVED******REMOVED****2+[['writeonly', 'allocate'***REMOVED******REMOVED******REMOVED***
    assert_equal(i.dtypes[2***REMOVED***, np.dtype('u4'***REMOVED******REMOVED***
    i = nditer([array([3***REMOVED***, dtype='u4'***REMOVED***, array(-12, dtype='i4'***REMOVED***, None***REMOVED***, [***REMOVED***,
                    [['readonly'***REMOVED******REMOVED****2+[['writeonly', 'allocate'***REMOVED******REMOVED******REMOVED***
    assert_equal(i.dtypes[2***REMOVED***, np.dtype('i8'***REMOVED******REMOVED***

def test_iter_allocate_output_types_byte_order(***REMOVED***:
    # Verify the rules for byte order changes

    # When there's just one input, the output type exactly matches
    a = array([3***REMOVED***, dtype='u4'***REMOVED***.newbyteorder(***REMOVED***
    i = nditer([a, None***REMOVED***, [***REMOVED***,
                    [['readonly'***REMOVED***, ['writeonly', 'allocate'***REMOVED******REMOVED******REMOVED***
    assert_equal(i.dtypes[0***REMOVED***, i.dtypes[1***REMOVED******REMOVED***
    # With two or more inputs, the output type is in native byte order
    i = nditer([a, a, None***REMOVED***, [***REMOVED***,
                    [['readonly'***REMOVED***, ['readonly'***REMOVED***, ['writeonly', 'allocate'***REMOVED******REMOVED******REMOVED***
    assert_(i.dtypes[0***REMOVED*** != i.dtypes[2***REMOVED******REMOVED***
    assert_equal(i.dtypes[0***REMOVED***.newbyteorder('='***REMOVED***, i.dtypes[2***REMOVED******REMOVED***

def test_iter_allocate_output_types_scalar(***REMOVED***:
    # If the inputs are all scalars, the output should be a scalar

    i = nditer([None, 1, 2.3, np.float32(12***REMOVED***, np.complex128(3***REMOVED******REMOVED***, [***REMOVED***,
                [['writeonly', 'allocate'***REMOVED******REMOVED*** + [['readonly'***REMOVED******REMOVED****4***REMOVED***
    assert_equal(i.operands[0***REMOVED***.dtype, np.dtype('complex128'***REMOVED******REMOVED***
    assert_equal(i.operands[0***REMOVED***.ndim, 0***REMOVED***

def test_iter_allocate_output_subtype(***REMOVED***:
    # Make sure that the subtype with priority wins

    # matrix vs ndarray
    a = np.matrix([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED******REMOVED***
    b = np.arange(4***REMOVED***.reshape(2, 2***REMOVED***.T
    i = nditer([a, b, None***REMOVED***, [***REMOVED***,
                    [['readonly'***REMOVED***, ['readonly'***REMOVED***, ['writeonly', 'allocate'***REMOVED******REMOVED******REMOVED***
    assert_equal(type(a***REMOVED***, type(i.operands[2***REMOVED******REMOVED******REMOVED***
    assert_(type(b***REMOVED*** != type(i.operands[2***REMOVED******REMOVED******REMOVED***
    assert_equal(i.operands[2***REMOVED***.shape, (2, 2***REMOVED******REMOVED***

    # matrix always wants things to be 2D
    b = np.arange(4***REMOVED***.reshape(1, 2, 2***REMOVED***
    assert_raises(RuntimeError, nditer, [a, b, None***REMOVED***, [***REMOVED***,
                    [['readonly'***REMOVED***, ['readonly'***REMOVED***, ['writeonly', 'allocate'***REMOVED******REMOVED******REMOVED***
    # but if subtypes are disabled, the result can still work
    i = nditer([a, b, None***REMOVED***, [***REMOVED***,
            [['readonly'***REMOVED***, ['readonly'***REMOVED***, ['writeonly', 'allocate', 'no_subtype'***REMOVED******REMOVED******REMOVED***
    assert_equal(type(b***REMOVED***, type(i.operands[2***REMOVED******REMOVED******REMOVED***
    assert_(type(a***REMOVED*** != type(i.operands[2***REMOVED******REMOVED******REMOVED***
    assert_equal(i.operands[2***REMOVED***.shape, (1, 2, 2***REMOVED******REMOVED***

def test_iter_allocate_output_errors(***REMOVED***:
    # Check that the iterator will throw errors for bad output allocations

    # Need an input if no output data type is specified
    a = arange(6***REMOVED***
    assert_raises(TypeError, nditer, [a, None***REMOVED***, [***REMOVED***,
                        [['writeonly'***REMOVED***, ['writeonly', 'allocate'***REMOVED******REMOVED******REMOVED***
    # Allocated output should be flagged for writing
    assert_raises(ValueError, nditer, [a, None***REMOVED***, [***REMOVED***,
                        [['readonly'***REMOVED***, ['allocate', 'readonly'***REMOVED******REMOVED******REMOVED***
    # Allocated output can't have buffering without delayed bufalloc
    assert_raises(ValueError, nditer, [a, None***REMOVED***, ['buffered'***REMOVED***,
                                            ['allocate', 'readwrite'***REMOVED******REMOVED***
    # Must specify at least one input
    assert_raises(ValueError, nditer, [None, None***REMOVED***, [***REMOVED***,
                        [['writeonly', 'allocate'***REMOVED***,
                         ['writeonly', 'allocate'***REMOVED******REMOVED***,
                        op_dtypes=[np.dtype('f4'***REMOVED***, np.dtype('f4'***REMOVED******REMOVED******REMOVED***
    # If using op_axes, must specify all the axes
    a = arange(24, dtype='i4'***REMOVED***.reshape(2, 3, 4***REMOVED***
    assert_raises(ValueError, nditer, [a, None***REMOVED***, [***REMOVED***,
                        [['readonly'***REMOVED***, ['writeonly', 'allocate'***REMOVED******REMOVED***,
                        op_dtypes=[None, np.dtype('f4'***REMOVED******REMOVED***,
                        op_axes=[None, [0, np.newaxis, 1***REMOVED******REMOVED******REMOVED***
    # If using op_axes, the axes must be within bounds
    assert_raises(ValueError, nditer, [a, None***REMOVED***, [***REMOVED***,
                        [['readonly'***REMOVED***, ['writeonly', 'allocate'***REMOVED******REMOVED***,
                        op_dtypes=[None, np.dtype('f4'***REMOVED******REMOVED***,
                        op_axes=[None, [0, 3, 1***REMOVED******REMOVED******REMOVED***
    # If using op_axes, there can't be duplicates
    assert_raises(ValueError, nditer, [a, None***REMOVED***, [***REMOVED***,
                        [['readonly'***REMOVED***, ['writeonly', 'allocate'***REMOVED******REMOVED***,
                        op_dtypes=[None, np.dtype('f4'***REMOVED******REMOVED***,
                        op_axes=[None, [0, 2, 1, 0***REMOVED******REMOVED******REMOVED***

def test_iter_remove_axis(***REMOVED***:
    a = arange(24***REMOVED***.reshape(2, 3, 4***REMOVED***

    i = nditer(a, ['multi_index'***REMOVED******REMOVED***
    i.remove_axis(1***REMOVED***
    assert_equal([x for x in i***REMOVED***, a[:, 0,:***REMOVED***.ravel(***REMOVED******REMOVED***

    a = a[::-1,:,:***REMOVED***
    i = nditer(a, ['multi_index'***REMOVED******REMOVED***
    i.remove_axis(0***REMOVED***
    assert_equal([x for x in i***REMOVED***, a[0,:,:***REMOVED***.ravel(***REMOVED******REMOVED***

def test_iter_remove_multi_index_inner_loop(***REMOVED***:
    # Check that removing multi-index support works

    a = arange(24***REMOVED***.reshape(2, 3, 4***REMOVED***

    i = nditer(a, ['multi_index'***REMOVED******REMOVED***
    assert_equal(i.ndim, 3***REMOVED***
    assert_equal(i.shape, (2, 3, 4***REMOVED******REMOVED***
    assert_equal(i.itviews[0***REMOVED***.shape, (2, 3, 4***REMOVED******REMOVED***

    # Removing the multi-index tracking causes all dimensions to coalesce
    before = [x for x in i***REMOVED***
    i.remove_multi_index(***REMOVED***
    after = [x for x in i***REMOVED***

    assert_equal(before, after***REMOVED***
    assert_equal(i.ndim, 1***REMOVED***
    assert_raises(ValueError, lambda i:i.shape, i***REMOVED***
    assert_equal(i.itviews[0***REMOVED***.shape, (24,***REMOVED******REMOVED***

    # Removing the inner loop means there's just one iteration
    i.reset(***REMOVED***
    assert_equal(i.itersize, 24***REMOVED***
    assert_equal(i[0***REMOVED***.shape, tuple(***REMOVED******REMOVED***
    i.enable_external_loop(***REMOVED***
    assert_equal(i.itersize, 24***REMOVED***
    assert_equal(i[0***REMOVED***.shape, (24,***REMOVED******REMOVED***
    assert_equal(i.value, arange(24***REMOVED******REMOVED***

def test_iter_iterindex(***REMOVED***:
    # Make sure iterindex works

    buffersize = 5
    a = arange(24***REMOVED***.reshape(4, 3, 2***REMOVED***
    for flags in ([***REMOVED***, ['buffered'***REMOVED******REMOVED***:
        i = nditer(a, flags, buffersize=buffersize***REMOVED***
        assert_equal(iter_iterindices(i***REMOVED***, list(range(24***REMOVED******REMOVED******REMOVED***
        i.iterindex = 2
        assert_equal(iter_iterindices(i***REMOVED***, list(range(2, 24***REMOVED******REMOVED******REMOVED***

        i = nditer(a, flags, order='F', buffersize=buffersize***REMOVED***
        assert_equal(iter_iterindices(i***REMOVED***, list(range(24***REMOVED******REMOVED******REMOVED***
        i.iterindex = 5
        assert_equal(iter_iterindices(i***REMOVED***, list(range(5, 24***REMOVED******REMOVED******REMOVED***

        i = nditer(a[::-1***REMOVED***, flags, order='F', buffersize=buffersize***REMOVED***
        assert_equal(iter_iterindices(i***REMOVED***, list(range(24***REMOVED******REMOVED******REMOVED***
        i.iterindex = 9
        assert_equal(iter_iterindices(i***REMOVED***, list(range(9, 24***REMOVED******REMOVED******REMOVED***

        i = nditer(a[::-1, ::-1***REMOVED***, flags, order='C', buffersize=buffersize***REMOVED***
        assert_equal(iter_iterindices(i***REMOVED***, list(range(24***REMOVED******REMOVED******REMOVED***
        i.iterindex = 13
        assert_equal(iter_iterindices(i***REMOVED***, list(range(13, 24***REMOVED******REMOVED******REMOVED***

        i = nditer(a[::1, ::-1***REMOVED***, flags, buffersize=buffersize***REMOVED***
        assert_equal(iter_iterindices(i***REMOVED***, list(range(24***REMOVED******REMOVED******REMOVED***
        i.iterindex = 23
        assert_equal(iter_iterindices(i***REMOVED***, list(range(23, 24***REMOVED******REMOVED******REMOVED***
        i.reset(***REMOVED***
        i.iterindex = 2
        assert_equal(iter_iterindices(i***REMOVED***, list(range(2, 24***REMOVED******REMOVED******REMOVED***

def test_iter_iterrange(***REMOVED***:
    # Make sure getting and resetting the iterrange works

    buffersize = 5
    a = arange(24, dtype='i4'***REMOVED***.reshape(4, 3, 2***REMOVED***
    a_fort = a.ravel(order='F'***REMOVED***

    i = nditer(a, ['ranged'***REMOVED***, ['readonly'***REMOVED***, order='F',
                buffersize=buffersize***REMOVED***
    assert_equal(i.iterrange, (0, 24***REMOVED******REMOVED***
    assert_equal([x[(***REMOVED******REMOVED*** for x in i***REMOVED***, a_fort***REMOVED***
    for r in [(0, 24***REMOVED***, (1, 2***REMOVED***, (3, 24***REMOVED***, (5, 5***REMOVED***, (0, 20***REMOVED***, (23, 24***REMOVED******REMOVED***:
        i.iterrange = r
        assert_equal(i.iterrange, r***REMOVED***
        assert_equal([x[(***REMOVED******REMOVED*** for x in i***REMOVED***, a_fort[r[0***REMOVED***:r[1***REMOVED******REMOVED******REMOVED***

    i = nditer(a, ['ranged', 'buffered'***REMOVED***, ['readonly'***REMOVED***, order='F',
                op_dtypes='f8', buffersize=buffersize***REMOVED***
    assert_equal(i.iterrange, (0, 24***REMOVED******REMOVED***
    assert_equal([x[(***REMOVED******REMOVED*** for x in i***REMOVED***, a_fort***REMOVED***
    for r in [(0, 24***REMOVED***, (1, 2***REMOVED***, (3, 24***REMOVED***, (5, 5***REMOVED***, (0, 20***REMOVED***, (23, 24***REMOVED******REMOVED***:
        i.iterrange = r
        assert_equal(i.iterrange, r***REMOVED***
        assert_equal([x[(***REMOVED******REMOVED*** for x in i***REMOVED***, a_fort[r[0***REMOVED***:r[1***REMOVED******REMOVED******REMOVED***

    def get_array(i***REMOVED***:
        val = np.array([***REMOVED***, dtype='f8'***REMOVED***
        for x in i:
            val = np.concatenate((val, x***REMOVED******REMOVED***
        return val

    i = nditer(a, ['ranged', 'buffered', 'external_loop'***REMOVED***,
                ['readonly'***REMOVED***, order='F',
                op_dtypes='f8', buffersize=buffersize***REMOVED***
    assert_equal(i.iterrange, (0, 24***REMOVED******REMOVED***
    assert_equal(get_array(i***REMOVED***, a_fort***REMOVED***
    for r in [(0, 24***REMOVED***, (1, 2***REMOVED***, (3, 24***REMOVED***, (5, 5***REMOVED***, (0, 20***REMOVED***, (23, 24***REMOVED******REMOVED***:
        i.iterrange = r
        assert_equal(i.iterrange, r***REMOVED***
        assert_equal(get_array(i***REMOVED***, a_fort[r[0***REMOVED***:r[1***REMOVED******REMOVED******REMOVED***

def test_iter_buffering(***REMOVED***:
    # Test buffering with several buffer sizes and types
    arrays = [***REMOVED***
    # F-order swapped array
    arrays.append(np.arange(24,
                    dtype='c16'***REMOVED***.reshape(2, 3, 4***REMOVED***.T.newbyteorder(***REMOVED***.byteswap(***REMOVED******REMOVED***
    # Contiguous 1-dimensional array
    arrays.append(np.arange(10, dtype='f4'***REMOVED******REMOVED***
    # Unaligned array
    a = np.zeros((4*16+1,***REMOVED***, dtype='i1'***REMOVED***[1:***REMOVED***
    a.dtype = 'i4'
    a[:***REMOVED*** = np.arange(16, dtype='i4'***REMOVED***
    arrays.append(a***REMOVED***
    # 4-D F-order array
    arrays.append(np.arange(120, dtype='i4'***REMOVED***.reshape(5, 3, 2, 4***REMOVED***.T***REMOVED***
    for a in arrays:
        for buffersize in (1, 2, 3, 5, 8, 11, 16, 1024***REMOVED***:
            vals = [***REMOVED***
            i = nditer(a, ['buffered', 'external_loop'***REMOVED***,
                           [['readonly', 'nbo', 'aligned'***REMOVED******REMOVED***,
                           order='C',
                           casting='equiv',
                           buffersize=buffersize***REMOVED***
            while not i.finished:
                assert_(i[0***REMOVED***.size <= buffersize***REMOVED***
                vals.append(i[0***REMOVED***.copy(***REMOVED******REMOVED***
                i.iternext(***REMOVED***
            assert_equal(np.concatenate(vals***REMOVED***, a.ravel(order='C'***REMOVED******REMOVED***

def test_iter_write_buffering(***REMOVED***:
    # Test that buffering of writes is working

    # F-order swapped array
    a = np.arange(24***REMOVED***.reshape(2, 3, 4***REMOVED***.T.newbyteorder(***REMOVED***.byteswap(***REMOVED***
    i = nditer(a, ['buffered'***REMOVED***,
                   [['readwrite', 'nbo', 'aligned'***REMOVED******REMOVED***,
                   casting='equiv',
                   order='C',
                   buffersize=16***REMOVED***
    x = 0
    while not i.finished:
        i[0***REMOVED*** = x
        x += 1
        i.iternext(***REMOVED***
    assert_equal(a.ravel(order='C'***REMOVED***, np.arange(24***REMOVED******REMOVED***

def test_iter_buffering_delayed_alloc(***REMOVED***:
    # Test that delaying buffer allocation works

    a = np.arange(6***REMOVED***
    b = np.arange(1, dtype='f4'***REMOVED***
    i = nditer([a, b***REMOVED***, ['buffered', 'delay_bufalloc', 'multi_index', 'reduce_ok'***REMOVED***,
                    ['readwrite'***REMOVED***,
                    casting='unsafe',
                    op_dtypes='f4'***REMOVED***
    assert_(i.has_delayed_bufalloc***REMOVED***
    assert_raises(ValueError, lambda i:i.multi_index, i***REMOVED***
    assert_raises(ValueError, lambda i:i[0***REMOVED***, i***REMOVED***
    assert_raises(ValueError, lambda i:i[0:2***REMOVED***, i***REMOVED***

    def assign_iter(i***REMOVED***:
        i[0***REMOVED*** = 0
    assert_raises(ValueError, assign_iter, i***REMOVED***

    i.reset(***REMOVED***
    assert_(not i.has_delayed_bufalloc***REMOVED***
    assert_equal(i.multi_index, (0,***REMOVED******REMOVED***
    assert_equal(i[0***REMOVED***, 0***REMOVED***
    i[1***REMOVED*** = 1
    assert_equal(i[0:2***REMOVED***, [0, 1***REMOVED******REMOVED***
    assert_equal([[x[0***REMOVED***[(***REMOVED******REMOVED***, x[1***REMOVED***[(***REMOVED******REMOVED******REMOVED*** for x in i***REMOVED***, list(zip(range(6***REMOVED***, [1***REMOVED****6***REMOVED******REMOVED******REMOVED***

def test_iter_buffered_cast_simple(***REMOVED***:
    # Test that buffering can handle a simple cast

    a = np.arange(10, dtype='f4'***REMOVED***
    i = nditer(a, ['buffered', 'external_loop'***REMOVED***,
                   [['readwrite', 'nbo', 'aligned'***REMOVED******REMOVED***,
                   casting='same_kind',
                   op_dtypes=[np.dtype('f8'***REMOVED******REMOVED***,
                   buffersize=3***REMOVED***
    for v in i:
        v[...***REMOVED*** *= 2

    assert_equal(a, 2*np.arange(10, dtype='f4'***REMOVED******REMOVED***

def test_iter_buffered_cast_byteswapped(***REMOVED***:
    # Test that buffering can handle a cast which requires swap->cast->swap

    a = np.arange(10, dtype='f4'***REMOVED***.newbyteorder(***REMOVED***.byteswap(***REMOVED***
    i = nditer(a, ['buffered', 'external_loop'***REMOVED***,
                   [['readwrite', 'nbo', 'aligned'***REMOVED******REMOVED***,
                   casting='same_kind',
                   op_dtypes=[np.dtype('f8'***REMOVED***.newbyteorder(***REMOVED******REMOVED***,
                   buffersize=3***REMOVED***
    for v in i:
        v[...***REMOVED*** *= 2

    assert_equal(a, 2*np.arange(10, dtype='f4'***REMOVED******REMOVED***

    ***REMOVED***
        warnings.simplefilter("ignore", np.ComplexWarning***REMOVED***

        a = np.arange(10, dtype='f8'***REMOVED***.newbyteorder(***REMOVED***.byteswap(***REMOVED***
        i = nditer(a, ['buffered', 'external_loop'***REMOVED***,
                       [['readwrite', 'nbo', 'aligned'***REMOVED******REMOVED***,
                       casting='unsafe',
                       op_dtypes=[np.dtype('c8'***REMOVED***.newbyteorder(***REMOVED******REMOVED***,
                       buffersize=3***REMOVED***
        for v in i:
            v[...***REMOVED*** *= 2

        assert_equal(a, 2*np.arange(10, dtype='f8'***REMOVED******REMOVED***
    finally:
        warnings.simplefilter("default", np.ComplexWarning***REMOVED***

def test_iter_buffered_cast_byteswapped_complex(***REMOVED***:
    # Test that buffering can handle a cast which requires swap->cast->copy

    a = np.arange(10, dtype='c8'***REMOVED***.newbyteorder(***REMOVED***.byteswap(***REMOVED***
    a += 2j
    i = nditer(a, ['buffered', 'external_loop'***REMOVED***,
                   [['readwrite', 'nbo', 'aligned'***REMOVED******REMOVED***,
                   casting='same_kind',
                   op_dtypes=[np.dtype('c16'***REMOVED******REMOVED***,
                   buffersize=3***REMOVED***
    for v in i:
        v[...***REMOVED*** *= 2
    assert_equal(a, 2*np.arange(10, dtype='c8'***REMOVED*** + 4j***REMOVED***

    a = np.arange(10, dtype='c8'***REMOVED***
    a += 2j
    i = nditer(a, ['buffered', 'external_loop'***REMOVED***,
                   [['readwrite', 'nbo', 'aligned'***REMOVED******REMOVED***,
                   casting='same_kind',
                   op_dtypes=[np.dtype('c16'***REMOVED***.newbyteorder(***REMOVED******REMOVED***,
                   buffersize=3***REMOVED***
    for v in i:
        v[...***REMOVED*** *= 2
    assert_equal(a, 2*np.arange(10, dtype='c8'***REMOVED*** + 4j***REMOVED***

    a = np.arange(10, dtype=np.clongdouble***REMOVED***.newbyteorder(***REMOVED***.byteswap(***REMOVED***
    a += 2j
    i = nditer(a, ['buffered', 'external_loop'***REMOVED***,
                   [['readwrite', 'nbo', 'aligned'***REMOVED******REMOVED***,
                   casting='same_kind',
                   op_dtypes=[np.dtype('c16'***REMOVED******REMOVED***,
                   buffersize=3***REMOVED***
    for v in i:
        v[...***REMOVED*** *= 2
    assert_equal(a, 2*np.arange(10, dtype=np.clongdouble***REMOVED*** + 4j***REMOVED***

    a = np.arange(10, dtype=np.longdouble***REMOVED***.newbyteorder(***REMOVED***.byteswap(***REMOVED***
    i = nditer(a, ['buffered', 'external_loop'***REMOVED***,
                   [['readwrite', 'nbo', 'aligned'***REMOVED******REMOVED***,
                   casting='same_kind',
                   op_dtypes=[np.dtype('f4'***REMOVED******REMOVED***,
                   buffersize=7***REMOVED***
    for v in i:
        v[...***REMOVED*** *= 2
    assert_equal(a, 2*np.arange(10, dtype=np.longdouble***REMOVED******REMOVED***

def test_iter_buffered_cast_structured_type(***REMOVED***:
    # Tests buffering of structured types

    # simple -> struct type (duplicates the value***REMOVED***
    sdt = [('a', 'f4'***REMOVED***, ('b', 'i8'***REMOVED***, ('c', 'c8', (2, 3***REMOVED******REMOVED***, ('d', 'O'***REMOVED******REMOVED***
    a = np.arange(3, dtype='f4'***REMOVED*** + 0.5
    i = nditer(a, ['buffered', 'refs_ok'***REMOVED***, ['readonly'***REMOVED***,
                    casting='unsafe',
                    op_dtypes=sdt***REMOVED***
    vals = [np.array(x***REMOVED*** for x in i***REMOVED***
    assert_equal(vals[0***REMOVED***['a'***REMOVED***, 0.5***REMOVED***
    assert_equal(vals[0***REMOVED***['b'***REMOVED***, 0***REMOVED***
    assert_equal(vals[0***REMOVED***['c'***REMOVED***, [[(0.5***REMOVED******REMOVED****3***REMOVED****2***REMOVED***
    assert_equal(vals[0***REMOVED***['d'***REMOVED***, 0.5***REMOVED***
    assert_equal(vals[1***REMOVED***['a'***REMOVED***, 1.5***REMOVED***
    assert_equal(vals[1***REMOVED***['b'***REMOVED***, 1***REMOVED***
    assert_equal(vals[1***REMOVED***['c'***REMOVED***, [[(1.5***REMOVED******REMOVED****3***REMOVED****2***REMOVED***
    assert_equal(vals[1***REMOVED***['d'***REMOVED***, 1.5***REMOVED***
    assert_equal(vals[0***REMOVED***.dtype, np.dtype(sdt***REMOVED******REMOVED***

    # object -> struct type
    sdt = [('a', 'f4'***REMOVED***, ('b', 'i8'***REMOVED***, ('c', 'c8', (2, 3***REMOVED******REMOVED***, ('d', 'O'***REMOVED******REMOVED***
    a = np.zeros((3,***REMOVED***, dtype='O'***REMOVED***
    a[0***REMOVED*** = (0.5, 0.5, [[0.5, 0.5, 0.5***REMOVED***, [0.5, 0.5, 0.5***REMOVED******REMOVED***, 0.5***REMOVED***
    a[1***REMOVED*** = (1.5, 1.5, [[1.5, 1.5, 1.5***REMOVED***, [1.5, 1.5, 1.5***REMOVED******REMOVED***, 1.5***REMOVED***
    a[2***REMOVED*** = (2.5, 2.5, [[2.5, 2.5, 2.5***REMOVED***, [2.5, 2.5, 2.5***REMOVED******REMOVED***, 2.5***REMOVED***
    rc = sys.getrefcount(a[0***REMOVED******REMOVED***
    i = nditer(a, ['buffered', 'refs_ok'***REMOVED***, ['readonly'***REMOVED***,
                    casting='unsafe',
                    op_dtypes=sdt***REMOVED***
    vals = [x.copy(***REMOVED*** for x in i***REMOVED***
    assert_equal(vals[0***REMOVED***['a'***REMOVED***, 0.5***REMOVED***
    assert_equal(vals[0***REMOVED***['b'***REMOVED***, 0***REMOVED***
    assert_equal(vals[0***REMOVED***['c'***REMOVED***, [[(0.5***REMOVED******REMOVED****3***REMOVED****2***REMOVED***
    assert_equal(vals[0***REMOVED***['d'***REMOVED***, 0.5***REMOVED***
    assert_equal(vals[1***REMOVED***['a'***REMOVED***, 1.5***REMOVED***
    assert_equal(vals[1***REMOVED***['b'***REMOVED***, 1***REMOVED***
    assert_equal(vals[1***REMOVED***['c'***REMOVED***, [[(1.5***REMOVED******REMOVED****3***REMOVED****2***REMOVED***
    assert_equal(vals[1***REMOVED***['d'***REMOVED***, 1.5***REMOVED***
    assert_equal(vals[0***REMOVED***.dtype, np.dtype(sdt***REMOVED******REMOVED***
    vals, i, x = [None***REMOVED****3
    assert_equal(sys.getrefcount(a[0***REMOVED******REMOVED***, rc***REMOVED***

    # struct type -> simple (takes the first value***REMOVED***
    sdt = [('a', 'f4'***REMOVED***, ('b', 'i8'***REMOVED***, ('d', 'O'***REMOVED******REMOVED***
    a = np.array([(5.5, 7, 'test'***REMOVED***, (8, 10, 11***REMOVED******REMOVED***, dtype=sdt***REMOVED***
    i = nditer(a, ['buffered', 'refs_ok'***REMOVED***, ['readonly'***REMOVED***,
                    casting='unsafe',
                    op_dtypes='i4'***REMOVED***
    assert_equal([x_[(***REMOVED******REMOVED*** for x_ in i***REMOVED***, [5, 8***REMOVED******REMOVED***

    # struct type -> struct type (field-wise copy***REMOVED***
    sdt1 = [('a', 'f4'***REMOVED***, ('b', 'i8'***REMOVED***, ('d', 'O'***REMOVED******REMOVED***
    sdt2 = [('d', 'u2'***REMOVED***, ('a', 'O'***REMOVED***, ('b', 'f8'***REMOVED******REMOVED***
    a = np.array([(1, 2, 3***REMOVED***, (4, 5, 6***REMOVED******REMOVED***, dtype=sdt1***REMOVED***
    i = nditer(a, ['buffered', 'refs_ok'***REMOVED***, ['readonly'***REMOVED***,
                    casting='unsafe',
                    op_dtypes=sdt2***REMOVED***
    assert_equal(i[0***REMOVED***.dtype, np.dtype(sdt2***REMOVED******REMOVED***
    assert_equal([np.array(x_***REMOVED*** for x_ in i***REMOVED***,
                 [np.array((3, 1, 2***REMOVED***, dtype=sdt2***REMOVED***,
                  np.array((6, 4, 5***REMOVED***, dtype=sdt2***REMOVED******REMOVED******REMOVED***

    # struct type -> struct type (field gets discarded***REMOVED***
    sdt1 = [('a', 'f4'***REMOVED***, ('b', 'i8'***REMOVED***, ('d', 'O'***REMOVED******REMOVED***
    sdt2 = [('b', 'O'***REMOVED***, ('a', 'f8'***REMOVED******REMOVED***
    a = np.array([(1, 2, 3***REMOVED***, (4, 5, 6***REMOVED******REMOVED***, dtype=sdt1***REMOVED***
    i = nditer(a, ['buffered', 'refs_ok'***REMOVED***, ['readwrite'***REMOVED***,
                    casting='unsafe',
                    op_dtypes=sdt2***REMOVED***
    assert_equal(i[0***REMOVED***.dtype, np.dtype(sdt2***REMOVED******REMOVED***
    vals = [***REMOVED***
    for x in i:
        vals.append(np.array(x***REMOVED******REMOVED***
        x['a'***REMOVED*** = x['b'***REMOVED***+3
    assert_equal(vals, [np.array((2, 1***REMOVED***, dtype=sdt2***REMOVED***,
                     np.array((5, 4***REMOVED***, dtype=sdt2***REMOVED******REMOVED******REMOVED***
    assert_equal(a, np.array([(5, 2, None***REMOVED***, (8, 5, None***REMOVED******REMOVED***, dtype=sdt1***REMOVED******REMOVED***

    # struct type -> struct type (structured field gets discarded***REMOVED***
    sdt1 = [('a', 'f4'***REMOVED***, ('b', 'i8'***REMOVED***, ('d', [('a', 'i2'***REMOVED***, ('b', 'i4'***REMOVED******REMOVED******REMOVED******REMOVED***
    sdt2 = [('b', 'O'***REMOVED***, ('a', 'f8'***REMOVED******REMOVED***
    a = np.array([(1, 2, (0, 9***REMOVED******REMOVED***, (4, 5, (20, 21***REMOVED******REMOVED******REMOVED***, dtype=sdt1***REMOVED***
    i = nditer(a, ['buffered', 'refs_ok'***REMOVED***, ['readwrite'***REMOVED***,
                    casting='unsafe',
                    op_dtypes=sdt2***REMOVED***
    assert_equal(i[0***REMOVED***.dtype, np.dtype(sdt2***REMOVED******REMOVED***
    vals = [***REMOVED***
    for x in i:
        vals.append(np.array(x***REMOVED******REMOVED***
        x['a'***REMOVED*** = x['b'***REMOVED***+3
    assert_equal(vals, [np.array((2, 1***REMOVED***, dtype=sdt2***REMOVED***,
                     np.array((5, 4***REMOVED***, dtype=sdt2***REMOVED******REMOVED******REMOVED***
    assert_equal(a, np.array([(5, 2, (0, 0***REMOVED******REMOVED***, (8, 5, (0, 0***REMOVED******REMOVED******REMOVED***, dtype=sdt1***REMOVED******REMOVED***

    # struct type -> struct type (structured field w/ ref gets discarded***REMOVED***
    sdt1 = [('a', 'f4'***REMOVED***, ('b', 'i8'***REMOVED***, ('d', [('a', 'i2'***REMOVED***, ('b', 'O'***REMOVED******REMOVED******REMOVED******REMOVED***
    sdt2 = [('b', 'O'***REMOVED***, ('a', 'f8'***REMOVED******REMOVED***
    a = np.array([(1, 2, (0, 9***REMOVED******REMOVED***, (4, 5, (20, 21***REMOVED******REMOVED******REMOVED***, dtype=sdt1***REMOVED***
    i = nditer(a, ['buffered', 'refs_ok'***REMOVED***, ['readwrite'***REMOVED***,
                    casting='unsafe',
                    op_dtypes=sdt2***REMOVED***
    assert_equal(i[0***REMOVED***.dtype, np.dtype(sdt2***REMOVED******REMOVED***
    vals = [***REMOVED***
    for x in i:
        vals.append(np.array(x***REMOVED******REMOVED***
        x['a'***REMOVED*** = x['b'***REMOVED***+3
    assert_equal(vals, [np.array((2, 1***REMOVED***, dtype=sdt2***REMOVED***,
                     np.array((5, 4***REMOVED***, dtype=sdt2***REMOVED******REMOVED******REMOVED***
    assert_equal(a, np.array([(5, 2, (0, None***REMOVED******REMOVED***, (8, 5, (0, None***REMOVED******REMOVED******REMOVED***, dtype=sdt1***REMOVED******REMOVED***

    # struct type -> struct type back (structured field w/ ref gets discarded***REMOVED***
    sdt1 = [('b', 'O'***REMOVED***, ('a', 'f8'***REMOVED******REMOVED***
    sdt2 = [('a', 'f4'***REMOVED***, ('b', 'i8'***REMOVED***, ('d', [('a', 'i2'***REMOVED***, ('b', 'O'***REMOVED******REMOVED******REMOVED******REMOVED***
    a = np.array([(1, 2***REMOVED***, (4, 5***REMOVED******REMOVED***, dtype=sdt1***REMOVED***
    i = nditer(a, ['buffered', 'refs_ok'***REMOVED***, ['readwrite'***REMOVED***,
                    casting='unsafe',
                    op_dtypes=sdt2***REMOVED***
    assert_equal(i[0***REMOVED***.dtype, np.dtype(sdt2***REMOVED******REMOVED***
    vals = [***REMOVED***
    for x in i:
        vals.append(np.array(x***REMOVED******REMOVED***
        assert_equal(x['d'***REMOVED***, np.array((0, None***REMOVED***, dtype=[('a', 'i2'***REMOVED***, ('b', 'O'***REMOVED******REMOVED******REMOVED******REMOVED***
        x['a'***REMOVED*** = x['b'***REMOVED***+3
    assert_equal(vals, [np.array((2, 1, (0, None***REMOVED******REMOVED***, dtype=sdt2***REMOVED***,
                     np.array((5, 4, (0, None***REMOVED******REMOVED***, dtype=sdt2***REMOVED******REMOVED******REMOVED***
    assert_equal(a, np.array([(1, 4***REMOVED***, (4, 7***REMOVED******REMOVED***, dtype=sdt1***REMOVED******REMOVED***

def test_iter_buffered_cast_subarray(***REMOVED***:
    # Tests buffering of subarrays

    # one element -> many (copies it to all***REMOVED***
    sdt1 = [('a', 'f4'***REMOVED******REMOVED***
    sdt2 = [('a', 'f8', (3, 2, 2***REMOVED******REMOVED******REMOVED***
    a = np.zeros((6,***REMOVED***, dtype=sdt1***REMOVED***
    a['a'***REMOVED*** = np.arange(6***REMOVED***
    i = nditer(a, ['buffered', 'refs_ok'***REMOVED***, ['readonly'***REMOVED***,
                    casting='unsafe',
                    op_dtypes=sdt2***REMOVED***
    assert_equal(i[0***REMOVED***.dtype, np.dtype(sdt2***REMOVED******REMOVED***
    for x, count in zip(i, list(range(6***REMOVED******REMOVED******REMOVED***:
        assert_(np.all(x['a'***REMOVED*** == count***REMOVED******REMOVED***

    # one element -> many -> back (copies it to all***REMOVED***
    sdt1 = [('a', 'O', (1, 1***REMOVED******REMOVED******REMOVED***
    sdt2 = [('a', 'O', (3, 2, 2***REMOVED******REMOVED******REMOVED***
    a = np.zeros((6,***REMOVED***, dtype=sdt1***REMOVED***
    a['a'***REMOVED***[:, 0, 0***REMOVED*** = np.arange(6***REMOVED***
    i = nditer(a, ['buffered', 'refs_ok'***REMOVED***, ['readwrite'***REMOVED***,
                    casting='unsafe',
                    op_dtypes=sdt2***REMOVED***
    assert_equal(i[0***REMOVED***.dtype, np.dtype(sdt2***REMOVED******REMOVED***
    count = 0
    for x in i:
        assert_(np.all(x['a'***REMOVED*** == count***REMOVED******REMOVED***
        x['a'***REMOVED***[0***REMOVED*** += 2
        count += 1
    assert_equal(a['a'***REMOVED***, np.arange(6***REMOVED***.reshape(6, 1, 1***REMOVED***+2***REMOVED***

    # many -> one element -> back (copies just element 0***REMOVED***
    sdt1 = [('a', 'O', (3, 2, 2***REMOVED******REMOVED******REMOVED***
    sdt2 = [('a', 'O', (1,***REMOVED******REMOVED******REMOVED***
    a = np.zeros((6,***REMOVED***, dtype=sdt1***REMOVED***
    a['a'***REMOVED***[:, 0, 0, 0***REMOVED*** = np.arange(6***REMOVED***
    i = nditer(a, ['buffered', 'refs_ok'***REMOVED***, ['readwrite'***REMOVED***,
                    casting='unsafe',
                    op_dtypes=sdt2***REMOVED***
    assert_equal(i[0***REMOVED***.dtype, np.dtype(sdt2***REMOVED******REMOVED***
    count = 0
    for x in i:
        assert_equal(x['a'***REMOVED***, count***REMOVED***
        x['a'***REMOVED*** += 2
        count += 1
    assert_equal(a['a'***REMOVED***, np.arange(6***REMOVED***.reshape(6, 1, 1, 1***REMOVED****np.ones((1, 3, 2, 2***REMOVED******REMOVED***+2***REMOVED***

    # many -> one element -> back (copies just element 0***REMOVED***
    sdt1 = [('a', 'f8', (3, 2, 2***REMOVED******REMOVED******REMOVED***
    sdt2 = [('a', 'O', (1,***REMOVED******REMOVED******REMOVED***
    a = np.zeros((6,***REMOVED***, dtype=sdt1***REMOVED***
    a['a'***REMOVED***[:, 0, 0, 0***REMOVED*** = np.arange(6***REMOVED***
    i = nditer(a, ['buffered', 'refs_ok'***REMOVED***, ['readonly'***REMOVED***,
                    casting='unsafe',
                    op_dtypes=sdt2***REMOVED***
    assert_equal(i[0***REMOVED***.dtype, np.dtype(sdt2***REMOVED******REMOVED***
    count = 0
    for x in i:
        assert_equal(x['a'***REMOVED***, count***REMOVED***
        count += 1

    # many -> one element (copies just element 0***REMOVED***
    sdt1 = [('a', 'O', (3, 2, 2***REMOVED******REMOVED******REMOVED***
    sdt2 = [('a', 'f4', (1,***REMOVED******REMOVED******REMOVED***
    a = np.zeros((6,***REMOVED***, dtype=sdt1***REMOVED***
    a['a'***REMOVED***[:, 0, 0, 0***REMOVED*** = np.arange(6***REMOVED***
    i = nditer(a, ['buffered', 'refs_ok'***REMOVED***, ['readonly'***REMOVED***,
                    casting='unsafe',
                    op_dtypes=sdt2***REMOVED***
    assert_equal(i[0***REMOVED***.dtype, np.dtype(sdt2***REMOVED******REMOVED***
    count = 0
    for x in i:
        assert_equal(x['a'***REMOVED***, count***REMOVED***
        count += 1

    # many -> matching shape (straightforward copy***REMOVED***
    sdt1 = [('a', 'O', (3, 2, 2***REMOVED******REMOVED******REMOVED***
    sdt2 = [('a', 'f4', (3, 2, 2***REMOVED******REMOVED******REMOVED***
    a = np.zeros((6,***REMOVED***, dtype=sdt1***REMOVED***
    a['a'***REMOVED*** = np.arange(6*3*2*2***REMOVED***.reshape(6, 3, 2, 2***REMOVED***
    i = nditer(a, ['buffered', 'refs_ok'***REMOVED***, ['readonly'***REMOVED***,
                    casting='unsafe',
                    op_dtypes=sdt2***REMOVED***
    assert_equal(i[0***REMOVED***.dtype, np.dtype(sdt2***REMOVED******REMOVED***
    count = 0
    for x in i:
        assert_equal(x['a'***REMOVED***, a[count***REMOVED***['a'***REMOVED******REMOVED***
        count += 1

    # vector -> smaller vector (truncates***REMOVED***
    sdt1 = [('a', 'f8', (6,***REMOVED******REMOVED******REMOVED***
    sdt2 = [('a', 'f4', (2,***REMOVED******REMOVED******REMOVED***
    a = np.zeros((6,***REMOVED***, dtype=sdt1***REMOVED***
    a['a'***REMOVED*** = np.arange(6*6***REMOVED***.reshape(6, 6***REMOVED***
    i = nditer(a, ['buffered', 'refs_ok'***REMOVED***, ['readonly'***REMOVED***,
                    casting='unsafe',
                    op_dtypes=sdt2***REMOVED***
    assert_equal(i[0***REMOVED***.dtype, np.dtype(sdt2***REMOVED******REMOVED***
    count = 0
    for x in i:
        assert_equal(x['a'***REMOVED***, a[count***REMOVED***['a'***REMOVED***[:2***REMOVED******REMOVED***
        count += 1

    # vector -> bigger vector (pads with zeros***REMOVED***
    sdt1 = [('a', 'f8', (2,***REMOVED******REMOVED******REMOVED***
    sdt2 = [('a', 'f4', (6,***REMOVED******REMOVED******REMOVED***
    a = np.zeros((6,***REMOVED***, dtype=sdt1***REMOVED***
    a['a'***REMOVED*** = np.arange(6*2***REMOVED***.reshape(6, 2***REMOVED***
    i = nditer(a, ['buffered', 'refs_ok'***REMOVED***, ['readonly'***REMOVED***,
                    casting='unsafe',
                    op_dtypes=sdt2***REMOVED***
    assert_equal(i[0***REMOVED***.dtype, np.dtype(sdt2***REMOVED******REMOVED***
    count = 0
    for x in i:
        assert_equal(x['a'***REMOVED***[:2***REMOVED***, a[count***REMOVED***['a'***REMOVED******REMOVED***
        assert_equal(x['a'***REMOVED***[2:***REMOVED***, [0, 0, 0, 0***REMOVED******REMOVED***
        count += 1

    # vector -> matrix (broadcasts***REMOVED***
    sdt1 = [('a', 'f8', (2,***REMOVED******REMOVED******REMOVED***
    sdt2 = [('a', 'f4', (2, 2***REMOVED******REMOVED******REMOVED***
    a = np.zeros((6,***REMOVED***, dtype=sdt1***REMOVED***
    a['a'***REMOVED*** = np.arange(6*2***REMOVED***.reshape(6, 2***REMOVED***
    i = nditer(a, ['buffered', 'refs_ok'***REMOVED***, ['readonly'***REMOVED***,
                    casting='unsafe',
                    op_dtypes=sdt2***REMOVED***
    assert_equal(i[0***REMOVED***.dtype, np.dtype(sdt2***REMOVED******REMOVED***
    count = 0
    for x in i:
        assert_equal(x['a'***REMOVED***[0***REMOVED***, a[count***REMOVED***['a'***REMOVED******REMOVED***
        assert_equal(x['a'***REMOVED***[1***REMOVED***, a[count***REMOVED***['a'***REMOVED******REMOVED***
        count += 1

    # vector -> matrix (broadcasts and zero-pads***REMOVED***
    sdt1 = [('a', 'f8', (2, 1***REMOVED******REMOVED******REMOVED***
    sdt2 = [('a', 'f4', (3, 2***REMOVED******REMOVED******REMOVED***
    a = np.zeros((6,***REMOVED***, dtype=sdt1***REMOVED***
    a['a'***REMOVED*** = np.arange(6*2***REMOVED***.reshape(6, 2, 1***REMOVED***
    i = nditer(a, ['buffered', 'refs_ok'***REMOVED***, ['readonly'***REMOVED***,
                    casting='unsafe',
                    op_dtypes=sdt2***REMOVED***
    assert_equal(i[0***REMOVED***.dtype, np.dtype(sdt2***REMOVED******REMOVED***
    count = 0
    for x in i:
        assert_equal(x['a'***REMOVED***[:2, 0***REMOVED***, a[count***REMOVED***['a'***REMOVED***[:, 0***REMOVED******REMOVED***
        assert_equal(x['a'***REMOVED***[:2, 1***REMOVED***, a[count***REMOVED***['a'***REMOVED***[:, 0***REMOVED******REMOVED***
        assert_equal(x['a'***REMOVED***[2,:***REMOVED***, [0, 0***REMOVED******REMOVED***
        count += 1

    # matrix -> matrix (truncates and zero-pads***REMOVED***
    sdt1 = [('a', 'f8', (2, 3***REMOVED******REMOVED******REMOVED***
    sdt2 = [('a', 'f4', (3, 2***REMOVED******REMOVED******REMOVED***
    a = np.zeros((6,***REMOVED***, dtype=sdt1***REMOVED***
    a['a'***REMOVED*** = np.arange(6*2*3***REMOVED***.reshape(6, 2, 3***REMOVED***
    i = nditer(a, ['buffered', 'refs_ok'***REMOVED***, ['readonly'***REMOVED***,
                    casting='unsafe',
                    op_dtypes=sdt2***REMOVED***
    assert_equal(i[0***REMOVED***.dtype, np.dtype(sdt2***REMOVED******REMOVED***
    count = 0
    for x in i:
        assert_equal(x['a'***REMOVED***[:2, 0***REMOVED***, a[count***REMOVED***['a'***REMOVED***[:, 0***REMOVED******REMOVED***
        assert_equal(x['a'***REMOVED***[:2, 1***REMOVED***, a[count***REMOVED***['a'***REMOVED***[:, 1***REMOVED******REMOVED***
        assert_equal(x['a'***REMOVED***[2,:***REMOVED***, [0, 0***REMOVED******REMOVED***
        count += 1

def test_iter_buffering_badwriteback(***REMOVED***:
    # Writing back from a buffer cannot combine elements

    # a needs write buffering, but had a broadcast dimension
    a = np.arange(6***REMOVED***.reshape(2, 3, 1***REMOVED***
    b = np.arange(12***REMOVED***.reshape(2, 3, 2***REMOVED***
    assert_raises(ValueError, nditer, [a, b***REMOVED***,
                  ['buffered', 'external_loop'***REMOVED***,
                  [['readwrite'***REMOVED***, ['writeonly'***REMOVED******REMOVED***,
                  order='C'***REMOVED***

    # But if a is readonly, it's fine
    nditer([a, b***REMOVED***, ['buffered', 'external_loop'***REMOVED***,
           [['readonly'***REMOVED***, ['writeonly'***REMOVED******REMOVED***,
           order='C'***REMOVED***

    # If a has just one element, it's fine too (constant 0 stride, a reduction***REMOVED***
    a = np.arange(1***REMOVED***.reshape(1, 1, 1***REMOVED***
    nditer([a, b***REMOVED***, ['buffered', 'external_loop', 'reduce_ok'***REMOVED***,
           [['readwrite'***REMOVED***, ['writeonly'***REMOVED******REMOVED***,
           order='C'***REMOVED***

    # check that it fails on other dimensions too
    a = np.arange(6***REMOVED***.reshape(1, 3, 2***REMOVED***
    assert_raises(ValueError, nditer, [a, b***REMOVED***,
                  ['buffered', 'external_loop'***REMOVED***,
                  [['readwrite'***REMOVED***, ['writeonly'***REMOVED******REMOVED***,
                  order='C'***REMOVED***
    a = np.arange(4***REMOVED***.reshape(2, 1, 2***REMOVED***
    assert_raises(ValueError, nditer, [a, b***REMOVED***,
                  ['buffered', 'external_loop'***REMOVED***,
                  [['readwrite'***REMOVED***, ['writeonly'***REMOVED******REMOVED***,
                  order='C'***REMOVED***

def test_iter_buffering_string(***REMOVED***:
    # Safe casting disallows shrinking strings
    a = np.array(['abc', 'a', 'abcd'***REMOVED***, dtype=np.bytes_***REMOVED***
    assert_equal(a.dtype, np.dtype('S4'***REMOVED******REMOVED***
    assert_raises(TypeError, nditer, a, ['buffered'***REMOVED***, ['readonly'***REMOVED***,
                  op_dtypes='S2'***REMOVED***
    i = nditer(a, ['buffered'***REMOVED***, ['readonly'***REMOVED***, op_dtypes='S6'***REMOVED***
    assert_equal(i[0***REMOVED***, asbytes('abc'***REMOVED******REMOVED***
    assert_equal(i[0***REMOVED***.dtype, np.dtype('S6'***REMOVED******REMOVED***

    a = np.array(['abc', 'a', 'abcd'***REMOVED***, dtype=np.unicode***REMOVED***
    assert_equal(a.dtype, np.dtype('U4'***REMOVED******REMOVED***
    assert_raises(TypeError, nditer, a, ['buffered'***REMOVED***, ['readonly'***REMOVED***,
                    op_dtypes='U2'***REMOVED***
    i = nditer(a, ['buffered'***REMOVED***, ['readonly'***REMOVED***, op_dtypes='U6'***REMOVED***
    assert_equal(i[0***REMOVED***, sixu('abc'***REMOVED******REMOVED***
    assert_equal(i[0***REMOVED***.dtype, np.dtype('U6'***REMOVED******REMOVED***

def test_iter_buffering_growinner(***REMOVED***:
    # Test that the inner loop grows when no buffering is needed
    a = np.arange(30***REMOVED***
    i = nditer(a, ['buffered', 'growinner', 'external_loop'***REMOVED***,
                           buffersize=5***REMOVED***
    # Should end up with just one inner loop here
    assert_equal(i[0***REMOVED***.size, a.size***REMOVED***


@dec.slow
def test_iter_buffered_reduce_reuse(***REMOVED***:
    # large enough array for all views, including negative strides.
    a = np.arange(2*3**5***REMOVED***[3**5:3**5+1***REMOVED***
    flags = ['buffered', 'delay_bufalloc', 'multi_index', 'reduce_ok', 'refs_ok'***REMOVED***
    op_flags = [('readonly',***REMOVED***, ('readwrite', 'allocate'***REMOVED******REMOVED***
    op_axes_list = [[(0, 1, 2***REMOVED***, (0, 1, -1***REMOVED******REMOVED***, [(0, 1, 2***REMOVED***, (0, -1, -1***REMOVED******REMOVED******REMOVED***
    # wrong dtype to force buffering
    op_dtypes = [np.float, a.dtype***REMOVED***

    def get_params(***REMOVED***:
        for xs in range(-3**2, 3**2 + 1***REMOVED***:
            for ys in range(xs, 3**2 + 1***REMOVED***:
                for op_axes in op_axes_list:
                    # last stride is reduced and because of that not
                    # important for this test, as it is the inner stride.
                    strides = (xs * a.itemsize, ys * a.itemsize, a.itemsize***REMOVED***
                    arr = np.lib.stride_tricks.as_strided(a, (3, 3, 3***REMOVED***, strides***REMOVED***

                    for skip in [0, 1***REMOVED***:
                        yield arr, op_axes, skip

    for arr, op_axes, skip in get_params(***REMOVED***:
        nditer2 = np.nditer([arr.copy(***REMOVED***, None***REMOVED***,
                            op_axes=op_axes, flags=flags, op_flags=op_flags,
                            op_dtypes=op_dtypes***REMOVED***
        nditer2.operands[-1***REMOVED***[...***REMOVED*** = 0
        nditer2.reset(***REMOVED***
        nditer2.iterindex = skip

        for (a2_in, b2_in***REMOVED*** in nditer2:
            b2_in += a2_in.astype(np.int_***REMOVED***

        comp_res = nditer2.operands[-1***REMOVED***

        for bufsize in range(0, 3**3***REMOVED***:
            nditer1 = np.nditer([arr, None***REMOVED***,
                                op_axes=op_axes, flags=flags, op_flags=op_flags,
                                buffersize=bufsize, op_dtypes=op_dtypes***REMOVED***
            nditer1.operands[-1***REMOVED***[...***REMOVED*** = 0
            nditer1.reset(***REMOVED***
            nditer1.iterindex = skip

            for (a1_in, b1_in***REMOVED*** in nditer1:
                b1_in += a1_in.astype(np.int_***REMOVED***

            res = nditer1.operands[-1***REMOVED***
            assert_array_equal(res, comp_res***REMOVED***


def test_iter_no_broadcast(***REMOVED***:
    # Test that the no_broadcast flag works
    a = np.arange(24***REMOVED***.reshape(2, 3, 4***REMOVED***
    b = np.arange(6***REMOVED***.reshape(2, 3, 1***REMOVED***
    c = np.arange(12***REMOVED***.reshape(3, 4***REMOVED***

    nditer([a, b, c***REMOVED***, [***REMOVED***,
           [['readonly', 'no_broadcast'***REMOVED***,
            ['readonly'***REMOVED***, ['readonly'***REMOVED******REMOVED******REMOVED***
    assert_raises(ValueError, nditer, [a, b, c***REMOVED***, [***REMOVED***,
                  [['readonly'***REMOVED***, ['readonly', 'no_broadcast'***REMOVED***, ['readonly'***REMOVED******REMOVED******REMOVED***
    assert_raises(ValueError, nditer, [a, b, c***REMOVED***, [***REMOVED***,
                  [['readonly'***REMOVED***, ['readonly'***REMOVED***, ['readonly', 'no_broadcast'***REMOVED******REMOVED******REMOVED***

def test_iter_nested_iters_basic(***REMOVED***:
    # Test nested iteration basic usage
    a = arange(12***REMOVED***.reshape(2, 3, 2***REMOVED***

    i, j = np.nested_iters(a, [[0***REMOVED***, [1, 2***REMOVED******REMOVED******REMOVED***
    vals = [***REMOVED***
    for x in i:
        vals.append([y for y in j***REMOVED******REMOVED***
    assert_equal(vals, [[0, 1, 2, 3, 4, 5***REMOVED***, [6, 7, 8, 9, 10, 11***REMOVED******REMOVED******REMOVED***

    i, j = np.nested_iters(a, [[0, 1***REMOVED***, [2***REMOVED******REMOVED******REMOVED***
    vals = [***REMOVED***
    for x in i:
        vals.append([y for y in j***REMOVED******REMOVED***
    assert_equal(vals, [[0, 1***REMOVED***, [2, 3***REMOVED***, [4, 5***REMOVED***, [6, 7***REMOVED***, [8, 9***REMOVED***, [10, 11***REMOVED******REMOVED******REMOVED***

    i, j = np.nested_iters(a, [[0, 2***REMOVED***, [1***REMOVED******REMOVED******REMOVED***
    vals = [***REMOVED***
    for x in i:
        vals.append([y for y in j***REMOVED******REMOVED***
    assert_equal(vals, [[0, 2, 4***REMOVED***, [1, 3, 5***REMOVED***, [6, 8, 10***REMOVED***, [7, 9, 11***REMOVED******REMOVED******REMOVED***

def test_iter_nested_iters_reorder(***REMOVED***:
    # Test nested iteration basic usage
    a = arange(12***REMOVED***.reshape(2, 3, 2***REMOVED***

    # In 'K' order (default***REMOVED***, it gets reordered
    i, j = np.nested_iters(a, [[0***REMOVED***, [2, 1***REMOVED******REMOVED******REMOVED***
    vals = [***REMOVED***
    for x in i:
        vals.append([y for y in j***REMOVED******REMOVED***
    assert_equal(vals, [[0, 1, 2, 3, 4, 5***REMOVED***, [6, 7, 8, 9, 10, 11***REMOVED******REMOVED******REMOVED***

    i, j = np.nested_iters(a, [[1, 0***REMOVED***, [2***REMOVED******REMOVED******REMOVED***
    vals = [***REMOVED***
    for x in i:
        vals.append([y for y in j***REMOVED******REMOVED***
    assert_equal(vals, [[0, 1***REMOVED***, [2, 3***REMOVED***, [4, 5***REMOVED***, [6, 7***REMOVED***, [8, 9***REMOVED***, [10, 11***REMOVED******REMOVED******REMOVED***

    i, j = np.nested_iters(a, [[2, 0***REMOVED***, [1***REMOVED******REMOVED******REMOVED***
    vals = [***REMOVED***
    for x in i:
        vals.append([y for y in j***REMOVED******REMOVED***
    assert_equal(vals, [[0, 2, 4***REMOVED***, [1, 3, 5***REMOVED***, [6, 8, 10***REMOVED***, [7, 9, 11***REMOVED******REMOVED******REMOVED***

    # In 'C' order, it doesn't
    i, j = np.nested_iters(a, [[0***REMOVED***, [2, 1***REMOVED******REMOVED***, order='C'***REMOVED***
    vals = [***REMOVED***
    for x in i:
        vals.append([y for y in j***REMOVED******REMOVED***
    assert_equal(vals, [[0, 2, 4, 1, 3, 5***REMOVED***, [6, 8, 10, 7, 9, 11***REMOVED******REMOVED******REMOVED***

    i, j = np.nested_iters(a, [[1, 0***REMOVED***, [2***REMOVED******REMOVED***, order='C'***REMOVED***
    vals = [***REMOVED***
    for x in i:
        vals.append([y for y in j***REMOVED******REMOVED***
    assert_equal(vals, [[0, 1***REMOVED***, [6, 7***REMOVED***, [2, 3***REMOVED***, [8, 9***REMOVED***, [4, 5***REMOVED***, [10, 11***REMOVED******REMOVED******REMOVED***

    i, j = np.nested_iters(a, [[2, 0***REMOVED***, [1***REMOVED******REMOVED***, order='C'***REMOVED***
    vals = [***REMOVED***
    for x in i:
        vals.append([y for y in j***REMOVED******REMOVED***
    assert_equal(vals, [[0, 2, 4***REMOVED***, [6, 8, 10***REMOVED***, [1, 3, 5***REMOVED***, [7, 9, 11***REMOVED******REMOVED******REMOVED***

def test_iter_nested_iters_flip_axes(***REMOVED***:
    # Test nested iteration with negative axes
    a = arange(12***REMOVED***.reshape(2, 3, 2***REMOVED***[::-1, ::-1, ::-1***REMOVED***

    # In 'K' order (default***REMOVED***, the axes all get flipped
    i, j = np.nested_iters(a, [[0***REMOVED***, [1, 2***REMOVED******REMOVED******REMOVED***
    vals = [***REMOVED***
    for x in i:
        vals.append([y for y in j***REMOVED******REMOVED***
    assert_equal(vals, [[0, 1, 2, 3, 4, 5***REMOVED***, [6, 7, 8, 9, 10, 11***REMOVED******REMOVED******REMOVED***

    i, j = np.nested_iters(a, [[0, 1***REMOVED***, [2***REMOVED******REMOVED******REMOVED***
    vals = [***REMOVED***
    for x in i:
        vals.append([y for y in j***REMOVED******REMOVED***
    assert_equal(vals, [[0, 1***REMOVED***, [2, 3***REMOVED***, [4, 5***REMOVED***, [6, 7***REMOVED***, [8, 9***REMOVED***, [10, 11***REMOVED******REMOVED******REMOVED***

    i, j = np.nested_iters(a, [[0, 2***REMOVED***, [1***REMOVED******REMOVED******REMOVED***
    vals = [***REMOVED***
    for x in i:
        vals.append([y for y in j***REMOVED******REMOVED***
    assert_equal(vals, [[0, 2, 4***REMOVED***, [1, 3, 5***REMOVED***, [6, 8, 10***REMOVED***, [7, 9, 11***REMOVED******REMOVED******REMOVED***

    # In 'C' order, flipping axes is disabled
    i, j = np.nested_iters(a, [[0***REMOVED***, [1, 2***REMOVED******REMOVED***, order='C'***REMOVED***
    vals = [***REMOVED***
    for x in i:
        vals.append([y for y in j***REMOVED******REMOVED***
    assert_equal(vals, [[11, 10, 9, 8, 7, 6***REMOVED***, [5, 4, 3, 2, 1, 0***REMOVED******REMOVED******REMOVED***

    i, j = np.nested_iters(a, [[0, 1***REMOVED***, [2***REMOVED******REMOVED***, order='C'***REMOVED***
    vals = [***REMOVED***
    for x in i:
        vals.append([y for y in j***REMOVED******REMOVED***
    assert_equal(vals, [[11, 10***REMOVED***, [9, 8***REMOVED***, [7, 6***REMOVED***, [5, 4***REMOVED***, [3, 2***REMOVED***, [1, 0***REMOVED******REMOVED******REMOVED***

    i, j = np.nested_iters(a, [[0, 2***REMOVED***, [1***REMOVED******REMOVED***, order='C'***REMOVED***
    vals = [***REMOVED***
    for x in i:
        vals.append([y for y in j***REMOVED******REMOVED***
    assert_equal(vals, [[11, 9, 7***REMOVED***, [10, 8, 6***REMOVED***, [5, 3, 1***REMOVED***, [4, 2, 0***REMOVED******REMOVED******REMOVED***

def test_iter_nested_iters_broadcast(***REMOVED***:
    # Test nested iteration with broadcasting
    a = arange(2***REMOVED***.reshape(2, 1***REMOVED***
    b = arange(3***REMOVED***.reshape(1, 3***REMOVED***

    i, j = np.nested_iters([a, b***REMOVED***, [[0***REMOVED***, [1***REMOVED******REMOVED******REMOVED***
    vals = [***REMOVED***
    for x in i:
        vals.append([y for y in j***REMOVED******REMOVED***
    assert_equal(vals, [[[0, 0***REMOVED***, [0, 1***REMOVED***, [0, 2***REMOVED******REMOVED***, [[1, 0***REMOVED***, [1, 1***REMOVED***, [1, 2***REMOVED******REMOVED******REMOVED******REMOVED***

    i, j = np.nested_iters([a, b***REMOVED***, [[1***REMOVED***, [0***REMOVED******REMOVED******REMOVED***
    vals = [***REMOVED***
    for x in i:
        vals.append([y for y in j***REMOVED******REMOVED***
    assert_equal(vals, [[[0, 0***REMOVED***, [1, 0***REMOVED******REMOVED***, [[0, 1***REMOVED***, [1, 1***REMOVED******REMOVED***, [[0, 2***REMOVED***, [1, 2***REMOVED******REMOVED******REMOVED******REMOVED***

def test_iter_nested_iters_dtype_copy(***REMOVED***:
    # Test nested iteration with a copy to change dtype

    # copy
    a = arange(6, dtype='i4'***REMOVED***.reshape(2, 3***REMOVED***
    i, j = np.nested_iters(a, [[0***REMOVED***, [1***REMOVED******REMOVED***,
                        op_flags=['readonly', 'copy'***REMOVED***,
                        op_dtypes='f8'***REMOVED***
    assert_equal(j[0***REMOVED***.dtype, np.dtype('f8'***REMOVED******REMOVED***
    vals = [***REMOVED***
    for x in i:
        vals.append([y for y in j***REMOVED******REMOVED***
    assert_equal(vals, [[0, 1, 2***REMOVED***, [3, 4, 5***REMOVED******REMOVED******REMOVED***
    vals = None

    # updateifcopy
    a = arange(6, dtype='f4'***REMOVED***.reshape(2, 3***REMOVED***
    i, j = np.nested_iters(a, [[0***REMOVED***, [1***REMOVED******REMOVED***,
                        op_flags=['readwrite', 'updateifcopy'***REMOVED***,
                        casting='same_kind',
                        op_dtypes='f8'***REMOVED***
    assert_equal(j[0***REMOVED***.dtype, np.dtype('f8'***REMOVED******REMOVED***
    for x in i:
        for y in j:
            y[...***REMOVED*** += 1
    assert_equal(a, [[0, 1, 2***REMOVED***, [3, 4, 5***REMOVED******REMOVED******REMOVED***
    i, j, x, y = (None,***REMOVED****4  # force the updateifcopy
    assert_equal(a, [[1, 2, 3***REMOVED***, [4, 5, 6***REMOVED******REMOVED******REMOVED***

def test_iter_nested_iters_dtype_buffered(***REMOVED***:
    # Test nested iteration with buffering to change dtype

    a = arange(6, dtype='f4'***REMOVED***.reshape(2, 3***REMOVED***
    i, j = np.nested_iters(a, [[0***REMOVED***, [1***REMOVED******REMOVED***,
                        flags=['buffered'***REMOVED***,
                        op_flags=['readwrite'***REMOVED***,
                        casting='same_kind',
                        op_dtypes='f8'***REMOVED***
    assert_equal(j[0***REMOVED***.dtype, np.dtype('f8'***REMOVED******REMOVED***
    for x in i:
        for y in j:
            y[...***REMOVED*** += 1
    assert_equal(a, [[1, 2, 3***REMOVED***, [4, 5, 6***REMOVED******REMOVED******REMOVED***

def test_iter_reduction_error(***REMOVED***:

    a = np.arange(6***REMOVED***
    assert_raises(ValueError, nditer, [a, None***REMOVED***, [***REMOVED***,
                    [['readonly'***REMOVED***, ['readwrite', 'allocate'***REMOVED******REMOVED***,
                    op_axes=[[0***REMOVED***, [-1***REMOVED******REMOVED******REMOVED***

    a = np.arange(6***REMOVED***.reshape(2, 3***REMOVED***
    assert_raises(ValueError, nditer, [a, None***REMOVED***, ['external_loop'***REMOVED***,
                    [['readonly'***REMOVED***, ['readwrite', 'allocate'***REMOVED******REMOVED***,
                    op_axes=[[0, 1***REMOVED***, [-1, -1***REMOVED******REMOVED******REMOVED***

def test_iter_reduction(***REMOVED***:
    # Test doing reductions with the iterator

    a = np.arange(6***REMOVED***
    i = nditer([a, None***REMOVED***, ['reduce_ok'***REMOVED***,
                    [['readonly'***REMOVED***, ['readwrite', 'allocate'***REMOVED******REMOVED***,
                    op_axes=[[0***REMOVED***, [-1***REMOVED******REMOVED******REMOVED***
    # Need to initialize the output operand to the addition unit
    i.operands[1***REMOVED***[...***REMOVED*** = 0
    # Do the reduction
    for x, y in i:
        y[...***REMOVED*** += x
    # Since no axes were specified, should have allocated a scalar
    assert_equal(i.operands[1***REMOVED***.ndim, 0***REMOVED***
    assert_equal(i.operands[1***REMOVED***, np.sum(a***REMOVED******REMOVED***

    a = np.arange(6***REMOVED***.reshape(2, 3***REMOVED***
    i = nditer([a, None***REMOVED***, ['reduce_ok', 'external_loop'***REMOVED***,
                    [['readonly'***REMOVED***, ['readwrite', 'allocate'***REMOVED******REMOVED***,
                    op_axes=[[0, 1***REMOVED***, [-1, -1***REMOVED******REMOVED******REMOVED***
    # Need to initialize the output operand to the addition unit
    i.operands[1***REMOVED***[...***REMOVED*** = 0
    # Reduction shape/strides for the output
    assert_equal(i[1***REMOVED***.shape, (6,***REMOVED******REMOVED***
    assert_equal(i[1***REMOVED***.strides, (0,***REMOVED******REMOVED***
    # Do the reduction
    for x, y in i:
        y[...***REMOVED*** += x
    # Since no axes were specified, should have allocated a scalar
    assert_equal(i.operands[1***REMOVED***.ndim, 0***REMOVED***
    assert_equal(i.operands[1***REMOVED***, np.sum(a***REMOVED******REMOVED***

    # This is a tricky reduction case for the buffering double loop
    # to handle
    a = np.ones((2, 3, 5***REMOVED******REMOVED***
    it1 = nditer([a, None***REMOVED***, ['reduce_ok', 'external_loop'***REMOVED***,
                    [['readonly'***REMOVED***, ['readwrite', 'allocate'***REMOVED******REMOVED***,
                    op_axes=[None, [0, -1, 1***REMOVED******REMOVED******REMOVED***
    it2 = nditer([a, None***REMOVED***, ['reduce_ok', 'external_loop',
                            'buffered', 'delay_bufalloc'***REMOVED***,
                    [['readonly'***REMOVED***, ['readwrite', 'allocate'***REMOVED******REMOVED***,
                    op_axes=[None, [0, -1, 1***REMOVED******REMOVED***, buffersize=10***REMOVED***
    it1.operands[1***REMOVED***.fill(0***REMOVED***
    it2.operands[1***REMOVED***.fill(0***REMOVED***
    it2.reset(***REMOVED***
    for x in it1:
        x[1***REMOVED***[...***REMOVED*** += x[0***REMOVED***
    for x in it2:
        x[1***REMOVED***[...***REMOVED*** += x[0***REMOVED***
    assert_equal(it1.operands[1***REMOVED***, it2.operands[1***REMOVED******REMOVED***
    assert_equal(it2.operands[1***REMOVED***.sum(***REMOVED***, a.size***REMOVED***

def test_iter_buffering_reduction(***REMOVED***:
    # Test doing buffered reductions with the iterator

    a = np.arange(6***REMOVED***
    b = np.array(0., dtype='f8'***REMOVED***.byteswap(***REMOVED***.newbyteorder(***REMOVED***
    i = nditer([a, b***REMOVED***, ['reduce_ok', 'buffered'***REMOVED***,
                    [['readonly'***REMOVED***, ['readwrite', 'nbo'***REMOVED******REMOVED***,
                    op_axes=[[0***REMOVED***, [-1***REMOVED******REMOVED******REMOVED***
    assert_equal(i[1***REMOVED***.dtype, np.dtype('f8'***REMOVED******REMOVED***
    assert_(i[1***REMOVED***.dtype != b.dtype***REMOVED***
    # Do the reduction
    for x, y in i:
        y[...***REMOVED*** += x
    # Since no axes were specified, should have allocated a scalar
    assert_equal(b, np.sum(a***REMOVED******REMOVED***

    a = np.arange(6***REMOVED***.reshape(2, 3***REMOVED***
    b = np.array([0, 0***REMOVED***, dtype='f8'***REMOVED***.byteswap(***REMOVED***.newbyteorder(***REMOVED***
    i = nditer([a, b***REMOVED***, ['reduce_ok', 'external_loop', 'buffered'***REMOVED***,
                    [['readonly'***REMOVED***, ['readwrite', 'nbo'***REMOVED******REMOVED***,
                    op_axes=[[0, 1***REMOVED***, [0, -1***REMOVED******REMOVED******REMOVED***
    # Reduction shape/strides for the output
    assert_equal(i[1***REMOVED***.shape, (3,***REMOVED******REMOVED***
    assert_equal(i[1***REMOVED***.strides, (0,***REMOVED******REMOVED***
    # Do the reduction
    for x, y in i:
        y[...***REMOVED*** += x
    assert_equal(b, np.sum(a, axis=1***REMOVED******REMOVED***

    # Iterator inner double loop was wrong on this one
    p = np.arange(2***REMOVED*** + 1
    it = np.nditer([p, None***REMOVED***,
            ['delay_bufalloc', 'reduce_ok', 'buffered', 'external_loop'***REMOVED***,
            [['readonly'***REMOVED***, ['readwrite', 'allocate'***REMOVED******REMOVED***,
            op_axes=[[-1, 0***REMOVED***, [-1, -1***REMOVED******REMOVED***,
            itershape=(2, 2***REMOVED******REMOVED***
    it.operands[1***REMOVED***.fill(0***REMOVED***
    it.reset(***REMOVED***
    assert_equal(it[0***REMOVED***, [1, 2, 1, 2***REMOVED******REMOVED***

    # Iterator inner loop should take argument contiguity into account
    x = np.ones((7, 13, 8***REMOVED***, np.int8***REMOVED***[4:6,1:11:6,1:5***REMOVED***.transpose(1, 2, 0***REMOVED***
    x[...***REMOVED*** = np.arange(x.size***REMOVED***.reshape(x.shape***REMOVED***
    y_base = np.arange(4*4, dtype=np.int8***REMOVED***.reshape(4, 4***REMOVED***
    y_base_copy = y_base.copy(***REMOVED***
    y = y_base[::2,:,None***REMOVED***

    it = np.nditer([y, x***REMOVED***,
                   ['buffered', 'external_loop', 'reduce_ok'***REMOVED***,
                   [['readwrite'***REMOVED***, ['readonly'***REMOVED******REMOVED******REMOVED***
    for a, b in it:
        a.fill(2***REMOVED***

    assert_equal(y_base[1::2***REMOVED***, y_base_copy[1::2***REMOVED******REMOVED***
    assert_equal(y_base[::2***REMOVED***, 2***REMOVED***

def test_iter_buffering_reduction_reuse_reduce_loops(***REMOVED***:
    # There was a bug triggering reuse of the reduce loop inappropriately,
    # which caused processing to happen in unnecessarily small chunks
    # and overran the buffer.

    a = np.zeros((2, 7***REMOVED******REMOVED***
    b = np.zeros((1, 7***REMOVED******REMOVED***
    it = np.nditer([a, b***REMOVED***, flags=['reduce_ok', 'external_loop', 'buffered'***REMOVED***,
                    op_flags=[['readonly'***REMOVED***, ['readwrite'***REMOVED******REMOVED***,
                    buffersize=5***REMOVED***

    bufsizes = [***REMOVED***
    for x, y in it:
        bufsizes.append(x.shape[0***REMOVED******REMOVED***
    assert_equal(bufsizes, [5, 2, 5, 2***REMOVED******REMOVED***
    assert_equal(sum(bufsizes***REMOVED***, a.size***REMOVED***

def test_iter_writemasked_badinput(***REMOVED***:
    a = np.zeros((2, 3***REMOVED******REMOVED***
    b = np.zeros((3,***REMOVED******REMOVED***
    m = np.array([[True, True, False***REMOVED***, [False, True, False***REMOVED******REMOVED******REMOVED***
    m2 = np.array([True, True, False***REMOVED******REMOVED***
    m3 = np.array([0, 1, 1***REMOVED***, dtype='u1'***REMOVED***
    mbad1 = np.array([0, 1, 1***REMOVED***, dtype='i1'***REMOVED***
    mbad2 = np.array([0, 1, 1***REMOVED***, dtype='f4'***REMOVED***

    # Need an 'arraymask' if any operand is 'writemasked'
    assert_raises(ValueError, nditer, [a, m***REMOVED***, [***REMOVED***,
                    [['readwrite', 'writemasked'***REMOVED***, ['readonly'***REMOVED******REMOVED******REMOVED***

    # A 'writemasked' operand must not be readonly
    assert_raises(ValueError, nditer, [a, m***REMOVED***, [***REMOVED***,
                    [['readonly', 'writemasked'***REMOVED***, ['readonly', 'arraymask'***REMOVED******REMOVED******REMOVED***

    # 'writemasked' and 'arraymask' may not be used together
    assert_raises(ValueError, nditer, [a, m***REMOVED***, [***REMOVED***,
                    [['readonly'***REMOVED***, ['readwrite', 'arraymask', 'writemasked'***REMOVED******REMOVED******REMOVED***

    # 'arraymask' may only be specified once
    assert_raises(ValueError, nditer, [a, m, m2***REMOVED***, [***REMOVED***,
                    [['readwrite', 'writemasked'***REMOVED***,
                     ['readonly', 'arraymask'***REMOVED***,
                     ['readonly', 'arraymask'***REMOVED******REMOVED******REMOVED***

    # An 'arraymask' with nothing 'writemasked' also doesn't make sense
    assert_raises(ValueError, nditer, [a, m***REMOVED***, [***REMOVED***,
                    [['readwrite'***REMOVED***, ['readonly', 'arraymask'***REMOVED******REMOVED******REMOVED***

    # A writemasked reduction requires a similarly smaller mask
    assert_raises(ValueError, nditer, [a, b, m***REMOVED***, ['reduce_ok'***REMOVED***,
                    [['readonly'***REMOVED***,
                     ['readwrite', 'writemasked'***REMOVED***,
                     ['readonly', 'arraymask'***REMOVED******REMOVED******REMOVED***
    # But this should work with a smaller/equal mask to the reduction operand
    np.nditer([a, b, m2***REMOVED***, ['reduce_ok'***REMOVED***,
                    [['readonly'***REMOVED***,
                     ['readwrite', 'writemasked'***REMOVED***,
                     ['readonly', 'arraymask'***REMOVED******REMOVED******REMOVED***
    # The arraymask itself cannot be a reduction
    assert_raises(ValueError, nditer, [a, b, m2***REMOVED***, ['reduce_ok'***REMOVED***,
                    [['readonly'***REMOVED***,
                     ['readwrite', 'writemasked'***REMOVED***,
                     ['readwrite', 'arraymask'***REMOVED******REMOVED******REMOVED***

    # A uint8 mask is ok too
    np.nditer([a, m3***REMOVED***, ['buffered'***REMOVED***,
                    [['readwrite', 'writemasked'***REMOVED***,
                     ['readonly', 'arraymask'***REMOVED******REMOVED***,
                    op_dtypes=['f4', None***REMOVED***,
                    casting='same_kind'***REMOVED***
    # An int8 mask isn't ok
    assert_raises(TypeError, np.nditer, [a, mbad1***REMOVED***, ['buffered'***REMOVED***,
                    [['readwrite', 'writemasked'***REMOVED***,
                     ['readonly', 'arraymask'***REMOVED******REMOVED***,
                    op_dtypes=['f4', None***REMOVED***,
                    casting='same_kind'***REMOVED***
    # A float32 mask isn't ok
    assert_raises(TypeError, np.nditer, [a, mbad2***REMOVED***, ['buffered'***REMOVED***,
                    [['readwrite', 'writemasked'***REMOVED***,
                     ['readonly', 'arraymask'***REMOVED******REMOVED***,
                    op_dtypes=['f4', None***REMOVED***,
                    casting='same_kind'***REMOVED***

def test_iter_writemasked(***REMOVED***:
    a = np.zeros((3,***REMOVED***, dtype='f8'***REMOVED***
    msk = np.array([True, True, False***REMOVED******REMOVED***

    # When buffering is unused, 'writemasked' effectively does nothing.
    # It's up to the user of the iterator to obey the requested semantics.
    it = np.nditer([a, msk***REMOVED***, [***REMOVED***,
                [['readwrite', 'writemasked'***REMOVED***,
                 ['readonly', 'arraymask'***REMOVED******REMOVED******REMOVED***
    for x, m in it:
        x[...***REMOVED*** = 1
    # Because we violated the semantics, all the values became 1
    assert_equal(a, [1, 1, 1***REMOVED******REMOVED***

    # Even if buffering is enabled, we still may be accessing the array
    # directly.
    it = np.nditer([a, msk***REMOVED***, ['buffered'***REMOVED***,
                [['readwrite', 'writemasked'***REMOVED***,
                 ['readonly', 'arraymask'***REMOVED******REMOVED******REMOVED***
    for x, m in it:
        x[...***REMOVED*** = 2.5
    # Because we violated the semantics, all the values became 2.5
    assert_equal(a, [2.5, 2.5, 2.5***REMOVED******REMOVED***

    # If buffering will definitely happening, for instance because of
    # a cast, only the items selected by the mask will be copied back from
    # the buffer.
    it = np.nditer([a, msk***REMOVED***, ['buffered'***REMOVED***,
                [['readwrite', 'writemasked'***REMOVED***,
                 ['readonly', 'arraymask'***REMOVED******REMOVED***,
                op_dtypes=['i8', None***REMOVED***,
                casting='unsafe'***REMOVED***
    for x, m in it:
        x[...***REMOVED*** = 3
    # Even though we violated the semantics, only the selected values
    # were copied back
    assert_equal(a, [3, 3, 2.5***REMOVED******REMOVED***

def test_iter_non_writable_attribute_deletion(***REMOVED***:
    it = np.nditer(np.ones(2***REMOVED******REMOVED***
    attr = ["value", "shape", "operands", "itviews", "has_delayed_bufalloc",
            "iterationneedsapi", "has_multi_index", "has_index", "dtypes",
            "ndim", "nop", "itersize", "finished"***REMOVED***

    for s in attr:
        assert_raises(AttributeError, delattr, it, s***REMOVED***


def test_iter_writable_attribute_deletion(***REMOVED***:
    it = np.nditer(np.ones(2***REMOVED******REMOVED***
    attr = [ "multi_index", "index", "iterrange", "iterindex"***REMOVED***
    for s in attr:
        assert_raises(AttributeError, delattr, it, s***REMOVED***


def test_iter_element_deletion(***REMOVED***:
    it = np.nditer(np.ones(3***REMOVED******REMOVED***
    ***REMOVED***
        del it[1***REMOVED***
        del it[1:2***REMOVED***
    except TypeError:
        pass
    ***REMOVED***
        raise AssertionError

def test_iter_allocated_array_dtypes(***REMOVED***:
    # If the dtype of an allocated output has a shape, the shape gets
    # tacked onto the end of the result.
    it = np.nditer(([1, 3, 20***REMOVED***, None***REMOVED***, op_dtypes=[None, ('i4', (2,***REMOVED******REMOVED******REMOVED******REMOVED***
    for a, b in it:
        b[0***REMOVED*** = a - 1
        b[1***REMOVED*** = a + 1
    assert_equal(it.operands[1***REMOVED***, [[0, 2***REMOVED***, [2, 4***REMOVED***, [19, 21***REMOVED******REMOVED******REMOVED***

    # Make sure this works for scalars too
    it = np.nditer((10, 2, None***REMOVED***, op_dtypes=[None, None, ('i4', (2, 2***REMOVED******REMOVED******REMOVED******REMOVED***
    for a, b, c in it:
        c[0, 0***REMOVED*** = a - b
        c[0, 1***REMOVED*** = a + b
        c[1, 0***REMOVED*** = a * b
        c[1, 1***REMOVED*** = a / b
    assert_equal(it.operands[2***REMOVED***, [[8, 12***REMOVED***, [20, 5***REMOVED******REMOVED******REMOVED***


def test_0d_iter(***REMOVED***:
    # Basic test for iteration of 0-d arrays:
    i = nditer([2, 3***REMOVED***, ['multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED****2***REMOVED***
    assert_equal(i.ndim, 0***REMOVED***
    assert_equal(next(i***REMOVED***, (2, 3***REMOVED******REMOVED***
    assert_equal(i.multi_index, (***REMOVED******REMOVED***
    assert_equal(i.iterindex, 0***REMOVED***
    assert_raises(StopIteration, next, i***REMOVED***
    # test reset:
    i.reset(***REMOVED***
    assert_equal(next(i***REMOVED***, (2, 3***REMOVED******REMOVED***
    assert_raises(StopIteration, next, i***REMOVED***

    # test forcing to 0-d
    i = nditer(np.arange(5***REMOVED***, ['multi_index'***REMOVED***, [['readonly'***REMOVED******REMOVED***, op_axes=[(***REMOVED******REMOVED******REMOVED***
    assert_equal(i.ndim, 0***REMOVED***
    assert_equal(len(i***REMOVED***, 1***REMOVED***
    # note that itershape=(***REMOVED***, still behaves like None due to the conversions

    # Test a more complex buffered casting case (same as another test above***REMOVED***
    sdt = [('a', 'f4'***REMOVED***, ('b', 'i8'***REMOVED***, ('c', 'c8', (2, 3***REMOVED******REMOVED***, ('d', 'O'***REMOVED******REMOVED***
    a = np.array(0.5, dtype='f4'***REMOVED***
    i = nditer(a, ['buffered', 'refs_ok'***REMOVED***, ['readonly'***REMOVED***,
                    casting='unsafe', op_dtypes=sdt***REMOVED***
    vals = next(i***REMOVED***
    assert_equal(vals['a'***REMOVED***, 0.5***REMOVED***
    assert_equal(vals['b'***REMOVED***, 0***REMOVED***
    assert_equal(vals['c'***REMOVED***, [[(0.5***REMOVED******REMOVED****3***REMOVED****2***REMOVED***
    assert_equal(vals['d'***REMOVED***, 0.5***REMOVED***


def test_0d_nested_iter(***REMOVED***:
    a = np.arange(12***REMOVED***.reshape(2, 3, 2***REMOVED***
    i, j = np.nested_iters(a, [[***REMOVED***, [1, 0, 2***REMOVED******REMOVED******REMOVED***
    vals = [***REMOVED***
    for x in i:
        vals.append([y for y in j***REMOVED******REMOVED***
    assert_equal(vals, [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11***REMOVED******REMOVED******REMOVED***

    i, j = np.nested_iters(a, [[1, 0, 2***REMOVED***, [***REMOVED******REMOVED******REMOVED***
    vals = [***REMOVED***
    for x in i:
        vals.append([y for y in j***REMOVED******REMOVED***
    assert_equal(vals, [[0***REMOVED***, [1***REMOVED***, [2***REMOVED***, [3***REMOVED***, [4***REMOVED***, [5***REMOVED***, [6***REMOVED***, [7***REMOVED***, [8***REMOVED***, [9***REMOVED***, [10***REMOVED***, [11***REMOVED******REMOVED******REMOVED***

    i, j, k = np.nested_iters(a, [[2, 0***REMOVED***, [***REMOVED***, [1***REMOVED******REMOVED******REMOVED***
    vals = [***REMOVED***
    for x in i:
        for y in j:
            vals.append([z for z in k***REMOVED******REMOVED***
    assert_equal(vals, [[0, 2, 4***REMOVED***, [1, 3, 5***REMOVED***, [6, 8, 10***REMOVED***, [7, 9, 11***REMOVED******REMOVED******REMOVED***


def test_iter_too_large(***REMOVED***:
    # The total size of the iterator must not exceed the maximum intp due
    # to broadcasting. Dividing by 1024 will keep it small enough to
    # give a legal array.
    size = np.iinfo(np.intp***REMOVED***.max // 1024
    arr = np.lib.stride_tricks.as_strided(np.zeros(1***REMOVED***, (size,***REMOVED***, (0,***REMOVED******REMOVED***
    assert_raises(ValueError, nditer, (arr, arr[:, None***REMOVED******REMOVED******REMOVED***
    # test the same for multiindex. That may get more interesting when
    # removing 0 dimensional axis is allowed (since an iterator can grow then***REMOVED***
    assert_raises(ValueError, nditer,
                  (arr, arr[:, None***REMOVED******REMOVED***, flags=['multi_index'***REMOVED******REMOVED***


def test_iter_too_large_with_multiindex(***REMOVED***:
    # When a multi index is being tracked, the error is delayed this
    # checks the delayed error messages and getting below that by
    # removing an axis.
    base_size = 2**10
    num = 1
    while base_size**num < np.iinfo(np.intp***REMOVED***.max:
        num += 1

    shape_template = [1, 1***REMOVED*** * num
    arrays = [***REMOVED***
    for i in range(num***REMOVED***:
        shape = shape_template[:***REMOVED***
        shape[i * 2***REMOVED*** = 2**10
        arrays.append(np.empty(shape***REMOVED******REMOVED***
    arrays = tuple(arrays***REMOVED***

    # arrays are now too large to be broadcast. The different modes test
    # different nditer functionality with or without GIL.
    for mode in range(6***REMOVED***:
        assert_raises(ValueError, test_nditer_too_large, arrays, -1, mode***REMOVED***
    # but if we do nothing with the nditer, it can be constructed:
    test_nditer_too_large(arrays, -1, 7***REMOVED***

    # When an axis is removed, things should work again (half the time***REMOVED***:
    for i in range(num***REMOVED***:
        for mode in range(6***REMOVED***:
            # an axis with size 1024 is removed:
            test_nditer_too_large(arrays, i*2, mode***REMOVED***
            # an axis with size 1 is removed:
            assert_raises(ValueError, test_nditer_too_large,
                          arrays, i*2 + 1, mode***REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
