/*
 * DON'T INCLUDE THIS DIRECTLY.
 */

#ifndef NPY_NDARRAYOBJECT_H
#define NPY_NDARRAYOBJECT_H
#ifdef __cplusplus
#define CONFUSE_EMACS {
#define CONFUSE_EMACS2 ***REMOVED***
extern "C" CONFUSE_EMACS
#undef CONFUSE_EMACS
#undef CONFUSE_EMACS2
/* ... otherwise a semi-smart identer (like emacs***REMOVED*** tries to indent
       everything when you're typing */
#endif

#include <Python.h>
#include "ndarraytypes.h"

/* Includes the "function" C-API -- these are all stored in a
   list of pointers --- one for each file
   The two lists are concatenated into one in multiarray.

   They are available as import_array(***REMOVED***
*/

#include "__multiarray_api.h"


/* C-API that requries previous API to be defined */

#define PyArray_DescrCheck(op***REMOVED*** (((PyObject****REMOVED***(op***REMOVED******REMOVED***->ob_type==&PyArrayDescr_Type***REMOVED***

#define PyArray_Check(op***REMOVED*** PyObject_TypeCheck(op, &PyArray_Type***REMOVED***
#define PyArray_CheckExact(op***REMOVED*** (((PyObject****REMOVED***(op***REMOVED******REMOVED***->ob_type == &PyArray_Type***REMOVED***

#define PyArray_HasArrayInterfaceType(op, type, context, out***REMOVED***                 \
        ((((out***REMOVED***=PyArray_FromStructInterface(op***REMOVED******REMOVED*** != Py_NotImplemented***REMOVED*** ||    \
         (((out***REMOVED***=PyArray_FromInterface(op***REMOVED******REMOVED*** != Py_NotImplemented***REMOVED*** ||          \
         (((out***REMOVED***=PyArray_FromArrayAttr(op, type, context***REMOVED******REMOVED*** !=                 \
          Py_NotImplemented***REMOVED******REMOVED***

#define PyArray_HasArrayInterface(op, out***REMOVED***                                    \
        PyArray_HasArrayInterfaceType(op, NULL, NULL, out***REMOVED***

#define PyArray_IsZeroDim(op***REMOVED*** (PyArray_Check(op***REMOVED*** && \
                               (PyArray_NDIM((PyArrayObject ****REMOVED***op***REMOVED*** == 0***REMOVED******REMOVED***

#define PyArray_IsScalar(obj, cls***REMOVED***                                            \
        (PyObject_TypeCheck(obj, &Py##cls##ArrType_Type***REMOVED******REMOVED***

#define PyArray_CheckScalar(m***REMOVED*** (PyArray_IsScalar(m, Generic***REMOVED*** ||               \
                                PyArray_IsZeroDim(m***REMOVED******REMOVED***
#if PY_MAJOR_VERSION >= 3
#define PyArray_IsPythonNumber(obj***REMOVED***                                           \
        (PyFloat_Check(obj***REMOVED*** || PyComplex_Check(obj***REMOVED*** ||                        \
         PyLong_Check(obj***REMOVED*** || PyBool_Check(obj***REMOVED******REMOVED***
#define PyArray_IsIntegerScalar(obj***REMOVED*** (PyLong_Check(obj***REMOVED***                       \
              || PyArray_IsScalar((obj***REMOVED***, Integer***REMOVED******REMOVED***
#define PyArray_IsPythonScalar(obj***REMOVED***                                           \
        (PyArray_IsPythonNumber(obj***REMOVED*** || PyBytes_Check(obj***REMOVED*** ||                 \
         PyUnicode_Check(obj***REMOVED******REMOVED***
#else
#define PyArray_IsPythonNumber(obj***REMOVED***                                           \
        (PyInt_Check(obj***REMOVED*** || PyFloat_Check(obj***REMOVED*** || PyComplex_Check(obj***REMOVED*** ||    \
         PyLong_Check(obj***REMOVED*** || PyBool_Check(obj***REMOVED******REMOVED***
#define PyArray_IsIntegerScalar(obj***REMOVED*** (PyInt_Check(obj***REMOVED***                        \
              || PyLong_Check(obj***REMOVED***                                            \
              || PyArray_IsScalar((obj***REMOVED***, Integer***REMOVED******REMOVED***
#define PyArray_IsPythonScalar(obj***REMOVED***                                           \
        (PyArray_IsPythonNumber(obj***REMOVED*** || PyString_Check(obj***REMOVED*** ||                \
         PyUnicode_Check(obj***REMOVED******REMOVED***
#endif

#define PyArray_IsAnyScalar(obj***REMOVED***                                              \
        (PyArray_IsScalar(obj, Generic***REMOVED*** || PyArray_IsPythonScalar(obj***REMOVED******REMOVED***

#define PyArray_CheckAnyScalar(obj***REMOVED*** (PyArray_IsPythonScalar(obj***REMOVED*** ||           \
                                     PyArray_CheckScalar(obj***REMOVED******REMOVED***


#define PyArray_GETCONTIGUOUS(m***REMOVED*** (PyArray_ISCONTIGUOUS(m***REMOVED*** ?                   \
                                  Py_INCREF(m***REMOVED***, (m***REMOVED*** :                         \
                                  (PyArrayObject ****REMOVED***(PyArray_Copy(m***REMOVED******REMOVED******REMOVED***

#define PyArray_SAMESHAPE(a1,a2***REMOVED*** ((PyArray_NDIM(a1***REMOVED*** == PyArray_NDIM(a2***REMOVED******REMOVED*** &&   \
                                  PyArray_CompareLists(PyArray_DIMS(a1***REMOVED***,      \
                                                       PyArray_DIMS(a2***REMOVED***,      \
                                                       PyArray_NDIM(a1***REMOVED******REMOVED******REMOVED***

#define PyArray_SIZE(m***REMOVED*** PyArray_MultiplyList(PyArray_DIMS(m***REMOVED***, PyArray_NDIM(m***REMOVED******REMOVED***
#define PyArray_NBYTES(m***REMOVED*** (PyArray_ITEMSIZE(m***REMOVED*** * PyArray_SIZE(m***REMOVED******REMOVED***
#define PyArray_FROM_O(m***REMOVED*** PyArray_FromAny(m, NULL, 0, 0, 0, NULL***REMOVED***

#define PyArray_FROM_OF(m,flags***REMOVED*** PyArray_CheckFromAny(m, NULL, 0, 0, flags,   \
                                                      NULL***REMOVED***

#define PyArray_FROM_OT(m,type***REMOVED*** PyArray_FromAny(m,                            \
                                PyArray_DescrFromType(type***REMOVED***, 0, 0, 0, NULL***REMOVED***

#define PyArray_FROM_OTF(m, type, flags***REMOVED*** \
        PyArray_FromAny(m, PyArray_DescrFromType(type***REMOVED***, 0, 0, \
                        (((flags***REMOVED*** & NPY_ARRAY_ENSURECOPY***REMOVED*** ? \
                         ((flags***REMOVED*** | NPY_ARRAY_DEFAULT***REMOVED*** : (flags***REMOVED******REMOVED***, NULL***REMOVED***

#define PyArray_FROMANY(m, type, min, max, flags***REMOVED*** \
        PyArray_FromAny(m, PyArray_DescrFromType(type***REMOVED***, min, max, \
                        (((flags***REMOVED*** & NPY_ARRAY_ENSURECOPY***REMOVED*** ? \
                         (flags***REMOVED*** | NPY_ARRAY_DEFAULT : (flags***REMOVED******REMOVED***, NULL***REMOVED***

#define PyArray_ZEROS(m, dims, type, is_f_order***REMOVED*** \
        PyArray_Zeros(m, dims, PyArray_DescrFromType(type***REMOVED***, is_f_order***REMOVED***

#define PyArray_EMPTY(m, dims, type, is_f_order***REMOVED*** \
        PyArray_Empty(m, dims, PyArray_DescrFromType(type***REMOVED***, is_f_order***REMOVED***

#define PyArray_FILLWBYTE(obj, val***REMOVED*** memset(PyArray_DATA(obj***REMOVED***, val, \
                                           PyArray_NBYTES(obj***REMOVED******REMOVED***

#define PyArray_REFCOUNT(obj***REMOVED*** (((PyObject ****REMOVED***(obj***REMOVED******REMOVED***->ob_refcnt***REMOVED***
#define NPY_REFCOUNT PyArray_REFCOUNT
#define NPY_MAX_ELSIZE (2 * NPY_SIZEOF_LONGDOUBLE***REMOVED***

#define PyArray_ContiguousFromAny(op, type, min_depth, max_depth***REMOVED*** \
        PyArray_FromAny(op, PyArray_DescrFromType(type***REMOVED***, min_depth, \
                              max_depth, NPY_ARRAY_DEFAULT, NULL***REMOVED***

#define PyArray_EquivArrTypes(a1, a2***REMOVED*** \
        PyArray_EquivTypes(PyArray_DESCR(a1***REMOVED***, PyArray_DESCR(a2***REMOVED******REMOVED***

#define PyArray_EquivByteorders(b1, b2***REMOVED*** \
        (((b1***REMOVED*** == (b2***REMOVED******REMOVED*** || (PyArray_ISNBO(b1***REMOVED*** == PyArray_ISNBO(b2***REMOVED******REMOVED******REMOVED***

#define PyArray_SimpleNew(nd, dims, typenum***REMOVED*** \
        PyArray_New(&PyArray_Type, nd, dims, typenum, NULL, NULL, 0, 0, NULL***REMOVED***

#define PyArray_SimpleNewFromData(nd, dims, typenum, data***REMOVED*** \
        PyArray_New(&PyArray_Type, nd, dims, typenum, NULL, \
                    data, 0, NPY_ARRAY_CARRAY, NULL***REMOVED***

#define PyArray_SimpleNewFromDescr(nd, dims, descr***REMOVED*** \
        PyArray_NewFromDescr(&PyArray_Type, descr, nd, dims, \
                             NULL, NULL, 0, NULL***REMOVED***

#define PyArray_ToScalar(data, arr***REMOVED*** \
        PyArray_Scalar(data, PyArray_DESCR(arr***REMOVED***, (PyObject ****REMOVED***arr***REMOVED***


/* These might be faster without the dereferencing of obj
   going on inside -- of course an optimizing compiler should
   inline the constants inside a for loop making it a moot point
*/

#define PyArray_GETPTR1(obj, i***REMOVED*** ((void ****REMOVED***(PyArray_BYTES(obj***REMOVED*** + \
                                         (i***REMOVED****PyArray_STRIDES(obj***REMOVED***[0***REMOVED******REMOVED******REMOVED***

#define PyArray_GETPTR2(obj, i, j***REMOVED*** ((void ****REMOVED***(PyArray_BYTES(obj***REMOVED*** + \
                                            (i***REMOVED****PyArray_STRIDES(obj***REMOVED***[0***REMOVED*** + \
                                            (j***REMOVED****PyArray_STRIDES(obj***REMOVED***[1***REMOVED******REMOVED******REMOVED***

#define PyArray_GETPTR3(obj, i, j, k***REMOVED*** ((void ****REMOVED***(PyArray_BYTES(obj***REMOVED*** + \
                                            (i***REMOVED****PyArray_STRIDES(obj***REMOVED***[0***REMOVED*** + \
                                            (j***REMOVED****PyArray_STRIDES(obj***REMOVED***[1***REMOVED*** + \
                                            (k***REMOVED****PyArray_STRIDES(obj***REMOVED***[2***REMOVED******REMOVED******REMOVED***

#define PyArray_GETPTR4(obj, i, j, k, l***REMOVED*** ((void ****REMOVED***(PyArray_BYTES(obj***REMOVED*** + \
                                            (i***REMOVED****PyArray_STRIDES(obj***REMOVED***[0***REMOVED*** + \
                                            (j***REMOVED****PyArray_STRIDES(obj***REMOVED***[1***REMOVED*** + \
                                            (k***REMOVED****PyArray_STRIDES(obj***REMOVED***[2***REMOVED*** + \
                                            (l***REMOVED****PyArray_STRIDES(obj***REMOVED***[3***REMOVED******REMOVED******REMOVED***

static NPY_INLINE void
PyArray_XDECREF_ERR(PyArrayObject *arr***REMOVED***
{
    if (arr != NULL***REMOVED*** {
        if (PyArray_FLAGS(arr***REMOVED*** & NPY_ARRAY_UPDATEIFCOPY***REMOVED*** {
            PyArrayObject *base = (PyArrayObject ****REMOVED***PyArray_BASE(arr***REMOVED***;
            PyArray_ENABLEFLAGS(base, NPY_ARRAY_WRITEABLE***REMOVED***;
            PyArray_CLEARFLAGS(arr, NPY_ARRAY_UPDATEIFCOPY***REMOVED***;
    ***REMOVED***
        Py_DECREF(arr***REMOVED***;
***REMOVED***
***REMOVED***

#define PyArray_DESCR_REPLACE(descr***REMOVED*** do { \
                PyArray_Descr *_new_; \
                _new_ = PyArray_DescrNew(descr***REMOVED***; \
                Py_XDECREF(descr***REMOVED***; \
                descr = _new_; \
    ***REMOVED*** while(0***REMOVED***

/* Copy should always return contiguous array */
#define PyArray_Copy(obj***REMOVED*** PyArray_NewCopy(obj, NPY_CORDER***REMOVED***

#define PyArray_FromObject(op, type, min_depth, max_depth***REMOVED*** \
        PyArray_FromAny(op, PyArray_DescrFromType(type***REMOVED***, min_depth, \
                              max_depth, NPY_ARRAY_BEHAVED | \
                                         NPY_ARRAY_ENSUREARRAY, NULL***REMOVED***

#define PyArray_ContiguousFromObject(op, type, min_depth, max_depth***REMOVED*** \
        PyArray_FromAny(op, PyArray_DescrFromType(type***REMOVED***, min_depth, \
                              max_depth, NPY_ARRAY_DEFAULT | \
                                         NPY_ARRAY_ENSUREARRAY, NULL***REMOVED***

#define PyArray_CopyFromObject(op, type, min_depth, max_depth***REMOVED*** \
        PyArray_FromAny(op, PyArray_DescrFromType(type***REMOVED***, min_depth, \
                        max_depth, NPY_ARRAY_ENSURECOPY | \
                                   NPY_ARRAY_DEFAULT | \
                                   NPY_ARRAY_ENSUREARRAY, NULL***REMOVED***

#define PyArray_Cast(mp, type_num***REMOVED***                                            \
        PyArray_CastToType(mp, PyArray_DescrFromType(type_num***REMOVED***, 0***REMOVED***

#define PyArray_Take(ap, items, axis***REMOVED***                                         \
        PyArray_TakeFrom(ap, items, axis, NULL, NPY_RAISE***REMOVED***

#define PyArray_Put(ap, items, values***REMOVED***                                        \
        PyArray_PutTo(ap, items, values, NPY_RAISE***REMOVED***

/* Compatibility with old Numeric stuff -- don't use in new code */

#define PyArray_FromDimsAndData(nd, d, type, data***REMOVED***                            \
        PyArray_FromDimsAndDataAndDescr(nd, d, PyArray_DescrFromType(type***REMOVED***,   \
                                        data***REMOVED***


/*
   Check to see if this key in the dictionary is the "title"
   entry of the tuple (i.e. a duplicate dictionary entry in the fields
   dict.
*/

#define NPY_TITLE_KEY(key, value***REMOVED*** ((PyTuple_GET_SIZE((value***REMOVED******REMOVED***==3***REMOVED*** && \
                                   (PyTuple_GET_ITEM((value***REMOVED***, 2***REMOVED*** == (key***REMOVED******REMOVED******REMOVED***


#define DEPRECATE(msg***REMOVED*** PyErr_WarnEx(PyExc_DeprecationWarning,msg,1***REMOVED***
#define DEPRECATE_FUTUREWARNING(msg***REMOVED*** PyErr_WarnEx(PyExc_FutureWarning,msg,1***REMOVED***


#ifdef __cplusplus
***REMOVED***
#endif


#endif /* NPY_NDARRAYOBJECT_H */
