from __future__ import division, print_function

***REMOVED***
import genapi

from genapi import \
        TypeApi, GlobalVarApi, FunctionApi, BoolValuesApi

import numpy_api

# use annotated api when running under cpychecker
h_template = r***REMOVED***
#if defined(_MULTIARRAYMODULE***REMOVED*** || defined(WITH_CPYCHECKER_STEALS_REFERENCE_TO_ARG_ATTRIBUTE***REMOVED***

typedef struct {
        PyObject_HEAD
        npy_bool obval;
***REMOVED*** PyBoolScalarObject;

extern NPY_NO_EXPORT PyTypeObject PyArrayMapIter_Type;
extern NPY_NO_EXPORT PyTypeObject PyArrayNeighborhoodIter_Type;
extern NPY_NO_EXPORT PyBoolScalarObject _PyArrayScalar_BoolValues[2***REMOVED***;

%s

#else

#if defined(PY_ARRAY_UNIQUE_SYMBOL***REMOVED***
#define PyArray_API PY_ARRAY_UNIQUE_SYMBOL
#endif

#if defined(NO_IMPORT***REMOVED*** || defined(NO_IMPORT_ARRAY***REMOVED***
extern void **PyArray_API;
#else
#if defined(PY_ARRAY_UNIQUE_SYMBOL***REMOVED***
void **PyArray_API;
#else
static void **PyArray_API=NULL;
#endif
#endif

%s

#if !defined(NO_IMPORT_ARRAY***REMOVED*** && !defined(NO_IMPORT***REMOVED***
static int
_import_array(void***REMOVED***
{
  int st;
  PyObject *numpy = PyImport_ImportModule("numpy.core.multiarray"***REMOVED***;
  PyObject *c_api = NULL;

  if (numpy == NULL***REMOVED*** {
      PyErr_SetString(PyExc_ImportError, "numpy.core.multiarray failed to import"***REMOVED***;
      return -1;
  ***REMOVED***
  c_api = PyObject_GetAttrString(numpy, "_ARRAY_API"***REMOVED***;
  Py_DECREF(numpy***REMOVED***;
  if (c_api == NULL***REMOVED*** {
      PyErr_SetString(PyExc_AttributeError, "_ARRAY_API not found"***REMOVED***;
      return -1;
  ***REMOVED***

#if PY_VERSION_HEX >= 0x03000000
  if (!PyCapsule_CheckExact(c_api***REMOVED******REMOVED*** {
      PyErr_SetString(PyExc_RuntimeError, "_ARRAY_API is not PyCapsule object"***REMOVED***;
      Py_DECREF(c_api***REMOVED***;
      return -1;
  ***REMOVED***
  PyArray_API = (void *****REMOVED***PyCapsule_GetPointer(c_api, NULL***REMOVED***;
#else
  if (!PyCObject_Check(c_api***REMOVED******REMOVED*** {
      PyErr_SetString(PyExc_RuntimeError, "_ARRAY_API is not PyCObject object"***REMOVED***;
      Py_DECREF(c_api***REMOVED***;
      return -1;
  ***REMOVED***
  PyArray_API = (void *****REMOVED***PyCObject_AsVoidPtr(c_api***REMOVED***;
#endif
  Py_DECREF(c_api***REMOVED***;
  if (PyArray_API == NULL***REMOVED*** {
      PyErr_SetString(PyExc_RuntimeError, "_ARRAY_API is NULL pointer"***REMOVED***;
      return -1;
  ***REMOVED***

  /* Perform runtime check of C API version */
  if (NPY_VERSION != PyArray_GetNDArrayCVersion(***REMOVED******REMOVED*** {
      PyErr_Format(PyExc_RuntimeError, "module compiled against "\
             "ABI version 0x%%x but this version of numpy is 0x%%x", \
             (int***REMOVED*** NPY_VERSION, (int***REMOVED*** PyArray_GetNDArrayCVersion(***REMOVED******REMOVED***;
      return -1;
  ***REMOVED***
  if (NPY_FEATURE_VERSION > PyArray_GetNDArrayCFeatureVersion(***REMOVED******REMOVED*** {
      PyErr_Format(PyExc_RuntimeError, "module compiled against "\
             "API version 0x%%x but this version of numpy is 0x%%x", \
             (int***REMOVED*** NPY_FEATURE_VERSION, (int***REMOVED*** PyArray_GetNDArrayCFeatureVersion(***REMOVED******REMOVED***;
      return -1;
  ***REMOVED***

  /*
   * Perform runtime check of endianness and check it matches the one set by
   * the headers (npy_endian.h***REMOVED*** as a safeguard
   */
  st = PyArray_GetEndianness(***REMOVED***;
  if (st == NPY_CPU_UNKNOWN_ENDIAN***REMOVED*** {
      PyErr_Format(PyExc_RuntimeError, "FATAL: module compiled as unknown endian"***REMOVED***;
      return -1;
  ***REMOVED***
#if NPY_BYTE_ORDER == NPY_BIG_ENDIAN
  if (st != NPY_CPU_BIG***REMOVED*** {
      PyErr_Format(PyExc_RuntimeError, "FATAL: module compiled as "\
             "big endian, but detected different endianness at runtime"***REMOVED***;
      return -1;
  ***REMOVED***
#elif NPY_BYTE_ORDER == NPY_LITTLE_ENDIAN
  if (st != NPY_CPU_LITTLE***REMOVED*** {
      PyErr_Format(PyExc_RuntimeError, "FATAL: module compiled as "\
             "little endian, but detected different endianness at runtime"***REMOVED***;
      return -1;
  ***REMOVED***
#endif

  return 0;
***REMOVED***

#if PY_VERSION_HEX >= 0x03000000
#define NUMPY_IMPORT_ARRAY_RETVAL NULL
#else
#define NUMPY_IMPORT_ARRAY_RETVAL
#endif

#define import_array(***REMOVED*** {if (_import_array(***REMOVED*** < 0***REMOVED*** {PyErr_Print(***REMOVED***; PyErr_SetString(PyExc_ImportError, "numpy.core.multiarray failed to import"***REMOVED***; return NUMPY_IMPORT_ARRAY_RETVAL; ***REMOVED*** ***REMOVED***

#define import_array1(ret***REMOVED*** {if (_import_array(***REMOVED*** < 0***REMOVED*** {PyErr_Print(***REMOVED***; PyErr_SetString(PyExc_ImportError, "numpy.core.multiarray failed to import"***REMOVED***; return ret; ***REMOVED*** ***REMOVED***

#define import_array2(msg, ret***REMOVED*** {if (_import_array(***REMOVED*** < 0***REMOVED*** {PyErr_Print(***REMOVED***; PyErr_SetString(PyExc_ImportError, msg***REMOVED***; return ret; ***REMOVED*** ***REMOVED***

#endif

#endif
***REMOVED***


c_template = r***REMOVED***
/* These pointers will be stored in the C-object for use in other
    extension modules
*/

void *PyArray_API[***REMOVED*** = {
%s
***REMOVED***;
***REMOVED***

c_api_header = ***REMOVED***
===========
Numpy C-API
===========
***REMOVED***

def generate_api(output_dir, force=False***REMOVED***:
    basename = 'multiarray_api'

    h_file = os.path.join(output_dir, '__%s.h' % basename***REMOVED***
    c_file = os.path.join(output_dir, '__%s.c' % basename***REMOVED***
    d_file = os.path.join(output_dir, '%s.txt' % basename***REMOVED***
    targets = (h_file, c_file, d_file***REMOVED***

    sources = numpy_api.multiarray_api

    if (not force and not genapi.should_rebuild(targets, [numpy_api.__file__, __file__***REMOVED******REMOVED******REMOVED***:
        return targets
    else:
        do_generate_api(targets, sources***REMOVED***

    return targets

def do_generate_api(targets, sources***REMOVED***:
    header_file = targets[0***REMOVED***
    c_file = targets[1***REMOVED***
    doc_file = targets[2***REMOVED***

    global_vars = sources[0***REMOVED***
    scalar_bool_values = sources[1***REMOVED***
    types_api = sources[2***REMOVED***
    multiarray_funcs = sources[3***REMOVED***

    multiarray_api = sources[:***REMOVED***

    module_list = [***REMOVED***
    extension_list = [***REMOVED***
    init_list = [***REMOVED***

    # Check multiarray api indexes
    multiarray_api_index = genapi.merge_api_dicts(multiarray_api***REMOVED***
    genapi.check_api_dict(multiarray_api_index***REMOVED***

    numpyapi_list = genapi.get_api_functions('NUMPY_API',
                                              multiarray_funcs***REMOVED***
    ordered_funcs_api = genapi.order_dict(multiarray_funcs***REMOVED***

    # Create dict name -> *Api instance
    api_name = 'PyArray_API'
    multiarray_api_dict = {***REMOVED***
    for f in numpyapi_list:
        name = f.name
        index = multiarray_funcs[name***REMOVED***[0***REMOVED***
        annotations = multiarray_funcs[name***REMOVED***[1:***REMOVED***
        multiarray_api_dict[f.name***REMOVED*** = FunctionApi(f.name, index, annotations,
                                                  f.return_type,
                                                  f.args, api_name***REMOVED***

    for name, val in global_vars.items(***REMOVED***:
        index, type = val
        multiarray_api_dict[name***REMOVED*** = GlobalVarApi(name, index, type, api_name***REMOVED***

    for name, val in scalar_bool_values.items(***REMOVED***:
        index = val[0***REMOVED***
        multiarray_api_dict[name***REMOVED*** = BoolValuesApi(name, index, api_name***REMOVED***

    for name, val in types_api.items(***REMOVED***:
        index = val[0***REMOVED***
        multiarray_api_dict[name***REMOVED*** = TypeApi(name, index, 'PyTypeObject', api_name***REMOVED***

    if len(multiarray_api_dict***REMOVED*** != len(multiarray_api_index***REMOVED***:
        raise AssertionError("Multiarray API size mismatch %d %d" %
                        (len(multiarray_api_dict***REMOVED***, len(multiarray_api_index***REMOVED******REMOVED******REMOVED***

    extension_list = [***REMOVED***
    for name, index in genapi.order_dict(multiarray_api_index***REMOVED***:
        api_item = multiarray_api_dict[name***REMOVED***
        extension_list.append(api_item.define_from_array_api_string(***REMOVED******REMOVED***
        init_list.append(api_item.array_api_define(***REMOVED******REMOVED***
        module_list.append(api_item.internal_define(***REMOVED******REMOVED***

    # Write to header
    fid = open(header_file, 'w'***REMOVED***
    s = h_template % ('\n'.join(module_list***REMOVED***, '\n'.join(extension_list***REMOVED******REMOVED***
    fid.write(s***REMOVED***
    fid.close(***REMOVED***

    # Write to c-code
    fid = open(c_file, 'w'***REMOVED***
    s = c_template % ',\n'.join(init_list***REMOVED***
    fid.write(s***REMOVED***
    fid.close(***REMOVED***

    # write to documentation
    fid = open(doc_file, 'w'***REMOVED***
    fid.write(c_api_header***REMOVED***
    for func in numpyapi_list:
        fid.write(func.to_ReST(***REMOVED******REMOVED***
        fid.write('\n\n'***REMOVED***
    fid.close(***REMOVED***

    return targets
