from __future__ import division, absolute_import, print_function

import numpy.distutils.fcompiler
from numpy.testing import TestCase, run_module_suite, assert_


intel_32bit_version_strings = [
    ("Intel(R***REMOVED*** Fortran Intel(R***REMOVED*** 32-bit Compiler Professional for applications"
     "running on Intel(R***REMOVED*** 32, Version 11.1", '11.1'***REMOVED***,
***REMOVED***

intel_64bit_version_strings = [
    ("Intel(R***REMOVED*** Fortran IA-64 Compiler Professional for applications"
     "running on IA-64, Version 11.0", '11.0'***REMOVED***,
    ("Intel(R***REMOVED*** Fortran Intel(R***REMOVED*** 64 Compiler Professional for applications"
     "running on Intel(R***REMOVED*** 64, Version 11.1", '11.1'***REMOVED***
***REMOVED***

class TestIntelFCompilerVersions(TestCase***REMOVED***:
    def test_32bit_version(self***REMOVED***:
        fc = numpy.distutils.fcompiler.new_fcompiler(compiler='intel'***REMOVED***
        for vs, version in intel_32bit_version_strings:
            v = fc.version_match(vs***REMOVED***
            assert_(v == version***REMOVED***


class TestIntelEM64TFCompilerVersions(TestCase***REMOVED***:
    def test_64bit_version(self***REMOVED***:
        fc = numpy.distutils.fcompiler.new_fcompiler(compiler='intelem'***REMOVED***
        for vs, version in intel_64bit_version_strings:
            v = fc.version_match(vs***REMOVED***
            assert_(v == version***REMOVED***


if __name__ == '__main__':
    run_module_suite(***REMOVED***
