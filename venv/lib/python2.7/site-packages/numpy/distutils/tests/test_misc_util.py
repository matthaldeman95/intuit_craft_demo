#!/usr/bin/env python
from __future__ import division, absolute_import, print_function

from os.path import join, sep, dirname

from numpy.distutils.misc_util import (
    appendpath, minrelpath, gpaths, get_shared_lib_extension, get_info
***REMOVED***
from numpy.testing import (
    TestCase, run_module_suite, assert_, assert_equal
***REMOVED***

ajoin = lambda *paths: join(*((sep,***REMOVED***+paths***REMOVED******REMOVED***

class TestAppendpath(TestCase***REMOVED***:

    def test_1(self***REMOVED***:
        assert_equal(appendpath('prefix', 'name'***REMOVED***, join('prefix', 'name'***REMOVED******REMOVED***
        assert_equal(appendpath('/prefix', 'name'***REMOVED***, ajoin('prefix', 'name'***REMOVED******REMOVED***
        assert_equal(appendpath('/prefix', '/name'***REMOVED***, ajoin('prefix', 'name'***REMOVED******REMOVED***
        assert_equal(appendpath('prefix', '/name'***REMOVED***, join('prefix', 'name'***REMOVED******REMOVED***

    def test_2(self***REMOVED***:
        assert_equal(appendpath('prefix/sub', 'name'***REMOVED***,
                     join('prefix', 'sub', 'name'***REMOVED******REMOVED***
        assert_equal(appendpath('prefix/sub', 'sup/name'***REMOVED***,
                     join('prefix', 'sub', 'sup', 'name'***REMOVED******REMOVED***
        assert_equal(appendpath('/prefix/sub', '/prefix/name'***REMOVED***,
                     ajoin('prefix', 'sub', 'name'***REMOVED******REMOVED***

    def test_3(self***REMOVED***:
        assert_equal(appendpath('/prefix/sub', '/prefix/sup/name'***REMOVED***,
                     ajoin('prefix', 'sub', 'sup', 'name'***REMOVED******REMOVED***
        assert_equal(appendpath('/prefix/sub/sub2', '/prefix/sup/sup2/name'***REMOVED***,
                     ajoin('prefix', 'sub', 'sub2', 'sup', 'sup2', 'name'***REMOVED******REMOVED***
        assert_equal(appendpath('/prefix/sub/sub2', '/prefix/sub/sup/name'***REMOVED***,
                     ajoin('prefix', 'sub', 'sub2', 'sup', 'name'***REMOVED******REMOVED***

class TestMinrelpath(TestCase***REMOVED***:

    def test_1(self***REMOVED***:
        n = lambda path: path.replace('/', sep***REMOVED***
        assert_equal(minrelpath(n('aa/bb'***REMOVED******REMOVED***, n('aa/bb'***REMOVED******REMOVED***
        assert_equal(minrelpath('..'***REMOVED***, '..'***REMOVED***
        assert_equal(minrelpath(n('aa/..'***REMOVED******REMOVED***, ''***REMOVED***
        assert_equal(minrelpath(n('aa/../bb'***REMOVED******REMOVED***, 'bb'***REMOVED***
        assert_equal(minrelpath(n('aa/bb/..'***REMOVED******REMOVED***, 'aa'***REMOVED***
        assert_equal(minrelpath(n('aa/bb/../..'***REMOVED******REMOVED***, ''***REMOVED***
        assert_equal(minrelpath(n('aa/bb/../cc/../dd'***REMOVED******REMOVED***, n('aa/dd'***REMOVED******REMOVED***
        assert_equal(minrelpath(n('.././..'***REMOVED******REMOVED***, n('../..'***REMOVED******REMOVED***
        assert_equal(minrelpath(n('aa/bb/.././../dd'***REMOVED******REMOVED***, n('dd'***REMOVED******REMOVED***

class TestGpaths(TestCase***REMOVED***:

    def test_gpaths(self***REMOVED***:
        local_path = minrelpath(join(dirname(__file__***REMOVED***, '..'***REMOVED******REMOVED***
        ls = gpaths('command/*.py', local_path***REMOVED***
        assert_(join(local_path, 'command', 'build_src.py'***REMOVED*** in ls, repr(ls***REMOVED******REMOVED***
        f = gpaths('system_info.py', local_path***REMOVED***
        assert_(join(local_path, 'system_info.py'***REMOVED*** == f[0***REMOVED***, repr(f***REMOVED******REMOVED***

class TestSharedExtension(TestCase***REMOVED***:

    def test_get_shared_lib_extension(self***REMOVED***:
        import sys
        ext = get_shared_lib_extension(is_python_ext=False***REMOVED***
        if sys.platform.startswith('linux'***REMOVED***:
            assert_equal(ext, '.so'***REMOVED***
        elif sys.platform.startswith('gnukfreebsd'***REMOVED***:
            assert_equal(ext, '.so'***REMOVED***
        elif sys.platform.startswith('darwin'***REMOVED***:
            assert_equal(ext, '.dylib'***REMOVED***
        elif sys.platform.startswith('win'***REMOVED***:
            assert_equal(ext, '.dll'***REMOVED***
        # just check for no crash
        assert_(get_shared_lib_extension(is_python_ext=True***REMOVED******REMOVED***


def test_installed_npymath_ini(***REMOVED***:
    # Regression test for gh-7707.  If npymath.ini wasn't installed, then this
    # will give an error.
    info = get_info('npymath'***REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
