from __future__ import division, absolute_import, print_function

***REMOVED***

from numpy.distutils.npy_pkg_config import read_config, parse_flags
from numpy.testing import TestCase, run_module_suite, temppath

simple = ***REMOVED***\
[meta***REMOVED***
Name = foo
Description = foo lib
Version = 0.1

[default***REMOVED***
cflags = -I/usr/include
libs = -L/usr/lib
***REMOVED***
simple_d = {'cflags': '-I/usr/include', 'libflags': '-L/usr/lib',
        'version': '0.1', 'name': 'foo'***REMOVED***

simple_variable = ***REMOVED***\
[meta***REMOVED***
Name = foo
Description = foo lib
Version = 0.1

[variables***REMOVED***
prefix = /foo/bar
libdir = ${prefix***REMOVED***/lib
includedir = ${prefix***REMOVED***/include

[default***REMOVED***
cflags = -I${includedir***REMOVED***
libs = -L${libdir***REMOVED***
***REMOVED***
simple_variable_d = {'cflags': '-I/foo/bar/include', 'libflags': '-L/foo/bar/lib',
        'version': '0.1', 'name': 'foo'***REMOVED***

class TestLibraryInfo(TestCase***REMOVED***:
    def test_simple(self***REMOVED***:
        with temppath('foo.ini'***REMOVED*** as path:
            with open(path,  'w'***REMOVED*** as f:
                f.write(simple***REMOVED***
            pkg = os.path.splitext(path***REMOVED***[0***REMOVED***
            out = read_config(pkg***REMOVED***

        self.assertTrue(out.cflags(***REMOVED*** == simple_d['cflags'***REMOVED******REMOVED***
        self.assertTrue(out.libs(***REMOVED*** == simple_d['libflags'***REMOVED******REMOVED***
        self.assertTrue(out.name == simple_d['name'***REMOVED******REMOVED***
        self.assertTrue(out.version == simple_d['version'***REMOVED******REMOVED***

    def test_simple_variable(self***REMOVED***:
        with temppath('foo.ini'***REMOVED*** as path:
            with open(path,  'w'***REMOVED*** as f:
                f.write(simple_variable***REMOVED***
            pkg = os.path.splitext(path***REMOVED***[0***REMOVED***
            out = read_config(pkg***REMOVED***

        self.assertTrue(out.cflags(***REMOVED*** == simple_variable_d['cflags'***REMOVED******REMOVED***
        self.assertTrue(out.libs(***REMOVED*** == simple_variable_d['libflags'***REMOVED******REMOVED***
        self.assertTrue(out.name == simple_variable_d['name'***REMOVED******REMOVED***
        self.assertTrue(out.version == simple_variable_d['version'***REMOVED******REMOVED***
        out.vars['prefix'***REMOVED*** = '/Users/david'
        self.assertTrue(out.cflags(***REMOVED*** == '-I/Users/david/include'***REMOVED***

class TestParseFlags(TestCase***REMOVED***:
    def test_simple_cflags(self***REMOVED***:
        d = parse_flags("-I/usr/include"***REMOVED***
        self.assertTrue(d['include_dirs'***REMOVED*** == ['/usr/include'***REMOVED******REMOVED***

        d = parse_flags("-I/usr/include -DFOO"***REMOVED***
        self.assertTrue(d['include_dirs'***REMOVED*** == ['/usr/include'***REMOVED******REMOVED***
        self.assertTrue(d['macros'***REMOVED*** == ['FOO'***REMOVED******REMOVED***

        d = parse_flags("-I /usr/include -DFOO"***REMOVED***
        self.assertTrue(d['include_dirs'***REMOVED*** == ['/usr/include'***REMOVED******REMOVED***
        self.assertTrue(d['macros'***REMOVED*** == ['FOO'***REMOVED******REMOVED***

    def test_simple_lflags(self***REMOVED***:
        d = parse_flags("-L/usr/lib -lfoo -L/usr/lib -lbar"***REMOVED***
        self.assertTrue(d['library_dirs'***REMOVED*** == ['/usr/lib', '/usr/lib'***REMOVED******REMOVED***
        self.assertTrue(d['libraries'***REMOVED*** == ['foo', 'bar'***REMOVED******REMOVED***

        d = parse_flags("-L /usr/lib -lfoo -L/usr/lib -lbar"***REMOVED***
        self.assertTrue(d['library_dirs'***REMOVED*** == ['/usr/lib', '/usr/lib'***REMOVED******REMOVED***
        self.assertTrue(d['libraries'***REMOVED*** == ['foo', 'bar'***REMOVED******REMOVED***


if __name__ == '__main__':
    run_module_suite(***REMOVED***
