from __future__ import division, absolute_import, print_function

***REMOVED***
import sys
from tempfile import TemporaryFile

from numpy.distutils import exec_command

# In python 3 stdout, stderr are text (unicode compliant***REMOVED*** devices, so to
# emulate them import StringIO from the io module.
if sys.version_info[0***REMOVED*** >= 3:
    from io import StringIO
else:
    from StringIO import StringIO

class redirect_stdout(object***REMOVED***:
    ***REMOVED***Context manager to redirect stdout for exec_command test.***REMOVED***
    def __init__(self, stdout=None***REMOVED***:
        self._stdout = stdout or sys.stdout

    def __enter__(self***REMOVED***:
        self.old_stdout = sys.stdout
        sys.stdout = self._stdout

    def __exit__(self, exc_type, exc_value, traceback***REMOVED***:
        self._stdout.flush(***REMOVED***
        sys.stdout = self.old_stdout
        # note: closing sys.stdout won't close it.
        self._stdout.close(***REMOVED***

class redirect_stderr(object***REMOVED***:
    ***REMOVED***Context manager to redirect stderr for exec_command test.***REMOVED***
    def __init__(self, stderr=None***REMOVED***:
        self._stderr = stderr or sys.stderr

    def __enter__(self***REMOVED***:
        self.old_stderr = sys.stderr
        sys.stderr = self._stderr

    def __exit__(self, exc_type, exc_value, traceback***REMOVED***:
        self._stderr.flush(***REMOVED***
        sys.stderr = self.old_stderr
        # note: closing sys.stderr won't close it.
        self._stderr.close(***REMOVED***

class emulate_nonposix(object***REMOVED***:
    ***REMOVED***Context manager to emulate os.name != 'posix' ***REMOVED***
    def __init__(self, osname='non-posix'***REMOVED***:
        self._new_name = osname

    def __enter__(self***REMOVED***:
        self._old_name = os.name
        os.name = self._new_name

    def __exit__(self, exc_type, exc_value, traceback***REMOVED***:
        os.name = self._old_name


def test_exec_command_stdout(***REMOVED***:
    # Regression test for gh-2999 and gh-2915.
    # There are several packages (nose, scipy.weave.inline, Sage inline
    # Fortran***REMOVED*** that replace stdout, in which case it doesn't have a fileno
    # method.  This is tested here, with a do-nothing command that fails if the
    # presence of fileno(***REMOVED*** is assumed in exec_command.

    # The code has a special case for posix systems, so if we are on posix test
    # both that the special case works and that the generic code works.

    # Test posix version:
    with redirect_stdout(StringIO(***REMOVED******REMOVED***:
        with redirect_stderr(TemporaryFile(***REMOVED******REMOVED***:
            exec_command.exec_command("cd '.'"***REMOVED***

    if os.name == 'posix':
        # Test general (non-posix***REMOVED*** version:
        with emulate_nonposix(***REMOVED***:
            with redirect_stdout(StringIO(***REMOVED******REMOVED***:
                with redirect_stderr(TemporaryFile(***REMOVED******REMOVED***:
                    exec_command.exec_command("cd '.'"***REMOVED***

def test_exec_command_stderr(***REMOVED***:
    # Test posix version:
    with redirect_stdout(TemporaryFile(mode='w+'***REMOVED******REMOVED***:
        with redirect_stderr(StringIO(***REMOVED******REMOVED***:
            exec_command.exec_command("cd '.'"***REMOVED***

    if os.name == 'posix':
        # Test general (non-posix***REMOVED*** version:
        with emulate_nonposix(***REMOVED***:
            with redirect_stdout(TemporaryFile(***REMOVED******REMOVED***:
                with redirect_stderr(StringIO(***REMOVED******REMOVED***:
                    exec_command.exec_command("cd '.'"***REMOVED***
