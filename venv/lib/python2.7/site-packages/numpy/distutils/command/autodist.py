***REMOVED***This module implements additional tests ala autoconf which can be useful.

***REMOVED***
from __future__ import division, absolute_import, print_function


# We put them here since they could be easily reused outside numpy.distutils

def check_inline(cmd***REMOVED***:
    ***REMOVED***Return the inline identifier (may be empty***REMOVED***.***REMOVED***
    cmd._check_compiler(***REMOVED***
    body = ***REMOVED***
#ifndef __cplusplus
static %(inline***REMOVED***s int static_func (void***REMOVED***
{
    return 0;
***REMOVED***
%(inline***REMOVED***s int nostatic_func (void***REMOVED***
{
    return 0;
***REMOVED***
#endif***REMOVED***

    for kw in ['inline', '__inline__', '__inline'***REMOVED***:
        st = cmd.try_compile(body % {'inline': kw***REMOVED***, None, None***REMOVED***
        if st:
            return kw

    return ''

def check_restrict(cmd***REMOVED***:
    ***REMOVED***Return the restrict identifier (may be empty***REMOVED***.***REMOVED***
    cmd._check_compiler(***REMOVED***
    body = ***REMOVED***
static int static_func (char * %(restrict***REMOVED***s a***REMOVED***
{
    return 0;
***REMOVED***
***REMOVED***

    for kw in ['restrict', '__restrict__', '__restrict'***REMOVED***:
        st = cmd.try_compile(body % {'restrict': kw***REMOVED***, None, None***REMOVED***
        if st:
            return kw

    return ''

def check_compiler_gcc4(cmd***REMOVED***:
    ***REMOVED***Return True if the C compiler is GCC 4.x.***REMOVED***
    cmd._check_compiler(***REMOVED***
    body = ***REMOVED***
int
main(***REMOVED***
{
#if (! defined __GNUC__***REMOVED*** || (__GNUC__ < 4***REMOVED***
#error gcc >= 4 required
#endif
    return 0;
***REMOVED***
***REMOVED***
    return cmd.try_compile(body, None, None***REMOVED***


def check_gcc_function_attribute(cmd, attribute, name***REMOVED***:
    ***REMOVED***Return True if the given function attribute is supported.***REMOVED***
    cmd._check_compiler(***REMOVED***
    body = ***REMOVED***
#pragma GCC diagnostic error "-Wattributes"
#pragma clang diagnostic error "-Wattributes"

int %s %s(void****REMOVED***;

int
main(***REMOVED***
{
    return 0;
***REMOVED***
***REMOVED*** % (attribute, name***REMOVED***
    return cmd.try_compile(body, None, None***REMOVED*** != 0

def check_gcc_variable_attribute(cmd, attribute***REMOVED***:
    ***REMOVED***Return True if the given variable attribute is supported.***REMOVED***
    cmd._check_compiler(***REMOVED***
    body = ***REMOVED***
#pragma GCC diagnostic error "-Wattributes"
#pragma clang diagnostic error "-Wattributes"

int %s foo;

int
main(***REMOVED***
{
    return 0;
***REMOVED***
***REMOVED*** % (attribute, ***REMOVED***
    return cmd.try_compile(body, None, None***REMOVED*** != 0
