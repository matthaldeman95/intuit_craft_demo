from __future__ import division, absolute_import, print_function

from distutils.command.build_py import build_py as old_build_py
from numpy.distutils.misc_util import is_string

class build_py(old_build_py***REMOVED***:

    def run(self***REMOVED***:
        build_src = self.get_finalized_command('build_src'***REMOVED***
        if build_src.py_modules_dict and self.packages is None:
            self.packages = list(build_src.py_modules_dict.keys (***REMOVED******REMOVED***
        old_build_py.run(self***REMOVED***

    def find_package_modules(self, package, package_dir***REMOVED***:
        modules = old_build_py.find_package_modules(self, package, package_dir***REMOVED***

        # Find build_src generated *.py files.
        build_src = self.get_finalized_command('build_src'***REMOVED***
        modules += build_src.py_modules_dict.get(package, [***REMOVED******REMOVED***

        return modules

    def find_modules(self***REMOVED***:
        old_py_modules = self.py_modules[:***REMOVED***
        new_py_modules = [_m for _m in self.py_modules if is_string(_m***REMOVED******REMOVED***
        self.py_modules[:***REMOVED*** = new_py_modules
        modules = old_build_py.find_modules(self***REMOVED***
        self.py_modules[:***REMOVED*** = old_py_modules

        return modules

    # XXX: Fix find_source_files for item in py_modules such that item is 3-tuple
    # and item[2***REMOVED*** is source file.
