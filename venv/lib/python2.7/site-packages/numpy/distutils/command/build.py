from __future__ import division, absolute_import, print_function

***REMOVED***
import sys
from distutils.command.build import build as old_build
from distutils.util import get_platform
from numpy.distutils.command.config_compiler import show_fortran_compilers

class build(old_build***REMOVED***:

    sub_commands = [('config_cc',     lambda *args: True***REMOVED***,
                    ('config_fc',     lambda *args: True***REMOVED***,
                    ('build_src',     old_build.has_ext_modules***REMOVED***,
                    ***REMOVED*** + old_build.sub_commands

    user_options = old_build.user_options + [
        ('fcompiler=', None,
         "specify the Fortran compiler type"***REMOVED***,
        ('parallel=', 'j',
         "number of parallel jobs"***REMOVED***,
        ***REMOVED***

    help_options = old_build.help_options + [
        ('help-fcompiler', None, "list available Fortran compilers",
         show_fortran_compilers***REMOVED***,
        ***REMOVED***

    def initialize_options(self***REMOVED***:
        old_build.initialize_options(self***REMOVED***
        self.fcompiler = None
        self.parallel = None

    def finalize_options(self***REMOVED***:
        if self.parallel:
            ***REMOVED***
                self.parallel = int(self.parallel***REMOVED***
            except ValueError:
                raise ValueError("--parallel/-j argument must be an integer"***REMOVED***
        build_scripts = self.build_scripts
        old_build.finalize_options(self***REMOVED***
        plat_specifier = ".%s-%s" % (get_platform(***REMOVED***, sys.version[0:3***REMOVED******REMOVED***
        if build_scripts is None:
            self.build_scripts = os.path.join(self.build_base,
                                              'scripts' + plat_specifier***REMOVED***

    def run(self***REMOVED***:
        old_build.run(self***REMOVED***
