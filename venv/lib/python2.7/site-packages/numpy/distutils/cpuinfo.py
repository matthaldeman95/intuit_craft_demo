#!/usr/bin/env python
***REMOVED***
cpuinfo

Copyright 2002 Pearu Peterson all rights reserved,
Pearu Peterson <pearu@cens.ioc.ee>
Permission to use, modify, and distribute this software is given under the
terms of the NumPy (BSD style***REMOVED*** license.  See LICENSE.txt that came with
this distribution for specifics.

NO WARRANTY IS EXPRESSED OR IMPLIED.  USE AT YOUR OWN RISK.
Pearu Peterson

***REMOVED***
from __future__ import division, absolute_import, print_function

__all__ = ['cpu'***REMOVED***

import sys, re, types
***REMOVED***

if sys.version_info[0***REMOVED*** >= 3:
    from subprocess import getstatusoutput
else:
    from commands import getstatusoutput

import warnings
import platform

from numpy.distutils.compat import get_exception

def getoutput(cmd, successful_status=(0,***REMOVED***, stacklevel=1***REMOVED***:
    ***REMOVED***
        status, output = getstatusoutput(cmd***REMOVED***
    except EnvironmentError:
        e = get_exception(***REMOVED***
        warnings.warn(str(e***REMOVED***, UserWarning, stacklevel=stacklevel***REMOVED***
        return False, output
    if os.WIFEXITED(status***REMOVED*** and os.WEXITSTATUS(status***REMOVED*** in successful_status:
        return True, output
    return False, output

def command_info(successful_status=(0,***REMOVED***, stacklevel=1, **kw***REMOVED***:
    info = {***REMOVED***
    for key in kw:
        ok, output = getoutput(kw[key***REMOVED***, successful_status=successful_status,
                               stacklevel=stacklevel+1***REMOVED***
        if ok:
            info[key***REMOVED*** = output.strip(***REMOVED***
    return info

def command_by_line(cmd, successful_status=(0,***REMOVED***, stacklevel=1***REMOVED***:
    ok, output = getoutput(cmd, successful_status=successful_status,
                           stacklevel=stacklevel+1***REMOVED***
    if not ok:
        return
    for line in output.splitlines(***REMOVED***:
        yield line.strip(***REMOVED***

def key_value_from_command(cmd, sep, successful_status=(0,***REMOVED***,
                           stacklevel=1***REMOVED***:
    d = {***REMOVED***
    for line in command_by_line(cmd, successful_status=successful_status,
                                stacklevel=stacklevel+1***REMOVED***:
        l = [s.strip(***REMOVED*** for s in line.split(sep, 1***REMOVED******REMOVED***
        if len(l***REMOVED*** == 2:
            d[l[0***REMOVED******REMOVED*** = l[1***REMOVED***
    return d

class CPUInfoBase(object***REMOVED***:
    ***REMOVED***Holds CPU information and provides methods for requiring
    the availability of various CPU features.
    ***REMOVED***

    def _try_call(self, func***REMOVED***:
        ***REMOVED***
            return func(***REMOVED***
        ***REMOVED***
            pass

    def __getattr__(self, name***REMOVED***:
        if not name.startswith('_'***REMOVED***:
            if hasattr(self, '_'+name***REMOVED***:
                attr = getattr(self, '_'+name***REMOVED***
                if isinstance(attr, types.MethodType***REMOVED***:
                    return lambda func=self._try_call,attr=attr : func(attr***REMOVED***
            else:
                return lambda : None
        raise AttributeError(name***REMOVED***

    def _getNCPUs(self***REMOVED***:
        return 1

    def __get_nbits(self***REMOVED***:
        abits = platform.architecture(***REMOVED***[0***REMOVED***
        nbits = re.compile('(\d+***REMOVED***bit'***REMOVED***.search(abits***REMOVED***.group(1***REMOVED***
        return nbits

    def _is_32bit(self***REMOVED***:
        return self.__get_nbits(***REMOVED*** == '32'

    def _is_64bit(self***REMOVED***:
        return self.__get_nbits(***REMOVED*** == '64'

class LinuxCPUInfo(CPUInfoBase***REMOVED***:

    info = None

    def __init__(self***REMOVED***:
        if self.info is not None:
            return
        info = [ {***REMOVED*** ***REMOVED***
        ok, output = getoutput('uname -m'***REMOVED***
        if ok:
            info[0***REMOVED***['uname_m'***REMOVED*** = output.strip(***REMOVED***
        ***REMOVED***
            fo = open('/proc/cpuinfo'***REMOVED***
        except EnvironmentError:
            e = get_exception(***REMOVED***
            warnings.warn(str(e***REMOVED***, UserWarning***REMOVED***
        else:
            for line in fo:
                name_value = [s.strip(***REMOVED*** for s in line.split(':', 1***REMOVED******REMOVED***
                if len(name_value***REMOVED*** != 2:
                    continue
                name, value = name_value
                if not info or name in info[-1***REMOVED***: # next processor
                    info.append({***REMOVED******REMOVED***
                info[-1***REMOVED***[name***REMOVED*** = value
            fo.close(***REMOVED***
        self.__class__.info = info

    def _not_impl(self***REMOVED***: pass

    # Athlon

    def _is_AMD(self***REMOVED***:
        return self.info[0***REMOVED***['vendor_id'***REMOVED***=='AuthenticAMD'

    def _is_AthlonK6_2(self***REMOVED***:
        return self._is_AMD(***REMOVED*** and self.info[0***REMOVED***['model'***REMOVED*** == '2'

    def _is_AthlonK6_3(self***REMOVED***:
        return self._is_AMD(***REMOVED*** and self.info[0***REMOVED***['model'***REMOVED*** == '3'

    def _is_AthlonK6(self***REMOVED***:
        return re.match(r'.*?AMD-K6', self.info[0***REMOVED***['model name'***REMOVED******REMOVED*** is not None

    def _is_AthlonK7(self***REMOVED***:
        return re.match(r'.*?AMD-K7', self.info[0***REMOVED***['model name'***REMOVED******REMOVED*** is not None

    def _is_AthlonMP(self***REMOVED***:
        return re.match(r'.*?Athlon\(tm\***REMOVED*** MP\b',
                        self.info[0***REMOVED***['model name'***REMOVED******REMOVED*** is not None

    def _is_AMD64(self***REMOVED***:
        return self.is_AMD(***REMOVED*** and self.info[0***REMOVED***['family'***REMOVED*** == '15'

    def _is_Athlon64(self***REMOVED***:
        return re.match(r'.*?Athlon\(tm\***REMOVED*** 64\b',
                        self.info[0***REMOVED***['model name'***REMOVED******REMOVED*** is not None

    def _is_AthlonHX(self***REMOVED***:
        return re.match(r'.*?Athlon HX\b',
                        self.info[0***REMOVED***['model name'***REMOVED******REMOVED*** is not None

    def _is_Opteron(self***REMOVED***:
        return re.match(r'.*?Opteron\b',
                        self.info[0***REMOVED***['model name'***REMOVED******REMOVED*** is not None

    def _is_Hammer(self***REMOVED***:
        return re.match(r'.*?Hammer\b',
                        self.info[0***REMOVED***['model name'***REMOVED******REMOVED*** is not None

    # Alpha

    def _is_Alpha(self***REMOVED***:
        return self.info[0***REMOVED***['cpu'***REMOVED***=='Alpha'

    def _is_EV4(self***REMOVED***:
        return self.is_Alpha(***REMOVED*** and self.info[0***REMOVED***['cpu model'***REMOVED*** == 'EV4'

    def _is_EV5(self***REMOVED***:
        return self.is_Alpha(***REMOVED*** and self.info[0***REMOVED***['cpu model'***REMOVED*** == 'EV5'

    def _is_EV56(self***REMOVED***:
        return self.is_Alpha(***REMOVED*** and self.info[0***REMOVED***['cpu model'***REMOVED*** == 'EV56'

    def _is_PCA56(self***REMOVED***:
        return self.is_Alpha(***REMOVED*** and self.info[0***REMOVED***['cpu model'***REMOVED*** == 'PCA56'

    # Intel

    #XXX
    _is_i386 = _not_impl

    def _is_Intel(self***REMOVED***:
        return self.info[0***REMOVED***['vendor_id'***REMOVED***=='GenuineIntel'

    def _is_i486(self***REMOVED***:
        return self.info[0***REMOVED***['cpu'***REMOVED***=='i486'

    def _is_i586(self***REMOVED***:
        return self.is_Intel(***REMOVED*** and self.info[0***REMOVED***['cpu family'***REMOVED*** == '5'

    def _is_i686(self***REMOVED***:
        return self.is_Intel(***REMOVED*** and self.info[0***REMOVED***['cpu family'***REMOVED*** == '6'

    def _is_Celeron(self***REMOVED***:
        return re.match(r'.*?Celeron',
                        self.info[0***REMOVED***['model name'***REMOVED******REMOVED*** is not None

    def _is_Pentium(self***REMOVED***:
        return re.match(r'.*?Pentium',
                        self.info[0***REMOVED***['model name'***REMOVED******REMOVED*** is not None

    def _is_PentiumII(self***REMOVED***:
        return re.match(r'.*?Pentium.*?II\b',
                        self.info[0***REMOVED***['model name'***REMOVED******REMOVED*** is not None

    def _is_PentiumPro(self***REMOVED***:
        return re.match(r'.*?PentiumPro\b',
                        self.info[0***REMOVED***['model name'***REMOVED******REMOVED*** is not None

    def _is_PentiumMMX(self***REMOVED***:
        return re.match(r'.*?Pentium.*?MMX\b',
                        self.info[0***REMOVED***['model name'***REMOVED******REMOVED*** is not None

    def _is_PentiumIII(self***REMOVED***:
        return re.match(r'.*?Pentium.*?III\b',
                        self.info[0***REMOVED***['model name'***REMOVED******REMOVED*** is not None

    def _is_PentiumIV(self***REMOVED***:
        return re.match(r'.*?Pentium.*?(IV|4***REMOVED***\b',
                        self.info[0***REMOVED***['model name'***REMOVED******REMOVED*** is not None

    def _is_PentiumM(self***REMOVED***:
        return re.match(r'.*?Pentium.*?M\b',
                        self.info[0***REMOVED***['model name'***REMOVED******REMOVED*** is not None

    def _is_Prescott(self***REMOVED***:
        return self.is_PentiumIV(***REMOVED*** and self.has_sse3(***REMOVED***

    def _is_Nocona(self***REMOVED***:
        return self.is_Intel(***REMOVED*** \
               and (self.info[0***REMOVED***['cpu family'***REMOVED*** == '6' \
                    or self.info[0***REMOVED***['cpu family'***REMOVED*** == '15' ***REMOVED*** \
               and (self.has_sse3(***REMOVED*** and not self.has_ssse3(***REMOVED******REMOVED***\
               and re.match(r'.*?\blm\b', self.info[0***REMOVED***['flags'***REMOVED******REMOVED*** is not None

    def _is_Core2(self***REMOVED***:
        return self.is_64bit(***REMOVED*** and self.is_Intel(***REMOVED*** and \
               re.match(r'.*?Core\(TM\***REMOVED***2\b', \
                        self.info[0***REMOVED***['model name'***REMOVED******REMOVED*** is not None

    def _is_Itanium(self***REMOVED***:
        return re.match(r'.*?Itanium\b',
                        self.info[0***REMOVED***['family'***REMOVED******REMOVED*** is not None

    def _is_XEON(self***REMOVED***:
        return re.match(r'.*?XEON\b',
                        self.info[0***REMOVED***['model name'***REMOVED***, re.IGNORECASE***REMOVED*** is not None

    _is_Xeon = _is_XEON

    # Varia

    def _is_singleCPU(self***REMOVED***:
        return len(self.info***REMOVED*** == 1

    def _getNCPUs(self***REMOVED***:
        return len(self.info***REMOVED***

    def _has_fdiv_bug(self***REMOVED***:
        return self.info[0***REMOVED***['fdiv_bug'***REMOVED***=='yes'

    def _has_f00f_bug(self***REMOVED***:
        return self.info[0***REMOVED***['f00f_bug'***REMOVED***=='yes'

    def _has_mmx(self***REMOVED***:
        return re.match(r'.*?\bmmx\b', self.info[0***REMOVED***['flags'***REMOVED******REMOVED*** is not None

    def _has_sse(self***REMOVED***:
        return re.match(r'.*?\bsse\b', self.info[0***REMOVED***['flags'***REMOVED******REMOVED*** is not None

    def _has_sse2(self***REMOVED***:
        return re.match(r'.*?\bsse2\b', self.info[0***REMOVED***['flags'***REMOVED******REMOVED*** is not None

    def _has_sse3(self***REMOVED***:
        return re.match(r'.*?\bpni\b', self.info[0***REMOVED***['flags'***REMOVED******REMOVED*** is not None

    def _has_ssse3(self***REMOVED***:
        return re.match(r'.*?\bssse3\b', self.info[0***REMOVED***['flags'***REMOVED******REMOVED*** is not None

    def _has_3dnow(self***REMOVED***:
        return re.match(r'.*?\b3dnow\b', self.info[0***REMOVED***['flags'***REMOVED******REMOVED*** is not None

    def _has_3dnowext(self***REMOVED***:
        return re.match(r'.*?\b3dnowext\b', self.info[0***REMOVED***['flags'***REMOVED******REMOVED*** is not None

class IRIXCPUInfo(CPUInfoBase***REMOVED***:
    info = None

    def __init__(self***REMOVED***:
        if self.info is not None:
            return
        info = key_value_from_command('sysconf', sep=' ',
                                      successful_status=(0, 1***REMOVED******REMOVED***
        self.__class__.info = info

    def _not_impl(self***REMOVED***: pass

    def _is_singleCPU(self***REMOVED***:
        return self.info.get('NUM_PROCESSORS'***REMOVED*** == '1'

    def _getNCPUs(self***REMOVED***:
        return int(self.info.get('NUM_PROCESSORS', 1***REMOVED******REMOVED***

    def __cputype(self, n***REMOVED***:
        return self.info.get('PROCESSORS'***REMOVED***.split(***REMOVED***[0***REMOVED***.lower(***REMOVED*** == 'r%s' % (n***REMOVED***
    def _is_r2000(self***REMOVED***: return self.__cputype(2000***REMOVED***
    def _is_r3000(self***REMOVED***: return self.__cputype(3000***REMOVED***
    def _is_r3900(self***REMOVED***: return self.__cputype(3900***REMOVED***
    def _is_r4000(self***REMOVED***: return self.__cputype(4000***REMOVED***
    def _is_r4100(self***REMOVED***: return self.__cputype(4100***REMOVED***
    def _is_r4300(self***REMOVED***: return self.__cputype(4300***REMOVED***
    def _is_r4400(self***REMOVED***: return self.__cputype(4400***REMOVED***
    def _is_r4600(self***REMOVED***: return self.__cputype(4600***REMOVED***
    def _is_r4650(self***REMOVED***: return self.__cputype(4650***REMOVED***
    def _is_r5000(self***REMOVED***: return self.__cputype(5000***REMOVED***
    def _is_r6000(self***REMOVED***: return self.__cputype(6000***REMOVED***
    def _is_r8000(self***REMOVED***: return self.__cputype(8000***REMOVED***
    def _is_r10000(self***REMOVED***: return self.__cputype(10000***REMOVED***
    def _is_r12000(self***REMOVED***: return self.__cputype(12000***REMOVED***
    def _is_rorion(self***REMOVED***: return self.__cputype('orion'***REMOVED***

    def get_ip(self***REMOVED***:
        ***REMOVED*** return self.info.get('MACHINE'***REMOVED***
        ***REMOVED*** pass
    def __machine(self, n***REMOVED***:
        return self.info.get('MACHINE'***REMOVED***.lower(***REMOVED*** == 'ip%s' % (n***REMOVED***
    def _is_IP19(self***REMOVED***: return self.__machine(19***REMOVED***
    def _is_IP20(self***REMOVED***: return self.__machine(20***REMOVED***
    def _is_IP21(self***REMOVED***: return self.__machine(21***REMOVED***
    def _is_IP22(self***REMOVED***: return self.__machine(22***REMOVED***
    def _is_IP22_4k(self***REMOVED***: return self.__machine(22***REMOVED*** and self._is_r4000(***REMOVED***
    def _is_IP22_5k(self***REMOVED***: return self.__machine(22***REMOVED***  and self._is_r5000(***REMOVED***
    def _is_IP24(self***REMOVED***: return self.__machine(24***REMOVED***
    def _is_IP25(self***REMOVED***: return self.__machine(25***REMOVED***
    def _is_IP26(self***REMOVED***: return self.__machine(26***REMOVED***
    def _is_IP27(self***REMOVED***: return self.__machine(27***REMOVED***
    def _is_IP28(self***REMOVED***: return self.__machine(28***REMOVED***
    def _is_IP30(self***REMOVED***: return self.__machine(30***REMOVED***
    def _is_IP32(self***REMOVED***: return self.__machine(32***REMOVED***
    def _is_IP32_5k(self***REMOVED***: return self.__machine(32***REMOVED*** and self._is_r5000(***REMOVED***
    def _is_IP32_10k(self***REMOVED***: return self.__machine(32***REMOVED*** and self._is_r10000(***REMOVED***


class DarwinCPUInfo(CPUInfoBase***REMOVED***:
    info = None

    def __init__(self***REMOVED***:
        if self.info is not None:
            return
        info = command_info(arch='arch',
                            machine='machine'***REMOVED***
        info['sysctl_hw'***REMOVED*** = key_value_from_command('sysctl hw', sep='='***REMOVED***
        self.__class__.info = info

    def _not_impl(self***REMOVED***: pass

    def _getNCPUs(self***REMOVED***:
        return int(self.info['sysctl_hw'***REMOVED***.get('hw.ncpu', 1***REMOVED******REMOVED***

    def _is_Power_Macintosh(self***REMOVED***:
        return self.info['sysctl_hw'***REMOVED***['hw.machine'***REMOVED***=='Power Macintosh'

    def _is_i386(self***REMOVED***:
        return self.info['arch'***REMOVED***=='i386'
    def _is_ppc(self***REMOVED***:
        return self.info['arch'***REMOVED***=='ppc'

    def __machine(self, n***REMOVED***:
        return self.info['machine'***REMOVED*** == 'ppc%s'%n
    def _is_ppc601(self***REMOVED***: return self.__machine(601***REMOVED***
    def _is_ppc602(self***REMOVED***: return self.__machine(602***REMOVED***
    def _is_ppc603(self***REMOVED***: return self.__machine(603***REMOVED***
    def _is_ppc603e(self***REMOVED***: return self.__machine('603e'***REMOVED***
    def _is_ppc604(self***REMOVED***: return self.__machine(604***REMOVED***
    def _is_ppc604e(self***REMOVED***: return self.__machine('604e'***REMOVED***
    def _is_ppc620(self***REMOVED***: return self.__machine(620***REMOVED***
    def _is_ppc630(self***REMOVED***: return self.__machine(630***REMOVED***
    def _is_ppc740(self***REMOVED***: return self.__machine(740***REMOVED***
    def _is_ppc7400(self***REMOVED***: return self.__machine(7400***REMOVED***
    def _is_ppc7450(self***REMOVED***: return self.__machine(7450***REMOVED***
    def _is_ppc750(self***REMOVED***: return self.__machine(750***REMOVED***
    def _is_ppc403(self***REMOVED***: return self.__machine(403***REMOVED***
    def _is_ppc505(self***REMOVED***: return self.__machine(505***REMOVED***
    def _is_ppc801(self***REMOVED***: return self.__machine(801***REMOVED***
    def _is_ppc821(self***REMOVED***: return self.__machine(821***REMOVED***
    def _is_ppc823(self***REMOVED***: return self.__machine(823***REMOVED***
    def _is_ppc860(self***REMOVED***: return self.__machine(860***REMOVED***


class SunOSCPUInfo(CPUInfoBase***REMOVED***:

    info = None

    def __init__(self***REMOVED***:
        if self.info is not None:
            return
        info = command_info(arch='arch',
                            mach='mach',
                            uname_i='uname_i',
                            isainfo_b='isainfo -b',
                            isainfo_n='isainfo -n',
                            ***REMOVED***
        info['uname_X'***REMOVED*** = key_value_from_command('uname -X', sep='='***REMOVED***
        for line in command_by_line('psrinfo -v 0'***REMOVED***:
            m = re.match(r'\s*The (?P<p>[\w\d***REMOVED***+***REMOVED*** processor operates at', line***REMOVED***
            if m:
                info['processor'***REMOVED*** = m.group('p'***REMOVED***
                break
        self.__class__.info = info

    def _not_impl(self***REMOVED***: pass

    def _is_i386(self***REMOVED***:
        return self.info['isainfo_n'***REMOVED***=='i386'
    def _is_sparc(self***REMOVED***:
        return self.info['isainfo_n'***REMOVED***=='sparc'
    def _is_sparcv9(self***REMOVED***:
        return self.info['isainfo_n'***REMOVED***=='sparcv9'

    def _getNCPUs(self***REMOVED***:
        return int(self.info['uname_X'***REMOVED***.get('NumCPU', 1***REMOVED******REMOVED***

    def _is_sun4(self***REMOVED***:
        return self.info['arch'***REMOVED***=='sun4'

    def _is_SUNW(self***REMOVED***:
        return re.match(r'SUNW', self.info['uname_i'***REMOVED******REMOVED*** is not None
    def _is_sparcstation5(self***REMOVED***:
        return re.match(r'.*SPARCstation-5', self.info['uname_i'***REMOVED******REMOVED*** is not None
    def _is_ultra1(self***REMOVED***:
        return re.match(r'.*Ultra-1', self.info['uname_i'***REMOVED******REMOVED*** is not None
    def _is_ultra250(self***REMOVED***:
        return re.match(r'.*Ultra-250', self.info['uname_i'***REMOVED******REMOVED*** is not None
    def _is_ultra2(self***REMOVED***:
        return re.match(r'.*Ultra-2', self.info['uname_i'***REMOVED******REMOVED*** is not None
    def _is_ultra30(self***REMOVED***:
        return re.match(r'.*Ultra-30', self.info['uname_i'***REMOVED******REMOVED*** is not None
    def _is_ultra4(self***REMOVED***:
        return re.match(r'.*Ultra-4', self.info['uname_i'***REMOVED******REMOVED*** is not None
    def _is_ultra5_10(self***REMOVED***:
        return re.match(r'.*Ultra-5_10', self.info['uname_i'***REMOVED******REMOVED*** is not None
    def _is_ultra5(self***REMOVED***:
        return re.match(r'.*Ultra-5', self.info['uname_i'***REMOVED******REMOVED*** is not None
    def _is_ultra60(self***REMOVED***:
        return re.match(r'.*Ultra-60', self.info['uname_i'***REMOVED******REMOVED*** is not None
    def _is_ultra80(self***REMOVED***:
        return re.match(r'.*Ultra-80', self.info['uname_i'***REMOVED******REMOVED*** is not None
    def _is_ultraenterprice(self***REMOVED***:
        return re.match(r'.*Ultra-Enterprise', self.info['uname_i'***REMOVED******REMOVED*** is not None
    def _is_ultraenterprice10k(self***REMOVED***:
        return re.match(r'.*Ultra-Enterprise-10000', self.info['uname_i'***REMOVED******REMOVED*** is not None
    def _is_sunfire(self***REMOVED***:
        return re.match(r'.*Sun-Fire', self.info['uname_i'***REMOVED******REMOVED*** is not None
    def _is_ultra(self***REMOVED***:
        return re.match(r'.*Ultra', self.info['uname_i'***REMOVED******REMOVED*** is not None

    def _is_cpusparcv7(self***REMOVED***:
        return self.info['processor'***REMOVED***=='sparcv7'
    def _is_cpusparcv8(self***REMOVED***:
        return self.info['processor'***REMOVED***=='sparcv8'
    def _is_cpusparcv9(self***REMOVED***:
        return self.info['processor'***REMOVED***=='sparcv9'

class Win32CPUInfo(CPUInfoBase***REMOVED***:

    info = None
    pkey = r"HARDWARE\DESCRIPTION\System\CentralProcessor"
    # XXX: what does the value of
    #   HKEY_LOCAL_MACHINE\HARDWARE\DESCRIPTION\System\CentralProcessor\0
    # mean?

    def __init__(self***REMOVED***:
        if self.info is not None:
            return
        info = [***REMOVED***
        ***REMOVED***
            #XXX: Bad style to use so long `***REMOVED***...***REMOVED***...`. Fix it!
            if sys.version_info[0***REMOVED*** >= 3:
                import winreg
            else:
                import _winreg as winreg

            prgx = re.compile(r"family\s+(?P<FML>\d+***REMOVED***\s+model\s+(?P<MDL>\d+***REMOVED***"\
                              "\s+stepping\s+(?P<STP>\d+***REMOVED***", re.IGNORECASE***REMOVED***
            chnd=winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, self.pkey***REMOVED***
            pnum=0
            while True:
                ***REMOVED***
                    proc=winreg.EnumKey(chnd, pnum***REMOVED***
                except winreg.error:
                    break
                else:
                    pnum+=1
                    info.append({"Processor":proc***REMOVED******REMOVED***
                    phnd=winreg.OpenKey(chnd, proc***REMOVED***
                    pidx=0
                    while True:
                        ***REMOVED***
                            name, value, vtpe=winreg.EnumValue(phnd, pidx***REMOVED***
                        except winreg.error:
                            break
                        else:
                            pidx=pidx+1
                            info[-1***REMOVED***[name***REMOVED***=value
                            if name=="Identifier":
                                srch=prgx.search(value***REMOVED***
                                if srch:
                                    info[-1***REMOVED***["Family"***REMOVED***=int(srch.group("FML"***REMOVED******REMOVED***
                                    info[-1***REMOVED***["Model"***REMOVED***=int(srch.group("MDL"***REMOVED******REMOVED***
                                    info[-1***REMOVED***["Stepping"***REMOVED***=int(srch.group("STP"***REMOVED******REMOVED***
        ***REMOVED***
            print(sys.exc_info(***REMOVED***[1***REMOVED***, '(ignoring***REMOVED***'***REMOVED***
        self.__class__.info = info

    def _not_impl(self***REMOVED***: pass

    # Athlon

    def _is_AMD(self***REMOVED***:
        return self.info[0***REMOVED***['VendorIdentifier'***REMOVED***=='AuthenticAMD'

    def _is_Am486(self***REMOVED***:
        return self.is_AMD(***REMOVED*** and self.info[0***REMOVED***['Family'***REMOVED***==4

    def _is_Am5x86(self***REMOVED***:
        return self.is_AMD(***REMOVED*** and self.info[0***REMOVED***['Family'***REMOVED***==4

    def _is_AMDK5(self***REMOVED***:
        return self.is_AMD(***REMOVED*** and self.info[0***REMOVED***['Family'***REMOVED***==5 \
               and self.info[0***REMOVED***['Model'***REMOVED*** in [0, 1, 2, 3***REMOVED***

    def _is_AMDK6(self***REMOVED***:
        return self.is_AMD(***REMOVED*** and self.info[0***REMOVED***['Family'***REMOVED***==5 \
               and self.info[0***REMOVED***['Model'***REMOVED*** in [6, 7***REMOVED***

    def _is_AMDK6_2(self***REMOVED***:
        return self.is_AMD(***REMOVED*** and self.info[0***REMOVED***['Family'***REMOVED***==5 \
               and self.info[0***REMOVED***['Model'***REMOVED***==8

    def _is_AMDK6_3(self***REMOVED***:
        return self.is_AMD(***REMOVED*** and self.info[0***REMOVED***['Family'***REMOVED***==5 \
               and self.info[0***REMOVED***['Model'***REMOVED***==9

    def _is_AMDK7(self***REMOVED***:
        return self.is_AMD(***REMOVED*** and self.info[0***REMOVED***['Family'***REMOVED*** == 6

    # To reliably distinguish between the different types of AMD64 chips
    # (Athlon64, Operton, Athlon64 X2, Semperon, Turion 64, etc.***REMOVED*** would
    # require looking at the 'brand' from cpuid

    def _is_AMD64(self***REMOVED***:
        return self.is_AMD(***REMOVED*** and self.info[0***REMOVED***['Family'***REMOVED*** == 15

    # Intel

    def _is_Intel(self***REMOVED***:
        return self.info[0***REMOVED***['VendorIdentifier'***REMOVED***=='GenuineIntel'

    def _is_i386(self***REMOVED***:
        return self.info[0***REMOVED***['Family'***REMOVED***==3

    def _is_i486(self***REMOVED***:
        return self.info[0***REMOVED***['Family'***REMOVED***==4

    def _is_i586(self***REMOVED***:
        return self.is_Intel(***REMOVED*** and self.info[0***REMOVED***['Family'***REMOVED***==5

    def _is_i686(self***REMOVED***:
        return self.is_Intel(***REMOVED*** and self.info[0***REMOVED***['Family'***REMOVED***==6

    def _is_Pentium(self***REMOVED***:
        return self.is_Intel(***REMOVED*** and self.info[0***REMOVED***['Family'***REMOVED***==5

    def _is_PentiumMMX(self***REMOVED***:
        return self.is_Intel(***REMOVED*** and self.info[0***REMOVED***['Family'***REMOVED***==5 \
               and self.info[0***REMOVED***['Model'***REMOVED***==4

    def _is_PentiumPro(self***REMOVED***:
        return self.is_Intel(***REMOVED*** and self.info[0***REMOVED***['Family'***REMOVED***==6 \
               and self.info[0***REMOVED***['Model'***REMOVED***==1

    def _is_PentiumII(self***REMOVED***:
        return self.is_Intel(***REMOVED*** and self.info[0***REMOVED***['Family'***REMOVED***==6 \
               and self.info[0***REMOVED***['Model'***REMOVED*** in [3, 5, 6***REMOVED***

    def _is_PentiumIII(self***REMOVED***:
        return self.is_Intel(***REMOVED*** and self.info[0***REMOVED***['Family'***REMOVED***==6 \
               and self.info[0***REMOVED***['Model'***REMOVED*** in [7, 8, 9, 10, 11***REMOVED***

    def _is_PentiumIV(self***REMOVED***:
        return self.is_Intel(***REMOVED*** and self.info[0***REMOVED***['Family'***REMOVED***==15

    def _is_PentiumM(self***REMOVED***:
        return self.is_Intel(***REMOVED*** and self.info[0***REMOVED***['Family'***REMOVED*** == 6 \
               and self.info[0***REMOVED***['Model'***REMOVED*** in [9, 13, 14***REMOVED***

    def _is_Core2(self***REMOVED***:
        return self.is_Intel(***REMOVED*** and self.info[0***REMOVED***['Family'***REMOVED*** == 6 \
               and self.info[0***REMOVED***['Model'***REMOVED*** in [15, 16, 17***REMOVED***

    # Varia

    def _is_singleCPU(self***REMOVED***:
        return len(self.info***REMOVED*** == 1

    def _getNCPUs(self***REMOVED***:
        return len(self.info***REMOVED***

    def _has_mmx(self***REMOVED***:
        if self.is_Intel(***REMOVED***:
            return (self.info[0***REMOVED***['Family'***REMOVED***==5 and self.info[0***REMOVED***['Model'***REMOVED***==4***REMOVED*** \
                   or (self.info[0***REMOVED***['Family'***REMOVED*** in [6, 15***REMOVED******REMOVED***
        elif self.is_AMD(***REMOVED***:
            return self.info[0***REMOVED***['Family'***REMOVED*** in [5, 6, 15***REMOVED***
        else:
            return False

    def _has_sse(self***REMOVED***:
        if self.is_Intel(***REMOVED***:
            return (self.info[0***REMOVED***['Family'***REMOVED***==6 and \
                    self.info[0***REMOVED***['Model'***REMOVED*** in [7, 8, 9, 10, 11***REMOVED******REMOVED*** \
                    or self.info[0***REMOVED***['Family'***REMOVED***==15
        elif self.is_AMD(***REMOVED***:
            return (self.info[0***REMOVED***['Family'***REMOVED***==6 and \
                    self.info[0***REMOVED***['Model'***REMOVED*** in [6, 7, 8, 10***REMOVED******REMOVED*** \
                    or self.info[0***REMOVED***['Family'***REMOVED***==15
        else:
            return False

    def _has_sse2(self***REMOVED***:
        if self.is_Intel(***REMOVED***:
            return self.is_Pentium4(***REMOVED*** or self.is_PentiumM(***REMOVED*** \
                   or self.is_Core2(***REMOVED***
        elif self.is_AMD(***REMOVED***:
            return self.is_AMD64(***REMOVED***
        else:
            return False

    def _has_3dnow(self***REMOVED***:
        return self.is_AMD(***REMOVED*** and self.info[0***REMOVED***['Family'***REMOVED*** in [5, 6, 15***REMOVED***

    def _has_3dnowext(self***REMOVED***:
        return self.is_AMD(***REMOVED*** and self.info[0***REMOVED***['Family'***REMOVED*** in [6, 15***REMOVED***

if sys.platform.startswith('linux'***REMOVED***: # variations: linux2,linux-i386 (any others?***REMOVED***
    cpuinfo = LinuxCPUInfo
elif sys.platform.startswith('irix'***REMOVED***:
    cpuinfo = IRIXCPUInfo
elif sys.platform == 'darwin':
    cpuinfo = DarwinCPUInfo
elif sys.platform.startswith('sunos'***REMOVED***:
    cpuinfo = SunOSCPUInfo
elif sys.platform.startswith('win32'***REMOVED***:
    cpuinfo = Win32CPUInfo
elif sys.platform.startswith('cygwin'***REMOVED***:
    cpuinfo = LinuxCPUInfo
#XXX: other OS's. Eg. use _winreg on Win32. Or os.uname on unices.
else:
    cpuinfo = CPUInfoBase

cpu = cpuinfo(***REMOVED***

#if __name__ == "__main__":
#
#    cpu.is_blaa(***REMOVED***
#    cpu.is_Intel(***REMOVED***
#    cpu.is_Alpha(***REMOVED***
#
#    print 'CPU information:',
#    for name in dir(cpuinfo***REMOVED***:
#        if name[0***REMOVED***=='_' and name[1***REMOVED***!='_':
#            r = getattr(cpu,name[1:***REMOVED******REMOVED***(***REMOVED***
#            if r:
#                if r!=1:
#                    print '%s=%s' %(name[1:***REMOVED***,r***REMOVED***,
#                else:
#                    print name[1:***REMOVED***,
#    print
