from __future__ import division, absolute_import, print_function

***REMOVED***
from distutils.msvccompiler import MSVCCompiler as _MSVCCompiler

from .system_info import platform_bits


def _merge(old, new***REMOVED***:
    ***REMOVED***Concatenate two environment paths avoiding repeats.

    Here `old` is the environment string before the base class initialize
    function is called and `new` is the string after the call. The new string
    will be a fixed string if it is not obtained from the current enviroment,
    or the same as the old string if obtained from the same enviroment. The aim
    here is not to append the new string if it is already contained in the old
    string so as to limit the growth of the environment string.

    Parameters
    ----------
    old : string
        Previous enviroment string.
    new : string
        New environment string.

    Returns
    -------
    ret : string
        Updated environment string.

    ***REMOVED***
    if new in old:
        return old
    if not old:
        return new

    # Neither new nor old is empty. Give old priority.
    return ';'.join([old, new***REMOVED******REMOVED***


class MSVCCompiler(_MSVCCompiler***REMOVED***:
    def __init__(self, verbose=0, dry_run=0, force=0***REMOVED***:
        _MSVCCompiler.__init__(self, verbose, dry_run, force***REMOVED***

    def initialize(self, plat_name=None***REMOVED***:
        # The 'lib' and 'include' variables may be overwritten
        # by MSVCCompiler.initialize, so save them for later merge.
        environ_lib = os.getenv('lib', ''***REMOVED***
        environ_include = os.getenv('include', ''***REMOVED***
        _MSVCCompiler.initialize(self, plat_name***REMOVED***

        # Merge current and previous values of 'lib' and 'include'
        os.environ['lib'***REMOVED*** = _merge(environ_lib, os.environ['lib'***REMOVED******REMOVED***
        os.environ['include'***REMOVED*** = _merge(environ_include, os.environ['include'***REMOVED******REMOVED***

        # msvc9 building for 32 bits requires SSE2 to work around a
        # compiler bug.
        if platform_bits == 32:
            self.compile_options += ['/arch:SSE2'***REMOVED***
            self.compile_options_debug += ['/arch:SSE2'***REMOVED***
