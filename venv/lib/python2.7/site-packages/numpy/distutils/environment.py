from __future__ import division, absolute_import, print_function

***REMOVED***
from distutils.dist import Distribution

__metaclass__ = type

class EnvironmentConfig(object***REMOVED***:
    def __init__(self, distutils_section='ALL', **kw***REMOVED***:
        self._distutils_section = distutils_section
        self._conf_keys = kw
        self._conf = None
        self._hook_handler = None

    def dump_variable(self, name***REMOVED***:
        conf_desc = self._conf_keys[name***REMOVED***
        hook, envvar, confvar, convert = conf_desc
        if not convert:
            convert = lambda x : x
        print('%s.%s:' % (self._distutils_section, name***REMOVED******REMOVED***
        v = self._hook_handler(name, hook***REMOVED***
        print('  hook   : %s' % (convert(v***REMOVED***,***REMOVED******REMOVED***
        if envvar:
            v = os.environ.get(envvar, None***REMOVED***
            print('  environ: %s' % (convert(v***REMOVED***,***REMOVED******REMOVED***
        if confvar and self._conf:
            v = self._conf.get(confvar, (None, None***REMOVED******REMOVED***[1***REMOVED***
            print('  config : %s' % (convert(v***REMOVED***,***REMOVED******REMOVED***

    def dump_variables(self***REMOVED***:
        for name in self._conf_keys:
            self.dump_variable(name***REMOVED***

    def __getattr__(self, name***REMOVED***:
        ***REMOVED***
            conf_desc = self._conf_keys[name***REMOVED***
        except KeyError:
            raise AttributeError(name***REMOVED***
        return self._get_var(name, conf_desc***REMOVED***

    def get(self, name, default=None***REMOVED***:
        ***REMOVED***
            conf_desc = self._conf_keys[name***REMOVED***
        except KeyError:
            return default
        var = self._get_var(name, conf_desc***REMOVED***
        if var is None:
            var = default
        return var

    def _get_var(self, name, conf_desc***REMOVED***:
        hook, envvar, confvar, convert = conf_desc
        var = self._hook_handler(name, hook***REMOVED***
        if envvar is not None:
            var = os.environ.get(envvar, var***REMOVED***
        if confvar is not None and self._conf:
            var = self._conf.get(confvar, (None, var***REMOVED******REMOVED***[1***REMOVED***
        if convert is not None:
            var = convert(var***REMOVED***
        return var

    def clone(self, hook_handler***REMOVED***:
        ec = self.__class__(distutils_section=self._distutils_section,
                            **self._conf_keys***REMOVED***
        ec._hook_handler = hook_handler
        return ec

    def use_distribution(self, dist***REMOVED***:
        if isinstance(dist, Distribution***REMOVED***:
            self._conf = dist.get_option_dict(self._distutils_section***REMOVED***
        else:
            self._conf = dist
