#!/usr/bin/python
***REMOVED***
takes templated file .xxx.src and produces .xxx file  where .xxx is
.i or .c or .h, using the following template rules

/**begin repeat  -- on a line by itself marks the start of a repeated code
                    segment
/**end repeat**/ -- on a line by itself marks it's end

After the /**begin repeat and before the */, all the named templates are placed
these should all have the same number of replacements

Repeat blocks can be nested, with each nested block labeled with its depth,
i.e.
/**begin repeat1
 *....
 */
/**end repeat1**/

When using nested loops, you can optionally exlude particular
combinations of the variables using (inside the comment portion of the inner loop***REMOVED***:

 :exclude: var1=value1, var2=value2, ...

This will exlude the pattern where var1 is value1 and var2 is value2 when
the result is being generated.


In the main body each replace will use one entry from the list of named replacements

 Note that all #..# forms in a block must have the same number of
   comma-separated entries.

Example:

    An input file containing

        /**begin repeat
         * #a = 1,2,3#
         * #b = 1,2,3#
         */

        /**begin repeat1
         * #c = ted, jim#
         */
        @a@, @b@, @c@
        /**end repeat1**/

        /**end repeat**/

    produces

        line 1 "template.c.src"

        /*
         *********************************************************************
         **       This file was autogenerated from a template  DO NOT EDIT!!**
         **       Changes should be made to the original source (.src***REMOVED*** file **
         *********************************************************************
         */

        #line 9
        1, 1, ted

        #line 9
        1, 1, jim

        #line 9
        2, 2, ted

        #line 9
        2, 2, jim

        #line 9
        3, 3, ted

        #line 9
        3, 3, jim

***REMOVED***
from __future__ import division, absolute_import, print_function


__all__ = ['process_str', 'process_file'***REMOVED***

***REMOVED***
import sys
import re

from numpy.distutils.compat import get_exception

# names for replacement that are already global.
global_names = {***REMOVED***

# header placed at the front of head processed file
header =\
***REMOVED***
/*
 *****************************************************************************
 **       This file was autogenerated from a template  DO NOT EDIT!!!!      **
 **       Changes should be made to the original source (.src***REMOVED*** file         **
 *****************************************************************************
 */

***REMOVED***
# Parse string for repeat loops
def parse_structure(astr, level***REMOVED***:
    ***REMOVED***
    The returned line number is from the beginning of the string, starting
    at zero. Returns an empty list if no loops found.

    ***REMOVED***
    if level == 0 :
        loopbeg = "/**begin repeat"
        loopend = "/**end repeat**/"
    else :
        loopbeg = "/**begin repeat%d" % level
        loopend = "/**end repeat%d**/" % level

    ind = 0
    line = 0
    spanlist = [***REMOVED***
    while True:
        start = astr.find(loopbeg, ind***REMOVED***
        if start == -1:
            break
        start2 = astr.find("*/", start***REMOVED***
        start2 = astr.find("\n", start2***REMOVED***
        fini1 = astr.find(loopend, start2***REMOVED***
        fini2 = astr.find("\n", fini1***REMOVED***
        line += astr.count("\n", ind, start2+1***REMOVED***
        spanlist.append((start, start2+1, fini1, fini2+1, line***REMOVED******REMOVED***
        line += astr.count("\n", start2+1, fini2***REMOVED***
        ind = fini2
    spanlist.sort(***REMOVED***
    return spanlist


def paren_repl(obj***REMOVED***:
    torep = obj.group(1***REMOVED***
    numrep = obj.group(2***REMOVED***
    return ','.join([torep***REMOVED****int(numrep***REMOVED******REMOVED***

parenrep = re.compile(r"[(***REMOVED***([^***REMOVED******REMOVED*******REMOVED***[***REMOVED******REMOVED***\*(\d+***REMOVED***"***REMOVED***
plainrep = re.compile(r"([^****REMOVED***+***REMOVED***\*(\d+***REMOVED***"***REMOVED***
def parse_values(astr***REMOVED***:
    # replaces all occurrences of '(a,b,c***REMOVED****4' in astr
    # with 'a,b,c,a,b,c,a,b,c,a,b,c'. Empty braces generate
    # empty values, i.e., (***REMOVED****4 yields ',,,'. The result is
    # split at ',' and a list of values returned.
    astr = parenrep.sub(paren_repl, astr***REMOVED***
    # replaces occurences of xxx*3 with xxx, xxx, xxx
    astr = ','.join([plainrep.sub(paren_repl, x.strip(***REMOVED******REMOVED***
                     for x in astr.split(','***REMOVED******REMOVED******REMOVED***
    return astr.split(','***REMOVED***


stripast = re.compile(r"\n\s*\*?"***REMOVED***
named_re = re.compile(r"#\s*(\w****REMOVED***\s*=([^#***REMOVED*******REMOVED***#"***REMOVED***
exclude_vars_re = re.compile(r"(\w****REMOVED***=(\w****REMOVED***"***REMOVED***
exclude_re = re.compile(":exclude:"***REMOVED***
def parse_loop_header(loophead***REMOVED*** :
    ***REMOVED***Find all named replacements in the header

    Returns a list of dictionaries, one for each loop iteration,
    where each key is a name to be substituted and the corresponding
    value is the replacement string.

    Also return a list of exclusions.  The exclusions are dictionaries
     of key value pairs. There can be more than one exclusion.
     [{'var1':'value1', 'var2', 'value2'[,...***REMOVED******REMOVED***, ...***REMOVED***

    ***REMOVED***
    # Strip out '\n' and leading '*', if any, in continuation lines.
    # This should not effect code previous to this change as
    # continuation lines were not allowed.
    loophead = stripast.sub("", loophead***REMOVED***
    # parse out the names and lists of values
    names = [***REMOVED***
    reps = named_re.findall(loophead***REMOVED***
    nsub = None
    for rep in reps:
        name = rep[0***REMOVED***
        vals = parse_values(rep[1***REMOVED******REMOVED***
        size = len(vals***REMOVED***
        if nsub is None :
            nsub = size
        elif nsub != size :
            msg = "Mismatch in number of values:\n%s = %s" % (name, vals***REMOVED***
            raise ValueError(msg***REMOVED***
        names.append((name, vals***REMOVED******REMOVED***


    # Find any exclude variables
    excludes = [***REMOVED***

    for obj in exclude_re.finditer(loophead***REMOVED***:
        span = obj.span(***REMOVED***
        # find next newline
        endline = loophead.find('\n', span[1***REMOVED******REMOVED***
        substr = loophead[span[1***REMOVED***:endline***REMOVED***
        ex_names = exclude_vars_re.findall(substr***REMOVED***
        excludes.append(dict(ex_names***REMOVED******REMOVED***

    # generate list of dictionaries, one for each template iteration
    dlist = [***REMOVED***
    if nsub is None :
        raise ValueError("No substitution variables found"***REMOVED***
    for i in range(nsub***REMOVED*** :
        tmp = {***REMOVED***
        for name, vals in names :
            tmp[name***REMOVED*** = vals[i***REMOVED***
        dlist.append(tmp***REMOVED***
    return dlist

replace_re = re.compile(r"@([\w***REMOVED***+***REMOVED***@"***REMOVED***
def parse_string(astr, env, level, line***REMOVED*** :
    lineno = "#line %d\n" % line

    # local function for string replacement, uses env
    def replace(match***REMOVED***:
        name = match.group(1***REMOVED***
        try :
            val = env[name***REMOVED***
        except KeyError:
            msg = 'line %d: no definition of key "%s"'%(line, name***REMOVED***
            raise ValueError(msg***REMOVED***
        return val

    code = [lineno***REMOVED***
    struct = parse_structure(astr, level***REMOVED***
    if struct :
        # recurse over inner loops
        oldend = 0
        newlevel = level + 1
        for sub in struct:
            pref = astr[oldend:sub[0***REMOVED******REMOVED***
            head = astr[sub[0***REMOVED***:sub[1***REMOVED******REMOVED***
            text = astr[sub[1***REMOVED***:sub[2***REMOVED******REMOVED***
            oldend = sub[3***REMOVED***
            newline = line + sub[4***REMOVED***
            code.append(replace_re.sub(replace, pref***REMOVED******REMOVED***
            try :
                envlist = parse_loop_header(head***REMOVED***
            except ValueError:
                e = get_exception(***REMOVED***
                msg = "line %d: %s" % (newline, e***REMOVED***
                raise ValueError(msg***REMOVED***
            for newenv in envlist :
                newenv.update(env***REMOVED***
                newcode = parse_string(text, newenv, newlevel, newline***REMOVED***
                code.extend(newcode***REMOVED***
        suff = astr[oldend:***REMOVED***
        code.append(replace_re.sub(replace, suff***REMOVED******REMOVED***
    else :
        # replace keys
        code.append(replace_re.sub(replace, astr***REMOVED******REMOVED***
    code.append('\n'***REMOVED***
    return ''.join(code***REMOVED***

def process_str(astr***REMOVED***:
    code = [header***REMOVED***
    code.extend(parse_string(astr, global_names, 0, 1***REMOVED******REMOVED***
    return ''.join(code***REMOVED***


include_src_re = re.compile(r"(\n|\A***REMOVED***#include\s*['\"***REMOVED***"
                            r"(?P<name>[\w\d./\\***REMOVED***+[.***REMOVED***src***REMOVED***['\"***REMOVED***", re.I***REMOVED***

def resolve_includes(source***REMOVED***:
    d = os.path.dirname(source***REMOVED***
    fid = open(source***REMOVED***
    lines = [***REMOVED***
    for line in fid:
        m = include_src_re.match(line***REMOVED***
        if m:
            fn = m.group('name'***REMOVED***
            if not os.path.isabs(fn***REMOVED***:
                fn = os.path.join(d, fn***REMOVED***
            if os.path.isfile(fn***REMOVED***:
                print('Including file', fn***REMOVED***
                lines.extend(resolve_includes(fn***REMOVED******REMOVED***
            else:
                lines.append(line***REMOVED***
        else:
            lines.append(line***REMOVED***
    fid.close(***REMOVED***
    return lines

def process_file(source***REMOVED***:
    lines = resolve_includes(source***REMOVED***
    sourcefile = os.path.normcase(source***REMOVED***.replace("\\", "\\\\"***REMOVED***
    ***REMOVED***
        code = process_str(''.join(lines***REMOVED******REMOVED***
    except ValueError:
        e = get_exception(***REMOVED***
        raise ValueError('In "%s" loop at %s' % (sourcefile, e***REMOVED******REMOVED***
    return '#line 1 "%s"\n%s' % (sourcefile, code***REMOVED***


def unique_key(adict***REMOVED***:
    # this obtains a unique key given a dictionary
    # currently it works by appending together n of the letters of the
    #   current keys and increasing n until a unique key is found
    # -- not particularly quick
    allkeys = list(adict.keys(***REMOVED******REMOVED***
    done = False
    n = 1
    while not done:
        newkey = "".join([x[:n***REMOVED*** for x in allkeys***REMOVED******REMOVED***
        if newkey in allkeys:
            n += 1
        else:
            done = True
    return newkey


if __name__ == "__main__":

    ***REMOVED***
        file = sys.argv[1***REMOVED***
    except IndexError:
        fid = sys.stdin
        outfile = sys.stdout
    else:
        fid = open(file, 'r'***REMOVED***
        (base, ext***REMOVED*** = os.path.splitext(file***REMOVED***
        newname = base
        outfile = open(newname, 'w'***REMOVED***

    allstr = fid.read(***REMOVED***
    ***REMOVED***
        writestr = process_str(allstr***REMOVED***
    except ValueError:
        e = get_exception(***REMOVED***
        raise ValueError("In %s loop at %s" % (file, e***REMOVED******REMOVED***
    outfile.write(writestr***REMOVED***
