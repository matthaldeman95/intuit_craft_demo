from __future__ import division, absolute_import, print_function

from numpy.distutils.ccompiler import simple_version_match
from numpy.distutils.fcompiler import FCompiler

compilers = ['SunFCompiler'***REMOVED***

class SunFCompiler(FCompiler***REMOVED***:

    compiler_type = 'sun'
    description = 'Sun or Forte Fortran 95 Compiler'
    # ex:
    # f90: Sun WorkShop 6 update 2 Fortran 95 6.2 Patch 111690-10 2003/08/28
    version_match = simple_version_match(
                      start=r'f9[05***REMOVED***: (Sun|Forte|WorkShop***REMOVED***.*Fortran 95'***REMOVED***

    executables = {
        'version_cmd'  : ["<F90>", "-V"***REMOVED***,
        'compiler_f77' : ["f90"***REMOVED***,
        'compiler_fix' : ["f90", "-fixed"***REMOVED***,
        'compiler_f90' : ["f90"***REMOVED***,
        'linker_so'    : ["<F90>", "-Bdynamic", "-G"***REMOVED***,
        'archiver'     : ["ar", "-cr"***REMOVED***,
        'ranlib'       : ["ranlib"***REMOVED***
    ***REMOVED***
    module_dir_switch = '-moddir='
    module_include_switch = '-M'
    pic_flags = ['-xcode=pic32'***REMOVED***

    def get_flags_f77(self***REMOVED***:
        ret = ["-ftrap=%none"***REMOVED***
        if (self.get_version(***REMOVED*** or ''***REMOVED*** >= '7':
            ret.append("-f77"***REMOVED***
        else:
            ret.append("-fixed"***REMOVED***
        return ret
    def get_opt(self***REMOVED***:
        return ['-fast', '-dalign'***REMOVED***
    def get_arch(self***REMOVED***:
        return ['-xtarget=generic'***REMOVED***
    def get_libraries(self***REMOVED***:
        opt = [***REMOVED***
        opt.extend(['fsu', 'sunmath', 'mvec'***REMOVED******REMOVED***
        return opt

    def runtime_library_dir_option(self, dir***REMOVED***:
        return '-R"%s"' % dir

if __name__ == '__main__':
    from distutils import log
    log.set_verbosity(2***REMOVED***
    from numpy.distutils.fcompiler import new_fcompiler
    compiler = new_fcompiler(compiler='sun'***REMOVED***
    compiler.customize(***REMOVED***
    print(compiler.get_version(***REMOVED******REMOVED***
