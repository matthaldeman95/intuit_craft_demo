from __future__ import division, absolute_import, print_function

***REMOVED***
import re
import sys

from numpy.distutils.fcompiler import FCompiler
from numpy.distutils.exec_command import exec_command, find_executable
from numpy.distutils.misc_util import make_temp_file
from distutils import log

compilers = ['IBMFCompiler'***REMOVED***

class IBMFCompiler(FCompiler***REMOVED***:
    compiler_type = 'ibm'
    description = 'IBM XL Fortran Compiler'
    version_pattern =  r'(xlf\(1\***REMOVED***\s*|***REMOVED***IBM XL Fortran ((Advanced Edition |***REMOVED***Version |Enterprise Edition V|for AIX, V***REMOVED***(?P<version>[^\s****REMOVED*******REMOVED***'
    #IBM XL Fortran Enterprise Edition V10.1 for AIX \nVersion: 10.01.0000.0004

    executables = {
        'version_cmd'  : ["<F77>", "-qversion"***REMOVED***,
        'compiler_f77' : ["xlf"***REMOVED***,
        'compiler_fix' : ["xlf90", "-qfixed"***REMOVED***,
        'compiler_f90' : ["xlf90"***REMOVED***,
        'linker_so'    : ["xlf95"***REMOVED***,
        'archiver'     : ["ar", "-cr"***REMOVED***,
        'ranlib'       : ["ranlib"***REMOVED***
    ***REMOVED***

    def get_version(self,*args,**kwds***REMOVED***:
        version = FCompiler.get_version(self,*args,**kwds***REMOVED***

        if version is None and sys.platform.startswith('aix'***REMOVED***:
            # use lslpp to find out xlf version
            lslpp = find_executable('lslpp'***REMOVED***
            xlf = find_executable('xlf'***REMOVED***
            if os.path.exists(xlf***REMOVED*** and os.path.exists(lslpp***REMOVED***:
                s, o = exec_command(lslpp + ' -Lc xlfcmp'***REMOVED***
                m = re.search('xlfcmp:(?P<version>\d+([.***REMOVED***\d+***REMOVED***+***REMOVED***', o***REMOVED***
                if m: version = m.group('version'***REMOVED***

        xlf_dir = '/etc/opt/ibmcmp/xlf'
        if version is None and os.path.isdir(xlf_dir***REMOVED***:
            # linux:
            # If the output of xlf does not contain version info
            # (that's the case with xlf 8.1, for instance***REMOVED*** then
            # let's try another method:
            l = sorted(os.listdir(xlf_dir***REMOVED******REMOVED***
            l.reverse(***REMOVED***
            l = [d for d in l if os.path.isfile(os.path.join(xlf_dir, d, 'xlf.cfg'***REMOVED******REMOVED******REMOVED***
            if l:
                from distutils.version import LooseVersion
                self.version = version = LooseVersion(l[0***REMOVED******REMOVED***
        return version

    def get_flags(self***REMOVED***:
        return ['-qextname'***REMOVED***

    def get_flags_debug(self***REMOVED***:
        return ['-g'***REMOVED***

    def get_flags_linker_so(self***REMOVED***:
        opt = [***REMOVED***
        if sys.platform=='darwin':
            opt.append('-Wl,-bundle,-flat_namespace,-undefined,suppress'***REMOVED***
        else:
            opt.append('-bshared'***REMOVED***
        version = self.get_version(ok_status=[0, 40***REMOVED******REMOVED***
        if version is not None:
            if sys.platform.startswith('aix'***REMOVED***:
                xlf_cfg = '/etc/xlf.cfg'
            else:
                xlf_cfg = '/etc/opt/ibmcmp/xlf/%s/xlf.cfg' % version
            fo, new_cfg = make_temp_file(suffix='_xlf.cfg'***REMOVED***
            log.info('Creating '+new_cfg***REMOVED***
            fi = open(xlf_cfg, 'r'***REMOVED***
            crt1_match = re.compile(r'\s*crt\s*[=***REMOVED***\s*(?P<path>.****REMOVED***/crt1.o'***REMOVED***.match
            for line in fi:
                m = crt1_match(line***REMOVED***
                if m:
                    fo.write('crt = %s/bundle1.o\n' % (m.group('path'***REMOVED******REMOVED******REMOVED***
                else:
                    fo.write(line***REMOVED***
            fi.close(***REMOVED***
            fo.close(***REMOVED***
            opt.append('-F'+new_cfg***REMOVED***
        return opt

    def get_flags_opt(self***REMOVED***:
        return ['-O3'***REMOVED***

if __name__ == '__main__':
    log.set_verbosity(2***REMOVED***
    compiler = IBMFCompiler(***REMOVED***
    compiler.customize(***REMOVED***
    print(compiler.get_version(***REMOVED******REMOVED***
