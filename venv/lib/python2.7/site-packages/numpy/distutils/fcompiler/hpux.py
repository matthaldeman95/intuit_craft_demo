from __future__ import division, absolute_import, print_function

from numpy.distutils.fcompiler import FCompiler

compilers = ['HPUXFCompiler'***REMOVED***

class HPUXFCompiler(FCompiler***REMOVED***:

    compiler_type = 'hpux'
    description = 'HP Fortran 90 Compiler'
    version_pattern =  r'HP F90 (?P<version>[^\s*,***REMOVED*******REMOVED***'

    executables = {
        'version_cmd'  : ["f90", "+version"***REMOVED***,
        'compiler_f77' : ["f90"***REMOVED***,
        'compiler_fix' : ["f90"***REMOVED***,
        'compiler_f90' : ["f90"***REMOVED***,
        'linker_so'    : ["ld", "-b"***REMOVED***,
        'archiver'     : ["ar", "-cr"***REMOVED***,
        'ranlib'       : ["ranlib"***REMOVED***
    ***REMOVED***
    module_dir_switch = None #XXX: fix me
    module_include_switch = None #XXX: fix me
    pic_flags = ['+Z'***REMOVED***
    def get_flags(self***REMOVED***:
        return self.pic_flags + ['+ppu', '+DD64'***REMOVED***
    def get_flags_opt(self***REMOVED***:
        return ['-O3'***REMOVED***
    def get_libraries(self***REMOVED***:
        return ['m'***REMOVED***
    def get_library_dirs(self***REMOVED***:
        opt = ['/usr/lib/hpux64'***REMOVED***
        return opt
    def get_version(self, force=0, ok_status=[256, 0, 1***REMOVED******REMOVED***:
        # XXX status==256 may indicate 'unrecognized option' or
        #     'no input file'. So, version_cmd needs more work.
        return FCompiler.get_version(self, force, ok_status***REMOVED***

if __name__ == '__main__':
    from distutils import log
    log.set_verbosity(10***REMOVED***
    from numpy.distutils.fcompiler import new_fcompiler
    compiler = new_fcompiler(compiler='hpux'***REMOVED***
    compiler.customize(***REMOVED***
    print(compiler.get_version(***REMOVED******REMOVED***
