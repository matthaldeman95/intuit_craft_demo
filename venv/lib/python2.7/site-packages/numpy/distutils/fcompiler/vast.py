from __future__ import division, absolute_import, print_function

***REMOVED***

from numpy.distutils.fcompiler.gnu import GnuFCompiler

compilers = ['VastFCompiler'***REMOVED***

class VastFCompiler(GnuFCompiler***REMOVED***:
    compiler_type = 'vast'
    compiler_aliases = (***REMOVED***
    description = 'Pacific-Sierra Research Fortran 90 Compiler'
    version_pattern = r'\s*Pacific-Sierra Research vf90 '\
                      '(Personal|Professional***REMOVED***\s+(?P<version>[^\s***REMOVED*******REMOVED***'

    # VAST f90 does not support -o with -c. So, object files are created
    # to the current directory and then moved to build directory
    object_switch = ' && function _mvfile { mv -v `basename $1` $1 ; ***REMOVED*** && _mvfile '

    executables = {
        'version_cmd'  : ["vf90", "-v"***REMOVED***,
        'compiler_f77' : ["g77"***REMOVED***,
        'compiler_fix' : ["f90", "-Wv,-ya"***REMOVED***,
        'compiler_f90' : ["f90"***REMOVED***,
        'linker_so'    : ["<F90>"***REMOVED***,
        'archiver'     : ["ar", "-cr"***REMOVED***,
        'ranlib'       : ["ranlib"***REMOVED***
    ***REMOVED***
    module_dir_switch = None  #XXX Fix me
    module_include_switch = None #XXX Fix me

    def find_executables(self***REMOVED***:
        pass

    def get_version_cmd(self***REMOVED***:
        f90 = self.compiler_f90[0***REMOVED***
        d, b = os.path.split(f90***REMOVED***
        vf90 = os.path.join(d, 'v'+b***REMOVED***
        return vf90

    def get_flags_arch(self***REMOVED***:
        vast_version = self.get_version(***REMOVED***
        gnu = GnuFCompiler(***REMOVED***
        gnu.customize(None***REMOVED***
        self.version = gnu.get_version(***REMOVED***
        opt = GnuFCompiler.get_flags_arch(self***REMOVED***
        self.version = vast_version
        return opt

if __name__ == '__main__':
    from distutils import log
    log.set_verbosity(2***REMOVED***
    from numpy.distutils.fcompiler import new_fcompiler
    compiler = new_fcompiler(compiler='vast'***REMOVED***
    compiler.customize(***REMOVED***
    print(compiler.get_version(***REMOVED******REMOVED***
