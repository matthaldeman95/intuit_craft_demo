from __future__ import division, absolute_import, print_function

from numpy.distutils.cpuinfo import cpu
from numpy.distutils.fcompiler import FCompiler

compilers = ['MIPSFCompiler'***REMOVED***

class MIPSFCompiler(FCompiler***REMOVED***:

    compiler_type = 'mips'
    description = 'MIPSpro Fortran Compiler'
    version_pattern =  r'MIPSpro Compilers: Version (?P<version>[^\s*,***REMOVED*******REMOVED***'

    executables = {
        'version_cmd'  : ["<F90>", "-version"***REMOVED***,
        'compiler_f77' : ["f77", "-f77"***REMOVED***,
        'compiler_fix' : ["f90", "-fixedform"***REMOVED***,
        'compiler_f90' : ["f90"***REMOVED***,
        'linker_so'    : ["f90", "-shared"***REMOVED***,
        'archiver'     : ["ar", "-cr"***REMOVED***,
        'ranlib'       : None
    ***REMOVED***
    module_dir_switch = None #XXX: fix me
    module_include_switch = None #XXX: fix me
    pic_flags = ['-KPIC'***REMOVED***

    def get_flags(self***REMOVED***:
        return self.pic_flags + ['-n32'***REMOVED***
    def get_flags_opt(self***REMOVED***:
        return ['-O3'***REMOVED***
    def get_flags_arch(self***REMOVED***:
        opt = [***REMOVED***
        for a in '19 20 21 22_4k 22_5k 24 25 26 27 28 30 32_5k 32_10k'.split(***REMOVED***:
            if getattr(cpu, 'is_IP%s'%a***REMOVED***(***REMOVED***:
                opt.append('-TARG:platform=IP%s' % a***REMOVED***
                break
        return opt
    def get_flags_arch_f77(self***REMOVED***:
        r = None
        if cpu.is_r10000(***REMOVED***: r = 10000
        elif cpu.is_r12000(***REMOVED***: r = 12000
        elif cpu.is_r8000(***REMOVED***: r = 8000
        elif cpu.is_r5000(***REMOVED***: r = 5000
        elif cpu.is_r4000(***REMOVED***: r = 4000
        if r is not None:
            return ['r%s' % (r***REMOVED******REMOVED***
        return [***REMOVED***
    def get_flags_arch_f90(self***REMOVED***:
        r = self.get_flags_arch_f77(***REMOVED***
        if r:
            r[0***REMOVED*** = '-' + r[0***REMOVED***
        return r

if __name__ == '__main__':
    from numpy.distutils.fcompiler import new_fcompiler
    compiler = new_fcompiler(compiler='mips'***REMOVED***
    compiler.customize(***REMOVED***
    print(compiler.get_version(***REMOVED******REMOVED***
