# http://developer.intel.com/software/products/compilers/flin/
from __future__ import division, absolute_import, print_function

import sys

from numpy.distutils.ccompiler import simple_version_match
from numpy.distutils.fcompiler import FCompiler, dummy_fortran_file

compilers = ['IntelFCompiler', 'IntelVisualFCompiler',
             'IntelItaniumFCompiler', 'IntelItaniumVisualFCompiler',
             'IntelEM64VisualFCompiler', 'IntelEM64TFCompiler'***REMOVED***


def intel_version_match(type***REMOVED***:
    # Match against the important stuff in the version string
    return simple_version_match(start=r'Intel.*?Fortran.*?(?:%s***REMOVED***.*?Version' % (type,***REMOVED******REMOVED***


class BaseIntelFCompiler(FCompiler***REMOVED***:
    def update_executables(self***REMOVED***:
        f = dummy_fortran_file(***REMOVED***
        self.executables['version_cmd'***REMOVED*** = ['<F77>', '-FI', '-V', '-c',
                                           f + '.f', '-o', f + '.o'***REMOVED***

    def runtime_library_dir_option(self, dir***REMOVED***:
        return '-Wl,-rpath="%s"' % dir


class IntelFCompiler(BaseIntelFCompiler***REMOVED***:

    compiler_type = 'intel'
    compiler_aliases = ('ifort',***REMOVED***
    description = 'Intel Fortran Compiler for 32-bit apps'
    version_match = intel_version_match('32-bit|IA-32'***REMOVED***

    possible_executables = ['ifort', 'ifc'***REMOVED***

    executables = {
        'version_cmd'  : None,          # set by update_executables
        'compiler_f77' : [None, "-72", "-w90", "-w95"***REMOVED***,
        'compiler_f90' : [None***REMOVED***,
        'compiler_fix' : [None, "-FI"***REMOVED***,
        'linker_so'    : ["<F90>", "-shared"***REMOVED***,
        'archiver'     : ["ar", "-cr"***REMOVED***,
        'ranlib'       : ["ranlib"***REMOVED***
    ***REMOVED***

    pic_flags = ['-fPIC'***REMOVED***
    module_dir_switch = '-module '  # Don't remove ending space!
    module_include_switch = '-I'

    def get_flags_free(self***REMOVED***:
        return ['-FR'***REMOVED***

    def get_flags(self***REMOVED***:
        return ['-fPIC'***REMOVED***

    def get_flags_opt(self***REMOVED***:  # Scipy test failures with -O2
        return ['-xhost -openmp -fp-model strict -O1'***REMOVED***

    def get_flags_arch(self***REMOVED***:
        return [***REMOVED***

    def get_flags_linker_so(self***REMOVED***:
        opt = FCompiler.get_flags_linker_so(self***REMOVED***
        v = self.get_version(***REMOVED***
        if v and v >= '8.0':
            opt.append('-nofor_main'***REMOVED***
        if sys.platform == 'darwin':
            # Here, it's -dynamiclib
            ***REMOVED***
                idx = opt.index('-shared'***REMOVED***
                opt.remove('-shared'***REMOVED***
            except ValueError:
                idx = 0
            opt[idx:idx***REMOVED*** = ['-dynamiclib', '-Wl,-undefined,dynamic_lookup'***REMOVED***
        return opt


class IntelItaniumFCompiler(IntelFCompiler***REMOVED***:
    compiler_type = 'intele'
    compiler_aliases = (***REMOVED***
    description = 'Intel Fortran Compiler for Itanium apps'

    version_match = intel_version_match('Itanium|IA-64'***REMOVED***

    possible_executables = ['ifort', 'efort', 'efc'***REMOVED***

    executables = {
        'version_cmd'  : None,
        'compiler_f77' : [None, "-FI", "-w90", "-w95"***REMOVED***,
        'compiler_fix' : [None, "-FI"***REMOVED***,
        'compiler_f90' : [None***REMOVED***,
        'linker_so'    : ['<F90>', "-shared"***REMOVED***,
        'archiver'     : ["ar", "-cr"***REMOVED***,
        'ranlib'       : ["ranlib"***REMOVED***
    ***REMOVED***


class IntelEM64TFCompiler(IntelFCompiler***REMOVED***:
    compiler_type = 'intelem'
    compiler_aliases = (***REMOVED***
    description = 'Intel Fortran Compiler for 64-bit apps'

    version_match = intel_version_match('EM64T-based|Intel\\(R\\***REMOVED*** 64|64|IA-64|64-bit'***REMOVED***

    possible_executables = ['ifort', 'efort', 'efc'***REMOVED***

    executables = {
        'version_cmd'  : None,
        'compiler_f77' : [None, "-FI"***REMOVED***,
        'compiler_fix' : [None, "-FI"***REMOVED***,
        'compiler_f90' : [None***REMOVED***,
        'linker_so'    : ['<F90>', "-shared"***REMOVED***,
        'archiver'     : ["ar", "-cr"***REMOVED***,
        'ranlib'       : ["ranlib"***REMOVED***
    ***REMOVED***

    def get_flags(self***REMOVED***:
        return ['-fPIC'***REMOVED***

    def get_flags_opt(self***REMOVED***:  # Scipy test failures with -O2
        return ['-openmp -fp-model strict -O1'***REMOVED***

    def get_flags_arch(self***REMOVED***:
        return [''***REMOVED***

# Is there no difference in the version string between the above compilers
# and the Visual compilers?


class IntelVisualFCompiler(BaseIntelFCompiler***REMOVED***:
    compiler_type = 'intelv'
    description = 'Intel Visual Fortran Compiler for 32-bit apps'
    version_match = intel_version_match('32-bit|IA-32'***REMOVED***

    def update_executables(self***REMOVED***:
        f = dummy_fortran_file(***REMOVED***
        self.executables['version_cmd'***REMOVED*** = ['<F77>', '/FI', '/c',
                                           f + '.f', '/o', f + '.o'***REMOVED***

    ar_exe = 'lib.exe'
    possible_executables = ['ifort', 'ifl'***REMOVED***

    executables = {
        'version_cmd'  : None,
        'compiler_f77' : [None***REMOVED***,
        'compiler_fix' : [None***REMOVED***,
        'compiler_f90' : [None***REMOVED***,
        'linker_so'    : [None***REMOVED***,
        'archiver'     : [ar_exe, "/verbose", "/OUT:"***REMOVED***,
        'ranlib'       : None
    ***REMOVED***

    compile_switch = '/c '
    object_switch = '/Fo'     # No space after /Fo!
    library_switch = '/OUT:'  # No space after /OUT:!
    module_dir_switch = '/module:'  # No space after /module:
    module_include_switch = '/I'

    def get_flags(self***REMOVED***:
        opt = ['/nologo', '/MD', '/nbs', '/names:lowercase', '/assume:underscore'***REMOVED***
        return opt

    def get_flags_free(self***REMOVED***:
        return [***REMOVED***

    def get_flags_debug(self***REMOVED***:
        return ['/4Yb', '/d2'***REMOVED***

    def get_flags_opt(self***REMOVED***:
        return ['/O1'***REMOVED***  # Scipy test failures with /O2

    def get_flags_arch(self***REMOVED***:
        return ["/arch:IA32", "/QaxSSE3"***REMOVED***

    def runtime_library_dir_option(self, dir***REMOVED***:
        raise NotImplementedError


class IntelItaniumVisualFCompiler(IntelVisualFCompiler***REMOVED***:
    compiler_type = 'intelev'
    description = 'Intel Visual Fortran Compiler for Itanium apps'

    version_match = intel_version_match('Itanium'***REMOVED***

    possible_executables = ['efl'***REMOVED***  # XXX this is a wild guess
    ar_exe = IntelVisualFCompiler.ar_exe

    executables = {
        'version_cmd'  : None,
        'compiler_f77' : [None, "-FI", "-w90", "-w95"***REMOVED***,
        'compiler_fix' : [None, "-FI", "-4L72", "-w"***REMOVED***,
        'compiler_f90' : [None***REMOVED***,
        'linker_so'    : ['<F90>', "-shared"***REMOVED***,
        'archiver'     : [ar_exe, "/verbose", "/OUT:"***REMOVED***,
        'ranlib'       : None
    ***REMOVED***


class IntelEM64VisualFCompiler(IntelVisualFCompiler***REMOVED***:
    compiler_type = 'intelvem'
    description = 'Intel Visual Fortran Compiler for 64-bit apps'

    version_match = simple_version_match(start='Intel\(R\***REMOVED***.*?64,'***REMOVED***

    def get_flags_arch(self***REMOVED***:
        return [''***REMOVED***


if __name__ == '__main__':
    from distutils import log
    log.set_verbosity(2***REMOVED***
    from numpy.distutils.fcompiler import new_fcompiler
    compiler = new_fcompiler(compiler='intel'***REMOVED***
    compiler.customize(***REMOVED***
    print(compiler.get_version(***REMOVED******REMOVED***
