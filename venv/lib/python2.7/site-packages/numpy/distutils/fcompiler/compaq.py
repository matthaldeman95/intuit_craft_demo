
#http://www.compaq.com/fortran/docs/
from __future__ import division, absolute_import, print_function

***REMOVED***
import sys

from numpy.distutils.fcompiler import FCompiler
from numpy.distutils.compat import get_exception
from distutils.errors import DistutilsPlatformError

compilers = ['CompaqFCompiler'***REMOVED***
if os.name != 'posix' or sys.platform[:6***REMOVED*** == 'cygwin' :
    # Otherwise we'd get a false positive on posix systems with
    # case-insensitive filesystems (like darwin***REMOVED***, because we'll pick
    # up /bin/df
    compilers.append('CompaqVisualFCompiler'***REMOVED***

class CompaqFCompiler(FCompiler***REMOVED***:

    compiler_type = 'compaq'
    description = 'Compaq Fortran Compiler'
    version_pattern = r'Compaq Fortran (?P<version>[^\s***REMOVED*******REMOVED***.*'

    if sys.platform[:5***REMOVED***=='linux':
        fc_exe = 'fort'
    else:
        fc_exe = 'f90'

    executables = {
        'version_cmd'  : ['<F90>', "-version"***REMOVED***,
        'compiler_f77' : [fc_exe, "-f77rtl", "-fixed"***REMOVED***,
        'compiler_fix' : [fc_exe, "-fixed"***REMOVED***,
        'compiler_f90' : [fc_exe***REMOVED***,
        'linker_so'    : ['<F90>'***REMOVED***,
        'archiver'     : ["ar", "-cr"***REMOVED***,
        'ranlib'       : ["ranlib"***REMOVED***
    ***REMOVED***

    module_dir_switch = '-module ' # not tested
    module_include_switch = '-I'

    def get_flags(self***REMOVED***:
        return ['-assume no2underscore', '-nomixed_str_len_arg'***REMOVED***
    def get_flags_debug(self***REMOVED***:
        return ['-g', '-check bounds'***REMOVED***
    def get_flags_opt(self***REMOVED***:
        return ['-O4', '-align dcommons', '-assume bigarrays',
                '-assume nozsize', '-math_library fast'***REMOVED***
    def get_flags_arch(self***REMOVED***:
        return ['-arch host', '-tune host'***REMOVED***
    def get_flags_linker_so(self***REMOVED***:
        if sys.platform[:5***REMOVED***=='linux':
            return ['-shared'***REMOVED***
        return ['-shared', '-Wl,-expect_unresolved,*'***REMOVED***

class CompaqVisualFCompiler(FCompiler***REMOVED***:

    compiler_type = 'compaqv'
    description = 'DIGITAL or Compaq Visual Fortran Compiler'
    version_pattern = r'(DIGITAL|Compaq***REMOVED*** Visual Fortran Optimizing Compiler'\
                      ' Version (?P<version>[^\s***REMOVED*******REMOVED***.*'

    compile_switch = '/compile_only'
    object_switch = '/object:'
    library_switch = '/OUT:'      #No space after /OUT:!

    static_lib_extension = ".lib"
    static_lib_format = "%s%s"
    module_dir_switch = '/module:'
    module_include_switch = '/I'

    ar_exe = 'lib.exe'
    fc_exe = 'DF'

    if sys.platform=='win32':
        from numpy.distutils.msvccompiler import MSVCCompiler

        ***REMOVED***
            m = MSVCCompiler(***REMOVED***
            m.initialize(***REMOVED***
            ar_exe = m.lib
        except DistutilsPlatformError:
            pass
        except AttributeError:
            msg = get_exception(***REMOVED***
            if '_MSVCCompiler__root' in str(msg***REMOVED***:
                print('Ignoring "%s" (I think it is msvccompiler.py bug***REMOVED***' % (msg***REMOVED******REMOVED***
            else:
                raise
        except IOError:
            e = get_exception(***REMOVED***
            if not "vcvarsall.bat" in str(e***REMOVED***:
                print("Unexpected IOError in", __file__***REMOVED***
                raise e
        except ValueError:
            e = get_exception(***REMOVED***
            if not "path'***REMOVED***" in str(e***REMOVED***:
                print("Unexpected ValueError in", __file__***REMOVED***
                raise e

    executables = {
        'version_cmd'  : ['<F90>', "/what"***REMOVED***,
        'compiler_f77' : [fc_exe, "/f77rtl", "/fixed"***REMOVED***,
        'compiler_fix' : [fc_exe, "/fixed"***REMOVED***,
        'compiler_f90' : [fc_exe***REMOVED***,
        'linker_so'    : ['<F90>'***REMOVED***,
        'archiver'     : [ar_exe, "/OUT:"***REMOVED***,
        'ranlib'       : None
    ***REMOVED***

    def get_flags(self***REMOVED***:
        return ['/nologo', '/MD', '/WX', '/iface=(cref,nomixed_str_len_arg***REMOVED***',
                '/names:lowercase', '/assume:underscore'***REMOVED***
    def get_flags_opt(self***REMOVED***:
        return ['/Ox', '/fast', '/optimize:5', '/unroll:0', '/math_library:fast'***REMOVED***
    def get_flags_arch(self***REMOVED***:
        return ['/threads'***REMOVED***
    def get_flags_debug(self***REMOVED***:
        return ['/debug'***REMOVED***

if __name__ == '__main__':
    from distutils import log
    log.set_verbosity(2***REMOVED***
    from numpy.distutils.fcompiler import new_fcompiler
    compiler = new_fcompiler(compiler='compaq'***REMOVED***
    compiler.customize(***REMOVED***
    print(compiler.get_version(***REMOVED******REMOVED***
