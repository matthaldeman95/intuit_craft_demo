# Colored log, requires Python 2.3 or up.
from __future__ import division, absolute_import, print_function

import sys
from distutils.log import *
from distutils.log import Log as old_Log
from distutils.log import _global_log

if sys.version_info[0***REMOVED*** < 3:
    from .misc_util import (red_text, default_text, cyan_text, green_text,
            is_sequence, is_string***REMOVED***
else:
    from numpy.distutils.misc_util import (red_text, default_text, cyan_text,
            green_text, is_sequence, is_string***REMOVED***


def _fix_args(args,flag=1***REMOVED***:
    if is_string(args***REMOVED***:
        return args.replace('%', '%%'***REMOVED***
    if flag and is_sequence(args***REMOVED***:
        return tuple([_fix_args(a, flag=0***REMOVED*** for a in args***REMOVED******REMOVED***
    return args


class Log(old_Log***REMOVED***:
    def _log(self, level, msg, args***REMOVED***:
        if level >= self.threshold:
            if args:
                msg = msg % _fix_args(args***REMOVED***
            if 0:
                if msg.startswith('copying '***REMOVED*** and msg.find(' -> '***REMOVED*** != -1:
                    return
                if msg.startswith('byte-compiling '***REMOVED***:
                    return
            print(_global_color_map[level***REMOVED***(msg***REMOVED******REMOVED***
            sys.stdout.flush(***REMOVED***

    def good(self, msg, *args***REMOVED***:
        ***REMOVED***
        If we log WARN messages, log this message as a 'nice' anti-warn
        message.

        ***REMOVED***
        if WARN >= self.threshold:
            if args:
                print(green_text(msg % _fix_args(args***REMOVED******REMOVED******REMOVED***
            else:
                print(green_text(msg***REMOVED******REMOVED***
            sys.stdout.flush(***REMOVED***


_global_log.__class__ = Log

good = _global_log.good

def set_threshold(level, force=False***REMOVED***:
    prev_level = _global_log.threshold
    if prev_level > DEBUG or force:
        # If we're running at DEBUG, don't change the threshold, as there's
        # likely a good reason why we're running at this level.
        _global_log.threshold = level
        if level <= DEBUG:
            info('set_threshold: setting threshold to DEBUG level,'
                    ' it can be changed only with force argument'***REMOVED***
    else:
        info('set_threshold: not changing threshold from DEBUG level'
                ' %s to %s' % (prev_level, level***REMOVED******REMOVED***
    return prev_level


def set_verbosity(v, force=False***REMOVED***:
    prev_level = _global_log.threshold
    if v < 0:
        set_threshold(ERROR, force***REMOVED***
    elif v == 0:
        set_threshold(WARN, force***REMOVED***
    elif v == 1:
        set_threshold(INFO, force***REMOVED***
    elif v >= 2:
        set_threshold(DEBUG, force***REMOVED***
    return {FATAL:-2,ERROR:-1,WARN:0,INFO:1,DEBUG:2***REMOVED***.get(prev_level, 1***REMOVED***


_global_color_map = {
    DEBUG:cyan_text,
    INFO:default_text,
    WARN:red_text,
    ERROR:red_text,
    FATAL:red_text
***REMOVED***

# don't use INFO,.. flags in set_verbosity, these flags are for set_threshold.
set_verbosity(0, force=True***REMOVED***
