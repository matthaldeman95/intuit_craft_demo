from __future__ import division, absolute_import, print_function

import numpy as np
from numpy.testing import TestCase, run_module_suite, assert_, assert_equal

rlevel = 1

class TestRegression(TestCase***REMOVED***:
    def test_kron_matrix(self, level=rlevel***REMOVED***:
        # Ticket #71
        x = np.matrix('[1 0; 1 0***REMOVED***'***REMOVED***
        assert_equal(type(np.kron(x, x***REMOVED******REMOVED***, type(x***REMOVED******REMOVED***

    def test_matrix_properties(self,level=rlevel***REMOVED***:
        # Ticket #125
        a = np.matrix([1.0***REMOVED***, dtype=float***REMOVED***
        assert_(type(a.real***REMOVED*** is np.matrix***REMOVED***
        assert_(type(a.imag***REMOVED*** is np.matrix***REMOVED***
        c, d = np.matrix([0.0***REMOVED******REMOVED***.nonzero(***REMOVED***
        assert_(type(c***REMOVED*** is np.ndarray***REMOVED***
        assert_(type(d***REMOVED*** is np.ndarray***REMOVED***

    def test_matrix_multiply_by_1d_vector(self, level=rlevel***REMOVED***:
        # Ticket #473
        def mul(***REMOVED***:
            np.mat(np.eye(2***REMOVED******REMOVED****np.ones(2***REMOVED***

        self.assertRaises(ValueError, mul***REMOVED***

    def test_matrix_std_argmax(self,level=rlevel***REMOVED***:
        # Ticket #83
        x = np.asmatrix(np.random.uniform(0, 1, (3, 3***REMOVED******REMOVED******REMOVED***
        self.assertEqual(x.std(***REMOVED***.shape, (***REMOVED******REMOVED***
        self.assertEqual(x.argmax(***REMOVED***.shape, (***REMOVED******REMOVED***

if __name__ == "__main__":
    run_module_suite(***REMOVED***
