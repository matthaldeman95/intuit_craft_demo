from __future__ import division, absolute_import, print_function

import collections

import numpy as np
from numpy import matrix, asmatrix, bmat
from numpy.testing import (
    TestCase, run_module_suite, assert_, assert_equal, assert_almost_equal,
    assert_array_equal, assert_array_almost_equal, assert_raises
***REMOVED***
from numpy.matrixlib.defmatrix import matrix_power
from numpy.matrixlib import mat

class TestCtor(TestCase***REMOVED***:
    def test_basic(self***REMOVED***:
        A = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED******REMOVED***
        mA = matrix(A***REMOVED***
        assert_(np.all(mA.A == A***REMOVED******REMOVED***

        B = bmat("A,A;A,A"***REMOVED***
        C = bmat([[A, A***REMOVED***, [A, A***REMOVED******REMOVED******REMOVED***
        D = np.array([[1, 2, 1, 2***REMOVED***,
                      [3, 4, 3, 4***REMOVED***,
                      [1, 2, 1, 2***REMOVED***,
                      [3, 4, 3, 4***REMOVED******REMOVED******REMOVED***
        assert_(np.all(B.A == D***REMOVED******REMOVED***
        assert_(np.all(C.A == D***REMOVED******REMOVED***

        E = np.array([[5, 6***REMOVED***, [7, 8***REMOVED******REMOVED******REMOVED***
        AEresult = matrix([[1, 2, 5, 6***REMOVED***, [3, 4, 7, 8***REMOVED******REMOVED******REMOVED***
        assert_(np.all(bmat([A, E***REMOVED******REMOVED*** == AEresult***REMOVED******REMOVED***

        vec = np.arange(5***REMOVED***
        mvec = matrix(vec***REMOVED***
        assert_(mvec.shape == (1, 5***REMOVED******REMOVED***

    def test_exceptions(self***REMOVED***:
        # Check for TypeError when called with invalid string data.
        assert_raises(TypeError, matrix, "invalid"***REMOVED***

    def test_bmat_nondefault_str(self***REMOVED***:
        A = np.array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED******REMOVED***
        B = np.array([[5, 6***REMOVED***, [7, 8***REMOVED******REMOVED******REMOVED***
        Aresult = np.array([[1, 2, 1, 2***REMOVED***,
                            [3, 4, 3, 4***REMOVED***,
                            [1, 2, 1, 2***REMOVED***,
                            [3, 4, 3, 4***REMOVED******REMOVED******REMOVED***
        mixresult = np.array([[1, 2, 5, 6***REMOVED***,
                              [3, 4, 7, 8***REMOVED***,
                              [5, 6, 1, 2***REMOVED***,
                              [7, 8, 3, 4***REMOVED******REMOVED******REMOVED***
        assert_(np.all(bmat("A,A;A,A"***REMOVED*** == Aresult***REMOVED******REMOVED***
        assert_(np.all(bmat("A,A;A,A", ldict={'A':B***REMOVED******REMOVED*** == Aresult***REMOVED******REMOVED***
        assert_raises(TypeError, bmat, "A,A;A,A", gdict={'A':B***REMOVED******REMOVED***
        assert_(
            np.all(bmat("A,A;A,A", ldict={'A':A***REMOVED***, gdict={'A':B***REMOVED******REMOVED*** == Aresult***REMOVED******REMOVED***
        b2 = bmat("A,B;C,D", ldict={'A':A,'B':B***REMOVED***, gdict={'C':B,'D':A***REMOVED******REMOVED***
        assert_(np.all(b2 == mixresult***REMOVED******REMOVED***


class TestProperties(TestCase***REMOVED***:
    def test_sum(self***REMOVED***:
        ***REMOVED***Test whether matrix.sum(axis=1***REMOVED*** preserves orientation.
        Fails in NumPy <= 0.9.6.2127.
        ***REMOVED***
        M = matrix([[1, 2, 0, 0***REMOVED***,
                   [3, 4, 0, 0***REMOVED***,
                   [1, 2, 1, 2***REMOVED***,
                   [3, 4, 3, 4***REMOVED******REMOVED******REMOVED***
        sum0 = matrix([8, 12, 4, 6***REMOVED******REMOVED***
        sum1 = matrix([3, 7, 6, 14***REMOVED******REMOVED***.T
        sumall = 30
        assert_array_equal(sum0, M.sum(axis=0***REMOVED******REMOVED***
        assert_array_equal(sum1, M.sum(axis=1***REMOVED******REMOVED***
        assert_equal(sumall, M.sum(***REMOVED******REMOVED***

        assert_array_equal(sum0, np.sum(M, axis=0***REMOVED******REMOVED***
        assert_array_equal(sum1, np.sum(M, axis=1***REMOVED******REMOVED***
        assert_equal(sumall, np.sum(M***REMOVED******REMOVED***

    def test_prod(self***REMOVED***:
        x = matrix([[1, 2, 3***REMOVED***, [4, 5, 6***REMOVED******REMOVED******REMOVED***
        assert_equal(x.prod(***REMOVED***, 720***REMOVED***
        assert_equal(x.prod(0***REMOVED***, matrix([[4, 10, 18***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_equal(x.prod(1***REMOVED***, matrix([[6***REMOVED***, [120***REMOVED******REMOVED******REMOVED******REMOVED***

        assert_equal(np.prod(x***REMOVED***, 720***REMOVED***
        assert_equal(np.prod(x, axis=0***REMOVED***, matrix([[4, 10, 18***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_equal(np.prod(x, axis=1***REMOVED***, matrix([[6***REMOVED***, [120***REMOVED******REMOVED******REMOVED******REMOVED***

        y = matrix([0, 1, 3***REMOVED******REMOVED***
        assert_(y.prod(***REMOVED*** == 0***REMOVED***

    def test_max(self***REMOVED***:
        x = matrix([[1, 2, 3***REMOVED***, [4, 5, 6***REMOVED******REMOVED******REMOVED***
        assert_equal(x.max(***REMOVED***, 6***REMOVED***
        assert_equal(x.max(0***REMOVED***, matrix([[4, 5, 6***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_equal(x.max(1***REMOVED***, matrix([[3***REMOVED***, [6***REMOVED******REMOVED******REMOVED******REMOVED***

        assert_equal(np.max(x***REMOVED***, 6***REMOVED***
        assert_equal(np.max(x, axis=0***REMOVED***, matrix([[4, 5, 6***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_equal(np.max(x, axis=1***REMOVED***, matrix([[3***REMOVED***, [6***REMOVED******REMOVED******REMOVED******REMOVED***

    def test_min(self***REMOVED***:
        x = matrix([[1, 2, 3***REMOVED***, [4, 5, 6***REMOVED******REMOVED******REMOVED***
        assert_equal(x.min(***REMOVED***, 1***REMOVED***
        assert_equal(x.min(0***REMOVED***, matrix([[1, 2, 3***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_equal(x.min(1***REMOVED***, matrix([[1***REMOVED***, [4***REMOVED******REMOVED******REMOVED******REMOVED***

        assert_equal(np.min(x***REMOVED***, 1***REMOVED***
        assert_equal(np.min(x, axis=0***REMOVED***, matrix([[1, 2, 3***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_equal(np.min(x, axis=1***REMOVED***, matrix([[1***REMOVED***, [4***REMOVED******REMOVED******REMOVED******REMOVED***

    def test_ptp(self***REMOVED***:
        x = np.arange(4***REMOVED***.reshape((2, 2***REMOVED******REMOVED***
        assert_(x.ptp(***REMOVED*** == 3***REMOVED***
        assert_(np.all(x.ptp(0***REMOVED*** == np.array([2, 2***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_(np.all(x.ptp(1***REMOVED*** == np.array([1, 1***REMOVED******REMOVED******REMOVED******REMOVED***

    def test_var(self***REMOVED***:
        x = np.arange(9***REMOVED***.reshape((3, 3***REMOVED******REMOVED***
        mx = x.view(np.matrix***REMOVED***
        assert_equal(x.var(ddof=0***REMOVED***, mx.var(ddof=0***REMOVED******REMOVED***
        assert_equal(x.var(ddof=1***REMOVED***, mx.var(ddof=1***REMOVED******REMOVED***

    def test_basic(self***REMOVED***:
        import numpy.linalg as linalg

        A = np.array([[1., 2.***REMOVED***,
                      [3., 4.***REMOVED******REMOVED******REMOVED***
        mA = matrix(A***REMOVED***
        assert_(np.allclose(linalg.inv(A***REMOVED***, mA.I***REMOVED******REMOVED***
        assert_(np.all(np.array(np.transpose(A***REMOVED*** == mA.T***REMOVED******REMOVED******REMOVED***
        assert_(np.all(np.array(np.transpose(A***REMOVED*** == mA.H***REMOVED******REMOVED******REMOVED***
        assert_(np.all(A == mA.A***REMOVED******REMOVED***

        B = A + 2j*A
        mB = matrix(B***REMOVED***
        assert_(np.allclose(linalg.inv(B***REMOVED***, mB.I***REMOVED******REMOVED***
        assert_(np.all(np.array(np.transpose(B***REMOVED*** == mB.T***REMOVED******REMOVED******REMOVED***
        assert_(np.all(np.array(np.transpose(B***REMOVED***.conj(***REMOVED*** == mB.H***REMOVED******REMOVED******REMOVED***

    def test_pinv(self***REMOVED***:
        x = matrix(np.arange(6***REMOVED***.reshape(2, 3***REMOVED******REMOVED***
        xpinv = matrix([[-0.77777778,  0.27777778***REMOVED***,
                        [-0.11111111,  0.11111111***REMOVED***,
                        [ 0.55555556, -0.05555556***REMOVED******REMOVED******REMOVED***
        assert_almost_equal(x.I, xpinv***REMOVED***

    def test_comparisons(self***REMOVED***:
        A = np.arange(100***REMOVED***.reshape(10, 10***REMOVED***
        mA = matrix(A***REMOVED***
        mB = matrix(A***REMOVED*** + 0.1
        assert_(np.all(mB == A+0.1***REMOVED******REMOVED***
        assert_(np.all(mB == matrix(A+0.1***REMOVED******REMOVED******REMOVED***
        assert_(not np.any(mB == matrix(A-0.1***REMOVED******REMOVED******REMOVED***
        assert_(np.all(mA < mB***REMOVED******REMOVED***
        assert_(np.all(mA <= mB***REMOVED******REMOVED***
        assert_(np.all(mA <= mA***REMOVED******REMOVED***
        assert_(not np.any(mA < mA***REMOVED******REMOVED***

        assert_(not np.any(mB < mA***REMOVED******REMOVED***
        assert_(np.all(mB >= mA***REMOVED******REMOVED***
        assert_(np.all(mB >= mB***REMOVED******REMOVED***
        assert_(not np.any(mB > mB***REMOVED******REMOVED***

        assert_(np.all(mA == mA***REMOVED******REMOVED***
        assert_(not np.any(mA == mB***REMOVED******REMOVED***
        assert_(np.all(mB != mA***REMOVED******REMOVED***

        assert_(not np.all(abs(mA***REMOVED*** > 0***REMOVED******REMOVED***
        assert_(np.all(abs(mB > 0***REMOVED******REMOVED******REMOVED***

    def test_asmatrix(self***REMOVED***:
        A = np.arange(100***REMOVED***.reshape(10, 10***REMOVED***
        mA = asmatrix(A***REMOVED***
        A[0, 0***REMOVED*** = -10
        assert_(A[0, 0***REMOVED*** == mA[0, 0***REMOVED******REMOVED***

    def test_noaxis(self***REMOVED***:
        A = matrix([[1, 0***REMOVED***, [0, 1***REMOVED******REMOVED******REMOVED***
        assert_(A.sum(***REMOVED*** == matrix(2***REMOVED******REMOVED***
        assert_(A.mean(***REMOVED*** == matrix(0.5***REMOVED******REMOVED***

    def test_repr(self***REMOVED***:
        A = matrix([[1, 0***REMOVED***, [0, 1***REMOVED******REMOVED******REMOVED***
        assert_(repr(A***REMOVED*** == "matrix([[1, 0***REMOVED***,\n        [0, 1***REMOVED******REMOVED******REMOVED***"***REMOVED***

class TestCasting(TestCase***REMOVED***:
    def test_basic(self***REMOVED***:
        A = np.arange(100***REMOVED***.reshape(10, 10***REMOVED***
        mA = matrix(A***REMOVED***

        mB = mA.copy(***REMOVED***
        O = np.ones((10, 10***REMOVED***, np.float64***REMOVED*** * 0.1
        mB = mB + O
        assert_(mB.dtype.type == np.float64***REMOVED***
        assert_(np.all(mA != mB***REMOVED******REMOVED***
        assert_(np.all(mB == mA+0.1***REMOVED******REMOVED***

        mC = mA.copy(***REMOVED***
        O = np.ones((10, 10***REMOVED***, np.complex128***REMOVED***
        mC = mC * O
        assert_(mC.dtype.type == np.complex128***REMOVED***
        assert_(np.all(mA != mB***REMOVED******REMOVED***


class TestAlgebra(TestCase***REMOVED***:
    def test_basic(self***REMOVED***:
        import numpy.linalg as linalg

        A = np.array([[1., 2.***REMOVED***, [3., 4.***REMOVED******REMOVED******REMOVED***
        mA = matrix(A***REMOVED***

        B = np.identity(2***REMOVED***
        for i in range(6***REMOVED***:
            assert_(np.allclose((mA ** i***REMOVED***.A, B***REMOVED******REMOVED***
            B = np.dot(B, A***REMOVED***

        Ainv = linalg.inv(A***REMOVED***
        B = np.identity(2***REMOVED***
        for i in range(6***REMOVED***:
            assert_(np.allclose((mA ** -i***REMOVED***.A, B***REMOVED******REMOVED***
            B = np.dot(B, Ainv***REMOVED***

        assert_(np.allclose((mA * mA***REMOVED***.A, np.dot(A, A***REMOVED******REMOVED******REMOVED***
        assert_(np.allclose((mA + mA***REMOVED***.A, (A + A***REMOVED******REMOVED******REMOVED***
        assert_(np.allclose((3*mA***REMOVED***.A, (3*A***REMOVED******REMOVED******REMOVED***

        mA2 = matrix(A***REMOVED***
        mA2 *= 3
        assert_(np.allclose(mA2.A, 3*A***REMOVED******REMOVED***

    def test_pow(self***REMOVED***:
        ***REMOVED***Test raising a matrix to an integer power works as expected.***REMOVED***
        m = matrix("1. 2.; 3. 4."***REMOVED***
        m2 = m.copy(***REMOVED***
        m2 **= 2
        mi = m.copy(***REMOVED***
        mi **= -1
        m4 = m2.copy(***REMOVED***
        m4 **= 2
        assert_array_almost_equal(m2, m**2***REMOVED***
        assert_array_almost_equal(m4, np.dot(m2, m2***REMOVED******REMOVED***
        assert_array_almost_equal(np.dot(mi, m***REMOVED***, np.eye(2***REMOVED******REMOVED***

    def test_notimplemented(self***REMOVED***:
        '''Check that 'not implemented' operations produce a failure.'''
        A = matrix([[1., 2.***REMOVED***,
                    [3., 4.***REMOVED******REMOVED******REMOVED***

        # __rpow__
        ***REMOVED***
            1.0**A
        except TypeError:
            pass
        else:
            self.fail("matrix.__rpow__ doesn't raise a TypeError"***REMOVED***

        # __mul__ with something not a list, ndarray, tuple, or scalar
        ***REMOVED***
            A*object(***REMOVED***
        except TypeError:
            pass
        else:
            self.fail("matrix.__mul__ with non-numeric object doesn't raise"
                      "a TypeError"***REMOVED***

class TestMatrixReturn(TestCase***REMOVED***:
    def test_instance_methods(self***REMOVED***:
        a = matrix([1.0***REMOVED***, dtype='f8'***REMOVED***
        methodargs = {
            'astype': ('intc',***REMOVED***,
            'clip': (0.0, 1.0***REMOVED***,
            'compress': ([1***REMOVED***,***REMOVED***,
            'repeat': (1,***REMOVED***,
            'reshape': (1,***REMOVED***,
            'swapaxes': (0, 0***REMOVED***,
            'dot': np.array([1.0***REMOVED******REMOVED***,
        ***REMOVED***
        excluded_methods = [
            'argmin', 'choose', 'dump', 'dumps', 'fill', 'getfield',
            'getA', 'getA1', 'item', 'nonzero', 'put', 'putmask', 'resize',
            'searchsorted', 'setflags', 'setfield', 'sort',
            'partition', 'argpartition',
            'take', 'tofile', 'tolist', 'tostring', 'tobytes', 'all', 'any',
            'sum', 'argmax', 'argmin', 'min', 'max', 'mean', 'var', 'ptp',
            'prod', 'std', 'ctypes', 'itemset',
            ***REMOVED***
        for attrib in dir(a***REMOVED***:
            if attrib.startswith('_'***REMOVED*** or attrib in excluded_methods:
                continue
            f = getattr(a, attrib***REMOVED***
            if isinstance(f, collections.Callable***REMOVED***:
                # reset contents of a
                a.astype('f8'***REMOVED***
                a.fill(1.0***REMOVED***
                if attrib in methodargs:
                    args = methodargs[attrib***REMOVED***
                else:
                    args = (***REMOVED***
                b = f(*args***REMOVED***
                assert_(type(b***REMOVED*** is matrix, "%s" % attrib***REMOVED***
        assert_(type(a.real***REMOVED*** is matrix***REMOVED***
        assert_(type(a.imag***REMOVED*** is matrix***REMOVED***
        c, d = matrix([0.0***REMOVED******REMOVED***.nonzero(***REMOVED***
        assert_(type(c***REMOVED*** is np.ndarray***REMOVED***
        assert_(type(d***REMOVED*** is np.ndarray***REMOVED***


class TestIndexing(TestCase***REMOVED***:
    def test_basic(self***REMOVED***:
        x = asmatrix(np.zeros((3, 2***REMOVED***, float***REMOVED******REMOVED***
        y = np.zeros((3, 1***REMOVED***, float***REMOVED***
        y[:, 0***REMOVED*** = [0.8, 0.2, 0.3***REMOVED***
        x[:, 1***REMOVED*** = y > 0.5
        assert_equal(x, [[0, 1***REMOVED***, [0, 0***REMOVED***, [0, 0***REMOVED******REMOVED******REMOVED***


class TestNewScalarIndexing(TestCase***REMOVED***:
    def setUp(self***REMOVED***:
        self.a = matrix([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED******REMOVED***

    def test_dimesions(self***REMOVED***:
        a = self.a
        x = a[0***REMOVED***
        assert_equal(x.ndim, 2***REMOVED***

    def test_array_from_matrix_list(self***REMOVED***:
        a = self.a
        x = np.array([a, a***REMOVED******REMOVED***
        assert_equal(x.shape, [2, 2, 2***REMOVED******REMOVED***

    def test_array_to_list(self***REMOVED***:
        a = self.a
        assert_equal(a.tolist(***REMOVED***, [[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED******REMOVED***

    def test_fancy_indexing(self***REMOVED***:
        a = self.a
        x = a[1, [0, 1, 0***REMOVED******REMOVED***
        assert_(isinstance(x, matrix***REMOVED******REMOVED***
        assert_equal(x, matrix([[3,  4,  3***REMOVED******REMOVED******REMOVED******REMOVED***
        x = a[[1, 0***REMOVED******REMOVED***
        assert_(isinstance(x, matrix***REMOVED******REMOVED***
        assert_equal(x, matrix([[3,  4***REMOVED***, [1, 2***REMOVED******REMOVED******REMOVED******REMOVED***
        x = a[[[1***REMOVED***, [0***REMOVED******REMOVED***, [[1, 0***REMOVED***, [0, 1***REMOVED******REMOVED******REMOVED***
        assert_(isinstance(x, matrix***REMOVED******REMOVED***
        assert_equal(x, matrix([[4,  3***REMOVED***, [1,  2***REMOVED******REMOVED******REMOVED******REMOVED***

    def test_matrix_element(self***REMOVED***:
        x = matrix([[1, 2, 3***REMOVED***, [4, 5, 6***REMOVED******REMOVED******REMOVED***
        assert_equal(x[0***REMOVED***[0***REMOVED***, matrix([[1, 2, 3***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_equal(x[0***REMOVED***[0***REMOVED***.shape, (1, 3***REMOVED******REMOVED***
        assert_equal(x[0***REMOVED***.shape, (1, 3***REMOVED******REMOVED***
        assert_equal(x[:, 0***REMOVED***.shape, (2, 1***REMOVED******REMOVED***

        x = matrix(0***REMOVED***
        assert_equal(x[0, 0***REMOVED***, 0***REMOVED***
        assert_equal(x[0***REMOVED***, 0***REMOVED***
        assert_equal(x[:, 0***REMOVED***.shape, x.shape***REMOVED***

    def test_scalar_indexing(self***REMOVED***:
        x = asmatrix(np.zeros((3, 2***REMOVED***, float***REMOVED******REMOVED***
        assert_equal(x[0, 0***REMOVED***, x[0***REMOVED***[0***REMOVED******REMOVED***

    def test_row_column_indexing(self***REMOVED***:
        x = asmatrix(np.eye(2***REMOVED******REMOVED***
        assert_array_equal(x[0,:***REMOVED***, [[1, 0***REMOVED******REMOVED******REMOVED***
        assert_array_equal(x[1,:***REMOVED***, [[0, 1***REMOVED******REMOVED******REMOVED***
        assert_array_equal(x[:, 0***REMOVED***, [[1***REMOVED***, [0***REMOVED******REMOVED******REMOVED***
        assert_array_equal(x[:, 1***REMOVED***, [[0***REMOVED***, [1***REMOVED******REMOVED******REMOVED***

    def test_boolean_indexing(self***REMOVED***:
        A = np.arange(6***REMOVED***
        A.shape = (3, 2***REMOVED***
        x = asmatrix(A***REMOVED***
        assert_array_equal(x[:, np.array([True, False***REMOVED******REMOVED******REMOVED***, x[:, 0***REMOVED******REMOVED***
        assert_array_equal(x[np.array([True, False, False***REMOVED******REMOVED***,:***REMOVED***, x[0,:***REMOVED******REMOVED***

    def test_list_indexing(self***REMOVED***:
        A = np.arange(6***REMOVED***
        A.shape = (3, 2***REMOVED***
        x = asmatrix(A***REMOVED***
        assert_array_equal(x[:, [1, 0***REMOVED******REMOVED***, x[:, ::-1***REMOVED******REMOVED***
        assert_array_equal(x[[2, 1, 0***REMOVED***,:***REMOVED***, x[::-1,:***REMOVED******REMOVED***


class TestPower(TestCase***REMOVED***:
    def test_returntype(self***REMOVED***:
        a = np.array([[0, 1***REMOVED***, [0, 0***REMOVED******REMOVED******REMOVED***
        assert_(type(matrix_power(a, 2***REMOVED******REMOVED*** is np.ndarray***REMOVED***
        a = mat(a***REMOVED***
        assert_(type(matrix_power(a, 2***REMOVED******REMOVED*** is matrix***REMOVED***

    def test_list(self***REMOVED***:
        assert_array_equal(matrix_power([[0, 1***REMOVED***, [0, 0***REMOVED******REMOVED***, 2***REMOVED***, [[0, 0***REMOVED***, [0, 0***REMOVED******REMOVED******REMOVED***


class TestShape(TestCase***REMOVED***:
    def setUp(self***REMOVED***:
        self.a = np.array([[1***REMOVED***, [2***REMOVED******REMOVED******REMOVED***
        self.m = matrix([[1***REMOVED***, [2***REMOVED******REMOVED******REMOVED***

    def test_shape(self***REMOVED***:
        assert_equal(self.a.shape, (2, 1***REMOVED******REMOVED***
        assert_equal(self.m.shape, (2, 1***REMOVED******REMOVED***

    def test_numpy_ravel(self***REMOVED***:
        assert_equal(np.ravel(self.a***REMOVED***.shape, (2,***REMOVED******REMOVED***
        assert_equal(np.ravel(self.m***REMOVED***.shape, (2,***REMOVED******REMOVED***

    def test_member_ravel(self***REMOVED***:
        assert_equal(self.a.ravel(***REMOVED***.shape, (2,***REMOVED******REMOVED***
        assert_equal(self.m.ravel(***REMOVED***.shape, (1, 2***REMOVED******REMOVED***

    def test_member_flatten(self***REMOVED***:
        assert_equal(self.a.flatten(***REMOVED***.shape, (2,***REMOVED******REMOVED***
        assert_equal(self.m.flatten(***REMOVED***.shape, (1, 2***REMOVED******REMOVED***

    def test_numpy_ravel_order(self***REMOVED***:
        x = np.array([[1, 2, 3***REMOVED***, [4, 5, 6***REMOVED******REMOVED******REMOVED***
        assert_equal(np.ravel(x***REMOVED***, [1, 2, 3, 4, 5, 6***REMOVED******REMOVED***
        assert_equal(np.ravel(x, order='F'***REMOVED***, [1, 4, 2, 5, 3, 6***REMOVED******REMOVED***
        assert_equal(np.ravel(x.T***REMOVED***, [1, 4, 2, 5, 3, 6***REMOVED******REMOVED***
        assert_equal(np.ravel(x.T, order='A'***REMOVED***, [1, 2, 3, 4, 5, 6***REMOVED******REMOVED***
        x = matrix([[1, 2, 3***REMOVED***, [4, 5, 6***REMOVED******REMOVED******REMOVED***
        assert_equal(np.ravel(x***REMOVED***, [1, 2, 3, 4, 5, 6***REMOVED******REMOVED***
        assert_equal(np.ravel(x, order='F'***REMOVED***, [1, 4, 2, 5, 3, 6***REMOVED******REMOVED***
        assert_equal(np.ravel(x.T***REMOVED***, [1, 4, 2, 5, 3, 6***REMOVED******REMOVED***
        assert_equal(np.ravel(x.T, order='A'***REMOVED***, [1, 2, 3, 4, 5, 6***REMOVED******REMOVED***

    def test_matrix_ravel_order(self***REMOVED***:
        x = matrix([[1, 2, 3***REMOVED***, [4, 5, 6***REMOVED******REMOVED******REMOVED***
        assert_equal(x.ravel(***REMOVED***, [[1, 2, 3, 4, 5, 6***REMOVED******REMOVED******REMOVED***
        assert_equal(x.ravel(order='F'***REMOVED***, [[1, 4, 2, 5, 3, 6***REMOVED******REMOVED******REMOVED***
        assert_equal(x.T.ravel(***REMOVED***, [[1, 4, 2, 5, 3, 6***REMOVED******REMOVED******REMOVED***
        assert_equal(x.T.ravel(order='A'***REMOVED***, [[1, 2, 3, 4, 5, 6***REMOVED******REMOVED******REMOVED***

    def test_array_memory_sharing(self***REMOVED***:
        assert_(np.may_share_memory(self.a, self.a.ravel(***REMOVED******REMOVED******REMOVED***
        assert_(not np.may_share_memory(self.a, self.a.flatten(***REMOVED******REMOVED******REMOVED***

    def test_matrix_memory_sharing(self***REMOVED***:
        assert_(np.may_share_memory(self.m, self.m.ravel(***REMOVED******REMOVED******REMOVED***
        assert_(not np.may_share_memory(self.m, self.m.flatten(***REMOVED******REMOVED******REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
