***REMOVED***Tests for polynomial module.

***REMOVED***
from __future__ import division, absolute_import, print_function

import numpy as np
import numpy.polynomial.polynomial as poly
from numpy.testing import (
    TestCase, assert_almost_equal, assert_raises,
    assert_equal, assert_, run_module_suite***REMOVED***


def trim(x***REMOVED***:
    return poly.polytrim(x, tol=1e-6***REMOVED***

T0 = [1***REMOVED***
T1 = [0, 1***REMOVED***
T2 = [-1, 0, 2***REMOVED***
T3 = [0, -3, 0, 4***REMOVED***
T4 = [1, 0, -8, 0, 8***REMOVED***
T5 = [0, 5, 0, -20, 0, 16***REMOVED***
T6 = [-1, 0, 18, 0, -48, 0, 32***REMOVED***
T7 = [0, -7, 0, 56, 0, -112, 0, 64***REMOVED***
T8 = [1, 0, -32, 0, 160, 0, -256, 0, 128***REMOVED***
T9 = [0, 9, 0, -120, 0, 432, 0, -576, 0, 256***REMOVED***

Tlist = [T0, T1, T2, T3, T4, T5, T6, T7, T8, T9***REMOVED***


class TestConstants(TestCase***REMOVED***:

    def test_polydomain(self***REMOVED***:
        assert_equal(poly.polydomain, [-1, 1***REMOVED******REMOVED***

    def test_polyzero(self***REMOVED***:
        assert_equal(poly.polyzero, [0***REMOVED******REMOVED***

    def test_polyone(self***REMOVED***:
        assert_equal(poly.polyone, [1***REMOVED******REMOVED***

    def test_polyx(self***REMOVED***:
        assert_equal(poly.polyx, [0, 1***REMOVED******REMOVED***


class TestArithmetic(TestCase***REMOVED***:

    def test_polyadd(self***REMOVED***:
        for i in range(5***REMOVED***:
            for j in range(5***REMOVED***:
                msg = "At i=%d, j=%d" % (i, j***REMOVED***
                tgt = np.zeros(max(i, j***REMOVED*** + 1***REMOVED***
                tgt[i***REMOVED*** += 1
                tgt[j***REMOVED*** += 1
                res = poly.polyadd([0***REMOVED****i + [1***REMOVED***, [0***REMOVED****j + [1***REMOVED******REMOVED***
                assert_equal(trim(res***REMOVED***, trim(tgt***REMOVED***, err_msg=msg***REMOVED***

    def test_polysub(self***REMOVED***:
        for i in range(5***REMOVED***:
            for j in range(5***REMOVED***:
                msg = "At i=%d, j=%d" % (i, j***REMOVED***
                tgt = np.zeros(max(i, j***REMOVED*** + 1***REMOVED***
                tgt[i***REMOVED*** += 1
                tgt[j***REMOVED*** -= 1
                res = poly.polysub([0***REMOVED****i + [1***REMOVED***, [0***REMOVED****j + [1***REMOVED******REMOVED***
                assert_equal(trim(res***REMOVED***, trim(tgt***REMOVED***, err_msg=msg***REMOVED***

    def test_polymulx(self***REMOVED***:
        assert_equal(poly.polymulx([0***REMOVED******REMOVED***, [0***REMOVED******REMOVED***
        assert_equal(poly.polymulx([1***REMOVED******REMOVED***, [0, 1***REMOVED******REMOVED***
        for i in range(1, 5***REMOVED***:
            ser = [0***REMOVED****i + [1***REMOVED***
            tgt = [0***REMOVED****(i + 1***REMOVED*** + [1***REMOVED***
            assert_equal(poly.polymulx(ser***REMOVED***, tgt***REMOVED***

    def test_polymul(self***REMOVED***:
        for i in range(5***REMOVED***:
            for j in range(5***REMOVED***:
                msg = "At i=%d, j=%d" % (i, j***REMOVED***
                tgt = np.zeros(i + j + 1***REMOVED***
                tgt[i + j***REMOVED*** += 1
                res = poly.polymul([0***REMOVED****i + [1***REMOVED***, [0***REMOVED****j + [1***REMOVED******REMOVED***
                assert_equal(trim(res***REMOVED***, trim(tgt***REMOVED***, err_msg=msg***REMOVED***

    def test_polydiv(self***REMOVED***:
        # check zero division
        assert_raises(ZeroDivisionError, poly.polydiv, [1***REMOVED***, [0***REMOVED******REMOVED***

        # check scalar division
        quo, rem = poly.polydiv([2***REMOVED***, [2***REMOVED******REMOVED***
        assert_equal((quo, rem***REMOVED***, (1, 0***REMOVED******REMOVED***
        quo, rem = poly.polydiv([2, 2***REMOVED***, [2***REMOVED******REMOVED***
        assert_equal((quo, rem***REMOVED***, ((1, 1***REMOVED***, 0***REMOVED******REMOVED***

        # check rest.
        for i in range(5***REMOVED***:
            for j in range(5***REMOVED***:
                msg = "At i=%d, j=%d" % (i, j***REMOVED***
                ci = [0***REMOVED****i + [1, 2***REMOVED***
                cj = [0***REMOVED****j + [1, 2***REMOVED***
                tgt = poly.polyadd(ci, cj***REMOVED***
                quo, rem = poly.polydiv(tgt, ci***REMOVED***
                res = poly.polyadd(poly.polymul(quo, ci***REMOVED***, rem***REMOVED***
                assert_equal(res, tgt, err_msg=msg***REMOVED***


class TestEvaluation(TestCase***REMOVED***:
    # coefficients of 1 + 2*x + 3*x**2
    c1d = np.array([1., 2., 3.***REMOVED******REMOVED***
    c2d = np.einsum('i,j->ij', c1d, c1d***REMOVED***
    c3d = np.einsum('i,j,k->ijk', c1d, c1d, c1d***REMOVED***

    # some random values in [-1, 1***REMOVED***
    x = np.random.random((3, 5***REMOVED******REMOVED****2 - 1
    y = poly.polyval(x, [1., 2., 3.***REMOVED******REMOVED***

    def test_polyval(self***REMOVED***:
        #check empty input
        assert_equal(poly.polyval([***REMOVED***, [1***REMOVED******REMOVED***.size, 0***REMOVED***

        #check normal input***REMOVED***
        x = np.linspace(-1, 1***REMOVED***
        y = [x**i for i in range(5***REMOVED******REMOVED***
        for i in range(5***REMOVED***:
            tgt = y[i***REMOVED***
            res = poly.polyval(x, [0***REMOVED****i + [1***REMOVED******REMOVED***
            assert_almost_equal(res, tgt***REMOVED***
        tgt = x*(x**2 - 1***REMOVED***
        res = poly.polyval(x, [0, -1, 0, 1***REMOVED******REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        #check that shape is preserved
        for i in range(3***REMOVED***:
            dims = [2***REMOVED****i
            x = np.zeros(dims***REMOVED***
            assert_equal(poly.polyval(x, [1***REMOVED******REMOVED***.shape, dims***REMOVED***
            assert_equal(poly.polyval(x, [1, 0***REMOVED******REMOVED***.shape, dims***REMOVED***
            assert_equal(poly.polyval(x, [1, 0, 0***REMOVED******REMOVED***.shape, dims***REMOVED***

    def test_polyval2d(self***REMOVED***:
        x1, x2, x3 = self.x
        y1, y2, y3 = self.y

        #test exceptions
        assert_raises(ValueError, poly.polyval2d, x1, x2[:2***REMOVED***, self.c2d***REMOVED***

        #test values
        tgt = y1*y2
        res = poly.polyval2d(x1, x2, self.c2d***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        #test shape
        z = np.ones((2, 3***REMOVED******REMOVED***
        res = poly.polyval2d(z, z, self.c2d***REMOVED***
        assert_(res.shape == (2, 3***REMOVED******REMOVED***

    def test_polyval3d(self***REMOVED***:
        x1, x2, x3 = self.x
        y1, y2, y3 = self.y

        #test exceptions
        assert_raises(ValueError, poly.polyval3d, x1, x2, x3[:2***REMOVED***, self.c3d***REMOVED***

        #test values
        tgt = y1*y2*y3
        res = poly.polyval3d(x1, x2, x3, self.c3d***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        #test shape
        z = np.ones((2, 3***REMOVED******REMOVED***
        res = poly.polyval3d(z, z, z, self.c3d***REMOVED***
        assert_(res.shape == (2, 3***REMOVED******REMOVED***

    def test_polygrid2d(self***REMOVED***:
        x1, x2, x3 = self.x
        y1, y2, y3 = self.y

        #test values
        tgt = np.einsum('i,j->ij', y1, y2***REMOVED***
        res = poly.polygrid2d(x1, x2, self.c2d***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        #test shape
        z = np.ones((2, 3***REMOVED******REMOVED***
        res = poly.polygrid2d(z, z, self.c2d***REMOVED***
        assert_(res.shape == (2, 3***REMOVED****2***REMOVED***

    def test_polygrid3d(self***REMOVED***:
        x1, x2, x3 = self.x
        y1, y2, y3 = self.y

        #test values
        tgt = np.einsum('i,j,k->ijk', y1, y2, y3***REMOVED***
        res = poly.polygrid3d(x1, x2, x3, self.c3d***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        #test shape
        z = np.ones((2, 3***REMOVED******REMOVED***
        res = poly.polygrid3d(z, z, z, self.c3d***REMOVED***
        assert_(res.shape == (2, 3***REMOVED****3***REMOVED***


class TestIntegral(TestCase***REMOVED***:

    def test_polyint(self***REMOVED***:
        # check exceptions
        assert_raises(ValueError, poly.polyint, [0***REMOVED***, .5***REMOVED***
        assert_raises(ValueError, poly.polyint, [0***REMOVED***, -1***REMOVED***
        assert_raises(ValueError, poly.polyint, [0***REMOVED***, 1, [0, 0***REMOVED******REMOVED***

        # test integration of zero polynomial
        for i in range(2, 5***REMOVED***:
            k = [0***REMOVED****(i - 2***REMOVED*** + [1***REMOVED***
            res = poly.polyint([0***REMOVED***, m=i, k=k***REMOVED***
            assert_almost_equal(res, [0, 1***REMOVED******REMOVED***

        # check single integration with integration constant
        for i in range(5***REMOVED***:
            scl = i + 1
            pol = [0***REMOVED****i + [1***REMOVED***
            tgt = [i***REMOVED*** + [0***REMOVED****i + [1/scl***REMOVED***
            res = poly.polyint(pol, m=1, k=[i***REMOVED******REMOVED***
            assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

        # check single integration with integration constant and lbnd
        for i in range(5***REMOVED***:
            scl = i + 1
            pol = [0***REMOVED****i + [1***REMOVED***
            res = poly.polyint(pol, m=1, k=[i***REMOVED***, lbnd=-1***REMOVED***
            assert_almost_equal(poly.polyval(-1, res***REMOVED***, i***REMOVED***

        # check single integration with integration constant and scaling
        for i in range(5***REMOVED***:
            scl = i + 1
            pol = [0***REMOVED****i + [1***REMOVED***
            tgt = [i***REMOVED*** + [0***REMOVED****i + [2/scl***REMOVED***
            res = poly.polyint(pol, m=1, k=[i***REMOVED***, scl=2***REMOVED***
            assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

        # check multiple integrations with default k
        for i in range(5***REMOVED***:
            for j in range(2, 5***REMOVED***:
                pol = [0***REMOVED****i + [1***REMOVED***
                tgt = pol[:***REMOVED***
                for k in range(j***REMOVED***:
                    tgt = poly.polyint(tgt, m=1***REMOVED***
                res = poly.polyint(pol, m=j***REMOVED***
                assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

        # check multiple integrations with defined k
        for i in range(5***REMOVED***:
            for j in range(2, 5***REMOVED***:
                pol = [0***REMOVED****i + [1***REMOVED***
                tgt = pol[:***REMOVED***
                for k in range(j***REMOVED***:
                    tgt = poly.polyint(tgt, m=1, k=[k***REMOVED******REMOVED***
                res = poly.polyint(pol, m=j, k=list(range(j***REMOVED******REMOVED******REMOVED***
                assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

        # check multiple integrations with lbnd
        for i in range(5***REMOVED***:
            for j in range(2, 5***REMOVED***:
                pol = [0***REMOVED****i + [1***REMOVED***
                tgt = pol[:***REMOVED***
                for k in range(j***REMOVED***:
                    tgt = poly.polyint(tgt, m=1, k=[k***REMOVED***, lbnd=-1***REMOVED***
                res = poly.polyint(pol, m=j, k=list(range(j***REMOVED******REMOVED***, lbnd=-1***REMOVED***
                assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

        # check multiple integrations with scaling
        for i in range(5***REMOVED***:
            for j in range(2, 5***REMOVED***:
                pol = [0***REMOVED****i + [1***REMOVED***
                tgt = pol[:***REMOVED***
                for k in range(j***REMOVED***:
                    tgt = poly.polyint(tgt, m=1, k=[k***REMOVED***, scl=2***REMOVED***
                res = poly.polyint(pol, m=j, k=list(range(j***REMOVED******REMOVED***, scl=2***REMOVED***
                assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

    def test_polyint_axis(self***REMOVED***:
        # check that axis keyword works
        c2d = np.random.random((3, 4***REMOVED******REMOVED***

        tgt = np.vstack([poly.polyint(c***REMOVED*** for c in c2d.T***REMOVED******REMOVED***.T
        res = poly.polyint(c2d, axis=0***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        tgt = np.vstack([poly.polyint(c***REMOVED*** for c in c2d***REMOVED******REMOVED***
        res = poly.polyint(c2d, axis=1***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        tgt = np.vstack([poly.polyint(c, k=3***REMOVED*** for c in c2d***REMOVED******REMOVED***
        res = poly.polyint(c2d, k=3, axis=1***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***


class TestDerivative(TestCase***REMOVED***:

    def test_polyder(self***REMOVED***:
        # check exceptions
        assert_raises(ValueError, poly.polyder, [0***REMOVED***, .5***REMOVED***
        assert_raises(ValueError, poly.polyder, [0***REMOVED***, -1***REMOVED***

        # check that zeroth deriviative does nothing
        for i in range(5***REMOVED***:
            tgt = [0***REMOVED****i + [1***REMOVED***
            res = poly.polyder(tgt, m=0***REMOVED***
            assert_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

        # check that derivation is the inverse of integration
        for i in range(5***REMOVED***:
            for j in range(2, 5***REMOVED***:
                tgt = [0***REMOVED****i + [1***REMOVED***
                res = poly.polyder(poly.polyint(tgt, m=j***REMOVED***, m=j***REMOVED***
                assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

        # check derivation with scaling
        for i in range(5***REMOVED***:
            for j in range(2, 5***REMOVED***:
                tgt = [0***REMOVED****i + [1***REMOVED***
                res = poly.polyder(poly.polyint(tgt, m=j, scl=2***REMOVED***, m=j, scl=.5***REMOVED***
                assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

    def test_polyder_axis(self***REMOVED***:
        # check that axis keyword works
        c2d = np.random.random((3, 4***REMOVED******REMOVED***

        tgt = np.vstack([poly.polyder(c***REMOVED*** for c in c2d.T***REMOVED******REMOVED***.T
        res = poly.polyder(c2d, axis=0***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        tgt = np.vstack([poly.polyder(c***REMOVED*** for c in c2d***REMOVED******REMOVED***
        res = poly.polyder(c2d, axis=1***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***


class TestVander(TestCase***REMOVED***:
    # some random values in [-1, 1***REMOVED***
    x = np.random.random((3, 5***REMOVED******REMOVED****2 - 1

    def test_polyvander(self***REMOVED***:
        # check for 1d x
        x = np.arange(3***REMOVED***
        v = poly.polyvander(x, 3***REMOVED***
        assert_(v.shape == (3, 4***REMOVED******REMOVED***
        for i in range(4***REMOVED***:
            coef = [0***REMOVED****i + [1***REMOVED***
            assert_almost_equal(v[..., i***REMOVED***, poly.polyval(x, coef***REMOVED******REMOVED***

        # check for 2d x
        x = np.array([[1, 2***REMOVED***, [3, 4***REMOVED***, [5, 6***REMOVED******REMOVED******REMOVED***
        v = poly.polyvander(x, 3***REMOVED***
        assert_(v.shape == (3, 2, 4***REMOVED******REMOVED***
        for i in range(4***REMOVED***:
            coef = [0***REMOVED****i + [1***REMOVED***
            assert_almost_equal(v[..., i***REMOVED***, poly.polyval(x, coef***REMOVED******REMOVED***

    def test_polyvander2d(self***REMOVED***:
        # also tests polyval2d for non-square coefficient array
        x1, x2, x3 = self.x
        c = np.random.random((2, 3***REMOVED******REMOVED***
        van = poly.polyvander2d(x1, x2, [1, 2***REMOVED******REMOVED***
        tgt = poly.polyval2d(x1, x2, c***REMOVED***
        res = np.dot(van, c.flat***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        # check shape
        van = poly.polyvander2d([x1***REMOVED***, [x2***REMOVED***, [1, 2***REMOVED******REMOVED***
        assert_(van.shape == (1, 5, 6***REMOVED******REMOVED***

    def test_polyvander3d(self***REMOVED***:
        # also tests polyval3d for non-square coefficient array
        x1, x2, x3 = self.x
        c = np.random.random((2, 3, 4***REMOVED******REMOVED***
        van = poly.polyvander3d(x1, x2, x3, [1, 2, 3***REMOVED******REMOVED***
        tgt = poly.polyval3d(x1, x2, x3, c***REMOVED***
        res = np.dot(van, c.flat***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        # check shape
        van = poly.polyvander3d([x1***REMOVED***, [x2***REMOVED***, [x3***REMOVED***, [1, 2, 3***REMOVED******REMOVED***
        assert_(van.shape == (1, 5, 24***REMOVED******REMOVED***


class TestCompanion(TestCase***REMOVED***:

    def test_raises(self***REMOVED***:
        assert_raises(ValueError, poly.polycompanion, [***REMOVED******REMOVED***
        assert_raises(ValueError, poly.polycompanion, [1***REMOVED******REMOVED***

    def test_dimensions(self***REMOVED***:
        for i in range(1, 5***REMOVED***:
            coef = [0***REMOVED****i + [1***REMOVED***
            assert_(poly.polycompanion(coef***REMOVED***.shape == (i, i***REMOVED******REMOVED***

    def test_linear_root(self***REMOVED***:
        assert_(poly.polycompanion([1, 2***REMOVED******REMOVED***[0, 0***REMOVED*** == -.5***REMOVED***


class TestMisc(TestCase***REMOVED***:

    def test_polyfromroots(self***REMOVED***:
        res = poly.polyfromroots([***REMOVED******REMOVED***
        assert_almost_equal(trim(res***REMOVED***, [1***REMOVED******REMOVED***
        for i in range(1, 5***REMOVED***:
            roots = np.cos(np.linspace(-np.pi, 0, 2*i + 1***REMOVED***[1::2***REMOVED******REMOVED***
            tgt = Tlist[i***REMOVED***
            res = poly.polyfromroots(roots***REMOVED****2**(i-1***REMOVED***
            assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

    def test_polyroots(self***REMOVED***:
        assert_almost_equal(poly.polyroots([1***REMOVED******REMOVED***, [***REMOVED******REMOVED***
        assert_almost_equal(poly.polyroots([1, 2***REMOVED******REMOVED***, [-.5***REMOVED******REMOVED***
        for i in range(2, 5***REMOVED***:
            tgt = np.linspace(-1, 1, i***REMOVED***
            res = poly.polyroots(poly.polyfromroots(tgt***REMOVED******REMOVED***
            assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

    def test_polyfit(self***REMOVED***:
        def f(x***REMOVED***:
            return x*(x - 1***REMOVED****(x - 2***REMOVED***

        def f2(x***REMOVED***:
            return x**4 + x**2 + 1

        # Test exceptions
        assert_raises(ValueError, poly.polyfit, [1***REMOVED***, [1***REMOVED***, -1***REMOVED***
        assert_raises(TypeError, poly.polyfit, [[1***REMOVED******REMOVED***, [1***REMOVED***, 0***REMOVED***
        assert_raises(TypeError, poly.polyfit, [***REMOVED***, [1***REMOVED***, 0***REMOVED***
        assert_raises(TypeError, poly.polyfit, [1***REMOVED***, [[[1***REMOVED******REMOVED******REMOVED***, 0***REMOVED***
        assert_raises(TypeError, poly.polyfit, [1, 2***REMOVED***, [1***REMOVED***, 0***REMOVED***
        assert_raises(TypeError, poly.polyfit, [1***REMOVED***, [1, 2***REMOVED***, 0***REMOVED***
        assert_raises(TypeError, poly.polyfit, [1***REMOVED***, [1***REMOVED***, 0, w=[[1***REMOVED******REMOVED******REMOVED***
        assert_raises(TypeError, poly.polyfit, [1***REMOVED***, [1***REMOVED***, 0, w=[1, 1***REMOVED******REMOVED***
        assert_raises(ValueError, poly.polyfit, [1***REMOVED***, [1***REMOVED***, [-1,***REMOVED******REMOVED***
        assert_raises(ValueError, poly.polyfit, [1***REMOVED***, [1***REMOVED***, [2, -1, 6***REMOVED******REMOVED***
        assert_raises(TypeError, poly.polyfit, [1***REMOVED***, [1***REMOVED***, [***REMOVED******REMOVED***

        # Test fit
        x = np.linspace(0, 2***REMOVED***
        y = f(x***REMOVED***
        #
        coef3 = poly.polyfit(x, y, 3***REMOVED***
        assert_equal(len(coef3***REMOVED***, 4***REMOVED***
        assert_almost_equal(poly.polyval(x, coef3***REMOVED***, y***REMOVED***
        coef3 = poly.polyfit(x, y, [0, 1, 2, 3***REMOVED******REMOVED***
        assert_equal(len(coef3***REMOVED***, 4***REMOVED***
        assert_almost_equal(poly.polyval(x, coef3***REMOVED***, y***REMOVED***
        #
        coef4 = poly.polyfit(x, y, 4***REMOVED***
        assert_equal(len(coef4***REMOVED***, 5***REMOVED***
        assert_almost_equal(poly.polyval(x, coef4***REMOVED***, y***REMOVED***
        coef4 = poly.polyfit(x, y, [0, 1, 2, 3, 4***REMOVED******REMOVED***
        assert_equal(len(coef4***REMOVED***, 5***REMOVED***
        assert_almost_equal(poly.polyval(x, coef4***REMOVED***, y***REMOVED***
        #
        coef2d = poly.polyfit(x, np.array([y, y***REMOVED******REMOVED***.T, 3***REMOVED***
        assert_almost_equal(coef2d, np.array([coef3, coef3***REMOVED******REMOVED***.T***REMOVED***
        coef2d = poly.polyfit(x, np.array([y, y***REMOVED******REMOVED***.T, [0, 1, 2, 3***REMOVED******REMOVED***
        assert_almost_equal(coef2d, np.array([coef3, coef3***REMOVED******REMOVED***.T***REMOVED***
        # test weighting
        w = np.zeros_like(x***REMOVED***
        yw = y.copy(***REMOVED***
        w[1::2***REMOVED*** = 1
        yw[0::2***REMOVED*** = 0
        wcoef3 = poly.polyfit(x, yw, 3, w=w***REMOVED***
        assert_almost_equal(wcoef3, coef3***REMOVED***
        wcoef3 = poly.polyfit(x, yw, [0, 1, 2, 3***REMOVED***, w=w***REMOVED***
        assert_almost_equal(wcoef3, coef3***REMOVED***
        #
        wcoef2d = poly.polyfit(x, np.array([yw, yw***REMOVED******REMOVED***.T, 3, w=w***REMOVED***
        assert_almost_equal(wcoef2d, np.array([coef3, coef3***REMOVED******REMOVED***.T***REMOVED***
        wcoef2d = poly.polyfit(x, np.array([yw, yw***REMOVED******REMOVED***.T, [0, 1, 2, 3***REMOVED***, w=w***REMOVED***
        assert_almost_equal(wcoef2d, np.array([coef3, coef3***REMOVED******REMOVED***.T***REMOVED***
        # test scaling with complex values x points whose square
        # is zero when summed.
        x = [1, 1j, -1, -1j***REMOVED***
        assert_almost_equal(poly.polyfit(x, x, 1***REMOVED***, [0, 1***REMOVED******REMOVED***
        assert_almost_equal(poly.polyfit(x, x, [0, 1***REMOVED******REMOVED***, [0, 1***REMOVED******REMOVED***
        # test fitting only even Polyendre polynomials
        x = np.linspace(-1, 1***REMOVED***
        y = f2(x***REMOVED***
        coef1 = poly.polyfit(x, y, 4***REMOVED***
        assert_almost_equal(poly.polyval(x, coef1***REMOVED***, y***REMOVED***
        coef2 = poly.polyfit(x, y, [0, 2, 4***REMOVED******REMOVED***
        assert_almost_equal(poly.polyval(x, coef2***REMOVED***, y***REMOVED***
        assert_almost_equal(coef1, coef2***REMOVED***

    def test_polytrim(self***REMOVED***:
        coef = [2, -1, 1, 0***REMOVED***

        # Test exceptions
        assert_raises(ValueError, poly.polytrim, coef, -1***REMOVED***

        # Test results
        assert_equal(poly.polytrim(coef***REMOVED***, coef[:-1***REMOVED******REMOVED***
        assert_equal(poly.polytrim(coef, 1***REMOVED***, coef[:-3***REMOVED******REMOVED***
        assert_equal(poly.polytrim(coef, 2***REMOVED***, [0***REMOVED******REMOVED***

    def test_polyline(self***REMOVED***:
        assert_equal(poly.polyline(3, 4***REMOVED***, [3, 4***REMOVED******REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
