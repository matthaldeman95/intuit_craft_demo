***REMOVED***Tests for laguerre module.

***REMOVED***
from __future__ import division, absolute_import, print_function

import numpy as np
import numpy.polynomial.laguerre as lag
from numpy.polynomial.polynomial import polyval
from numpy.testing import (
    TestCase, assert_almost_equal, assert_raises,
    assert_equal, assert_, run_module_suite***REMOVED***

L0 = np.array([1***REMOVED******REMOVED***/1
L1 = np.array([1, -1***REMOVED******REMOVED***/1
L2 = np.array([2, -4, 1***REMOVED******REMOVED***/2
L3 = np.array([6, -18, 9, -1***REMOVED******REMOVED***/6
L4 = np.array([24, -96, 72, -16, 1***REMOVED******REMOVED***/24
L5 = np.array([120, -600, 600, -200, 25, -1***REMOVED******REMOVED***/120
L6 = np.array([720, -4320, 5400, -2400, 450, -36, 1***REMOVED******REMOVED***/720

Llist = [L0, L1, L2, L3, L4, L5, L6***REMOVED***


def trim(x***REMOVED***:
    return lag.lagtrim(x, tol=1e-6***REMOVED***


class TestConstants(TestCase***REMOVED***:

    def test_lagdomain(self***REMOVED***:
        assert_equal(lag.lagdomain, [0, 1***REMOVED******REMOVED***

    def test_lagzero(self***REMOVED***:
        assert_equal(lag.lagzero, [0***REMOVED******REMOVED***

    def test_lagone(self***REMOVED***:
        assert_equal(lag.lagone, [1***REMOVED******REMOVED***

    def test_lagx(self***REMOVED***:
        assert_equal(lag.lagx, [1, -1***REMOVED******REMOVED***


class TestArithmetic(TestCase***REMOVED***:
    x = np.linspace(-3, 3, 100***REMOVED***

    def test_lagadd(self***REMOVED***:
        for i in range(5***REMOVED***:
            for j in range(5***REMOVED***:
                msg = "At i=%d, j=%d" % (i, j***REMOVED***
                tgt = np.zeros(max(i, j***REMOVED*** + 1***REMOVED***
                tgt[i***REMOVED*** += 1
                tgt[j***REMOVED*** += 1
                res = lag.lagadd([0***REMOVED****i + [1***REMOVED***, [0***REMOVED****j + [1***REMOVED******REMOVED***
                assert_equal(trim(res***REMOVED***, trim(tgt***REMOVED***, err_msg=msg***REMOVED***

    def test_lagsub(self***REMOVED***:
        for i in range(5***REMOVED***:
            for j in range(5***REMOVED***:
                msg = "At i=%d, j=%d" % (i, j***REMOVED***
                tgt = np.zeros(max(i, j***REMOVED*** + 1***REMOVED***
                tgt[i***REMOVED*** += 1
                tgt[j***REMOVED*** -= 1
                res = lag.lagsub([0***REMOVED****i + [1***REMOVED***, [0***REMOVED****j + [1***REMOVED******REMOVED***
                assert_equal(trim(res***REMOVED***, trim(tgt***REMOVED***, err_msg=msg***REMOVED***

    def test_lagmulx(self***REMOVED***:
        assert_equal(lag.lagmulx([0***REMOVED******REMOVED***, [0***REMOVED******REMOVED***
        assert_equal(lag.lagmulx([1***REMOVED******REMOVED***, [1, -1***REMOVED******REMOVED***
        for i in range(1, 5***REMOVED***:
            ser = [0***REMOVED****i + [1***REMOVED***
            tgt = [0***REMOVED****(i - 1***REMOVED*** + [-i, 2*i + 1, -(i + 1***REMOVED******REMOVED***
            assert_almost_equal(lag.lagmulx(ser***REMOVED***, tgt***REMOVED***

    def test_lagmul(self***REMOVED***:
        # check values of result
        for i in range(5***REMOVED***:
            pol1 = [0***REMOVED****i + [1***REMOVED***
            val1 = lag.lagval(self.x, pol1***REMOVED***
            for j in range(5***REMOVED***:
                msg = "At i=%d, j=%d" % (i, j***REMOVED***
                pol2 = [0***REMOVED****j + [1***REMOVED***
                val2 = lag.lagval(self.x, pol2***REMOVED***
                pol3 = lag.lagmul(pol1, pol2***REMOVED***
                val3 = lag.lagval(self.x, pol3***REMOVED***
                assert_(len(pol3***REMOVED*** == i + j + 1, msg***REMOVED***
                assert_almost_equal(val3, val1*val2, err_msg=msg***REMOVED***

    def test_lagdiv(self***REMOVED***:
        for i in range(5***REMOVED***:
            for j in range(5***REMOVED***:
                msg = "At i=%d, j=%d" % (i, j***REMOVED***
                ci = [0***REMOVED****i + [1***REMOVED***
                cj = [0***REMOVED****j + [1***REMOVED***
                tgt = lag.lagadd(ci, cj***REMOVED***
                quo, rem = lag.lagdiv(tgt, ci***REMOVED***
                res = lag.lagadd(lag.lagmul(quo, ci***REMOVED***, rem***REMOVED***
                assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED***, err_msg=msg***REMOVED***


class TestEvaluation(TestCase***REMOVED***:
    # coefficients of 1 + 2*x + 3*x**2
    c1d = np.array([9., -14., 6.***REMOVED******REMOVED***
    c2d = np.einsum('i,j->ij', c1d, c1d***REMOVED***
    c3d = np.einsum('i,j,k->ijk', c1d, c1d, c1d***REMOVED***

    # some random values in [-1, 1***REMOVED***
    x = np.random.random((3, 5***REMOVED******REMOVED****2 - 1
    y = polyval(x, [1., 2., 3.***REMOVED******REMOVED***

    def test_lagval(self***REMOVED***:
        #check empty input
        assert_equal(lag.lagval([***REMOVED***, [1***REMOVED******REMOVED***.size, 0***REMOVED***

        #check normal input***REMOVED***
        x = np.linspace(-1, 1***REMOVED***
        y = [polyval(x, c***REMOVED*** for c in Llist***REMOVED***
        for i in range(7***REMOVED***:
            msg = "At i=%d" % i
            tgt = y[i***REMOVED***
            res = lag.lagval(x, [0***REMOVED****i + [1***REMOVED******REMOVED***
            assert_almost_equal(res, tgt, err_msg=msg***REMOVED***

        #check that shape is preserved
        for i in range(3***REMOVED***:
            dims = [2***REMOVED****i
            x = np.zeros(dims***REMOVED***
            assert_equal(lag.lagval(x, [1***REMOVED******REMOVED***.shape, dims***REMOVED***
            assert_equal(lag.lagval(x, [1, 0***REMOVED******REMOVED***.shape, dims***REMOVED***
            assert_equal(lag.lagval(x, [1, 0, 0***REMOVED******REMOVED***.shape, dims***REMOVED***

    def test_lagval2d(self***REMOVED***:
        x1, x2, x3 = self.x
        y1, y2, y3 = self.y

        #test exceptions
        assert_raises(ValueError, lag.lagval2d, x1, x2[:2***REMOVED***, self.c2d***REMOVED***

        #test values
        tgt = y1*y2
        res = lag.lagval2d(x1, x2, self.c2d***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        #test shape
        z = np.ones((2, 3***REMOVED******REMOVED***
        res = lag.lagval2d(z, z, self.c2d***REMOVED***
        assert_(res.shape == (2, 3***REMOVED******REMOVED***

    def test_lagval3d(self***REMOVED***:
        x1, x2, x3 = self.x
        y1, y2, y3 = self.y

        #test exceptions
        assert_raises(ValueError, lag.lagval3d, x1, x2, x3[:2***REMOVED***, self.c3d***REMOVED***

        #test values
        tgt = y1*y2*y3
        res = lag.lagval3d(x1, x2, x3, self.c3d***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        #test shape
        z = np.ones((2, 3***REMOVED******REMOVED***
        res = lag.lagval3d(z, z, z, self.c3d***REMOVED***
        assert_(res.shape == (2, 3***REMOVED******REMOVED***

    def test_laggrid2d(self***REMOVED***:
        x1, x2, x3 = self.x
        y1, y2, y3 = self.y

        #test values
        tgt = np.einsum('i,j->ij', y1, y2***REMOVED***
        res = lag.laggrid2d(x1, x2, self.c2d***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        #test shape
        z = np.ones((2, 3***REMOVED******REMOVED***
        res = lag.laggrid2d(z, z, self.c2d***REMOVED***
        assert_(res.shape == (2, 3***REMOVED****2***REMOVED***

    def test_laggrid3d(self***REMOVED***:
        x1, x2, x3 = self.x
        y1, y2, y3 = self.y

        #test values
        tgt = np.einsum('i,j,k->ijk', y1, y2, y3***REMOVED***
        res = lag.laggrid3d(x1, x2, x3, self.c3d***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        #test shape
        z = np.ones((2, 3***REMOVED******REMOVED***
        res = lag.laggrid3d(z, z, z, self.c3d***REMOVED***
        assert_(res.shape == (2, 3***REMOVED****3***REMOVED***


class TestIntegral(TestCase***REMOVED***:

    def test_lagint(self***REMOVED***:
        # check exceptions
        assert_raises(ValueError, lag.lagint, [0***REMOVED***, .5***REMOVED***
        assert_raises(ValueError, lag.lagint, [0***REMOVED***, -1***REMOVED***
        assert_raises(ValueError, lag.lagint, [0***REMOVED***, 1, [0, 0***REMOVED******REMOVED***

        # test integration of zero polynomial
        for i in range(2, 5***REMOVED***:
            k = [0***REMOVED****(i - 2***REMOVED*** + [1***REMOVED***
            res = lag.lagint([0***REMOVED***, m=i, k=k***REMOVED***
            assert_almost_equal(res, [1, -1***REMOVED******REMOVED***

        # check single integration with integration constant
        for i in range(5***REMOVED***:
            scl = i + 1
            pol = [0***REMOVED****i + [1***REMOVED***
            tgt = [i***REMOVED*** + [0***REMOVED****i + [1/scl***REMOVED***
            lagpol = lag.poly2lag(pol***REMOVED***
            lagint = lag.lagint(lagpol, m=1, k=[i***REMOVED******REMOVED***
            res = lag.lag2poly(lagint***REMOVED***
            assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

        # check single integration with integration constant and lbnd
        for i in range(5***REMOVED***:
            scl = i + 1
            pol = [0***REMOVED****i + [1***REMOVED***
            lagpol = lag.poly2lag(pol***REMOVED***
            lagint = lag.lagint(lagpol, m=1, k=[i***REMOVED***, lbnd=-1***REMOVED***
            assert_almost_equal(lag.lagval(-1, lagint***REMOVED***, i***REMOVED***

        # check single integration with integration constant and scaling
        for i in range(5***REMOVED***:
            scl = i + 1
            pol = [0***REMOVED****i + [1***REMOVED***
            tgt = [i***REMOVED*** + [0***REMOVED****i + [2/scl***REMOVED***
            lagpol = lag.poly2lag(pol***REMOVED***
            lagint = lag.lagint(lagpol, m=1, k=[i***REMOVED***, scl=2***REMOVED***
            res = lag.lag2poly(lagint***REMOVED***
            assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

        # check multiple integrations with default k
        for i in range(5***REMOVED***:
            for j in range(2, 5***REMOVED***:
                pol = [0***REMOVED****i + [1***REMOVED***
                tgt = pol[:***REMOVED***
                for k in range(j***REMOVED***:
                    tgt = lag.lagint(tgt, m=1***REMOVED***
                res = lag.lagint(pol, m=j***REMOVED***
                assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

        # check multiple integrations with defined k
        for i in range(5***REMOVED***:
            for j in range(2, 5***REMOVED***:
                pol = [0***REMOVED****i + [1***REMOVED***
                tgt = pol[:***REMOVED***
                for k in range(j***REMOVED***:
                    tgt = lag.lagint(tgt, m=1, k=[k***REMOVED******REMOVED***
                res = lag.lagint(pol, m=j, k=list(range(j***REMOVED******REMOVED******REMOVED***
                assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

        # check multiple integrations with lbnd
        for i in range(5***REMOVED***:
            for j in range(2, 5***REMOVED***:
                pol = [0***REMOVED****i + [1***REMOVED***
                tgt = pol[:***REMOVED***
                for k in range(j***REMOVED***:
                    tgt = lag.lagint(tgt, m=1, k=[k***REMOVED***, lbnd=-1***REMOVED***
                res = lag.lagint(pol, m=j, k=list(range(j***REMOVED******REMOVED***, lbnd=-1***REMOVED***
                assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

        # check multiple integrations with scaling
        for i in range(5***REMOVED***:
            for j in range(2, 5***REMOVED***:
                pol = [0***REMOVED****i + [1***REMOVED***
                tgt = pol[:***REMOVED***
                for k in range(j***REMOVED***:
                    tgt = lag.lagint(tgt, m=1, k=[k***REMOVED***, scl=2***REMOVED***
                res = lag.lagint(pol, m=j, k=list(range(j***REMOVED******REMOVED***, scl=2***REMOVED***
                assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

    def test_lagint_axis(self***REMOVED***:
        # check that axis keyword works
        c2d = np.random.random((3, 4***REMOVED******REMOVED***

        tgt = np.vstack([lag.lagint(c***REMOVED*** for c in c2d.T***REMOVED******REMOVED***.T
        res = lag.lagint(c2d, axis=0***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        tgt = np.vstack([lag.lagint(c***REMOVED*** for c in c2d***REMOVED******REMOVED***
        res = lag.lagint(c2d, axis=1***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        tgt = np.vstack([lag.lagint(c, k=3***REMOVED*** for c in c2d***REMOVED******REMOVED***
        res = lag.lagint(c2d, k=3, axis=1***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***


class TestDerivative(TestCase***REMOVED***:

    def test_lagder(self***REMOVED***:
        # check exceptions
        assert_raises(ValueError, lag.lagder, [0***REMOVED***, .5***REMOVED***
        assert_raises(ValueError, lag.lagder, [0***REMOVED***, -1***REMOVED***

        # check that zeroth deriviative does nothing
        for i in range(5***REMOVED***:
            tgt = [0***REMOVED****i + [1***REMOVED***
            res = lag.lagder(tgt, m=0***REMOVED***
            assert_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

        # check that derivation is the inverse of integration
        for i in range(5***REMOVED***:
            for j in range(2, 5***REMOVED***:
                tgt = [0***REMOVED****i + [1***REMOVED***
                res = lag.lagder(lag.lagint(tgt, m=j***REMOVED***, m=j***REMOVED***
                assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

        # check derivation with scaling
        for i in range(5***REMOVED***:
            for j in range(2, 5***REMOVED***:
                tgt = [0***REMOVED****i + [1***REMOVED***
                res = lag.lagder(lag.lagint(tgt, m=j, scl=2***REMOVED***, m=j, scl=.5***REMOVED***
                assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

    def test_lagder_axis(self***REMOVED***:
        # check that axis keyword works
        c2d = np.random.random((3, 4***REMOVED******REMOVED***

        tgt = np.vstack([lag.lagder(c***REMOVED*** for c in c2d.T***REMOVED******REMOVED***.T
        res = lag.lagder(c2d, axis=0***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        tgt = np.vstack([lag.lagder(c***REMOVED*** for c in c2d***REMOVED******REMOVED***
        res = lag.lagder(c2d, axis=1***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***


class TestVander(TestCase***REMOVED***:
    # some random values in [-1, 1***REMOVED***
    x = np.random.random((3, 5***REMOVED******REMOVED****2 - 1

    def test_lagvander(self***REMOVED***:
        # check for 1d x
        x = np.arange(3***REMOVED***
        v = lag.lagvander(x, 3***REMOVED***
        assert_(v.shape == (3, 4***REMOVED******REMOVED***
        for i in range(4***REMOVED***:
            coef = [0***REMOVED****i + [1***REMOVED***
            assert_almost_equal(v[..., i***REMOVED***, lag.lagval(x, coef***REMOVED******REMOVED***

        # check for 2d x
        x = np.array([[1, 2***REMOVED***, [3, 4***REMOVED***, [5, 6***REMOVED******REMOVED******REMOVED***
        v = lag.lagvander(x, 3***REMOVED***
        assert_(v.shape == (3, 2, 4***REMOVED******REMOVED***
        for i in range(4***REMOVED***:
            coef = [0***REMOVED****i + [1***REMOVED***
            assert_almost_equal(v[..., i***REMOVED***, lag.lagval(x, coef***REMOVED******REMOVED***

    def test_lagvander2d(self***REMOVED***:
        # also tests lagval2d for non-square coefficient array
        x1, x2, x3 = self.x
        c = np.random.random((2, 3***REMOVED******REMOVED***
        van = lag.lagvander2d(x1, x2, [1, 2***REMOVED******REMOVED***
        tgt = lag.lagval2d(x1, x2, c***REMOVED***
        res = np.dot(van, c.flat***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        # check shape
        van = lag.lagvander2d([x1***REMOVED***, [x2***REMOVED***, [1, 2***REMOVED******REMOVED***
        assert_(van.shape == (1, 5, 6***REMOVED******REMOVED***

    def test_lagvander3d(self***REMOVED***:
        # also tests lagval3d for non-square coefficient array
        x1, x2, x3 = self.x
        c = np.random.random((2, 3, 4***REMOVED******REMOVED***
        van = lag.lagvander3d(x1, x2, x3, [1, 2, 3***REMOVED******REMOVED***
        tgt = lag.lagval3d(x1, x2, x3, c***REMOVED***
        res = np.dot(van, c.flat***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        # check shape
        van = lag.lagvander3d([x1***REMOVED***, [x2***REMOVED***, [x3***REMOVED***, [1, 2, 3***REMOVED******REMOVED***
        assert_(van.shape == (1, 5, 24***REMOVED******REMOVED***


class TestFitting(TestCase***REMOVED***:

    def test_lagfit(self***REMOVED***:
        def f(x***REMOVED***:
            return x*(x - 1***REMOVED****(x - 2***REMOVED***

        # Test exceptions
        assert_raises(ValueError, lag.lagfit, [1***REMOVED***, [1***REMOVED***, -1***REMOVED***
        assert_raises(TypeError, lag.lagfit, [[1***REMOVED******REMOVED***, [1***REMOVED***, 0***REMOVED***
        assert_raises(TypeError, lag.lagfit, [***REMOVED***, [1***REMOVED***, 0***REMOVED***
        assert_raises(TypeError, lag.lagfit, [1***REMOVED***, [[[1***REMOVED******REMOVED******REMOVED***, 0***REMOVED***
        assert_raises(TypeError, lag.lagfit, [1, 2***REMOVED***, [1***REMOVED***, 0***REMOVED***
        assert_raises(TypeError, lag.lagfit, [1***REMOVED***, [1, 2***REMOVED***, 0***REMOVED***
        assert_raises(TypeError, lag.lagfit, [1***REMOVED***, [1***REMOVED***, 0, w=[[1***REMOVED******REMOVED******REMOVED***
        assert_raises(TypeError, lag.lagfit, [1***REMOVED***, [1***REMOVED***, 0, w=[1, 1***REMOVED******REMOVED***
        assert_raises(ValueError, lag.lagfit, [1***REMOVED***, [1***REMOVED***, [-1,***REMOVED******REMOVED***
        assert_raises(ValueError, lag.lagfit, [1***REMOVED***, [1***REMOVED***, [2, -1, 6***REMOVED******REMOVED***
        assert_raises(TypeError, lag.lagfit, [1***REMOVED***, [1***REMOVED***, [***REMOVED******REMOVED***

        # Test fit
        x = np.linspace(0, 2***REMOVED***
        y = f(x***REMOVED***
        #
        coef3 = lag.lagfit(x, y, 3***REMOVED***
        assert_equal(len(coef3***REMOVED***, 4***REMOVED***
        assert_almost_equal(lag.lagval(x, coef3***REMOVED***, y***REMOVED***
        coef3 = lag.lagfit(x, y, [0, 1, 2, 3***REMOVED******REMOVED***
        assert_equal(len(coef3***REMOVED***, 4***REMOVED***
        assert_almost_equal(lag.lagval(x, coef3***REMOVED***, y***REMOVED***
        #
        coef4 = lag.lagfit(x, y, 4***REMOVED***
        assert_equal(len(coef4***REMOVED***, 5***REMOVED***
        assert_almost_equal(lag.lagval(x, coef4***REMOVED***, y***REMOVED***
        coef4 = lag.lagfit(x, y, [0, 1, 2, 3, 4***REMOVED******REMOVED***
        assert_equal(len(coef4***REMOVED***, 5***REMOVED***
        assert_almost_equal(lag.lagval(x, coef4***REMOVED***, y***REMOVED***
        #
        coef2d = lag.lagfit(x, np.array([y, y***REMOVED******REMOVED***.T, 3***REMOVED***
        assert_almost_equal(coef2d, np.array([coef3, coef3***REMOVED******REMOVED***.T***REMOVED***
        coef2d = lag.lagfit(x, np.array([y, y***REMOVED******REMOVED***.T, [0, 1, 2, 3***REMOVED******REMOVED***
        assert_almost_equal(coef2d, np.array([coef3, coef3***REMOVED******REMOVED***.T***REMOVED***
        # test weighting
        w = np.zeros_like(x***REMOVED***
        yw = y.copy(***REMOVED***
        w[1::2***REMOVED*** = 1
        y[0::2***REMOVED*** = 0
        wcoef3 = lag.lagfit(x, yw, 3, w=w***REMOVED***
        assert_almost_equal(wcoef3, coef3***REMOVED***
        wcoef3 = lag.lagfit(x, yw, [0, 1, 2, 3***REMOVED***, w=w***REMOVED***
        assert_almost_equal(wcoef3, coef3***REMOVED***
        #
        wcoef2d = lag.lagfit(x, np.array([yw, yw***REMOVED******REMOVED***.T, 3, w=w***REMOVED***
        assert_almost_equal(wcoef2d, np.array([coef3, coef3***REMOVED******REMOVED***.T***REMOVED***
        wcoef2d = lag.lagfit(x, np.array([yw, yw***REMOVED******REMOVED***.T, [0, 1, 2, 3***REMOVED***, w=w***REMOVED***
        assert_almost_equal(wcoef2d, np.array([coef3, coef3***REMOVED******REMOVED***.T***REMOVED***
        # test scaling with complex values x points whose square
        # is zero when summed.
        x = [1, 1j, -1, -1j***REMOVED***
        assert_almost_equal(lag.lagfit(x, x, 1***REMOVED***, [1, -1***REMOVED******REMOVED***
        assert_almost_equal(lag.lagfit(x, x, [0, 1***REMOVED******REMOVED***, [1, -1***REMOVED******REMOVED***


class TestCompanion(TestCase***REMOVED***:

    def test_raises(self***REMOVED***:
        assert_raises(ValueError, lag.lagcompanion, [***REMOVED******REMOVED***
        assert_raises(ValueError, lag.lagcompanion, [1***REMOVED******REMOVED***

    def test_dimensions(self***REMOVED***:
        for i in range(1, 5***REMOVED***:
            coef = [0***REMOVED****i + [1***REMOVED***
            assert_(lag.lagcompanion(coef***REMOVED***.shape == (i, i***REMOVED******REMOVED***

    def test_linear_root(self***REMOVED***:
        assert_(lag.lagcompanion([1, 2***REMOVED******REMOVED***[0, 0***REMOVED*** == 1.5***REMOVED***


class TestGauss(TestCase***REMOVED***:

    def test_100(self***REMOVED***:
        x, w = lag.laggauss(100***REMOVED***

        # test orthogonality. Note that the results need to be normalized,
        # otherwise the huge values that can arise from fast growing
        # functions like Laguerre can be very confusing.
        v = lag.lagvander(x, 99***REMOVED***
        vv = np.dot(v.T * w, v***REMOVED***
        vd = 1/np.sqrt(vv.diagonal(***REMOVED******REMOVED***
        vv = vd[:, None***REMOVED*** * vv * vd
        assert_almost_equal(vv, np.eye(100***REMOVED******REMOVED***

        # check that the integral of 1 is correct
        tgt = 1.0
        assert_almost_equal(w.sum(***REMOVED***, tgt***REMOVED***


class TestMisc(TestCase***REMOVED***:

    def test_lagfromroots(self***REMOVED***:
        res = lag.lagfromroots([***REMOVED******REMOVED***
        assert_almost_equal(trim(res***REMOVED***, [1***REMOVED******REMOVED***
        for i in range(1, 5***REMOVED***:
            roots = np.cos(np.linspace(-np.pi, 0, 2*i + 1***REMOVED***[1::2***REMOVED******REMOVED***
            pol = lag.lagfromroots(roots***REMOVED***
            res = lag.lagval(roots, pol***REMOVED***
            tgt = 0
            assert_(len(pol***REMOVED*** == i + 1***REMOVED***
            assert_almost_equal(lag.lag2poly(pol***REMOVED***[-1***REMOVED***, 1***REMOVED***
            assert_almost_equal(res, tgt***REMOVED***

    def test_lagroots(self***REMOVED***:
        assert_almost_equal(lag.lagroots([1***REMOVED******REMOVED***, [***REMOVED******REMOVED***
        assert_almost_equal(lag.lagroots([0, 1***REMOVED******REMOVED***, [1***REMOVED******REMOVED***
        for i in range(2, 5***REMOVED***:
            tgt = np.linspace(0, 3, i***REMOVED***
            res = lag.lagroots(lag.lagfromroots(tgt***REMOVED******REMOVED***
            assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

    def test_lagtrim(self***REMOVED***:
        coef = [2, -1, 1, 0***REMOVED***

        # Test exceptions
        assert_raises(ValueError, lag.lagtrim, coef, -1***REMOVED***

        # Test results
        assert_equal(lag.lagtrim(coef***REMOVED***, coef[:-1***REMOVED******REMOVED***
        assert_equal(lag.lagtrim(coef, 1***REMOVED***, coef[:-3***REMOVED******REMOVED***
        assert_equal(lag.lagtrim(coef, 2***REMOVED***, [0***REMOVED******REMOVED***

    def test_lagline(self***REMOVED***:
        assert_equal(lag.lagline(3, 4***REMOVED***, [7, -4***REMOVED******REMOVED***

    def test_lag2poly(self***REMOVED***:
        for i in range(7***REMOVED***:
            assert_almost_equal(lag.lag2poly([0***REMOVED****i + [1***REMOVED******REMOVED***, Llist[i***REMOVED******REMOVED***

    def test_poly2lag(self***REMOVED***:
        for i in range(7***REMOVED***:
            assert_almost_equal(lag.poly2lag(Llist[i***REMOVED******REMOVED***, [0***REMOVED****i + [1***REMOVED******REMOVED***

    def test_weight(self***REMOVED***:
        x = np.linspace(0, 10, 11***REMOVED***
        tgt = np.exp(-x***REMOVED***
        res = lag.lagweight(x***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
