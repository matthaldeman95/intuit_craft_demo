***REMOVED***Tests for hermite module.

***REMOVED***
from __future__ import division, absolute_import, print_function

import numpy as np
import numpy.polynomial.hermite as herm
from numpy.polynomial.polynomial import polyval
from numpy.testing import (
    TestCase, assert_almost_equal, assert_raises,
    assert_equal, assert_, run_module_suite***REMOVED***

H0 = np.array([1***REMOVED******REMOVED***
H1 = np.array([0, 2***REMOVED******REMOVED***
H2 = np.array([-2, 0, 4***REMOVED******REMOVED***
H3 = np.array([0, -12, 0, 8***REMOVED******REMOVED***
H4 = np.array([12, 0, -48, 0, 16***REMOVED******REMOVED***
H5 = np.array([0, 120, 0, -160, 0, 32***REMOVED******REMOVED***
H6 = np.array([-120, 0, 720, 0, -480, 0, 64***REMOVED******REMOVED***
H7 = np.array([0, -1680, 0, 3360, 0, -1344, 0, 128***REMOVED******REMOVED***
H8 = np.array([1680, 0, -13440, 0, 13440, 0, -3584, 0, 256***REMOVED******REMOVED***
H9 = np.array([0, 30240, 0, -80640, 0, 48384, 0, -9216, 0, 512***REMOVED******REMOVED***

Hlist = [H0, H1, H2, H3, H4, H5, H6, H7, H8, H9***REMOVED***


def trim(x***REMOVED***:
    return herm.hermtrim(x, tol=1e-6***REMOVED***


class TestConstants(TestCase***REMOVED***:

    def test_hermdomain(self***REMOVED***:
        assert_equal(herm.hermdomain, [-1, 1***REMOVED******REMOVED***

    def test_hermzero(self***REMOVED***:
        assert_equal(herm.hermzero, [0***REMOVED******REMOVED***

    def test_hermone(self***REMOVED***:
        assert_equal(herm.hermone, [1***REMOVED******REMOVED***

    def test_hermx(self***REMOVED***:
        assert_equal(herm.hermx, [0, .5***REMOVED******REMOVED***


class TestArithmetic(TestCase***REMOVED***:
    x = np.linspace(-3, 3, 100***REMOVED***

    def test_hermadd(self***REMOVED***:
        for i in range(5***REMOVED***:
            for j in range(5***REMOVED***:
                msg = "At i=%d, j=%d" % (i, j***REMOVED***
                tgt = np.zeros(max(i, j***REMOVED*** + 1***REMOVED***
                tgt[i***REMOVED*** += 1
                tgt[j***REMOVED*** += 1
                res = herm.hermadd([0***REMOVED****i + [1***REMOVED***, [0***REMOVED****j + [1***REMOVED******REMOVED***
                assert_equal(trim(res***REMOVED***, trim(tgt***REMOVED***, err_msg=msg***REMOVED***

    def test_hermsub(self***REMOVED***:
        for i in range(5***REMOVED***:
            for j in range(5***REMOVED***:
                msg = "At i=%d, j=%d" % (i, j***REMOVED***
                tgt = np.zeros(max(i, j***REMOVED*** + 1***REMOVED***
                tgt[i***REMOVED*** += 1
                tgt[j***REMOVED*** -= 1
                res = herm.hermsub([0***REMOVED****i + [1***REMOVED***, [0***REMOVED****j + [1***REMOVED******REMOVED***
                assert_equal(trim(res***REMOVED***, trim(tgt***REMOVED***, err_msg=msg***REMOVED***

    def test_hermmulx(self***REMOVED***:
        assert_equal(herm.hermmulx([0***REMOVED******REMOVED***, [0***REMOVED******REMOVED***
        assert_equal(herm.hermmulx([1***REMOVED******REMOVED***, [0, .5***REMOVED******REMOVED***
        for i in range(1, 5***REMOVED***:
            ser = [0***REMOVED****i + [1***REMOVED***
            tgt = [0***REMOVED****(i - 1***REMOVED*** + [i, 0, .5***REMOVED***
            assert_equal(herm.hermmulx(ser***REMOVED***, tgt***REMOVED***

    def test_hermmul(self***REMOVED***:
        # check values of result
        for i in range(5***REMOVED***:
            pol1 = [0***REMOVED****i + [1***REMOVED***
            val1 = herm.hermval(self.x, pol1***REMOVED***
            for j in range(5***REMOVED***:
                msg = "At i=%d, j=%d" % (i, j***REMOVED***
                pol2 = [0***REMOVED****j + [1***REMOVED***
                val2 = herm.hermval(self.x, pol2***REMOVED***
                pol3 = herm.hermmul(pol1, pol2***REMOVED***
                val3 = herm.hermval(self.x, pol3***REMOVED***
                assert_(len(pol3***REMOVED*** == i + j + 1, msg***REMOVED***
                assert_almost_equal(val3, val1*val2, err_msg=msg***REMOVED***

    def test_hermdiv(self***REMOVED***:
        for i in range(5***REMOVED***:
            for j in range(5***REMOVED***:
                msg = "At i=%d, j=%d" % (i, j***REMOVED***
                ci = [0***REMOVED****i + [1***REMOVED***
                cj = [0***REMOVED****j + [1***REMOVED***
                tgt = herm.hermadd(ci, cj***REMOVED***
                quo, rem = herm.hermdiv(tgt, ci***REMOVED***
                res = herm.hermadd(herm.hermmul(quo, ci***REMOVED***, rem***REMOVED***
                assert_equal(trim(res***REMOVED***, trim(tgt***REMOVED***, err_msg=msg***REMOVED***


class TestEvaluation(TestCase***REMOVED***:
    # coefficients of 1 + 2*x + 3*x**2
    c1d = np.array([2.5, 1., .75***REMOVED******REMOVED***
    c2d = np.einsum('i,j->ij', c1d, c1d***REMOVED***
    c3d = np.einsum('i,j,k->ijk', c1d, c1d, c1d***REMOVED***

    # some random values in [-1, 1***REMOVED***
    x = np.random.random((3, 5***REMOVED******REMOVED****2 - 1
    y = polyval(x, [1., 2., 3.***REMOVED******REMOVED***

    def test_hermval(self***REMOVED***:
        #check empty input
        assert_equal(herm.hermval([***REMOVED***, [1***REMOVED******REMOVED***.size, 0***REMOVED***

        #check normal input***REMOVED***
        x = np.linspace(-1, 1***REMOVED***
        y = [polyval(x, c***REMOVED*** for c in Hlist***REMOVED***
        for i in range(10***REMOVED***:
            msg = "At i=%d" % i
            tgt = y[i***REMOVED***
            res = herm.hermval(x, [0***REMOVED****i + [1***REMOVED******REMOVED***
            assert_almost_equal(res, tgt, err_msg=msg***REMOVED***

        #check that shape is preserved
        for i in range(3***REMOVED***:
            dims = [2***REMOVED****i
            x = np.zeros(dims***REMOVED***
            assert_equal(herm.hermval(x, [1***REMOVED******REMOVED***.shape, dims***REMOVED***
            assert_equal(herm.hermval(x, [1, 0***REMOVED******REMOVED***.shape, dims***REMOVED***
            assert_equal(herm.hermval(x, [1, 0, 0***REMOVED******REMOVED***.shape, dims***REMOVED***

    def test_hermval2d(self***REMOVED***:
        x1, x2, x3 = self.x
        y1, y2, y3 = self.y

        #test exceptions
        assert_raises(ValueError, herm.hermval2d, x1, x2[:2***REMOVED***, self.c2d***REMOVED***

        #test values
        tgt = y1*y2
        res = herm.hermval2d(x1, x2, self.c2d***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        #test shape
        z = np.ones((2, 3***REMOVED******REMOVED***
        res = herm.hermval2d(z, z, self.c2d***REMOVED***
        assert_(res.shape == (2, 3***REMOVED******REMOVED***

    def test_hermval3d(self***REMOVED***:
        x1, x2, x3 = self.x
        y1, y2, y3 = self.y

        #test exceptions
        assert_raises(ValueError, herm.hermval3d, x1, x2, x3[:2***REMOVED***, self.c3d***REMOVED***

        #test values
        tgt = y1*y2*y3
        res = herm.hermval3d(x1, x2, x3, self.c3d***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        #test shape
        z = np.ones((2, 3***REMOVED******REMOVED***
        res = herm.hermval3d(z, z, z, self.c3d***REMOVED***
        assert_(res.shape == (2, 3***REMOVED******REMOVED***

    def test_hermgrid2d(self***REMOVED***:
        x1, x2, x3 = self.x
        y1, y2, y3 = self.y

        #test values
        tgt = np.einsum('i,j->ij', y1, y2***REMOVED***
        res = herm.hermgrid2d(x1, x2, self.c2d***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        #test shape
        z = np.ones((2, 3***REMOVED******REMOVED***
        res = herm.hermgrid2d(z, z, self.c2d***REMOVED***
        assert_(res.shape == (2, 3***REMOVED****2***REMOVED***

    def test_hermgrid3d(self***REMOVED***:
        x1, x2, x3 = self.x
        y1, y2, y3 = self.y

        #test values
        tgt = np.einsum('i,j,k->ijk', y1, y2, y3***REMOVED***
        res = herm.hermgrid3d(x1, x2, x3, self.c3d***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        #test shape
        z = np.ones((2, 3***REMOVED******REMOVED***
        res = herm.hermgrid3d(z, z, z, self.c3d***REMOVED***
        assert_(res.shape == (2, 3***REMOVED****3***REMOVED***


class TestIntegral(TestCase***REMOVED***:

    def test_hermint(self***REMOVED***:
        # check exceptions
        assert_raises(ValueError, herm.hermint, [0***REMOVED***, .5***REMOVED***
        assert_raises(ValueError, herm.hermint, [0***REMOVED***, -1***REMOVED***
        assert_raises(ValueError, herm.hermint, [0***REMOVED***, 1, [0, 0***REMOVED******REMOVED***

        # test integration of zero polynomial
        for i in range(2, 5***REMOVED***:
            k = [0***REMOVED****(i - 2***REMOVED*** + [1***REMOVED***
            res = herm.hermint([0***REMOVED***, m=i, k=k***REMOVED***
            assert_almost_equal(res, [0, .5***REMOVED******REMOVED***

        # check single integration with integration constant
        for i in range(5***REMOVED***:
            scl = i + 1
            pol = [0***REMOVED****i + [1***REMOVED***
            tgt = [i***REMOVED*** + [0***REMOVED****i + [1/scl***REMOVED***
            hermpol = herm.poly2herm(pol***REMOVED***
            hermint = herm.hermint(hermpol, m=1, k=[i***REMOVED******REMOVED***
            res = herm.herm2poly(hermint***REMOVED***
            assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

        # check single integration with integration constant and lbnd
        for i in range(5***REMOVED***:
            scl = i + 1
            pol = [0***REMOVED****i + [1***REMOVED***
            hermpol = herm.poly2herm(pol***REMOVED***
            hermint = herm.hermint(hermpol, m=1, k=[i***REMOVED***, lbnd=-1***REMOVED***
            assert_almost_equal(herm.hermval(-1, hermint***REMOVED***, i***REMOVED***

        # check single integration with integration constant and scaling
        for i in range(5***REMOVED***:
            scl = i + 1
            pol = [0***REMOVED****i + [1***REMOVED***
            tgt = [i***REMOVED*** + [0***REMOVED****i + [2/scl***REMOVED***
            hermpol = herm.poly2herm(pol***REMOVED***
            hermint = herm.hermint(hermpol, m=1, k=[i***REMOVED***, scl=2***REMOVED***
            res = herm.herm2poly(hermint***REMOVED***
            assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

        # check multiple integrations with default k
        for i in range(5***REMOVED***:
            for j in range(2, 5***REMOVED***:
                pol = [0***REMOVED****i + [1***REMOVED***
                tgt = pol[:***REMOVED***
                for k in range(j***REMOVED***:
                    tgt = herm.hermint(tgt, m=1***REMOVED***
                res = herm.hermint(pol, m=j***REMOVED***
                assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

        # check multiple integrations with defined k
        for i in range(5***REMOVED***:
            for j in range(2, 5***REMOVED***:
                pol = [0***REMOVED****i + [1***REMOVED***
                tgt = pol[:***REMOVED***
                for k in range(j***REMOVED***:
                    tgt = herm.hermint(tgt, m=1, k=[k***REMOVED******REMOVED***
                res = herm.hermint(pol, m=j, k=list(range(j***REMOVED******REMOVED******REMOVED***
                assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

        # check multiple integrations with lbnd
        for i in range(5***REMOVED***:
            for j in range(2, 5***REMOVED***:
                pol = [0***REMOVED****i + [1***REMOVED***
                tgt = pol[:***REMOVED***
                for k in range(j***REMOVED***:
                    tgt = herm.hermint(tgt, m=1, k=[k***REMOVED***, lbnd=-1***REMOVED***
                res = herm.hermint(pol, m=j, k=list(range(j***REMOVED******REMOVED***, lbnd=-1***REMOVED***
                assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

        # check multiple integrations with scaling
        for i in range(5***REMOVED***:
            for j in range(2, 5***REMOVED***:
                pol = [0***REMOVED****i + [1***REMOVED***
                tgt = pol[:***REMOVED***
                for k in range(j***REMOVED***:
                    tgt = herm.hermint(tgt, m=1, k=[k***REMOVED***, scl=2***REMOVED***
                res = herm.hermint(pol, m=j, k=list(range(j***REMOVED******REMOVED***, scl=2***REMOVED***
                assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

    def test_hermint_axis(self***REMOVED***:
        # check that axis keyword works
        c2d = np.random.random((3, 4***REMOVED******REMOVED***

        tgt = np.vstack([herm.hermint(c***REMOVED*** for c in c2d.T***REMOVED******REMOVED***.T
        res = herm.hermint(c2d, axis=0***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        tgt = np.vstack([herm.hermint(c***REMOVED*** for c in c2d***REMOVED******REMOVED***
        res = herm.hermint(c2d, axis=1***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        tgt = np.vstack([herm.hermint(c, k=3***REMOVED*** for c in c2d***REMOVED******REMOVED***
        res = herm.hermint(c2d, k=3, axis=1***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***


class TestDerivative(TestCase***REMOVED***:

    def test_hermder(self***REMOVED***:
        # check exceptions
        assert_raises(ValueError, herm.hermder, [0***REMOVED***, .5***REMOVED***
        assert_raises(ValueError, herm.hermder, [0***REMOVED***, -1***REMOVED***

        # check that zeroth deriviative does nothing
        for i in range(5***REMOVED***:
            tgt = [0***REMOVED****i + [1***REMOVED***
            res = herm.hermder(tgt, m=0***REMOVED***
            assert_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

        # check that derivation is the inverse of integration
        for i in range(5***REMOVED***:
            for j in range(2, 5***REMOVED***:
                tgt = [0***REMOVED****i + [1***REMOVED***
                res = herm.hermder(herm.hermint(tgt, m=j***REMOVED***, m=j***REMOVED***
                assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

        # check derivation with scaling
        for i in range(5***REMOVED***:
            for j in range(2, 5***REMOVED***:
                tgt = [0***REMOVED****i + [1***REMOVED***
                res = herm.hermder(herm.hermint(tgt, m=j, scl=2***REMOVED***, m=j, scl=.5***REMOVED***
                assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

    def test_hermder_axis(self***REMOVED***:
        # check that axis keyword works
        c2d = np.random.random((3, 4***REMOVED******REMOVED***

        tgt = np.vstack([herm.hermder(c***REMOVED*** for c in c2d.T***REMOVED******REMOVED***.T
        res = herm.hermder(c2d, axis=0***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        tgt = np.vstack([herm.hermder(c***REMOVED*** for c in c2d***REMOVED******REMOVED***
        res = herm.hermder(c2d, axis=1***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***


class TestVander(TestCase***REMOVED***:
    # some random values in [-1, 1***REMOVED***
    x = np.random.random((3, 5***REMOVED******REMOVED****2 - 1

    def test_hermvander(self***REMOVED***:
        # check for 1d x
        x = np.arange(3***REMOVED***
        v = herm.hermvander(x, 3***REMOVED***
        assert_(v.shape == (3, 4***REMOVED******REMOVED***
        for i in range(4***REMOVED***:
            coef = [0***REMOVED****i + [1***REMOVED***
            assert_almost_equal(v[..., i***REMOVED***, herm.hermval(x, coef***REMOVED******REMOVED***

        # check for 2d x
        x = np.array([[1, 2***REMOVED***, [3, 4***REMOVED***, [5, 6***REMOVED******REMOVED******REMOVED***
        v = herm.hermvander(x, 3***REMOVED***
        assert_(v.shape == (3, 2, 4***REMOVED******REMOVED***
        for i in range(4***REMOVED***:
            coef = [0***REMOVED****i + [1***REMOVED***
            assert_almost_equal(v[..., i***REMOVED***, herm.hermval(x, coef***REMOVED******REMOVED***

    def test_hermvander2d(self***REMOVED***:
        # also tests hermval2d for non-square coefficient array
        x1, x2, x3 = self.x
        c = np.random.random((2, 3***REMOVED******REMOVED***
        van = herm.hermvander2d(x1, x2, [1, 2***REMOVED******REMOVED***
        tgt = herm.hermval2d(x1, x2, c***REMOVED***
        res = np.dot(van, c.flat***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        # check shape
        van = herm.hermvander2d([x1***REMOVED***, [x2***REMOVED***, [1, 2***REMOVED******REMOVED***
        assert_(van.shape == (1, 5, 6***REMOVED******REMOVED***

    def test_hermvander3d(self***REMOVED***:
        # also tests hermval3d for non-square coefficient array
        x1, x2, x3 = self.x
        c = np.random.random((2, 3, 4***REMOVED******REMOVED***
        van = herm.hermvander3d(x1, x2, x3, [1, 2, 3***REMOVED******REMOVED***
        tgt = herm.hermval3d(x1, x2, x3, c***REMOVED***
        res = np.dot(van, c.flat***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        # check shape
        van = herm.hermvander3d([x1***REMOVED***, [x2***REMOVED***, [x3***REMOVED***, [1, 2, 3***REMOVED******REMOVED***
        assert_(van.shape == (1, 5, 24***REMOVED******REMOVED***


class TestFitting(TestCase***REMOVED***:

    def test_hermfit(self***REMOVED***:
        def f(x***REMOVED***:
            return x*(x - 1***REMOVED****(x - 2***REMOVED***

        def f2(x***REMOVED***:
            return x**4 + x**2 + 1

        # Test exceptions
        assert_raises(ValueError, herm.hermfit, [1***REMOVED***, [1***REMOVED***, -1***REMOVED***
        assert_raises(TypeError, herm.hermfit, [[1***REMOVED******REMOVED***, [1***REMOVED***, 0***REMOVED***
        assert_raises(TypeError, herm.hermfit, [***REMOVED***, [1***REMOVED***, 0***REMOVED***
        assert_raises(TypeError, herm.hermfit, [1***REMOVED***, [[[1***REMOVED******REMOVED******REMOVED***, 0***REMOVED***
        assert_raises(TypeError, herm.hermfit, [1, 2***REMOVED***, [1***REMOVED***, 0***REMOVED***
        assert_raises(TypeError, herm.hermfit, [1***REMOVED***, [1, 2***REMOVED***, 0***REMOVED***
        assert_raises(TypeError, herm.hermfit, [1***REMOVED***, [1***REMOVED***, 0, w=[[1***REMOVED******REMOVED******REMOVED***
        assert_raises(TypeError, herm.hermfit, [1***REMOVED***, [1***REMOVED***, 0, w=[1, 1***REMOVED******REMOVED***
        assert_raises(ValueError, herm.hermfit, [1***REMOVED***, [1***REMOVED***, [-1,***REMOVED******REMOVED***
        assert_raises(ValueError, herm.hermfit, [1***REMOVED***, [1***REMOVED***, [2, -1, 6***REMOVED******REMOVED***
        assert_raises(TypeError, herm.hermfit, [1***REMOVED***, [1***REMOVED***, [***REMOVED******REMOVED***

        # Test fit
        x = np.linspace(0, 2***REMOVED***
        y = f(x***REMOVED***
        #
        coef3 = herm.hermfit(x, y, 3***REMOVED***
        assert_equal(len(coef3***REMOVED***, 4***REMOVED***
        assert_almost_equal(herm.hermval(x, coef3***REMOVED***, y***REMOVED***
        coef3 = herm.hermfit(x, y, [0, 1, 2, 3***REMOVED******REMOVED***
        assert_equal(len(coef3***REMOVED***, 4***REMOVED***
        assert_almost_equal(herm.hermval(x, coef3***REMOVED***, y***REMOVED***
        #
        coef4 = herm.hermfit(x, y, 4***REMOVED***
        assert_equal(len(coef4***REMOVED***, 5***REMOVED***
        assert_almost_equal(herm.hermval(x, coef4***REMOVED***, y***REMOVED***
        coef4 = herm.hermfit(x, y, [0, 1, 2, 3, 4***REMOVED******REMOVED***
        assert_equal(len(coef4***REMOVED***, 5***REMOVED***
        assert_almost_equal(herm.hermval(x, coef4***REMOVED***, y***REMOVED***
        # check things still work if deg is not in strict increasing
        coef4 = herm.hermfit(x, y, [2, 3, 4, 1, 0***REMOVED******REMOVED***
        assert_equal(len(coef4***REMOVED***, 5***REMOVED***
        assert_almost_equal(herm.hermval(x, coef4***REMOVED***, y***REMOVED***
        #
        coef2d = herm.hermfit(x, np.array([y, y***REMOVED******REMOVED***.T, 3***REMOVED***
        assert_almost_equal(coef2d, np.array([coef3, coef3***REMOVED******REMOVED***.T***REMOVED***
        coef2d = herm.hermfit(x, np.array([y, y***REMOVED******REMOVED***.T, [0, 1, 2, 3***REMOVED******REMOVED***
        assert_almost_equal(coef2d, np.array([coef3, coef3***REMOVED******REMOVED***.T***REMOVED***
        # test weighting
        w = np.zeros_like(x***REMOVED***
        yw = y.copy(***REMOVED***
        w[1::2***REMOVED*** = 1
        y[0::2***REMOVED*** = 0
        wcoef3 = herm.hermfit(x, yw, 3, w=w***REMOVED***
        assert_almost_equal(wcoef3, coef3***REMOVED***
        wcoef3 = herm.hermfit(x, yw, [0, 1, 2, 3***REMOVED***, w=w***REMOVED***
        assert_almost_equal(wcoef3, coef3***REMOVED***
        #
        wcoef2d = herm.hermfit(x, np.array([yw, yw***REMOVED******REMOVED***.T, 3, w=w***REMOVED***
        assert_almost_equal(wcoef2d, np.array([coef3, coef3***REMOVED******REMOVED***.T***REMOVED***
        wcoef2d = herm.hermfit(x, np.array([yw, yw***REMOVED******REMOVED***.T, [0, 1, 2, 3***REMOVED***, w=w***REMOVED***
        assert_almost_equal(wcoef2d, np.array([coef3, coef3***REMOVED******REMOVED***.T***REMOVED***
        # test scaling with complex values x points whose square
        # is zero when summed.
        x = [1, 1j, -1, -1j***REMOVED***
        assert_almost_equal(herm.hermfit(x, x, 1***REMOVED***, [0, .5***REMOVED******REMOVED***
        assert_almost_equal(herm.hermfit(x, x, [0, 1***REMOVED******REMOVED***, [0, .5***REMOVED******REMOVED***
        # test fitting only even Legendre polynomials
        x = np.linspace(-1, 1***REMOVED***
        y = f2(x***REMOVED***
        coef1 = herm.hermfit(x, y, 4***REMOVED***
        assert_almost_equal(herm.hermval(x, coef1***REMOVED***, y***REMOVED***
        coef2 = herm.hermfit(x, y, [0, 2, 4***REMOVED******REMOVED***
        assert_almost_equal(herm.hermval(x, coef2***REMOVED***, y***REMOVED***
        assert_almost_equal(coef1, coef2***REMOVED***


class TestCompanion(TestCase***REMOVED***:

    def test_raises(self***REMOVED***:
        assert_raises(ValueError, herm.hermcompanion, [***REMOVED******REMOVED***
        assert_raises(ValueError, herm.hermcompanion, [1***REMOVED******REMOVED***

    def test_dimensions(self***REMOVED***:
        for i in range(1, 5***REMOVED***:
            coef = [0***REMOVED****i + [1***REMOVED***
            assert_(herm.hermcompanion(coef***REMOVED***.shape == (i, i***REMOVED******REMOVED***

    def test_linear_root(self***REMOVED***:
        assert_(herm.hermcompanion([1, 2***REMOVED******REMOVED***[0, 0***REMOVED*** == -.25***REMOVED***


class TestGauss(TestCase***REMOVED***:

    def test_100(self***REMOVED***:
        x, w = herm.hermgauss(100***REMOVED***

        # test orthogonality. Note that the results need to be normalized,
        # otherwise the huge values that can arise from fast growing
        # functions like Laguerre can be very confusing.
        v = herm.hermvander(x, 99***REMOVED***
        vv = np.dot(v.T * w, v***REMOVED***
        vd = 1/np.sqrt(vv.diagonal(***REMOVED******REMOVED***
        vv = vd[:, None***REMOVED*** * vv * vd
        assert_almost_equal(vv, np.eye(100***REMOVED******REMOVED***

        # check that the integral of 1 is correct
        tgt = np.sqrt(np.pi***REMOVED***
        assert_almost_equal(w.sum(***REMOVED***, tgt***REMOVED***


class TestMisc(TestCase***REMOVED***:

    def test_hermfromroots(self***REMOVED***:
        res = herm.hermfromroots([***REMOVED******REMOVED***
        assert_almost_equal(trim(res***REMOVED***, [1***REMOVED******REMOVED***
        for i in range(1, 5***REMOVED***:
            roots = np.cos(np.linspace(-np.pi, 0, 2*i + 1***REMOVED***[1::2***REMOVED******REMOVED***
            pol = herm.hermfromroots(roots***REMOVED***
            res = herm.hermval(roots, pol***REMOVED***
            tgt = 0
            assert_(len(pol***REMOVED*** == i + 1***REMOVED***
            assert_almost_equal(herm.herm2poly(pol***REMOVED***[-1***REMOVED***, 1***REMOVED***
            assert_almost_equal(res, tgt***REMOVED***

    def test_hermroots(self***REMOVED***:
        assert_almost_equal(herm.hermroots([1***REMOVED******REMOVED***, [***REMOVED******REMOVED***
        assert_almost_equal(herm.hermroots([1, 1***REMOVED******REMOVED***, [-.5***REMOVED******REMOVED***
        for i in range(2, 5***REMOVED***:
            tgt = np.linspace(-1, 1, i***REMOVED***
            res = herm.hermroots(herm.hermfromroots(tgt***REMOVED******REMOVED***
            assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

    def test_hermtrim(self***REMOVED***:
        coef = [2, -1, 1, 0***REMOVED***

        # Test exceptions
        assert_raises(ValueError, herm.hermtrim, coef, -1***REMOVED***

        # Test results
        assert_equal(herm.hermtrim(coef***REMOVED***, coef[:-1***REMOVED******REMOVED***
        assert_equal(herm.hermtrim(coef, 1***REMOVED***, coef[:-3***REMOVED******REMOVED***
        assert_equal(herm.hermtrim(coef, 2***REMOVED***, [0***REMOVED******REMOVED***

    def test_hermline(self***REMOVED***:
        assert_equal(herm.hermline(3, 4***REMOVED***, [3, 2***REMOVED******REMOVED***

    def test_herm2poly(self***REMOVED***:
        for i in range(10***REMOVED***:
            assert_almost_equal(herm.herm2poly([0***REMOVED****i + [1***REMOVED******REMOVED***, Hlist[i***REMOVED******REMOVED***

    def test_poly2herm(self***REMOVED***:
        for i in range(10***REMOVED***:
            assert_almost_equal(herm.poly2herm(Hlist[i***REMOVED******REMOVED***, [0***REMOVED****i + [1***REMOVED******REMOVED***

    def test_weight(self***REMOVED***:
        x = np.linspace(-5, 5, 11***REMOVED***
        tgt = np.exp(-x**2***REMOVED***
        res = herm.hermweight(x***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
