***REMOVED***Test inter-conversion of different polynomial classes.

This tests the convert and cast methods of all the polynomial classes.

***REMOVED***
from __future__ import division, absolute_import, print_function

import operator as op
from numbers import Number

import numpy as np
from numpy.polynomial import (
    Polynomial, Legendre, Chebyshev, Laguerre, Hermite, HermiteE***REMOVED***
from numpy.testing import (
    assert_almost_equal, assert_raises, assert_equal, assert_,
    run_module_suite***REMOVED***
from numpy.compat import long


classes = (
    Polynomial, Legendre, Chebyshev, Laguerre,
    Hermite, HermiteE***REMOVED***


def test_class_methods(***REMOVED***:
    for Poly1 in classes:
        for Poly2 in classes:
            yield check_conversion, Poly1, Poly2
            yield check_cast, Poly1, Poly2
    for Poly in classes:
        yield check_call, Poly
        yield check_identity, Poly
        yield check_basis, Poly
        yield check_fromroots, Poly
        yield check_fit, Poly
        yield check_equal, Poly
        yield check_not_equal, Poly
        yield check_add, Poly
        yield check_sub, Poly
        yield check_mul, Poly
        yield check_floordiv, Poly
        yield check_truediv, Poly
        yield check_mod, Poly
        yield check_divmod, Poly
        yield check_pow, Poly
        yield check_integ, Poly
        yield check_deriv, Poly
        yield check_roots, Poly
        yield check_linspace, Poly
        yield check_mapparms, Poly
        yield check_degree, Poly
        yield check_copy, Poly
        yield check_cutdeg, Poly
        yield check_truncate, Poly
        yield check_trim, Poly


#
# helper functions
#
random = np.random.random


def assert_poly_almost_equal(p1, p2, msg=""***REMOVED***:
    ***REMOVED***
        assert_(np.all(p1.domain == p2.domain***REMOVED******REMOVED***
        assert_(np.all(p1.window == p2.window***REMOVED******REMOVED***
        assert_almost_equal(p1.coef, p2.coef***REMOVED***
    except AssertionError:
        msg = "Result: %s\nTarget: %s", (p1, p2***REMOVED***
        raise AssertionError(msg***REMOVED***


#
# conversion methods that depend on two classes
#


def check_conversion(Poly1, Poly2***REMOVED***:
    x = np.linspace(0, 1, 10***REMOVED***
    coef = random((3,***REMOVED******REMOVED***

    d1 = Poly1.domain + random((2,***REMOVED******REMOVED****.25
    w1 = Poly1.window + random((2,***REMOVED******REMOVED****.25
    p1 = Poly1(coef, domain=d1, window=w1***REMOVED***

    d2 = Poly2.domain + random((2,***REMOVED******REMOVED****.25
    w2 = Poly2.window + random((2,***REMOVED******REMOVED****.25
    p2 = p1.convert(kind=Poly2, domain=d2, window=w2***REMOVED***

    assert_almost_equal(p2.domain, d2***REMOVED***
    assert_almost_equal(p2.window, w2***REMOVED***
    assert_almost_equal(p2(x***REMOVED***, p1(x***REMOVED******REMOVED***


def check_cast(Poly1, Poly2***REMOVED***:
    x = np.linspace(0, 1, 10***REMOVED***
    coef = random((3,***REMOVED******REMOVED***

    d1 = Poly1.domain + random((2,***REMOVED******REMOVED****.25
    w1 = Poly1.window + random((2,***REMOVED******REMOVED****.25
    p1 = Poly1(coef, domain=d1, window=w1***REMOVED***

    d2 = Poly2.domain + random((2,***REMOVED******REMOVED****.25
    w2 = Poly2.window + random((2,***REMOVED******REMOVED****.25
    p2 = Poly2.cast(p1, domain=d2, window=w2***REMOVED***

    assert_almost_equal(p2.domain, d2***REMOVED***
    assert_almost_equal(p2.window, w2***REMOVED***
    assert_almost_equal(p2(x***REMOVED***, p1(x***REMOVED******REMOVED***


#
# methods that depend on one class
#


def check_identity(Poly***REMOVED***:
    d = Poly.domain + random((2,***REMOVED******REMOVED****.25
    w = Poly.window + random((2,***REMOVED******REMOVED****.25
    x = np.linspace(d[0***REMOVED***, d[1***REMOVED***, 11***REMOVED***
    p = Poly.identity(domain=d, window=w***REMOVED***
    assert_equal(p.domain, d***REMOVED***
    assert_equal(p.window, w***REMOVED***
    assert_almost_equal(p(x***REMOVED***, x***REMOVED***


def check_basis(Poly***REMOVED***:
    d = Poly.domain + random((2,***REMOVED******REMOVED****.25
    w = Poly.window + random((2,***REMOVED******REMOVED****.25
    p = Poly.basis(5, domain=d, window=w***REMOVED***
    assert_equal(p.domain, d***REMOVED***
    assert_equal(p.window, w***REMOVED***
    assert_equal(p.coef, [0***REMOVED****5 + [1***REMOVED******REMOVED***


def check_fromroots(Poly***REMOVED***:
    # check that requested roots are zeros of a polynomial
    # of correct degree, domain, and window.
    d = Poly.domain + random((2,***REMOVED******REMOVED****.25
    w = Poly.window + random((2,***REMOVED******REMOVED****.25
    r = random((5,***REMOVED******REMOVED***
    p1 = Poly.fromroots(r, domain=d, window=w***REMOVED***
    assert_equal(p1.degree(***REMOVED***, len(r***REMOVED******REMOVED***
    assert_equal(p1.domain, d***REMOVED***
    assert_equal(p1.window, w***REMOVED***
    assert_almost_equal(p1(r***REMOVED***, 0***REMOVED***

    # check that polynomial is monic
    pdom = Polynomial.domain
    pwin = Polynomial.window
    p2 = Polynomial.cast(p1, domain=pdom, window=pwin***REMOVED***
    assert_almost_equal(p2.coef[-1***REMOVED***, 1***REMOVED***


def check_fit(Poly***REMOVED***:

    def f(x***REMOVED***:
        return x*(x - 1***REMOVED****(x - 2***REMOVED***
    x = np.linspace(0, 3***REMOVED***
    y = f(x***REMOVED***

    # check default value of domain and window
    p = Poly.fit(x, y, 3***REMOVED***
    assert_almost_equal(p.domain, [0, 3***REMOVED******REMOVED***
    assert_almost_equal(p(x***REMOVED***, y***REMOVED***
    assert_equal(p.degree(***REMOVED***, 3***REMOVED***

    # check with given domains and window
    d = Poly.domain + random((2,***REMOVED******REMOVED****.25
    w = Poly.window + random((2,***REMOVED******REMOVED****.25
    p = Poly.fit(x, y, 3, domain=d, window=w***REMOVED***
    assert_almost_equal(p(x***REMOVED***, y***REMOVED***
    assert_almost_equal(p.domain, d***REMOVED***
    assert_almost_equal(p.window, w***REMOVED***
    p = Poly.fit(x, y, [0, 1, 2, 3***REMOVED***, domain=d, window=w***REMOVED***
    assert_almost_equal(p(x***REMOVED***, y***REMOVED***
    assert_almost_equal(p.domain, d***REMOVED***
    assert_almost_equal(p.window, w***REMOVED***

    # check with class domain default
    p = Poly.fit(x, y, 3, [***REMOVED******REMOVED***
    assert_equal(p.domain, Poly.domain***REMOVED***
    assert_equal(p.window, Poly.window***REMOVED***
    p = Poly.fit(x, y, [0, 1, 2, 3***REMOVED***, [***REMOVED******REMOVED***
    assert_equal(p.domain, Poly.domain***REMOVED***
    assert_equal(p.window, Poly.window***REMOVED***

    # check that fit accepts weights.
    w = np.zeros_like(x***REMOVED***
    z = y + random(y.shape***REMOVED****.25
    w[::2***REMOVED*** = 1
    p1 = Poly.fit(x[::2***REMOVED***, z[::2***REMOVED***, 3***REMOVED***
    p2 = Poly.fit(x, z, 3, w=w***REMOVED***
    p3 = Poly.fit(x, z, [0, 1, 2, 3***REMOVED***, w=w***REMOVED***
    assert_almost_equal(p1(x***REMOVED***, p2(x***REMOVED******REMOVED***
    assert_almost_equal(p2(x***REMOVED***, p3(x***REMOVED******REMOVED***


def check_equal(Poly***REMOVED***:
    p1 = Poly([1, 2, 3***REMOVED***, domain=[0, 1***REMOVED***, window=[2, 3***REMOVED******REMOVED***
    p2 = Poly([1, 1, 1***REMOVED***, domain=[0, 1***REMOVED***, window=[2, 3***REMOVED******REMOVED***
    p3 = Poly([1, 2, 3***REMOVED***, domain=[1, 2***REMOVED***, window=[2, 3***REMOVED******REMOVED***
    p4 = Poly([1, 2, 3***REMOVED***, domain=[0, 1***REMOVED***, window=[1, 2***REMOVED******REMOVED***
    assert_(p1 == p1***REMOVED***
    assert_(not p1 == p2***REMOVED***
    assert_(not p1 == p3***REMOVED***
    assert_(not p1 == p4***REMOVED***


def check_not_equal(Poly***REMOVED***:
    p1 = Poly([1, 2, 3***REMOVED***, domain=[0, 1***REMOVED***, window=[2, 3***REMOVED******REMOVED***
    p2 = Poly([1, 1, 1***REMOVED***, domain=[0, 1***REMOVED***, window=[2, 3***REMOVED******REMOVED***
    p3 = Poly([1, 2, 3***REMOVED***, domain=[1, 2***REMOVED***, window=[2, 3***REMOVED******REMOVED***
    p4 = Poly([1, 2, 3***REMOVED***, domain=[0, 1***REMOVED***, window=[1, 2***REMOVED******REMOVED***
    assert_(not p1 != p1***REMOVED***
    assert_(p1 != p2***REMOVED***
    assert_(p1 != p3***REMOVED***
    assert_(p1 != p4***REMOVED***


def check_add(Poly***REMOVED***:
    # This checks commutation, not numerical correctness
    c1 = list(random((4,***REMOVED******REMOVED*** + .5***REMOVED***
    c2 = list(random((3,***REMOVED******REMOVED*** + .5***REMOVED***
    p1 = Poly(c1***REMOVED***
    p2 = Poly(c2***REMOVED***
    p3 = p1 + p2
    assert_poly_almost_equal(p2 + p1, p3***REMOVED***
    assert_poly_almost_equal(p1 + c2, p3***REMOVED***
    assert_poly_almost_equal(c2 + p1, p3***REMOVED***
    assert_poly_almost_equal(p1 + tuple(c2***REMOVED***, p3***REMOVED***
    assert_poly_almost_equal(tuple(c2***REMOVED*** + p1, p3***REMOVED***
    assert_poly_almost_equal(p1 + np.array(c2***REMOVED***, p3***REMOVED***
    assert_poly_almost_equal(np.array(c2***REMOVED*** + p1, p3***REMOVED***
    assert_raises(TypeError, op.add, p1, Poly([0***REMOVED***, domain=Poly.domain + 1***REMOVED******REMOVED***
    assert_raises(TypeError, op.add, p1, Poly([0***REMOVED***, window=Poly.window + 1***REMOVED******REMOVED***
    if Poly is Polynomial:
        assert_raises(TypeError, op.add, p1, Chebyshev([0***REMOVED******REMOVED******REMOVED***
    else:
        assert_raises(TypeError, op.add, p1, Polynomial([0***REMOVED******REMOVED******REMOVED***


def check_sub(Poly***REMOVED***:
    # This checks commutation, not numerical correctness
    c1 = list(random((4,***REMOVED******REMOVED*** + .5***REMOVED***
    c2 = list(random((3,***REMOVED******REMOVED*** + .5***REMOVED***
    p1 = Poly(c1***REMOVED***
    p2 = Poly(c2***REMOVED***
    p3 = p1 - p2
    assert_poly_almost_equal(p2 - p1, -p3***REMOVED***
    assert_poly_almost_equal(p1 - c2, p3***REMOVED***
    assert_poly_almost_equal(c2 - p1, -p3***REMOVED***
    assert_poly_almost_equal(p1 - tuple(c2***REMOVED***, p3***REMOVED***
    assert_poly_almost_equal(tuple(c2***REMOVED*** - p1, -p3***REMOVED***
    assert_poly_almost_equal(p1 - np.array(c2***REMOVED***, p3***REMOVED***
    assert_poly_almost_equal(np.array(c2***REMOVED*** - p1, -p3***REMOVED***
    assert_raises(TypeError, op.sub, p1, Poly([0***REMOVED***, domain=Poly.domain + 1***REMOVED******REMOVED***
    assert_raises(TypeError, op.sub, p1, Poly([0***REMOVED***, window=Poly.window + 1***REMOVED******REMOVED***
    if Poly is Polynomial:
        assert_raises(TypeError, op.sub, p1, Chebyshev([0***REMOVED******REMOVED******REMOVED***
    else:
        assert_raises(TypeError, op.sub, p1, Polynomial([0***REMOVED******REMOVED******REMOVED***


def check_mul(Poly***REMOVED***:
    c1 = list(random((4,***REMOVED******REMOVED*** + .5***REMOVED***
    c2 = list(random((3,***REMOVED******REMOVED*** + .5***REMOVED***
    p1 = Poly(c1***REMOVED***
    p2 = Poly(c2***REMOVED***
    p3 = p1 * p2
    assert_poly_almost_equal(p2 * p1, p3***REMOVED***
    assert_poly_almost_equal(p1 * c2, p3***REMOVED***
    assert_poly_almost_equal(c2 * p1, p3***REMOVED***
    assert_poly_almost_equal(p1 * tuple(c2***REMOVED***, p3***REMOVED***
    assert_poly_almost_equal(tuple(c2***REMOVED*** * p1, p3***REMOVED***
    assert_poly_almost_equal(p1 * np.array(c2***REMOVED***, p3***REMOVED***
    assert_poly_almost_equal(np.array(c2***REMOVED*** * p1, p3***REMOVED***
    assert_poly_almost_equal(p1 * 2, p1 * Poly([2***REMOVED******REMOVED******REMOVED***
    assert_poly_almost_equal(2 * p1, p1 * Poly([2***REMOVED******REMOVED******REMOVED***
    assert_raises(TypeError, op.mul, p1, Poly([0***REMOVED***, domain=Poly.domain + 1***REMOVED******REMOVED***
    assert_raises(TypeError, op.mul, p1, Poly([0***REMOVED***, window=Poly.window + 1***REMOVED******REMOVED***
    if Poly is Polynomial:
        assert_raises(TypeError, op.mul, p1, Chebyshev([0***REMOVED******REMOVED******REMOVED***
    else:
        assert_raises(TypeError, op.mul, p1, Polynomial([0***REMOVED******REMOVED******REMOVED***


def check_floordiv(Poly***REMOVED***:
    c1 = list(random((4,***REMOVED******REMOVED*** + .5***REMOVED***
    c2 = list(random((3,***REMOVED******REMOVED*** + .5***REMOVED***
    c3 = list(random((2,***REMOVED******REMOVED*** + .5***REMOVED***
    p1 = Poly(c1***REMOVED***
    p2 = Poly(c2***REMOVED***
    p3 = Poly(c3***REMOVED***
    p4 = p1 * p2 + p3
    c4 = list(p4.coef***REMOVED***
    assert_poly_almost_equal(p4 // p2, p1***REMOVED***
    assert_poly_almost_equal(p4 // c2, p1***REMOVED***
    assert_poly_almost_equal(c4 // p2, p1***REMOVED***
    assert_poly_almost_equal(p4 // tuple(c2***REMOVED***, p1***REMOVED***
    assert_poly_almost_equal(tuple(c4***REMOVED*** // p2, p1***REMOVED***
    assert_poly_almost_equal(p4 // np.array(c2***REMOVED***, p1***REMOVED***
    assert_poly_almost_equal(np.array(c4***REMOVED*** // p2, p1***REMOVED***
    assert_poly_almost_equal(2 // p2, Poly([0***REMOVED******REMOVED******REMOVED***
    assert_poly_almost_equal(p2 // 2, 0.5*p2***REMOVED***
    assert_raises(
        TypeError, op.floordiv, p1, Poly([0***REMOVED***, domain=Poly.domain + 1***REMOVED******REMOVED***
    assert_raises(
        TypeError, op.floordiv, p1, Poly([0***REMOVED***, window=Poly.window + 1***REMOVED******REMOVED***
    if Poly is Polynomial:
        assert_raises(TypeError, op.floordiv, p1, Chebyshev([0***REMOVED******REMOVED******REMOVED***
    else:
        assert_raises(TypeError, op.floordiv, p1, Polynomial([0***REMOVED******REMOVED******REMOVED***


def check_truediv(Poly***REMOVED***:
    # true division is valid only if the denominator is a Number and
    # not a python bool.
    p1 = Poly([1,2,3***REMOVED******REMOVED***
    p2 = p1 * 5

    for stype in np.ScalarType:
        if not issubclass(stype, Number***REMOVED*** or issubclass(stype, bool***REMOVED***:
            continue
        s = stype(5***REMOVED***
        assert_poly_almost_equal(op.truediv(p2, s***REMOVED***, p1***REMOVED***
        assert_raises(TypeError, op.truediv, s, p2***REMOVED***
    for stype in (int, long, float***REMOVED***:
        s = stype(5***REMOVED***
        assert_poly_almost_equal(op.truediv(p2, s***REMOVED***, p1***REMOVED***
        assert_raises(TypeError, op.truediv, s, p2***REMOVED***
    for stype in [complex***REMOVED***:
        s = stype(5, 0***REMOVED***
        assert_poly_almost_equal(op.truediv(p2, s***REMOVED***, p1***REMOVED***
        assert_raises(TypeError, op.truediv, s, p2***REMOVED***
    for s in [tuple(***REMOVED***, list(***REMOVED***, dict(***REMOVED***, bool(***REMOVED***, np.array([1***REMOVED******REMOVED******REMOVED***:
        assert_raises(TypeError, op.truediv, p2, s***REMOVED***
        assert_raises(TypeError, op.truediv, s, p2***REMOVED***
    for ptype in classes:
        assert_raises(TypeError, op.truediv, p2, ptype(1***REMOVED******REMOVED***


def check_mod(Poly***REMOVED***:
    # This checks commutation, not numerical correctness
    c1 = list(random((4,***REMOVED******REMOVED*** + .5***REMOVED***
    c2 = list(random((3,***REMOVED******REMOVED*** + .5***REMOVED***
    c3 = list(random((2,***REMOVED******REMOVED*** + .5***REMOVED***
    p1 = Poly(c1***REMOVED***
    p2 = Poly(c2***REMOVED***
    p3 = Poly(c3***REMOVED***
    p4 = p1 * p2 + p3
    c4 = list(p4.coef***REMOVED***
    assert_poly_almost_equal(p4 % p2, p3***REMOVED***
    assert_poly_almost_equal(p4 % c2, p3***REMOVED***
    assert_poly_almost_equal(c4 % p2, p3***REMOVED***
    assert_poly_almost_equal(p4 % tuple(c2***REMOVED***, p3***REMOVED***
    assert_poly_almost_equal(tuple(c4***REMOVED*** % p2, p3***REMOVED***
    assert_poly_almost_equal(p4 % np.array(c2***REMOVED***, p3***REMOVED***
    assert_poly_almost_equal(np.array(c4***REMOVED*** % p2, p3***REMOVED***
    assert_poly_almost_equal(2 % p2, Poly([2***REMOVED******REMOVED******REMOVED***
    assert_poly_almost_equal(p2 % 2, Poly([0***REMOVED******REMOVED******REMOVED***
    assert_raises(TypeError, op.mod, p1, Poly([0***REMOVED***, domain=Poly.domain + 1***REMOVED******REMOVED***
    assert_raises(TypeError, op.mod, p1, Poly([0***REMOVED***, window=Poly.window + 1***REMOVED******REMOVED***
    if Poly is Polynomial:
        assert_raises(TypeError, op.mod, p1, Chebyshev([0***REMOVED******REMOVED******REMOVED***
    else:
        assert_raises(TypeError, op.mod, p1, Polynomial([0***REMOVED******REMOVED******REMOVED***


def check_divmod(Poly***REMOVED***:
    # This checks commutation, not numerical correctness
    c1 = list(random((4,***REMOVED******REMOVED*** + .5***REMOVED***
    c2 = list(random((3,***REMOVED******REMOVED*** + .5***REMOVED***
    c3 = list(random((2,***REMOVED******REMOVED*** + .5***REMOVED***
    p1 = Poly(c1***REMOVED***
    p2 = Poly(c2***REMOVED***
    p3 = Poly(c3***REMOVED***
    p4 = p1 * p2 + p3
    c4 = list(p4.coef***REMOVED***
    quo, rem = divmod(p4, p2***REMOVED***
    assert_poly_almost_equal(quo, p1***REMOVED***
    assert_poly_almost_equal(rem, p3***REMOVED***
    quo, rem = divmod(p4, c2***REMOVED***
    assert_poly_almost_equal(quo, p1***REMOVED***
    assert_poly_almost_equal(rem, p3***REMOVED***
    quo, rem = divmod(c4, p2***REMOVED***
    assert_poly_almost_equal(quo, p1***REMOVED***
    assert_poly_almost_equal(rem, p3***REMOVED***
    quo, rem = divmod(p4, tuple(c2***REMOVED******REMOVED***
    assert_poly_almost_equal(quo, p1***REMOVED***
    assert_poly_almost_equal(rem, p3***REMOVED***
    quo, rem = divmod(tuple(c4***REMOVED***, p2***REMOVED***
    assert_poly_almost_equal(quo, p1***REMOVED***
    assert_poly_almost_equal(rem, p3***REMOVED***
    quo, rem = divmod(p4, np.array(c2***REMOVED******REMOVED***
    assert_poly_almost_equal(quo, p1***REMOVED***
    assert_poly_almost_equal(rem, p3***REMOVED***
    quo, rem = divmod(np.array(c4***REMOVED***, p2***REMOVED***
    assert_poly_almost_equal(quo, p1***REMOVED***
    assert_poly_almost_equal(rem, p3***REMOVED***
    quo, rem = divmod(p2, 2***REMOVED***
    assert_poly_almost_equal(quo, 0.5*p2***REMOVED***
    assert_poly_almost_equal(rem, Poly([0***REMOVED******REMOVED******REMOVED***
    quo, rem = divmod(2, p2***REMOVED***
    assert_poly_almost_equal(quo, Poly([0***REMOVED******REMOVED******REMOVED***
    assert_poly_almost_equal(rem, Poly([2***REMOVED******REMOVED******REMOVED***
    assert_raises(TypeError, divmod, p1, Poly([0***REMOVED***, domain=Poly.domain + 1***REMOVED******REMOVED***
    assert_raises(TypeError, divmod, p1, Poly([0***REMOVED***, window=Poly.window + 1***REMOVED******REMOVED***
    if Poly is Polynomial:
        assert_raises(TypeError, divmod, p1, Chebyshev([0***REMOVED******REMOVED******REMOVED***
    else:
        assert_raises(TypeError, divmod, p1, Polynomial([0***REMOVED******REMOVED******REMOVED***


def check_roots(Poly***REMOVED***:
    d = Poly.domain + random((2,***REMOVED******REMOVED****.25
    w = Poly.window + random((2,***REMOVED******REMOVED****.25
    tgt = np.sort(random((5,***REMOVED******REMOVED******REMOVED***
    res = np.sort(Poly.fromroots(tgt, domain=d, window=w***REMOVED***.roots(***REMOVED******REMOVED***
    assert_almost_equal(res, tgt***REMOVED***
    # default domain and window
    res = np.sort(Poly.fromroots(tgt***REMOVED***.roots(***REMOVED******REMOVED***
    assert_almost_equal(res, tgt***REMOVED***


def check_degree(Poly***REMOVED***:
    p = Poly.basis(5***REMOVED***
    assert_equal(p.degree(***REMOVED***, 5***REMOVED***


def check_copy(Poly***REMOVED***:
    p1 = Poly.basis(5***REMOVED***
    p2 = p1.copy(***REMOVED***
    assert_(p1 == p2***REMOVED***
    assert_(p1 is not p2***REMOVED***
    assert_(p1.coef is not p2.coef***REMOVED***
    assert_(p1.domain is not p2.domain***REMOVED***
    assert_(p1.window is not p2.window***REMOVED***


def check_integ(Poly***REMOVED***:
    P = Polynomial
    # Check defaults
    p0 = Poly.cast(P([1*2, 2*3, 3*4***REMOVED******REMOVED******REMOVED***
    p1 = P.cast(p0.integ(***REMOVED******REMOVED***
    p2 = P.cast(p0.integ(2***REMOVED******REMOVED***
    assert_poly_almost_equal(p1, P([0, 2, 3, 4***REMOVED******REMOVED******REMOVED***
    assert_poly_almost_equal(p2, P([0, 0, 1, 1, 1***REMOVED******REMOVED******REMOVED***
    # Check with k
    p0 = Poly.cast(P([1*2, 2*3, 3*4***REMOVED******REMOVED******REMOVED***
    p1 = P.cast(p0.integ(k=1***REMOVED******REMOVED***
    p2 = P.cast(p0.integ(2, k=[1, 1***REMOVED******REMOVED******REMOVED***
    assert_poly_almost_equal(p1, P([1, 2, 3, 4***REMOVED******REMOVED******REMOVED***
    assert_poly_almost_equal(p2, P([1, 1, 1, 1, 1***REMOVED******REMOVED******REMOVED***
    # Check with lbnd
    p0 = Poly.cast(P([1*2, 2*3, 3*4***REMOVED******REMOVED******REMOVED***
    p1 = P.cast(p0.integ(lbnd=1***REMOVED******REMOVED***
    p2 = P.cast(p0.integ(2, lbnd=1***REMOVED******REMOVED***
    assert_poly_almost_equal(p1, P([-9, 2, 3, 4***REMOVED******REMOVED******REMOVED***
    assert_poly_almost_equal(p2, P([6, -9, 1, 1, 1***REMOVED******REMOVED******REMOVED***
    # Check scaling
    d = 2*Poly.domain
    p0 = Poly.cast(P([1*2, 2*3, 3*4***REMOVED******REMOVED***, domain=d***REMOVED***
    p1 = P.cast(p0.integ(***REMOVED******REMOVED***
    p2 = P.cast(p0.integ(2***REMOVED******REMOVED***
    assert_poly_almost_equal(p1, P([0, 2, 3, 4***REMOVED******REMOVED******REMOVED***
    assert_poly_almost_equal(p2, P([0, 0, 1, 1, 1***REMOVED******REMOVED******REMOVED***


def check_deriv(Poly***REMOVED***:
    # Check that the derivative is the inverse of integration. It is
    # assumes that the integration has been checked elsewhere.
    d = Poly.domain + random((2,***REMOVED******REMOVED****.25
    w = Poly.window + random((2,***REMOVED******REMOVED****.25
    p1 = Poly([1, 2, 3***REMOVED***, domain=d, window=w***REMOVED***
    p2 = p1.integ(2, k=[1, 2***REMOVED******REMOVED***
    p3 = p1.integ(1, k=[1***REMOVED******REMOVED***
    assert_almost_equal(p2.deriv(1***REMOVED***.coef, p3.coef***REMOVED***
    assert_almost_equal(p2.deriv(2***REMOVED***.coef, p1.coef***REMOVED***
    # default domain and window
    p1 = Poly([1, 2, 3***REMOVED******REMOVED***
    p2 = p1.integ(2, k=[1, 2***REMOVED******REMOVED***
    p3 = p1.integ(1, k=[1***REMOVED******REMOVED***
    assert_almost_equal(p2.deriv(1***REMOVED***.coef, p3.coef***REMOVED***
    assert_almost_equal(p2.deriv(2***REMOVED***.coef, p1.coef***REMOVED***


def check_linspace(Poly***REMOVED***:
    d = Poly.domain + random((2,***REMOVED******REMOVED****.25
    w = Poly.window + random((2,***REMOVED******REMOVED****.25
    p = Poly([1, 2, 3***REMOVED***, domain=d, window=w***REMOVED***
    # check default domain
    xtgt = np.linspace(d[0***REMOVED***, d[1***REMOVED***, 20***REMOVED***
    ytgt = p(xtgt***REMOVED***
    xres, yres = p.linspace(20***REMOVED***
    assert_almost_equal(xres, xtgt***REMOVED***
    assert_almost_equal(yres, ytgt***REMOVED***
    # check specified domain
    xtgt = np.linspace(0, 2, 20***REMOVED***
    ytgt = p(xtgt***REMOVED***
    xres, yres = p.linspace(20, domain=[0, 2***REMOVED******REMOVED***
    assert_almost_equal(xres, xtgt***REMOVED***
    assert_almost_equal(yres, ytgt***REMOVED***


def check_pow(Poly***REMOVED***:
    d = Poly.domain + random((2,***REMOVED******REMOVED****.25
    w = Poly.window + random((2,***REMOVED******REMOVED****.25
    tgt = Poly([1***REMOVED***, domain=d, window=w***REMOVED***
    tst = Poly([1, 2, 3***REMOVED***, domain=d, window=w***REMOVED***
    for i in range(5***REMOVED***:
        assert_poly_almost_equal(tst**i, tgt***REMOVED***
        tgt = tgt * tst
    # default domain and window
    tgt = Poly([1***REMOVED******REMOVED***
    tst = Poly([1, 2, 3***REMOVED******REMOVED***
    for i in range(5***REMOVED***:
        assert_poly_almost_equal(tst**i, tgt***REMOVED***
        tgt = tgt * tst
    # check error for invalid powers
    assert_raises(ValueError, op.pow, tgt, 1.5***REMOVED***
    assert_raises(ValueError, op.pow, tgt, -1***REMOVED***


def check_call(Poly***REMOVED***:
    P = Polynomial
    d = Poly.domain
    x = np.linspace(d[0***REMOVED***, d[1***REMOVED***, 11***REMOVED***

    # Check defaults
    p = Poly.cast(P([1, 2, 3***REMOVED******REMOVED******REMOVED***
    tgt = 1 + x*(2 + 3*x***REMOVED***
    res = p(x***REMOVED***
    assert_almost_equal(res, tgt***REMOVED***


def check_cutdeg(Poly***REMOVED***:
    p = Poly([1, 2, 3***REMOVED******REMOVED***
    assert_raises(ValueError, p.cutdeg, .5***REMOVED***
    assert_raises(ValueError, p.cutdeg, -1***REMOVED***
    assert_equal(len(p.cutdeg(3***REMOVED******REMOVED***, 3***REMOVED***
    assert_equal(len(p.cutdeg(2***REMOVED******REMOVED***, 3***REMOVED***
    assert_equal(len(p.cutdeg(1***REMOVED******REMOVED***, 2***REMOVED***
    assert_equal(len(p.cutdeg(0***REMOVED******REMOVED***, 1***REMOVED***


def check_truncate(Poly***REMOVED***:
    p = Poly([1, 2, 3***REMOVED******REMOVED***
    assert_raises(ValueError, p.truncate, .5***REMOVED***
    assert_raises(ValueError, p.truncate, 0***REMOVED***
    assert_equal(len(p.truncate(4***REMOVED******REMOVED***, 3***REMOVED***
    assert_equal(len(p.truncate(3***REMOVED******REMOVED***, 3***REMOVED***
    assert_equal(len(p.truncate(2***REMOVED******REMOVED***, 2***REMOVED***
    assert_equal(len(p.truncate(1***REMOVED******REMOVED***, 1***REMOVED***


def check_trim(Poly***REMOVED***:
    c = [1, 1e-6, 1e-12, 0***REMOVED***
    p = Poly(c***REMOVED***
    assert_equal(p.trim(***REMOVED***.coef, c[:3***REMOVED******REMOVED***
    assert_equal(p.trim(1e-10***REMOVED***.coef, c[:2***REMOVED******REMOVED***
    assert_equal(p.trim(1e-5***REMOVED***.coef, c[:1***REMOVED******REMOVED***


def check_mapparms(Poly***REMOVED***:
    # check with defaults. Should be identity.
    d = Poly.domain
    w = Poly.window
    p = Poly([1***REMOVED***, domain=d, window=w***REMOVED***
    assert_almost_equal([0, 1***REMOVED***, p.mapparms(***REMOVED******REMOVED***
    #
    w = 2*d + 1
    p = Poly([1***REMOVED***, domain=d, window=w***REMOVED***
    assert_almost_equal([1, 2***REMOVED***, p.mapparms(***REMOVED******REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
