from __future__ import division, absolute_import, print_function

import numpy.polynomial as poly
from numpy.testing import TestCase, run_module_suite, assert_


class test_str(TestCase***REMOVED***:
    def test_polynomial_str(self***REMOVED***:
        res = str(poly.Polynomial([0, 1***REMOVED******REMOVED******REMOVED***
        tgt = 'poly([0., 1.***REMOVED******REMOVED***'
        assert_(res, tgt***REMOVED***

    def test_chebyshev_str(self***REMOVED***:
        res = str(poly.Chebyshev([0, 1***REMOVED******REMOVED******REMOVED***
        tgt = 'leg([0., 1.***REMOVED******REMOVED***'
        assert_(res, tgt***REMOVED***

    def test_legendre_str(self***REMOVED***:
        res = str(poly.Legendre([0, 1***REMOVED******REMOVED******REMOVED***
        tgt = 'leg([0., 1.***REMOVED******REMOVED***'
        assert_(res, tgt***REMOVED***

    def test_hermite_str(self***REMOVED***:
        res = str(poly.Hermite([0, 1***REMOVED******REMOVED******REMOVED***
        tgt = 'herm([0., 1.***REMOVED******REMOVED***'
        assert_(res, tgt***REMOVED***

    def test_hermiteE_str(self***REMOVED***:
        res = str(poly.HermiteE([0, 1***REMOVED******REMOVED******REMOVED***
        tgt = 'herme([0., 1.***REMOVED******REMOVED***'
        assert_(res, tgt***REMOVED***

    def test_laguerre_str(self***REMOVED***:
        res = str(poly.Laguerre([0, 1***REMOVED******REMOVED******REMOVED***
        tgt = 'lag([0., 1.***REMOVED******REMOVED***'
        assert_(res, tgt***REMOVED***


class test_repr(TestCase***REMOVED***:
    def test_polynomial_str(self***REMOVED***:
        res = repr(poly.Polynomial([0, 1***REMOVED******REMOVED******REMOVED***
        tgt = 'Polynomial([0., 1.***REMOVED******REMOVED***'
        assert_(res, tgt***REMOVED***

    def test_chebyshev_str(self***REMOVED***:
        res = repr(poly.Chebyshev([0, 1***REMOVED******REMOVED******REMOVED***
        tgt = 'Chebyshev([0., 1.***REMOVED***, [-1., 1.***REMOVED***, [-1., 1.***REMOVED******REMOVED***'
        assert_(res, tgt***REMOVED***

    def test_legendre_repr(self***REMOVED***:
        res = repr(poly.Legendre([0, 1***REMOVED******REMOVED******REMOVED***
        tgt = 'Legendre([0., 1.***REMOVED***, [-1., 1.***REMOVED***, [-1., 1.***REMOVED******REMOVED***'
        assert_(res, tgt***REMOVED***

    def test_hermite_repr(self***REMOVED***:
        res = repr(poly.Hermite([0, 1***REMOVED******REMOVED******REMOVED***
        tgt = 'Hermite([0., 1.***REMOVED***, [-1., 1.***REMOVED***, [-1., 1.***REMOVED******REMOVED***'
        assert_(res, tgt***REMOVED***

    def test_hermiteE_repr(self***REMOVED***:
        res = repr(poly.HermiteE([0, 1***REMOVED******REMOVED******REMOVED***
        tgt = 'HermiteE([0., 1.***REMOVED***, [-1., 1.***REMOVED***, [-1., 1.***REMOVED******REMOVED***'
        assert_(res, tgt***REMOVED***

    def test_laguerre_repr(self***REMOVED***:
        res = repr(poly.Laguerre([0, 1***REMOVED******REMOVED******REMOVED***
        tgt = 'Laguerre([0., 1.***REMOVED***, [0., 1.***REMOVED***, [0., 1.***REMOVED******REMOVED***'
        assert_(res, tgt***REMOVED***


#

if __name__ == "__main__":
    run_module_suite(***REMOVED***
