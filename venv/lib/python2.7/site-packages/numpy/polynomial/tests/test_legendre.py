***REMOVED***Tests for legendre module.

***REMOVED***
from __future__ import division, absolute_import, print_function

import numpy as np
import numpy.polynomial.legendre as leg
from numpy.polynomial.polynomial import polyval
from numpy.testing import (
    TestCase, assert_almost_equal, assert_raises,
    assert_equal, assert_, run_module_suite***REMOVED***

L0 = np.array([1***REMOVED******REMOVED***
L1 = np.array([0, 1***REMOVED******REMOVED***
L2 = np.array([-1, 0, 3***REMOVED******REMOVED***/2
L3 = np.array([0, -3, 0, 5***REMOVED******REMOVED***/2
L4 = np.array([3, 0, -30, 0, 35***REMOVED******REMOVED***/8
L5 = np.array([0, 15, 0, -70, 0, 63***REMOVED******REMOVED***/8
L6 = np.array([-5, 0, 105, 0, -315, 0, 231***REMOVED******REMOVED***/16
L7 = np.array([0, -35, 0, 315, 0, -693, 0, 429***REMOVED******REMOVED***/16
L8 = np.array([35, 0, -1260, 0, 6930, 0, -12012, 0, 6435***REMOVED******REMOVED***/128
L9 = np.array([0, 315, 0, -4620, 0, 18018, 0, -25740, 0, 12155***REMOVED******REMOVED***/128

Llist = [L0, L1, L2, L3, L4, L5, L6, L7, L8, L9***REMOVED***


def trim(x***REMOVED***:
    return leg.legtrim(x, tol=1e-6***REMOVED***


class TestConstants(TestCase***REMOVED***:

    def test_legdomain(self***REMOVED***:
        assert_equal(leg.legdomain, [-1, 1***REMOVED******REMOVED***

    def test_legzero(self***REMOVED***:
        assert_equal(leg.legzero, [0***REMOVED******REMOVED***

    def test_legone(self***REMOVED***:
        assert_equal(leg.legone, [1***REMOVED******REMOVED***

    def test_legx(self***REMOVED***:
        assert_equal(leg.legx, [0, 1***REMOVED******REMOVED***


class TestArithmetic(TestCase***REMOVED***:
    x = np.linspace(-1, 1, 100***REMOVED***

    def test_legadd(self***REMOVED***:
        for i in range(5***REMOVED***:
            for j in range(5***REMOVED***:
                msg = "At i=%d, j=%d" % (i, j***REMOVED***
                tgt = np.zeros(max(i, j***REMOVED*** + 1***REMOVED***
                tgt[i***REMOVED*** += 1
                tgt[j***REMOVED*** += 1
                res = leg.legadd([0***REMOVED****i + [1***REMOVED***, [0***REMOVED****j + [1***REMOVED******REMOVED***
                assert_equal(trim(res***REMOVED***, trim(tgt***REMOVED***, err_msg=msg***REMOVED***

    def test_legsub(self***REMOVED***:
        for i in range(5***REMOVED***:
            for j in range(5***REMOVED***:
                msg = "At i=%d, j=%d" % (i, j***REMOVED***
                tgt = np.zeros(max(i, j***REMOVED*** + 1***REMOVED***
                tgt[i***REMOVED*** += 1
                tgt[j***REMOVED*** -= 1
                res = leg.legsub([0***REMOVED****i + [1***REMOVED***, [0***REMOVED****j + [1***REMOVED******REMOVED***
                assert_equal(trim(res***REMOVED***, trim(tgt***REMOVED***, err_msg=msg***REMOVED***

    def test_legmulx(self***REMOVED***:
        assert_equal(leg.legmulx([0***REMOVED******REMOVED***, [0***REMOVED******REMOVED***
        assert_equal(leg.legmulx([1***REMOVED******REMOVED***, [0, 1***REMOVED******REMOVED***
        for i in range(1, 5***REMOVED***:
            tmp = 2*i + 1
            ser = [0***REMOVED****i + [1***REMOVED***
            tgt = [0***REMOVED****(i - 1***REMOVED*** + [i/tmp, 0, (i + 1***REMOVED***/tmp***REMOVED***
            assert_equal(leg.legmulx(ser***REMOVED***, tgt***REMOVED***

    def test_legmul(self***REMOVED***:
        # check values of result
        for i in range(5***REMOVED***:
            pol1 = [0***REMOVED****i + [1***REMOVED***
            val1 = leg.legval(self.x, pol1***REMOVED***
            for j in range(5***REMOVED***:
                msg = "At i=%d, j=%d" % (i, j***REMOVED***
                pol2 = [0***REMOVED****j + [1***REMOVED***
                val2 = leg.legval(self.x, pol2***REMOVED***
                pol3 = leg.legmul(pol1, pol2***REMOVED***
                val3 = leg.legval(self.x, pol3***REMOVED***
                assert_(len(pol3***REMOVED*** == i + j + 1, msg***REMOVED***
                assert_almost_equal(val3, val1*val2, err_msg=msg***REMOVED***

    def test_legdiv(self***REMOVED***:
        for i in range(5***REMOVED***:
            for j in range(5***REMOVED***:
                msg = "At i=%d, j=%d" % (i, j***REMOVED***
                ci = [0***REMOVED****i + [1***REMOVED***
                cj = [0***REMOVED****j + [1***REMOVED***
                tgt = leg.legadd(ci, cj***REMOVED***
                quo, rem = leg.legdiv(tgt, ci***REMOVED***
                res = leg.legadd(leg.legmul(quo, ci***REMOVED***, rem***REMOVED***
                assert_equal(trim(res***REMOVED***, trim(tgt***REMOVED***, err_msg=msg***REMOVED***


class TestEvaluation(TestCase***REMOVED***:
    # coefficients of 1 + 2*x + 3*x**2
    c1d = np.array([2., 2., 2.***REMOVED******REMOVED***
    c2d = np.einsum('i,j->ij', c1d, c1d***REMOVED***
    c3d = np.einsum('i,j,k->ijk', c1d, c1d, c1d***REMOVED***

    # some random values in [-1, 1***REMOVED***
    x = np.random.random((3, 5***REMOVED******REMOVED****2 - 1
    y = polyval(x, [1., 2., 3.***REMOVED******REMOVED***

    def test_legval(self***REMOVED***:
        #check empty input
        assert_equal(leg.legval([***REMOVED***, [1***REMOVED******REMOVED***.size, 0***REMOVED***

        #check normal input***REMOVED***
        x = np.linspace(-1, 1***REMOVED***
        y = [polyval(x, c***REMOVED*** for c in Llist***REMOVED***
        for i in range(10***REMOVED***:
            msg = "At i=%d" % i
            tgt = y[i***REMOVED***
            res = leg.legval(x, [0***REMOVED****i + [1***REMOVED******REMOVED***
            assert_almost_equal(res, tgt, err_msg=msg***REMOVED***

        #check that shape is preserved
        for i in range(3***REMOVED***:
            dims = [2***REMOVED****i
            x = np.zeros(dims***REMOVED***
            assert_equal(leg.legval(x, [1***REMOVED******REMOVED***.shape, dims***REMOVED***
            assert_equal(leg.legval(x, [1, 0***REMOVED******REMOVED***.shape, dims***REMOVED***
            assert_equal(leg.legval(x, [1, 0, 0***REMOVED******REMOVED***.shape, dims***REMOVED***

    def test_legval2d(self***REMOVED***:
        x1, x2, x3 = self.x
        y1, y2, y3 = self.y

        #test exceptions
        assert_raises(ValueError, leg.legval2d, x1, x2[:2***REMOVED***, self.c2d***REMOVED***

        #test values
        tgt = y1*y2
        res = leg.legval2d(x1, x2, self.c2d***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        #test shape
        z = np.ones((2, 3***REMOVED******REMOVED***
        res = leg.legval2d(z, z, self.c2d***REMOVED***
        assert_(res.shape == (2, 3***REMOVED******REMOVED***

    def test_legval3d(self***REMOVED***:
        x1, x2, x3 = self.x
        y1, y2, y3 = self.y

        #test exceptions
        assert_raises(ValueError, leg.legval3d, x1, x2, x3[:2***REMOVED***, self.c3d***REMOVED***

        #test values
        tgt = y1*y2*y3
        res = leg.legval3d(x1, x2, x3, self.c3d***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        #test shape
        z = np.ones((2, 3***REMOVED******REMOVED***
        res = leg.legval3d(z, z, z, self.c3d***REMOVED***
        assert_(res.shape == (2, 3***REMOVED******REMOVED***

    def test_leggrid2d(self***REMOVED***:
        x1, x2, x3 = self.x
        y1, y2, y3 = self.y

        #test values
        tgt = np.einsum('i,j->ij', y1, y2***REMOVED***
        res = leg.leggrid2d(x1, x2, self.c2d***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        #test shape
        z = np.ones((2, 3***REMOVED******REMOVED***
        res = leg.leggrid2d(z, z, self.c2d***REMOVED***
        assert_(res.shape == (2, 3***REMOVED****2***REMOVED***

    def test_leggrid3d(self***REMOVED***:
        x1, x2, x3 = self.x
        y1, y2, y3 = self.y

        #test values
        tgt = np.einsum('i,j,k->ijk', y1, y2, y3***REMOVED***
        res = leg.leggrid3d(x1, x2, x3, self.c3d***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        #test shape
        z = np.ones((2, 3***REMOVED******REMOVED***
        res = leg.leggrid3d(z, z, z, self.c3d***REMOVED***
        assert_(res.shape == (2, 3***REMOVED****3***REMOVED***


class TestIntegral(TestCase***REMOVED***:

    def test_legint(self***REMOVED***:
        # check exceptions
        assert_raises(ValueError, leg.legint, [0***REMOVED***, .5***REMOVED***
        assert_raises(ValueError, leg.legint, [0***REMOVED***, -1***REMOVED***
        assert_raises(ValueError, leg.legint, [0***REMOVED***, 1, [0, 0***REMOVED******REMOVED***

        # test integration of zero polynomial
        for i in range(2, 5***REMOVED***:
            k = [0***REMOVED****(i - 2***REMOVED*** + [1***REMOVED***
            res = leg.legint([0***REMOVED***, m=i, k=k***REMOVED***
            assert_almost_equal(res, [0, 1***REMOVED******REMOVED***

        # check single integration with integration constant
        for i in range(5***REMOVED***:
            scl = i + 1
            pol = [0***REMOVED****i + [1***REMOVED***
            tgt = [i***REMOVED*** + [0***REMOVED****i + [1/scl***REMOVED***
            legpol = leg.poly2leg(pol***REMOVED***
            legint = leg.legint(legpol, m=1, k=[i***REMOVED******REMOVED***
            res = leg.leg2poly(legint***REMOVED***
            assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

        # check single integration with integration constant and lbnd
        for i in range(5***REMOVED***:
            scl = i + 1
            pol = [0***REMOVED****i + [1***REMOVED***
            legpol = leg.poly2leg(pol***REMOVED***
            legint = leg.legint(legpol, m=1, k=[i***REMOVED***, lbnd=-1***REMOVED***
            assert_almost_equal(leg.legval(-1, legint***REMOVED***, i***REMOVED***

        # check single integration with integration constant and scaling
        for i in range(5***REMOVED***:
            scl = i + 1
            pol = [0***REMOVED****i + [1***REMOVED***
            tgt = [i***REMOVED*** + [0***REMOVED****i + [2/scl***REMOVED***
            legpol = leg.poly2leg(pol***REMOVED***
            legint = leg.legint(legpol, m=1, k=[i***REMOVED***, scl=2***REMOVED***
            res = leg.leg2poly(legint***REMOVED***
            assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

        # check multiple integrations with default k
        for i in range(5***REMOVED***:
            for j in range(2, 5***REMOVED***:
                pol = [0***REMOVED****i + [1***REMOVED***
                tgt = pol[:***REMOVED***
                for k in range(j***REMOVED***:
                    tgt = leg.legint(tgt, m=1***REMOVED***
                res = leg.legint(pol, m=j***REMOVED***
                assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

        # check multiple integrations with defined k
        for i in range(5***REMOVED***:
            for j in range(2, 5***REMOVED***:
                pol = [0***REMOVED****i + [1***REMOVED***
                tgt = pol[:***REMOVED***
                for k in range(j***REMOVED***:
                    tgt = leg.legint(tgt, m=1, k=[k***REMOVED******REMOVED***
                res = leg.legint(pol, m=j, k=list(range(j***REMOVED******REMOVED******REMOVED***
                assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

        # check multiple integrations with lbnd
        for i in range(5***REMOVED***:
            for j in range(2, 5***REMOVED***:
                pol = [0***REMOVED****i + [1***REMOVED***
                tgt = pol[:***REMOVED***
                for k in range(j***REMOVED***:
                    tgt = leg.legint(tgt, m=1, k=[k***REMOVED***, lbnd=-1***REMOVED***
                res = leg.legint(pol, m=j, k=list(range(j***REMOVED******REMOVED***, lbnd=-1***REMOVED***
                assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

        # check multiple integrations with scaling
        for i in range(5***REMOVED***:
            for j in range(2, 5***REMOVED***:
                pol = [0***REMOVED****i + [1***REMOVED***
                tgt = pol[:***REMOVED***
                for k in range(j***REMOVED***:
                    tgt = leg.legint(tgt, m=1, k=[k***REMOVED***, scl=2***REMOVED***
                res = leg.legint(pol, m=j, k=list(range(j***REMOVED******REMOVED***, scl=2***REMOVED***
                assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

    def test_legint_axis(self***REMOVED***:
        # check that axis keyword works
        c2d = np.random.random((3, 4***REMOVED******REMOVED***

        tgt = np.vstack([leg.legint(c***REMOVED*** for c in c2d.T***REMOVED******REMOVED***.T
        res = leg.legint(c2d, axis=0***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        tgt = np.vstack([leg.legint(c***REMOVED*** for c in c2d***REMOVED******REMOVED***
        res = leg.legint(c2d, axis=1***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        tgt = np.vstack([leg.legint(c, k=3***REMOVED*** for c in c2d***REMOVED******REMOVED***
        res = leg.legint(c2d, k=3, axis=1***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***


class TestDerivative(TestCase***REMOVED***:

    def test_legder(self***REMOVED***:
        # check exceptions
        assert_raises(ValueError, leg.legder, [0***REMOVED***, .5***REMOVED***
        assert_raises(ValueError, leg.legder, [0***REMOVED***, -1***REMOVED***

        # check that zeroth deriviative does nothing
        for i in range(5***REMOVED***:
            tgt = [0***REMOVED****i + [1***REMOVED***
            res = leg.legder(tgt, m=0***REMOVED***
            assert_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

        # check that derivation is the inverse of integration
        for i in range(5***REMOVED***:
            for j in range(2, 5***REMOVED***:
                tgt = [0***REMOVED****i + [1***REMOVED***
                res = leg.legder(leg.legint(tgt, m=j***REMOVED***, m=j***REMOVED***
                assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

        # check derivation with scaling
        for i in range(5***REMOVED***:
            for j in range(2, 5***REMOVED***:
                tgt = [0***REMOVED****i + [1***REMOVED***
                res = leg.legder(leg.legint(tgt, m=j, scl=2***REMOVED***, m=j, scl=.5***REMOVED***
                assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

    def test_legder_axis(self***REMOVED***:
        # check that axis keyword works
        c2d = np.random.random((3, 4***REMOVED******REMOVED***

        tgt = np.vstack([leg.legder(c***REMOVED*** for c in c2d.T***REMOVED******REMOVED***.T
        res = leg.legder(c2d, axis=0***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        tgt = np.vstack([leg.legder(c***REMOVED*** for c in c2d***REMOVED******REMOVED***
        res = leg.legder(c2d, axis=1***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***


class TestVander(TestCase***REMOVED***:
    # some random values in [-1, 1***REMOVED***
    x = np.random.random((3, 5***REMOVED******REMOVED****2 - 1

    def test_legvander(self***REMOVED***:
        # check for 1d x
        x = np.arange(3***REMOVED***
        v = leg.legvander(x, 3***REMOVED***
        assert_(v.shape == (3, 4***REMOVED******REMOVED***
        for i in range(4***REMOVED***:
            coef = [0***REMOVED****i + [1***REMOVED***
            assert_almost_equal(v[..., i***REMOVED***, leg.legval(x, coef***REMOVED******REMOVED***

        # check for 2d x
        x = np.array([[1, 2***REMOVED***, [3, 4***REMOVED***, [5, 6***REMOVED******REMOVED******REMOVED***
        v = leg.legvander(x, 3***REMOVED***
        assert_(v.shape == (3, 2, 4***REMOVED******REMOVED***
        for i in range(4***REMOVED***:
            coef = [0***REMOVED****i + [1***REMOVED***
            assert_almost_equal(v[..., i***REMOVED***, leg.legval(x, coef***REMOVED******REMOVED***

    def test_legvander2d(self***REMOVED***:
        # also tests polyval2d for non-square coefficient array
        x1, x2, x3 = self.x
        c = np.random.random((2, 3***REMOVED******REMOVED***
        van = leg.legvander2d(x1, x2, [1, 2***REMOVED******REMOVED***
        tgt = leg.legval2d(x1, x2, c***REMOVED***
        res = np.dot(van, c.flat***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        # check shape
        van = leg.legvander2d([x1***REMOVED***, [x2***REMOVED***, [1, 2***REMOVED******REMOVED***
        assert_(van.shape == (1, 5, 6***REMOVED******REMOVED***

    def test_legvander3d(self***REMOVED***:
        # also tests polyval3d for non-square coefficient array
        x1, x2, x3 = self.x
        c = np.random.random((2, 3, 4***REMOVED******REMOVED***
        van = leg.legvander3d(x1, x2, x3, [1, 2, 3***REMOVED******REMOVED***
        tgt = leg.legval3d(x1, x2, x3, c***REMOVED***
        res = np.dot(van, c.flat***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        # check shape
        van = leg.legvander3d([x1***REMOVED***, [x2***REMOVED***, [x3***REMOVED***, [1, 2, 3***REMOVED******REMOVED***
        assert_(van.shape == (1, 5, 24***REMOVED******REMOVED***


class TestFitting(TestCase***REMOVED***:

    def test_legfit(self***REMOVED***:
        def f(x***REMOVED***:
            return x*(x - 1***REMOVED****(x - 2***REMOVED***

        def f2(x***REMOVED***:
            return x**4 + x**2 + 1

        # Test exceptions
        assert_raises(ValueError, leg.legfit, [1***REMOVED***, [1***REMOVED***, -1***REMOVED***
        assert_raises(TypeError, leg.legfit, [[1***REMOVED******REMOVED***, [1***REMOVED***, 0***REMOVED***
        assert_raises(TypeError, leg.legfit, [***REMOVED***, [1***REMOVED***, 0***REMOVED***
        assert_raises(TypeError, leg.legfit, [1***REMOVED***, [[[1***REMOVED******REMOVED******REMOVED***, 0***REMOVED***
        assert_raises(TypeError, leg.legfit, [1, 2***REMOVED***, [1***REMOVED***, 0***REMOVED***
        assert_raises(TypeError, leg.legfit, [1***REMOVED***, [1, 2***REMOVED***, 0***REMOVED***
        assert_raises(TypeError, leg.legfit, [1***REMOVED***, [1***REMOVED***, 0, w=[[1***REMOVED******REMOVED******REMOVED***
        assert_raises(TypeError, leg.legfit, [1***REMOVED***, [1***REMOVED***, 0, w=[1, 1***REMOVED******REMOVED***
        assert_raises(ValueError, leg.legfit, [1***REMOVED***, [1***REMOVED***, [-1,***REMOVED******REMOVED***
        assert_raises(ValueError, leg.legfit, [1***REMOVED***, [1***REMOVED***, [2, -1, 6***REMOVED******REMOVED***
        assert_raises(TypeError, leg.legfit, [1***REMOVED***, [1***REMOVED***, [***REMOVED******REMOVED***

        # Test fit
        x = np.linspace(0, 2***REMOVED***
        y = f(x***REMOVED***
        #
        coef3 = leg.legfit(x, y, 3***REMOVED***
        assert_equal(len(coef3***REMOVED***, 4***REMOVED***
        assert_almost_equal(leg.legval(x, coef3***REMOVED***, y***REMOVED***
        coef3 = leg.legfit(x, y, [0, 1, 2, 3***REMOVED******REMOVED***
        assert_equal(len(coef3***REMOVED***, 4***REMOVED***
        assert_almost_equal(leg.legval(x, coef3***REMOVED***, y***REMOVED***
        #
        coef4 = leg.legfit(x, y, 4***REMOVED***
        assert_equal(len(coef4***REMOVED***, 5***REMOVED***
        assert_almost_equal(leg.legval(x, coef4***REMOVED***, y***REMOVED***
        coef4 = leg.legfit(x, y, [0, 1, 2, 3, 4***REMOVED******REMOVED***
        assert_equal(len(coef4***REMOVED***, 5***REMOVED***
        assert_almost_equal(leg.legval(x, coef4***REMOVED***, y***REMOVED***
        # check things still work if deg is not in strict increasing
        coef4 = leg.legfit(x, y, [2, 3, 4, 1, 0***REMOVED******REMOVED***
        assert_equal(len(coef4***REMOVED***, 5***REMOVED***
        assert_almost_equal(leg.legval(x, coef4***REMOVED***, y***REMOVED***
        #
        coef2d = leg.legfit(x, np.array([y, y***REMOVED******REMOVED***.T, 3***REMOVED***
        assert_almost_equal(coef2d, np.array([coef3, coef3***REMOVED******REMOVED***.T***REMOVED***
        coef2d = leg.legfit(x, np.array([y, y***REMOVED******REMOVED***.T, [0, 1, 2, 3***REMOVED******REMOVED***
        assert_almost_equal(coef2d, np.array([coef3, coef3***REMOVED******REMOVED***.T***REMOVED***
        # test weighting
        w = np.zeros_like(x***REMOVED***
        yw = y.copy(***REMOVED***
        w[1::2***REMOVED*** = 1
        y[0::2***REMOVED*** = 0
        wcoef3 = leg.legfit(x, yw, 3, w=w***REMOVED***
        assert_almost_equal(wcoef3, coef3***REMOVED***
        wcoef3 = leg.legfit(x, yw, [0, 1, 2, 3***REMOVED***, w=w***REMOVED***
        assert_almost_equal(wcoef3, coef3***REMOVED***
        #
        wcoef2d = leg.legfit(x, np.array([yw, yw***REMOVED******REMOVED***.T, 3, w=w***REMOVED***
        assert_almost_equal(wcoef2d, np.array([coef3, coef3***REMOVED******REMOVED***.T***REMOVED***
        wcoef2d = leg.legfit(x, np.array([yw, yw***REMOVED******REMOVED***.T, [0, 1, 2, 3***REMOVED***, w=w***REMOVED***
        assert_almost_equal(wcoef2d, np.array([coef3, coef3***REMOVED******REMOVED***.T***REMOVED***
        # test scaling with complex values x points whose square
        # is zero when summed.
        x = [1, 1j, -1, -1j***REMOVED***
        assert_almost_equal(leg.legfit(x, x, 1***REMOVED***, [0, 1***REMOVED******REMOVED***
        assert_almost_equal(leg.legfit(x, x, [0, 1***REMOVED******REMOVED***, [0, 1***REMOVED******REMOVED***
        # test fitting only even Legendre polynomials
        x = np.linspace(-1, 1***REMOVED***
        y = f2(x***REMOVED***
        coef1 = leg.legfit(x, y, 4***REMOVED***
        assert_almost_equal(leg.legval(x, coef1***REMOVED***, y***REMOVED***
        coef2 = leg.legfit(x, y, [0, 2, 4***REMOVED******REMOVED***
        assert_almost_equal(leg.legval(x, coef2***REMOVED***, y***REMOVED***
        assert_almost_equal(coef1, coef2***REMOVED***


class TestCompanion(TestCase***REMOVED***:

    def test_raises(self***REMOVED***:
        assert_raises(ValueError, leg.legcompanion, [***REMOVED******REMOVED***
        assert_raises(ValueError, leg.legcompanion, [1***REMOVED******REMOVED***

    def test_dimensions(self***REMOVED***:
        for i in range(1, 5***REMOVED***:
            coef = [0***REMOVED****i + [1***REMOVED***
            assert_(leg.legcompanion(coef***REMOVED***.shape == (i, i***REMOVED******REMOVED***

    def test_linear_root(self***REMOVED***:
        assert_(leg.legcompanion([1, 2***REMOVED******REMOVED***[0, 0***REMOVED*** == -.5***REMOVED***


class TestGauss(TestCase***REMOVED***:

    def test_100(self***REMOVED***:
        x, w = leg.leggauss(100***REMOVED***

        # test orthogonality. Note that the results need to be normalized,
        # otherwise the huge values that can arise from fast growing
        # functions like Laguerre can be very confusing.
        v = leg.legvander(x, 99***REMOVED***
        vv = np.dot(v.T * w, v***REMOVED***
        vd = 1/np.sqrt(vv.diagonal(***REMOVED******REMOVED***
        vv = vd[:, None***REMOVED*** * vv * vd
        assert_almost_equal(vv, np.eye(100***REMOVED******REMOVED***

        # check that the integral of 1 is correct
        tgt = 2.0
        assert_almost_equal(w.sum(***REMOVED***, tgt***REMOVED***


class TestMisc(TestCase***REMOVED***:

    def test_legfromroots(self***REMOVED***:
        res = leg.legfromroots([***REMOVED******REMOVED***
        assert_almost_equal(trim(res***REMOVED***, [1***REMOVED******REMOVED***
        for i in range(1, 5***REMOVED***:
            roots = np.cos(np.linspace(-np.pi, 0, 2*i + 1***REMOVED***[1::2***REMOVED******REMOVED***
            pol = leg.legfromroots(roots***REMOVED***
            res = leg.legval(roots, pol***REMOVED***
            tgt = 0
            assert_(len(pol***REMOVED*** == i + 1***REMOVED***
            assert_almost_equal(leg.leg2poly(pol***REMOVED***[-1***REMOVED***, 1***REMOVED***
            assert_almost_equal(res, tgt***REMOVED***

    def test_legroots(self***REMOVED***:
        assert_almost_equal(leg.legroots([1***REMOVED******REMOVED***, [***REMOVED******REMOVED***
        assert_almost_equal(leg.legroots([1, 2***REMOVED******REMOVED***, [-.5***REMOVED******REMOVED***
        for i in range(2, 5***REMOVED***:
            tgt = np.linspace(-1, 1, i***REMOVED***
            res = leg.legroots(leg.legfromroots(tgt***REMOVED******REMOVED***
            assert_almost_equal(trim(res***REMOVED***, trim(tgt***REMOVED******REMOVED***

    def test_legtrim(self***REMOVED***:
        coef = [2, -1, 1, 0***REMOVED***

        # Test exceptions
        assert_raises(ValueError, leg.legtrim, coef, -1***REMOVED***

        # Test results
        assert_equal(leg.legtrim(coef***REMOVED***, coef[:-1***REMOVED******REMOVED***
        assert_equal(leg.legtrim(coef, 1***REMOVED***, coef[:-3***REMOVED******REMOVED***
        assert_equal(leg.legtrim(coef, 2***REMOVED***, [0***REMOVED******REMOVED***

    def test_legline(self***REMOVED***:
        assert_equal(leg.legline(3, 4***REMOVED***, [3, 4***REMOVED******REMOVED***

    def test_leg2poly(self***REMOVED***:
        for i in range(10***REMOVED***:
            assert_almost_equal(leg.leg2poly([0***REMOVED****i + [1***REMOVED******REMOVED***, Llist[i***REMOVED******REMOVED***

    def test_poly2leg(self***REMOVED***:
        for i in range(10***REMOVED***:
            assert_almost_equal(leg.poly2leg(Llist[i***REMOVED******REMOVED***, [0***REMOVED****i + [1***REMOVED******REMOVED***

    def test_weight(self***REMOVED***:
        x = np.linspace(-1, 1, 11***REMOVED***
        tgt = 1.
        res = leg.legweight(x***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
