***REMOVED***Tests for polyutils module.

***REMOVED***
from __future__ import division, absolute_import, print_function

import numpy as np
import numpy.polynomial.polyutils as pu
from numpy.testing import (
    TestCase, assert_almost_equal, assert_raises,
    assert_equal, assert_, run_module_suite***REMOVED***


class TestMisc(TestCase***REMOVED***:

    def test_trimseq(self***REMOVED***:
        for i in range(5***REMOVED***:
            tgt = [1***REMOVED***
            res = pu.trimseq([1***REMOVED*** + [0***REMOVED****5***REMOVED***
            assert_equal(res, tgt***REMOVED***

    def test_as_series(self***REMOVED***:
        # check exceptions
        assert_raises(ValueError, pu.as_series, [[***REMOVED******REMOVED******REMOVED***
        assert_raises(ValueError, pu.as_series, [[[1, 2***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_raises(ValueError, pu.as_series, [[1***REMOVED***, ['a'***REMOVED******REMOVED******REMOVED***
        # check common types
        types = ['i', 'd', 'O'***REMOVED***
        for i in range(len(types***REMOVED******REMOVED***:
            for j in range(i***REMOVED***:
                ci = np.ones(1, types[i***REMOVED******REMOVED***
                cj = np.ones(1, types[j***REMOVED******REMOVED***
                [resi, resj***REMOVED*** = pu.as_series([ci, cj***REMOVED******REMOVED***
                assert_(resi.dtype.char == resj.dtype.char***REMOVED***
                assert_(resj.dtype.char == types[i***REMOVED******REMOVED***

    def test_trimcoef(self***REMOVED***:
        coef = [2, -1, 1, 0***REMOVED***
        # Test exceptions
        assert_raises(ValueError, pu.trimcoef, coef, -1***REMOVED***
        # Test results
        assert_equal(pu.trimcoef(coef***REMOVED***, coef[:-1***REMOVED******REMOVED***
        assert_equal(pu.trimcoef(coef, 1***REMOVED***, coef[:-3***REMOVED******REMOVED***
        assert_equal(pu.trimcoef(coef, 2***REMOVED***, [0***REMOVED******REMOVED***


class TestDomain(TestCase***REMOVED***:

    def test_getdomain(self***REMOVED***:
        # test for real values
        x = [1, 10, 3, -1***REMOVED***
        tgt = [-1, 10***REMOVED***
        res = pu.getdomain(x***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        # test for complex values
        x = [1 + 1j, 1 - 1j, 0, 2***REMOVED***
        tgt = [-1j, 2 + 1j***REMOVED***
        res = pu.getdomain(x***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

    def test_mapdomain(self***REMOVED***:
        # test for real values
        dom1 = [0, 4***REMOVED***
        dom2 = [1, 3***REMOVED***
        tgt = dom2
        res = pu. mapdomain(dom1, dom1, dom2***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        # test for complex values
        dom1 = [0 - 1j, 2 + 1j***REMOVED***
        dom2 = [-2, 2***REMOVED***
        tgt = dom2
        x = dom1
        res = pu.mapdomain(x, dom1, dom2***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        # test for multidimensional arrays
        dom1 = [0, 4***REMOVED***
        dom2 = [1, 3***REMOVED***
        tgt = np.array([dom2, dom2***REMOVED******REMOVED***
        x = np.array([dom1, dom1***REMOVED******REMOVED***
        res = pu.mapdomain(x, dom1, dom2***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        # test that subtypes are preserved.
        dom1 = [0, 4***REMOVED***
        dom2 = [1, 3***REMOVED***
        x = np.matrix([dom1, dom1***REMOVED******REMOVED***
        res = pu.mapdomain(x, dom1, dom2***REMOVED***
        assert_(isinstance(res, np.matrix***REMOVED******REMOVED***

    def test_mapparms(self***REMOVED***:
        # test for real values
        dom1 = [0, 4***REMOVED***
        dom2 = [1, 3***REMOVED***
        tgt = [1, .5***REMOVED***
        res = pu. mapparms(dom1, dom2***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***

        # test for complex values
        dom1 = [0 - 1j, 2 + 1j***REMOVED***
        dom2 = [-2, 2***REMOVED***
        tgt = [-1 + 1j, 1 - 1j***REMOVED***
        res = pu.mapparms(dom1, dom2***REMOVED***
        assert_almost_equal(res, tgt***REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
