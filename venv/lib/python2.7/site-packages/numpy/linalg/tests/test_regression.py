***REMOVED*** Test functions for linalg module
***REMOVED***
from __future__ import division, absolute_import, print_function

import numpy as np
from numpy import linalg, arange, float64, array, dot, transpose
from numpy.testing import (
    TestCase, run_module_suite, assert_equal, assert_array_equal,
    assert_array_almost_equal, assert_array_less
***REMOVED***


rlevel = 1


class TestRegression(TestCase***REMOVED***:

    def test_eig_build(self, level=rlevel***REMOVED***:
        # Ticket #652
        rva = array([1.03221168e+02 + 0.j,
                     -1.91843603e+01 + 0.j,
                     -6.04004526e-01 + 15.84422474j,
                     -6.04004526e-01 - 15.84422474j,
                     -1.13692929e+01 + 0.j,
                     -6.57612485e-01 + 10.41755503j,
                     -6.57612485e-01 - 10.41755503j,
                     1.82126812e+01 + 0.j,
                     1.06011014e+01 + 0.j,
                     7.80732773e+00 + 0.j,
                     -7.65390898e-01 + 0.j,
                     1.51971555e-15 + 0.j,
                     -1.51308713e-15 + 0.j***REMOVED******REMOVED***
        a = arange(13 * 13, dtype=float64***REMOVED***
        a.shape = (13, 13***REMOVED***
        a = a % 17
        va, ve = linalg.eig(a***REMOVED***
        va.sort(***REMOVED***
        rva.sort(***REMOVED***
        assert_array_almost_equal(va, rva***REMOVED***

    def test_eigh_build(self, level=rlevel***REMOVED***:
        # Ticket 662.
        rvals = [68.60568999, 89.57756725, 106.67185574***REMOVED***

        cov = array([[77.70273908,   3.51489954,  15.64602427***REMOVED***,
                     [3.51489954,  88.97013878,  -1.07431931***REMOVED***,
                     [15.64602427,  -1.07431931,  98.18223512***REMOVED******REMOVED******REMOVED***

        vals, vecs = linalg.eigh(cov***REMOVED***
        assert_array_almost_equal(vals, rvals***REMOVED***

    def test_svd_build(self, level=rlevel***REMOVED***:
        # Ticket 627.
        a = array([[0., 1.***REMOVED***, [1., 1.***REMOVED***, [2., 1.***REMOVED***, [3., 1.***REMOVED******REMOVED******REMOVED***
        m, n = a.shape
        u, s, vh = linalg.svd(a***REMOVED***

        b = dot(transpose(u[:, n:***REMOVED******REMOVED***, a***REMOVED***

        assert_array_almost_equal(b, np.zeros((2, 2***REMOVED******REMOVED******REMOVED***

    def test_norm_vector_badarg(self***REMOVED***:
        # Regression for #786: Froebenius norm for vectors raises
        # TypeError.
        self.assertRaises(ValueError, linalg.norm, array([1., 2., 3.***REMOVED******REMOVED***, 'fro'***REMOVED***

    def test_lapack_endian(self***REMOVED***:
        # For bug #1482
        a = array([[5.7998084,  -2.1825367***REMOVED***,
                   [-2.1825367,   9.85910595***REMOVED******REMOVED***, dtype='>f8'***REMOVED***
        b = array(a, dtype='<f8'***REMOVED***

        ap = linalg.cholesky(a***REMOVED***
        bp = linalg.cholesky(b***REMOVED***
        assert_array_equal(ap, bp***REMOVED***

    def test_large_svd_32bit(self***REMOVED***:
        # See gh-4442, 64bit would require very large/slow matrices.
        x = np.eye(1000, 66***REMOVED***
        np.linalg.svd(x***REMOVED***

    def test_svd_no_uv(self***REMOVED***:
        # gh-4733
        for shape in (3, 4***REMOVED***, (4, 4***REMOVED***, (4, 3***REMOVED***:
            for t in float, complex:
                a = np.ones(shape, dtype=t***REMOVED***
                w = linalg.svd(a, compute_uv=False***REMOVED***
                c = np.count_nonzero(np.absolute(w***REMOVED*** > 0.5***REMOVED***
                assert_equal(c, 1***REMOVED***
                assert_equal(np.linalg.matrix_rank(a***REMOVED***, 1***REMOVED***
                assert_array_less(1, np.linalg.norm(a, ord=2***REMOVED******REMOVED***

    def test_norm_object_array(self***REMOVED***:
        # gh-7575
        testvector = np.array([np.array([0, 1***REMOVED******REMOVED***, 0, 0***REMOVED***, dtype=object***REMOVED***

        norm = linalg.norm(testvector***REMOVED***
        assert_array_equal(norm, [0, 1***REMOVED******REMOVED***
        self.assertEqual(norm.dtype, np.dtype('float64'***REMOVED******REMOVED***

        norm = linalg.norm(testvector, ord=1***REMOVED***
        assert_array_equal(norm, [0, 1***REMOVED******REMOVED***
        self.assertNotEqual(norm.dtype, np.dtype('float64'***REMOVED******REMOVED***

        norm = linalg.norm(testvector, ord=2***REMOVED***
        assert_array_equal(norm, [0, 1***REMOVED******REMOVED***
        self.assertEqual(norm.dtype, np.dtype('float64'***REMOVED******REMOVED***

        self.assertRaises(ValueError, linalg.norm, testvector, ord='fro'***REMOVED***
        self.assertRaises(ValueError, linalg.norm, testvector, ord='nuc'***REMOVED***
        self.assertRaises(ValueError, linalg.norm, testvector, ord=np.inf***REMOVED***
        self.assertRaises(ValueError, linalg.norm, testvector, ord=-np.inf***REMOVED***
        self.assertRaises((AttributeError, DeprecationWarning***REMOVED***,
                          linalg.norm, testvector, ord=0***REMOVED***
        self.assertRaises(ValueError, linalg.norm, testvector, ord=-1***REMOVED***
        self.assertRaises(ValueError, linalg.norm, testvector, ord=-2***REMOVED***

        testmatrix = np.array([[np.array([0, 1***REMOVED******REMOVED***, 0, 0***REMOVED***,
                               [0,                0, 0***REMOVED******REMOVED***, dtype=object***REMOVED***

        norm = linalg.norm(testmatrix***REMOVED***
        assert_array_equal(norm, [0, 1***REMOVED******REMOVED***
        self.assertEqual(norm.dtype, np.dtype('float64'***REMOVED******REMOVED***

        norm = linalg.norm(testmatrix, ord='fro'***REMOVED***
        assert_array_equal(norm, [0, 1***REMOVED******REMOVED***
        self.assertEqual(norm.dtype, np.dtype('float64'***REMOVED******REMOVED***

        self.assertRaises(TypeError, linalg.norm, testmatrix, ord='nuc'***REMOVED***
        self.assertRaises(ValueError, linalg.norm, testmatrix, ord=np.inf***REMOVED***
        self.assertRaises(ValueError, linalg.norm, testmatrix, ord=-np.inf***REMOVED***
        self.assertRaises(ValueError, linalg.norm, testmatrix, ord=0***REMOVED***
        self.assertRaises(ValueError, linalg.norm, testmatrix, ord=1***REMOVED***
        self.assertRaises(ValueError, linalg.norm, testmatrix, ord=-1***REMOVED***
        self.assertRaises(TypeError, linalg.norm, testmatrix, ord=2***REMOVED***
        self.assertRaises(TypeError, linalg.norm, testmatrix, ord=-2***REMOVED***
        self.assertRaises(ValueError, linalg.norm, testmatrix, ord=3***REMOVED***


if __name__ == '__main__':
    run_module_suite(***REMOVED***
