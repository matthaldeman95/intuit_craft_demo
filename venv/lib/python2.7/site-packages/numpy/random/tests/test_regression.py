from __future__ import division, absolute_import, print_function

import sys
from numpy.testing import (TestCase, run_module_suite, assert_,
                           assert_array_equal, assert_raises***REMOVED***
from numpy import random
from numpy.compat import long
import numpy as np


class TestRegression(TestCase***REMOVED***:

    def test_VonMises_range(self***REMOVED***:
        # Make sure generated random variables are in [-pi, pi***REMOVED***.
        # Regression test for ticket #986.
        for mu in np.linspace(-7., 7., 5***REMOVED***:
            r = random.mtrand.vonmises(mu, 1, 50***REMOVED***
            assert_(np.all(r > -np.pi***REMOVED*** and np.all(r <= np.pi***REMOVED******REMOVED***

    def test_hypergeometric_range(self***REMOVED***:
        # Test for ticket #921
        assert_(np.all(np.random.hypergeometric(3, 18, 11, size=10***REMOVED*** < 4***REMOVED******REMOVED***
        assert_(np.all(np.random.hypergeometric(18, 3, 11, size=10***REMOVED*** > 0***REMOVED******REMOVED***

        # Test for ticket #5623
        args = [
            (2**20 - 2, 2**20 - 2, 2**20 - 2***REMOVED***,  # Check for 32-bit systems
        ***REMOVED***
        is_64bits = sys.maxsize > 2**32
        if is_64bits and sys.platform != 'win32':
            args.append((2**40 - 2, 2**40 - 2, 2**40 - 2***REMOVED******REMOVED*** # Check for 64-bit systems
        for arg in args:
            assert_(np.random.hypergeometric(*arg***REMOVED*** > 0***REMOVED***

    def test_logseries_convergence(self***REMOVED***:
        # Test for ticket #923
        N = 1000
        np.random.seed(0***REMOVED***
        rvsn = np.random.logseries(0.8, size=N***REMOVED***
        # these two frequency counts should be close to theoretical
        # numbers with this large sample
        # theoretical large N result is 0.49706795
        freq = np.sum(rvsn == 1***REMOVED*** / float(N***REMOVED***
        msg = "Frequency was %f, should be > 0.45" % freq
        assert_(freq > 0.45, msg***REMOVED***
        # theoretical large N result is 0.19882718
        freq = np.sum(rvsn == 2***REMOVED*** / float(N***REMOVED***
        msg = "Frequency was %f, should be < 0.23" % freq
        assert_(freq < 0.23, msg***REMOVED***

    def test_permutation_longs(self***REMOVED***:
        np.random.seed(1234***REMOVED***
        a = np.random.permutation(12***REMOVED***
        np.random.seed(1234***REMOVED***
        b = np.random.permutation(long(12***REMOVED******REMOVED***
        assert_array_equal(a, b***REMOVED***

    def test_randint_range(self***REMOVED***:
        # Test for ticket #1690
        lmax = np.iinfo('l'***REMOVED***.max
        lmin = np.iinfo('l'***REMOVED***.min
        ***REMOVED***
            random.randint(lmin, lmax***REMOVED***
        ***REMOVED***
            raise AssertionError

    def test_shuffle_mixed_dimension(self***REMOVED***:
        # Test for trac ticket #2074
        for t in [[1, 2, 3, None***REMOVED***,
                  [(1, 1***REMOVED***, (2, 2***REMOVED***, (3, 3***REMOVED***, None***REMOVED***,
                  [1, (2, 2***REMOVED***, (3, 3***REMOVED***, None***REMOVED***,
                  [(1, 1***REMOVED***, 2, 3, None***REMOVED******REMOVED***:
            np.random.seed(12345***REMOVED***
            shuffled = list(t***REMOVED***
            random.shuffle(shuffled***REMOVED***
            assert_array_equal(shuffled, [t[0***REMOVED***, t[3***REMOVED***, t[1***REMOVED***, t[2***REMOVED******REMOVED******REMOVED***

    def test_call_within_randomstate(self***REMOVED***:
        # Check that custom RandomState does not call into global state
        m = np.random.RandomState(***REMOVED***
        res = np.array([0, 8, 7, 2, 1, 9, 4, 7, 0, 3***REMOVED******REMOVED***
        for i in range(3***REMOVED***:
            np.random.seed(i***REMOVED***
            m.seed(4321***REMOVED***
            # If m.state is not honored, the result will change
            assert_array_equal(m.choice(10, size=10, p=np.ones(10***REMOVED***/10.***REMOVED***, res***REMOVED***

    def test_multivariate_normal_size_types(self***REMOVED***:
        # Test for multivariate_normal issue with 'size' argument.
        # Check that the multivariate_normal size argument can be a
        # numpy integer.
        np.random.multivariate_normal([0***REMOVED***, [[0***REMOVED******REMOVED***, size=1***REMOVED***
        np.random.multivariate_normal([0***REMOVED***, [[0***REMOVED******REMOVED***, size=np.int_(1***REMOVED******REMOVED***
        np.random.multivariate_normal([0***REMOVED***, [[0***REMOVED******REMOVED***, size=np.int64(1***REMOVED******REMOVED***

    def test_beta_small_parameters(self***REMOVED***:
        # Test that beta with small a and b parameters does not produce
        # NaNs due to roundoff errors causing 0 / 0, gh-5851
        np.random.seed(1234567890***REMOVED***
        x = np.random.beta(0.0001, 0.0001, size=100***REMOVED***
        assert_(not np.any(np.isnan(x***REMOVED******REMOVED***, 'Nans in np.random.beta'***REMOVED***

    def test_choice_sum_of_probs_tolerance(self***REMOVED***:
        # The sum of probs should be 1.0 with some tolerance.
        # For low precision dtypes the tolerance was too tight.
        # See numpy github issue 6123.
        np.random.seed(1234***REMOVED***
        a = [1, 2, 3***REMOVED***
        counts = [4, 4, 2***REMOVED***
        for dt in np.float16, np.float32, np.float64:
            probs = np.array(counts, dtype=dt***REMOVED*** / sum(counts***REMOVED***
            c = np.random.choice(a, p=probs***REMOVED***
            assert_(c in a***REMOVED***
            assert_raises(ValueError, np.random.choice, a, p=probs*0.9***REMOVED***

    def test_shuffle_of_array_of_different_length_strings(self***REMOVED***:
        # Test that permuting an array of different length strings
        # will not cause a segfault on garbage collection
        # Tests gh-7710
        np.random.seed(1234***REMOVED***

        a = np.array(['a', 'a' * 1000***REMOVED******REMOVED***

        for _ in range(100***REMOVED***:
            np.random.shuffle(a***REMOVED***

        # Force Garbage Collection - should not segfault.
        import gc
        gc.collect(***REMOVED***

    def test_shuffle_of_array_of_objects(self***REMOVED***:
        # Test that permuting an array of objects will not cause
        # a segfault on garbage collection.
        # See gh-7719
        np.random.seed(1234***REMOVED***
        a = np.array([np.arange(1***REMOVED***, np.arange(4***REMOVED******REMOVED******REMOVED***

        for _ in range(1000***REMOVED***:
            np.random.shuffle(a***REMOVED***

        # Force Garbage Collection - should not segfault.
        import gc
        gc.collect(***REMOVED***

if __name__ == "__main__":
    run_module_suite(***REMOVED***
