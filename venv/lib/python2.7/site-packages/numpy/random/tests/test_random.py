from __future__ import division, absolute_import, print_function

import numpy as np
from numpy.testing import (
        TestCase, run_module_suite, assert_, assert_raises, assert_equal,
        assert_warns***REMOVED***
from numpy import random
from numpy.compat import asbytes
import sys
import warnings



class TestSeed(TestCase***REMOVED***:
    def test_scalar(self***REMOVED***:
        s = np.random.RandomState(0***REMOVED***
        assert_equal(s.randint(1000***REMOVED***, 684***REMOVED***
        s = np.random.RandomState(4294967295***REMOVED***
        assert_equal(s.randint(1000***REMOVED***, 419***REMOVED***

    def test_array(self***REMOVED***:
        s = np.random.RandomState(range(10***REMOVED******REMOVED***
        assert_equal(s.randint(1000***REMOVED***, 468***REMOVED***
        s = np.random.RandomState(np.arange(10***REMOVED******REMOVED***
        assert_equal(s.randint(1000***REMOVED***, 468***REMOVED***
        s = np.random.RandomState([0***REMOVED******REMOVED***
        assert_equal(s.randint(1000***REMOVED***, 973***REMOVED***
        s = np.random.RandomState([4294967295***REMOVED******REMOVED***
        assert_equal(s.randint(1000***REMOVED***, 265***REMOVED***

    def test_invalid_scalar(self***REMOVED***:
        # seed must be an unsigned 32 bit integer
        assert_raises(TypeError, np.random.RandomState, -0.5***REMOVED***
        assert_raises(ValueError, np.random.RandomState, -1***REMOVED***

    def test_invalid_array(self***REMOVED***:
        # seed must be an unsigned 32 bit integer
        assert_raises(TypeError, np.random.RandomState, [-0.5***REMOVED******REMOVED***
        assert_raises(ValueError, np.random.RandomState, [-1***REMOVED******REMOVED***
        assert_raises(ValueError, np.random.RandomState, [4294967296***REMOVED******REMOVED***
        assert_raises(ValueError, np.random.RandomState, [1, 2, 4294967296***REMOVED******REMOVED***
        assert_raises(ValueError, np.random.RandomState, [1, -2, 4294967296***REMOVED******REMOVED***


class TestBinomial(TestCase***REMOVED***:
    def test_n_zero(self***REMOVED***:
        # Tests the corner case of n == 0 for the binomial distribution.
        # binomial(0, p***REMOVED*** should be zero for any p in [0, 1***REMOVED***.
        # This test addresses issue #3480.
        zeros = np.zeros(2, dtype='int'***REMOVED***
        for p in [0, .5, 1***REMOVED***:
            assert_(random.binomial(0, p***REMOVED*** == 0***REMOVED***
            np.testing.assert_array_equal(random.binomial(zeros, p***REMOVED***, zeros***REMOVED***

    def test_p_is_nan(self***REMOVED***:
        # Issue #4571.
        assert_raises(ValueError, random.binomial, 1, np.nan***REMOVED***


class TestMultinomial(TestCase***REMOVED***:
    def test_basic(self***REMOVED***:
        random.multinomial(100, [0.2, 0.8***REMOVED******REMOVED***

    def test_zero_probability(self***REMOVED***:
        random.multinomial(100, [0.2, 0.8, 0.0, 0.0, 0.0***REMOVED******REMOVED***

    def test_int_negative_interval(self***REMOVED***:
        assert_(-5 <= random.randint(-5, -1***REMOVED*** < -1***REMOVED***
        x = random.randint(-5, -1, 5***REMOVED***
        assert_(np.all(-5 <= x***REMOVED******REMOVED***
        assert_(np.all(x < -1***REMOVED******REMOVED***

    def test_size(self***REMOVED***:
        # gh-3173
        p = [0.5, 0.5***REMOVED***
        assert_equal(np.random.multinomial(1, p, np.uint32(1***REMOVED******REMOVED***.shape, (1, 2***REMOVED******REMOVED***
        assert_equal(np.random.multinomial(1, p, np.uint32(1***REMOVED******REMOVED***.shape, (1, 2***REMOVED******REMOVED***
        assert_equal(np.random.multinomial(1, p, np.uint32(1***REMOVED******REMOVED***.shape, (1, 2***REMOVED******REMOVED***
        assert_equal(np.random.multinomial(1, p, [2, 2***REMOVED******REMOVED***.shape, (2, 2, 2***REMOVED******REMOVED***
        assert_equal(np.random.multinomial(1, p, (2, 2***REMOVED******REMOVED***.shape, (2, 2, 2***REMOVED******REMOVED***
        assert_equal(np.random.multinomial(1, p, np.array((2, 2***REMOVED******REMOVED******REMOVED***.shape,
                     (2, 2, 2***REMOVED******REMOVED***

        assert_raises(TypeError, np.random.multinomial, 1, p,
                      np.float(1***REMOVED******REMOVED***


class TestSetState(TestCase***REMOVED***:
    def setUp(self***REMOVED***:
        self.seed = 1234567890
        self.prng = random.RandomState(self.seed***REMOVED***
        self.state = self.prng.get_state(***REMOVED***

    def test_basic(self***REMOVED***:
        old = self.prng.tomaxint(16***REMOVED***
        self.prng.set_state(self.state***REMOVED***
        new = self.prng.tomaxint(16***REMOVED***
        assert_(np.all(old == new***REMOVED******REMOVED***

    def test_gaussian_reset(self***REMOVED***:
        # Make sure the cached every-other-Gaussian is reset.
        old = self.prng.standard_normal(size=3***REMOVED***
        self.prng.set_state(self.state***REMOVED***
        new = self.prng.standard_normal(size=3***REMOVED***
        assert_(np.all(old == new***REMOVED******REMOVED***

    def test_gaussian_reset_in_media_res(self***REMOVED***:
        # When the state is saved with a cached Gaussian, make sure the
        # cached Gaussian is restored.

        self.prng.standard_normal(***REMOVED***
        state = self.prng.get_state(***REMOVED***
        old = self.prng.standard_normal(size=3***REMOVED***
        self.prng.set_state(state***REMOVED***
        new = self.prng.standard_normal(size=3***REMOVED***
        assert_(np.all(old == new***REMOVED******REMOVED***

    def test_backwards_compatibility(self***REMOVED***:
        # Make sure we can accept old state tuples that do not have the
        # cached Gaussian value.
        old_state = self.state[:-2***REMOVED***
        x1 = self.prng.standard_normal(size=16***REMOVED***
        self.prng.set_state(old_state***REMOVED***
        x2 = self.prng.standard_normal(size=16***REMOVED***
        self.prng.set_state(self.state***REMOVED***
        x3 = self.prng.standard_normal(size=16***REMOVED***
        assert_(np.all(x1 == x2***REMOVED******REMOVED***
        assert_(np.all(x1 == x3***REMOVED******REMOVED***

    def test_negative_binomial(self***REMOVED***:
        # Ensure that the negative binomial results take floating point
        # arguments without truncation.
        self.prng.negative_binomial(0.5, 0.5***REMOVED***


class TestRandint(TestCase***REMOVED***:

    rfunc = np.random.randint

    # valid integer/boolean types
    itype = [np.bool_, np.int8, np.uint8, np.int16, np.uint16,
             np.int32, np.uint32, np.int64, np.uint64***REMOVED***

    def test_unsupported_type(self***REMOVED***:
        assert_raises(TypeError, self.rfunc, 1, dtype=np.float***REMOVED***

    def test_bounds_checking(self***REMOVED***:
        for dt in self.itype:
            lbnd = 0 if dt is np.bool_ else np.iinfo(dt***REMOVED***.min
            ubnd = 2 if dt is np.bool_ else np.iinfo(dt***REMOVED***.max + 1
            assert_raises(ValueError, self.rfunc, lbnd - 1, ubnd, dtype=dt***REMOVED***
            assert_raises(ValueError, self.rfunc, lbnd, ubnd + 1, dtype=dt***REMOVED***
            assert_raises(ValueError, self.rfunc, ubnd, lbnd, dtype=dt***REMOVED***
            assert_raises(ValueError, self.rfunc, 1, 0, dtype=dt***REMOVED***

    def test_rng_zero_and_extremes(self***REMOVED***:
        for dt in self.itype:
            lbnd = 0 if dt is np.bool_ else np.iinfo(dt***REMOVED***.min
            ubnd = 2 if dt is np.bool_ else np.iinfo(dt***REMOVED***.max + 1
            tgt = ubnd - 1
            assert_equal(self.rfunc(tgt, tgt + 1, size=1000, dtype=dt***REMOVED***, tgt***REMOVED***
            tgt = lbnd
            assert_equal(self.rfunc(tgt, tgt + 1, size=1000, dtype=dt***REMOVED***, tgt***REMOVED***
            tgt = (lbnd + ubnd***REMOVED***//2
            assert_equal(self.rfunc(tgt, tgt + 1, size=1000, dtype=dt***REMOVED***, tgt***REMOVED***

    def test_in_bounds_fuzz(self***REMOVED***:
        # Don't use fixed seed
        np.random.seed(***REMOVED***
        for dt in self.itype[1:***REMOVED***:
            for ubnd in [4, 8, 16***REMOVED***:
                vals = self.rfunc(2, ubnd, size=2**16, dtype=dt***REMOVED***
                assert_(vals.max(***REMOVED*** < ubnd***REMOVED***
                assert_(vals.min(***REMOVED*** >= 2***REMOVED***
        vals = self.rfunc(0, 2, size=2**16, dtype=np.bool***REMOVED***
        assert_(vals.max(***REMOVED*** < 2***REMOVED***
        assert_(vals.min(***REMOVED*** >= 0***REMOVED***

    def test_repeatability(self***REMOVED***:
        import hashlib
        # We use a md5 hash of generated sequences of 1000 samples
        # in the range [0, 6***REMOVED*** for all but np.bool, where the range
        # is [0, 2***REMOVED***. Hashes are for little endian numbers.
        tgt = {'bool': '7dd3170d7aa461d201a65f8bcf3944b0',
               'int16': '1b7741b80964bb190c50d541dca1cac1',
               'int32': '4dc9fcc2b395577ebb51793e58ed1a05',
               'int64': '17db902806f448331b5a758d7d2ee672',
               'int8': '27dd30c4e08a797063dffac2490b0be6',
               'uint16': '1b7741b80964bb190c50d541dca1cac1',
               'uint32': '4dc9fcc2b395577ebb51793e58ed1a05',
               'uint64': '17db902806f448331b5a758d7d2ee672',
               'uint8': '27dd30c4e08a797063dffac2490b0be6'***REMOVED***

        for dt in self.itype[1:***REMOVED***:
            np.random.seed(1234***REMOVED***

            # view as little endian for hash
            if sys.byteorder == 'little':
                val = self.rfunc(0, 6, size=1000, dtype=dt***REMOVED***
            else:
                val = self.rfunc(0, 6, size=1000, dtype=dt***REMOVED***.byteswap(***REMOVED***

            res = hashlib.md5(val.view(np.int8***REMOVED******REMOVED***.hexdigest(***REMOVED***
            assert_(tgt[np.dtype(dt***REMOVED***.name***REMOVED*** == res***REMOVED***

        # bools do not depend on endianess
        np.random.seed(1234***REMOVED***
        val = self.rfunc(0, 2, size=1000, dtype=np.bool***REMOVED***.view(np.int8***REMOVED***
        res = hashlib.md5(val***REMOVED***.hexdigest(***REMOVED***
        assert_(tgt[np.dtype(np.bool***REMOVED***.name***REMOVED*** == res***REMOVED***

    def test_respect_dtype_singleton(self***REMOVED***:
        # See gh-7203
        for dt in self.itype:
            lbnd = 0 if dt is np.bool_ else np.iinfo(dt***REMOVED***.min
            ubnd = 2 if dt is np.bool_ else np.iinfo(dt***REMOVED***.max + 1

            sample = self.rfunc(lbnd, ubnd, dtype=dt***REMOVED***
            self.assertEqual(sample.dtype, np.dtype(dt***REMOVED******REMOVED***

        for dt in (np.bool, np.int, np.long***REMOVED***:
            lbnd = 0 if dt is np.bool else np.iinfo(dt***REMOVED***.min
            ubnd = 2 if dt is np.bool else np.iinfo(dt***REMOVED***.max + 1

            # gh-7284: Ensure that we get Python data types
            sample = self.rfunc(lbnd, ubnd, dtype=dt***REMOVED***
            self.assertFalse(hasattr(sample, 'dtype'***REMOVED******REMOVED***
            self.assertEqual(type(sample***REMOVED***, dt***REMOVED***


class TestRandomDist(TestCase***REMOVED***:
    # Make sure the random distribution returns the correct value for a
    # given seed

    def setUp(self***REMOVED***:
        self.seed = 1234567890

    def test_rand(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.rand(3, 2***REMOVED***
        desired = np.array([[0.61879477158567997, 0.59162362775974664***REMOVED***,
                            [0.88868358904449662, 0.89165480011560816***REMOVED***,
                            [0.4575674820298663, 0.7781880808593471***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_almost_equal(actual, desired, decimal=15***REMOVED***

    def test_randn(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.randn(3, 2***REMOVED***
        desired = np.array([[1.34016345771863121, 1.73759122771936081***REMOVED***,
                           [1.498988344300628, -0.2286433324536169***REMOVED***,
                           [2.031033998682787, 2.17032494605655257***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_almost_equal(actual, desired, decimal=15***REMOVED***

    def test_randint(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.randint(-99, 99, size=(3, 2***REMOVED******REMOVED***
        desired = np.array([[31, 3***REMOVED***,
                            [-52, 41***REMOVED***,
                            [-48, -66***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_equal(actual, desired***REMOVED***

    def test_random_integers(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.random_integers(-99, 99, size=(3, 2***REMOVED******REMOVED***
        desired = np.array([[31, 3***REMOVED***,
                            [-52, 41***REMOVED***,
                            [-48, -66***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_equal(actual, desired***REMOVED***

    def test_random_integers_max_int(self***REMOVED***:
        # Tests whether random_integers can generate the
        # maximum allowed Python int that can be converted
        # into a C long. Previous implementations of this
        # method have thrown an OverflowError when attempting
        # to generate this integer.
        actual = np.random.random_integers(np.iinfo('l'***REMOVED***.max,
                                           np.iinfo('l'***REMOVED***.max***REMOVED***
        desired = np.iinfo('l'***REMOVED***.max
        np.testing.assert_equal(actual, desired***REMOVED***

    def test_random_integers_deprecated(self***REMOVED***:
        with warnings.catch_warnings(***REMOVED***:
            warnings.simplefilter("error", DeprecationWarning***REMOVED***

            # DeprecationWarning raised with high == None
            assert_raises(DeprecationWarning,
                          np.random.random_integers,
                          np.iinfo('l'***REMOVED***.max***REMOVED***

            # DeprecationWarning raised with high != None
            assert_raises(DeprecationWarning,
                          np.random.random_integers,
                          np.iinfo('l'***REMOVED***.max, np.iinfo('l'***REMOVED***.max***REMOVED***

    def test_random_sample(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.random_sample((3, 2***REMOVED******REMOVED***
        desired = np.array([[0.61879477158567997, 0.59162362775974664***REMOVED***,
                            [0.88868358904449662, 0.89165480011560816***REMOVED***,
                            [0.4575674820298663, 0.7781880808593471***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_almost_equal(actual, desired, decimal=15***REMOVED***

    def test_choice_uniform_replace(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.choice(4, 4***REMOVED***
        desired = np.array([2, 3, 2, 3***REMOVED******REMOVED***
        np.testing.assert_array_equal(actual, desired***REMOVED***

    def test_choice_nonuniform_replace(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.choice(4, 4, p=[0.4, 0.4, 0.1, 0.1***REMOVED******REMOVED***
        desired = np.array([1, 1, 2, 2***REMOVED******REMOVED***
        np.testing.assert_array_equal(actual, desired***REMOVED***

    def test_choice_uniform_noreplace(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.choice(4, 3, replace=False***REMOVED***
        desired = np.array([0, 1, 3***REMOVED******REMOVED***
        np.testing.assert_array_equal(actual, desired***REMOVED***

    def test_choice_nonuniform_noreplace(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.choice(4, 3, replace=False,
                                  p=[0.1, 0.3, 0.5, 0.1***REMOVED******REMOVED***
        desired = np.array([2, 3, 1***REMOVED******REMOVED***
        np.testing.assert_array_equal(actual, desired***REMOVED***

    def test_choice_noninteger(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.choice(['a', 'b', 'c', 'd'***REMOVED***, 4***REMOVED***
        desired = np.array(['c', 'd', 'c', 'd'***REMOVED******REMOVED***
        np.testing.assert_array_equal(actual, desired***REMOVED***

    def test_choice_exceptions(self***REMOVED***:
        sample = np.random.choice
        assert_raises(ValueError, sample, -1, 3***REMOVED***
        assert_raises(ValueError, sample, 3., 3***REMOVED***
        assert_raises(ValueError, sample, [[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED***, 3***REMOVED***
        assert_raises(ValueError, sample, [***REMOVED***, 3***REMOVED***
        assert_raises(ValueError, sample, [1, 2, 3, 4***REMOVED***, 3,
                                          p=[[0.25, 0.25***REMOVED***, [0.25, 0.25***REMOVED******REMOVED******REMOVED***
        assert_raises(ValueError, sample, [1, 2***REMOVED***, 3, p=[0.4, 0.4, 0.2***REMOVED******REMOVED***
        assert_raises(ValueError, sample, [1, 2***REMOVED***, 3, p=[1.1, -0.1***REMOVED******REMOVED***
        assert_raises(ValueError, sample, [1, 2***REMOVED***, 3, p=[0.4, 0.4***REMOVED******REMOVED***
        assert_raises(ValueError, sample, [1, 2, 3***REMOVED***, 4, replace=False***REMOVED***
        assert_raises(ValueError, sample, [1, 2, 3***REMOVED***, 2, replace=False,
                                          p=[1, 0, 0***REMOVED******REMOVED***

    def test_choice_return_shape(self***REMOVED***:
        p = [0.1, 0.9***REMOVED***
        # Check scalar
        assert_(np.isscalar(np.random.choice(2, replace=True***REMOVED******REMOVED******REMOVED***
        assert_(np.isscalar(np.random.choice(2, replace=False***REMOVED******REMOVED******REMOVED***
        assert_(np.isscalar(np.random.choice(2, replace=True, p=p***REMOVED******REMOVED******REMOVED***
        assert_(np.isscalar(np.random.choice(2, replace=False, p=p***REMOVED******REMOVED******REMOVED***
        assert_(np.isscalar(np.random.choice([1, 2***REMOVED***, replace=True***REMOVED******REMOVED******REMOVED***
        assert_(np.random.choice([None***REMOVED***, replace=True***REMOVED*** is None***REMOVED***
        a = np.array([1, 2***REMOVED******REMOVED***
        arr = np.empty(1, dtype=object***REMOVED***
        arr[0***REMOVED*** = a
        assert_(np.random.choice(arr, replace=True***REMOVED*** is a***REMOVED***

        # Check 0-d array
        s = tuple(***REMOVED***
        assert_(not np.isscalar(np.random.choice(2, s, replace=True***REMOVED******REMOVED******REMOVED***
        assert_(not np.isscalar(np.random.choice(2, s, replace=False***REMOVED******REMOVED******REMOVED***
        assert_(not np.isscalar(np.random.choice(2, s, replace=True, p=p***REMOVED******REMOVED******REMOVED***
        assert_(not np.isscalar(np.random.choice(2, s, replace=False, p=p***REMOVED******REMOVED******REMOVED***
        assert_(not np.isscalar(np.random.choice([1, 2***REMOVED***, s, replace=True***REMOVED******REMOVED******REMOVED***
        assert_(np.random.choice([None***REMOVED***, s, replace=True***REMOVED***.ndim == 0***REMOVED***
        a = np.array([1, 2***REMOVED******REMOVED***
        arr = np.empty(1, dtype=object***REMOVED***
        arr[0***REMOVED*** = a
        assert_(np.random.choice(arr, s, replace=True***REMOVED***.item(***REMOVED*** is a***REMOVED***

        # Check multi dimensional array
        s = (2, 3***REMOVED***
        p = [0.1, 0.1, 0.1, 0.1, 0.4, 0.2***REMOVED***
        assert_(np.random.choice(6, s, replace=True***REMOVED***.shape, s***REMOVED***
        assert_(np.random.choice(6, s, replace=False***REMOVED***.shape, s***REMOVED***
        assert_(np.random.choice(6, s, replace=True, p=p***REMOVED***.shape, s***REMOVED***
        assert_(np.random.choice(6, s, replace=False, p=p***REMOVED***.shape, s***REMOVED***
        assert_(np.random.choice(np.arange(6***REMOVED***, s, replace=True***REMOVED***.shape, s***REMOVED***

    def test_bytes(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.bytes(10***REMOVED***
        desired = asbytes('\x82Ui\x9e\xff\x97+Wf\xa5'***REMOVED***
        np.testing.assert_equal(actual, desired***REMOVED***

    def test_shuffle(self***REMOVED***:
        # Test lists, arrays (of various dtypes***REMOVED***, and multidimensional versions
        # of both, c-contiguous or not:
        for conv in [lambda x: np.array([***REMOVED******REMOVED***,
                     lambda x: x,
                     lambda x: np.asarray(x***REMOVED***.astype(np.int8***REMOVED***,
                     lambda x: np.asarray(x***REMOVED***.astype(np.float32***REMOVED***,
                     lambda x: np.asarray(x***REMOVED***.astype(np.complex64***REMOVED***,
                     lambda x: np.asarray(x***REMOVED***.astype(object***REMOVED***,
                     lambda x: [(i, i***REMOVED*** for i in x***REMOVED***,
                     lambda x: np.asarray([[i, i***REMOVED*** for i in x***REMOVED******REMOVED***,
                     lambda x: np.vstack([x, x***REMOVED******REMOVED***.T,
                     # gh-4270
                     lambda x: np.asarray([(i, i***REMOVED*** for i in x***REMOVED***,
                                          [("a", object, 1***REMOVED***,
                                           ("b", np.int32, 1***REMOVED******REMOVED******REMOVED******REMOVED***:
            np.random.seed(self.seed***REMOVED***
            alist = conv([1, 2, 3, 4, 5, 6, 7, 8, 9, 0***REMOVED******REMOVED***
            np.random.shuffle(alist***REMOVED***
            actual = alist
            desired = conv([0, 1, 9, 6, 2, 4, 5, 8, 7, 3***REMOVED******REMOVED***
            np.testing.assert_array_equal(actual, desired***REMOVED***

    def test_shuffle_masked(self***REMOVED***:
        # gh-3263
        a = np.ma.masked_values(np.reshape(range(20***REMOVED***, (5,4***REMOVED******REMOVED*** % 3 - 1, -1***REMOVED***
        b = np.ma.masked_values(np.arange(20***REMOVED*** % 3 - 1, -1***REMOVED***
        a_orig = a.copy(***REMOVED***
        b_orig = b.copy(***REMOVED***
        for i in range(50***REMOVED***:
            np.random.shuffle(a***REMOVED***
            assert_equal(
                sorted(a.data[~a.mask***REMOVED******REMOVED***, sorted(a_orig.data[~a_orig.mask***REMOVED******REMOVED******REMOVED***
            np.random.shuffle(b***REMOVED***
            assert_equal(
                sorted(b.data[~b.mask***REMOVED******REMOVED***, sorted(b_orig.data[~b_orig.mask***REMOVED******REMOVED******REMOVED***

    def test_beta(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.beta(.1, .9, size=(3, 2***REMOVED******REMOVED***
        desired = np.array(
                [[1.45341850513746058e-02, 5.31297615662868145e-04***REMOVED***,
                 [1.85366619058432324e-06, 4.19214516800110563e-03***REMOVED***,
                 [1.58405155108498093e-04, 1.26252891949397652e-04***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_almost_equal(actual, desired, decimal=15***REMOVED***

    def test_binomial(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.binomial(100.123, .456, size=(3, 2***REMOVED******REMOVED***
        desired = np.array([[37, 43***REMOVED***,
                         [42, 48***REMOVED***,
                         [46, 45***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_equal(actual, desired***REMOVED***

    def test_chisquare(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.chisquare(50, size=(3, 2***REMOVED******REMOVED***
        desired = np.array([[63.87858175501090585, 68.68407748911370447***REMOVED***,
                            [65.77116116901505904, 47.09686762438974483***REMOVED***,
                            [72.3828403199695174, 74.18408615260374006***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_almost_equal(actual, desired, decimal=13***REMOVED***

    def test_dirichlet(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        alpha = np.array([51.72840233779265162, 39.74494232180943953***REMOVED******REMOVED***
        actual = np.random.mtrand.dirichlet(alpha, size=(3, 2***REMOVED******REMOVED***
        desired = np.array([[[0.54539444573611562, 0.45460555426388438***REMOVED***,
                             [0.62345816822039413, 0.37654183177960598***REMOVED******REMOVED***,
                            [[0.55206000085785778, 0.44793999914214233***REMOVED***,
                             [0.58964023305154301, 0.41035976694845688***REMOVED******REMOVED***,
                            [[0.59266909280647828, 0.40733090719352177***REMOVED***,
                             [0.56974431743975207, 0.43025568256024799***REMOVED******REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_almost_equal(actual, desired, decimal=15***REMOVED***

    def test_dirichlet_size(self***REMOVED***:
        # gh-3173
        p = np.array([51.72840233779265162, 39.74494232180943953***REMOVED******REMOVED***
        assert_equal(np.random.dirichlet(p, np.uint32(1***REMOVED******REMOVED***.shape, (1, 2***REMOVED******REMOVED***
        assert_equal(np.random.dirichlet(p, np.uint32(1***REMOVED******REMOVED***.shape, (1, 2***REMOVED******REMOVED***
        assert_equal(np.random.dirichlet(p, np.uint32(1***REMOVED******REMOVED***.shape, (1, 2***REMOVED******REMOVED***
        assert_equal(np.random.dirichlet(p, [2, 2***REMOVED******REMOVED***.shape, (2, 2, 2***REMOVED******REMOVED***
        assert_equal(np.random.dirichlet(p, (2, 2***REMOVED******REMOVED***.shape, (2, 2, 2***REMOVED******REMOVED***
        assert_equal(np.random.dirichlet(p, np.array((2, 2***REMOVED******REMOVED******REMOVED***.shape, (2, 2, 2***REMOVED******REMOVED***

        assert_raises(TypeError, np.random.dirichlet, p, np.float(1***REMOVED******REMOVED***

    def test_exponential(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.exponential(1.1234, size=(3, 2***REMOVED******REMOVED***
        desired = np.array([[1.08342649775011624, 1.00607889924557314***REMOVED***,
                            [2.46628830085216721, 2.49668106809923884***REMOVED***,
                            [0.68717433461363442, 1.69175666993575979***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_almost_equal(actual, desired, decimal=15***REMOVED***

    def test_f(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.f(12, 77, size=(3, 2***REMOVED******REMOVED***
        desired = np.array([[1.21975394418575878, 1.75135759791559775***REMOVED***,
                            [1.44803115017146489, 1.22108959480396262***REMOVED***,
                            [1.02176975757740629, 1.34431827623300415***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_almost_equal(actual, desired, decimal=15***REMOVED***

    def test_gamma(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.gamma(5, 3, size=(3, 2***REMOVED******REMOVED***
        desired = np.array([[24.60509188649287182, 28.54993563207210627***REMOVED***,
                            [26.13476110204064184, 12.56988482927716078***REMOVED***,
                            [31.71863275789960568, 33.30143302795922011***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_almost_equal(actual, desired, decimal=14***REMOVED***

    def test_geometric(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.geometric(.123456789, size=(3, 2***REMOVED******REMOVED***
        desired = np.array([[8, 7***REMOVED***,
                            [17, 17***REMOVED***,
                            [5, 12***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_equal(actual, desired***REMOVED***

    def test_gumbel(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.gumbel(loc=.123456789, scale=2.0, size=(3, 2***REMOVED******REMOVED***
        desired = np.array([[0.19591898743416816, 0.34405539668096674***REMOVED***,
                            [-1.4492522252274278, -1.47374816298446865***REMOVED***,
                            [1.10651090478803416, -0.69535848626236174***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_almost_equal(actual, desired, decimal=15***REMOVED***

    def test_hypergeometric(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.hypergeometric(10.1, 5.5, 14, size=(3, 2***REMOVED******REMOVED***
        desired = np.array([[10, 10***REMOVED***,
                            [10, 10***REMOVED***,
                            [9, 9***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_equal(actual, desired***REMOVED***

        # Test nbad = 0
        actual = np.random.hypergeometric(5, 0, 3, size=4***REMOVED***
        desired = np.array([3, 3, 3, 3***REMOVED******REMOVED***
        np.testing.assert_array_equal(actual, desired***REMOVED***

        actual = np.random.hypergeometric(15, 0, 12, size=4***REMOVED***
        desired = np.array([12, 12, 12, 12***REMOVED******REMOVED***
        np.testing.assert_array_equal(actual, desired***REMOVED***

        # Test ngood = 0
        actual = np.random.hypergeometric(0, 5, 3, size=4***REMOVED***
        desired = np.array([0, 0, 0, 0***REMOVED******REMOVED***
        np.testing.assert_array_equal(actual, desired***REMOVED***

        actual = np.random.hypergeometric(0, 15, 12, size=4***REMOVED***
        desired = np.array([0, 0, 0, 0***REMOVED******REMOVED***
        np.testing.assert_array_equal(actual, desired***REMOVED***

    def test_laplace(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.laplace(loc=.123456789, scale=2.0, size=(3, 2***REMOVED******REMOVED***
        desired = np.array([[0.66599721112760157, 0.52829452552221945***REMOVED***,
                            [3.12791959514407125, 3.18202813572992005***REMOVED***,
                            [-0.05391065675859356, 1.74901336242837324***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_almost_equal(actual, desired, decimal=15***REMOVED***

    def test_logistic(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.logistic(loc=.123456789, scale=2.0, size=(3, 2***REMOVED******REMOVED***
        desired = np.array([[1.09232835305011444, 0.8648196662399954***REMOVED***,
                            [4.27818590694950185, 4.33897006346929714***REMOVED***,
                            [-0.21682183359214885, 2.63373365386060332***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_almost_equal(actual, desired, decimal=15***REMOVED***

    def test_lognormal(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.lognormal(mean=.123456789, sigma=2.0, size=(3, 2***REMOVED******REMOVED***
        desired = np.array([[16.50698631688883822, 36.54846706092654784***REMOVED***,
                            [22.67886599981281748, 0.71617561058995771***REMOVED***,
                            [65.72798501792723869, 86.84341601437161273***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_almost_equal(actual, desired, decimal=13***REMOVED***

    def test_logseries(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.logseries(p=.923456789, size=(3, 2***REMOVED******REMOVED***
        desired = np.array([[2, 2***REMOVED***,
                            [6, 17***REMOVED***,
                            [3, 6***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_equal(actual, desired***REMOVED***

    def test_multinomial(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.multinomial(20, [1/6.***REMOVED****6, size=(3, 2***REMOVED******REMOVED***
        desired = np.array([[[4, 3, 5, 4, 2, 2***REMOVED***,
                             [5, 2, 8, 2, 2, 1***REMOVED******REMOVED***,
                            [[3, 4, 3, 6, 0, 4***REMOVED***,
                             [2, 1, 4, 3, 6, 4***REMOVED******REMOVED***,
                            [[4, 4, 2, 5, 2, 3***REMOVED***,
                             [4, 3, 4, 2, 3, 4***REMOVED******REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_equal(actual, desired***REMOVED***

    def test_multivariate_normal(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        mean = (.123456789, 10***REMOVED***
        # Hmm... not even symmetric.
        cov = [[1, 0***REMOVED***, [1, 0***REMOVED******REMOVED***
        size = (3, 2***REMOVED***
        actual = np.random.multivariate_normal(mean, cov, size***REMOVED***
        desired = np.array([[[-1.47027513018564449, 10.***REMOVED***,
                             [-1.65915081534845532, 10.***REMOVED******REMOVED***,
                            [[-2.29186329304599745, 10.***REMOVED***,
                             [-1.77505606019580053, 10.***REMOVED******REMOVED***,
                            [[-0.54970369430044119, 10.***REMOVED***,
                             [0.29768848031692957, 10.***REMOVED******REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_almost_equal(actual, desired, decimal=15***REMOVED***

        # Check for default size, was raising deprecation warning
        actual = np.random.multivariate_normal(mean, cov***REMOVED***
        desired = np.array([-0.79441224511977482, 10.***REMOVED******REMOVED***
        np.testing.assert_array_almost_equal(actual, desired, decimal=15***REMOVED***

        # Check that non positive-semidefinite covariance raises warning
        mean = [0, 0***REMOVED***
        cov = [[1, 1 + 1e-10***REMOVED***, [1 + 1e-10, 1***REMOVED******REMOVED***
        assert_warns(RuntimeWarning, np.random.multivariate_normal, mean, cov***REMOVED***

    def test_negative_binomial(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.negative_binomial(n=100, p=.12345, size=(3, 2***REMOVED******REMOVED***
        desired = np.array([[848, 841***REMOVED***,
                            [892, 611***REMOVED***,
                            [779, 647***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_equal(actual, desired***REMOVED***

    def test_noncentral_chisquare(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.noncentral_chisquare(df=5, nonc=5, size=(3, 2***REMOVED******REMOVED***
        desired = np.array([[23.91905354498517511, 13.35324692733826346***REMOVED***,
                            [31.22452661329736401, 16.60047399466177254***REMOVED***,
                            [5.03461598262724586, 17.94973089023519464***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_almost_equal(actual, desired, decimal=14***REMOVED***

        actual = np.random.noncentral_chisquare(df=.5, nonc=.2, size=(3, 2***REMOVED******REMOVED***
        desired = np.array([[ 1.47145377828516666,  0.15052899268012659***REMOVED***,
                            [ 0.00943803056963588,  1.02647251615666169***REMOVED***,
                            [ 0.332334982684171  ,  0.15451287602753125***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_almost_equal(actual, desired, decimal=14***REMOVED***

        np.random.seed(self.seed***REMOVED***
        actual = np.random.noncentral_chisquare(df=5, nonc=0, size=(3, 2***REMOVED******REMOVED***
        desired = np.array([[9.597154162763948, 11.725484450296079***REMOVED***,
                            [10.413711048138335, 3.694475922923986***REMOVED***,
                            [13.484222138963087, 14.377255424602957***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_almost_equal(actual, desired, decimal=14***REMOVED***

    def test_noncentral_f(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.noncentral_f(dfnum=5, dfden=2, nonc=1,
                                        size=(3, 2***REMOVED******REMOVED***
        desired = np.array([[1.40598099674926669, 0.34207973179285761***REMOVED***,
                            [3.57715069265772545, 7.92632662577829805***REMOVED***,
                            [0.43741599463544162, 1.1774208752428319***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_almost_equal(actual, desired, decimal=14***REMOVED***

    def test_normal(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.normal(loc=.123456789, scale=2.0, size=(3, 2***REMOVED******REMOVED***
        desired = np.array([[2.80378370443726244, 3.59863924443872163***REMOVED***,
                            [3.121433477601256, -0.33382987590723379***REMOVED***,
                            [4.18552478636557357, 4.46410668111310471***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_almost_equal(actual, desired, decimal=15***REMOVED***

    def test_pareto(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.pareto(a=.123456789, size=(3, 2***REMOVED******REMOVED***
        desired = np.array(
                [[2.46852460439034849e+03, 1.41286880810518346e+03***REMOVED***,
                 [5.28287797029485181e+07, 6.57720981047328785e+07***REMOVED***,
                 [1.40840323350391515e+02, 1.98390255135251704e+05***REMOVED******REMOVED******REMOVED***
        # For some reason on 32-bit x86 Ubuntu 12.10 the [1, 0***REMOVED*** entry in this
        # matrix differs by 24 nulps. Discussion:
        #   http://mail.scipy.org/pipermail/numpy-discussion/2012-September/063801.html
        # Consensus is that this is probably some gcc quirk that affects
        # rounding but not in any important way, so we just use a looser
        # tolerance on this test:
        np.testing.assert_array_almost_equal_nulp(actual, desired, nulp=30***REMOVED***

    def test_poisson(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.poisson(lam=.123456789, size=(3, 2***REMOVED******REMOVED***
        desired = np.array([[0, 0***REMOVED***,
                         [1, 0***REMOVED***,
                         [0, 0***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_equal(actual, desired***REMOVED***

    def test_poisson_exceptions(self***REMOVED***:
        lambig = np.iinfo('l'***REMOVED***.max
        lamneg = -1
        assert_raises(ValueError, np.random.poisson, lamneg***REMOVED***
        assert_raises(ValueError, np.random.poisson, [lamneg***REMOVED****10***REMOVED***
        assert_raises(ValueError, np.random.poisson, lambig***REMOVED***
        assert_raises(ValueError, np.random.poisson, [lambig***REMOVED****10***REMOVED***

    def test_power(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.power(a=.123456789, size=(3, 2***REMOVED******REMOVED***
        desired = np.array([[0.02048932883240791, 0.01424192241128213***REMOVED***,
                            [0.38446073748535298, 0.39499689943484395***REMOVED***,
                            [0.00177699707563439, 0.13115505880863756***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_almost_equal(actual, desired, decimal=15***REMOVED***

    def test_rayleigh(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.rayleigh(scale=10, size=(3, 2***REMOVED******REMOVED***
        desired = np.array([[13.8882496494248393, 13.383318339044731***REMOVED***,
                            [20.95413364294492098, 21.08285015800712614***REMOVED***,
                            [11.06066537006854311, 17.35468505778271009***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_almost_equal(actual, desired, decimal=14***REMOVED***

    def test_standard_cauchy(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.standard_cauchy(size=(3, 2***REMOVED******REMOVED***
        desired = np.array([[0.77127660196445336, -6.55601161955910605***REMOVED***,
                            [0.93582023391158309, -2.07479293013759447***REMOVED***,
                            [-4.74601644297011926, 0.18338989290760804***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_almost_equal(actual, desired, decimal=15***REMOVED***

    def test_standard_exponential(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.standard_exponential(size=(3, 2***REMOVED******REMOVED***
        desired = np.array([[0.96441739162374596, 0.89556604882105506***REMOVED***,
                            [2.1953785836319808, 2.22243285392490542***REMOVED***,
                            [0.6116915921431676, 1.50592546727413201***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_almost_equal(actual, desired, decimal=15***REMOVED***

    def test_standard_gamma(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.standard_gamma(shape=3, size=(3, 2***REMOVED******REMOVED***
        desired = np.array([[5.50841531318455058, 6.62953470301903103***REMOVED***,
                            [5.93988484943779227, 2.31044849402133989***REMOVED***,
                            [7.54838614231317084, 8.012756093271868***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_almost_equal(actual, desired, decimal=14***REMOVED***

    def test_standard_normal(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.standard_normal(size=(3, 2***REMOVED******REMOVED***
        desired = np.array([[1.34016345771863121, 1.73759122771936081***REMOVED***,
                            [1.498988344300628, -0.2286433324536169***REMOVED***,
                            [2.031033998682787, 2.17032494605655257***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_almost_equal(actual, desired, decimal=15***REMOVED***

    def test_standard_t(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.standard_t(df=10, size=(3, 2***REMOVED******REMOVED***
        desired = np.array([[0.97140611862659965, -0.08830486548450577***REMOVED***,
                            [1.36311143689505321, -0.55317463909867071***REMOVED***,
                            [-0.18473749069684214, 0.61181537341755321***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_almost_equal(actual, desired, decimal=15***REMOVED***

    def test_triangular(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.triangular(left=5.12, mode=10.23, right=20.34,
                                      size=(3, 2***REMOVED******REMOVED***
        desired = np.array([[12.68117178949215784, 12.4129206149193152***REMOVED***,
                            [16.20131377335158263, 16.25692138747600524***REMOVED***,
                            [11.20400690911820263, 14.4978144835829923***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_almost_equal(actual, desired, decimal=14***REMOVED***

    def test_uniform(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.uniform(low=1.23, high=10.54, size=(3, 2***REMOVED******REMOVED***
        desired = np.array([[6.99097932346268003, 6.73801597444323974***REMOVED***,
                            [9.50364421400426274, 9.53130618907631089***REMOVED***,
                            [5.48995325769805476, 8.47493103280052118***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_almost_equal(actual, desired, decimal=15***REMOVED***

    def test_uniform_range_bounds(self***REMOVED***:
        fmin = np.finfo('float'***REMOVED***.min
        fmax = np.finfo('float'***REMOVED***.max

        func = np.random.uniform
        np.testing.assert_raises(OverflowError, func, -np.inf, 0***REMOVED***
        np.testing.assert_raises(OverflowError, func,  0,      np.inf***REMOVED***
        np.testing.assert_raises(OverflowError, func,  fmin,   fmax***REMOVED***

        # (fmax / 1e17***REMOVED*** - fmin is within range, so this should not throw
        np.random.uniform(low=fmin, high=fmax / 1e17***REMOVED***

    def test_vonmises(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.vonmises(mu=1.23, kappa=1.54, size=(3, 2***REMOVED******REMOVED***
        desired = np.array([[2.28567572673902042, 2.89163838442285037***REMOVED***,
                            [0.38198375564286025, 2.57638023113890746***REMOVED***,
                            [1.19153771588353052, 1.83509849681825354***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_almost_equal(actual, desired, decimal=15***REMOVED***

    def test_vonmises_small(self***REMOVED***:
        # check infinite loop, gh-4720
        np.random.seed(self.seed***REMOVED***
        r = np.random.vonmises(mu=0., kappa=1.1e-8, size=10**6***REMOVED***
        np.testing.assert_(np.isfinite(r***REMOVED***.all(***REMOVED******REMOVED***

    def test_wald(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.wald(mean=1.23, scale=1.54, size=(3, 2***REMOVED******REMOVED***
        desired = np.array([[3.82935265715889983, 5.13125249184285526***REMOVED***,
                            [0.35045403618358717, 1.50832396872003538***REMOVED***,
                            [0.24124319895843183, 0.22031101461955038***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_almost_equal(actual, desired, decimal=14***REMOVED***

    def test_weibull(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.weibull(a=1.23, size=(3, 2***REMOVED******REMOVED***
        desired = np.array([[0.97097342648766727, 0.91422896443565516***REMOVED***,
                            [1.89517770034962929, 1.91414357960479564***REMOVED***,
                            [0.67057783752390987, 1.39494046635066793***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_almost_equal(actual, desired, decimal=15***REMOVED***

    def test_zipf(self***REMOVED***:
        np.random.seed(self.seed***REMOVED***
        actual = np.random.zipf(a=1.23, size=(3, 2***REMOVED******REMOVED***
        desired = np.array([[66, 29***REMOVED***,
                            [1, 1***REMOVED***,
                            [3, 13***REMOVED******REMOVED******REMOVED***
        np.testing.assert_array_equal(actual, desired***REMOVED***


class TestThread(object***REMOVED***:
    # make sure each state produces the same sequence even in threads
    def setUp(self***REMOVED***:
        self.seeds = range(4***REMOVED***

    def check_function(self, function, sz***REMOVED***:
        from threading import Thread

        out1 = np.empty((len(self.seeds***REMOVED***,***REMOVED*** + sz***REMOVED***
        out2 = np.empty((len(self.seeds***REMOVED***,***REMOVED*** + sz***REMOVED***

        # threaded generation
        t = [Thread(target=function, args=(np.random.RandomState(s***REMOVED***, o***REMOVED******REMOVED***
             for s, o in zip(self.seeds, out1***REMOVED******REMOVED***
        [x.start(***REMOVED*** for x in t***REMOVED***
        [x.join(***REMOVED*** for x in t***REMOVED***

        # the same serial
        for s, o in zip(self.seeds, out2***REMOVED***:
            function(np.random.RandomState(s***REMOVED***, o***REMOVED***

        # these platforms change x87 fpu precision mode in threads
        if (np.intp(***REMOVED***.dtype.itemsize == 4 and sys.platform == "win32"***REMOVED***:
            np.testing.assert_array_almost_equal(out1, out2***REMOVED***
        else:
            np.testing.assert_array_equal(out1, out2***REMOVED***

    def test_normal(self***REMOVED***:
        def gen_random(state, out***REMOVED***:
            out[...***REMOVED*** = state.normal(size=10000***REMOVED***
        self.check_function(gen_random, sz=(10000,***REMOVED******REMOVED***

    def test_exp(self***REMOVED***:
        def gen_random(state, out***REMOVED***:
            out[...***REMOVED*** = state.exponential(scale=np.ones((100, 1000***REMOVED******REMOVED******REMOVED***
        self.check_function(gen_random, sz=(100, 1000***REMOVED******REMOVED***

    def test_multinomial(self***REMOVED***:
        def gen_random(state, out***REMOVED***:
            out[...***REMOVED*** = state.multinomial(10, [1/6.***REMOVED****6, size=10000***REMOVED***
        self.check_function(gen_random, sz=(10000,6***REMOVED******REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
