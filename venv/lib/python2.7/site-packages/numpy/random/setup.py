from __future__ import division, print_function

from os.path import join, split, dirname
***REMOVED***
import sys
from distutils.dep_util import newer
from distutils.msvccompiler import get_build_version as get_msvc_build_version

def needs_mingw_ftime_workaround(***REMOVED***:
    # We need the mingw workaround for _ftime if the msvc runtime version is
    # 7.1 or above and we build with mingw ...
    # ... but we can't easily detect compiler version outside distutils command
    # context, so we will need to detect in randomkit whether we build with gcc
    msver = get_msvc_build_version(***REMOVED***
    if msver and msver >= 8:
        return True

    return False

def configuration(parent_package='',top_path=None***REMOVED***:
    from numpy.distutils.misc_util import Configuration, get_mathlibs
    config = Configuration('random', parent_package, top_path***REMOVED***

    def generate_libraries(ext, build_dir***REMOVED***:
        config_cmd = config.get_config_cmd(***REMOVED***
        libs = get_mathlibs(***REMOVED***
        if sys.platform == 'win32':
            libs.append('Advapi32'***REMOVED***
        ext.libraries.extend(libs***REMOVED***
        return None

    # enable unix large file support on 32 bit systems
    # (64 bit off_t, lseek -> lseek64 etc.***REMOVED***
    defs = [('_FILE_OFFSET_BITS', '64'***REMOVED***,
            ('_LARGEFILE_SOURCE', '1'***REMOVED***,
            ('_LARGEFILE64_SOURCE', '1'***REMOVED******REMOVED***
    if needs_mingw_ftime_workaround(***REMOVED***:
        defs.append(("NPY_NEEDS_MINGW_TIME_WORKAROUND", None***REMOVED******REMOVED***

    libs = [***REMOVED***
    # Configure mtrand
    config.add_extension('mtrand',
                         sources=[join('mtrand', x***REMOVED*** for x in
                                  ['mtrand.c', 'randomkit.c', 'initarray.c',
                                   'distributions.c'***REMOVED******REMOVED***+[generate_libraries***REMOVED***,
                         libraries=libs,
                         depends=[join('mtrand', '*.h'***REMOVED***,
                                  join('mtrand', '*.pyx'***REMOVED***,
                                  join('mtrand', '*.pxi'***REMOVED***,***REMOVED***,
                         define_macros=defs,
                         ***REMOVED***

    config.add_data_files(('.', join('mtrand', 'randomkit.h'***REMOVED******REMOVED******REMOVED***
    config.add_data_dir('tests'***REMOVED***

    return config


if __name__ == '__main__':
    from numpy.distutils.core import setup
    setup(configuration=configuration***REMOVED***
