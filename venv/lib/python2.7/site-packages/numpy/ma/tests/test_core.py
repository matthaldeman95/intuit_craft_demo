# pylint: disable-msg=W0401,W0511,W0611,W0612,W0614,R0201,E1102
***REMOVED***Tests suite for MaskedArray & subclassing.

:author: Pierre Gerard-Marchant
:contact: pierregm_at_uga_dot_edu
***REMOVED***
from __future__ import division, absolute_import, print_function

__author__ = "Pierre GF Gerard-Marchant"

import warnings
import pickle
import operator
import itertools
from functools import reduce


import numpy as np
import numpy.ma.core
import numpy.core.fromnumeric as fromnumeric
import numpy.core.umath as umath
from numpy.testing import TestCase, run_module_suite, assert_raises
from numpy import ndarray
from numpy.compat import asbytes, asbytes_nested
from numpy.ma.testutils import (
    assert_, assert_array_equal, assert_equal, assert_almost_equal,
    assert_equal_records, fail_if_equal, assert_not_equal,
    assert_mask_equal,
    ***REMOVED***
from numpy.ma.core import (
    MAError, MaskError, MaskType, MaskedArray, abs, absolute, add, all,
    allclose, allequal, alltrue, angle, anom, arange, arccos, arctan2,
    arcsin, arctan, argsort, array, asarray, choose, concatenate,
    conjugate, cos, cosh, count, default_fill_value, diag, divide, empty,
    empty_like, equal, exp, flatten_mask, filled, fix_invalid,
    flatten_structured_array, fromflex, getmask, getmaskarray, greater,
    greater_equal, identity, inner, isMaskedArray, less, less_equal, log,
    log10, make_mask, make_mask_descr, mask_or, masked, masked_array,
    masked_equal, masked_greater, masked_greater_equal, masked_inside,
    masked_less, masked_less_equal, masked_not_equal, masked_outside,
    masked_print_option, masked_values, masked_where, max, maximum,
    maximum_fill_value, min, minimum, minimum_fill_value, mod, multiply,
    mvoid, nomask, not_equal, ones, outer, power, product, put, putmask,
    ravel, repeat, reshape, resize, shape, sin, sinh, sometrue, sort, sqrt,
    subtract, sum, take, tan, tanh, transpose, where, zeros,
    ***REMOVED***

pi = np.pi


class TestMaskedArray(TestCase***REMOVED***:
    # Base test class for MaskedArrays.

    def setUp(self***REMOVED***:
        # Base data definition.
        x = np.array([1., 1., 1., -2., pi/2.0, 4., 5., -10., 10., 1., 2., 3.***REMOVED******REMOVED***
        y = np.array([5., 0., 3., 2., -1., -4., 0., -10., 10., 1., 0., 3.***REMOVED******REMOVED***
        a10 = 10.
        m1 = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0***REMOVED***
        m2 = [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1***REMOVED***
        xm = masked_array(x, mask=m1***REMOVED***
        ym = masked_array(y, mask=m2***REMOVED***
        z = np.array([-.5, 0., .5, .8***REMOVED******REMOVED***
        zm = masked_array(z, mask=[0, 1, 0, 0***REMOVED******REMOVED***
        xf = np.where(m1, 1e+20, x***REMOVED***
        xm.set_fill_value(1e+20***REMOVED***
        self.d = (x, y, a10, m1, m2, xm, ym, z, zm, xf***REMOVED***

    def test_basicattributes(self***REMOVED***:
        # Tests some basic array attributes.
        a = array([1, 3, 2***REMOVED******REMOVED***
        b = array([1, 3, 2***REMOVED***, mask=[1, 0, 1***REMOVED******REMOVED***
        assert_equal(a.ndim, 1***REMOVED***
        assert_equal(b.ndim, 1***REMOVED***
        assert_equal(a.size, 3***REMOVED***
        assert_equal(b.size, 3***REMOVED***
        assert_equal(a.shape, (3,***REMOVED******REMOVED***
        assert_equal(b.shape, (3,***REMOVED******REMOVED***

    def test_basic0d(self***REMOVED***:
        # Checks masking a scalar
        x = masked_array(0***REMOVED***
        assert_equal(str(x***REMOVED***, '0'***REMOVED***
        x = masked_array(0, mask=True***REMOVED***
        assert_equal(str(x***REMOVED***, str(masked_print_option***REMOVED******REMOVED***
        x = masked_array(0, mask=False***REMOVED***
        assert_equal(str(x***REMOVED***, '0'***REMOVED***
        x = array(0, mask=1***REMOVED***
        self.assertTrue(x.filled(***REMOVED***.dtype is x._data.dtype***REMOVED***

    def test_basic1d(self***REMOVED***:
        # Test of basic array creation and properties in 1 dimension.
        (x, y, a10, m1, m2, xm, ym, z, zm, xf***REMOVED*** = self.d
        self.assertTrue(not isMaskedArray(x***REMOVED******REMOVED***
        self.assertTrue(isMaskedArray(xm***REMOVED******REMOVED***
        self.assertTrue((xm - ym***REMOVED***.filled(0***REMOVED***.any(***REMOVED******REMOVED***
        fail_if_equal(xm.mask.astype(int***REMOVED***, ym.mask.astype(int***REMOVED******REMOVED***
        s = x.shape
        assert_equal(np.shape(xm***REMOVED***, s***REMOVED***
        assert_equal(xm.shape, s***REMOVED***
        assert_equal(xm.dtype, x.dtype***REMOVED***
        assert_equal(zm.dtype, z.dtype***REMOVED***
        assert_equal(xm.size, reduce(lambda x, y:x * y, s***REMOVED******REMOVED***
        assert_equal(count(xm***REMOVED***, len(m1***REMOVED*** - reduce(lambda x, y:x + y, m1***REMOVED******REMOVED***
        assert_array_equal(xm, xf***REMOVED***
        assert_array_equal(filled(xm, 1.e20***REMOVED***, xf***REMOVED***
        assert_array_equal(x, xm***REMOVED***

    def test_basic2d(self***REMOVED***:
        # Test of basic array creation and properties in 2 dimensions.
        (x, y, a10, m1, m2, xm, ym, z, zm, xf***REMOVED*** = self.d
        for s in [(4, 3***REMOVED***, (6, 2***REMOVED******REMOVED***:
            x.shape = s
            y.shape = s
            xm.shape = s
            ym.shape = s
            xf.shape = s

            self.assertTrue(not isMaskedArray(x***REMOVED******REMOVED***
            self.assertTrue(isMaskedArray(xm***REMOVED******REMOVED***
            assert_equal(shape(xm***REMOVED***, s***REMOVED***
            assert_equal(xm.shape, s***REMOVED***
            assert_equal(xm.size, reduce(lambda x, y:x * y, s***REMOVED******REMOVED***
            assert_equal(count(xm***REMOVED***, len(m1***REMOVED*** - reduce(lambda x, y:x + y, m1***REMOVED******REMOVED***
            assert_equal(xm, xf***REMOVED***
            assert_equal(filled(xm, 1.e20***REMOVED***, xf***REMOVED***
            assert_equal(x, xm***REMOVED***

    def test_concatenate_basic(self***REMOVED***:
        # Tests concatenations.
        (x, y, a10, m1, m2, xm, ym, z, zm, xf***REMOVED*** = self.d
        # basic concatenation
        assert_equal(np.concatenate((x, y***REMOVED******REMOVED***, concatenate((xm, ym***REMOVED******REMOVED******REMOVED***
        assert_equal(np.concatenate((x, y***REMOVED******REMOVED***, concatenate((x, y***REMOVED******REMOVED******REMOVED***
        assert_equal(np.concatenate((x, y***REMOVED******REMOVED***, concatenate((xm, y***REMOVED******REMOVED******REMOVED***
        assert_equal(np.concatenate((x, y, x***REMOVED******REMOVED***, concatenate((x, ym, x***REMOVED******REMOVED******REMOVED***

    def test_concatenate_alongaxis(self***REMOVED***:
        # Tests concatenations.
        (x, y, a10, m1, m2, xm, ym, z, zm, xf***REMOVED*** = self.d
        # Concatenation along an axis
        s = (3, 4***REMOVED***
        x.shape = y.shape = xm.shape = ym.shape = s
        assert_equal(xm.mask, np.reshape(m1, s***REMOVED******REMOVED***
        assert_equal(ym.mask, np.reshape(m2, s***REMOVED******REMOVED***
        xmym = concatenate((xm, ym***REMOVED***, 1***REMOVED***
        assert_equal(np.concatenate((x, y***REMOVED***, 1***REMOVED***, xmym***REMOVED***
        assert_equal(np.concatenate((xm.mask, ym.mask***REMOVED***, 1***REMOVED***, xmym._mask***REMOVED***

        x = zeros(2***REMOVED***
        y = array(ones(2***REMOVED***, mask=[False, True***REMOVED******REMOVED***
        z = concatenate((x, y***REMOVED******REMOVED***
        assert_array_equal(z, [0, 0, 1, 1***REMOVED******REMOVED***
        assert_array_equal(z.mask, [False, False, False, True***REMOVED******REMOVED***
        z = concatenate((y, x***REMOVED******REMOVED***
        assert_array_equal(z, [1, 1, 0, 0***REMOVED******REMOVED***
        assert_array_equal(z.mask, [False, True, False, False***REMOVED******REMOVED***

    def test_concatenate_flexible(self***REMOVED***:
        # Tests the concatenation on flexible arrays.
        data = masked_array(list(zip(np.random.rand(10***REMOVED***,
                                     np.arange(10***REMOVED******REMOVED******REMOVED***,
                            dtype=[('a', float***REMOVED***, ('b', int***REMOVED******REMOVED******REMOVED***

        test = concatenate([data[:5***REMOVED***, data[5:***REMOVED******REMOVED******REMOVED***
        assert_equal_records(test, data***REMOVED***

    def test_creation_ndmin(self***REMOVED***:
        # Check the use of ndmin
        x = array([1, 2, 3***REMOVED***, mask=[1, 0, 0***REMOVED***, ndmin=2***REMOVED***
        assert_equal(x.shape, (1, 3***REMOVED******REMOVED***
        assert_equal(x._data, [[1, 2, 3***REMOVED******REMOVED******REMOVED***
        assert_equal(x._mask, [[1, 0, 0***REMOVED******REMOVED******REMOVED***

    def test_creation_ndmin_from_maskedarray(self***REMOVED***:
        # Make sure we're not losing the original mask w/ ndmin
        x = array([1, 2, 3***REMOVED******REMOVED***
        x[-1***REMOVED*** = masked
        xx = array(x, ndmin=2, dtype=float***REMOVED***
        assert_equal(x.shape, x._mask.shape***REMOVED***
        assert_equal(xx.shape, xx._mask.shape***REMOVED***

    def test_creation_maskcreation(self***REMOVED***:
        # Tests how masks are initialized at the creation of Maskedarrays.
        data = arange(24, dtype=float***REMOVED***
        data[[3, 6, 15***REMOVED******REMOVED*** = masked
        dma_1 = MaskedArray(data***REMOVED***
        assert_equal(dma_1.mask, data.mask***REMOVED***
        dma_2 = MaskedArray(dma_1***REMOVED***
        assert_equal(dma_2.mask, dma_1.mask***REMOVED***
        dma_3 = MaskedArray(dma_1, mask=[1, 0, 0, 0***REMOVED*** * 6***REMOVED***
        fail_if_equal(dma_3.mask, dma_1.mask***REMOVED***

        x = array([1, 2, 3***REMOVED***, mask=True***REMOVED***
        assert_equal(x._mask, [True, True, True***REMOVED******REMOVED***
        x = array([1, 2, 3***REMOVED***, mask=False***REMOVED***
        assert_equal(x._mask, [False, False, False***REMOVED******REMOVED***
        y = array([1, 2, 3***REMOVED***, mask=x._mask, copy=False***REMOVED***
        assert_(np.may_share_memory(x.mask, y.mask***REMOVED******REMOVED***
        y = array([1, 2, 3***REMOVED***, mask=x._mask, copy=True***REMOVED***
        assert_(not np.may_share_memory(x.mask, y.mask***REMOVED******REMOVED***

    def test_creation_with_list_of_maskedarrays(self***REMOVED***:
        # Tests creating a masked array from a list of masked arrays.
        x = array(np.arange(5***REMOVED***, mask=[1, 0, 0, 0, 0***REMOVED******REMOVED***
        data = array((x, x[::-1***REMOVED******REMOVED******REMOVED***
        assert_equal(data, [[0, 1, 2, 3, 4***REMOVED***, [4, 3, 2, 1, 0***REMOVED******REMOVED******REMOVED***
        assert_equal(data._mask, [[1, 0, 0, 0, 0***REMOVED***, [0, 0, 0, 0, 1***REMOVED******REMOVED******REMOVED***

        x.mask = nomask
        data = array((x, x[::-1***REMOVED******REMOVED******REMOVED***
        assert_equal(data, [[0, 1, 2, 3, 4***REMOVED***, [4, 3, 2, 1, 0***REMOVED******REMOVED******REMOVED***
        self.assertTrue(data.mask is nomask***REMOVED***

    def test_creation_from_ndarray_with_padding(self***REMOVED***:
        x = np.array([('A', 0***REMOVED******REMOVED***, dtype={'names':['f0','f1'***REMOVED***,
                                        'formats':['S4','i8'***REMOVED***,
                                        'offsets':[0,8***REMOVED******REMOVED******REMOVED***
        data = array(x***REMOVED*** # used to fail due to 'V' padding field in x.dtype.descr

    def test_asarray(self***REMOVED***:
        (x, y, a10, m1, m2, xm, ym, z, zm, xf***REMOVED*** = self.d
        xm.fill_value = -9999
        xm._hardmask = True
        xmm = asarray(xm***REMOVED***
        assert_equal(xmm._data, xm._data***REMOVED***
        assert_equal(xmm._mask, xm._mask***REMOVED***
        assert_equal(xmm.fill_value, xm.fill_value***REMOVED***
        assert_equal(xmm._hardmask, xm._hardmask***REMOVED***

    def test_asarray_default_order(self***REMOVED***:
        # See Issue #6646
        m = np.eye(3***REMOVED***.T
        self.assertFalse(m.flags.c_contiguous***REMOVED***

        new_m = asarray(m***REMOVED***
        self.assertTrue(new_m.flags.c_contiguous***REMOVED***

    def test_asarray_enforce_order(self***REMOVED***:
        # See Issue #6646
        m = np.eye(3***REMOVED***.T
        self.assertFalse(m.flags.c_contiguous***REMOVED***

        new_m = asarray(m, order='C'***REMOVED***
        self.assertTrue(new_m.flags.c_contiguous***REMOVED***

    def test_fix_invalid(self***REMOVED***:
        # Checks fix_invalid.
        with np.errstate(invalid='ignore'***REMOVED***:
            data = masked_array([np.nan, 0., 1.***REMOVED***, mask=[0, 0, 1***REMOVED******REMOVED***
            data_fixed = fix_invalid(data***REMOVED***
            assert_equal(data_fixed._data, [data.fill_value, 0., 1.***REMOVED******REMOVED***
            assert_equal(data_fixed._mask, [1., 0., 1.***REMOVED******REMOVED***

    def test_maskedelement(self***REMOVED***:
        # Test of masked element
        x = arange(6***REMOVED***
        x[1***REMOVED*** = masked
        self.assertTrue(str(masked***REMOVED*** == '--'***REMOVED***
        self.assertTrue(x[1***REMOVED*** is masked***REMOVED***
        assert_equal(filled(x[1***REMOVED***, 0***REMOVED***, 0***REMOVED***

    def test_set_element_as_object(self***REMOVED***:
        # Tests setting elements with object
        a = empty(1, dtype=object***REMOVED***
        x = (1, 2, 3, 4, 5***REMOVED***
        a[0***REMOVED*** = x
        assert_equal(a[0***REMOVED***, x***REMOVED***
        self.assertTrue(a[0***REMOVED*** is x***REMOVED***

        import datetime
        dt = datetime.datetime.now(***REMOVED***
        a[0***REMOVED*** = dt
        self.assertTrue(a[0***REMOVED*** is dt***REMOVED***

    def test_indexing(self***REMOVED***:
        # Tests conversions and indexing
        x1 = np.array([1, 2, 4, 3***REMOVED******REMOVED***
        x2 = array(x1, mask=[1, 0, 0, 0***REMOVED******REMOVED***
        x3 = array(x1, mask=[0, 1, 0, 1***REMOVED******REMOVED***
        x4 = array(x1***REMOVED***
        # test conversion to strings
        str(x2***REMOVED***  # raises?
        repr(x2***REMOVED***  # raises?
        assert_equal(np.sort(x1***REMOVED***, sort(x2, endwith=False***REMOVED******REMOVED***
        # tests of indexing
        assert_(type(x2[1***REMOVED******REMOVED*** is type(x1[1***REMOVED******REMOVED******REMOVED***
        assert_(x1[1***REMOVED*** == x2[1***REMOVED******REMOVED***
        assert_(x2[0***REMOVED*** is masked***REMOVED***
        assert_equal(x1[2***REMOVED***, x2[2***REMOVED******REMOVED***
        assert_equal(x1[2:5***REMOVED***, x2[2:5***REMOVED******REMOVED***
        assert_equal(x1[:***REMOVED***, x2[:***REMOVED******REMOVED***
        assert_equal(x1[1:***REMOVED***, x3[1:***REMOVED******REMOVED***
        x1[2***REMOVED*** = 9
        x2[2***REMOVED*** = 9
        assert_equal(x1, x2***REMOVED***
        x1[1:3***REMOVED*** = 99
        x2[1:3***REMOVED*** = 99
        assert_equal(x1, x2***REMOVED***
        x2[1***REMOVED*** = masked
        assert_equal(x1, x2***REMOVED***
        x2[1:3***REMOVED*** = masked
        assert_equal(x1, x2***REMOVED***
        x2[:***REMOVED*** = x1
        x2[1***REMOVED*** = masked
        assert_(allequal(getmask(x2***REMOVED***, array([0, 1, 0, 0***REMOVED******REMOVED******REMOVED******REMOVED***
        x3[:***REMOVED*** = masked_array([1, 2, 3, 4***REMOVED***, [0, 1, 1, 0***REMOVED******REMOVED***
        assert_(allequal(getmask(x3***REMOVED***, array([0, 1, 1, 0***REMOVED******REMOVED******REMOVED******REMOVED***
        x4[:***REMOVED*** = masked_array([1, 2, 3, 4***REMOVED***, [0, 1, 1, 0***REMOVED******REMOVED***
        assert_(allequal(getmask(x4***REMOVED***, array([0, 1, 1, 0***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_(allequal(x4, array([1, 2, 3, 4***REMOVED******REMOVED******REMOVED******REMOVED***
        x1 = np.arange(5***REMOVED*** * 1.0
        x2 = masked_values(x1, 3.0***REMOVED***
        assert_equal(x1, x2***REMOVED***
        assert_(allequal(array([0, 0, 0, 1, 0***REMOVED***, MaskType***REMOVED***, x2.mask***REMOVED******REMOVED***
        assert_equal(3.0, x2.fill_value***REMOVED***
        x1 = array([1, 'hello', 2, 3***REMOVED***, object***REMOVED***
        x2 = np.array([1, 'hello', 2, 3***REMOVED***, object***REMOVED***
        s1 = x1[1***REMOVED***
        s2 = x2[1***REMOVED***
        assert_equal(type(s2***REMOVED***, str***REMOVED***
        assert_equal(type(s1***REMOVED***, str***REMOVED***
        assert_equal(s1, s2***REMOVED***
        assert_(x1[1:1***REMOVED***.shape == (0,***REMOVED******REMOVED***

    def test_matrix_indexing(self***REMOVED***:
        # Tests conversions and indexing
        x1 = np.matrix([[1, 2, 3***REMOVED***, [4, 3, 2***REMOVED******REMOVED******REMOVED***
        x2 = array(x1, mask=[[1, 0, 0***REMOVED***, [0, 1, 0***REMOVED******REMOVED******REMOVED***
        x3 = array(x1, mask=[[0, 1, 0***REMOVED***, [1, 0, 0***REMOVED******REMOVED******REMOVED***
        x4 = array(x1***REMOVED***
        # test conversion to strings
        str(x2***REMOVED***  # raises?
        repr(x2***REMOVED***  # raises?
        # tests of indexing
        assert_(type(x2[1, 0***REMOVED******REMOVED*** is type(x1[1, 0***REMOVED******REMOVED******REMOVED***
        assert_(x1[1, 0***REMOVED*** == x2[1, 0***REMOVED******REMOVED***
        assert_(x2[1, 1***REMOVED*** is masked***REMOVED***
        assert_equal(x1[0, 2***REMOVED***, x2[0, 2***REMOVED******REMOVED***
        assert_equal(x1[0, 1:***REMOVED***, x2[0, 1:***REMOVED******REMOVED***
        assert_equal(x1[:, 2***REMOVED***, x2[:, 2***REMOVED******REMOVED***
        assert_equal(x1[:***REMOVED***, x2[:***REMOVED******REMOVED***
        assert_equal(x1[1:***REMOVED***, x3[1:***REMOVED******REMOVED***
        x1[0, 2***REMOVED*** = 9
        x2[0, 2***REMOVED*** = 9
        assert_equal(x1, x2***REMOVED***
        x1[0, 1:***REMOVED*** = 99
        x2[0, 1:***REMOVED*** = 99
        assert_equal(x1, x2***REMOVED***
        x2[0, 1***REMOVED*** = masked
        assert_equal(x1, x2***REMOVED***
        x2[0, 1:***REMOVED*** = masked
        assert_equal(x1, x2***REMOVED***
        x2[0, :***REMOVED*** = x1[0, :***REMOVED***
        x2[0, 1***REMOVED*** = masked
        assert_(allequal(getmask(x2***REMOVED***, np.array([[0, 1, 0***REMOVED***, [0, 1, 0***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        x3[1, :***REMOVED*** = masked_array([1, 2, 3***REMOVED***, [1, 1, 0***REMOVED******REMOVED***
        assert_(allequal(getmask(x3***REMOVED***[1***REMOVED***, array([1, 1, 0***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_(allequal(getmask(x3[1***REMOVED******REMOVED***, array([1, 1, 0***REMOVED******REMOVED******REMOVED******REMOVED***
        x4[1, :***REMOVED*** = masked_array([1, 2, 3***REMOVED***, [1, 1, 0***REMOVED******REMOVED***
        assert_(allequal(getmask(x4[1***REMOVED******REMOVED***, array([1, 1, 0***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_(allequal(x4[1***REMOVED***, array([1, 2, 3***REMOVED******REMOVED******REMOVED******REMOVED***
        x1 = np.matrix(np.arange(5***REMOVED*** * 1.0***REMOVED***
        x2 = masked_values(x1, 3.0***REMOVED***
        assert_equal(x1, x2***REMOVED***
        assert_(allequal(array([0, 0, 0, 1, 0***REMOVED***, MaskType***REMOVED***, x2.mask***REMOVED******REMOVED***
        assert_equal(3.0, x2.fill_value***REMOVED***

    def test_copy(self***REMOVED***:
        # Tests of some subtle points of copying and sizing.
        n = [0, 0, 1, 0, 0***REMOVED***
        m = make_mask(n***REMOVED***
        m2 = make_mask(m***REMOVED***
        self.assertTrue(m is m2***REMOVED***
        m3 = make_mask(m, copy=1***REMOVED***
        self.assertTrue(m is not m3***REMOVED***

        x1 = np.arange(5***REMOVED***
        y1 = array(x1, mask=m***REMOVED***
        assert_equal(y1._data.__array_interface__, x1.__array_interface__***REMOVED***
        self.assertTrue(allequal(x1, y1.data***REMOVED******REMOVED***
        assert_equal(y1._mask.__array_interface__, m.__array_interface__***REMOVED***

        y1a = array(y1***REMOVED***
        self.assertTrue(y1a._data.__array_interface__ ==
                        y1._data.__array_interface__***REMOVED***
        self.assertTrue(y1a.mask is y1.mask***REMOVED***

        y2 = array(x1, mask=m***REMOVED***
        self.assertTrue(y2._data.__array_interface__ == x1.__array_interface__***REMOVED***
        self.assertTrue(y2._mask.__array_interface__ == m.__array_interface__***REMOVED***
        self.assertTrue(y2[2***REMOVED*** is masked***REMOVED***
        y2[2***REMOVED*** = 9
        self.assertTrue(y2[2***REMOVED*** is not masked***REMOVED***
        self.assertTrue(y2._mask.__array_interface__ != m.__array_interface__***REMOVED***
        self.assertTrue(allequal(y2.mask, 0***REMOVED******REMOVED***

        y3 = array(x1 * 1.0, mask=m***REMOVED***
        self.assertTrue(filled(y3***REMOVED***.dtype is (x1 * 1.0***REMOVED***.dtype***REMOVED***

        x4 = arange(4***REMOVED***
        x4[2***REMOVED*** = masked
        y4 = resize(x4, (8,***REMOVED******REMOVED***
        assert_equal(concatenate([x4, x4***REMOVED******REMOVED***, y4***REMOVED***
        assert_equal(getmask(y4***REMOVED***, [0, 0, 1, 0, 0, 0, 1, 0***REMOVED******REMOVED***
        y5 = repeat(x4, (2, 2, 2, 2***REMOVED***, axis=0***REMOVED***
        assert_equal(y5, [0, 0, 1, 1, 2, 2, 3, 3***REMOVED******REMOVED***
        y6 = repeat(x4, 2, axis=0***REMOVED***
        assert_equal(y5, y6***REMOVED***
        y7 = x4.repeat((2, 2, 2, 2***REMOVED***, axis=0***REMOVED***
        assert_equal(y5, y7***REMOVED***
        y8 = x4.repeat(2, 0***REMOVED***
        assert_equal(y5, y8***REMOVED***

        y9 = x4.copy(***REMOVED***
        assert_equal(y9._data, x4._data***REMOVED***
        assert_equal(y9._mask, x4._mask***REMOVED***

        x = masked_array([1, 2, 3***REMOVED***, mask=[0, 1, 0***REMOVED******REMOVED***
        # Copy is False by default
        y = masked_array(x***REMOVED***
        assert_equal(y._data.ctypes.data, x._data.ctypes.data***REMOVED***
        assert_equal(y._mask.ctypes.data, x._mask.ctypes.data***REMOVED***
        y = masked_array(x, copy=True***REMOVED***
        assert_not_equal(y._data.ctypes.data, x._data.ctypes.data***REMOVED***
        assert_not_equal(y._mask.ctypes.data, x._mask.ctypes.data***REMOVED***

    def test_copy_immutable(self***REMOVED***:
        # Tests that the copy method is immutable, GitHub issue #5247
        a = np.ma.array([1, 2, 3***REMOVED******REMOVED***
        b = np.ma.array([4, 5, 6***REMOVED******REMOVED***
        a_copy_method = a.copy
        b.copy
        assert_equal(a_copy_method(***REMOVED***, [1, 2, 3***REMOVED******REMOVED***

    def test_deepcopy(self***REMOVED***:
        from copy import deepcopy
        a = array([0, 1, 2***REMOVED***, mask=[False, True, False***REMOVED******REMOVED***
        copied = deepcopy(a***REMOVED***
        assert_equal(copied.mask, a.mask***REMOVED***
        assert_not_equal(id(a._mask***REMOVED***, id(copied._mask***REMOVED******REMOVED***

        copied[1***REMOVED*** = 1
        assert_equal(copied.mask, [0, 0, 0***REMOVED******REMOVED***
        assert_equal(a.mask, [0, 1, 0***REMOVED******REMOVED***

        copied = deepcopy(a***REMOVED***
        assert_equal(copied.mask, a.mask***REMOVED***
        copied.mask[1***REMOVED*** = False
        assert_equal(copied.mask, [0, 0, 0***REMOVED******REMOVED***
        assert_equal(a.mask, [0, 1, 0***REMOVED******REMOVED***

    def test_str_repr(self***REMOVED***:
        a = array([0, 1, 2***REMOVED***, mask=[False, True, False***REMOVED******REMOVED***
        assert_equal(str(a***REMOVED***, '[0 -- 2***REMOVED***'***REMOVED***
        assert_equal(repr(a***REMOVED***, 'masked_array(data = [0 -- 2***REMOVED***,\n'
                              '             mask = [False  True False***REMOVED***,\n'
                              '       fill_value = 999999***REMOVED***\n'***REMOVED***

        a = np.ma.arange(2000***REMOVED***
        a[1:50***REMOVED*** = np.ma.masked
        assert_equal(
            repr(a***REMOVED***,
            'masked_array(data = [0 -- -- ..., 1997 1998 1999***REMOVED***,\n'
            '             mask = [False  True  True ..., False False False***REMOVED***,\n'
            '       fill_value = 999999***REMOVED***\n'
        ***REMOVED***

    def test_pickling(self***REMOVED***:
        # Tests pickling
        a = arange(10***REMOVED***
        a[::3***REMOVED*** = masked
        a.fill_value = 999
        a_pickled = pickle.loads(a.dumps(***REMOVED******REMOVED***
        assert_equal(a_pickled._mask, a._mask***REMOVED***
        assert_equal(a_pickled._data, a._data***REMOVED***
        assert_equal(a_pickled.fill_value, 999***REMOVED***

    def test_pickling_subbaseclass(self***REMOVED***:
        # Test pickling w/ a subclass of ndarray
        a = array(np.matrix(list(range(10***REMOVED******REMOVED******REMOVED***, mask=[1, 0, 1, 0, 0***REMOVED*** * 2***REMOVED***
        a_pickled = pickle.loads(a.dumps(***REMOVED******REMOVED***
        assert_equal(a_pickled._mask, a._mask***REMOVED***
        assert_equal(a_pickled, a***REMOVED***
        self.assertTrue(isinstance(a_pickled._data, np.matrix***REMOVED******REMOVED***

    def test_pickling_maskedconstant(self***REMOVED***:
        # Test pickling MaskedConstant
        mc = np.ma.masked
        mc_pickled = pickle.loads(mc.dumps(***REMOVED******REMOVED***
        assert_equal(mc_pickled._baseclass, mc._baseclass***REMOVED***
        assert_equal(mc_pickled._mask, mc._mask***REMOVED***
        assert_equal(mc_pickled._data, mc._data***REMOVED***

    def test_pickling_wstructured(self***REMOVED***:
        # Tests pickling w/ structured array
        a = array([(1, 1.***REMOVED***, (2, 2.***REMOVED******REMOVED***, mask=[(0, 0***REMOVED***, (0, 1***REMOVED******REMOVED***,
                  dtype=[('a', int***REMOVED***, ('b', float***REMOVED******REMOVED******REMOVED***
        a_pickled = pickle.loads(a.dumps(***REMOVED******REMOVED***
        assert_equal(a_pickled._mask, a._mask***REMOVED***
        assert_equal(a_pickled, a***REMOVED***

    def test_pickling_keepalignment(self***REMOVED***:
        # Tests pickling w/ F_CONTIGUOUS arrays
        a = arange(10***REMOVED***
        a.shape = (-1, 2***REMOVED***
        b = a.T
        test = pickle.loads(pickle.dumps(b***REMOVED******REMOVED***
        assert_equal(test, b***REMOVED***

    def test_single_element_subscript(self***REMOVED***:
        # Tests single element subscripts of Maskedarrays.
        a = array([1, 3, 2***REMOVED******REMOVED***
        b = array([1, 3, 2***REMOVED***, mask=[1, 0, 1***REMOVED******REMOVED***
        assert_equal(a[0***REMOVED***.shape, (***REMOVED******REMOVED***
        assert_equal(b[0***REMOVED***.shape, (***REMOVED******REMOVED***
        assert_equal(b[1***REMOVED***.shape, (***REMOVED******REMOVED***

    def test_topython(self***REMOVED***:
        # Tests some communication issues with Python.
        assert_equal(1, int(array(1***REMOVED******REMOVED******REMOVED***
        assert_equal(1.0, float(array(1***REMOVED******REMOVED******REMOVED***
        assert_equal(1, int(array([[[1***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        assert_equal(1.0, float(array([[1***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        self.assertRaises(TypeError, float, array([1, 1***REMOVED******REMOVED******REMOVED***

        with warnings.catch_warnings(***REMOVED***:
            warnings.simplefilter('ignore', UserWarning***REMOVED***
            assert_(np.isnan(float(array([1***REMOVED***, mask=[1***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***

        a = array([1, 2, 3***REMOVED***, mask=[1, 0, 0***REMOVED******REMOVED***
        self.assertRaises(TypeError, lambda:float(a***REMOVED******REMOVED***
        assert_equal(float(a[-1***REMOVED******REMOVED***, 3.***REMOVED***
        self.assertTrue(np.isnan(float(a[0***REMOVED******REMOVED******REMOVED******REMOVED***
        self.assertRaises(TypeError, int, a***REMOVED***
        assert_equal(int(a[-1***REMOVED******REMOVED***, 3***REMOVED***
        self.assertRaises(MAError, lambda:int(a[0***REMOVED******REMOVED******REMOVED***

    def test_oddfeatures_1(self***REMOVED***:
        # Test of other odd features
        x = arange(20***REMOVED***
        x = x.reshape(4, 5***REMOVED***
        x.flat[5***REMOVED*** = 12
        assert_(x[1, 0***REMOVED*** == 12***REMOVED***
        z = x + 10j * x
        assert_equal(z.real, x***REMOVED***
        assert_equal(z.imag, 10 * x***REMOVED***
        assert_equal((z * conjugate(z***REMOVED******REMOVED***.real, 101 * x * x***REMOVED***
        z.imag[...***REMOVED*** = 0.0

        x = arange(10***REMOVED***
        x[3***REMOVED*** = masked
        assert_(str(x[3***REMOVED******REMOVED*** == str(masked***REMOVED******REMOVED***
        c = x >= 8
        assert_(count(where(c, masked, masked***REMOVED******REMOVED*** == 0***REMOVED***
        assert_(shape(where(c, masked, masked***REMOVED******REMOVED*** == c.shape***REMOVED***

        z = masked_where(c, x***REMOVED***
        assert_(z.dtype is x.dtype***REMOVED***
        assert_(z[3***REMOVED*** is masked***REMOVED***
        assert_(z[4***REMOVED*** is not masked***REMOVED***
        assert_(z[7***REMOVED*** is not masked***REMOVED***
        assert_(z[8***REMOVED*** is masked***REMOVED***
        assert_(z[9***REMOVED*** is masked***REMOVED***
        assert_equal(x, z***REMOVED***

    def test_oddfeatures_2(self***REMOVED***:
        # Tests some more features.
        x = array([1., 2., 3., 4., 5.***REMOVED******REMOVED***
        c = array([1, 1, 1, 0, 0***REMOVED******REMOVED***
        x[2***REMOVED*** = masked
        z = where(c, x, -x***REMOVED***
        assert_equal(z, [1., 2., 0., -4., -5***REMOVED******REMOVED***
        c[0***REMOVED*** = masked
        z = where(c, x, -x***REMOVED***
        assert_equal(z, [1., 2., 0., -4., -5***REMOVED******REMOVED***
        assert_(z[0***REMOVED*** is masked***REMOVED***
        assert_(z[1***REMOVED*** is not masked***REMOVED***
        assert_(z[2***REMOVED*** is masked***REMOVED***

    def test_oddfeatures_3(self***REMOVED***:
        # Tests some generic features
        atest = array([10***REMOVED***, mask=True***REMOVED***
        btest = array([20***REMOVED******REMOVED***
        idx = atest.mask
        atest[idx***REMOVED*** = btest[idx***REMOVED***
        assert_equal(atest, [20***REMOVED******REMOVED***

    def test_filled_w_object_dtype(self***REMOVED***:
        a = np.ma.masked_all(1, dtype='O'***REMOVED***
        assert_equal(a.filled('x'***REMOVED***[0***REMOVED***, 'x'***REMOVED***

    def test_filled_w_flexible_dtype(self***REMOVED***:
        # Test filled w/ flexible dtype
        flexi = array([(1, 1, 1***REMOVED******REMOVED***,
                      dtype=[('i', int***REMOVED***, ('s', '|S8'***REMOVED***, ('f', float***REMOVED******REMOVED******REMOVED***
        flexi[0***REMOVED*** = masked
        assert_equal(flexi.filled(***REMOVED***,
                     np.array([(default_fill_value(0***REMOVED***,
                                default_fill_value('0'***REMOVED***,
                                default_fill_value(0.***REMOVED***,***REMOVED******REMOVED***, dtype=flexi.dtype***REMOVED******REMOVED***
        flexi[0***REMOVED*** = masked
        assert_equal(flexi.filled(1***REMOVED***,
                     np.array([(1, '1', 1.***REMOVED******REMOVED***, dtype=flexi.dtype***REMOVED******REMOVED***

    def test_filled_w_mvoid(self***REMOVED***:
        # Test filled w/ mvoid
        ndtype = [('a', int***REMOVED***, ('b', float***REMOVED******REMOVED***
        a = mvoid((1, 2.***REMOVED***, mask=[(0, 1***REMOVED******REMOVED***, dtype=ndtype***REMOVED***
        # Filled using default
        test = a.filled(***REMOVED***
        assert_equal(tuple(test***REMOVED***, (1, default_fill_value(1.***REMOVED******REMOVED******REMOVED***
        # Explicit fill_value
        test = a.filled((-1, -1***REMOVED******REMOVED***
        assert_equal(tuple(test***REMOVED***, (1, -1***REMOVED******REMOVED***
        # Using predefined filling values
        a.fill_value = (-999, -999***REMOVED***
        assert_equal(tuple(a.filled(***REMOVED******REMOVED***, (1, -999***REMOVED******REMOVED***

    def test_filled_w_nested_dtype(self***REMOVED***:
        # Test filled w/ nested dtype
        ndtype = [('A', int***REMOVED***, ('B', [('BA', int***REMOVED***, ('BB', int***REMOVED******REMOVED******REMOVED******REMOVED***
        a = array([(1, (1, 1***REMOVED******REMOVED***, (2, (2, 2***REMOVED******REMOVED******REMOVED***,
                  mask=[(0, (1, 0***REMOVED******REMOVED***, (0, (0, 1***REMOVED******REMOVED******REMOVED***, dtype=ndtype***REMOVED***
        test = a.filled(0***REMOVED***
        control = np.array([(1, (0, 1***REMOVED******REMOVED***, (2, (2, 0***REMOVED******REMOVED******REMOVED***, dtype=ndtype***REMOVED***
        assert_equal(test, control***REMOVED***

        test = a['B'***REMOVED***.filled(0***REMOVED***
        control = np.array([(0, 1***REMOVED***, (2, 0***REMOVED******REMOVED***, dtype=a['B'***REMOVED***.dtype***REMOVED***
        assert_equal(test, control***REMOVED***

        # test if mask gets set correctly (see #6760***REMOVED***
        Z = numpy.ma.zeros(2, numpy.dtype([("A", "(2,2***REMOVED***i1,(2,2***REMOVED***i1", (2,2***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        assert_equal(Z.data.dtype, numpy.dtype([('A', [('f0', 'i1', (2, 2***REMOVED******REMOVED***,
                                          ('f1', 'i1', (2, 2***REMOVED******REMOVED******REMOVED***, (2, 2***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        assert_equal(Z.mask.dtype, numpy.dtype([('A', [('f0', '?', (2, 2***REMOVED******REMOVED***,
                                          ('f1', '?', (2, 2***REMOVED******REMOVED******REMOVED***, (2, 2***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***

    def test_filled_w_f_order(self***REMOVED***:
        # Test filled w/ F-contiguous array
        a = array(np.array([(0, 1, 2***REMOVED***, (4, 5, 6***REMOVED******REMOVED***, order='F'***REMOVED***,
                  mask=np.array([(0, 0, 1***REMOVED***, (1, 0, 0***REMOVED******REMOVED***, order='F'***REMOVED***,
                  order='F'***REMOVED***  # this is currently ignored
        self.assertTrue(a.flags['F_CONTIGUOUS'***REMOVED******REMOVED***
        self.assertTrue(a.filled(0***REMOVED***.flags['F_CONTIGUOUS'***REMOVED******REMOVED***

    def test_optinfo_propagation(self***REMOVED***:
        # Checks that _optinfo dictionary isn't back-propagated
        x = array([1, 2, 3, ***REMOVED***, dtype=float***REMOVED***
        x._optinfo['info'***REMOVED*** = '???'
        y = x.copy(***REMOVED***
        assert_equal(y._optinfo['info'***REMOVED***, '???'***REMOVED***
        y._optinfo['info'***REMOVED*** = '!!!'
        assert_equal(x._optinfo['info'***REMOVED***, '???'***REMOVED***

    def test_fancy_printoptions(self***REMOVED***:
        # Test printing a masked array w/ fancy dtype.
        fancydtype = np.dtype([('x', int***REMOVED***, ('y', [('t', int***REMOVED***, ('s', float***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        test = array([(1, (2, 3.0***REMOVED******REMOVED***, (4, (5, 6.0***REMOVED******REMOVED******REMOVED***,
                     mask=[(1, (0, 1***REMOVED******REMOVED***, (0, (1, 0***REMOVED******REMOVED******REMOVED***,
                     dtype=fancydtype***REMOVED***
        control = "[(--, (2, --***REMOVED******REMOVED*** (4, (--, 6.0***REMOVED******REMOVED******REMOVED***"
        assert_equal(str(test***REMOVED***, control***REMOVED***

        # Test 0-d array with multi-dimensional dtype
        t_2d0 = masked_array(data = (0, [[0.0, 0.0, 0.0***REMOVED***,
                                        [0.0, 0.0, 0.0***REMOVED******REMOVED***,
                                    0.0***REMOVED***,
                             mask = (False, [[True, False, True***REMOVED***,
                                             [False, False, True***REMOVED******REMOVED***,
                                     False***REMOVED***,
                             dtype = "int, (2,3***REMOVED***float, float"***REMOVED***
        control = "(0, [[--, 0.0, --***REMOVED***, [0.0, 0.0, --***REMOVED******REMOVED***, 0.0***REMOVED***"
        assert_equal(str(t_2d0***REMOVED***, control***REMOVED***


    def test_flatten_structured_array(self***REMOVED***:
        # Test flatten_structured_array on arrays
        # On ndarray
        ndtype = [('a', int***REMOVED***, ('b', float***REMOVED******REMOVED***
        a = np.array([(1, 1***REMOVED***, (2, 2***REMOVED******REMOVED***, dtype=ndtype***REMOVED***
        test = flatten_structured_array(a***REMOVED***
        control = np.array([[1., 1.***REMOVED***, [2., 2.***REMOVED******REMOVED***, dtype=np.float***REMOVED***
        assert_equal(test, control***REMOVED***
        assert_equal(test.dtype, control.dtype***REMOVED***
        # On masked_array
        a = array([(1, 1***REMOVED***, (2, 2***REMOVED******REMOVED***, mask=[(0, 1***REMOVED***, (1, 0***REMOVED******REMOVED***, dtype=ndtype***REMOVED***
        test = flatten_structured_array(a***REMOVED***
        control = array([[1., 1.***REMOVED***, [2., 2.***REMOVED******REMOVED***,
                        mask=[[0, 1***REMOVED***, [1, 0***REMOVED******REMOVED***, dtype=np.float***REMOVED***
        assert_equal(test, control***REMOVED***
        assert_equal(test.dtype, control.dtype***REMOVED***
        assert_equal(test.mask, control.mask***REMOVED***
        # On masked array with nested structure
        ndtype = [('a', int***REMOVED***, ('b', [('ba', int***REMOVED***, ('bb', float***REMOVED******REMOVED******REMOVED******REMOVED***
        a = array([(1, (1, 1.1***REMOVED******REMOVED***, (2, (2, 2.2***REMOVED******REMOVED******REMOVED***,
                  mask=[(0, (1, 0***REMOVED******REMOVED***, (1, (0, 1***REMOVED******REMOVED******REMOVED***, dtype=ndtype***REMOVED***
        test = flatten_structured_array(a***REMOVED***
        control = array([[1., 1., 1.1***REMOVED***, [2., 2., 2.2***REMOVED******REMOVED***,
                        mask=[[0, 1, 0***REMOVED***, [1, 0, 1***REMOVED******REMOVED***, dtype=np.float***REMOVED***
        assert_equal(test, control***REMOVED***
        assert_equal(test.dtype, control.dtype***REMOVED***
        assert_equal(test.mask, control.mask***REMOVED***
        # Keeping the initial shape
        ndtype = [('a', int***REMOVED***, ('b', float***REMOVED******REMOVED***
        a = np.array([[(1, 1***REMOVED***, ***REMOVED***, [(2, 2***REMOVED***, ***REMOVED******REMOVED***, dtype=ndtype***REMOVED***
        test = flatten_structured_array(a***REMOVED***
        control = np.array([[[1., 1.***REMOVED***, ***REMOVED***, [[2., 2.***REMOVED***, ***REMOVED******REMOVED***, dtype=np.float***REMOVED***
        assert_equal(test, control***REMOVED***
        assert_equal(test.dtype, control.dtype***REMOVED***

    def test_void0d(self***REMOVED***:
        # Test creating a mvoid object
        ndtype = [('a', int***REMOVED***, ('b', int***REMOVED******REMOVED***
        a = np.array([(1, 2,***REMOVED******REMOVED***, dtype=ndtype***REMOVED***[0***REMOVED***
        f = mvoid(a***REMOVED***
        assert_(isinstance(f, mvoid***REMOVED******REMOVED***

        a = masked_array([(1, 2***REMOVED******REMOVED***, mask=[(1, 0***REMOVED******REMOVED***, dtype=ndtype***REMOVED***[0***REMOVED***
        assert_(isinstance(a, mvoid***REMOVED******REMOVED***

        a = masked_array([(1, 2***REMOVED***, (1, 2***REMOVED******REMOVED***, mask=[(1, 0***REMOVED***, (0, 0***REMOVED******REMOVED***, dtype=ndtype***REMOVED***
        f = mvoid(a._data[0***REMOVED***, a._mask[0***REMOVED******REMOVED***
        assert_(isinstance(f, mvoid***REMOVED******REMOVED***

    def test_mvoid_getitem(self***REMOVED***:
        # Test mvoid.__getitem__
        ndtype = [('a', int***REMOVED***, ('b', int***REMOVED******REMOVED***
        a = masked_array([(1, 2,***REMOVED***, (3, 4***REMOVED******REMOVED***, mask=[(0, 0***REMOVED***, (1, 0***REMOVED******REMOVED***,
                         dtype=ndtype***REMOVED***
        # w/o mask
        f = a[0***REMOVED***
        self.assertTrue(isinstance(f, mvoid***REMOVED******REMOVED***
        assert_equal((f[0***REMOVED***, f['a'***REMOVED******REMOVED***, (1, 1***REMOVED******REMOVED***
        assert_equal(f['b'***REMOVED***, 2***REMOVED***
        # w/ mask
        f = a[1***REMOVED***
        self.assertTrue(isinstance(f, mvoid***REMOVED******REMOVED***
        self.assertTrue(f[0***REMOVED*** is masked***REMOVED***
        self.assertTrue(f['a'***REMOVED*** is masked***REMOVED***
        assert_equal(f[1***REMOVED***, 4***REMOVED***

        # exotic dtype
        A = masked_array(data=[([0,1***REMOVED***,***REMOVED******REMOVED***,
                         mask=[([True, False***REMOVED***,***REMOVED******REMOVED***,
                         dtype=[("A", ">i2", (2,***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_equal(A[0***REMOVED***["A"***REMOVED***, A["A"***REMOVED***[0***REMOVED******REMOVED***
        assert_equal(A[0***REMOVED***["A"***REMOVED***, masked_array(data=[0, 1***REMOVED***,
                         mask=[True, False***REMOVED***, dtype=">i2"***REMOVED******REMOVED***

    def test_mvoid_iter(self***REMOVED***:
        # Test iteration on __getitem__
        ndtype = [('a', int***REMOVED***, ('b', int***REMOVED******REMOVED***
        a = masked_array([(1, 2,***REMOVED***, (3, 4***REMOVED******REMOVED***, mask=[(0, 0***REMOVED***, (1, 0***REMOVED******REMOVED***,
                         dtype=ndtype***REMOVED***
        # w/o mask
        assert_equal(list(a[0***REMOVED******REMOVED***, [1, 2***REMOVED******REMOVED***
        # w/ mask
        assert_equal(list(a[1***REMOVED******REMOVED***, [masked, 4***REMOVED******REMOVED***

    def test_mvoid_print(self***REMOVED***:
        # Test printing a mvoid
        mx = array([(1, 1***REMOVED***, (2, 2***REMOVED******REMOVED***, dtype=[('a', int***REMOVED***, ('b', int***REMOVED******REMOVED******REMOVED***
        assert_equal(str(mx[0***REMOVED******REMOVED***, "(1, 1***REMOVED***"***REMOVED***
        mx['b'***REMOVED***[0***REMOVED*** = masked
        ini_display = masked_print_option._display
        masked_print_option.set_display("-X-"***REMOVED***
        ***REMOVED***
            assert_equal(str(mx[0***REMOVED******REMOVED***, "(1, -X-***REMOVED***"***REMOVED***
            assert_equal(repr(mx[0***REMOVED******REMOVED***, "(1, -X-***REMOVED***"***REMOVED***
        finally:
            masked_print_option.set_display(ini_display***REMOVED***

        # also check if there are object datatypes (see gh-7493***REMOVED***
        mx = array([(1,***REMOVED***, (2,***REMOVED******REMOVED***, dtype=[('a', 'O'***REMOVED******REMOVED******REMOVED***
        assert_equal(str(mx[0***REMOVED******REMOVED***, "(1,***REMOVED***"***REMOVED***

    def test_mvoid_multidim_print(self***REMOVED***:

        # regression test for gh-6019
        t_ma = masked_array(data = [([1, 2, 3***REMOVED***,***REMOVED******REMOVED***,
                            mask = [([False, True, False***REMOVED***,***REMOVED******REMOVED***,
                            fill_value = ([999999, 999999, 999999***REMOVED***,***REMOVED***,
                            dtype = [('a', '<i4', (3,***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_(str(t_ma[0***REMOVED******REMOVED*** == "([1, --, 3***REMOVED***,***REMOVED***"***REMOVED***
        assert_(repr(t_ma[0***REMOVED******REMOVED*** == "([1, --, 3***REMOVED***,***REMOVED***"***REMOVED***

        # additonal tests with structured arrays

        t_2d = masked_array(data = [([[1, 2***REMOVED***, [3,4***REMOVED******REMOVED***,***REMOVED******REMOVED***,
                            mask = [([[False, True***REMOVED***, [True, False***REMOVED******REMOVED***,***REMOVED******REMOVED***,
                            dtype = [('a', '<i4', (2,2***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_(str(t_2d[0***REMOVED******REMOVED*** == "([[1, --***REMOVED***, [--, 4***REMOVED******REMOVED***,***REMOVED***"***REMOVED***
        assert_(repr(t_2d[0***REMOVED******REMOVED*** == "([[1, --***REMOVED***, [--, 4***REMOVED******REMOVED***,***REMOVED***"***REMOVED***

        t_0d = masked_array(data = [(1,2***REMOVED******REMOVED***,
                            mask = [(True,False***REMOVED******REMOVED***,
                            dtype = [('a', '<i4'***REMOVED***, ('b', '<i4'***REMOVED******REMOVED******REMOVED***
        assert_(str(t_0d[0***REMOVED******REMOVED*** == "(--, 2***REMOVED***"***REMOVED***
        assert_(repr(t_0d[0***REMOVED******REMOVED*** == "(--, 2***REMOVED***"***REMOVED***

        t_2d = masked_array(data = [([[1, 2***REMOVED***, [3,4***REMOVED******REMOVED***, 1***REMOVED******REMOVED***,
                            mask = [([[False, True***REMOVED***, [True, False***REMOVED******REMOVED***, False***REMOVED******REMOVED***,
                            dtype = [('a', '<i4', (2,2***REMOVED******REMOVED***, ('b', float***REMOVED******REMOVED******REMOVED***
        assert_(str(t_2d[0***REMOVED******REMOVED*** == "([[1, --***REMOVED***, [--, 4***REMOVED******REMOVED***, 1.0***REMOVED***"***REMOVED***
        assert_(repr(t_2d[0***REMOVED******REMOVED*** == "([[1, --***REMOVED***, [--, 4***REMOVED******REMOVED***, 1.0***REMOVED***"***REMOVED***

        t_ne = masked_array(data=[(1, (1, 1***REMOVED******REMOVED******REMOVED***,
                            mask=[(True, (True, False***REMOVED******REMOVED******REMOVED***,
                            dtype = [('a', '<i4'***REMOVED***, ('b', 'i4,i4'***REMOVED******REMOVED******REMOVED***
        assert_(str(t_ne[0***REMOVED******REMOVED*** == "(--, (--, 1***REMOVED******REMOVED***"***REMOVED***
        assert_(repr(t_ne[0***REMOVED******REMOVED*** == "(--, (--, 1***REMOVED******REMOVED***"***REMOVED***

    def test_object_with_array(self***REMOVED***:
        mx1 = masked_array([1.***REMOVED***, mask=[True***REMOVED******REMOVED***
        mx2 = masked_array([1., 2.***REMOVED******REMOVED***
        mx = masked_array([mx1, mx2***REMOVED***, mask=[False, True***REMOVED******REMOVED***
        assert_(mx[0***REMOVED*** is mx1***REMOVED***
        assert_(mx[1***REMOVED*** is not mx2***REMOVED***
        assert_(np.all(mx[1***REMOVED***.data == mx2.data***REMOVED******REMOVED***
        assert_(np.all(mx[1***REMOVED***.mask***REMOVED******REMOVED***
        # check that we return a view.
        mx[1***REMOVED***.data[0***REMOVED*** = 0.
        assert_(mx2[0***REMOVED*** == 0.***REMOVED***


class TestMaskedArrayArithmetic(TestCase***REMOVED***:
    # Base test class for MaskedArrays.

    def setUp(self***REMOVED***:
        # Base data definition.
        x = np.array([1., 1., 1., -2., pi/2.0, 4., 5., -10., 10., 1., 2., 3.***REMOVED******REMOVED***
        y = np.array([5., 0., 3., 2., -1., -4., 0., -10., 10., 1., 0., 3.***REMOVED******REMOVED***
        a10 = 10.
        m1 = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0***REMOVED***
        m2 = [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1***REMOVED***
        xm = masked_array(x, mask=m1***REMOVED***
        ym = masked_array(y, mask=m2***REMOVED***
        z = np.array([-.5, 0., .5, .8***REMOVED******REMOVED***
        zm = masked_array(z, mask=[0, 1, 0, 0***REMOVED******REMOVED***
        xf = np.where(m1, 1e+20, x***REMOVED***
        xm.set_fill_value(1e+20***REMOVED***
        self.d = (x, y, a10, m1, m2, xm, ym, z, zm, xf***REMOVED***
        self.err_status = np.geterr(***REMOVED***
        np.seterr(divide='ignore', invalid='ignore'***REMOVED***

    def tearDown(self***REMOVED***:
        np.seterr(**self.err_status***REMOVED***

    def test_basic_arithmetic(self***REMOVED***:
        # Test of basic arithmetic.
        (x, y, a10, m1, m2, xm, ym, z, zm, xf***REMOVED*** = self.d
        a2d = array([[1, 2***REMOVED***, [0, 4***REMOVED******REMOVED******REMOVED***
        a2dm = masked_array(a2d, [[0, 0***REMOVED***, [1, 0***REMOVED******REMOVED******REMOVED***
        assert_equal(a2d * a2d, a2d * a2dm***REMOVED***
        assert_equal(a2d + a2d, a2d + a2dm***REMOVED***
        assert_equal(a2d - a2d, a2d - a2dm***REMOVED***
        for s in [(12,***REMOVED***, (4, 3***REMOVED***, (2, 6***REMOVED******REMOVED***:
            x = x.reshape(s***REMOVED***
            y = y.reshape(s***REMOVED***
            xm = xm.reshape(s***REMOVED***
            ym = ym.reshape(s***REMOVED***
            xf = xf.reshape(s***REMOVED***
            assert_equal(-x, -xm***REMOVED***
            assert_equal(x + y, xm + ym***REMOVED***
            assert_equal(x - y, xm - ym***REMOVED***
            assert_equal(x * y, xm * ym***REMOVED***
            assert_equal(x / y, xm / ym***REMOVED***
            assert_equal(a10 + y, a10 + ym***REMOVED***
            assert_equal(a10 - y, a10 - ym***REMOVED***
            assert_equal(a10 * y, a10 * ym***REMOVED***
            assert_equal(a10 / y, a10 / ym***REMOVED***
            assert_equal(x + a10, xm + a10***REMOVED***
            assert_equal(x - a10, xm - a10***REMOVED***
            assert_equal(x * a10, xm * a10***REMOVED***
            assert_equal(x / a10, xm / a10***REMOVED***
            assert_equal(x ** 2, xm ** 2***REMOVED***
            assert_equal(abs(x***REMOVED*** ** 2.5, abs(xm***REMOVED*** ** 2.5***REMOVED***
            assert_equal(x ** y, xm ** ym***REMOVED***
            assert_equal(np.add(x, y***REMOVED***, add(xm, ym***REMOVED******REMOVED***
            assert_equal(np.subtract(x, y***REMOVED***, subtract(xm, ym***REMOVED******REMOVED***
            assert_equal(np.multiply(x, y***REMOVED***, multiply(xm, ym***REMOVED******REMOVED***
            assert_equal(np.divide(x, y***REMOVED***, divide(xm, ym***REMOVED******REMOVED***

    def test_divide_on_different_shapes(self***REMOVED***:
        x = arange(6, dtype=float***REMOVED***
        x.shape = (2, 3***REMOVED***
        y = arange(3, dtype=float***REMOVED***

        z = x / y
        assert_equal(z, [[-1., 1., 1.***REMOVED***, [-1., 4., 2.5***REMOVED******REMOVED******REMOVED***
        assert_equal(z.mask, [[1, 0, 0***REMOVED***, [1, 0, 0***REMOVED******REMOVED******REMOVED***

        z = x / y[None,:***REMOVED***
        assert_equal(z, [[-1., 1., 1.***REMOVED***, [-1., 4., 2.5***REMOVED******REMOVED******REMOVED***
        assert_equal(z.mask, [[1, 0, 0***REMOVED***, [1, 0, 0***REMOVED******REMOVED******REMOVED***

        y = arange(2, dtype=float***REMOVED***
        z = x / y[:, None***REMOVED***
        assert_equal(z, [[-1., -1., -1.***REMOVED***, [3., 4., 5.***REMOVED******REMOVED******REMOVED***
        assert_equal(z.mask, [[1, 1, 1***REMOVED***, [0, 0, 0***REMOVED******REMOVED******REMOVED***

    def test_mixed_arithmetic(self***REMOVED***:
        # Tests mixed arithmetics.
        na = np.array([1***REMOVED******REMOVED***
        ma = array([1***REMOVED******REMOVED***
        self.assertTrue(isinstance(na + ma, MaskedArray***REMOVED******REMOVED***
        self.assertTrue(isinstance(ma + na, MaskedArray***REMOVED******REMOVED***

    def test_limits_arithmetic(self***REMOVED***:
        tiny = np.finfo(float***REMOVED***.tiny
        a = array([tiny, 1. / tiny, 0.***REMOVED******REMOVED***
        assert_equal(getmaskarray(a / 2***REMOVED***, [0, 0, 0***REMOVED******REMOVED***
        assert_equal(getmaskarray(2 / a***REMOVED***, [1, 0, 1***REMOVED******REMOVED***

    def test_masked_singleton_arithmetic(self***REMOVED***:
        # Tests some scalar arithmetics on MaskedArrays.
        # Masked singleton should remain masked no matter what
        xm = array(0, mask=1***REMOVED***
        self.assertTrue((1 / array(0***REMOVED******REMOVED***.mask***REMOVED***
        self.assertTrue((1 + xm***REMOVED***.mask***REMOVED***
        self.assertTrue((-xm***REMOVED***.mask***REMOVED***
        self.assertTrue(maximum(xm, xm***REMOVED***.mask***REMOVED***
        self.assertTrue(minimum(xm, xm***REMOVED***.mask***REMOVED***

    def test_masked_singleton_equality(self***REMOVED***:
        # Tests (in***REMOVED***equality on masked snigleton
        a = array([1, 2, 3***REMOVED***, mask=[1, 1, 0***REMOVED******REMOVED***
        assert_((a[0***REMOVED*** == 0***REMOVED*** is masked***REMOVED***
        assert_((a[0***REMOVED*** != 0***REMOVED*** is masked***REMOVED***
        assert_equal((a[-1***REMOVED*** == 0***REMOVED***, False***REMOVED***
        assert_equal((a[-1***REMOVED*** != 0***REMOVED***, True***REMOVED***

    def test_arithmetic_with_masked_singleton(self***REMOVED***:
        # Checks that there's no collapsing to masked
        x = masked_array([1, 2***REMOVED******REMOVED***
        y = x * masked
        assert_equal(y.shape, x.shape***REMOVED***
        assert_equal(y._mask, [True, True***REMOVED******REMOVED***
        y = x[0***REMOVED*** * masked
        assert_(y is masked***REMOVED***
        y = x + masked
        assert_equal(y.shape, x.shape***REMOVED***
        assert_equal(y._mask, [True, True***REMOVED******REMOVED***

    def test_arithmetic_with_masked_singleton_on_1d_singleton(self***REMOVED***:
        # Check that we're not losing the shape of a singleton
        x = masked_array([1, ***REMOVED******REMOVED***
        y = x + masked
        assert_equal(y.shape, x.shape***REMOVED***
        assert_equal(y.mask, [True, ***REMOVED******REMOVED***

    def test_scalar_arithmetic(self***REMOVED***:
        x = array(0, mask=0***REMOVED***
        assert_equal(x.filled(***REMOVED***.ctypes.data, x.ctypes.data***REMOVED***
        # Make sure we don't lose the shape in some circumstances
        xm = array((0, 0***REMOVED******REMOVED*** / 0.
        assert_equal(xm.shape, (2,***REMOVED******REMOVED***
        assert_equal(xm.mask, [1, 1***REMOVED******REMOVED***

    def test_basic_ufuncs(self***REMOVED***:
        # Test various functions such as sin, cos.
        (x, y, a10, m1, m2, xm, ym, z, zm, xf***REMOVED*** = self.d
        assert_equal(np.cos(x***REMOVED***, cos(xm***REMOVED******REMOVED***
        assert_equal(np.cosh(x***REMOVED***, cosh(xm***REMOVED******REMOVED***
        assert_equal(np.sin(x***REMOVED***, sin(xm***REMOVED******REMOVED***
        assert_equal(np.sinh(x***REMOVED***, sinh(xm***REMOVED******REMOVED***
        assert_equal(np.tan(x***REMOVED***, tan(xm***REMOVED******REMOVED***
        assert_equal(np.tanh(x***REMOVED***, tanh(xm***REMOVED******REMOVED***
        assert_equal(np.sqrt(abs(x***REMOVED******REMOVED***, sqrt(xm***REMOVED******REMOVED***
        assert_equal(np.log(abs(x***REMOVED******REMOVED***, log(xm***REMOVED******REMOVED***
        assert_equal(np.log10(abs(x***REMOVED******REMOVED***, log10(xm***REMOVED******REMOVED***
        assert_equal(np.exp(x***REMOVED***, exp(xm***REMOVED******REMOVED***
        assert_equal(np.arcsin(z***REMOVED***, arcsin(zm***REMOVED******REMOVED***
        assert_equal(np.arccos(z***REMOVED***, arccos(zm***REMOVED******REMOVED***
        assert_equal(np.arctan(z***REMOVED***, arctan(zm***REMOVED******REMOVED***
        assert_equal(np.arctan2(x, y***REMOVED***, arctan2(xm, ym***REMOVED******REMOVED***
        assert_equal(np.absolute(x***REMOVED***, absolute(xm***REMOVED******REMOVED***
        assert_equal(np.angle(x + 1j*y***REMOVED***, angle(xm + 1j*ym***REMOVED******REMOVED***
        assert_equal(np.angle(x + 1j*y, deg=True***REMOVED***, angle(xm + 1j*ym, deg=True***REMOVED******REMOVED***
        assert_equal(np.equal(x, y***REMOVED***, equal(xm, ym***REMOVED******REMOVED***
        assert_equal(np.not_equal(x, y***REMOVED***, not_equal(xm, ym***REMOVED******REMOVED***
        assert_equal(np.less(x, y***REMOVED***, less(xm, ym***REMOVED******REMOVED***
        assert_equal(np.greater(x, y***REMOVED***, greater(xm, ym***REMOVED******REMOVED***
        assert_equal(np.less_equal(x, y***REMOVED***, less_equal(xm, ym***REMOVED******REMOVED***
        assert_equal(np.greater_equal(x, y***REMOVED***, greater_equal(xm, ym***REMOVED******REMOVED***
        assert_equal(np.conjugate(x***REMOVED***, conjugate(xm***REMOVED******REMOVED***

    def test_count_func(self***REMOVED***:
        # Tests count
        assert_equal(1, count(1***REMOVED******REMOVED***
        assert_equal(0, array(1, mask=[1***REMOVED******REMOVED******REMOVED***

        ott = array([0., 1., 2., 3.***REMOVED***, mask=[1, 0, 0, 0***REMOVED******REMOVED***
        res = count(ott***REMOVED***
        self.assertTrue(res.dtype.type is np.intp***REMOVED***
        assert_equal(3, res***REMOVED***

        ott = ott.reshape((2, 2***REMOVED******REMOVED***
        res = count(ott***REMOVED***
        assert_(res.dtype.type is np.intp***REMOVED***
        assert_equal(3, res***REMOVED***
        res = count(ott, 0***REMOVED***
        assert_(isinstance(res, ndarray***REMOVED******REMOVED***
        assert_equal([1, 2***REMOVED***, res***REMOVED***
        assert_(getmask(res***REMOVED*** is nomask***REMOVED***

        ott = array([0., 1., 2., 3.***REMOVED******REMOVED***
        res = count(ott, 0***REMOVED***
        assert_(isinstance(res, ndarray***REMOVED******REMOVED***
        assert_(res.dtype.type is np.intp***REMOVED***
        assert_raises(ValueError, ott.count, axis=1***REMOVED***

    def test_minmax_func(self***REMOVED***:
        # Tests minimum and maximum.
        (x, y, a10, m1, m2, xm, ym, z, zm, xf***REMOVED*** = self.d
        # max doesn't work if shaped
        xr = np.ravel(x***REMOVED***
        xmr = ravel(xm***REMOVED***
        # following are true because of careful selection of data
        assert_equal(max(xr***REMOVED***, maximum(xmr***REMOVED******REMOVED***
        assert_equal(min(xr***REMOVED***, minimum(xmr***REMOVED******REMOVED***

        assert_equal(minimum([1, 2, 3***REMOVED***, [4, 0, 9***REMOVED******REMOVED***, [1, 0, 3***REMOVED******REMOVED***
        assert_equal(maximum([1, 2, 3***REMOVED***, [4, 0, 9***REMOVED******REMOVED***, [4, 2, 9***REMOVED******REMOVED***
        x = arange(5***REMOVED***
        y = arange(5***REMOVED*** - 2
        x[3***REMOVED*** = masked
        y[0***REMOVED*** = masked
        assert_equal(minimum(x, y***REMOVED***, where(less(x, y***REMOVED***, x, y***REMOVED******REMOVED***
        assert_equal(maximum(x, y***REMOVED***, where(greater(x, y***REMOVED***, x, y***REMOVED******REMOVED***
        assert_(minimum(x***REMOVED*** == 0***REMOVED***
        assert_(maximum(x***REMOVED*** == 4***REMOVED***

        x = arange(4***REMOVED***.reshape(2, 2***REMOVED***
        x[-1, -1***REMOVED*** = masked
        assert_equal(maximum(x***REMOVED***, 2***REMOVED***

    def test_minimummaximum_func(self***REMOVED***:
        a = np.ones((2, 2***REMOVED******REMOVED***
        aminimum = minimum(a, a***REMOVED***
        self.assertTrue(isinstance(aminimum, MaskedArray***REMOVED******REMOVED***
        assert_equal(aminimum, np.minimum(a, a***REMOVED******REMOVED***

        aminimum = minimum.outer(a, a***REMOVED***
        self.assertTrue(isinstance(aminimum, MaskedArray***REMOVED******REMOVED***
        assert_equal(aminimum, np.minimum.outer(a, a***REMOVED******REMOVED***

        amaximum = maximum(a, a***REMOVED***
        self.assertTrue(isinstance(amaximum, MaskedArray***REMOVED******REMOVED***
        assert_equal(amaximum, np.maximum(a, a***REMOVED******REMOVED***

        amaximum = maximum.outer(a, a***REMOVED***
        self.assertTrue(isinstance(amaximum, MaskedArray***REMOVED******REMOVED***
        assert_equal(amaximum, np.maximum.outer(a, a***REMOVED******REMOVED***

    def test_minmax_reduce(self***REMOVED***:
        # Test np.min/maximum.reduce on array w/ full False mask
        a = array([1, 2, 3***REMOVED***, mask=[False, False, False***REMOVED******REMOVED***
        b = np.maximum.reduce(a***REMOVED***
        assert_equal(b, 3***REMOVED***

    def test_minmax_funcs_with_output(self***REMOVED***:
        # Tests the min/max functions with explicit outputs
        mask = np.random.rand(12***REMOVED***.round(***REMOVED***
        xm = array(np.random.uniform(0, 10, 12***REMOVED***, mask=mask***REMOVED***
        xm.shape = (3, 4***REMOVED***
        for funcname in ('min', 'max'***REMOVED***:
            # Initialize
            npfunc = getattr(np, funcname***REMOVED***
            mafunc = getattr(numpy.ma.core, funcname***REMOVED***
            # Use the np version
            nout = np.empty((4,***REMOVED***, dtype=int***REMOVED***
            ***REMOVED***
                result = npfunc(xm, axis=0, out=nout***REMOVED***
            except MaskError:
                pass
            nout = np.empty((4,***REMOVED***, dtype=float***REMOVED***
            result = npfunc(xm, axis=0, out=nout***REMOVED***
            self.assertTrue(result is nout***REMOVED***
            # Use the ma version
            nout.fill(-999***REMOVED***
            result = mafunc(xm, axis=0, out=nout***REMOVED***
            self.assertTrue(result is nout***REMOVED***

    def test_minmax_methods(self***REMOVED***:
        # Additional tests on max/min
        (_, _, _, _, _, xm, _, _, _, _***REMOVED*** = self.d
        xm.shape = (xm.size,***REMOVED***
        assert_equal(xm.max(***REMOVED***, 10***REMOVED***
        self.assertTrue(xm[0***REMOVED***.max(***REMOVED*** is masked***REMOVED***
        self.assertTrue(xm[0***REMOVED***.max(0***REMOVED*** is masked***REMOVED***
        self.assertTrue(xm[0***REMOVED***.max(-1***REMOVED*** is masked***REMOVED***
        assert_equal(xm.min(***REMOVED***, -10.***REMOVED***
        self.assertTrue(xm[0***REMOVED***.min(***REMOVED*** is masked***REMOVED***
        self.assertTrue(xm[0***REMOVED***.min(0***REMOVED*** is masked***REMOVED***
        self.assertTrue(xm[0***REMOVED***.min(-1***REMOVED*** is masked***REMOVED***
        assert_equal(xm.ptp(***REMOVED***, 20.***REMOVED***
        self.assertTrue(xm[0***REMOVED***.ptp(***REMOVED*** is masked***REMOVED***
        self.assertTrue(xm[0***REMOVED***.ptp(0***REMOVED*** is masked***REMOVED***
        self.assertTrue(xm[0***REMOVED***.ptp(-1***REMOVED*** is masked***REMOVED***

        x = array([1, 2, 3***REMOVED***, mask=True***REMOVED***
        self.assertTrue(x.min(***REMOVED*** is masked***REMOVED***
        self.assertTrue(x.max(***REMOVED*** is masked***REMOVED***
        self.assertTrue(x.ptp(***REMOVED*** is masked***REMOVED***

    def test_addsumprod(self***REMOVED***:
        # Tests add, sum, product.
        (x, y, a10, m1, m2, xm, ym, z, zm, xf***REMOVED*** = self.d
        assert_equal(np.add.reduce(x***REMOVED***, add.reduce(x***REMOVED******REMOVED***
        assert_equal(np.add.accumulate(x***REMOVED***, add.accumulate(x***REMOVED******REMOVED***
        assert_equal(4, sum(array(4***REMOVED***, axis=0***REMOVED******REMOVED***
        assert_equal(4, sum(array(4***REMOVED***, axis=0***REMOVED******REMOVED***
        assert_equal(np.sum(x, axis=0***REMOVED***, sum(x, axis=0***REMOVED******REMOVED***
        assert_equal(np.sum(filled(xm, 0***REMOVED***, axis=0***REMOVED***, sum(xm, axis=0***REMOVED******REMOVED***
        assert_equal(np.sum(x, 0***REMOVED***, sum(x, 0***REMOVED******REMOVED***
        assert_equal(np.product(x, axis=0***REMOVED***, product(x, axis=0***REMOVED******REMOVED***
        assert_equal(np.product(x, 0***REMOVED***, product(x, 0***REMOVED******REMOVED***
        assert_equal(np.product(filled(xm, 1***REMOVED***, axis=0***REMOVED***, product(xm, axis=0***REMOVED******REMOVED***
        s = (3, 4***REMOVED***
        x.shape = y.shape = xm.shape = ym.shape = s
        if len(s***REMOVED*** > 1:
            assert_equal(np.concatenate((x, y***REMOVED***, 1***REMOVED***, concatenate((xm, ym***REMOVED***, 1***REMOVED******REMOVED***
            assert_equal(np.add.reduce(x, 1***REMOVED***, add.reduce(x, 1***REMOVED******REMOVED***
            assert_equal(np.sum(x, 1***REMOVED***, sum(x, 1***REMOVED******REMOVED***
            assert_equal(np.product(x, 1***REMOVED***, product(x, 1***REMOVED******REMOVED***

    def test_binops_d2D(self***REMOVED***:
        # Test binary operations on 2D data
        a = array([[1.***REMOVED***, [2.***REMOVED***, [3.***REMOVED******REMOVED***, mask=[[False***REMOVED***, [True***REMOVED***, [True***REMOVED******REMOVED******REMOVED***
        b = array([[2., 3.***REMOVED***, [4., 5.***REMOVED***, [6., 7.***REMOVED******REMOVED******REMOVED***

        test = a * b
        control = array([[2., 3.***REMOVED***, [2., 2.***REMOVED***, [3., 3.***REMOVED******REMOVED***,
                        mask=[[0, 0***REMOVED***, [1, 1***REMOVED***, [1, 1***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        assert_equal(test.data, control.data***REMOVED***
        assert_equal(test.mask, control.mask***REMOVED***

        test = b * a
        control = array([[2., 3.***REMOVED***, [4., 5.***REMOVED***, [6., 7.***REMOVED******REMOVED***,
                        mask=[[0, 0***REMOVED***, [1, 1***REMOVED***, [1, 1***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        assert_equal(test.data, control.data***REMOVED***
        assert_equal(test.mask, control.mask***REMOVED***

        a = array([[1.***REMOVED***, [2.***REMOVED***, [3.***REMOVED******REMOVED******REMOVED***
        b = array([[2., 3.***REMOVED***, [4., 5.***REMOVED***, [6., 7.***REMOVED******REMOVED***,
                  mask=[[0, 0***REMOVED***, [0, 0***REMOVED***, [0, 1***REMOVED******REMOVED******REMOVED***
        test = a * b
        control = array([[2, 3***REMOVED***, [8, 10***REMOVED***, [18, 3***REMOVED******REMOVED***,
                        mask=[[0, 0***REMOVED***, [0, 0***REMOVED***, [0, 1***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        assert_equal(test.data, control.data***REMOVED***
        assert_equal(test.mask, control.mask***REMOVED***

        test = b * a
        control = array([[2, 3***REMOVED***, [8, 10***REMOVED***, [18, 7***REMOVED******REMOVED***,
                        mask=[[0, 0***REMOVED***, [0, 0***REMOVED***, [0, 1***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        assert_equal(test.data, control.data***REMOVED***
        assert_equal(test.mask, control.mask***REMOVED***

    def test_domained_binops_d2D(self***REMOVED***:
        # Test domained binary operations on 2D data
        a = array([[1.***REMOVED***, [2.***REMOVED***, [3.***REMOVED******REMOVED***, mask=[[False***REMOVED***, [True***REMOVED***, [True***REMOVED******REMOVED******REMOVED***
        b = array([[2., 3.***REMOVED***, [4., 5.***REMOVED***, [6., 7.***REMOVED******REMOVED******REMOVED***

        test = a / b
        control = array([[1. / 2., 1. / 3.***REMOVED***, [2., 2.***REMOVED***, [3., 3.***REMOVED******REMOVED***,
                        mask=[[0, 0***REMOVED***, [1, 1***REMOVED***, [1, 1***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        assert_equal(test.data, control.data***REMOVED***
        assert_equal(test.mask, control.mask***REMOVED***

        test = b / a
        control = array([[2. / 1., 3. / 1.***REMOVED***, [4., 5.***REMOVED***, [6., 7.***REMOVED******REMOVED***,
                        mask=[[0, 0***REMOVED***, [1, 1***REMOVED***, [1, 1***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        assert_equal(test.data, control.data***REMOVED***
        assert_equal(test.mask, control.mask***REMOVED***

        a = array([[1.***REMOVED***, [2.***REMOVED***, [3.***REMOVED******REMOVED******REMOVED***
        b = array([[2., 3.***REMOVED***, [4., 5.***REMOVED***, [6., 7.***REMOVED******REMOVED***,
                  mask=[[0, 0***REMOVED***, [0, 0***REMOVED***, [0, 1***REMOVED******REMOVED******REMOVED***
        test = a / b
        control = array([[1. / 2, 1. / 3***REMOVED***, [2. / 4, 2. / 5***REMOVED***, [3. / 6, 3***REMOVED******REMOVED***,
                        mask=[[0, 0***REMOVED***, [0, 0***REMOVED***, [0, 1***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        assert_equal(test.data, control.data***REMOVED***
        assert_equal(test.mask, control.mask***REMOVED***

        test = b / a
        control = array([[2 / 1., 3 / 1.***REMOVED***, [4 / 2., 5 / 2.***REMOVED***, [6 / 3., 7***REMOVED******REMOVED***,
                        mask=[[0, 0***REMOVED***, [0, 0***REMOVED***, [0, 1***REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        assert_equal(test.data, control.data***REMOVED***
        assert_equal(test.mask, control.mask***REMOVED***

    def test_noshrinking(self***REMOVED***:
        # Check that we don't shrink a mask when not wanted
        # Binary operations
        a = masked_array([1., 2., 3.***REMOVED***, mask=[False, False, False***REMOVED***,
                         shrink=False***REMOVED***
        b = a + 1
        assert_equal(b.mask, [0, 0, 0***REMOVED******REMOVED***
        # In place binary operation
        a += 1
        assert_equal(a.mask, [0, 0, 0***REMOVED******REMOVED***
        # Domained binary operation
        b = a / 1.
        assert_equal(b.mask, [0, 0, 0***REMOVED******REMOVED***
        # In place binary operation
        a /= 1.
        assert_equal(a.mask, [0, 0, 0***REMOVED******REMOVED***

    def test_noshink_on_creation(self***REMOVED***:
        # Check that the mask is not shrunk on array creation when not wanted
        a = np.ma.masked_values([1., 2.5, 3.1***REMOVED***, 1.5, shrink=False***REMOVED***
        assert_equal(a.mask, [0, 0, 0***REMOVED******REMOVED***

    def test_mod(self***REMOVED***:
        # Tests mod
        (x, y, a10, m1, m2, xm, ym, z, zm, xf***REMOVED*** = self.d
        assert_equal(mod(x, y***REMOVED***, mod(xm, ym***REMOVED******REMOVED***
        test = mod(ym, xm***REMOVED***
        assert_equal(test, np.mod(ym, xm***REMOVED******REMOVED***
        assert_equal(test.mask, mask_or(xm.mask, ym.mask***REMOVED******REMOVED***
        test = mod(xm, ym***REMOVED***
        assert_equal(test, np.mod(xm, ym***REMOVED******REMOVED***
        assert_equal(test.mask, mask_or(mask_or(xm.mask, ym.mask***REMOVED***, (ym == 0***REMOVED******REMOVED******REMOVED***

    def test_TakeTransposeInnerOuter(self***REMOVED***:
        # Test of take, transpose, inner, outer products
        x = arange(24***REMOVED***
        y = np.arange(24***REMOVED***
        x[5:6***REMOVED*** = masked
        x = x.reshape(2, 3, 4***REMOVED***
        y = y.reshape(2, 3, 4***REMOVED***
        assert_equal(np.transpose(y, (2, 0, 1***REMOVED******REMOVED***, transpose(x, (2, 0, 1***REMOVED******REMOVED******REMOVED***
        assert_equal(np.take(y, (2, 0, 1***REMOVED***, 1***REMOVED***, take(x, (2, 0, 1***REMOVED***, 1***REMOVED******REMOVED***
        assert_equal(np.inner(filled(x, 0***REMOVED***, filled(y, 0***REMOVED******REMOVED***,
                     inner(x, y***REMOVED******REMOVED***
        assert_equal(np.outer(filled(x, 0***REMOVED***, filled(y, 0***REMOVED******REMOVED***,
                     outer(x, y***REMOVED******REMOVED***
        y = array(['abc', 1, 'def', 2, 3***REMOVED***, object***REMOVED***
        y[2***REMOVED*** = masked
        t = take(y, [0, 3, 4***REMOVED******REMOVED***
        assert_(t[0***REMOVED*** == 'abc'***REMOVED***
        assert_(t[1***REMOVED*** == 2***REMOVED***
        assert_(t[2***REMOVED*** == 3***REMOVED***

    def test_imag_real(self***REMOVED***:
        # Check complex
        xx = array([1 + 10j, 20 + 2j***REMOVED***, mask=[1, 0***REMOVED******REMOVED***
        assert_equal(xx.imag, [10, 2***REMOVED******REMOVED***
        assert_equal(xx.imag.filled(***REMOVED***, [1e+20, 2***REMOVED******REMOVED***
        assert_equal(xx.imag.dtype, xx._data.imag.dtype***REMOVED***
        assert_equal(xx.real, [1, 20***REMOVED******REMOVED***
        assert_equal(xx.real.filled(***REMOVED***, [1e+20, 20***REMOVED******REMOVED***
        assert_equal(xx.real.dtype, xx._data.real.dtype***REMOVED***

    def test_methods_with_output(self***REMOVED***:
        xm = array(np.random.uniform(0, 10, 12***REMOVED******REMOVED***.reshape(3, 4***REMOVED***
        xm[:, 0***REMOVED*** = xm[0***REMOVED*** = xm[-1, -1***REMOVED*** = masked

        funclist = ('sum', 'prod', 'var', 'std', 'max', 'min', 'ptp', 'mean',***REMOVED***

        for funcname in funclist:
            npfunc = getattr(np, funcname***REMOVED***
            xmmeth = getattr(xm, funcname***REMOVED***
            # A ndarray as explicit input
            output = np.empty(4, dtype=float***REMOVED***
            output.fill(-9999***REMOVED***
            result = npfunc(xm, axis=0, out=output***REMOVED***
            # ... the result should be the given output
            assert_(result is output***REMOVED***
            assert_equal(result, xmmeth(axis=0, out=output***REMOVED******REMOVED***

            output = empty(4, dtype=int***REMOVED***
            result = xmmeth(axis=0, out=output***REMOVED***
            assert_(result is output***REMOVED***
            assert_(output[0***REMOVED*** is masked***REMOVED***

    def test_count_mean_with_matrix(self***REMOVED***:
        m = np.ma.array(np.matrix([[1,2***REMOVED***,[3,4***REMOVED******REMOVED******REMOVED***, mask=np.zeros((2,2***REMOVED******REMOVED******REMOVED***

        assert_equal(m.count(axis=0***REMOVED***.shape, (1,2***REMOVED******REMOVED***
        assert_equal(m.count(axis=1***REMOVED***.shape, (2,1***REMOVED******REMOVED***

        #make sure broadcasting inside mean and var work
        assert_equal(m.mean(axis=0***REMOVED***, [[2., 3.***REMOVED******REMOVED******REMOVED***
        assert_equal(m.mean(axis=1***REMOVED***, [[1.5***REMOVED***, [3.5***REMOVED******REMOVED******REMOVED***

    def test_eq_on_structured(self***REMOVED***:
        # Test the equality of structured arrays
        ndtype = [('A', int***REMOVED***, ('B', int***REMOVED******REMOVED***
        a = array([(1, 1***REMOVED***, (2, 2***REMOVED******REMOVED***, mask=[(0, 1***REMOVED***, (0, 0***REMOVED******REMOVED***, dtype=ndtype***REMOVED***
        test = (a == a***REMOVED***
        assert_equal(test, [True, True***REMOVED******REMOVED***
        assert_equal(test.mask, [False, False***REMOVED******REMOVED***
        b = array([(1, 1***REMOVED***, (2, 2***REMOVED******REMOVED***, mask=[(1, 0***REMOVED***, (0, 0***REMOVED******REMOVED***, dtype=ndtype***REMOVED***
        test = (a == b***REMOVED***
        assert_equal(test, [False, True***REMOVED******REMOVED***
        assert_equal(test.mask, [True, False***REMOVED******REMOVED***
        b = array([(1, 1***REMOVED***, (2, 2***REMOVED******REMOVED***, mask=[(0, 1***REMOVED***, (1, 0***REMOVED******REMOVED***, dtype=ndtype***REMOVED***
        test = (a == b***REMOVED***
        assert_equal(test, [True, False***REMOVED******REMOVED***
        assert_equal(test.mask, [False, False***REMOVED******REMOVED***

    def test_ne_on_structured(self***REMOVED***:
        # Test the equality of structured arrays
        ndtype = [('A', int***REMOVED***, ('B', int***REMOVED******REMOVED***
        a = array([(1, 1***REMOVED***, (2, 2***REMOVED******REMOVED***, mask=[(0, 1***REMOVED***, (0, 0***REMOVED******REMOVED***, dtype=ndtype***REMOVED***
        test = (a != a***REMOVED***
        assert_equal(test, [False, False***REMOVED******REMOVED***
        assert_equal(test.mask, [False, False***REMOVED******REMOVED***
        b = array([(1, 1***REMOVED***, (2, 2***REMOVED******REMOVED***, mask=[(1, 0***REMOVED***, (0, 0***REMOVED******REMOVED***, dtype=ndtype***REMOVED***
        test = (a != b***REMOVED***
        assert_equal(test, [True, False***REMOVED******REMOVED***
        assert_equal(test.mask, [True, False***REMOVED******REMOVED***
        b = array([(1, 1***REMOVED***, (2, 2***REMOVED******REMOVED***, mask=[(0, 1***REMOVED***, (1, 0***REMOVED******REMOVED***, dtype=ndtype***REMOVED***
        test = (a != b***REMOVED***
        assert_equal(test, [False, True***REMOVED******REMOVED***
        assert_equal(test.mask, [False, False***REMOVED******REMOVED***

    def test_eq_w_None(self***REMOVED***:
        # Really, comparisons with None should not be done, but check them
        # anyway. Note that pep8 will flag these tests.

        # With partial mask
        a = array([1, 2***REMOVED***, mask=[0, 1***REMOVED******REMOVED***
        assert_equal(a == None, False***REMOVED***
        assert_equal(a.data == None, False***REMOVED***
        assert_equal(a.mask == None, False***REMOVED***
        assert_equal(a != None, True***REMOVED***
        # With nomask
        a = array([1, 2***REMOVED***, mask=False***REMOVED***
        assert_equal(a == None, False***REMOVED***
        assert_equal(a != None, True***REMOVED***
        # With complete mask
        a = array([1, 2***REMOVED***, mask=True***REMOVED***
        assert_equal(a == None, False***REMOVED***
        assert_equal(a != None, True***REMOVED***
        # Fully masked, even comparison to None should return "masked"
        a = masked
        assert_equal(a == None, masked***REMOVED***

    def test_eq_w_scalar(self***REMOVED***:
        a = array(1***REMOVED***
        assert_equal(a == 1, True***REMOVED***
        assert_equal(a == 0, False***REMOVED***
        assert_equal(a != 1, False***REMOVED***
        assert_equal(a != 0, True***REMOVED***

    def test_numpyarithmetics(self***REMOVED***:
        # Check that the mask is not back-propagated when using numpy functions
        a = masked_array([-1, 0, 1, 2, 3***REMOVED***, mask=[0, 0, 0, 0, 1***REMOVED******REMOVED***
        control = masked_array([np.nan, np.nan, 0, np.log(2***REMOVED***, -1***REMOVED***,
                               mask=[1, 1, 0, 0, 1***REMOVED******REMOVED***

        test = log(a***REMOVED***
        assert_equal(test, control***REMOVED***
        assert_equal(test.mask, control.mask***REMOVED***
        assert_equal(a.mask, [0, 0, 0, 0, 1***REMOVED******REMOVED***

        test = np.log(a***REMOVED***
        assert_equal(test, control***REMOVED***
        assert_equal(test.mask, control.mask***REMOVED***
        assert_equal(a.mask, [0, 0, 0, 0, 1***REMOVED******REMOVED***


class TestMaskedArrayAttributes(TestCase***REMOVED***:

    def test_keepmask(self***REMOVED***:
        # Tests the keep mask flag
        x = masked_array([1, 2, 3***REMOVED***, mask=[1, 0, 0***REMOVED******REMOVED***
        mx = masked_array(x***REMOVED***
        assert_equal(mx.mask, x.mask***REMOVED***
        mx = masked_array(x, mask=[0, 1, 0***REMOVED***, keep_mask=False***REMOVED***
        assert_equal(mx.mask, [0, 1, 0***REMOVED******REMOVED***
        mx = masked_array(x, mask=[0, 1, 0***REMOVED***, keep_mask=True***REMOVED***
        assert_equal(mx.mask, [1, 1, 0***REMOVED******REMOVED***
        # We default to true
        mx = masked_array(x, mask=[0, 1, 0***REMOVED******REMOVED***
        assert_equal(mx.mask, [1, 1, 0***REMOVED******REMOVED***

    def test_hardmask(self***REMOVED***:
        # Test hard_mask
        d = arange(5***REMOVED***
        n = [0, 0, 0, 1, 1***REMOVED***
        m = make_mask(n***REMOVED***
        xh = array(d, mask=m, hard_mask=True***REMOVED***
        # We need to copy, to avoid updating d in xh !
        xs = array(d, mask=m, hard_mask=False, copy=True***REMOVED***
        xh[[1, 4***REMOVED******REMOVED*** = [10, 40***REMOVED***
        xs[[1, 4***REMOVED******REMOVED*** = [10, 40***REMOVED***
        assert_equal(xh._data, [0, 10, 2, 3, 4***REMOVED******REMOVED***
        assert_equal(xs._data, [0, 10, 2, 3, 40***REMOVED******REMOVED***
        assert_equal(xs.mask, [0, 0, 0, 1, 0***REMOVED******REMOVED***
        self.assertTrue(xh._hardmask***REMOVED***
        self.assertTrue(not xs._hardmask***REMOVED***
        xh[1:4***REMOVED*** = [10, 20, 30***REMOVED***
        xs[1:4***REMOVED*** = [10, 20, 30***REMOVED***
        assert_equal(xh._data, [0, 10, 20, 3, 4***REMOVED******REMOVED***
        assert_equal(xs._data, [0, 10, 20, 30, 40***REMOVED******REMOVED***
        assert_equal(xs.mask, nomask***REMOVED***
        xh[0***REMOVED*** = masked
        xs[0***REMOVED*** = masked
        assert_equal(xh.mask, [1, 0, 0, 1, 1***REMOVED******REMOVED***
        assert_equal(xs.mask, [1, 0, 0, 0, 0***REMOVED******REMOVED***
        xh[:***REMOVED*** = 1
        xs[:***REMOVED*** = 1
        assert_equal(xh._data, [0, 1, 1, 3, 4***REMOVED******REMOVED***
        assert_equal(xs._data, [1, 1, 1, 1, 1***REMOVED******REMOVED***
        assert_equal(xh.mask, [1, 0, 0, 1, 1***REMOVED******REMOVED***
        assert_equal(xs.mask, nomask***REMOVED***
        # Switch to soft mask
        xh.soften_mask(***REMOVED***
        xh[:***REMOVED*** = arange(5***REMOVED***
        assert_equal(xh._data, [0, 1, 2, 3, 4***REMOVED******REMOVED***
        assert_equal(xh.mask, nomask***REMOVED***
        # Switch back to hard mask
        xh.harden_mask(***REMOVED***
        xh[xh < 3***REMOVED*** = masked
        assert_equal(xh._data, [0, 1, 2, 3, 4***REMOVED******REMOVED***
        assert_equal(xh._mask, [1, 1, 1, 0, 0***REMOVED******REMOVED***
        xh[filled(xh > 1, False***REMOVED******REMOVED*** = 5
        assert_equal(xh._data, [0, 1, 2, 5, 5***REMOVED******REMOVED***
        assert_equal(xh._mask, [1, 1, 1, 0, 0***REMOVED******REMOVED***

        xh = array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED***, mask=[[1, 0***REMOVED***, [0, 0***REMOVED******REMOVED***, hard_mask=True***REMOVED***
        xh[0***REMOVED*** = 0
        assert_equal(xh._data, [[1, 0***REMOVED***, [3, 4***REMOVED******REMOVED******REMOVED***
        assert_equal(xh._mask, [[1, 0***REMOVED***, [0, 0***REMOVED******REMOVED******REMOVED***
        xh[-1, -1***REMOVED*** = 5
        assert_equal(xh._data, [[1, 0***REMOVED***, [3, 5***REMOVED******REMOVED******REMOVED***
        assert_equal(xh._mask, [[1, 0***REMOVED***, [0, 0***REMOVED******REMOVED******REMOVED***
        xh[filled(xh < 5, False***REMOVED******REMOVED*** = 2
        assert_equal(xh._data, [[1, 2***REMOVED***, [2, 5***REMOVED******REMOVED******REMOVED***
        assert_equal(xh._mask, [[1, 0***REMOVED***, [0, 0***REMOVED******REMOVED******REMOVED***

    def test_hardmask_again(self***REMOVED***:
        # Another test of hardmask
        d = arange(5***REMOVED***
        n = [0, 0, 0, 1, 1***REMOVED***
        m = make_mask(n***REMOVED***
        xh = array(d, mask=m, hard_mask=True***REMOVED***
        xh[4:5***REMOVED*** = 999
        xh[0:1***REMOVED*** = 999
        assert_equal(xh._data, [999, 1, 2, 3, 4***REMOVED******REMOVED***

    def test_hardmask_oncemore_yay(self***REMOVED***:
        # OK, yet another test of hardmask
        # Make sure that harden_mask/soften_mask//unshare_mask returns self
        a = array([1, 2, 3***REMOVED***, mask=[1, 0, 0***REMOVED******REMOVED***
        b = a.harden_mask(***REMOVED***
        assert_equal(a, b***REMOVED***
        b[0***REMOVED*** = 0
        assert_equal(a, b***REMOVED***
        assert_equal(b, array([1, 2, 3***REMOVED***, mask=[1, 0, 0***REMOVED******REMOVED******REMOVED***
        a = b.soften_mask(***REMOVED***
        a[0***REMOVED*** = 0
        assert_equal(a, b***REMOVED***
        assert_equal(b, array([0, 2, 3***REMOVED***, mask=[0, 0, 0***REMOVED******REMOVED******REMOVED***

    def test_smallmask(self***REMOVED***:
        # Checks the behaviour of _smallmask
        a = arange(10***REMOVED***
        a[1***REMOVED*** = masked
        a[1***REMOVED*** = 1
        assert_equal(a._mask, nomask***REMOVED***
        a = arange(10***REMOVED***
        a._smallmask = False
        a[1***REMOVED*** = masked
        a[1***REMOVED*** = 1
        assert_equal(a._mask, zeros(10***REMOVED******REMOVED***

    def test_shrink_mask(self***REMOVED***:
        # Tests .shrink_mask(***REMOVED***
        a = array([1, 2, 3***REMOVED***, mask=[0, 0, 0***REMOVED******REMOVED***
        b = a.shrink_mask(***REMOVED***
        assert_equal(a, b***REMOVED***
        assert_equal(a.mask, nomask***REMOVED***

    def test_flat(self***REMOVED***:
        # Test that flat can return all types of items [#4585, #4615***REMOVED***
        # test simple access
        test = masked_array(np.matrix([[1, 2, 3***REMOVED******REMOVED******REMOVED***, mask=[0, 0, 1***REMOVED******REMOVED***
        assert_equal(test.flat[1***REMOVED***, 2***REMOVED***
        assert_equal(test.flat[2***REMOVED***, masked***REMOVED***
        self.assertTrue(np.all(test.flat[0:2***REMOVED*** == test[0, 0:2***REMOVED******REMOVED******REMOVED***
        # Test flat on masked_matrices
        test = masked_array(np.matrix([[1, 2, 3***REMOVED******REMOVED******REMOVED***, mask=[0, 0, 1***REMOVED******REMOVED***
        test.flat = masked_array([3, 2, 1***REMOVED***, mask=[1, 0, 0***REMOVED******REMOVED***
        control = masked_array(np.matrix([[3, 2, 1***REMOVED******REMOVED******REMOVED***, mask=[1, 0, 0***REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        # Test setting
        test = masked_array(np.matrix([[1, 2, 3***REMOVED******REMOVED******REMOVED***, mask=[0, 0, 1***REMOVED******REMOVED***
        testflat = test.flat
        testflat[:***REMOVED*** = testflat[[2, 1, 0***REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        testflat[0***REMOVED*** = 9
        assert_equal(test[0, 0***REMOVED***, 9***REMOVED***
        # test 2-D record array
        # ... on structured array w/ masked records
        x = array([[(1, 1.1, 'one'***REMOVED***, (2, 2.2, 'two'***REMOVED***, (3, 3.3, 'thr'***REMOVED******REMOVED***,
                   [(4, 4.4, 'fou'***REMOVED***, (5, 5.5, 'fiv'***REMOVED***, (6, 6.6, 'six'***REMOVED******REMOVED******REMOVED***,
                  dtype=[('a', int***REMOVED***, ('b', float***REMOVED***, ('c', '|S8'***REMOVED******REMOVED******REMOVED***
        x['a'***REMOVED***[0, 1***REMOVED*** = masked
        x['b'***REMOVED***[1, 0***REMOVED*** = masked
        x['c'***REMOVED***[0, 2***REMOVED*** = masked
        x[-1, -1***REMOVED*** = masked
        xflat = x.flat
        assert_equal(xflat[0***REMOVED***, x[0, 0***REMOVED******REMOVED***
        assert_equal(xflat[1***REMOVED***, x[0, 1***REMOVED******REMOVED***
        assert_equal(xflat[2***REMOVED***, x[0, 2***REMOVED******REMOVED***
        assert_equal(xflat[:3***REMOVED***, x[0***REMOVED******REMOVED***
        assert_equal(xflat[3***REMOVED***, x[1, 0***REMOVED******REMOVED***
        assert_equal(xflat[4***REMOVED***, x[1, 1***REMOVED******REMOVED***
        assert_equal(xflat[5***REMOVED***, x[1, 2***REMOVED******REMOVED***
        assert_equal(xflat[3:***REMOVED***, x[1***REMOVED******REMOVED***
        assert_equal(xflat[-1***REMOVED***, x[-1, -1***REMOVED******REMOVED***
        i = 0
        j = 0
        for xf in xflat:
            assert_equal(xf, x[j, i***REMOVED******REMOVED***
            i += 1
            if i >= x.shape[-1***REMOVED***:
                i = 0
                j += 1
        # test that matrices keep the correct shape (#4615***REMOVED***
        a = masked_array(np.matrix(np.eye(2***REMOVED******REMOVED***, mask=0***REMOVED***
        b = a.flat
        b01 = b[:2***REMOVED***
        assert_equal(b01.data, array([[1., 0.***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_equal(b01.mask, array([[False, False***REMOVED******REMOVED******REMOVED******REMOVED***

    def test_assign_dtype(self***REMOVED***:
        # check that the mask's dtype is updated when dtype is changed
        a = np.zeros(4, dtype='f4,i4'***REMOVED***

        m = np.ma.array(a***REMOVED***
        m.dtype = np.dtype('f4'***REMOVED***
        repr(m***REMOVED***  # raises?
        assert_equal(m.dtype, np.dtype('f4'***REMOVED******REMOVED***

        # check that dtype changes that change shape of mask too much
        # are not allowed
        def assign(***REMOVED***:
            m = np.ma.array(a***REMOVED***
            m.dtype = np.dtype('f8'***REMOVED***
        assert_raises(ValueError, assign***REMOVED***

        b = a.view(dtype='f4', type=np.ma.MaskedArray***REMOVED***  # raises?
        assert_equal(b.dtype, np.dtype('f4'***REMOVED******REMOVED***

        # check that nomask is preserved
        a = np.zeros(4, dtype='f4'***REMOVED***
        m = np.ma.array(a***REMOVED***
        m.dtype = np.dtype('f4,i4'***REMOVED***
        assert_equal(m.dtype, np.dtype('f4,i4'***REMOVED******REMOVED***
        assert_equal(m._mask, np.ma.nomask***REMOVED***


class TestFillingValues(TestCase***REMOVED***:

    def test_check_on_scalar(self***REMOVED***:
        # Test _check_fill_value set to valid and invalid values
        _check_fill_value = np.ma.core._check_fill_value

        fval = _check_fill_value(0, int***REMOVED***
        assert_equal(fval, 0***REMOVED***
        fval = _check_fill_value(None, int***REMOVED***
        assert_equal(fval, default_fill_value(0***REMOVED******REMOVED***

        fval = _check_fill_value(0, "|S3"***REMOVED***
        assert_equal(fval, asbytes("0"***REMOVED******REMOVED***
        fval = _check_fill_value(None, "|S3"***REMOVED***
        assert_equal(fval, default_fill_value(b"camelot!"***REMOVED******REMOVED***
        self.assertRaises(TypeError, _check_fill_value, 1e+20, int***REMOVED***
        self.assertRaises(TypeError, _check_fill_value, 'stuff', int***REMOVED***

    def test_check_on_fields(self***REMOVED***:
        # Tests _check_fill_value with records
        _check_fill_value = np.ma.core._check_fill_value
        ndtype = [('a', int***REMOVED***, ('b', float***REMOVED***, ('c', "|S3"***REMOVED******REMOVED***
        # A check on a list should return a single record
        fval = _check_fill_value([-999, -12345678.9, "???"***REMOVED***, ndtype***REMOVED***
        self.assertTrue(isinstance(fval, ndarray***REMOVED******REMOVED***
        assert_equal(fval.item(***REMOVED***, [-999, -12345678.9, asbytes("???"***REMOVED******REMOVED******REMOVED***
        # A check on None should output the defaults
        fval = _check_fill_value(None, ndtype***REMOVED***
        self.assertTrue(isinstance(fval, ndarray***REMOVED******REMOVED***
        assert_equal(fval.item(***REMOVED***, [default_fill_value(0***REMOVED***,
                                   default_fill_value(0.***REMOVED***,
                                   asbytes(default_fill_value("0"***REMOVED******REMOVED******REMOVED******REMOVED***
        #.....Using a structured type as fill_value should work
        fill_val = np.array((-999, -12345678.9, "???"***REMOVED***, dtype=ndtype***REMOVED***
        fval = _check_fill_value(fill_val, ndtype***REMOVED***
        self.assertTrue(isinstance(fval, ndarray***REMOVED******REMOVED***
        assert_equal(fval.item(***REMOVED***, [-999, -12345678.9, asbytes("???"***REMOVED******REMOVED******REMOVED***

        #.....Using a flexible type w/ a different type shouldn't matter
        # BEHAVIOR in 1.5 and earlier: match structured types by position
        #fill_val = np.array((-999, -12345678.9, "???"***REMOVED***,
        #                    dtype=[("A", int***REMOVED***, ("B", float***REMOVED***, ("C", "|S3"***REMOVED******REMOVED******REMOVED***
        # BEHAVIOR in 1.6 and later: match structured types by name
        fill_val = np.array(("???", -999, -12345678.9***REMOVED***,
                            dtype=[("c", "|S3"***REMOVED***, ("a", int***REMOVED***, ("b", float***REMOVED***, ***REMOVED******REMOVED***
        fval = _check_fill_value(fill_val, ndtype***REMOVED***
        self.assertTrue(isinstance(fval, ndarray***REMOVED******REMOVED***
        assert_equal(fval.item(***REMOVED***, [-999, -12345678.9, asbytes("???"***REMOVED******REMOVED******REMOVED***

        #.....Using an object-array shouldn't matter either
        fill_val = np.ndarray(shape=(1,***REMOVED***, dtype=object***REMOVED***
        fill_val[0***REMOVED*** = (-999, -12345678.9, asbytes("???"***REMOVED******REMOVED***
        fval = _check_fill_value(fill_val, object***REMOVED***
        self.assertTrue(isinstance(fval, ndarray***REMOVED******REMOVED***
        assert_equal(fval.item(***REMOVED***, [-999, -12345678.9, asbytes("???"***REMOVED******REMOVED******REMOVED***
        # NOTE: This test was never run properly as "fill_value" rather than
        # "fill_val" was assigned.  Written properly, it fails.
        #fill_val = np.array((-999, -12345678.9, "???"***REMOVED******REMOVED***
        #fval = _check_fill_value(fill_val, ndtype***REMOVED***
        #self.assertTrue(isinstance(fval, ndarray***REMOVED******REMOVED***
        #assert_equal(fval.item(***REMOVED***, [-999, -12345678.9, asbytes("???"***REMOVED******REMOVED******REMOVED***
        #.....One-field-only flexible type should work as well
        ndtype = [("a", int***REMOVED******REMOVED***
        fval = _check_fill_value(-999999999, ndtype***REMOVED***
        self.assertTrue(isinstance(fval, ndarray***REMOVED******REMOVED***
        assert_equal(fval.item(***REMOVED***, (-999999999,***REMOVED******REMOVED***

    def test_fillvalue_conversion(self***REMOVED***:
        # Tests the behavior of fill_value during conversion
        # We had a tailored comment to make sure special attributes are
        # properly dealt with
        a = array(asbytes_nested(['3', '4', '5'***REMOVED******REMOVED******REMOVED***
        a._optinfo.update({'comment':"updated!"***REMOVED******REMOVED***

        b = array(a, dtype=int***REMOVED***
        assert_equal(b._data, [3, 4, 5***REMOVED******REMOVED***
        assert_equal(b.fill_value, default_fill_value(0***REMOVED******REMOVED***

        b = array(a, dtype=float***REMOVED***
        assert_equal(b._data, [3, 4, 5***REMOVED******REMOVED***
        assert_equal(b.fill_value, default_fill_value(0.***REMOVED******REMOVED***

        b = a.astype(int***REMOVED***
        assert_equal(b._data, [3, 4, 5***REMOVED******REMOVED***
        assert_equal(b.fill_value, default_fill_value(0***REMOVED******REMOVED***
        assert_equal(b._optinfo['comment'***REMOVED***, "updated!"***REMOVED***

        b = a.astype([('a', '|S3'***REMOVED******REMOVED******REMOVED***
        assert_equal(b['a'***REMOVED***._data, a._data***REMOVED***
        assert_equal(b['a'***REMOVED***.fill_value, a.fill_value***REMOVED***

    def test_fillvalue(self***REMOVED***:
        # Yet more fun with the fill_value
        data = masked_array([1, 2, 3***REMOVED***, fill_value=-999***REMOVED***
        series = data[[0, 2, 1***REMOVED******REMOVED***
        assert_equal(series._fill_value, data._fill_value***REMOVED***

        mtype = [('f', float***REMOVED***, ('s', '|S3'***REMOVED******REMOVED***
        x = array([(1, 'a'***REMOVED***, (2, 'b'***REMOVED***, (pi, 'pi'***REMOVED******REMOVED***, dtype=mtype***REMOVED***
        x.fill_value = 999
        assert_equal(x.fill_value.item(***REMOVED***, [999., asbytes('999'***REMOVED******REMOVED******REMOVED***
        assert_equal(x['f'***REMOVED***.fill_value, 999***REMOVED***
        assert_equal(x['s'***REMOVED***.fill_value, asbytes('999'***REMOVED******REMOVED***

        x.fill_value = (9, '???'***REMOVED***
        assert_equal(x.fill_value.item(***REMOVED***, (9, asbytes('???'***REMOVED******REMOVED******REMOVED***
        assert_equal(x['f'***REMOVED***.fill_value, 9***REMOVED***
        assert_equal(x['s'***REMOVED***.fill_value, asbytes('???'***REMOVED******REMOVED***

        x = array([1, 2, 3.1***REMOVED******REMOVED***
        x.fill_value = 999
        assert_equal(np.asarray(x.fill_value***REMOVED***.dtype, float***REMOVED***
        assert_equal(x.fill_value, 999.***REMOVED***
        assert_equal(x._fill_value, np.array(999.***REMOVED******REMOVED***

    def test_fillvalue_exotic_dtype(self***REMOVED***:
        # Tests yet more exotic flexible dtypes
        _check_fill_value = np.ma.core._check_fill_value
        ndtype = [('i', int***REMOVED***, ('s', '|S8'***REMOVED***, ('f', float***REMOVED******REMOVED***
        control = np.array((default_fill_value(0***REMOVED***,
                            default_fill_value('0'***REMOVED***,
                            default_fill_value(0.***REMOVED***,***REMOVED***,
                           dtype=ndtype***REMOVED***
        assert_equal(_check_fill_value(None, ndtype***REMOVED***, control***REMOVED***
        # The shape shouldn't matter
        ndtype = [('f0', float, (2, 2***REMOVED******REMOVED******REMOVED***
        control = np.array((default_fill_value(0.***REMOVED***,***REMOVED***,
                           dtype=[('f0', float***REMOVED******REMOVED******REMOVED***.astype(ndtype***REMOVED***
        assert_equal(_check_fill_value(None, ndtype***REMOVED***, control***REMOVED***
        control = np.array((0,***REMOVED***, dtype=[('f0', float***REMOVED******REMOVED******REMOVED***.astype(ndtype***REMOVED***
        assert_equal(_check_fill_value(0, ndtype***REMOVED***, control***REMOVED***

        ndtype = np.dtype("int, (2,3***REMOVED***float, float"***REMOVED***
        control = np.array((default_fill_value(0***REMOVED***,
                            default_fill_value(0.***REMOVED***,
                            default_fill_value(0.***REMOVED***,***REMOVED***,
                           dtype="int, float, float"***REMOVED***.astype(ndtype***REMOVED***
        test = _check_fill_value(None, ndtype***REMOVED***
        assert_equal(test, control***REMOVED***
        control = np.array((0, 0, 0***REMOVED***, dtype="int, float, float"***REMOVED***.astype(ndtype***REMOVED***
        assert_equal(_check_fill_value(0, ndtype***REMOVED***, control***REMOVED***
        # but when indexing, fill value should become scalar not tuple
        # See issue #6723
        M = masked_array(control***REMOVED***
        assert_equal(M["f1"***REMOVED***.fill_value.ndim, 0***REMOVED***

    def test_fillvalue_datetime_timedelta(self***REMOVED***:
        # Test default fillvalue for datetime64 and timedelta64 types.
        # See issue #4476, this would return '?' which would cause errors
        # elsewhere

        for timecode in ("as", "fs", "ps", "ns", "us", "ms", "s", "m",
                         "h", "D", "W", "M", "Y"***REMOVED***:
            control = numpy.datetime64("NaT", timecode***REMOVED***
            test = default_fill_value(numpy.dtype("<M8[" + timecode + "***REMOVED***"***REMOVED******REMOVED***
            assert_equal(test, control***REMOVED***

            control = numpy.timedelta64("NaT", timecode***REMOVED***
            test = default_fill_value(numpy.dtype("<m8[" + timecode + "***REMOVED***"***REMOVED******REMOVED***
            assert_equal(test, control***REMOVED***

    def test_extremum_fill_value(self***REMOVED***:
        # Tests extremum fill values for flexible type.
        a = array([(1, (2, 3***REMOVED******REMOVED***, (4, (5, 6***REMOVED******REMOVED******REMOVED***,
                  dtype=[('A', int***REMOVED***, ('B', [('BA', int***REMOVED***, ('BB', int***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        test = a.fill_value
        assert_equal(test['A'***REMOVED***, default_fill_value(a['A'***REMOVED******REMOVED******REMOVED***
        assert_equal(test['B'***REMOVED***['BA'***REMOVED***, default_fill_value(a['B'***REMOVED***['BA'***REMOVED******REMOVED******REMOVED***
        assert_equal(test['B'***REMOVED***['BB'***REMOVED***, default_fill_value(a['B'***REMOVED***['BB'***REMOVED******REMOVED******REMOVED***

        test = minimum_fill_value(a***REMOVED***
        assert_equal(test[0***REMOVED***, minimum_fill_value(a['A'***REMOVED******REMOVED******REMOVED***
        assert_equal(test[1***REMOVED***[0***REMOVED***, minimum_fill_value(a['B'***REMOVED***['BA'***REMOVED******REMOVED******REMOVED***
        assert_equal(test[1***REMOVED***[1***REMOVED***, minimum_fill_value(a['B'***REMOVED***['BB'***REMOVED******REMOVED******REMOVED***
        assert_equal(test[1***REMOVED***, minimum_fill_value(a['B'***REMOVED******REMOVED******REMOVED***

        test = maximum_fill_value(a***REMOVED***
        assert_equal(test[0***REMOVED***, maximum_fill_value(a['A'***REMOVED******REMOVED******REMOVED***
        assert_equal(test[1***REMOVED***[0***REMOVED***, maximum_fill_value(a['B'***REMOVED***['BA'***REMOVED******REMOVED******REMOVED***
        assert_equal(test[1***REMOVED***[1***REMOVED***, maximum_fill_value(a['B'***REMOVED***['BB'***REMOVED******REMOVED******REMOVED***
        assert_equal(test[1***REMOVED***, maximum_fill_value(a['B'***REMOVED******REMOVED******REMOVED***

    def test_fillvalue_individual_fields(self***REMOVED***:
        # Test setting fill_value on individual fields
        ndtype = [('a', int***REMOVED***, ('b', int***REMOVED******REMOVED***
        # Explicit fill_value
        a = array(list(zip([1, 2, 3***REMOVED***, [4, 5, 6***REMOVED******REMOVED******REMOVED***,
                  fill_value=(-999, -999***REMOVED***, dtype=ndtype***REMOVED***
        aa = a['a'***REMOVED***
        aa.set_fill_value(10***REMOVED***
        assert_equal(aa._fill_value, np.array(10***REMOVED******REMOVED***
        assert_equal(tuple(a.fill_value***REMOVED***, (10, -999***REMOVED******REMOVED***
        a.fill_value['b'***REMOVED*** = -10
        assert_equal(tuple(a.fill_value***REMOVED***, (10, -10***REMOVED******REMOVED***
        # Implicit fill_value
        t = array(list(zip([1, 2, 3***REMOVED***, [4, 5, 6***REMOVED******REMOVED******REMOVED***, dtype=ndtype***REMOVED***
        tt = t['a'***REMOVED***
        tt.set_fill_value(10***REMOVED***
        assert_equal(tt._fill_value, np.array(10***REMOVED******REMOVED***
        assert_equal(tuple(t.fill_value***REMOVED***, (10, default_fill_value(0***REMOVED******REMOVED******REMOVED***

    def test_fillvalue_implicit_structured_array(self***REMOVED***:
        # Check that fill_value is always defined for structured arrays
        ndtype = ('b', float***REMOVED***
        adtype = ('a', float***REMOVED***
        a = array([(1.,***REMOVED***, (2.,***REMOVED******REMOVED***, mask=[(False,***REMOVED***, (False,***REMOVED******REMOVED***,
                  fill_value=(np.nan,***REMOVED***, dtype=np.dtype([adtype***REMOVED******REMOVED******REMOVED***
        b = empty(a.shape, dtype=[adtype, ndtype***REMOVED******REMOVED***
        b['a'***REMOVED*** = a['a'***REMOVED***
        b['a'***REMOVED***.set_fill_value(a['a'***REMOVED***.fill_value***REMOVED***
        f = b._fill_value[(***REMOVED******REMOVED***
        assert_(np.isnan(f[0***REMOVED******REMOVED******REMOVED***
        assert_equal(f[-1***REMOVED***, default_fill_value(1.***REMOVED******REMOVED***

    def test_fillvalue_as_arguments(self***REMOVED***:
        # Test adding a fill_value parameter to empty/ones/zeros
        a = empty(3, fill_value=999.***REMOVED***
        assert_equal(a.fill_value, 999.***REMOVED***

        a = ones(3, fill_value=999., dtype=float***REMOVED***
        assert_equal(a.fill_value, 999.***REMOVED***

        a = zeros(3, fill_value=0., dtype=complex***REMOVED***
        assert_equal(a.fill_value, 0.***REMOVED***

        a = identity(3, fill_value=0., dtype=complex***REMOVED***
        assert_equal(a.fill_value, 0.***REMOVED***

    def test_shape_argument(self***REMOVED***:
        # Test that shape can be provides as an argument
        # GH issue 6106
        a = empty(shape=(3, ***REMOVED******REMOVED***
        assert_equal(a.shape, (3, ***REMOVED******REMOVED***

        a = ones(shape=(3, ***REMOVED***, dtype=float***REMOVED***
        assert_equal(a.shape, (3, ***REMOVED******REMOVED***

        a = zeros(shape=(3, ***REMOVED***, dtype=complex***REMOVED***
        assert_equal(a.shape, (3, ***REMOVED******REMOVED***

    def test_fillvalue_in_view(self***REMOVED***:
        # Test the behavior of fill_value in view

        # Create initial masked array
        x = array([1, 2, 3***REMOVED***, fill_value=1, dtype=np.int64***REMOVED***

        # Check that fill_value is preserved by default
        y = x.view(***REMOVED***
        assert_(y.fill_value == 1***REMOVED***

        # Check that fill_value is preserved if dtype is specified and the
        # dtype is an ndarray sub-class and has a _fill_value attribute
        y = x.view(MaskedArray***REMOVED***
        assert_(y.fill_value == 1***REMOVED***

        # Check that fill_value is preserved if type is specified and the
        # dtype is an ndarray sub-class and has a _fill_value attribute (by
        # default, the first argument is dtype, not type***REMOVED***
        y = x.view(type=MaskedArray***REMOVED***
        assert_(y.fill_value == 1***REMOVED***

        # Check that code does not crash if passed an ndarray sub-class that
        # does not have a _fill_value attribute
        y = x.view(np.ndarray***REMOVED***
        y = x.view(type=np.ndarray***REMOVED***

        # Check that fill_value can be overriden with view
        y = x.view(MaskedArray, fill_value=2***REMOVED***
        assert_(y.fill_value == 2***REMOVED***

        # Check that fill_value can be overriden with view (using type=***REMOVED***
        y = x.view(type=MaskedArray, fill_value=2***REMOVED***
        assert_(y.fill_value == 2***REMOVED***

        # Check that fill_value gets reset if passed a dtype but not a
        # fill_value. This is because even though in some cases one can safely
        # cast the fill_value, e.g. if taking an int64 view of an int32 array,
        # in other cases, this cannot be done (e.g. int32 view of an int64
        # array with a large fill_value***REMOVED***.
        y = x.view(dtype=np.int32***REMOVED***
        assert_(y.fill_value == 999999***REMOVED***


class TestUfuncs(TestCase***REMOVED***:
    # Test class for the application of ufuncs on MaskedArrays.

    def setUp(self***REMOVED***:
        # Base data definition.
        self.d = (array([1.0, 0, -1, pi / 2***REMOVED*** * 2, mask=[0, 1***REMOVED*** + [0***REMOVED*** * 6***REMOVED***,
                  array([1.0, 0, -1, pi / 2***REMOVED*** * 2, mask=[1, 0***REMOVED*** + [0***REMOVED*** * 6***REMOVED***,***REMOVED***
        self.err_status = np.geterr(***REMOVED***
        np.seterr(divide='ignore', invalid='ignore'***REMOVED***

    def tearDown(self***REMOVED***:
        np.seterr(**self.err_status***REMOVED***

    def test_testUfuncRegression(self***REMOVED***:
        # Tests new ufuncs on MaskedArrays.
        for f in ['sqrt', 'log', 'log10', 'exp', 'conjugate',
                  'sin', 'cos', 'tan',
                  'arcsin', 'arccos', 'arctan',
                  'sinh', 'cosh', 'tanh',
                  'arcsinh',
                  'arccosh',
                  'arctanh',
                  'absolute', 'fabs', 'negative',
                  'floor', 'ceil',
                  'logical_not',
                  'add', 'subtract', 'multiply',
                  'divide', 'true_divide', 'floor_divide',
                  'remainder', 'fmod', 'hypot', 'arctan2',
                  'equal', 'not_equal', 'less_equal', 'greater_equal',
                  'less', 'greater',
                  'logical_and', 'logical_or', 'logical_xor',
                  ***REMOVED***:
            ***REMOVED***
                uf = getattr(umath, f***REMOVED***
            except AttributeError:
                uf = getattr(fromnumeric, f***REMOVED***
            mf = getattr(numpy.ma.core, f***REMOVED***
            args = self.d[:uf.nin***REMOVED***
            ur = uf(*args***REMOVED***
            mr = mf(*args***REMOVED***
            assert_equal(ur.filled(0***REMOVED***, mr.filled(0***REMOVED***, f***REMOVED***
            assert_mask_equal(ur.mask, mr.mask, err_msg=f***REMOVED***

    def test_reduce(self***REMOVED***:
        # Tests reduce on MaskedArrays.
        a = self.d[0***REMOVED***
        self.assertTrue(not alltrue(a, axis=0***REMOVED******REMOVED***
        self.assertTrue(sometrue(a, axis=0***REMOVED******REMOVED***
        assert_equal(sum(a[:3***REMOVED***, axis=0***REMOVED***, 0***REMOVED***
        assert_equal(product(a, axis=0***REMOVED***, 0***REMOVED***
        assert_equal(add.reduce(a***REMOVED***, pi***REMOVED***

    def test_minmax(self***REMOVED***:
        # Tests extrema on MaskedArrays.
        a = arange(1, 13***REMOVED***.reshape(3, 4***REMOVED***
        amask = masked_where(a < 5, a***REMOVED***
        assert_equal(amask.max(***REMOVED***, a.max(***REMOVED******REMOVED***
        assert_equal(amask.min(***REMOVED***, 5***REMOVED***
        assert_equal(amask.max(0***REMOVED***, a.max(0***REMOVED******REMOVED***
        assert_equal(amask.min(0***REMOVED***, [5, 6, 7, 8***REMOVED******REMOVED***
        self.assertTrue(amask.max(1***REMOVED***[0***REMOVED***.mask***REMOVED***
        self.assertTrue(amask.min(1***REMOVED***[0***REMOVED***.mask***REMOVED***

    def test_ndarray_mask(self***REMOVED***:
        # Check that the mask of the result is a ndarray (not a MaskedArray...***REMOVED***
        a = masked_array([-1, 0, 1, 2, 3***REMOVED***, mask=[0, 0, 0, 0, 1***REMOVED******REMOVED***
        test = np.sqrt(a***REMOVED***
        control = masked_array([-1, 0, 1, np.sqrt(2***REMOVED***, -1***REMOVED***,
                               mask=[1, 0, 0, 0, 1***REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        assert_equal(test.mask, control.mask***REMOVED***
        self.assertTrue(not isinstance(test.mask, MaskedArray***REMOVED******REMOVED***

    def test_treatment_of_NotImplemented(self***REMOVED***:
        # Check that NotImplemented is returned at appropriate places

        a = masked_array([1., 2.***REMOVED***, mask=[1, 0***REMOVED******REMOVED***
        self.assertRaises(TypeError, operator.mul, a, "abc"***REMOVED***
        self.assertRaises(TypeError, operator.truediv, a, "abc"***REMOVED***

        class MyClass(object***REMOVED***:
            __array_priority__ = a.__array_priority__ + 1

            def __mul__(self, other***REMOVED***:
                return "My mul"

            def __rmul__(self, other***REMOVED***:
                return "My rmul"

        me = MyClass(***REMOVED***
        assert_(me * a == "My mul"***REMOVED***
        assert_(a * me == "My rmul"***REMOVED***

        # and that __array_priority__ is respected
        class MyClass2(object***REMOVED***:
            __array_priority__ = 100

            def __mul__(self, other***REMOVED***:
                return "Me2mul"

            def __rmul__(self, other***REMOVED***:
                return "Me2rmul"

            def __rdiv__(self, other***REMOVED***:
                return "Me2rdiv"

            __rtruediv__ = __rdiv__

        me_too = MyClass2(***REMOVED***
        assert_(a.__mul__(me_too***REMOVED*** is NotImplemented***REMOVED***
        assert_(all(multiply.outer(a, me_too***REMOVED*** == "Me2rmul"***REMOVED******REMOVED***
        assert_(a.__truediv__(me_too***REMOVED*** is NotImplemented***REMOVED***
        assert_(me_too * a == "Me2mul"***REMOVED***
        assert_(a * me_too == "Me2rmul"***REMOVED***
        assert_(a / me_too == "Me2rdiv"***REMOVED***


class TestMaskedArrayInPlaceArithmetics(TestCase***REMOVED***:
    # Test MaskedArray Arithmetics

    def setUp(self***REMOVED***:
        x = arange(10***REMOVED***
        y = arange(10***REMOVED***
        xm = arange(10***REMOVED***
        xm[2***REMOVED*** = masked
        self.intdata = (x, y, xm***REMOVED***
        self.floatdata = (x.astype(float***REMOVED***, y.astype(float***REMOVED***, xm.astype(float***REMOVED******REMOVED***
        self.othertypes = np.typecodes['AllInteger'***REMOVED*** + np.typecodes['AllFloat'***REMOVED***
        self.othertypes = [np.dtype(_***REMOVED***.type for _ in self.othertypes***REMOVED***
        self.uint8data = (
            x.astype(np.uint8***REMOVED***,
            y.astype(np.uint8***REMOVED***,
            xm.astype(np.uint8***REMOVED***
        ***REMOVED***

    def test_inplace_addition_scalar(self***REMOVED***:
        # Test of inplace additions
        (x, y, xm***REMOVED*** = self.intdata
        xm[2***REMOVED*** = masked
        x += 1
        assert_equal(x, y + 1***REMOVED***
        xm += 1
        assert_equal(xm, y + 1***REMOVED***

        (x, _, xm***REMOVED*** = self.floatdata
        id1 = x.data.ctypes._data
        x += 1.
        assert_(id1 == x.data.ctypes._data***REMOVED***
        assert_equal(x, y + 1.***REMOVED***

    def test_inplace_addition_array(self***REMOVED***:
        # Test of inplace additions
        (x, y, xm***REMOVED*** = self.intdata
        m = xm.mask
        a = arange(10, dtype=np.int16***REMOVED***
        a[-1***REMOVED*** = masked
        x += a
        xm += a
        assert_equal(x, y + a***REMOVED***
        assert_equal(xm, y + a***REMOVED***
        assert_equal(xm.mask, mask_or(m, a.mask***REMOVED******REMOVED***

    def test_inplace_subtraction_scalar(self***REMOVED***:
        # Test of inplace subtractions
        (x, y, xm***REMOVED*** = self.intdata
        x -= 1
        assert_equal(x, y - 1***REMOVED***
        xm -= 1
        assert_equal(xm, y - 1***REMOVED***

    def test_inplace_subtraction_array(self***REMOVED***:
        # Test of inplace subtractions
        (x, y, xm***REMOVED*** = self.floatdata
        m = xm.mask
        a = arange(10, dtype=float***REMOVED***
        a[-1***REMOVED*** = masked
        x -= a
        xm -= a
        assert_equal(x, y - a***REMOVED***
        assert_equal(xm, y - a***REMOVED***
        assert_equal(xm.mask, mask_or(m, a.mask***REMOVED******REMOVED***

    def test_inplace_multiplication_scalar(self***REMOVED***:
        # Test of inplace multiplication
        (x, y, xm***REMOVED*** = self.floatdata
        x *= 2.0
        assert_equal(x, y * 2***REMOVED***
        xm *= 2.0
        assert_equal(xm, y * 2***REMOVED***

    def test_inplace_multiplication_array(self***REMOVED***:
        # Test of inplace multiplication
        (x, y, xm***REMOVED*** = self.floatdata
        m = xm.mask
        a = arange(10, dtype=float***REMOVED***
        a[-1***REMOVED*** = masked
        x *= a
        xm *= a
        assert_equal(x, y * a***REMOVED***
        assert_equal(xm, y * a***REMOVED***
        assert_equal(xm.mask, mask_or(m, a.mask***REMOVED******REMOVED***

    def test_inplace_division_scalar_int(self***REMOVED***:
        # Test of inplace division
        (x, y, xm***REMOVED*** = self.intdata
        x = arange(10***REMOVED*** * 2
        xm = arange(10***REMOVED*** * 2
        xm[2***REMOVED*** = masked
        x //= 2
        assert_equal(x, y***REMOVED***
        xm //= 2
        assert_equal(xm, y***REMOVED***

    def test_inplace_division_scalar_float(self***REMOVED***:
        # Test of inplace division
        (x, y, xm***REMOVED*** = self.floatdata
        x /= 2.0
        assert_equal(x, y / 2.0***REMOVED***
        xm /= arange(10***REMOVED***
        assert_equal(xm, ones((10,***REMOVED******REMOVED******REMOVED***

    def test_inplace_division_array_float(self***REMOVED***:
        # Test of inplace division
        (x, y, xm***REMOVED*** = self.floatdata
        m = xm.mask
        a = arange(10, dtype=float***REMOVED***
        a[-1***REMOVED*** = masked
        x /= a
        xm /= a
        assert_equal(x, y / a***REMOVED***
        assert_equal(xm, y / a***REMOVED***
        assert_equal(xm.mask, mask_or(mask_or(m, a.mask***REMOVED***, (a == 0***REMOVED******REMOVED******REMOVED***

    def test_inplace_division_misc(self***REMOVED***:

        x = [1., 1., 1., -2., pi / 2., 4., 5., -10., 10., 1., 2., 3.***REMOVED***
        y = [5., 0., 3., 2., -1., -4., 0., -10., 10., 1., 0., 3.***REMOVED***
        m1 = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0***REMOVED***
        m2 = [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1***REMOVED***
        xm = masked_array(x, mask=m1***REMOVED***
        ym = masked_array(y, mask=m2***REMOVED***

        z = xm / ym
        assert_equal(z._mask, [1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1***REMOVED******REMOVED***
        assert_equal(z._data,
                     [1., 1., 1., -1., -pi / 2., 4., 5., 1., 1., 1., 2., 3.***REMOVED******REMOVED***

        xm = xm.copy(***REMOVED***
        xm /= ym
        assert_equal(xm._mask, [1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1***REMOVED******REMOVED***
        assert_equal(z._data,
                     [1., 1., 1., -1., -pi / 2., 4., 5., 1., 1., 1., 2., 3.***REMOVED******REMOVED***

    def test_datafriendly_add(self***REMOVED***:
        # Test keeping data w/ (inplace***REMOVED*** addition
        x = array([1, 2, 3***REMOVED***, mask=[0, 0, 1***REMOVED******REMOVED***
        # Test add w/ scalar
        xx = x + 1
        assert_equal(xx.data, [2, 3, 3***REMOVED******REMOVED***
        assert_equal(xx.mask, [0, 0, 1***REMOVED******REMOVED***
        # Test iadd w/ scalar
        x += 1
        assert_equal(x.data, [2, 3, 3***REMOVED******REMOVED***
        assert_equal(x.mask, [0, 0, 1***REMOVED******REMOVED***
        # Test add w/ array
        x = array([1, 2, 3***REMOVED***, mask=[0, 0, 1***REMOVED******REMOVED***
        xx = x + array([1, 2, 3***REMOVED***, mask=[1, 0, 0***REMOVED******REMOVED***
        assert_equal(xx.data, [1, 4, 3***REMOVED******REMOVED***
        assert_equal(xx.mask, [1, 0, 1***REMOVED******REMOVED***
        # Test iadd w/ array
        x = array([1, 2, 3***REMOVED***, mask=[0, 0, 1***REMOVED******REMOVED***
        x += array([1, 2, 3***REMOVED***, mask=[1, 0, 0***REMOVED******REMOVED***
        assert_equal(x.data, [1, 4, 3***REMOVED******REMOVED***
        assert_equal(x.mask, [1, 0, 1***REMOVED******REMOVED***

    def test_datafriendly_sub(self***REMOVED***:
        # Test keeping data w/ (inplace***REMOVED*** subtraction
        # Test sub w/ scalar
        x = array([1, 2, 3***REMOVED***, mask=[0, 0, 1***REMOVED******REMOVED***
        xx = x - 1
        assert_equal(xx.data, [0, 1, 3***REMOVED******REMOVED***
        assert_equal(xx.mask, [0, 0, 1***REMOVED******REMOVED***
        # Test isub w/ scalar
        x = array([1, 2, 3***REMOVED***, mask=[0, 0, 1***REMOVED******REMOVED***
        x -= 1
        assert_equal(x.data, [0, 1, 3***REMOVED******REMOVED***
        assert_equal(x.mask, [0, 0, 1***REMOVED******REMOVED***
        # Test sub w/ array
        x = array([1, 2, 3***REMOVED***, mask=[0, 0, 1***REMOVED******REMOVED***
        xx = x - array([1, 2, 3***REMOVED***, mask=[1, 0, 0***REMOVED******REMOVED***
        assert_equal(xx.data, [1, 0, 3***REMOVED******REMOVED***
        assert_equal(xx.mask, [1, 0, 1***REMOVED******REMOVED***
        # Test isub w/ array
        x = array([1, 2, 3***REMOVED***, mask=[0, 0, 1***REMOVED******REMOVED***
        x -= array([1, 2, 3***REMOVED***, mask=[1, 0, 0***REMOVED******REMOVED***
        assert_equal(x.data, [1, 0, 3***REMOVED******REMOVED***
        assert_equal(x.mask, [1, 0, 1***REMOVED******REMOVED***

    def test_datafriendly_mul(self***REMOVED***:
        # Test keeping data w/ (inplace***REMOVED*** multiplication
        # Test mul w/ scalar
        x = array([1, 2, 3***REMOVED***, mask=[0, 0, 1***REMOVED******REMOVED***
        xx = x * 2
        assert_equal(xx.data, [2, 4, 3***REMOVED******REMOVED***
        assert_equal(xx.mask, [0, 0, 1***REMOVED******REMOVED***
        # Test imul w/ scalar
        x = array([1, 2, 3***REMOVED***, mask=[0, 0, 1***REMOVED******REMOVED***
        x *= 2
        assert_equal(x.data, [2, 4, 3***REMOVED******REMOVED***
        assert_equal(x.mask, [0, 0, 1***REMOVED******REMOVED***
        # Test mul w/ array
        x = array([1, 2, 3***REMOVED***, mask=[0, 0, 1***REMOVED******REMOVED***
        xx = x * array([10, 20, 30***REMOVED***, mask=[1, 0, 0***REMOVED******REMOVED***
        assert_equal(xx.data, [1, 40, 3***REMOVED******REMOVED***
        assert_equal(xx.mask, [1, 0, 1***REMOVED******REMOVED***
        # Test imul w/ array
        x = array([1, 2, 3***REMOVED***, mask=[0, 0, 1***REMOVED******REMOVED***
        x *= array([10, 20, 30***REMOVED***, mask=[1, 0, 0***REMOVED******REMOVED***
        assert_equal(x.data, [1, 40, 3***REMOVED******REMOVED***
        assert_equal(x.mask, [1, 0, 1***REMOVED******REMOVED***

    def test_datafriendly_div(self***REMOVED***:
        # Test keeping data w/ (inplace***REMOVED*** division
        # Test div on scalar
        x = array([1, 2, 3***REMOVED***, mask=[0, 0, 1***REMOVED******REMOVED***
        xx = x / 2.
        assert_equal(xx.data, [1 / 2., 2 / 2., 3***REMOVED******REMOVED***
        assert_equal(xx.mask, [0, 0, 1***REMOVED******REMOVED***
        # Test idiv on scalar
        x = array([1., 2., 3.***REMOVED***, mask=[0, 0, 1***REMOVED******REMOVED***
        x /= 2.
        assert_equal(x.data, [1 / 2., 2 / 2., 3***REMOVED******REMOVED***
        assert_equal(x.mask, [0, 0, 1***REMOVED******REMOVED***
        # Test div on array
        x = array([1., 2., 3.***REMOVED***, mask=[0, 0, 1***REMOVED******REMOVED***
        xx = x / array([10., 20., 30.***REMOVED***, mask=[1, 0, 0***REMOVED******REMOVED***
        assert_equal(xx.data, [1., 2. / 20., 3.***REMOVED******REMOVED***
        assert_equal(xx.mask, [1, 0, 1***REMOVED******REMOVED***
        # Test idiv on array
        x = array([1., 2., 3.***REMOVED***, mask=[0, 0, 1***REMOVED******REMOVED***
        x /= array([10., 20., 30.***REMOVED***, mask=[1, 0, 0***REMOVED******REMOVED***
        assert_equal(x.data, [1., 2 / 20., 3.***REMOVED******REMOVED***
        assert_equal(x.mask, [1, 0, 1***REMOVED******REMOVED***

    def test_datafriendly_pow(self***REMOVED***:
        # Test keeping data w/ (inplace***REMOVED*** power
        # Test pow on scalar
        x = array([1., 2., 3.***REMOVED***, mask=[0, 0, 1***REMOVED******REMOVED***
        xx = x ** 2.5
        assert_equal(xx.data, [1., 2. ** 2.5, 3.***REMOVED******REMOVED***
        assert_equal(xx.mask, [0, 0, 1***REMOVED******REMOVED***
        # Test ipow on scalar
        x **= 2.5
        assert_equal(x.data, [1., 2. ** 2.5, 3***REMOVED******REMOVED***
        assert_equal(x.mask, [0, 0, 1***REMOVED******REMOVED***

    def test_datafriendly_add_arrays(self***REMOVED***:
        a = array([[1, 1***REMOVED***, [3, 3***REMOVED******REMOVED******REMOVED***
        b = array([1, 1***REMOVED***, mask=[0, 0***REMOVED******REMOVED***
        a += b
        assert_equal(a, [[2, 2***REMOVED***, [4, 4***REMOVED******REMOVED******REMOVED***
        if a.mask is not nomask:
            assert_equal(a.mask, [[0, 0***REMOVED***, [0, 0***REMOVED******REMOVED******REMOVED***

        a = array([[1, 1***REMOVED***, [3, 3***REMOVED******REMOVED******REMOVED***
        b = array([1, 1***REMOVED***, mask=[0, 1***REMOVED******REMOVED***
        a += b
        assert_equal(a, [[2, 2***REMOVED***, [4, 4***REMOVED******REMOVED******REMOVED***
        assert_equal(a.mask, [[0, 1***REMOVED***, [0, 1***REMOVED******REMOVED******REMOVED***

    def test_datafriendly_sub_arrays(self***REMOVED***:
        a = array([[1, 1***REMOVED***, [3, 3***REMOVED******REMOVED******REMOVED***
        b = array([1, 1***REMOVED***, mask=[0, 0***REMOVED******REMOVED***
        a -= b
        assert_equal(a, [[0, 0***REMOVED***, [2, 2***REMOVED******REMOVED******REMOVED***
        if a.mask is not nomask:
            assert_equal(a.mask, [[0, 0***REMOVED***, [0, 0***REMOVED******REMOVED******REMOVED***

        a = array([[1, 1***REMOVED***, [3, 3***REMOVED******REMOVED******REMOVED***
        b = array([1, 1***REMOVED***, mask=[0, 1***REMOVED******REMOVED***
        a -= b
        assert_equal(a, [[0, 0***REMOVED***, [2, 2***REMOVED******REMOVED******REMOVED***
        assert_equal(a.mask, [[0, 1***REMOVED***, [0, 1***REMOVED******REMOVED******REMOVED***

    def test_datafriendly_mul_arrays(self***REMOVED***:
        a = array([[1, 1***REMOVED***, [3, 3***REMOVED******REMOVED******REMOVED***
        b = array([1, 1***REMOVED***, mask=[0, 0***REMOVED******REMOVED***
        a *= b
        assert_equal(a, [[1, 1***REMOVED***, [3, 3***REMOVED******REMOVED******REMOVED***
        if a.mask is not nomask:
            assert_equal(a.mask, [[0, 0***REMOVED***, [0, 0***REMOVED******REMOVED******REMOVED***

        a = array([[1, 1***REMOVED***, [3, 3***REMOVED******REMOVED******REMOVED***
        b = array([1, 1***REMOVED***, mask=[0, 1***REMOVED******REMOVED***
        a *= b
        assert_equal(a, [[1, 1***REMOVED***, [3, 3***REMOVED******REMOVED******REMOVED***
        assert_equal(a.mask, [[0, 1***REMOVED***, [0, 1***REMOVED******REMOVED******REMOVED***

    def test_inplace_addition_scalar_type(self***REMOVED***:
        # Test of inplace additions
        for t in self.othertypes:
            with warnings.catch_warnings(record=True***REMOVED*** as w:
                warnings.filterwarnings("always"***REMOVED***
                (x, y, xm***REMOVED*** = (_.astype(t***REMOVED*** for _ in self.uint8data***REMOVED***
                xm[2***REMOVED*** = masked
                x += t(1***REMOVED***
                assert_equal(x, y + t(1***REMOVED******REMOVED***
                xm += t(1***REMOVED***
                assert_equal(xm, y + t(1***REMOVED******REMOVED***

                assert_equal(len(w***REMOVED***, 0, "Failed on type=%s." % t***REMOVED***

    def test_inplace_addition_array_type(self***REMOVED***:
        # Test of inplace additions
        for t in self.othertypes:
            with warnings.catch_warnings(record=True***REMOVED*** as w:
                warnings.filterwarnings("always"***REMOVED***
                (x, y, xm***REMOVED*** = (_.astype(t***REMOVED*** for _ in self.uint8data***REMOVED***
                m = xm.mask
                a = arange(10, dtype=t***REMOVED***
                a[-1***REMOVED*** = masked
                x += a
                xm += a
                assert_equal(x, y + a***REMOVED***
                assert_equal(xm, y + a***REMOVED***
                assert_equal(xm.mask, mask_or(m, a.mask***REMOVED******REMOVED***

                assert_equal(len(w***REMOVED***, 0, "Failed on type=%s." % t***REMOVED***

    def test_inplace_subtraction_scalar_type(self***REMOVED***:
        # Test of inplace subtractions
        for t in self.othertypes:
            with warnings.catch_warnings(record=True***REMOVED*** as w:
                warnings.filterwarnings("always"***REMOVED***
                (x, y, xm***REMOVED*** = (_.astype(t***REMOVED*** for _ in self.uint8data***REMOVED***
                x -= t(1***REMOVED***
                assert_equal(x, y - t(1***REMOVED******REMOVED***
                xm -= t(1***REMOVED***
                assert_equal(xm, y - t(1***REMOVED******REMOVED***

                assert_equal(len(w***REMOVED***, 0, "Failed on type=%s." % t***REMOVED***

    def test_inplace_subtraction_array_type(self***REMOVED***:
        # Test of inplace subtractions
        for t in self.othertypes:
            with warnings.catch_warnings(record=True***REMOVED*** as w:
                warnings.filterwarnings("always"***REMOVED***
                (x, y, xm***REMOVED*** = (_.astype(t***REMOVED*** for _ in self.uint8data***REMOVED***
                m = xm.mask
                a = arange(10, dtype=t***REMOVED***
                a[-1***REMOVED*** = masked
                x -= a
                xm -= a
                assert_equal(x, y - a***REMOVED***
                assert_equal(xm, y - a***REMOVED***
                assert_equal(xm.mask, mask_or(m, a.mask***REMOVED******REMOVED***

                assert_equal(len(w***REMOVED***, 0, "Failed on type=%s." % t***REMOVED***

    def test_inplace_multiplication_scalar_type(self***REMOVED***:
        # Test of inplace multiplication
        for t in self.othertypes:
            with warnings.catch_warnings(record=True***REMOVED*** as w:
                warnings.filterwarnings("always"***REMOVED***
                (x, y, xm***REMOVED*** = (_.astype(t***REMOVED*** for _ in self.uint8data***REMOVED***
                x *= t(2***REMOVED***
                assert_equal(x, y * t(2***REMOVED******REMOVED***
                xm *= t(2***REMOVED***
                assert_equal(xm, y * t(2***REMOVED******REMOVED***

                assert_equal(len(w***REMOVED***, 0, "Failed on type=%s." % t***REMOVED***

    def test_inplace_multiplication_array_type(self***REMOVED***:
        # Test of inplace multiplication
        for t in self.othertypes:
            with warnings.catch_warnings(record=True***REMOVED*** as w:
                warnings.filterwarnings("always"***REMOVED***
                (x, y, xm***REMOVED*** = (_.astype(t***REMOVED*** for _ in self.uint8data***REMOVED***
                m = xm.mask
                a = arange(10, dtype=t***REMOVED***
                a[-1***REMOVED*** = masked
                x *= a
                xm *= a
                assert_equal(x, y * a***REMOVED***
                assert_equal(xm, y * a***REMOVED***
                assert_equal(xm.mask, mask_or(m, a.mask***REMOVED******REMOVED***

                assert_equal(len(w***REMOVED***, 0, "Failed on type=%s." % t***REMOVED***

    def test_inplace_floor_division_scalar_type(self***REMOVED***:
        # Test of inplace division
        for t in self.othertypes:
            with warnings.catch_warnings(record=True***REMOVED*** as w:
                warnings.filterwarnings("always"***REMOVED***
                (x, y, xm***REMOVED*** = (_.astype(t***REMOVED*** for _ in self.uint8data***REMOVED***
                x = arange(10, dtype=t***REMOVED*** * t(2***REMOVED***
                xm = arange(10, dtype=t***REMOVED*** * t(2***REMOVED***
                xm[2***REMOVED*** = masked
                x //= t(2***REMOVED***
                xm //= t(2***REMOVED***
                assert_equal(x, y***REMOVED***
                assert_equal(xm, y***REMOVED***

                assert_equal(len(w***REMOVED***, 0, "Failed on type=%s." % t***REMOVED***

    def test_inplace_floor_division_array_type(self***REMOVED***:
        # Test of inplace division
        for t in self.othertypes:
            with warnings.catch_warnings(record=True***REMOVED*** as w:
                warnings.filterwarnings("always"***REMOVED***
                (x, y, xm***REMOVED*** = (_.astype(t***REMOVED*** for _ in self.uint8data***REMOVED***
                m = xm.mask
                a = arange(10, dtype=t***REMOVED***
                a[-1***REMOVED*** = masked
                x //= a
                xm //= a
                assert_equal(x, y // a***REMOVED***
                assert_equal(xm, y // a***REMOVED***
                assert_equal(
                    xm.mask,
                    mask_or(mask_or(m, a.mask***REMOVED***, (a == t(0***REMOVED******REMOVED******REMOVED***
                ***REMOVED***

                assert_equal(len(w***REMOVED***, 0, "Failed on type=%s." % t***REMOVED***

    def test_inplace_division_scalar_type(self***REMOVED***:
        # Test of inplace division
        for t in self.othertypes:
            with warnings.catch_warnings(record=True***REMOVED*** as w:
                warnings.filterwarnings("always"***REMOVED***
                (x, y, xm***REMOVED*** = (_.astype(t***REMOVED*** for _ in self.uint8data***REMOVED***
                x = arange(10, dtype=t***REMOVED*** * t(2***REMOVED***
                xm = arange(10, dtype=t***REMOVED*** * t(2***REMOVED***
                xm[2***REMOVED*** = masked

                # May get a DeprecationWarning or a TypeError.
                #
                # This is a consequence of the fact that this is true divide
                # and will require casting to float for calculation and
                # casting back to the original type. This will only be raised
                # with integers. Whether it is an error or warning is only
                # dependent on how stringent the casting rules are.
                #
                # Will handle the same way.
                ***REMOVED***
                    x /= t(2***REMOVED***
                    assert_equal(x, y***REMOVED***
                except (DeprecationWarning, TypeError***REMOVED*** as e:
                    warnings.warn(str(e***REMOVED******REMOVED***
                ***REMOVED***
                    xm /= t(2***REMOVED***
                    assert_equal(xm, y***REMOVED***
                except (DeprecationWarning, TypeError***REMOVED*** as e:
                    warnings.warn(str(e***REMOVED******REMOVED***

                if issubclass(t, np.integer***REMOVED***:
                    assert_equal(len(w***REMOVED***, 2, "Failed on type=%s." % t***REMOVED***
                else:
                    assert_equal(len(w***REMOVED***, 0, "Failed on type=%s." % t***REMOVED***

    def test_inplace_division_array_type(self***REMOVED***:
        # Test of inplace division
        for t in self.othertypes:
            with warnings.catch_warnings(record=True***REMOVED*** as w:
                warnings.filterwarnings("always"***REMOVED***
                (x, y, xm***REMOVED*** = (_.astype(t***REMOVED*** for _ in self.uint8data***REMOVED***
                m = xm.mask
                a = arange(10, dtype=t***REMOVED***
                a[-1***REMOVED*** = masked

                # May get a DeprecationWarning or a TypeError.
                #
                # This is a consequence of the fact that this is true divide
                # and will require casting to float for calculation and
                # casting back to the original type. This will only be raised
                # with integers. Whether it is an error or warning is only
                # dependent on how stringent the casting rules are.
                #
                # Will handle the same way.
                ***REMOVED***
                    x /= a
                    assert_equal(x, y / a***REMOVED***
                except (DeprecationWarning, TypeError***REMOVED*** as e:
                    warnings.warn(str(e***REMOVED******REMOVED***
                ***REMOVED***
                    xm /= a
                    assert_equal(xm, y / a***REMOVED***
                    assert_equal(
                        xm.mask,
                        mask_or(mask_or(m, a.mask***REMOVED***, (a == t(0***REMOVED******REMOVED******REMOVED***
                    ***REMOVED***
                except (DeprecationWarning, TypeError***REMOVED*** as e:
                    warnings.warn(str(e***REMOVED******REMOVED***

                if issubclass(t, np.integer***REMOVED***:
                    assert_equal(len(w***REMOVED***, 2, "Failed on type=%s." % t***REMOVED***
                else:
                    assert_equal(len(w***REMOVED***, 0, "Failed on type=%s." % t***REMOVED***

    def test_inplace_pow_type(self***REMOVED***:
        # Test keeping data w/ (inplace***REMOVED*** power
        for t in self.othertypes:
            with warnings.catch_warnings(record=True***REMOVED*** as w:
                warnings.filterwarnings("always"***REMOVED***
                # Test pow on scalar
                x = array([1, 2, 3***REMOVED***, mask=[0, 0, 1***REMOVED***, dtype=t***REMOVED***
                xx = x ** t(2***REMOVED***
                xx_r = array([1, 2 ** 2, 3***REMOVED***, mask=[0, 0, 1***REMOVED***, dtype=t***REMOVED***
                assert_equal(xx.data, xx_r.data***REMOVED***
                assert_equal(xx.mask, xx_r.mask***REMOVED***
                # Test ipow on scalar
                x **= t(2***REMOVED***
                assert_equal(x.data, xx_r.data***REMOVED***
                assert_equal(x.mask, xx_r.mask***REMOVED***

                assert_equal(len(w***REMOVED***, 0, "Failed on type=%s." % t***REMOVED***


class TestMaskedArrayMethods(TestCase***REMOVED***:
    # Test class for miscellaneous MaskedArrays methods.
    def setUp(self***REMOVED***:
        # Base data definition.
        x = np.array([8.375, 7.545, 8.828, 8.5, 1.757, 5.928,
                      8.43, 7.78, 9.865, 5.878, 8.979, 4.732,
                      3.012, 6.022, 5.095, 3.116, 5.238, 3.957,
                      6.04, 9.63, 7.712, 3.382, 4.489, 6.479,
                      7.189, 9.645, 5.395, 4.961, 9.894, 2.893,
                      7.357, 9.828, 6.272, 3.758, 6.693, 0.993***REMOVED******REMOVED***
        X = x.reshape(6, 6***REMOVED***
        XX = x.reshape(3, 2, 2, 3***REMOVED***

        m = np.array([0, 1, 0, 1, 0, 0,
                     1, 0, 1, 1, 0, 1,
                     0, 0, 0, 1, 0, 1,
                     0, 0, 0, 1, 1, 1,
                     1, 0, 0, 1, 0, 0,
                     0, 0, 1, 0, 1, 0***REMOVED******REMOVED***
        mx = array(data=x, mask=m***REMOVED***
        mX = array(data=X, mask=m.reshape(X.shape***REMOVED******REMOVED***
        mXX = array(data=XX, mask=m.reshape(XX.shape***REMOVED******REMOVED***

        m2 = np.array([1, 1, 0, 1, 0, 0,
                      1, 1, 1, 1, 0, 1,
                      0, 0, 1, 1, 0, 1,
                      0, 0, 0, 1, 1, 1,
                      1, 0, 0, 1, 1, 0,
                      0, 0, 1, 0, 1, 1***REMOVED******REMOVED***
        m2x = array(data=x, mask=m2***REMOVED***
        m2X = array(data=X, mask=m2.reshape(X.shape***REMOVED******REMOVED***
        m2XX = array(data=XX, mask=m2.reshape(XX.shape***REMOVED******REMOVED***
        self.d = (x, X, XX, m, mx, mX, mXX, m2x, m2X, m2XX***REMOVED***

    def test_generic_methods(self***REMOVED***:
        # Tests some MaskedArray methods.
        a = array([1, 3, 2***REMOVED******REMOVED***
        assert_equal(a.any(***REMOVED***, a._data.any(***REMOVED******REMOVED***
        assert_equal(a.all(***REMOVED***, a._data.all(***REMOVED******REMOVED***
        assert_equal(a.argmax(***REMOVED***, a._data.argmax(***REMOVED******REMOVED***
        assert_equal(a.argmin(***REMOVED***, a._data.argmin(***REMOVED******REMOVED***
        assert_equal(a.choose(0, 1, 2, 3, 4***REMOVED***, a._data.choose(0, 1, 2, 3, 4***REMOVED******REMOVED***
        assert_equal(a.compress([1, 0, 1***REMOVED******REMOVED***, a._data.compress([1, 0, 1***REMOVED******REMOVED******REMOVED***
        assert_equal(a.conj(***REMOVED***, a._data.conj(***REMOVED******REMOVED***
        assert_equal(a.conjugate(***REMOVED***, a._data.conjugate(***REMOVED******REMOVED***

        m = array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED******REMOVED***
        assert_equal(m.diagonal(***REMOVED***, m._data.diagonal(***REMOVED******REMOVED***
        assert_equal(a.sum(***REMOVED***, a._data.sum(***REMOVED******REMOVED***
        assert_equal(a.take([1, 2***REMOVED******REMOVED***, a._data.take([1, 2***REMOVED******REMOVED******REMOVED***
        assert_equal(m.transpose(***REMOVED***, m._data.transpose(***REMOVED******REMOVED***

    def test_allclose(self***REMOVED***:
        # Tests allclose on arrays
        a = np.random.rand(10***REMOVED***
        b = a + np.random.rand(10***REMOVED*** * 1e-8
        self.assertTrue(allclose(a, b***REMOVED******REMOVED***
        # Test allclose w/ infs
        a[0***REMOVED*** = np.inf
        self.assertTrue(not allclose(a, b***REMOVED******REMOVED***
        b[0***REMOVED*** = np.inf
        self.assertTrue(allclose(a, b***REMOVED******REMOVED***
        # Test allclose w/ masked
        a = masked_array(a***REMOVED***
        a[-1***REMOVED*** = masked
        self.assertTrue(allclose(a, b, masked_equal=True***REMOVED******REMOVED***
        self.assertTrue(not allclose(a, b, masked_equal=False***REMOVED******REMOVED***
        # Test comparison w/ scalar
        a *= 1e-8
        a[0***REMOVED*** = 0
        self.assertTrue(allclose(a, 0, masked_equal=True***REMOVED******REMOVED***

        # Test that the function works for MIN_INT integer typed arrays
        a = masked_array([np.iinfo(np.int_***REMOVED***.min***REMOVED***, dtype=np.int_***REMOVED***
        self.assertTrue(allclose(a, a***REMOVED******REMOVED***

    def test_allany(self***REMOVED***:
        # Checks the any/all methods/functions.
        x = np.array([[0.13, 0.26, 0.90***REMOVED***,
                      [0.28, 0.33, 0.63***REMOVED***,
                      [0.31, 0.87, 0.70***REMOVED******REMOVED******REMOVED***
        m = np.array([[True, False, False***REMOVED***,
                      [False, False, False***REMOVED***,
                      [True, True, False***REMOVED******REMOVED***, dtype=np.bool_***REMOVED***
        mx = masked_array(x, mask=m***REMOVED***
        mxbig = (mx > 0.5***REMOVED***
        mxsmall = (mx < 0.5***REMOVED***

        self.assertFalse(mxbig.all(***REMOVED******REMOVED***
        self.assertTrue(mxbig.any(***REMOVED******REMOVED***
        assert_equal(mxbig.all(0***REMOVED***, [False, False, True***REMOVED******REMOVED***
        assert_equal(mxbig.all(1***REMOVED***, [False, False, True***REMOVED******REMOVED***
        assert_equal(mxbig.any(0***REMOVED***, [False, False, True***REMOVED******REMOVED***
        assert_equal(mxbig.any(1***REMOVED***, [True, True, True***REMOVED******REMOVED***

        self.assertFalse(mxsmall.all(***REMOVED******REMOVED***
        self.assertTrue(mxsmall.any(***REMOVED******REMOVED***
        assert_equal(mxsmall.all(0***REMOVED***, [True, True, False***REMOVED******REMOVED***
        assert_equal(mxsmall.all(1***REMOVED***, [False, False, False***REMOVED******REMOVED***
        assert_equal(mxsmall.any(0***REMOVED***, [True, True, False***REMOVED******REMOVED***
        assert_equal(mxsmall.any(1***REMOVED***, [True, True, False***REMOVED******REMOVED***

    def test_allany_onmatrices(self***REMOVED***:
        x = np.array([[0.13, 0.26, 0.90***REMOVED***,
                      [0.28, 0.33, 0.63***REMOVED***,
                      [0.31, 0.87, 0.70***REMOVED******REMOVED******REMOVED***
        X = np.matrix(x***REMOVED***
        m = np.array([[True, False, False***REMOVED***,
                      [False, False, False***REMOVED***,
                      [True, True, False***REMOVED******REMOVED***, dtype=np.bool_***REMOVED***
        mX = masked_array(X, mask=m***REMOVED***
        mXbig = (mX > 0.5***REMOVED***
        mXsmall = (mX < 0.5***REMOVED***

        self.assertFalse(mXbig.all(***REMOVED******REMOVED***
        self.assertTrue(mXbig.any(***REMOVED******REMOVED***
        assert_equal(mXbig.all(0***REMOVED***, np.matrix([False, False, True***REMOVED******REMOVED******REMOVED***
        assert_equal(mXbig.all(1***REMOVED***, np.matrix([False, False, True***REMOVED******REMOVED***.T***REMOVED***
        assert_equal(mXbig.any(0***REMOVED***, np.matrix([False, False, True***REMOVED******REMOVED******REMOVED***
        assert_equal(mXbig.any(1***REMOVED***, np.matrix([True, True, True***REMOVED******REMOVED***.T***REMOVED***

        self.assertFalse(mXsmall.all(***REMOVED******REMOVED***
        self.assertTrue(mXsmall.any(***REMOVED******REMOVED***
        assert_equal(mXsmall.all(0***REMOVED***, np.matrix([True, True, False***REMOVED******REMOVED******REMOVED***
        assert_equal(mXsmall.all(1***REMOVED***, np.matrix([False, False, False***REMOVED******REMOVED***.T***REMOVED***
        assert_equal(mXsmall.any(0***REMOVED***, np.matrix([True, True, False***REMOVED******REMOVED******REMOVED***
        assert_equal(mXsmall.any(1***REMOVED***, np.matrix([True, True, False***REMOVED******REMOVED***.T***REMOVED***

    def test_allany_oddities(self***REMOVED***:
        # Some fun with all and any
        store = empty((***REMOVED***, dtype=bool***REMOVED***
        full = array([1, 2, 3***REMOVED***, mask=True***REMOVED***

        self.assertTrue(full.all(***REMOVED*** is masked***REMOVED***
        full.all(out=store***REMOVED***
        self.assertTrue(store***REMOVED***
        self.assertTrue(store._mask, True***REMOVED***
        self.assertTrue(store is not masked***REMOVED***

        store = empty((***REMOVED***, dtype=bool***REMOVED***
        self.assertTrue(full.any(***REMOVED*** is masked***REMOVED***
        full.any(out=store***REMOVED***
        self.assertTrue(not store***REMOVED***
        self.assertTrue(store._mask, True***REMOVED***
        self.assertTrue(store is not masked***REMOVED***

    def test_argmax_argmin(self***REMOVED***:
        # Tests argmin & argmax on MaskedArrays.
        (x, X, XX, m, mx, mX, mXX, m2x, m2X, m2XX***REMOVED*** = self.d

        assert_equal(mx.argmin(***REMOVED***, 35***REMOVED***
        assert_equal(mX.argmin(***REMOVED***, 35***REMOVED***
        assert_equal(m2x.argmin(***REMOVED***, 4***REMOVED***
        assert_equal(m2X.argmin(***REMOVED***, 4***REMOVED***
        assert_equal(mx.argmax(***REMOVED***, 28***REMOVED***
        assert_equal(mX.argmax(***REMOVED***, 28***REMOVED***
        assert_equal(m2x.argmax(***REMOVED***, 31***REMOVED***
        assert_equal(m2X.argmax(***REMOVED***, 31***REMOVED***

        assert_equal(mX.argmin(0***REMOVED***, [2, 2, 2, 5, 0, 5***REMOVED******REMOVED***
        assert_equal(m2X.argmin(0***REMOVED***, [2, 2, 4, 5, 0, 4***REMOVED******REMOVED***
        assert_equal(mX.argmax(0***REMOVED***, [0, 5, 0, 5, 4, 0***REMOVED******REMOVED***
        assert_equal(m2X.argmax(0***REMOVED***, [5, 5, 0, 5, 1, 0***REMOVED******REMOVED***

        assert_equal(mX.argmin(1***REMOVED***, [4, 1, 0, 0, 5, 5, ***REMOVED******REMOVED***
        assert_equal(m2X.argmin(1***REMOVED***, [4, 4, 0, 0, 5, 3***REMOVED******REMOVED***
        assert_equal(mX.argmax(1***REMOVED***, [2, 4, 1, 1, 4, 1***REMOVED******REMOVED***
        assert_equal(m2X.argmax(1***REMOVED***, [2, 4, 1, 1, 1, 1***REMOVED******REMOVED***

    def test_clip(self***REMOVED***:
        # Tests clip on MaskedArrays.
        x = np.array([8.375, 7.545, 8.828, 8.5, 1.757, 5.928,
                      8.43, 7.78, 9.865, 5.878, 8.979, 4.732,
                      3.012, 6.022, 5.095, 3.116, 5.238, 3.957,
                      6.04, 9.63, 7.712, 3.382, 4.489, 6.479,
                      7.189, 9.645, 5.395, 4.961, 9.894, 2.893,
                      7.357, 9.828, 6.272, 3.758, 6.693, 0.993***REMOVED******REMOVED***
        m = np.array([0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1,
                      0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1,
                      1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0***REMOVED******REMOVED***
        mx = array(x, mask=m***REMOVED***
        clipped = mx.clip(2, 8***REMOVED***
        assert_equal(clipped.mask, mx.mask***REMOVED***
        assert_equal(clipped._data, x.clip(2, 8***REMOVED******REMOVED***
        assert_equal(clipped._data, mx._data.clip(2, 8***REMOVED******REMOVED***

    def test_compress(self***REMOVED***:
        # test compress
        a = masked_array([1., 2., 3., 4., 5.***REMOVED***, fill_value=9999***REMOVED***
        condition = (a > 1.5***REMOVED*** & (a < 3.5***REMOVED***
        assert_equal(a.compress(condition***REMOVED***, [2., 3.***REMOVED******REMOVED***

        a[[2, 3***REMOVED******REMOVED*** = masked
        b = a.compress(condition***REMOVED***
        assert_equal(b._data, [2., 3.***REMOVED******REMOVED***
        assert_equal(b._mask, [0, 1***REMOVED******REMOVED***
        assert_equal(b.fill_value, 9999***REMOVED***
        assert_equal(b, a[condition***REMOVED******REMOVED***

        condition = (a < 4.***REMOVED***
        b = a.compress(condition***REMOVED***
        assert_equal(b._data, [1., 2., 3.***REMOVED******REMOVED***
        assert_equal(b._mask, [0, 0, 1***REMOVED******REMOVED***
        assert_equal(b.fill_value, 9999***REMOVED***
        assert_equal(b, a[condition***REMOVED******REMOVED***

        a = masked_array([[10, 20, 30***REMOVED***, [40, 50, 60***REMOVED******REMOVED***,
                         mask=[[0, 0, 1***REMOVED***, [1, 0, 0***REMOVED******REMOVED******REMOVED***
        b = a.compress(a.ravel(***REMOVED*** >= 22***REMOVED***
        assert_equal(b._data, [30, 40, 50, 60***REMOVED******REMOVED***
        assert_equal(b._mask, [1, 1, 0, 0***REMOVED******REMOVED***

        x = np.array([3, 1, 2***REMOVED******REMOVED***
        b = a.compress(x >= 2, axis=1***REMOVED***
        assert_equal(b._data, [[10, 30***REMOVED***, [40, 60***REMOVED******REMOVED******REMOVED***
        assert_equal(b._mask, [[0, 1***REMOVED***, [1, 0***REMOVED******REMOVED******REMOVED***

    def test_compressed(self***REMOVED***:
        # Tests compressed
        a = array([1, 2, 3, 4***REMOVED***, mask=[0, 0, 0, 0***REMOVED******REMOVED***
        b = a.compressed(***REMOVED***
        assert_equal(b, a***REMOVED***
        a[0***REMOVED*** = masked
        b = a.compressed(***REMOVED***
        assert_equal(b, [2, 3, 4***REMOVED******REMOVED***

        a = array(np.matrix([1, 2, 3, 4***REMOVED******REMOVED***, mask=[0, 0, 0, 0***REMOVED******REMOVED***
        b = a.compressed(***REMOVED***
        assert_equal(b, a***REMOVED***
        self.assertTrue(isinstance(b, np.matrix***REMOVED******REMOVED***
        a[0, 0***REMOVED*** = masked
        b = a.compressed(***REMOVED***
        assert_equal(b, [[2, 3, 4***REMOVED******REMOVED******REMOVED***

    def test_empty(self***REMOVED***:
        # Tests empty/like
        datatype = [('a', int***REMOVED***, ('b', float***REMOVED***, ('c', '|S8'***REMOVED******REMOVED***
        a = masked_array([(1, 1.1, '1.1'***REMOVED***, (2, 2.2, '2.2'***REMOVED***, (3, 3.3, '3.3'***REMOVED******REMOVED***,
                         dtype=datatype***REMOVED***
        assert_equal(len(a.fill_value.item(***REMOVED******REMOVED***, len(datatype***REMOVED******REMOVED***

        b = empty_like(a***REMOVED***
        assert_equal(b.shape, a.shape***REMOVED***
        assert_equal(b.fill_value, a.fill_value***REMOVED***

        b = empty(len(a***REMOVED***, dtype=datatype***REMOVED***
        assert_equal(b.shape, a.shape***REMOVED***
        assert_equal(b.fill_value, a.fill_value***REMOVED***

        # check empty_like mask handling
        a = masked_array([1, 2, 3***REMOVED***, mask=[False, True, False***REMOVED******REMOVED***
        b = empty_like(a***REMOVED***
        assert_(not np.may_share_memory(a.mask, b.mask***REMOVED******REMOVED***
        b = a.view(masked_array***REMOVED***
        assert_(np.may_share_memory(a.mask, b.mask***REMOVED******REMOVED***

    def test_put(self***REMOVED***:
        # Tests put.
        d = arange(5***REMOVED***
        n = [0, 0, 0, 1, 1***REMOVED***
        m = make_mask(n***REMOVED***
        x = array(d, mask=m***REMOVED***
        self.assertTrue(x[3***REMOVED*** is masked***REMOVED***
        self.assertTrue(x[4***REMOVED*** is masked***REMOVED***
        x[[1, 4***REMOVED******REMOVED*** = [10, 40***REMOVED***
        self.assertTrue(x[3***REMOVED*** is masked***REMOVED***
        self.assertTrue(x[4***REMOVED*** is not masked***REMOVED***
        assert_equal(x, [0, 10, 2, -1, 40***REMOVED******REMOVED***

        x = masked_array(arange(10***REMOVED***, mask=[1, 0, 0, 0, 0***REMOVED*** * 2***REMOVED***
        i = [0, 2, 4, 6***REMOVED***
        x.put(i, [6, 4, 2, 0***REMOVED******REMOVED***
        assert_equal(x, asarray([6, 1, 4, 3, 2, 5, 0, 7, 8, 9, ***REMOVED******REMOVED******REMOVED***
        assert_equal(x.mask, [0, 0, 0, 0, 0, 1, 0, 0, 0, 0***REMOVED******REMOVED***
        x.put(i, masked_array([0, 2, 4, 6***REMOVED***, [1, 0, 1, 0***REMOVED******REMOVED******REMOVED***
        assert_array_equal(x, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ***REMOVED******REMOVED***
        assert_equal(x.mask, [1, 0, 0, 0, 1, 1, 0, 0, 0, 0***REMOVED******REMOVED***

        x = masked_array(arange(10***REMOVED***, mask=[1, 0, 0, 0, 0***REMOVED*** * 2***REMOVED***
        put(x, i, [6, 4, 2, 0***REMOVED******REMOVED***
        assert_equal(x, asarray([6, 1, 4, 3, 2, 5, 0, 7, 8, 9, ***REMOVED******REMOVED******REMOVED***
        assert_equal(x.mask, [0, 0, 0, 0, 0, 1, 0, 0, 0, 0***REMOVED******REMOVED***
        put(x, i, masked_array([0, 2, 4, 6***REMOVED***, [1, 0, 1, 0***REMOVED******REMOVED******REMOVED***
        assert_array_equal(x, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ***REMOVED******REMOVED***
        assert_equal(x.mask, [1, 0, 0, 0, 1, 1, 0, 0, 0, 0***REMOVED******REMOVED***

    def test_put_nomask(self***REMOVED***:
        # GitHub issue 6425
        x = zeros(10***REMOVED***
        z = array([3., -1.***REMOVED***, mask=[False, True***REMOVED******REMOVED***

        x.put([1, 2***REMOVED***, z***REMOVED***
        self.assertTrue(x[0***REMOVED*** is not masked***REMOVED***
        assert_equal(x[0***REMOVED***, 0***REMOVED***
        self.assertTrue(x[1***REMOVED*** is not masked***REMOVED***
        assert_equal(x[1***REMOVED***, 3***REMOVED***
        self.assertTrue(x[2***REMOVED*** is masked***REMOVED***
        self.assertTrue(x[3***REMOVED*** is not masked***REMOVED***
        assert_equal(x[3***REMOVED***, 0***REMOVED***

    def test_put_hardmask(self***REMOVED***:
        # Tests put on hardmask
        d = arange(5***REMOVED***
        n = [0, 0, 0, 1, 1***REMOVED***
        m = make_mask(n***REMOVED***
        xh = array(d + 1, mask=m, hard_mask=True, copy=True***REMOVED***
        xh.put([4, 2, 0, 1, 3***REMOVED***, [1, 2, 3, 4, 5***REMOVED******REMOVED***
        assert_equal(xh._data, [3, 4, 2, 4, 5***REMOVED******REMOVED***

    def test_putmask(self***REMOVED***:
        x = arange(6***REMOVED*** + 1
        mx = array(x, mask=[0, 0, 0, 1, 1, 1***REMOVED******REMOVED***
        mask = [0, 0, 1, 0, 0, 1***REMOVED***
        # w/o mask, w/o masked values
        xx = x.copy(***REMOVED***
        putmask(xx, mask, 99***REMOVED***
        assert_equal(xx, [1, 2, 99, 4, 5, 99***REMOVED******REMOVED***
        # w/ mask, w/o masked values
        mxx = mx.copy(***REMOVED***
        putmask(mxx, mask, 99***REMOVED***
        assert_equal(mxx._data, [1, 2, 99, 4, 5, 99***REMOVED******REMOVED***
        assert_equal(mxx._mask, [0, 0, 0, 1, 1, 0***REMOVED******REMOVED***
        # w/o mask, w/ masked values
        values = array([10, 20, 30, 40, 50, 60***REMOVED***, mask=[1, 1, 1, 0, 0, 0***REMOVED******REMOVED***
        xx = x.copy(***REMOVED***
        putmask(xx, mask, values***REMOVED***
        assert_equal(xx._data, [1, 2, 30, 4, 5, 60***REMOVED******REMOVED***
        assert_equal(xx._mask, [0, 0, 1, 0, 0, 0***REMOVED******REMOVED***
        # w/ mask, w/ masked values
        mxx = mx.copy(***REMOVED***
        putmask(mxx, mask, values***REMOVED***
        assert_equal(mxx._data, [1, 2, 30, 4, 5, 60***REMOVED******REMOVED***
        assert_equal(mxx._mask, [0, 0, 1, 1, 1, 0***REMOVED******REMOVED***
        # w/ mask, w/ masked values + hardmask
        mxx = mx.copy(***REMOVED***
        mxx.harden_mask(***REMOVED***
        putmask(mxx, mask, values***REMOVED***
        assert_equal(mxx, [1, 2, 30, 4, 5, 60***REMOVED******REMOVED***

    def test_ravel(self***REMOVED***:
        # Tests ravel
        a = array([[1, 2, 3, 4, 5***REMOVED******REMOVED***, mask=[[0, 1, 0, 0, 0***REMOVED******REMOVED******REMOVED***
        aravel = a.ravel(***REMOVED***
        assert_equal(aravel._mask.shape, aravel.shape***REMOVED***
        a = array([0, 0***REMOVED***, mask=[1, 1***REMOVED******REMOVED***
        aravel = a.ravel(***REMOVED***
        assert_equal(aravel._mask.shape, a.shape***REMOVED***
        a = array(np.matrix([1, 2, 3, 4, 5***REMOVED******REMOVED***, mask=[[0, 1, 0, 0, 0***REMOVED******REMOVED******REMOVED***
        aravel = a.ravel(***REMOVED***
        assert_equal(aravel.shape, (1, 5***REMOVED******REMOVED***
        assert_equal(aravel._mask.shape, a.shape***REMOVED***
        # Checks that small_mask is preserved
        a = array([1, 2, 3, 4***REMOVED***, mask=[0, 0, 0, 0***REMOVED***, shrink=False***REMOVED***
        assert_equal(a.ravel(***REMOVED***._mask, [0, 0, 0, 0***REMOVED******REMOVED***
        # Test that the fill_value is preserved
        a.fill_value = -99
        a.shape = (2, 2***REMOVED***
        ar = a.ravel(***REMOVED***
        assert_equal(ar._mask, [0, 0, 0, 0***REMOVED******REMOVED***
        assert_equal(ar._data, [1, 2, 3, 4***REMOVED******REMOVED***
        assert_equal(ar.fill_value, -99***REMOVED***
        # Test index ordering
        assert_equal(a.ravel(order='C'***REMOVED***, [1, 2, 3, 4***REMOVED******REMOVED***
        assert_equal(a.ravel(order='F'***REMOVED***, [1, 3, 2, 4***REMOVED******REMOVED***

    def test_reshape(self***REMOVED***:
        # Tests reshape
        x = arange(4***REMOVED***
        x[0***REMOVED*** = masked
        y = x.reshape(2, 2***REMOVED***
        assert_equal(y.shape, (2, 2,***REMOVED******REMOVED***
        assert_equal(y._mask.shape, (2, 2,***REMOVED******REMOVED***
        assert_equal(x.shape, (4,***REMOVED******REMOVED***
        assert_equal(x._mask.shape, (4,***REMOVED******REMOVED***

    def test_sort(self***REMOVED***:
        # Test sort
        x = array([1, 4, 2, 3***REMOVED***, mask=[0, 1, 0, 0***REMOVED***, dtype=np.uint8***REMOVED***

        sortedx = sort(x***REMOVED***
        assert_equal(sortedx._data, [1, 2, 3, 4***REMOVED******REMOVED***
        assert_equal(sortedx._mask, [0, 0, 0, 1***REMOVED******REMOVED***

        sortedx = sort(x, endwith=False***REMOVED***
        assert_equal(sortedx._data, [4, 1, 2, 3***REMOVED******REMOVED***
        assert_equal(sortedx._mask, [1, 0, 0, 0***REMOVED******REMOVED***

        x.sort(***REMOVED***
        assert_equal(x._data, [1, 2, 3, 4***REMOVED******REMOVED***
        assert_equal(x._mask, [0, 0, 0, 1***REMOVED******REMOVED***

        x = array([1, 4, 2, 3***REMOVED***, mask=[0, 1, 0, 0***REMOVED***, dtype=np.uint8***REMOVED***
        x.sort(endwith=False***REMOVED***
        assert_equal(x._data, [4, 1, 2, 3***REMOVED******REMOVED***
        assert_equal(x._mask, [1, 0, 0, 0***REMOVED******REMOVED***

        x = [1, 4, 2, 3***REMOVED***
        sortedx = sort(x***REMOVED***
        self.assertTrue(not isinstance(sorted, MaskedArray***REMOVED******REMOVED***

        x = array([0, 1, -1, -2, 2***REMOVED***, mask=nomask, dtype=np.int8***REMOVED***
        sortedx = sort(x, endwith=False***REMOVED***
        assert_equal(sortedx._data, [-2, -1, 0, 1, 2***REMOVED******REMOVED***
        x = array([0, 1, -1, -2, 2***REMOVED***, mask=[0, 1, 0, 0, 1***REMOVED***, dtype=np.int8***REMOVED***
        sortedx = sort(x, endwith=False***REMOVED***
        assert_equal(sortedx._data, [1, 2, -2, -1, 0***REMOVED******REMOVED***
        assert_equal(sortedx._mask, [1, 1, 0, 0, 0***REMOVED******REMOVED***

    def test_sort_2d(self***REMOVED***:
        # Check sort of 2D array.
        # 2D array w/o mask
        a = masked_array([[8, 4, 1***REMOVED***, [2, 0, 9***REMOVED******REMOVED******REMOVED***
        a.sort(0***REMOVED***
        assert_equal(a, [[2, 0, 1***REMOVED***, [8, 4, 9***REMOVED******REMOVED******REMOVED***
        a = masked_array([[8, 4, 1***REMOVED***, [2, 0, 9***REMOVED******REMOVED******REMOVED***
        a.sort(1***REMOVED***
        assert_equal(a, [[1, 4, 8***REMOVED***, [0, 2, 9***REMOVED******REMOVED******REMOVED***
        # 2D array w/mask
        a = masked_array([[8, 4, 1***REMOVED***, [2, 0, 9***REMOVED******REMOVED***, mask=[[1, 0, 0***REMOVED***, [0, 0, 1***REMOVED******REMOVED******REMOVED***
        a.sort(0***REMOVED***
        assert_equal(a, [[2, 0, 1***REMOVED***, [8, 4, 9***REMOVED******REMOVED******REMOVED***
        assert_equal(a._mask, [[0, 0, 0***REMOVED***, [1, 0, 1***REMOVED******REMOVED******REMOVED***
        a = masked_array([[8, 4, 1***REMOVED***, [2, 0, 9***REMOVED******REMOVED***, mask=[[1, 0, 0***REMOVED***, [0, 0, 1***REMOVED******REMOVED******REMOVED***
        a.sort(1***REMOVED***
        assert_equal(a, [[1, 4, 8***REMOVED***, [0, 2, 9***REMOVED******REMOVED******REMOVED***
        assert_equal(a._mask, [[0, 0, 1***REMOVED***, [0, 0, 1***REMOVED******REMOVED******REMOVED***
        # 3D
        a = masked_array([[[7, 8, 9***REMOVED***, [4, 5, 6***REMOVED***, [1, 2, 3***REMOVED******REMOVED***,
                          [[1, 2, 3***REMOVED***, [7, 8, 9***REMOVED***, [4, 5, 6***REMOVED******REMOVED***,
                          [[7, 8, 9***REMOVED***, [1, 2, 3***REMOVED***, [4, 5, 6***REMOVED******REMOVED***,
                          [[4, 5, 6***REMOVED***, [1, 2, 3***REMOVED***, [7, 8, 9***REMOVED******REMOVED******REMOVED******REMOVED***
        a[a % 4 == 0***REMOVED*** = masked
        am = a.copy(***REMOVED***
        an = a.filled(99***REMOVED***
        am.sort(0***REMOVED***
        an.sort(0***REMOVED***
        assert_equal(am, an***REMOVED***
        am = a.copy(***REMOVED***
        an = a.filled(99***REMOVED***
        am.sort(1***REMOVED***
        an.sort(1***REMOVED***
        assert_equal(am, an***REMOVED***
        am = a.copy(***REMOVED***
        an = a.filled(99***REMOVED***
        am.sort(2***REMOVED***
        an.sort(2***REMOVED***
        assert_equal(am, an***REMOVED***

    def test_sort_flexible(self***REMOVED***:
        # Test sort on flexible dtype.
        a = array(
            data=[(3, 3***REMOVED***, (3, 2***REMOVED***, (2, 2***REMOVED***, (2, 1***REMOVED***, (1, 0***REMOVED***, (1, 1***REMOVED***, (1, 2***REMOVED******REMOVED***,
            mask=[(0, 0***REMOVED***, (0, 1***REMOVED***, (0, 0***REMOVED***, (0, 0***REMOVED***, (1, 0***REMOVED***, (0, 0***REMOVED***, (0, 0***REMOVED******REMOVED***,
            dtype=[('A', int***REMOVED***, ('B', int***REMOVED******REMOVED******REMOVED***

        test = sort(a***REMOVED***
        b = array(
            data=[(1, 1***REMOVED***, (1, 2***REMOVED***, (2, 1***REMOVED***, (2, 2***REMOVED***, (3, 3***REMOVED***, (3, 2***REMOVED***, (1, 0***REMOVED******REMOVED***,
            mask=[(0, 0***REMOVED***, (0, 0***REMOVED***, (0, 0***REMOVED***, (0, 0***REMOVED***, (0, 0***REMOVED***, (0, 1***REMOVED***, (1, 0***REMOVED******REMOVED***,
            dtype=[('A', int***REMOVED***, ('B', int***REMOVED******REMOVED******REMOVED***
        assert_equal(test, b***REMOVED***
        assert_equal(test.mask, b.mask***REMOVED***

        test = sort(a, endwith=False***REMOVED***
        b = array(
            data=[(1, 0***REMOVED***, (1, 1***REMOVED***, (1, 2***REMOVED***, (2, 1***REMOVED***, (2, 2***REMOVED***, (3, 2***REMOVED***, (3, 3***REMOVED***, ***REMOVED***,
            mask=[(1, 0***REMOVED***, (0, 0***REMOVED***, (0, 0***REMOVED***, (0, 0***REMOVED***, (0, 0***REMOVED***, (0, 1***REMOVED***, (0, 0***REMOVED***, ***REMOVED***,
            dtype=[('A', int***REMOVED***, ('B', int***REMOVED******REMOVED******REMOVED***
        assert_equal(test, b***REMOVED***
        assert_equal(test.mask, b.mask***REMOVED***

    def test_argsort(self***REMOVED***:
        # Test argsort
        a = array([1, 5, 2, 4, 3***REMOVED***, mask=[1, 0, 0, 1, 0***REMOVED******REMOVED***
        assert_equal(np.argsort(a***REMOVED***, argsort(a***REMOVED******REMOVED***

    def test_squeeze(self***REMOVED***:
        # Check squeeze
        data = masked_array([[1, 2, 3***REMOVED******REMOVED******REMOVED***
        assert_equal(data.squeeze(***REMOVED***, [1, 2, 3***REMOVED******REMOVED***
        data = masked_array([[1, 2, 3***REMOVED******REMOVED***, mask=[[1, 1, 1***REMOVED******REMOVED******REMOVED***
        assert_equal(data.squeeze(***REMOVED***, [1, 2, 3***REMOVED******REMOVED***
        assert_equal(data.squeeze(***REMOVED***._mask, [1, 1, 1***REMOVED******REMOVED***
        data = masked_array([[1***REMOVED******REMOVED***, mask=True***REMOVED***
        self.assertTrue(data.squeeze(***REMOVED*** is masked***REMOVED***

    def test_swapaxes(self***REMOVED***:
        # Tests swapaxes on MaskedArrays.
        x = np.array([8.375, 7.545, 8.828, 8.5, 1.757, 5.928,
                      8.43, 7.78, 9.865, 5.878, 8.979, 4.732,
                      3.012, 6.022, 5.095, 3.116, 5.238, 3.957,
                      6.04, 9.63, 7.712, 3.382, 4.489, 6.479,
                      7.189, 9.645, 5.395, 4.961, 9.894, 2.893,
                      7.357, 9.828, 6.272, 3.758, 6.693, 0.993***REMOVED******REMOVED***
        m = np.array([0, 1, 0, 1, 0, 0,
                      1, 0, 1, 1, 0, 1,
                      0, 0, 0, 1, 0, 1,
                      0, 0, 0, 1, 1, 1,
                      1, 0, 0, 1, 0, 0,
                      0, 0, 1, 0, 1, 0***REMOVED******REMOVED***
        mX = array(x, mask=m***REMOVED***.reshape(6, 6***REMOVED***
        mXX = mX.reshape(3, 2, 2, 3***REMOVED***

        mXswapped = mX.swapaxes(0, 1***REMOVED***
        assert_equal(mXswapped[-1***REMOVED***, mX[:, -1***REMOVED******REMOVED***

        mXXswapped = mXX.swapaxes(0, 2***REMOVED***
        assert_equal(mXXswapped.shape, (2, 2, 3, 3***REMOVED******REMOVED***

    def test_take(self***REMOVED***:
        # Tests take
        x = masked_array([10, 20, 30, 40***REMOVED***, [0, 1, 0, 1***REMOVED******REMOVED***
        assert_equal(x.take([0, 0, 3***REMOVED******REMOVED***, masked_array([10, 10, 40***REMOVED***, [0, 0, 1***REMOVED******REMOVED******REMOVED***
        assert_equal(x.take([0, 0, 3***REMOVED******REMOVED***, x[[0, 0, 3***REMOVED******REMOVED******REMOVED***
        assert_equal(x.take([[0, 1***REMOVED***, [0, 1***REMOVED******REMOVED******REMOVED***,
                     masked_array([[10, 20***REMOVED***, [10, 20***REMOVED******REMOVED***, [[0, 1***REMOVED***, [0, 1***REMOVED******REMOVED******REMOVED******REMOVED***

        # assert_equal crashes when passed np.ma.mask
        self.assertTrue(x[1***REMOVED*** is np.ma.masked***REMOVED***
        self.assertTrue(x.take(1***REMOVED*** is np.ma.masked***REMOVED***

        x = array([[10, 20, 30***REMOVED***, [40, 50, 60***REMOVED******REMOVED***, mask=[[0, 0, 1***REMOVED***, [1, 0, 0, ***REMOVED******REMOVED******REMOVED***
        assert_equal(x.take([0, 2***REMOVED***, axis=1***REMOVED***,
                     array([[10, 30***REMOVED***, [40, 60***REMOVED******REMOVED***, mask=[[0, 1***REMOVED***, [1, 0***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_equal(take(x, [0, 2***REMOVED***, axis=1***REMOVED***,
                     array([[10, 30***REMOVED***, [40, 60***REMOVED******REMOVED***, mask=[[0, 1***REMOVED***, [1, 0***REMOVED******REMOVED******REMOVED******REMOVED***

    def test_take_masked_indices(self***REMOVED***:
        # Test take w/ masked indices
        a = np.array((40, 18, 37, 9, 22***REMOVED******REMOVED***
        indices = np.arange(3***REMOVED***[None,:***REMOVED*** + np.arange(5***REMOVED***[:, None***REMOVED***
        mindices = array(indices, mask=(indices >= len(a***REMOVED******REMOVED******REMOVED***
        # No mask
        test = take(a, mindices, mode='clip'***REMOVED***
        ctrl = array([[40, 18, 37***REMOVED***,
                      [18, 37, 9***REMOVED***,
                      [37, 9, 22***REMOVED***,
                      [9, 22, 22***REMOVED***,
                      [22, 22, 22***REMOVED******REMOVED******REMOVED***
        assert_equal(test, ctrl***REMOVED***
        # Masked indices
        test = take(a, mindices***REMOVED***
        ctrl = array([[40, 18, 37***REMOVED***,
                      [18, 37, 9***REMOVED***,
                      [37, 9, 22***REMOVED***,
                      [9, 22, 40***REMOVED***,
                      [22, 40, 40***REMOVED******REMOVED******REMOVED***
        ctrl[3, 2***REMOVED*** = ctrl[4, 1***REMOVED*** = ctrl[4, 2***REMOVED*** = masked
        assert_equal(test, ctrl***REMOVED***
        assert_equal(test.mask, ctrl.mask***REMOVED***
        # Masked input + masked indices
        a = array((40, 18, 37, 9, 22***REMOVED***, mask=(0, 1, 0, 0, 0***REMOVED******REMOVED***
        test = take(a, mindices***REMOVED***
        ctrl[0, 1***REMOVED*** = ctrl[1, 0***REMOVED*** = masked
        assert_equal(test, ctrl***REMOVED***
        assert_equal(test.mask, ctrl.mask***REMOVED***

    def test_tolist(self***REMOVED***:
        # Tests to list
        # ... on 1D
        x = array(np.arange(12***REMOVED******REMOVED***
        x[[1, -2***REMOVED******REMOVED*** = masked
        xlist = x.tolist(***REMOVED***
        self.assertTrue(xlist[1***REMOVED*** is None***REMOVED***
        self.assertTrue(xlist[-2***REMOVED*** is None***REMOVED***
        # ... on 2D
        x.shape = (3, 4***REMOVED***
        xlist = x.tolist(***REMOVED***
        ctrl = [[0, None, 2, 3***REMOVED***, [4, 5, 6, 7***REMOVED***, [8, 9, None, 11***REMOVED******REMOVED***
        assert_equal(xlist[0***REMOVED***, [0, None, 2, 3***REMOVED******REMOVED***
        assert_equal(xlist[1***REMOVED***, [4, 5, 6, 7***REMOVED******REMOVED***
        assert_equal(xlist[2***REMOVED***, [8, 9, None, 11***REMOVED******REMOVED***
        assert_equal(xlist, ctrl***REMOVED***
        # ... on structured array w/ masked records
        x = array(list(zip([1, 2, 3***REMOVED***,
                           [1.1, 2.2, 3.3***REMOVED***,
                           ['one', 'two', 'thr'***REMOVED******REMOVED******REMOVED***,
                  dtype=[('a', int***REMOVED***, ('b', float***REMOVED***, ('c', '|S8'***REMOVED******REMOVED******REMOVED***
        x[-1***REMOVED*** = masked
        assert_equal(x.tolist(***REMOVED***,
                     [(1, 1.1, asbytes('one'***REMOVED******REMOVED***,
                      (2, 2.2, asbytes('two'***REMOVED******REMOVED***,
                      (None, None, None***REMOVED******REMOVED******REMOVED***
        # ... on structured array w/ masked fields
        a = array([(1, 2,***REMOVED***, (3, 4***REMOVED******REMOVED***, mask=[(0, 1***REMOVED***, (0, 0***REMOVED******REMOVED***,
                  dtype=[('a', int***REMOVED***, ('b', int***REMOVED******REMOVED******REMOVED***
        test = a.tolist(***REMOVED***
        assert_equal(test, [[1, None***REMOVED***, [3, 4***REMOVED******REMOVED******REMOVED***
        # ... on mvoid
        a = a[0***REMOVED***
        test = a.tolist(***REMOVED***
        assert_equal(test, [1, None***REMOVED******REMOVED***

    def test_tolist_specialcase(self***REMOVED***:
        # Test mvoid.tolist: make sure we return a standard Python object
        a = array([(0, 1***REMOVED***, (2, 3***REMOVED******REMOVED***, dtype=[('a', int***REMOVED***, ('b', int***REMOVED******REMOVED******REMOVED***
        # w/o mask: each entry is a np.void whose elements are standard Python
        for entry in a:
            for item in entry.tolist(***REMOVED***:
                assert_(not isinstance(item, np.generic***REMOVED******REMOVED***
        # w/ mask: each entry is a ma.void whose elements should be
        # standard Python
        a.mask[0***REMOVED*** = (0, 1***REMOVED***
        for entry in a:
            for item in entry.tolist(***REMOVED***:
                assert_(not isinstance(item, np.generic***REMOVED******REMOVED***

    def test_toflex(self***REMOVED***:
        # Test the conversion to records
        data = arange(10***REMOVED***
        record = data.toflex(***REMOVED***
        assert_equal(record['_data'***REMOVED***, data._data***REMOVED***
        assert_equal(record['_mask'***REMOVED***, data._mask***REMOVED***

        data[[0, 1, 2, -1***REMOVED******REMOVED*** = masked
        record = data.toflex(***REMOVED***
        assert_equal(record['_data'***REMOVED***, data._data***REMOVED***
        assert_equal(record['_mask'***REMOVED***, data._mask***REMOVED***

        ndtype = [('i', int***REMOVED***, ('s', '|S3'***REMOVED***, ('f', float***REMOVED******REMOVED***
        data = array([(i, s, f***REMOVED*** for (i, s, f***REMOVED*** in zip(np.arange(10***REMOVED***,
                                                     'ABCDEFGHIJKLM',
                                                     np.random.rand(10***REMOVED******REMOVED******REMOVED***,
                     dtype=ndtype***REMOVED***
        data[[0, 1, 2, -1***REMOVED******REMOVED*** = masked
        record = data.toflex(***REMOVED***
        assert_equal(record['_data'***REMOVED***, data._data***REMOVED***
        assert_equal(record['_mask'***REMOVED***, data._mask***REMOVED***

        ndtype = np.dtype("int, (2,3***REMOVED***float, float"***REMOVED***
        data = array([(i, f, ff***REMOVED*** for (i, f, ff***REMOVED*** in zip(np.arange(10***REMOVED***,
                                                       np.random.rand(10***REMOVED***,
                                                       np.random.rand(10***REMOVED******REMOVED******REMOVED***,
                     dtype=ndtype***REMOVED***
        data[[0, 1, 2, -1***REMOVED******REMOVED*** = masked
        record = data.toflex(***REMOVED***
        assert_equal_records(record['_data'***REMOVED***, data._data***REMOVED***
        assert_equal_records(record['_mask'***REMOVED***, data._mask***REMOVED***

    def test_fromflex(self***REMOVED***:
        # Test the reconstruction of a masked_array from a record
        a = array([1, 2, 3***REMOVED******REMOVED***
        test = fromflex(a.toflex(***REMOVED******REMOVED***
        assert_equal(test, a***REMOVED***
        assert_equal(test.mask, a.mask***REMOVED***

        a = array([1, 2, 3***REMOVED***, mask=[0, 0, 1***REMOVED******REMOVED***
        test = fromflex(a.toflex(***REMOVED******REMOVED***
        assert_equal(test, a***REMOVED***
        assert_equal(test.mask, a.mask***REMOVED***

        a = array([(1, 1.***REMOVED***, (2, 2.***REMOVED***, (3, 3.***REMOVED******REMOVED***, mask=[(1, 0***REMOVED***, (0, 0***REMOVED***, (0, 1***REMOVED******REMOVED***,
                  dtype=[('A', int***REMOVED***, ('B', float***REMOVED******REMOVED******REMOVED***
        test = fromflex(a.toflex(***REMOVED******REMOVED***
        assert_equal(test, a***REMOVED***
        assert_equal(test.data, a.data***REMOVED***

    def test_arraymethod(self***REMOVED***:
        # Test a _arraymethod w/ n argument
        marray = masked_array([[1, 2, 3, 4, 5***REMOVED******REMOVED***, mask=[0, 0, 1, 0, 0***REMOVED******REMOVED***
        control = masked_array([[1***REMOVED***, [2***REMOVED***, [3***REMOVED***, [4***REMOVED***, [5***REMOVED******REMOVED***,
                               mask=[0, 0, 1, 0, 0***REMOVED******REMOVED***
        assert_equal(marray.T, control***REMOVED***
        assert_equal(marray.transpose(***REMOVED***, control***REMOVED***

        assert_equal(MaskedArray.cumsum(marray.T, 0***REMOVED***, control.cumsum(0***REMOVED******REMOVED***


class TestMaskedArrayMathMethods(TestCase***REMOVED***:

    def setUp(self***REMOVED***:
        # Base data definition.
        x = np.array([8.375, 7.545, 8.828, 8.5, 1.757, 5.928,
                      8.43, 7.78, 9.865, 5.878, 8.979, 4.732,
                      3.012, 6.022, 5.095, 3.116, 5.238, 3.957,
                      6.04, 9.63, 7.712, 3.382, 4.489, 6.479,
                      7.189, 9.645, 5.395, 4.961, 9.894, 2.893,
                      7.357, 9.828, 6.272, 3.758, 6.693, 0.993***REMOVED******REMOVED***
        X = x.reshape(6, 6***REMOVED***
        XX = x.reshape(3, 2, 2, 3***REMOVED***

        m = np.array([0, 1, 0, 1, 0, 0,
                     1, 0, 1, 1, 0, 1,
                     0, 0, 0, 1, 0, 1,
                     0, 0, 0, 1, 1, 1,
                     1, 0, 0, 1, 0, 0,
                     0, 0, 1, 0, 1, 0***REMOVED******REMOVED***
        mx = array(data=x, mask=m***REMOVED***
        mX = array(data=X, mask=m.reshape(X.shape***REMOVED******REMOVED***
        mXX = array(data=XX, mask=m.reshape(XX.shape***REMOVED******REMOVED***

        m2 = np.array([1, 1, 0, 1, 0, 0,
                      1, 1, 1, 1, 0, 1,
                      0, 0, 1, 1, 0, 1,
                      0, 0, 0, 1, 1, 1,
                      1, 0, 0, 1, 1, 0,
                      0, 0, 1, 0, 1, 1***REMOVED******REMOVED***
        m2x = array(data=x, mask=m2***REMOVED***
        m2X = array(data=X, mask=m2.reshape(X.shape***REMOVED******REMOVED***
        m2XX = array(data=XX, mask=m2.reshape(XX.shape***REMOVED******REMOVED***
        self.d = (x, X, XX, m, mx, mX, mXX, m2x, m2X, m2XX***REMOVED***

    def test_cumsumprod(self***REMOVED***:
        # Tests cumsum & cumprod on MaskedArrays.
        (x, X, XX, m, mx, mX, mXX, m2x, m2X, m2XX***REMOVED*** = self.d
        mXcp = mX.cumsum(0***REMOVED***
        assert_equal(mXcp._data, mX.filled(0***REMOVED***.cumsum(0***REMOVED******REMOVED***
        mXcp = mX.cumsum(1***REMOVED***
        assert_equal(mXcp._data, mX.filled(0***REMOVED***.cumsum(1***REMOVED******REMOVED***

        mXcp = mX.cumprod(0***REMOVED***
        assert_equal(mXcp._data, mX.filled(1***REMOVED***.cumprod(0***REMOVED******REMOVED***
        mXcp = mX.cumprod(1***REMOVED***
        assert_equal(mXcp._data, mX.filled(1***REMOVED***.cumprod(1***REMOVED******REMOVED***

    def test_cumsumprod_with_output(self***REMOVED***:
        # Tests cumsum/cumprod w/ output
        xm = array(np.random.uniform(0, 10, 12***REMOVED******REMOVED***.reshape(3, 4***REMOVED***
        xm[:, 0***REMOVED*** = xm[0***REMOVED*** = xm[-1, -1***REMOVED*** = masked

        for funcname in ('cumsum', 'cumprod'***REMOVED***:
            npfunc = getattr(np, funcname***REMOVED***
            xmmeth = getattr(xm, funcname***REMOVED***

            # A ndarray as explicit input
            output = np.empty((3, 4***REMOVED***, dtype=float***REMOVED***
            output.fill(-9999***REMOVED***
            result = npfunc(xm, axis=0, out=output***REMOVED***
            # ... the result should be the given output
            self.assertTrue(result is output***REMOVED***
            assert_equal(result, xmmeth(axis=0, out=output***REMOVED******REMOVED***

            output = empty((3, 4***REMOVED***, dtype=int***REMOVED***
            result = xmmeth(axis=0, out=output***REMOVED***
            self.assertTrue(result is output***REMOVED***

    def test_ptp(self***REMOVED***:
        # Tests ptp on MaskedArrays.
        (x, X, XX, m, mx, mX, mXX, m2x, m2X, m2XX***REMOVED*** = self.d
        (n, m***REMOVED*** = X.shape
        assert_equal(mx.ptp(***REMOVED***, mx.compressed(***REMOVED***.ptp(***REMOVED******REMOVED***
        rows = np.zeros(n, np.float***REMOVED***
        cols = np.zeros(m, np.float***REMOVED***
        for k in range(m***REMOVED***:
            cols[k***REMOVED*** = mX[:, k***REMOVED***.compressed(***REMOVED***.ptp(***REMOVED***
        for k in range(n***REMOVED***:
            rows[k***REMOVED*** = mX[k***REMOVED***.compressed(***REMOVED***.ptp(***REMOVED***
        assert_equal(mX.ptp(0***REMOVED***, cols***REMOVED***
        assert_equal(mX.ptp(1***REMOVED***, rows***REMOVED***

    def test_add_object(self***REMOVED***:
        x = masked_array(['a', 'b'***REMOVED***, mask=[1, 0***REMOVED***, dtype=object***REMOVED***
        y = x + 'x'
        assert_equal(y[1***REMOVED***, 'bx'***REMOVED***
        assert_(y.mask[0***REMOVED******REMOVED***

    def test_sum_object(self***REMOVED***:
        # Test sum on object dtype
        a = masked_array([1, 2, 3***REMOVED***, mask=[1, 0, 0***REMOVED***, dtype=np.object***REMOVED***
        assert_equal(a.sum(***REMOVED***, 5***REMOVED***
        a = masked_array([[1, 2, 3***REMOVED***, [4, 5, 6***REMOVED******REMOVED***, dtype=object***REMOVED***
        assert_equal(a.sum(axis=0***REMOVED***, [5, 7, 9***REMOVED******REMOVED***

    def test_prod_object(self***REMOVED***:
        # Test prod on object dtype
        a = masked_array([1, 2, 3***REMOVED***, mask=[1, 0, 0***REMOVED***, dtype=np.object***REMOVED***
        assert_equal(a.prod(***REMOVED***, 2 * 3***REMOVED***
        a = masked_array([[1, 2, 3***REMOVED***, [4, 5, 6***REMOVED******REMOVED***, dtype=object***REMOVED***
        assert_equal(a.prod(axis=0***REMOVED***, [4, 10, 18***REMOVED******REMOVED***

    def test_meananom_object(self***REMOVED***:
        # Test mean/anom on object dtype
        a = masked_array([1, 2, 3***REMOVED***, dtype=np.object***REMOVED***
        assert_equal(a.mean(***REMOVED***, 2***REMOVED***
        assert_equal(a.anom(***REMOVED***, [-1, 0, 1***REMOVED******REMOVED***

    def test_trace(self***REMOVED***:
        # Tests trace on MaskedArrays.
        (x, X, XX, m, mx, mX, mXX, m2x, m2X, m2XX***REMOVED*** = self.d
        mXdiag = mX.diagonal(***REMOVED***
        assert_equal(mX.trace(***REMOVED***, mX.diagonal(***REMOVED***.compressed(***REMOVED***.sum(***REMOVED******REMOVED***
        assert_almost_equal(mX.trace(***REMOVED***,
                            X.trace(***REMOVED*** - sum(mXdiag.mask * X.diagonal(***REMOVED***,
                                            axis=0***REMOVED******REMOVED***
        assert_equal(np.trace(mX***REMOVED***, mX.trace(***REMOVED******REMOVED***

    def test_dot(self***REMOVED***:
        # Tests dot on MaskedArrays.
        (x, X, XX, m, mx, mX, mXX, m2x, m2X, m2XX***REMOVED*** = self.d
        fx = mx.filled(0***REMOVED***
        r = mx.dot(mx***REMOVED***
        assert_almost_equal(r.filled(0***REMOVED***, fx.dot(fx***REMOVED******REMOVED***
        assert_(r.mask is nomask***REMOVED***

        fX = mX.filled(0***REMOVED***
        r = mX.dot(mX***REMOVED***
        assert_almost_equal(r.filled(0***REMOVED***, fX.dot(fX***REMOVED******REMOVED***
        assert_(r.mask[1,3***REMOVED******REMOVED***
        r1 = empty_like(r***REMOVED***
        mX.dot(mX, out=r1***REMOVED***
        assert_almost_equal(r, r1***REMOVED***

        mYY = mXX.swapaxes(-1, -2***REMOVED***
        fXX, fYY = mXX.filled(0***REMOVED***, mYY.filled(0***REMOVED***
        r = mXX.dot(mYY***REMOVED***
        assert_almost_equal(r.filled(0***REMOVED***, fXX.dot(fYY***REMOVED******REMOVED***
        r1 = empty_like(r***REMOVED***
        mXX.dot(mYY, out=r1***REMOVED***
        assert_almost_equal(r, r1***REMOVED***

    def test_dot_shape_mismatch(self***REMOVED***:
        # regression test
        x = masked_array([[1,2***REMOVED***,[3,4***REMOVED******REMOVED***, mask=[[0,1***REMOVED***,[0,0***REMOVED******REMOVED******REMOVED***
        y = masked_array([[1,2***REMOVED***,[3,4***REMOVED******REMOVED***, mask=[[0,1***REMOVED***,[0,0***REMOVED******REMOVED******REMOVED***
        z = masked_array([[0,1***REMOVED***,[3,3***REMOVED******REMOVED******REMOVED***
        x.dot(y, out=z***REMOVED***
        assert_almost_equal(z.filled(0***REMOVED***, [[1, 0***REMOVED***, [15, 16***REMOVED******REMOVED******REMOVED***
        assert_almost_equal(z.mask, [[0, 1***REMOVED***, [0, 0***REMOVED******REMOVED******REMOVED***

    def test_varstd(self***REMOVED***:
        # Tests var & std on MaskedArrays.
        (x, X, XX, m, mx, mX, mXX, m2x, m2X, m2XX***REMOVED*** = self.d
        assert_almost_equal(mX.var(axis=None***REMOVED***, mX.compressed(***REMOVED***.var(***REMOVED******REMOVED***
        assert_almost_equal(mX.std(axis=None***REMOVED***, mX.compressed(***REMOVED***.std(***REMOVED******REMOVED***
        assert_almost_equal(mX.std(axis=None, ddof=1***REMOVED***,
                            mX.compressed(***REMOVED***.std(ddof=1***REMOVED******REMOVED***
        assert_almost_equal(mX.var(axis=None, ddof=1***REMOVED***,
                            mX.compressed(***REMOVED***.var(ddof=1***REMOVED******REMOVED***
        assert_equal(mXX.var(axis=3***REMOVED***.shape, XX.var(axis=3***REMOVED***.shape***REMOVED***
        assert_equal(mX.var(***REMOVED***.shape, X.var(***REMOVED***.shape***REMOVED***
        (mXvar0, mXvar1***REMOVED*** = (mX.var(axis=0***REMOVED***, mX.var(axis=1***REMOVED******REMOVED***
        assert_almost_equal(mX.var(axis=None, ddof=2***REMOVED***,
                            mX.compressed(***REMOVED***.var(ddof=2***REMOVED******REMOVED***
        assert_almost_equal(mX.std(axis=None, ddof=2***REMOVED***,
                            mX.compressed(***REMOVED***.std(ddof=2***REMOVED******REMOVED***
        for k in range(6***REMOVED***:
            assert_almost_equal(mXvar1[k***REMOVED***, mX[k***REMOVED***.compressed(***REMOVED***.var(***REMOVED******REMOVED***
            assert_almost_equal(mXvar0[k***REMOVED***, mX[:, k***REMOVED***.compressed(***REMOVED***.var(***REMOVED******REMOVED***
            assert_almost_equal(np.sqrt(mXvar0[k***REMOVED******REMOVED***,
                                mX[:, k***REMOVED***.compressed(***REMOVED***.std(***REMOVED******REMOVED***

    def test_varstd_specialcases(self***REMOVED***:
        # Test a special case for var
        nout = np.array(-1, dtype=float***REMOVED***
        mout = array(-1, dtype=float***REMOVED***

        x = array(arange(10***REMOVED***, mask=True***REMOVED***
        for methodname in ('var', 'std'***REMOVED***:
            method = getattr(x, methodname***REMOVED***
            self.assertTrue(method(***REMOVED*** is masked***REMOVED***
            self.assertTrue(method(0***REMOVED*** is masked***REMOVED***
            self.assertTrue(method(-1***REMOVED*** is masked***REMOVED***
            # Using a masked array as explicit output
            with warnings.catch_warnings(***REMOVED***:
                warnings.simplefilter('ignore'***REMOVED***
                method(out=mout***REMOVED***
            self.assertTrue(mout is not masked***REMOVED***
            assert_equal(mout.mask, True***REMOVED***
            # Using a ndarray as explicit output
            with warnings.catch_warnings(***REMOVED***:
                warnings.simplefilter('ignore'***REMOVED***
                method(out=nout***REMOVED***
            self.assertTrue(np.isnan(nout***REMOVED******REMOVED***

        x = array(arange(10***REMOVED***, mask=True***REMOVED***
        x[-1***REMOVED*** = 9
        for methodname in ('var', 'std'***REMOVED***:
            method = getattr(x, methodname***REMOVED***
            self.assertTrue(method(ddof=1***REMOVED*** is masked***REMOVED***
            self.assertTrue(method(0, ddof=1***REMOVED*** is masked***REMOVED***
            self.assertTrue(method(-1, ddof=1***REMOVED*** is masked***REMOVED***
            # Using a masked array as explicit output
            method(out=mout, ddof=1***REMOVED***
            self.assertTrue(mout is not masked***REMOVED***
            assert_equal(mout.mask, True***REMOVED***
            # Using a ndarray as explicit output
            method(out=nout, ddof=1***REMOVED***
            self.assertTrue(np.isnan(nout***REMOVED******REMOVED***

    def test_varstd_ddof(self***REMOVED***:
        a = array([[1, 1, 0***REMOVED***, [1, 1, 0***REMOVED******REMOVED***, mask=[[0, 0, 1***REMOVED***, [0, 0, 1***REMOVED******REMOVED******REMOVED***
        test = a.std(axis=0, ddof=0***REMOVED***
        assert_equal(test.filled(0***REMOVED***, [0, 0, 0***REMOVED******REMOVED***
        assert_equal(test.mask, [0, 0, 1***REMOVED******REMOVED***
        test = a.std(axis=0, ddof=1***REMOVED***
        assert_equal(test.filled(0***REMOVED***, [0, 0, 0***REMOVED******REMOVED***
        assert_equal(test.mask, [0, 0, 1***REMOVED******REMOVED***
        test = a.std(axis=0, ddof=2***REMOVED***
        assert_equal(test.filled(0***REMOVED***, [0, 0, 0***REMOVED******REMOVED***
        assert_equal(test.mask, [1, 1, 1***REMOVED******REMOVED***

    def test_diag(self***REMOVED***:
        # Test diag
        x = arange(9***REMOVED***.reshape((3, 3***REMOVED******REMOVED***
        x[1, 1***REMOVED*** = masked
        out = np.diag(x***REMOVED***
        assert_equal(out, [0, 4, 8***REMOVED******REMOVED***
        out = diag(x***REMOVED***
        assert_equal(out, [0, 4, 8***REMOVED******REMOVED***
        assert_equal(out.mask, [0, 1, 0***REMOVED******REMOVED***
        out = diag(out***REMOVED***
        control = array([[0, 0, 0***REMOVED***, [0, 4, 0***REMOVED***, [0, 0, 8***REMOVED******REMOVED***,
                        mask=[[0, 0, 0***REMOVED***, [0, 1, 0***REMOVED***, [0, 0, 0***REMOVED******REMOVED******REMOVED***
        assert_equal(out, control***REMOVED***

    def test_axis_methods_nomask(self***REMOVED***:
        # Test the combination nomask & methods w/ axis
        a = array([[1, 2, 3***REMOVED***, [4, 5, 6***REMOVED******REMOVED******REMOVED***

        assert_equal(a.sum(0***REMOVED***, [5, 7, 9***REMOVED******REMOVED***
        assert_equal(a.sum(-1***REMOVED***, [6, 15***REMOVED******REMOVED***
        assert_equal(a.sum(1***REMOVED***, [6, 15***REMOVED******REMOVED***

        assert_equal(a.prod(0***REMOVED***, [4, 10, 18***REMOVED******REMOVED***
        assert_equal(a.prod(-1***REMOVED***, [6, 120***REMOVED******REMOVED***
        assert_equal(a.prod(1***REMOVED***, [6, 120***REMOVED******REMOVED***

        assert_equal(a.min(0***REMOVED***, [1, 2, 3***REMOVED******REMOVED***
        assert_equal(a.min(-1***REMOVED***, [1, 4***REMOVED******REMOVED***
        assert_equal(a.min(1***REMOVED***, [1, 4***REMOVED******REMOVED***

        assert_equal(a.max(0***REMOVED***, [4, 5, 6***REMOVED******REMOVED***
        assert_equal(a.max(-1***REMOVED***, [3, 6***REMOVED******REMOVED***
        assert_equal(a.max(1***REMOVED***, [3, 6***REMOVED******REMOVED***


class TestMaskedArrayMathMethodsComplex(TestCase***REMOVED***:
    # Test class for miscellaneous MaskedArrays methods.
    def setUp(self***REMOVED***:
        # Base data definition.
        x = np.array([8.375j, 7.545j, 8.828j, 8.5j, 1.757j, 5.928,
                      8.43, 7.78, 9.865, 5.878, 8.979, 4.732,
                      3.012, 6.022, 5.095, 3.116, 5.238, 3.957,
                      6.04, 9.63, 7.712, 3.382, 4.489, 6.479j,
                      7.189j, 9.645, 5.395, 4.961, 9.894, 2.893,
                      7.357, 9.828, 6.272, 3.758, 6.693, 0.993j***REMOVED******REMOVED***
        X = x.reshape(6, 6***REMOVED***
        XX = x.reshape(3, 2, 2, 3***REMOVED***

        m = np.array([0, 1, 0, 1, 0, 0,
                     1, 0, 1, 1, 0, 1,
                     0, 0, 0, 1, 0, 1,
                     0, 0, 0, 1, 1, 1,
                     1, 0, 0, 1, 0, 0,
                     0, 0, 1, 0, 1, 0***REMOVED******REMOVED***
        mx = array(data=x, mask=m***REMOVED***
        mX = array(data=X, mask=m.reshape(X.shape***REMOVED******REMOVED***
        mXX = array(data=XX, mask=m.reshape(XX.shape***REMOVED******REMOVED***

        m2 = np.array([1, 1, 0, 1, 0, 0,
                      1, 1, 1, 1, 0, 1,
                      0, 0, 1, 1, 0, 1,
                      0, 0, 0, 1, 1, 1,
                      1, 0, 0, 1, 1, 0,
                      0, 0, 1, 0, 1, 1***REMOVED******REMOVED***
        m2x = array(data=x, mask=m2***REMOVED***
        m2X = array(data=X, mask=m2.reshape(X.shape***REMOVED******REMOVED***
        m2XX = array(data=XX, mask=m2.reshape(XX.shape***REMOVED******REMOVED***
        self.d = (x, X, XX, m, mx, mX, mXX, m2x, m2X, m2XX***REMOVED***

    def test_varstd(self***REMOVED***:
        # Tests var & std on MaskedArrays.
        (x, X, XX, m, mx, mX, mXX, m2x, m2X, m2XX***REMOVED*** = self.d
        assert_almost_equal(mX.var(axis=None***REMOVED***, mX.compressed(***REMOVED***.var(***REMOVED******REMOVED***
        assert_almost_equal(mX.std(axis=None***REMOVED***, mX.compressed(***REMOVED***.std(***REMOVED******REMOVED***
        assert_equal(mXX.var(axis=3***REMOVED***.shape, XX.var(axis=3***REMOVED***.shape***REMOVED***
        assert_equal(mX.var(***REMOVED***.shape, X.var(***REMOVED***.shape***REMOVED***
        (mXvar0, mXvar1***REMOVED*** = (mX.var(axis=0***REMOVED***, mX.var(axis=1***REMOVED******REMOVED***
        assert_almost_equal(mX.var(axis=None, ddof=2***REMOVED***,
                            mX.compressed(***REMOVED***.var(ddof=2***REMOVED******REMOVED***
        assert_almost_equal(mX.std(axis=None, ddof=2***REMOVED***,
                            mX.compressed(***REMOVED***.std(ddof=2***REMOVED******REMOVED***
        for k in range(6***REMOVED***:
            assert_almost_equal(mXvar1[k***REMOVED***, mX[k***REMOVED***.compressed(***REMOVED***.var(***REMOVED******REMOVED***
            assert_almost_equal(mXvar0[k***REMOVED***, mX[:, k***REMOVED***.compressed(***REMOVED***.var(***REMOVED******REMOVED***
            assert_almost_equal(np.sqrt(mXvar0[k***REMOVED******REMOVED***,
                                mX[:, k***REMOVED***.compressed(***REMOVED***.std(***REMOVED******REMOVED***


class TestMaskedArrayFunctions(TestCase***REMOVED***:
    # Test class for miscellaneous functions.

    def setUp(self***REMOVED***:
        x = np.array([1., 1., 1., -2., pi/2.0, 4., 5., -10., 10., 1., 2., 3.***REMOVED******REMOVED***
        y = np.array([5., 0., 3., 2., -1., -4., 0., -10., 10., 1., 0., 3.***REMOVED******REMOVED***
        m1 = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0***REMOVED***
        m2 = [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1***REMOVED***
        xm = masked_array(x, mask=m1***REMOVED***
        ym = masked_array(y, mask=m2***REMOVED***
        xm.set_fill_value(1e+20***REMOVED***
        self.info = (xm, ym***REMOVED***

    def test_masked_where_bool(self***REMOVED***:
        x = [1, 2***REMOVED***
        y = masked_where(False, x***REMOVED***
        assert_equal(y, [1, 2***REMOVED******REMOVED***
        assert_equal(y[1***REMOVED***, 2***REMOVED***

    def test_masked_equal_wlist(self***REMOVED***:
        x = [1, 2, 3***REMOVED***
        mx = masked_equal(x, 3***REMOVED***
        assert_equal(mx, x***REMOVED***
        assert_equal(mx._mask, [0, 0, 1***REMOVED******REMOVED***
        mx = masked_not_equal(x, 3***REMOVED***
        assert_equal(mx, x***REMOVED***
        assert_equal(mx._mask, [1, 1, 0***REMOVED******REMOVED***

    def test_masked_equal_fill_value(self***REMOVED***:
        x = [1, 2, 3***REMOVED***
        mx = masked_equal(x, 3***REMOVED***
        assert_equal(mx._mask, [0, 0, 1***REMOVED******REMOVED***
        assert_equal(mx.fill_value, 3***REMOVED***

    def test_masked_where_condition(self***REMOVED***:
        # Tests masking functions.
        x = array([1., 2., 3., 4., 5.***REMOVED******REMOVED***
        x[2***REMOVED*** = masked
        assert_equal(masked_where(greater(x, 2***REMOVED***, x***REMOVED***, masked_greater(x, 2***REMOVED******REMOVED***
        assert_equal(masked_where(greater_equal(x, 2***REMOVED***, x***REMOVED***,
                     masked_greater_equal(x, 2***REMOVED******REMOVED***
        assert_equal(masked_where(less(x, 2***REMOVED***, x***REMOVED***, masked_less(x, 2***REMOVED******REMOVED***
        assert_equal(masked_where(less_equal(x, 2***REMOVED***, x***REMOVED***,
                     masked_less_equal(x, 2***REMOVED******REMOVED***
        assert_equal(masked_where(not_equal(x, 2***REMOVED***, x***REMOVED***, masked_not_equal(x, 2***REMOVED******REMOVED***
        assert_equal(masked_where(equal(x, 2***REMOVED***, x***REMOVED***, masked_equal(x, 2***REMOVED******REMOVED***
        assert_equal(masked_where(not_equal(x, 2***REMOVED***, x***REMOVED***, masked_not_equal(x, 2***REMOVED******REMOVED***
        assert_equal(masked_where([1, 1, 0, 0, 0***REMOVED***, [1, 2, 3, 4, 5***REMOVED******REMOVED***,
                     [99, 99, 3, 4, 5***REMOVED******REMOVED***

    def test_masked_where_oddities(self***REMOVED***:
        # Tests some generic features.
        atest = ones((10, 10, 10***REMOVED***, dtype=float***REMOVED***
        btest = zeros(atest.shape, MaskType***REMOVED***
        ctest = masked_where(btest, atest***REMOVED***
        assert_equal(atest, ctest***REMOVED***

    def test_masked_where_shape_constraint(self***REMOVED***:
        a = arange(10***REMOVED***
        ***REMOVED***
            test = masked_equal(1, a***REMOVED***
        except IndexError:
            pass
        else:
            raise AssertionError("Should have failed..."***REMOVED***
        test = masked_equal(a, 1***REMOVED***
        assert_equal(test.mask, [0, 1, 0, 0, 0, 0, 0, 0, 0, 0***REMOVED******REMOVED***

    def test_masked_where_structured(self***REMOVED***:
        # test that masked_where on a structured array sets a structured
        # mask (see issue #2972***REMOVED***
        a = np.zeros(10, dtype=[("A", "<f2"***REMOVED***, ("B", "<f4"***REMOVED******REMOVED******REMOVED***
        am = np.ma.masked_where(a["A"***REMOVED*** < 5, a***REMOVED***
        assert_equal(am.mask.dtype.names, am.dtype.names***REMOVED***
        assert_equal(am["A"***REMOVED***,
                    np.ma.masked_array(np.zeros(10***REMOVED***, np.ones(10***REMOVED******REMOVED******REMOVED***

    def test_masked_otherfunctions(self***REMOVED***:
        assert_equal(masked_inside(list(range(5***REMOVED******REMOVED***, 1, 3***REMOVED***,
                     [0, 199, 199, 199, 4***REMOVED******REMOVED***
        assert_equal(masked_outside(list(range(5***REMOVED******REMOVED***, 1, 3***REMOVED***, [199, 1, 2, 3, 199***REMOVED******REMOVED***
        assert_equal(masked_inside(array(list(range(5***REMOVED******REMOVED***,
                                         mask=[1, 0, 0, 0, 0***REMOVED******REMOVED***, 1, 3***REMOVED***.mask,
                     [1, 1, 1, 1, 0***REMOVED******REMOVED***
        assert_equal(masked_outside(array(list(range(5***REMOVED******REMOVED***,
                                          mask=[0, 1, 0, 0, 0***REMOVED******REMOVED***, 1, 3***REMOVED***.mask,
                     [1, 1, 0, 0, 1***REMOVED******REMOVED***
        assert_equal(masked_equal(array(list(range(5***REMOVED******REMOVED***,
                                        mask=[1, 0, 0, 0, 0***REMOVED******REMOVED***, 2***REMOVED***.mask,
                     [1, 0, 1, 0, 0***REMOVED******REMOVED***
        assert_equal(masked_not_equal(array([2, 2, 1, 2, 1***REMOVED***,
                                            mask=[1, 0, 0, 0, 0***REMOVED******REMOVED***, 2***REMOVED***.mask,
                     [1, 0, 1, 0, 1***REMOVED******REMOVED***

    def test_round(self***REMOVED***:
        a = array([1.23456, 2.34567, 3.45678, 4.56789, 5.67890***REMOVED***,
                  mask=[0, 1, 0, 0, 0***REMOVED******REMOVED***
        assert_equal(a.round(***REMOVED***, [1., 2., 3., 5., 6.***REMOVED******REMOVED***
        assert_equal(a.round(1***REMOVED***, [1.2, 2.3, 3.5, 4.6, 5.7***REMOVED******REMOVED***
        assert_equal(a.round(3***REMOVED***, [1.235, 2.346, 3.457, 4.568, 5.679***REMOVED******REMOVED***
        b = empty_like(a***REMOVED***
        a.round(out=b***REMOVED***
        assert_equal(b, [1., 2., 3., 5., 6.***REMOVED******REMOVED***

        x = array([1., 2., 3., 4., 5.***REMOVED******REMOVED***
        c = array([1, 1, 1, 0, 0***REMOVED******REMOVED***
        x[2***REMOVED*** = masked
        z = where(c, x, -x***REMOVED***
        assert_equal(z, [1., 2., 0., -4., -5***REMOVED******REMOVED***
        c[0***REMOVED*** = masked
        z = where(c, x, -x***REMOVED***
        assert_equal(z, [1., 2., 0., -4., -5***REMOVED******REMOVED***
        assert_(z[0***REMOVED*** is masked***REMOVED***
        assert_(z[1***REMOVED*** is not masked***REMOVED***
        assert_(z[2***REMOVED*** is masked***REMOVED***

    def test_round_with_output(self***REMOVED***:
        # Testing round with an explicit output

        xm = array(np.random.uniform(0, 10, 12***REMOVED******REMOVED***.reshape(3, 4***REMOVED***
        xm[:, 0***REMOVED*** = xm[0***REMOVED*** = xm[-1, -1***REMOVED*** = masked

        # A ndarray as explicit input
        output = np.empty((3, 4***REMOVED***, dtype=float***REMOVED***
        output.fill(-9999***REMOVED***
        result = np.round(xm, decimals=2, out=output***REMOVED***
        # ... the result should be the given output
        self.assertTrue(result is output***REMOVED***
        assert_equal(result, xm.round(decimals=2, out=output***REMOVED******REMOVED***

        output = empty((3, 4***REMOVED***, dtype=float***REMOVED***
        result = xm.round(decimals=2, out=output***REMOVED***
        self.assertTrue(result is output***REMOVED***

    def test_round_with_scalar(self***REMOVED***:
        # Testing round with scalar/zero dimension input
        # GH issue 2244
        a = array(1.1, mask=[False***REMOVED******REMOVED***
        assert_equal(a.round(***REMOVED***, 1***REMOVED***

        a = array(1.1, mask=[True***REMOVED******REMOVED***
        assert_(a.round(***REMOVED*** is masked***REMOVED***

        a = array(1.1, mask=[False***REMOVED******REMOVED***
        output = np.empty(1, dtype=float***REMOVED***
        output.fill(-9999***REMOVED***
        a.round(out=output***REMOVED***
        assert_equal(output, 1***REMOVED***

        a = array(1.1, mask=[False***REMOVED******REMOVED***
        output = array(-9999., mask=[True***REMOVED******REMOVED***
        a.round(out=output***REMOVED***
        assert_equal(output[(***REMOVED******REMOVED***, 1***REMOVED***

        a = array(1.1, mask=[True***REMOVED******REMOVED***
        output = array(-9999., mask=[False***REMOVED******REMOVED***
        a.round(out=output***REMOVED***
        assert_(output[(***REMOVED******REMOVED*** is masked***REMOVED***

    def test_identity(self***REMOVED***:
        a = identity(5***REMOVED***
        self.assertTrue(isinstance(a, MaskedArray***REMOVED******REMOVED***
        assert_equal(a, np.identity(5***REMOVED******REMOVED***

    def test_power(self***REMOVED***:
        x = -1.1
        assert_almost_equal(power(x, 2.***REMOVED***, 1.21***REMOVED***
        self.assertTrue(power(x, masked***REMOVED*** is masked***REMOVED***
        x = array([-1.1, -1.1, 1.1, 1.1, 0.***REMOVED******REMOVED***
        b = array([0.5, 2., 0.5, 2., -1.***REMOVED***, mask=[0, 0, 0, 0, 1***REMOVED******REMOVED***
        y = power(x, b***REMOVED***
        assert_almost_equal(y, [0, 1.21, 1.04880884817, 1.21, 0.***REMOVED******REMOVED***
        assert_equal(y._mask, [1, 0, 0, 0, 1***REMOVED******REMOVED***
        b.mask = nomask
        y = power(x, b***REMOVED***
        assert_equal(y._mask, [1, 0, 0, 0, 1***REMOVED******REMOVED***
        z = x ** b
        assert_equal(z._mask, y._mask***REMOVED***
        assert_almost_equal(z, y***REMOVED***
        assert_almost_equal(z._data, y._data***REMOVED***
        x **= b
        assert_equal(x._mask, y._mask***REMOVED***
        assert_almost_equal(x, y***REMOVED***
        assert_almost_equal(x._data, y._data***REMOVED***

    def test_power_w_broadcasting(self***REMOVED***:
        # Test power w/ broadcasting
        a2 = np.array([[1., 2., 3.***REMOVED***, [4., 5., 6.***REMOVED******REMOVED******REMOVED***
        a2m = array(a2, mask=[[1, 0, 0***REMOVED***, [0, 0, 1***REMOVED******REMOVED******REMOVED***
        b1 = np.array([2, 4, 3***REMOVED******REMOVED***
        b2 = np.array([b1, b1***REMOVED******REMOVED***
        b2m = array(b2, mask=[[0, 1, 0***REMOVED***, [0, 1, 0***REMOVED******REMOVED******REMOVED***

        ctrl = array([[1 ** 2, 2 ** 4, 3 ** 3***REMOVED***, [4 ** 2, 5 ** 4, 6 ** 3***REMOVED******REMOVED***,
                     mask=[[1, 1, 0***REMOVED***, [0, 1, 1***REMOVED******REMOVED******REMOVED***
        # No broadcasting, base & exp w/ mask
        test = a2m ** b2m
        assert_equal(test, ctrl***REMOVED***
        assert_equal(test.mask, ctrl.mask***REMOVED***
        # No broadcasting, base w/ mask, exp w/o mask
        test = a2m ** b2
        assert_equal(test, ctrl***REMOVED***
        assert_equal(test.mask, a2m.mask***REMOVED***
        # No broadcasting, base w/o mask, exp w/ mask
        test = a2 ** b2m
        assert_equal(test, ctrl***REMOVED***
        assert_equal(test.mask, b2m.mask***REMOVED***

        ctrl = array([[2 ** 2, 4 ** 4, 3 ** 3***REMOVED***, [2 ** 2, 4 ** 4, 3 ** 3***REMOVED******REMOVED***,
                     mask=[[0, 1, 0***REMOVED***, [0, 1, 0***REMOVED******REMOVED******REMOVED***
        test = b1 ** b2m
        assert_equal(test, ctrl***REMOVED***
        assert_equal(test.mask, ctrl.mask***REMOVED***
        test = b2m ** b1
        assert_equal(test, ctrl***REMOVED***
        assert_equal(test.mask, ctrl.mask***REMOVED***

    def test_where(self***REMOVED***:
        # Test the where function
        x = np.array([1., 1., 1., -2., pi/2.0, 4., 5., -10., 10., 1., 2., 3.***REMOVED******REMOVED***
        y = np.array([5., 0., 3., 2., -1., -4., 0., -10., 10., 1., 0., 3.***REMOVED******REMOVED***
        m1 = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0***REMOVED***
        m2 = [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1***REMOVED***
        xm = masked_array(x, mask=m1***REMOVED***
        ym = masked_array(y, mask=m2***REMOVED***
        xm.set_fill_value(1e+20***REMOVED***

        d = where(xm > 2, xm, -9***REMOVED***
        assert_equal(d, [-9., -9., -9., -9., -9., 4.,
                         -9., -9., 10., -9., -9., 3.***REMOVED******REMOVED***
        assert_equal(d._mask, xm._mask***REMOVED***
        d = where(xm > 2, -9, ym***REMOVED***
        assert_equal(d, [5., 0., 3., 2., -1., -9.,
                         -9., -10., -9., 1., 0., -9.***REMOVED******REMOVED***
        assert_equal(d._mask, [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0***REMOVED******REMOVED***
        d = where(xm > 2, xm, masked***REMOVED***
        assert_equal(d, [-9., -9., -9., -9., -9., 4.,
                         -9., -9., 10., -9., -9., 3.***REMOVED******REMOVED***
        tmp = xm._mask.copy(***REMOVED***
        tmp[(xm <= 2***REMOVED***.filled(True***REMOVED******REMOVED*** = True
        assert_equal(d._mask, tmp***REMOVED***

        ixm = xm.astype(int***REMOVED***
        d = where(ixm > 2, ixm, masked***REMOVED***
        assert_equal(d, [-9, -9, -9, -9, -9, 4, -9, -9, 10, -9, -9, 3***REMOVED******REMOVED***
        assert_equal(d.dtype, ixm.dtype***REMOVED***

    def test_where_object(self***REMOVED***:
        a = np.array(None***REMOVED***
        b = masked_array(None***REMOVED***
        r = b.copy(***REMOVED***
        assert_equal(np.ma.where(True, a, a***REMOVED***, r***REMOVED***
        assert_equal(np.ma.where(True, b, b***REMOVED***, r***REMOVED***

    def test_where_with_masked_choice(self***REMOVED***:
        x = arange(10***REMOVED***
        x[3***REMOVED*** = masked
        c = x >= 8
        # Set False to masked
        z = where(c, x, masked***REMOVED***
        assert_(z.dtype is x.dtype***REMOVED***
        assert_(z[3***REMOVED*** is masked***REMOVED***
        assert_(z[4***REMOVED*** is masked***REMOVED***
        assert_(z[7***REMOVED*** is masked***REMOVED***
        assert_(z[8***REMOVED*** is not masked***REMOVED***
        assert_(z[9***REMOVED*** is not masked***REMOVED***
        assert_equal(x, z***REMOVED***
        # Set True to masked
        z = where(c, masked, x***REMOVED***
        assert_(z.dtype is x.dtype***REMOVED***
        assert_(z[3***REMOVED*** is masked***REMOVED***
        assert_(z[4***REMOVED*** is not masked***REMOVED***
        assert_(z[7***REMOVED*** is not masked***REMOVED***
        assert_(z[8***REMOVED*** is masked***REMOVED***
        assert_(z[9***REMOVED*** is masked***REMOVED***

    def test_where_with_masked_condition(self***REMOVED***:
        x = array([1., 2., 3., 4., 5.***REMOVED******REMOVED***
        c = array([1, 1, 1, 0, 0***REMOVED******REMOVED***
        x[2***REMOVED*** = masked
        z = where(c, x, -x***REMOVED***
        assert_equal(z, [1., 2., 0., -4., -5***REMOVED******REMOVED***
        c[0***REMOVED*** = masked
        z = where(c, x, -x***REMOVED***
        assert_equal(z, [1., 2., 0., -4., -5***REMOVED******REMOVED***
        assert_(z[0***REMOVED*** is masked***REMOVED***
        assert_(z[1***REMOVED*** is not masked***REMOVED***
        assert_(z[2***REMOVED*** is masked***REMOVED***

        x = arange(1, 6***REMOVED***
        x[-1***REMOVED*** = masked
        y = arange(1, 6***REMOVED*** * 10
        y[2***REMOVED*** = masked
        c = array([1, 1, 1, 0, 0***REMOVED***, mask=[1, 0, 0, 0, 0***REMOVED******REMOVED***
        cm = c.filled(1***REMOVED***
        z = where(c, x, y***REMOVED***
        zm = where(cm, x, y***REMOVED***
        assert_equal(z, zm***REMOVED***
        assert_(getmask(zm***REMOVED*** is nomask***REMOVED***
        assert_equal(zm, [1, 2, 3, 40, 50***REMOVED******REMOVED***
        z = where(c, masked, 1***REMOVED***
        assert_equal(z, [99, 99, 99, 1, 1***REMOVED******REMOVED***
        z = where(c, 1, masked***REMOVED***
        assert_equal(z, [99, 1, 1, 99, 99***REMOVED******REMOVED***

    def test_where_type(self***REMOVED***:
        # Test the type conservation with where
        x = np.arange(4, dtype=np.int32***REMOVED***
        y = np.arange(4, dtype=np.float32***REMOVED*** * 2.2
        test = where(x > 1.5, y, x***REMOVED***.dtype
        control = np.find_common_type([np.int32, np.float32***REMOVED***, [***REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

    def test_choose(self***REMOVED***:
        # Test choose
        choices = [[0, 1, 2, 3***REMOVED***, [10, 11, 12, 13***REMOVED***,
                   [20, 21, 22, 23***REMOVED***, [30, 31, 32, 33***REMOVED******REMOVED***
        chosen = choose([2, 3, 1, 0***REMOVED***, choices***REMOVED***
        assert_equal(chosen, array([20, 31, 12, 3***REMOVED******REMOVED******REMOVED***
        chosen = choose([2, 4, 1, 0***REMOVED***, choices, mode='clip'***REMOVED***
        assert_equal(chosen, array([20, 31, 12, 3***REMOVED******REMOVED******REMOVED***
        chosen = choose([2, 4, 1, 0***REMOVED***, choices, mode='wrap'***REMOVED***
        assert_equal(chosen, array([20, 1, 12, 3***REMOVED******REMOVED******REMOVED***
        # Check with some masked indices
        indices_ = array([2, 4, 1, 0***REMOVED***, mask=[1, 0, 0, 1***REMOVED******REMOVED***
        chosen = choose(indices_, choices, mode='wrap'***REMOVED***
        assert_equal(chosen, array([99, 1, 12, 99***REMOVED******REMOVED******REMOVED***
        assert_equal(chosen.mask, [1, 0, 0, 1***REMOVED******REMOVED***
        # Check with some masked choices
        choices = array(choices, mask=[[0, 0, 0, 1***REMOVED***, [1, 1, 0, 1***REMOVED***,
                                       [1, 0, 0, 0***REMOVED***, [0, 0, 0, 0***REMOVED******REMOVED******REMOVED***
        indices_ = [2, 3, 1, 0***REMOVED***
        chosen = choose(indices_, choices, mode='wrap'***REMOVED***
        assert_equal(chosen, array([20, 31, 12, 3***REMOVED******REMOVED******REMOVED***
        assert_equal(chosen.mask, [1, 0, 0, 1***REMOVED******REMOVED***

    def test_choose_with_out(self***REMOVED***:
        # Test choose with an explicit out keyword
        choices = [[0, 1, 2, 3***REMOVED***, [10, 11, 12, 13***REMOVED***,
                   [20, 21, 22, 23***REMOVED***, [30, 31, 32, 33***REMOVED******REMOVED***
        store = empty(4, dtype=int***REMOVED***
        chosen = choose([2, 3, 1, 0***REMOVED***, choices, out=store***REMOVED***
        assert_equal(store, array([20, 31, 12, 3***REMOVED******REMOVED******REMOVED***
        self.assertTrue(store is chosen***REMOVED***
        # Check with some masked indices + out
        store = empty(4, dtype=int***REMOVED***
        indices_ = array([2, 3, 1, 0***REMOVED***, mask=[1, 0, 0, 1***REMOVED******REMOVED***
        chosen = choose(indices_, choices, mode='wrap', out=store***REMOVED***
        assert_equal(store, array([99, 31, 12, 99***REMOVED******REMOVED******REMOVED***
        assert_equal(store.mask, [1, 0, 0, 1***REMOVED******REMOVED***
        # Check with some masked choices + out ina ndarray !
        choices = array(choices, mask=[[0, 0, 0, 1***REMOVED***, [1, 1, 0, 1***REMOVED***,
                                       [1, 0, 0, 0***REMOVED***, [0, 0, 0, 0***REMOVED******REMOVED******REMOVED***
        indices_ = [2, 3, 1, 0***REMOVED***
        store = empty(4, dtype=int***REMOVED***.view(ndarray***REMOVED***
        chosen = choose(indices_, choices, mode='wrap', out=store***REMOVED***
        assert_equal(store, array([999999, 31, 12, 999999***REMOVED******REMOVED******REMOVED***

    def test_reshape(self***REMOVED***:
        a = arange(10***REMOVED***
        a[0***REMOVED*** = masked
        # Try the default
        b = a.reshape((5, 2***REMOVED******REMOVED***
        assert_equal(b.shape, (5, 2***REMOVED******REMOVED***
        self.assertTrue(b.flags['C'***REMOVED******REMOVED***
        # Try w/ arguments as list instead of tuple
        b = a.reshape(5, 2***REMOVED***
        assert_equal(b.shape, (5, 2***REMOVED******REMOVED***
        self.assertTrue(b.flags['C'***REMOVED******REMOVED***
        # Try w/ order
        b = a.reshape((5, 2***REMOVED***, order='F'***REMOVED***
        assert_equal(b.shape, (5, 2***REMOVED******REMOVED***
        self.assertTrue(b.flags['F'***REMOVED******REMOVED***
        # Try w/ order
        b = a.reshape(5, 2, order='F'***REMOVED***
        assert_equal(b.shape, (5, 2***REMOVED******REMOVED***
        self.assertTrue(b.flags['F'***REMOVED******REMOVED***

        c = np.reshape(a, (2, 5***REMOVED******REMOVED***
        self.assertTrue(isinstance(c, MaskedArray***REMOVED******REMOVED***
        assert_equal(c.shape, (2, 5***REMOVED******REMOVED***
        self.assertTrue(c[0, 0***REMOVED*** is masked***REMOVED***
        self.assertTrue(c.flags['C'***REMOVED******REMOVED***

    def test_make_mask_descr(self***REMOVED***:
        # Test make_mask_descr
        # Flexible
        ntype = [('a', np.float***REMOVED***, ('b', np.float***REMOVED******REMOVED***
        test = make_mask_descr(ntype***REMOVED***
        assert_equal(test, [('a', np.bool***REMOVED***, ('b', np.bool***REMOVED******REMOVED******REMOVED***
        # Standard w/ shape
        ntype = (np.float, 2***REMOVED***
        test = make_mask_descr(ntype***REMOVED***
        assert_equal(test, (np.bool, 2***REMOVED******REMOVED***
        # Standard standard
        ntype = np.float
        test = make_mask_descr(ntype***REMOVED***
        assert_equal(test, np.dtype(np.bool***REMOVED******REMOVED***
        # Nested
        ntype = [('a', np.float***REMOVED***, ('b', [('ba', np.float***REMOVED***, ('bb', np.float***REMOVED******REMOVED******REMOVED******REMOVED***
        test = make_mask_descr(ntype***REMOVED***
        control = np.dtype([('a', 'b1'***REMOVED***, ('b', [('ba', 'b1'***REMOVED***, ('bb', 'b1'***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        # Named+ shape
        ntype = [('a', (np.float, 2***REMOVED******REMOVED******REMOVED***
        test = make_mask_descr(ntype***REMOVED***
        assert_equal(test, np.dtype([('a', (np.bool, 2***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        # 2 names
        ntype = [(('A', 'a'***REMOVED***, float***REMOVED******REMOVED***
        test = make_mask_descr(ntype***REMOVED***
        assert_equal(test, np.dtype([(('A', 'a'***REMOVED***, bool***REMOVED******REMOVED******REMOVED******REMOVED***

    def test_make_mask(self***REMOVED***:
        # Test make_mask
        # w/ a list as an input
        mask = [0, 1***REMOVED***
        test = make_mask(mask***REMOVED***
        assert_equal(test.dtype, MaskType***REMOVED***
        assert_equal(test, [0, 1***REMOVED******REMOVED***
        # w/ a ndarray as an input
        mask = np.array([0, 1***REMOVED***, dtype=np.bool***REMOVED***
        test = make_mask(mask***REMOVED***
        assert_equal(test.dtype, MaskType***REMOVED***
        assert_equal(test, [0, 1***REMOVED******REMOVED***
        # w/ a flexible-type ndarray as an input - use default
        mdtype = [('a', np.bool***REMOVED***, ('b', np.bool***REMOVED******REMOVED***
        mask = np.array([(0, 0***REMOVED***, (0, 1***REMOVED******REMOVED***, dtype=mdtype***REMOVED***
        test = make_mask(mask***REMOVED***
        assert_equal(test.dtype, MaskType***REMOVED***
        assert_equal(test, [1, 1***REMOVED******REMOVED***
        # w/ a flexible-type ndarray as an input - use input dtype
        mdtype = [('a', np.bool***REMOVED***, ('b', np.bool***REMOVED******REMOVED***
        mask = np.array([(0, 0***REMOVED***, (0, 1***REMOVED******REMOVED***, dtype=mdtype***REMOVED***
        test = make_mask(mask, dtype=mask.dtype***REMOVED***
        assert_equal(test.dtype, mdtype***REMOVED***
        assert_equal(test, mask***REMOVED***
        # w/ a flexible-type ndarray as an input - use input dtype
        mdtype = [('a', np.float***REMOVED***, ('b', np.float***REMOVED******REMOVED***
        bdtype = [('a', np.bool***REMOVED***, ('b', np.bool***REMOVED******REMOVED***
        mask = np.array([(0, 0***REMOVED***, (0, 1***REMOVED******REMOVED***, dtype=mdtype***REMOVED***
        test = make_mask(mask, dtype=mask.dtype***REMOVED***
        assert_equal(test.dtype, bdtype***REMOVED***
        assert_equal(test, np.array([(0, 0***REMOVED***, (0, 1***REMOVED******REMOVED***, dtype=bdtype***REMOVED******REMOVED***

        # test that nomask is returned when m is nomask.
        bools = [True, False***REMOVED***
        dtypes = [MaskType, np.float***REMOVED***
        msgformat = 'copy=%s, shrink=%s, dtype=%s'
        for cpy, shr, dt in itertools.product(bools, bools, dtypes***REMOVED***:
            res = make_mask(nomask, copy=cpy, shrink=shr, dtype=dt***REMOVED***
            assert_(res is nomask, msgformat % (cpy, shr, dt***REMOVED******REMOVED***


    def test_mask_or(self***REMOVED***:
        # Initialize
        mtype = [('a', np.bool***REMOVED***, ('b', np.bool***REMOVED******REMOVED***
        mask = np.array([(0, 0***REMOVED***, (0, 1***REMOVED***, (1, 0***REMOVED***, (0, 0***REMOVED******REMOVED***, dtype=mtype***REMOVED***
        # Test using nomask as input
        test = mask_or(mask, nomask***REMOVED***
        assert_equal(test, mask***REMOVED***
        test = mask_or(nomask, mask***REMOVED***
        assert_equal(test, mask***REMOVED***
        # Using False as input
        test = mask_or(mask, False***REMOVED***
        assert_equal(test, mask***REMOVED***
        # Using another array w / the same dtype
        other = np.array([(0, 1***REMOVED***, (0, 1***REMOVED***, (0, 1***REMOVED***, (0, 1***REMOVED******REMOVED***, dtype=mtype***REMOVED***
        test = mask_or(mask, other***REMOVED***
        control = np.array([(0, 1***REMOVED***, (0, 1***REMOVED***, (1, 1***REMOVED***, (0, 1***REMOVED******REMOVED***, dtype=mtype***REMOVED***
        assert_equal(test, control***REMOVED***
        # Using another array w / a different dtype
        othertype = [('A', np.bool***REMOVED***, ('B', np.bool***REMOVED******REMOVED***
        other = np.array([(0, 1***REMOVED***, (0, 1***REMOVED***, (0, 1***REMOVED***, (0, 1***REMOVED******REMOVED***, dtype=othertype***REMOVED***
        ***REMOVED***
            test = mask_or(mask, other***REMOVED***
        except ValueError:
            pass
        # Using nested arrays
        dtype = [('a', np.bool***REMOVED***, ('b', [('ba', np.bool***REMOVED***, ('bb', np.bool***REMOVED******REMOVED******REMOVED******REMOVED***
        amask = np.array([(0, (1, 0***REMOVED******REMOVED***, (0, (1, 0***REMOVED******REMOVED******REMOVED***, dtype=dtype***REMOVED***
        bmask = np.array([(1, (0, 1***REMOVED******REMOVED***, (0, (0, 0***REMOVED******REMOVED******REMOVED***, dtype=dtype***REMOVED***
        cntrl = np.array([(1, (1, 1***REMOVED******REMOVED***, (0, (1, 0***REMOVED******REMOVED******REMOVED***, dtype=dtype***REMOVED***
        assert_equal(mask_or(amask, bmask***REMOVED***, cntrl***REMOVED***

    def test_flatten_mask(self***REMOVED***:
        # Tests flatten mask
        # Standarad dtype
        mask = np.array([0, 0, 1***REMOVED***, dtype=np.bool***REMOVED***
        assert_equal(flatten_mask(mask***REMOVED***, mask***REMOVED***
        # Flexible dtype
        mask = np.array([(0, 0***REMOVED***, (0, 1***REMOVED******REMOVED***, dtype=[('a', bool***REMOVED***, ('b', bool***REMOVED******REMOVED******REMOVED***
        test = flatten_mask(mask***REMOVED***
        control = np.array([0, 0, 0, 1***REMOVED***, dtype=bool***REMOVED***
        assert_equal(test, control***REMOVED***

        mdtype = [('a', bool***REMOVED***, ('b', [('ba', bool***REMOVED***, ('bb', bool***REMOVED******REMOVED******REMOVED******REMOVED***
        data = [(0, (0, 0***REMOVED******REMOVED***, (0, (0, 1***REMOVED******REMOVED******REMOVED***
        mask = np.array(data, dtype=mdtype***REMOVED***
        test = flatten_mask(mask***REMOVED***
        control = np.array([0, 0, 0, 0, 0, 1***REMOVED***, dtype=bool***REMOVED***
        assert_equal(test, control***REMOVED***

    def test_on_ndarray(self***REMOVED***:
        # Test functions on ndarrays
        a = np.array([1, 2, 3, 4***REMOVED******REMOVED***
        m = array(a, mask=False***REMOVED***
        test = anom(a***REMOVED***
        assert_equal(test, m.anom(***REMOVED******REMOVED***
        test = reshape(a, (2, 2***REMOVED******REMOVED***
        assert_equal(test, m.reshape(2, 2***REMOVED******REMOVED***

    def test_compress(self***REMOVED***:
        # Test compress function on ndarray and masked array
        # Address Github #2495.
        arr = np.arange(8***REMOVED***
        arr.shape = 4, 2
        cond = np.array([True, False, True, True***REMOVED******REMOVED***
        control = arr[[0, 2, 3***REMOVED******REMOVED***
        test = np.ma.compress(cond, arr, axis=0***REMOVED***
        assert_equal(test, control***REMOVED***
        marr = np.ma.array(arr***REMOVED***
        test = np.ma.compress(cond, marr, axis=0***REMOVED***
        assert_equal(test, control***REMOVED***

    def test_compressed(self***REMOVED***:
        # Test ma.compressed function.
        # Address gh-4026
        a = np.ma.array([1, 2***REMOVED******REMOVED***
        test = np.ma.compressed(a***REMOVED***
        assert_(type(test***REMOVED*** is np.ndarray***REMOVED***

        # Test case when input data is ndarray subclass
        class A(np.ndarray***REMOVED***:
            pass

        a = np.ma.array(A(shape=0***REMOVED******REMOVED***
        test = np.ma.compressed(a***REMOVED***
        assert_(type(test***REMOVED*** is A***REMOVED***

        # Test that compress flattens
        test = np.ma.compressed([[1***REMOVED***,[2***REMOVED******REMOVED******REMOVED***
        assert_equal(test.ndim, 1***REMOVED***
        test = np.ma.compressed([[[[[1***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        assert_equal(test.ndim, 1***REMOVED***

        # Test case when input is MaskedArray subclass
        class M(MaskedArray***REMOVED***:
            pass

        test = np.ma.compressed(M(shape=(0,1,2***REMOVED******REMOVED******REMOVED***
        assert_equal(test.ndim, 1***REMOVED***

        # with .compessed(***REMOVED*** overriden
        class M(MaskedArray***REMOVED***:
            def compressed(self***REMOVED***:
                return 42

        test = np.ma.compressed(M(shape=(0,1,2***REMOVED******REMOVED******REMOVED***
        assert_equal(test, 42***REMOVED***


class TestMaskedFields(TestCase***REMOVED***:

    def setUp(self***REMOVED***:
        ilist = [1, 2, 3, 4, 5***REMOVED***
        flist = [1.1, 2.2, 3.3, 4.4, 5.5***REMOVED***
        slist = ['one', 'two', 'three', 'four', 'five'***REMOVED***
        ddtype = [('a', int***REMOVED***, ('b', float***REMOVED***, ('c', '|S8'***REMOVED******REMOVED***
        mdtype = [('a', bool***REMOVED***, ('b', bool***REMOVED***, ('c', bool***REMOVED******REMOVED***
        mask = [0, 1, 0, 0, 1***REMOVED***
        base = array(list(zip(ilist, flist, slist***REMOVED******REMOVED***, mask=mask, dtype=ddtype***REMOVED***
        self.data = dict(base=base, mask=mask, ddtype=ddtype, mdtype=mdtype***REMOVED***

    def test_set_records_masks(self***REMOVED***:
        base = self.data['base'***REMOVED***
        mdtype = self.data['mdtype'***REMOVED***
        # Set w/ nomask or masked
        base.mask = nomask
        assert_equal_records(base._mask, np.zeros(base.shape, dtype=mdtype***REMOVED******REMOVED***
        base.mask = masked
        assert_equal_records(base._mask, np.ones(base.shape, dtype=mdtype***REMOVED******REMOVED***
        # Set w/ simple boolean
        base.mask = False
        assert_equal_records(base._mask, np.zeros(base.shape, dtype=mdtype***REMOVED******REMOVED***
        base.mask = True
        assert_equal_records(base._mask, np.ones(base.shape, dtype=mdtype***REMOVED******REMOVED***
        # Set w/ list
        base.mask = [0, 0, 0, 1, 1***REMOVED***
        assert_equal_records(base._mask,
                             np.array([(x, x, x***REMOVED*** for x in [0, 0, 0, 1, 1***REMOVED******REMOVED***,
                                      dtype=mdtype***REMOVED******REMOVED***

    def test_set_record_element(self***REMOVED***:
        # Check setting an element of a record***REMOVED***
        base = self.data['base'***REMOVED***
        (base_a, base_b, base_c***REMOVED*** = (base['a'***REMOVED***, base['b'***REMOVED***, base['c'***REMOVED******REMOVED***
        base[0***REMOVED*** = (pi, pi, 'pi'***REMOVED***

        assert_equal(base_a.dtype, int***REMOVED***
        assert_equal(base_a._data, [3, 2, 3, 4, 5***REMOVED******REMOVED***

        assert_equal(base_b.dtype, float***REMOVED***
        assert_equal(base_b._data, [pi, 2.2, 3.3, 4.4, 5.5***REMOVED******REMOVED***

        assert_equal(base_c.dtype, '|S8'***REMOVED***
        assert_equal(base_c._data,
                     asbytes_nested(['pi', 'two', 'three', 'four', 'five'***REMOVED******REMOVED******REMOVED***

    def test_set_record_slice(self***REMOVED***:
        base = self.data['base'***REMOVED***
        (base_a, base_b, base_c***REMOVED*** = (base['a'***REMOVED***, base['b'***REMOVED***, base['c'***REMOVED******REMOVED***
        base[:3***REMOVED*** = (pi, pi, 'pi'***REMOVED***

        assert_equal(base_a.dtype, int***REMOVED***
        assert_equal(base_a._data, [3, 3, 3, 4, 5***REMOVED******REMOVED***

        assert_equal(base_b.dtype, float***REMOVED***
        assert_equal(base_b._data, [pi, pi, pi, 4.4, 5.5***REMOVED******REMOVED***

        assert_equal(base_c.dtype, '|S8'***REMOVED***
        assert_equal(base_c._data,
                     asbytes_nested(['pi', 'pi', 'pi', 'four', 'five'***REMOVED******REMOVED******REMOVED***

    def test_mask_element(self***REMOVED***:
        "Check record access"
        base = self.data['base'***REMOVED***
        base[0***REMOVED*** = masked

        for n in ('a', 'b', 'c'***REMOVED***:
            assert_equal(base[n***REMOVED***.mask, [1, 1, 0, 0, 1***REMOVED******REMOVED***
            assert_equal(base[n***REMOVED***._data, base._data[n***REMOVED******REMOVED***

    def test_getmaskarray(self***REMOVED***:
        # Test getmaskarray on flexible dtype
        ndtype = [('a', int***REMOVED***, ('b', float***REMOVED******REMOVED***
        test = empty(3, dtype=ndtype***REMOVED***
        assert_equal(getmaskarray(test***REMOVED***,
                     np.array([(0, 0***REMOVED***, (0, 0***REMOVED***, (0, 0***REMOVED******REMOVED***,
                              dtype=[('a', '|b1'***REMOVED***, ('b', '|b1'***REMOVED******REMOVED******REMOVED******REMOVED***
        test[:***REMOVED*** = masked
        assert_equal(getmaskarray(test***REMOVED***,
                     np.array([(1, 1***REMOVED***, (1, 1***REMOVED***, (1, 1***REMOVED******REMOVED***,
                              dtype=[('a', '|b1'***REMOVED***, ('b', '|b1'***REMOVED******REMOVED******REMOVED******REMOVED***

    def test_view(self***REMOVED***:
        # Test view w/ flexible dtype
        iterator = list(zip(np.arange(10***REMOVED***, np.random.rand(10***REMOVED******REMOVED******REMOVED***
        data = np.array(iterator***REMOVED***
        a = array(iterator, dtype=[('a', float***REMOVED***, ('b', float***REMOVED******REMOVED******REMOVED***
        a.mask[0***REMOVED*** = (1, 0***REMOVED***
        controlmask = np.array([1***REMOVED*** + 19 * [0***REMOVED***, dtype=bool***REMOVED***
        # Transform globally to simple dtype
        test = a.view(float***REMOVED***
        assert_equal(test, data.ravel(***REMOVED******REMOVED***
        assert_equal(test.mask, controlmask***REMOVED***
        # Transform globally to dty
        test = a.view((float, 2***REMOVED******REMOVED***
        assert_equal(test, data***REMOVED***
        assert_equal(test.mask, controlmask.reshape(-1, 2***REMOVED******REMOVED***

        test = a.view((float, 2***REMOVED***, np.matrix***REMOVED***
        assert_equal(test, data***REMOVED***
        self.assertTrue(isinstance(test, np.matrix***REMOVED******REMOVED***

    def test_getitem(self***REMOVED***:
        ndtype = [('a', float***REMOVED***, ('b', float***REMOVED******REMOVED***
        a = array(list(zip(np.random.rand(10***REMOVED***, np.arange(10***REMOVED******REMOVED******REMOVED***, dtype=ndtype***REMOVED***
        a.mask = np.array(list(zip([0, 0, 0, 0, 0, 0, 0, 0, 1, 1***REMOVED***,
                                   [1, 0, 0, 0, 0, 0, 0, 0, 1, 0***REMOVED******REMOVED******REMOVED***,
                          dtype=[('a', bool***REMOVED***, ('b', bool***REMOVED******REMOVED******REMOVED***
        # No mask
        self.assertTrue(isinstance(a[1***REMOVED***, MaskedArray***REMOVED******REMOVED***
        # One element masked
        self.assertTrue(isinstance(a[0***REMOVED***, MaskedArray***REMOVED******REMOVED***
        assert_equal_records(a[0***REMOVED***._data, a._data[0***REMOVED******REMOVED***
        assert_equal_records(a[0***REMOVED***._mask, a._mask[0***REMOVED******REMOVED***
        # All element masked
        self.assertTrue(isinstance(a[-2***REMOVED***, MaskedArray***REMOVED******REMOVED***
        assert_equal_records(a[-2***REMOVED***._data, a._data[-2***REMOVED******REMOVED***
        assert_equal_records(a[-2***REMOVED***._mask, a._mask[-2***REMOVED******REMOVED***

    def test_setitem(self***REMOVED***:
        # Issue 4866: check that one can set individual items in [record***REMOVED***[col***REMOVED***
        # and [col***REMOVED***[record***REMOVED*** order
        ndtype = np.dtype([('a', float***REMOVED***, ('b', int***REMOVED******REMOVED******REMOVED***
        ma = np.ma.MaskedArray([(1.0, 1***REMOVED***, (2.0, 2***REMOVED******REMOVED***, dtype=ndtype***REMOVED***
        ma['a'***REMOVED***[1***REMOVED*** = 3.0
        assert_equal(ma['a'***REMOVED***, np.array([1.0, 3.0***REMOVED******REMOVED******REMOVED***
        ma[1***REMOVED***['a'***REMOVED*** = 4.0
        assert_equal(ma['a'***REMOVED***, np.array([1.0, 4.0***REMOVED******REMOVED******REMOVED***
        # Issue 2403
        mdtype = np.dtype([('a', bool***REMOVED***, ('b', bool***REMOVED******REMOVED******REMOVED***
        # soft mask
        control = np.array([(False, True***REMOVED***, (True, True***REMOVED******REMOVED***, dtype=mdtype***REMOVED***
        a = np.ma.masked_all((2,***REMOVED***, dtype=ndtype***REMOVED***
        a['a'***REMOVED***[0***REMOVED*** = 2
        assert_equal(a.mask, control***REMOVED***
        a = np.ma.masked_all((2,***REMOVED***, dtype=ndtype***REMOVED***
        a[0***REMOVED***['a'***REMOVED*** = 2
        assert_equal(a.mask, control***REMOVED***
        # hard mask
        control = np.array([(True, True***REMOVED***, (True, True***REMOVED******REMOVED***, dtype=mdtype***REMOVED***
        a = np.ma.masked_all((2,***REMOVED***, dtype=ndtype***REMOVED***
        a.harden_mask(***REMOVED***
        a['a'***REMOVED***[0***REMOVED*** = 2
        assert_equal(a.mask, control***REMOVED***
        a = np.ma.masked_all((2,***REMOVED***, dtype=ndtype***REMOVED***
        a.harden_mask(***REMOVED***
        a[0***REMOVED***['a'***REMOVED*** = 2
        assert_equal(a.mask, control***REMOVED***

    def test_element_len(self***REMOVED***:
        # check that len(***REMOVED*** works for mvoid (Github issue #576***REMOVED***
        for rec in self.data['base'***REMOVED***:
            assert_equal(len(rec***REMOVED***, len(self.data['ddtype'***REMOVED******REMOVED******REMOVED***


class TestMaskedView(TestCase***REMOVED***:

    def setUp(self***REMOVED***:
        iterator = list(zip(np.arange(10***REMOVED***, np.random.rand(10***REMOVED******REMOVED******REMOVED***
        data = np.array(iterator***REMOVED***
        a = array(iterator, dtype=[('a', float***REMOVED***, ('b', float***REMOVED******REMOVED******REMOVED***
        a.mask[0***REMOVED*** = (1, 0***REMOVED***
        controlmask = np.array([1***REMOVED*** + 19 * [0***REMOVED***, dtype=bool***REMOVED***
        self.data = (data, a, controlmask***REMOVED***

    def test_view_to_nothing(self***REMOVED***:
        (data, a, controlmask***REMOVED*** = self.data
        test = a.view(***REMOVED***
        self.assertTrue(isinstance(test, MaskedArray***REMOVED******REMOVED***
        assert_equal(test._data, a._data***REMOVED***
        assert_equal(test._mask, a._mask***REMOVED***

    def test_view_to_type(self***REMOVED***:
        (data, a, controlmask***REMOVED*** = self.data
        test = a.view(np.ndarray***REMOVED***
        self.assertTrue(not isinstance(test, MaskedArray***REMOVED******REMOVED***
        assert_equal(test, a._data***REMOVED***
        assert_equal_records(test, data.view(a.dtype***REMOVED***.squeeze(***REMOVED******REMOVED***

    def test_view_to_simple_dtype(self***REMOVED***:
        (data, a, controlmask***REMOVED*** = self.data
        # View globally
        test = a.view(float***REMOVED***
        self.assertTrue(isinstance(test, MaskedArray***REMOVED******REMOVED***
        assert_equal(test, data.ravel(***REMOVED******REMOVED***
        assert_equal(test.mask, controlmask***REMOVED***

    def test_view_to_flexible_dtype(self***REMOVED***:
        (data, a, controlmask***REMOVED*** = self.data

        test = a.view([('A', float***REMOVED***, ('B', float***REMOVED******REMOVED******REMOVED***
        assert_equal(test.mask.dtype.names, ('A', 'B'***REMOVED******REMOVED***
        assert_equal(test['A'***REMOVED***, a['a'***REMOVED******REMOVED***
        assert_equal(test['B'***REMOVED***, a['b'***REMOVED******REMOVED***

        test = a[0***REMOVED***.view([('A', float***REMOVED***, ('B', float***REMOVED******REMOVED******REMOVED***
        self.assertTrue(isinstance(test, MaskedArray***REMOVED******REMOVED***
        assert_equal(test.mask.dtype.names, ('A', 'B'***REMOVED******REMOVED***
        assert_equal(test['A'***REMOVED***, a['a'***REMOVED***[0***REMOVED******REMOVED***
        assert_equal(test['B'***REMOVED***, a['b'***REMOVED***[0***REMOVED******REMOVED***

        test = a[-1***REMOVED***.view([('A', float***REMOVED***, ('B', float***REMOVED******REMOVED******REMOVED***
        self.assertTrue(isinstance(test, MaskedArray***REMOVED******REMOVED***
        assert_equal(test.dtype.names, ('A', 'B'***REMOVED******REMOVED***
        assert_equal(test['A'***REMOVED***, a['a'***REMOVED***[-1***REMOVED******REMOVED***
        assert_equal(test['B'***REMOVED***, a['b'***REMOVED***[-1***REMOVED******REMOVED***

    def test_view_to_subdtype(self***REMOVED***:
        (data, a, controlmask***REMOVED*** = self.data
        # View globally
        test = a.view((float, 2***REMOVED******REMOVED***
        self.assertTrue(isinstance(test, MaskedArray***REMOVED******REMOVED***
        assert_equal(test, data***REMOVED***
        assert_equal(test.mask, controlmask.reshape(-1, 2***REMOVED******REMOVED***
        # View on 1 masked element
        test = a[0***REMOVED***.view((float, 2***REMOVED******REMOVED***
        self.assertTrue(isinstance(test, MaskedArray***REMOVED******REMOVED***
        assert_equal(test, data[0***REMOVED******REMOVED***
        assert_equal(test.mask, (1, 0***REMOVED******REMOVED***
        # View on 1 unmasked element
        test = a[-1***REMOVED***.view((float, 2***REMOVED******REMOVED***
        self.assertTrue(isinstance(test, MaskedArray***REMOVED******REMOVED***
        assert_equal(test, data[-1***REMOVED******REMOVED***

    def test_view_to_dtype_and_type(self***REMOVED***:
        (data, a, controlmask***REMOVED*** = self.data

        test = a.view((float, 2***REMOVED***, np.matrix***REMOVED***
        assert_equal(test, data***REMOVED***
        self.assertTrue(isinstance(test, np.matrix***REMOVED******REMOVED***
        self.assertTrue(not isinstance(test, MaskedArray***REMOVED******REMOVED***

class TestOptionalArgs(TestCase***REMOVED***:
    def test_ndarrayfuncs(self***REMOVED***:
        # test axis arg behaves the same as ndarray (including mutliple axes***REMOVED***

        d = np.arange(24.0***REMOVED***.reshape((2,3,4***REMOVED******REMOVED***
        m = np.zeros(24, dtype=bool***REMOVED***.reshape((2,3,4***REMOVED******REMOVED***
        # mask out last element of last dimension
        m[:,:,-1***REMOVED*** = True
        a = np.ma.array(d, mask=m***REMOVED***

        def testaxis(f, a, d***REMOVED***:
            numpy_f = numpy.__getattribute__(f***REMOVED***
            ma_f = np.ma.__getattribute__(f***REMOVED***

            # test axis arg
            assert_equal(ma_f(a, axis=1***REMOVED***[...,:-1***REMOVED***, numpy_f(d[...,:-1***REMOVED***, axis=1***REMOVED******REMOVED***
            assert_equal(ma_f(a, axis=(0,1***REMOVED******REMOVED***[...,:-1***REMOVED***,
                         numpy_f(d[...,:-1***REMOVED***, axis=(0,1***REMOVED******REMOVED******REMOVED***

        def testkeepdims(f, a, d***REMOVED***:
            numpy_f = numpy.__getattribute__(f***REMOVED***
            ma_f = np.ma.__getattribute__(f***REMOVED***

            # test keepdims arg
            assert_equal(ma_f(a, keepdims=True***REMOVED***.shape,
                         numpy_f(d, keepdims=True***REMOVED***.shape***REMOVED***
            assert_equal(ma_f(a, keepdims=False***REMOVED***.shape,
                         numpy_f(d, keepdims=False***REMOVED***.shape***REMOVED***

            # test both at once
            assert_equal(ma_f(a, axis=1, keepdims=True***REMOVED***[...,:-1***REMOVED***,
                         numpy_f(d[...,:-1***REMOVED***, axis=1, keepdims=True***REMOVED******REMOVED***
            assert_equal(ma_f(a, axis=(0,1***REMOVED***, keepdims=True***REMOVED***[...,:-1***REMOVED***,
                         numpy_f(d[...,:-1***REMOVED***, axis=(0,1***REMOVED***, keepdims=True***REMOVED******REMOVED***

        for f in ['sum', 'prod', 'mean', 'var', 'std'***REMOVED***:
            testaxis(f, a, d***REMOVED***
            testkeepdims(f, a, d***REMOVED***

        for f in ['min', 'max'***REMOVED***:
            testaxis(f, a, d***REMOVED***

        d = (np.arange(24***REMOVED***.reshape((2,3,4***REMOVED******REMOVED***%2 == 0***REMOVED***
        a = np.ma.array(d, mask=m***REMOVED***
        for f in ['all', 'any'***REMOVED***:
            testaxis(f, a, d***REMOVED***
            testkeepdims(f, a, d***REMOVED***

    def test_count(self***REMOVED***:
        # test np.ma.count specially

        d = np.arange(24.0***REMOVED***.reshape((2,3,4***REMOVED******REMOVED***
        m = np.zeros(24, dtype=bool***REMOVED***.reshape((2,3,4***REMOVED******REMOVED***
        m[:,0,:***REMOVED*** = True
        a = np.ma.array(d, mask=m***REMOVED***

        assert_equal(count(a***REMOVED***, 16***REMOVED***
        assert_equal(count(a, axis=1***REMOVED***, 2*ones((2,4***REMOVED******REMOVED******REMOVED***
        assert_equal(count(a, axis=(0,1***REMOVED******REMOVED***, 4*ones((4,***REMOVED******REMOVED******REMOVED***
        assert_equal(count(a, keepdims=True***REMOVED***, 16*ones((1,1,1***REMOVED******REMOVED******REMOVED***
        assert_equal(count(a, axis=1, keepdims=True***REMOVED***, 2*ones((2,1,4***REMOVED******REMOVED******REMOVED***
        assert_equal(count(a, axis=(0,1***REMOVED***, keepdims=True***REMOVED***, 4*ones((1,1,4***REMOVED******REMOVED******REMOVED***
        assert_equal(count(a, axis=-2***REMOVED***, 2*ones((2,4***REMOVED******REMOVED******REMOVED***
        assert_raises(ValueError, count, a, axis=(1,1***REMOVED******REMOVED***
        assert_raises(ValueError, count, a, axis=3***REMOVED***

        # check the 'nomask' path
        a = np.ma.array(d, mask=nomask***REMOVED***

        assert_equal(count(a***REMOVED***, 24***REMOVED***
        assert_equal(count(a, axis=1***REMOVED***, 3*ones((2,4***REMOVED******REMOVED******REMOVED***
        assert_equal(count(a, axis=(0,1***REMOVED******REMOVED***, 6*ones((4,***REMOVED******REMOVED******REMOVED***
        assert_equal(count(a, keepdims=True***REMOVED***, 24*ones((1,1,1***REMOVED******REMOVED******REMOVED***
        assert_equal(np.ndim(count(a, keepdims=True***REMOVED******REMOVED***, 3***REMOVED***
        assert_equal(count(a, axis=1, keepdims=True***REMOVED***, 3*ones((2,1,4***REMOVED******REMOVED******REMOVED***
        assert_equal(count(a, axis=(0,1***REMOVED***, keepdims=True***REMOVED***, 6*ones((1,1,4***REMOVED******REMOVED******REMOVED***
        assert_equal(count(a, axis=-2***REMOVED***, 3*ones((2,4***REMOVED******REMOVED******REMOVED***
        assert_raises(ValueError, count, a, axis=(1,1***REMOVED******REMOVED***
        assert_raises(ValueError, count, a, axis=3***REMOVED***

        # check the 'masked' singleton
        assert_equal(count(np.ma.masked***REMOVED***, 0***REMOVED***

        # check 0-d arrays do not allow axis > 0
        assert_raises(ValueError, count, np.ma.array(1***REMOVED***, axis=1***REMOVED***


def test_masked_array(***REMOVED***:
    a = np.ma.array([0, 1, 2, 3***REMOVED***, mask=[0, 0, 1, 0***REMOVED******REMOVED***
    assert_equal(np.argwhere(a***REMOVED***, [[1***REMOVED***, [3***REMOVED******REMOVED******REMOVED***

def test_append_masked_array(***REMOVED***:
    a = np.ma.masked_equal([1,2,3***REMOVED***, value=2***REMOVED***
    b = np.ma.masked_equal([4,3,2***REMOVED***, value=2***REMOVED***

    result = np.ma.append(a, b***REMOVED***
    expected_data = [1, 2, 3, 4, 3, 2***REMOVED***
    expected_mask = [False, True, False, False, False, True***REMOVED***
    assert_array_equal(result.data, expected_data***REMOVED***
    assert_array_equal(result.mask, expected_mask***REMOVED***

    a = np.ma.masked_all((2,2***REMOVED******REMOVED***
    b = np.ma.ones((3,1***REMOVED******REMOVED***

    result = np.ma.append(a, b***REMOVED***
    expected_data = [1***REMOVED*** * 3
    expected_mask = [True***REMOVED*** * 4 + [False***REMOVED*** * 3
    assert_array_equal(result.data[-3***REMOVED***, expected_data***REMOVED***
    assert_array_equal(result.mask, expected_mask***REMOVED***

    result = np.ma.append(a, b, axis=None***REMOVED***
    assert_array_equal(result.data[-3***REMOVED***, expected_data***REMOVED***
    assert_array_equal(result.mask, expected_mask***REMOVED***


def test_append_masked_array_along_axis(***REMOVED***:
    a = np.ma.masked_equal([1,2,3***REMOVED***, value=2***REMOVED***
    b = np.ma.masked_values([[4, 5, 6***REMOVED***, [7, 8, 9***REMOVED******REMOVED***, 7***REMOVED***

    # When `axis` is specified, `values` must have the correct shape.
    assert_raises(ValueError, np.ma.append, a, b, axis=0***REMOVED***

    result = np.ma.append(a[np.newaxis,:***REMOVED***, b, axis=0***REMOVED***
    expected = np.ma.arange(1, 10***REMOVED***
    expected[[1, 6***REMOVED******REMOVED*** = np.ma.masked
    expected = expected.reshape((3,3***REMOVED******REMOVED***
    assert_array_equal(result.data, expected.data***REMOVED***
    assert_array_equal(result.mask, expected.mask***REMOVED***


def test_default_fill_value_complex(***REMOVED***:
    # regression test for Python 3, where 'unicode' was not defined
    assert_(default_fill_value(1 + 1j***REMOVED*** == 1.e20 + 0.0j***REMOVED***

###############################################################################
if __name__ == "__main__":
    run_module_suite(***REMOVED***
