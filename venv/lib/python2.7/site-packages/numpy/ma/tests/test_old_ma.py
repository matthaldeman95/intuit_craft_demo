from __future__ import division, absolute_import, print_function

from functools import reduce

import numpy as np
import numpy.core.umath as umath
import numpy.core.fromnumeric as fromnumeric
from numpy.testing import TestCase, run_module_suite, assert_
from numpy.ma.testutils import assert_array_equal
from numpy.ma import (
    MaskType, MaskedArray, absolute, add, all, allclose, allequal, alltrue,
    arange, arccos, arcsin, arctan, arctan2, array, average, choose,
    concatenate, conjugate, cos, cosh, count, divide, equal, exp, filled,
    getmask, greater, greater_equal, inner, isMaskedArray, less,
    less_equal, log, log10, make_mask, masked, masked_array, masked_equal,
    masked_greater, masked_greater_equal, masked_inside, masked_less,
    masked_less_equal, masked_not_equal, masked_outside,
    masked_print_option, masked_values, masked_where, maximum, minimum,
    multiply, nomask, nonzero, not_equal, ones, outer, product, put, ravel,
    repeat, resize, shape, sin, sinh, sometrue, sort, sqrt, subtract, sum,
    take, tan, tanh, transpose, where, zeros,
    ***REMOVED***

pi = np.pi


def eq(v, w, msg=''***REMOVED***:
    result = allclose(v, w***REMOVED***
    if not result:
        print("Not eq:%s\n%s\n----%s" % (msg, str(v***REMOVED***, str(w***REMOVED******REMOVED******REMOVED***
    return result


class TestMa(TestCase***REMOVED***:

    def setUp(self***REMOVED***:
        x = np.array([1., 1., 1., -2., pi/2.0, 4., 5., -10., 10., 1., 2., 3.***REMOVED******REMOVED***
        y = np.array([5., 0., 3., 2., -1., -4., 0., -10., 10., 1., 0., 3.***REMOVED******REMOVED***
        a10 = 10.
        m1 = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0***REMOVED***
        m2 = [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1***REMOVED***
        xm = array(x, mask=m1***REMOVED***
        ym = array(y, mask=m2***REMOVED***
        z = np.array([-.5, 0., .5, .8***REMOVED******REMOVED***
        zm = array(z, mask=[0, 1, 0, 0***REMOVED******REMOVED***
        xf = np.where(m1, 1e+20, x***REMOVED***
        s = x.shape
        xm.set_fill_value(1e+20***REMOVED***
        self.d = (x, y, a10, m1, m2, xm, ym, z, zm, xf, s***REMOVED***

    def test_testBasic1d(self***REMOVED***:
        # Test of basic array creation and properties in 1 dimension.
        (x, y, a10, m1, m2, xm, ym, z, zm, xf, s***REMOVED*** = self.d
        self.assertFalse(isMaskedArray(x***REMOVED******REMOVED***
        self.assertTrue(isMaskedArray(xm***REMOVED******REMOVED***
        self.assertEqual(shape(xm***REMOVED***, s***REMOVED***
        self.assertEqual(xm.shape, s***REMOVED***
        self.assertEqual(xm.dtype, x.dtype***REMOVED***
        self.assertEqual(xm.size, reduce(lambda x, y:x * y, s***REMOVED******REMOVED***
        self.assertEqual(count(xm***REMOVED***, len(m1***REMOVED*** - reduce(lambda x, y:x + y, m1***REMOVED******REMOVED***
        self.assertTrue(eq(xm, xf***REMOVED******REMOVED***
        self.assertTrue(eq(filled(xm, 1.e20***REMOVED***, xf***REMOVED******REMOVED***
        self.assertTrue(eq(x, xm***REMOVED******REMOVED***

    def test_testBasic2d(self***REMOVED***:
        # Test of basic array creation and properties in 2 dimensions.
        for s in [(4, 3***REMOVED***, (6, 2***REMOVED******REMOVED***:
            (x, y, a10, m1, m2, xm, ym, z, zm, xf, s***REMOVED*** = self.d
            x.shape = s
            y.shape = s
            xm.shape = s
            ym.shape = s
            xf.shape = s

            self.assertFalse(isMaskedArray(x***REMOVED******REMOVED***
            self.assertTrue(isMaskedArray(xm***REMOVED******REMOVED***
            self.assertEqual(shape(xm***REMOVED***, s***REMOVED***
            self.assertEqual(xm.shape, s***REMOVED***
            self.assertEqual(xm.size, reduce(lambda x, y:x * y, s***REMOVED******REMOVED***
            self.assertEqual(count(xm***REMOVED***,
                             len(m1***REMOVED*** - reduce(lambda x, y:x + y, m1***REMOVED******REMOVED***
            self.assertTrue(eq(xm, xf***REMOVED******REMOVED***
            self.assertTrue(eq(filled(xm, 1.e20***REMOVED***, xf***REMOVED******REMOVED***
            self.assertTrue(eq(x, xm***REMOVED******REMOVED***
            self.setUp(***REMOVED***

    def test_testArithmetic(self***REMOVED***:
        # Test of basic arithmetic.
        (x, y, a10, m1, m2, xm, ym, z, zm, xf, s***REMOVED*** = self.d
        a2d = array([[1, 2***REMOVED***, [0, 4***REMOVED******REMOVED******REMOVED***
        a2dm = masked_array(a2d, [[0, 0***REMOVED***, [1, 0***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(a2d * a2d, a2d * a2dm***REMOVED******REMOVED***
        self.assertTrue(eq(a2d + a2d, a2d + a2dm***REMOVED******REMOVED***
        self.assertTrue(eq(a2d - a2d, a2d - a2dm***REMOVED******REMOVED***
        for s in [(12,***REMOVED***, (4, 3***REMOVED***, (2, 6***REMOVED******REMOVED***:
            x = x.reshape(s***REMOVED***
            y = y.reshape(s***REMOVED***
            xm = xm.reshape(s***REMOVED***
            ym = ym.reshape(s***REMOVED***
            xf = xf.reshape(s***REMOVED***
            self.assertTrue(eq(-x, -xm***REMOVED******REMOVED***
            self.assertTrue(eq(x + y, xm + ym***REMOVED******REMOVED***
            self.assertTrue(eq(x - y, xm - ym***REMOVED******REMOVED***
            self.assertTrue(eq(x * y, xm * ym***REMOVED******REMOVED***
            with np.errstate(divide='ignore', invalid='ignore'***REMOVED***:
                self.assertTrue(eq(x / y, xm / ym***REMOVED******REMOVED***
            self.assertTrue(eq(a10 + y, a10 + ym***REMOVED******REMOVED***
            self.assertTrue(eq(a10 - y, a10 - ym***REMOVED******REMOVED***
            self.assertTrue(eq(a10 * y, a10 * ym***REMOVED******REMOVED***
            with np.errstate(divide='ignore', invalid='ignore'***REMOVED***:
                self.assertTrue(eq(a10 / y, a10 / ym***REMOVED******REMOVED***
            self.assertTrue(eq(x + a10, xm + a10***REMOVED******REMOVED***
            self.assertTrue(eq(x - a10, xm - a10***REMOVED******REMOVED***
            self.assertTrue(eq(x * a10, xm * a10***REMOVED******REMOVED***
            self.assertTrue(eq(x / a10, xm / a10***REMOVED******REMOVED***
            self.assertTrue(eq(x ** 2, xm ** 2***REMOVED******REMOVED***
            self.assertTrue(eq(abs(x***REMOVED*** ** 2.5, abs(xm***REMOVED*** ** 2.5***REMOVED******REMOVED***
            self.assertTrue(eq(x ** y, xm ** ym***REMOVED******REMOVED***
            self.assertTrue(eq(np.add(x, y***REMOVED***, add(xm, ym***REMOVED******REMOVED******REMOVED***
            self.assertTrue(eq(np.subtract(x, y***REMOVED***, subtract(xm, ym***REMOVED******REMOVED******REMOVED***
            self.assertTrue(eq(np.multiply(x, y***REMOVED***, multiply(xm, ym***REMOVED******REMOVED******REMOVED***
            with np.errstate(divide='ignore', invalid='ignore'***REMOVED***:
                self.assertTrue(eq(np.divide(x, y***REMOVED***, divide(xm, ym***REMOVED******REMOVED******REMOVED***

    def test_testMixedArithmetic(self***REMOVED***:
        na = np.array([1***REMOVED******REMOVED***
        ma = array([1***REMOVED******REMOVED***
        self.assertTrue(isinstance(na + ma, MaskedArray***REMOVED******REMOVED***
        self.assertTrue(isinstance(ma + na, MaskedArray***REMOVED******REMOVED***

    def test_testUfuncs1(self***REMOVED***:
        # Test various functions such as sin, cos.
        (x, y, a10, m1, m2, xm, ym, z, zm, xf, s***REMOVED*** = self.d
        self.assertTrue(eq(np.cos(x***REMOVED***, cos(xm***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(np.cosh(x***REMOVED***, cosh(xm***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(np.sin(x***REMOVED***, sin(xm***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(np.sinh(x***REMOVED***, sinh(xm***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(np.tan(x***REMOVED***, tan(xm***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(np.tanh(x***REMOVED***, tanh(xm***REMOVED******REMOVED******REMOVED***
        with np.errstate(divide='ignore', invalid='ignore'***REMOVED***:
            self.assertTrue(eq(np.sqrt(abs(x***REMOVED******REMOVED***, sqrt(xm***REMOVED******REMOVED******REMOVED***
            self.assertTrue(eq(np.log(abs(x***REMOVED******REMOVED***, log(xm***REMOVED******REMOVED******REMOVED***
            self.assertTrue(eq(np.log10(abs(x***REMOVED******REMOVED***, log10(xm***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(np.exp(x***REMOVED***, exp(xm***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(np.arcsin(z***REMOVED***, arcsin(zm***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(np.arccos(z***REMOVED***, arccos(zm***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(np.arctan(z***REMOVED***, arctan(zm***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(np.arctan2(x, y***REMOVED***, arctan2(xm, ym***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(np.absolute(x***REMOVED***, absolute(xm***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(np.equal(x, y***REMOVED***, equal(xm, ym***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(np.not_equal(x, y***REMOVED***, not_equal(xm, ym***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(np.less(x, y***REMOVED***, less(xm, ym***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(np.greater(x, y***REMOVED***, greater(xm, ym***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(np.less_equal(x, y***REMOVED***, less_equal(xm, ym***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(np.greater_equal(x, y***REMOVED***, greater_equal(xm, ym***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(np.conjugate(x***REMOVED***, conjugate(xm***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(np.concatenate((x, y***REMOVED******REMOVED***, concatenate((xm, ym***REMOVED******REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(np.concatenate((x, y***REMOVED******REMOVED***, concatenate((x, y***REMOVED******REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(np.concatenate((x, y***REMOVED******REMOVED***, concatenate((xm, y***REMOVED******REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(np.concatenate((x, y, x***REMOVED******REMOVED***, concatenate((x, ym, x***REMOVED******REMOVED******REMOVED******REMOVED***

    def test_xtestCount(self***REMOVED***:
        # Test count
        ott = array([0., 1., 2., 3.***REMOVED***, mask=[1, 0, 0, 0***REMOVED******REMOVED***
        self.assertTrue(count(ott***REMOVED***.dtype.type is np.intp***REMOVED***
        self.assertEqual(3, count(ott***REMOVED******REMOVED***
        self.assertEqual(1, count(1***REMOVED******REMOVED***
        self.assertTrue(eq(0, array(1, mask=[1***REMOVED******REMOVED******REMOVED******REMOVED***
        ott = ott.reshape((2, 2***REMOVED******REMOVED***
        self.assertTrue(count(ott***REMOVED***.dtype.type is np.intp***REMOVED***
        assert_(isinstance(count(ott, 0***REMOVED***, np.ndarray***REMOVED******REMOVED***
        self.assertTrue(count(ott***REMOVED***.dtype.type is np.intp***REMOVED***
        self.assertTrue(eq(3, count(ott***REMOVED******REMOVED******REMOVED***
        assert_(getmask(count(ott, 0***REMOVED******REMOVED*** is nomask***REMOVED***
        self.assertTrue(eq([1, 2***REMOVED***, count(ott, 0***REMOVED******REMOVED******REMOVED***

    def test_testMinMax(self***REMOVED***:
        # Test minimum and maximum.
        (x, y, a10, m1, m2, xm, ym, z, zm, xf, s***REMOVED*** = self.d
        xr = np.ravel(x***REMOVED***  # max doesn't work if shaped
        xmr = ravel(xm***REMOVED***

        # true because of careful selection of data
        self.assertTrue(eq(max(xr***REMOVED***, maximum(xmr***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(min(xr***REMOVED***, minimum(xmr***REMOVED******REMOVED******REMOVED***

    def test_testAddSumProd(self***REMOVED***:
        # Test add, sum, product.
        (x, y, a10, m1, m2, xm, ym, z, zm, xf, s***REMOVED*** = self.d
        self.assertTrue(eq(np.add.reduce(x***REMOVED***, add.reduce(x***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(np.add.accumulate(x***REMOVED***, add.accumulate(x***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(4, sum(array(4***REMOVED***, axis=0***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(4, sum(array(4***REMOVED***, axis=0***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(np.sum(x, axis=0***REMOVED***, sum(x, axis=0***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(np.sum(filled(xm, 0***REMOVED***, axis=0***REMOVED***, sum(xm, axis=0***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(np.sum(x, 0***REMOVED***, sum(x, 0***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(np.product(x, axis=0***REMOVED***, product(x, axis=0***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(np.product(x, 0***REMOVED***, product(x, 0***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(np.product(filled(xm, 1***REMOVED***, axis=0***REMOVED***,
                           product(xm, axis=0***REMOVED******REMOVED******REMOVED***
        if len(s***REMOVED*** > 1:
            self.assertTrue(eq(np.concatenate((x, y***REMOVED***, 1***REMOVED***,
                               concatenate((xm, ym***REMOVED***, 1***REMOVED******REMOVED******REMOVED***
            self.assertTrue(eq(np.add.reduce(x, 1***REMOVED***, add.reduce(x, 1***REMOVED******REMOVED******REMOVED***
            self.assertTrue(eq(np.sum(x, 1***REMOVED***, sum(x, 1***REMOVED******REMOVED******REMOVED***
            self.assertTrue(eq(np.product(x, 1***REMOVED***, product(x, 1***REMOVED******REMOVED******REMOVED***

    def test_testCI(self***REMOVED***:
        # Test of conversions and indexing
        x1 = np.array([1, 2, 4, 3***REMOVED******REMOVED***
        x2 = array(x1, mask=[1, 0, 0, 0***REMOVED******REMOVED***
        x3 = array(x1, mask=[0, 1, 0, 1***REMOVED******REMOVED***
        x4 = array(x1***REMOVED***
        # test conversion to strings
        str(x2***REMOVED***  # raises?
        repr(x2***REMOVED***  # raises?
        assert_(eq(np.sort(x1***REMOVED***, sort(x2, fill_value=0***REMOVED******REMOVED******REMOVED***
        # tests of indexing
        assert_(type(x2[1***REMOVED******REMOVED*** is type(x1[1***REMOVED******REMOVED******REMOVED***
        assert_(x1[1***REMOVED*** == x2[1***REMOVED******REMOVED***
        assert_(x2[0***REMOVED*** is masked***REMOVED***
        assert_(eq(x1[2***REMOVED***, x2[2***REMOVED******REMOVED******REMOVED***
        assert_(eq(x1[2:5***REMOVED***, x2[2:5***REMOVED******REMOVED******REMOVED***
        assert_(eq(x1[:***REMOVED***, x2[:***REMOVED******REMOVED******REMOVED***
        assert_(eq(x1[1:***REMOVED***, x3[1:***REMOVED******REMOVED******REMOVED***
        x1[2***REMOVED*** = 9
        x2[2***REMOVED*** = 9
        assert_(eq(x1, x2***REMOVED******REMOVED***
        x1[1:3***REMOVED*** = 99
        x2[1:3***REMOVED*** = 99
        assert_(eq(x1, x2***REMOVED******REMOVED***
        x2[1***REMOVED*** = masked
        assert_(eq(x1, x2***REMOVED******REMOVED***
        x2[1:3***REMOVED*** = masked
        assert_(eq(x1, x2***REMOVED******REMOVED***
        x2[:***REMOVED*** = x1
        x2[1***REMOVED*** = masked
        assert_(allequal(getmask(x2***REMOVED***, array([0, 1, 0, 0***REMOVED******REMOVED******REMOVED******REMOVED***
        x3[:***REMOVED*** = masked_array([1, 2, 3, 4***REMOVED***, [0, 1, 1, 0***REMOVED******REMOVED***
        assert_(allequal(getmask(x3***REMOVED***, array([0, 1, 1, 0***REMOVED******REMOVED******REMOVED******REMOVED***
        x4[:***REMOVED*** = masked_array([1, 2, 3, 4***REMOVED***, [0, 1, 1, 0***REMOVED******REMOVED***
        assert_(allequal(getmask(x4***REMOVED***, array([0, 1, 1, 0***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_(allequal(x4, array([1, 2, 3, 4***REMOVED******REMOVED******REMOVED******REMOVED***
        x1 = np.arange(5***REMOVED*** * 1.0
        x2 = masked_values(x1, 3.0***REMOVED***
        assert_(eq(x1, x2***REMOVED******REMOVED***
        assert_(allequal(array([0, 0, 0, 1, 0***REMOVED***, MaskType***REMOVED***, x2.mask***REMOVED******REMOVED***
        assert_(eq(3.0, x2.fill_value***REMOVED******REMOVED***
        x1 = array([1, 'hello', 2, 3***REMOVED***, object***REMOVED***
        x2 = np.array([1, 'hello', 2, 3***REMOVED***, object***REMOVED***
        s1 = x1[1***REMOVED***
        s2 = x2[1***REMOVED***
        self.assertEqual(type(s2***REMOVED***, str***REMOVED***
        self.assertEqual(type(s1***REMOVED***, str***REMOVED***
        self.assertEqual(s1, s2***REMOVED***
        assert_(x1[1:1***REMOVED***.shape == (0,***REMOVED******REMOVED***

    def test_testCopySize(self***REMOVED***:
        # Tests of some subtle points of copying and sizing.
        n = [0, 0, 1, 0, 0***REMOVED***
        m = make_mask(n***REMOVED***
        m2 = make_mask(m***REMOVED***
        self.assertTrue(m is m2***REMOVED***
        m3 = make_mask(m, copy=1***REMOVED***
        self.assertTrue(m is not m3***REMOVED***

        x1 = np.arange(5***REMOVED***
        y1 = array(x1, mask=m***REMOVED***
        self.assertTrue(y1._data is not x1***REMOVED***
        self.assertTrue(allequal(x1, y1._data***REMOVED******REMOVED***
        self.assertTrue(y1.mask is m***REMOVED***

        y1a = array(y1, copy=0***REMOVED***
        self.assertTrue(y1a.mask is y1.mask***REMOVED***

        y2 = array(x1, mask=m, copy=0***REMOVED***
        self.assertTrue(y2.mask is m***REMOVED***
        self.assertTrue(y2[2***REMOVED*** is masked***REMOVED***
        y2[2***REMOVED*** = 9
        self.assertTrue(y2[2***REMOVED*** is not masked***REMOVED***
        self.assertTrue(y2.mask is not m***REMOVED***
        self.assertTrue(allequal(y2.mask, 0***REMOVED******REMOVED***

        y3 = array(x1 * 1.0, mask=m***REMOVED***
        self.assertTrue(filled(y3***REMOVED***.dtype is (x1 * 1.0***REMOVED***.dtype***REMOVED***

        x4 = arange(4***REMOVED***
        x4[2***REMOVED*** = masked
        y4 = resize(x4, (8,***REMOVED******REMOVED***
        self.assertTrue(eq(concatenate([x4, x4***REMOVED******REMOVED***, y4***REMOVED******REMOVED***
        self.assertTrue(eq(getmask(y4***REMOVED***, [0, 0, 1, 0, 0, 0, 1, 0***REMOVED******REMOVED******REMOVED***
        y5 = repeat(x4, (2, 2, 2, 2***REMOVED***, axis=0***REMOVED***
        self.assertTrue(eq(y5, [0, 0, 1, 1, 2, 2, 3, 3***REMOVED******REMOVED******REMOVED***
        y6 = repeat(x4, 2, axis=0***REMOVED***
        self.assertTrue(eq(y5, y6***REMOVED******REMOVED***

    def test_testPut(self***REMOVED***:
        # Test of put
        d = arange(5***REMOVED***
        n = [0, 0, 0, 1, 1***REMOVED***
        m = make_mask(n***REMOVED***
        x = array(d, mask=m***REMOVED***
        self.assertTrue(x[3***REMOVED*** is masked***REMOVED***
        self.assertTrue(x[4***REMOVED*** is masked***REMOVED***
        x[[1, 4***REMOVED******REMOVED*** = [10, 40***REMOVED***
        self.assertTrue(x.mask is not m***REMOVED***
        self.assertTrue(x[3***REMOVED*** is masked***REMOVED***
        self.assertTrue(x[4***REMOVED*** is not masked***REMOVED***
        self.assertTrue(eq(x, [0, 10, 2, -1, 40***REMOVED******REMOVED******REMOVED***

        x = array(d, mask=m***REMOVED***
        x.put([0, 1, 2***REMOVED***, [-1, 100, 200***REMOVED******REMOVED***
        self.assertTrue(eq(x, [-1, 100, 200, 0, 0***REMOVED******REMOVED******REMOVED***
        self.assertTrue(x[3***REMOVED*** is masked***REMOVED***
        self.assertTrue(x[4***REMOVED*** is masked***REMOVED***

    def test_testMaPut(self***REMOVED***:
        (x, y, a10, m1, m2, xm, ym, z, zm, xf, s***REMOVED*** = self.d
        m = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1***REMOVED***
        i = np.nonzero(m***REMOVED***[0***REMOVED***
        put(ym, i, zm***REMOVED***
        assert_(all(take(ym, i, axis=0***REMOVED*** == zm***REMOVED******REMOVED***

    def test_testOddFeatures(self***REMOVED***:
        # Test of other odd features
        x = arange(20***REMOVED***
        x = x.reshape(4, 5***REMOVED***
        x.flat[5***REMOVED*** = 12
        assert_(x[1, 0***REMOVED*** == 12***REMOVED***
        z = x + 10j * x
        assert_(eq(z.real, x***REMOVED******REMOVED***
        assert_(eq(z.imag, 10 * x***REMOVED******REMOVED***
        assert_(eq((z * conjugate(z***REMOVED******REMOVED***.real, 101 * x * x***REMOVED******REMOVED***
        z.imag[...***REMOVED*** = 0.0

        x = arange(10***REMOVED***
        x[3***REMOVED*** = masked
        assert_(str(x[3***REMOVED******REMOVED*** == str(masked***REMOVED******REMOVED***
        c = x >= 8
        assert_(count(where(c, masked, masked***REMOVED******REMOVED*** == 0***REMOVED***
        assert_(shape(where(c, masked, masked***REMOVED******REMOVED*** == c.shape***REMOVED***
        z = where(c, x, masked***REMOVED***
        assert_(z.dtype is x.dtype***REMOVED***
        assert_(z[3***REMOVED*** is masked***REMOVED***
        assert_(z[4***REMOVED*** is masked***REMOVED***
        assert_(z[7***REMOVED*** is masked***REMOVED***
        assert_(z[8***REMOVED*** is not masked***REMOVED***
        assert_(z[9***REMOVED*** is not masked***REMOVED***
        assert_(eq(x, z***REMOVED******REMOVED***
        z = where(c, masked, x***REMOVED***
        assert_(z.dtype is x.dtype***REMOVED***
        assert_(z[3***REMOVED*** is masked***REMOVED***
        assert_(z[4***REMOVED*** is not masked***REMOVED***
        assert_(z[7***REMOVED*** is not masked***REMOVED***
        assert_(z[8***REMOVED*** is masked***REMOVED***
        assert_(z[9***REMOVED*** is masked***REMOVED***
        z = masked_where(c, x***REMOVED***
        assert_(z.dtype is x.dtype***REMOVED***
        assert_(z[3***REMOVED*** is masked***REMOVED***
        assert_(z[4***REMOVED*** is not masked***REMOVED***
        assert_(z[7***REMOVED*** is not masked***REMOVED***
        assert_(z[8***REMOVED*** is masked***REMOVED***
        assert_(z[9***REMOVED*** is masked***REMOVED***
        assert_(eq(x, z***REMOVED******REMOVED***
        x = array([1., 2., 3., 4., 5.***REMOVED******REMOVED***
        c = array([1, 1, 1, 0, 0***REMOVED******REMOVED***
        x[2***REMOVED*** = masked
        z = where(c, x, -x***REMOVED***
        assert_(eq(z, [1., 2., 0., -4., -5***REMOVED******REMOVED******REMOVED***
        c[0***REMOVED*** = masked
        z = where(c, x, -x***REMOVED***
        assert_(eq(z, [1., 2., 0., -4., -5***REMOVED******REMOVED******REMOVED***
        assert_(z[0***REMOVED*** is masked***REMOVED***
        assert_(z[1***REMOVED*** is not masked***REMOVED***
        assert_(z[2***REMOVED*** is masked***REMOVED***
        assert_(eq(masked_where(greater(x, 2***REMOVED***, x***REMOVED***, masked_greater(x, 2***REMOVED******REMOVED******REMOVED***
        assert_(eq(masked_where(greater_equal(x, 2***REMOVED***, x***REMOVED***,
                   masked_greater_equal(x, 2***REMOVED******REMOVED******REMOVED***
        assert_(eq(masked_where(less(x, 2***REMOVED***, x***REMOVED***, masked_less(x, 2***REMOVED******REMOVED******REMOVED***
        assert_(eq(masked_where(less_equal(x, 2***REMOVED***, x***REMOVED***, masked_less_equal(x, 2***REMOVED******REMOVED******REMOVED***
        assert_(eq(masked_where(not_equal(x, 2***REMOVED***, x***REMOVED***, masked_not_equal(x, 2***REMOVED******REMOVED******REMOVED***
        assert_(eq(masked_where(equal(x, 2***REMOVED***, x***REMOVED***, masked_equal(x, 2***REMOVED******REMOVED******REMOVED***
        assert_(eq(masked_where(not_equal(x, 2***REMOVED***, x***REMOVED***, masked_not_equal(x, 2***REMOVED******REMOVED******REMOVED***
        assert_(eq(masked_inside(list(range(5***REMOVED******REMOVED***, 1, 3***REMOVED***, [0, 199, 199, 199, 4***REMOVED******REMOVED******REMOVED***
        assert_(eq(masked_outside(list(range(5***REMOVED******REMOVED***, 1, 3***REMOVED***, [199, 1, 2, 3, 199***REMOVED******REMOVED******REMOVED***
        assert_(eq(masked_inside(array(list(range(5***REMOVED******REMOVED***,
                                       mask=[1, 0, 0, 0, 0***REMOVED******REMOVED***, 1, 3***REMOVED***.mask,
                   [1, 1, 1, 1, 0***REMOVED******REMOVED******REMOVED***
        assert_(eq(masked_outside(array(list(range(5***REMOVED******REMOVED***,
                                        mask=[0, 1, 0, 0, 0***REMOVED******REMOVED***, 1, 3***REMOVED***.mask,
                   [1, 1, 0, 0, 1***REMOVED******REMOVED******REMOVED***
        assert_(eq(masked_equal(array(list(range(5***REMOVED******REMOVED***,
                                      mask=[1, 0, 0, 0, 0***REMOVED******REMOVED***, 2***REMOVED***.mask,
                   [1, 0, 1, 0, 0***REMOVED******REMOVED******REMOVED***
        assert_(eq(masked_not_equal(array([2, 2, 1, 2, 1***REMOVED***,
                                          mask=[1, 0, 0, 0, 0***REMOVED******REMOVED***, 2***REMOVED***.mask,
                   [1, 0, 1, 0, 1***REMOVED******REMOVED******REMOVED***
        assert_(eq(masked_where([1, 1, 0, 0, 0***REMOVED***, [1, 2, 3, 4, 5***REMOVED******REMOVED***,
                   [99, 99, 3, 4, 5***REMOVED******REMOVED******REMOVED***
        atest = ones((10, 10, 10***REMOVED***, dtype=np.float32***REMOVED***
        btest = zeros(atest.shape, MaskType***REMOVED***
        ctest = masked_where(btest, atest***REMOVED***
        assert_(eq(atest, ctest***REMOVED******REMOVED***
        z = choose(c, (-x, x***REMOVED******REMOVED***
        assert_(eq(z, [1., 2., 0., -4., -5***REMOVED******REMOVED******REMOVED***
        assert_(z[0***REMOVED*** is masked***REMOVED***
        assert_(z[1***REMOVED*** is not masked***REMOVED***
        assert_(z[2***REMOVED*** is masked***REMOVED***
        x = arange(6***REMOVED***
        x[5***REMOVED*** = masked
        y = arange(6***REMOVED*** * 10
        y[2***REMOVED*** = masked
        c = array([1, 1, 1, 0, 0, 0***REMOVED***, mask=[1, 0, 0, 0, 0, 0***REMOVED******REMOVED***
        cm = c.filled(1***REMOVED***
        z = where(c, x, y***REMOVED***
        zm = where(cm, x, y***REMOVED***
        assert_(eq(z, zm***REMOVED******REMOVED***
        assert_(getmask(zm***REMOVED*** is nomask***REMOVED***
        assert_(eq(zm, [0, 1, 2, 30, 40, 50***REMOVED******REMOVED******REMOVED***
        z = where(c, masked, 1***REMOVED***
        assert_(eq(z, [99, 99, 99, 1, 1, 1***REMOVED******REMOVED******REMOVED***
        z = where(c, 1, masked***REMOVED***
        assert_(eq(z, [99, 1, 1, 99, 99, 99***REMOVED******REMOVED******REMOVED***

    def test_testMinMax2(self***REMOVED***:
        # Test of minumum, maximum.
        assert_(eq(minimum([1, 2, 3***REMOVED***, [4, 0, 9***REMOVED******REMOVED***, [1, 0, 3***REMOVED******REMOVED******REMOVED***
        assert_(eq(maximum([1, 2, 3***REMOVED***, [4, 0, 9***REMOVED******REMOVED***, [4, 2, 9***REMOVED******REMOVED******REMOVED***
        x = arange(5***REMOVED***
        y = arange(5***REMOVED*** - 2
        x[3***REMOVED*** = masked
        y[0***REMOVED*** = masked
        assert_(eq(minimum(x, y***REMOVED***, where(less(x, y***REMOVED***, x, y***REMOVED******REMOVED******REMOVED***
        assert_(eq(maximum(x, y***REMOVED***, where(greater(x, y***REMOVED***, x, y***REMOVED******REMOVED******REMOVED***
        assert_(minimum(x***REMOVED*** == 0***REMOVED***
        assert_(maximum(x***REMOVED*** == 4***REMOVED***

    def test_testTakeTransposeInnerOuter(self***REMOVED***:
        # Test of take, transpose, inner, outer products
        x = arange(24***REMOVED***
        y = np.arange(24***REMOVED***
        x[5:6***REMOVED*** = masked
        x = x.reshape(2, 3, 4***REMOVED***
        y = y.reshape(2, 3, 4***REMOVED***
        assert_(eq(np.transpose(y, (2, 0, 1***REMOVED******REMOVED***, transpose(x, (2, 0, 1***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_(eq(np.take(y, (2, 0, 1***REMOVED***, 1***REMOVED***, take(x, (2, 0, 1***REMOVED***, 1***REMOVED******REMOVED******REMOVED***
        assert_(eq(np.inner(filled(x, 0***REMOVED***, filled(y, 0***REMOVED******REMOVED***,
                   inner(x, y***REMOVED******REMOVED******REMOVED***
        assert_(eq(np.outer(filled(x, 0***REMOVED***, filled(y, 0***REMOVED******REMOVED***,
                   outer(x, y***REMOVED******REMOVED******REMOVED***
        y = array(['abc', 1, 'def', 2, 3***REMOVED***, object***REMOVED***
        y[2***REMOVED*** = masked
        t = take(y, [0, 3, 4***REMOVED******REMOVED***
        assert_(t[0***REMOVED*** == 'abc'***REMOVED***
        assert_(t[1***REMOVED*** == 2***REMOVED***
        assert_(t[2***REMOVED*** == 3***REMOVED***

    def test_testInplace(self***REMOVED***:
        # Test of inplace operations and rich comparisons
        y = arange(10***REMOVED***

        x = arange(10***REMOVED***
        xm = arange(10***REMOVED***
        xm[2***REMOVED*** = masked
        x += 1
        assert_(eq(x, y + 1***REMOVED******REMOVED***
        xm += 1
        assert_(eq(x, y + 1***REMOVED******REMOVED***

        x = arange(10***REMOVED***
        xm = arange(10***REMOVED***
        xm[2***REMOVED*** = masked
        x -= 1
        assert_(eq(x, y - 1***REMOVED******REMOVED***
        xm -= 1
        assert_(eq(xm, y - 1***REMOVED******REMOVED***

        x = arange(10***REMOVED*** * 1.0
        xm = arange(10***REMOVED*** * 1.0
        xm[2***REMOVED*** = masked
        x *= 2.0
        assert_(eq(x, y * 2***REMOVED******REMOVED***
        xm *= 2.0
        assert_(eq(xm, y * 2***REMOVED******REMOVED***

        x = arange(10***REMOVED*** * 2
        xm = arange(10***REMOVED***
        xm[2***REMOVED*** = masked
        x //= 2
        assert_(eq(x, y***REMOVED******REMOVED***
        xm //= 2
        assert_(eq(x, y***REMOVED******REMOVED***

        x = arange(10***REMOVED*** * 1.0
        xm = arange(10***REMOVED*** * 1.0
        xm[2***REMOVED*** = masked
        x /= 2.0
        assert_(eq(x, y / 2.0***REMOVED******REMOVED***
        xm /= arange(10***REMOVED***
        assert_(eq(xm, ones((10,***REMOVED******REMOVED******REMOVED******REMOVED***

        x = arange(10***REMOVED***.astype(np.float32***REMOVED***
        xm = arange(10***REMOVED***
        xm[2***REMOVED*** = masked
        x += 1.
        assert_(eq(x, y + 1.***REMOVED******REMOVED***

    def test_testPickle(self***REMOVED***:
        # Test of pickling
        import pickle
        x = arange(12***REMOVED***
        x[4:10:2***REMOVED*** = masked
        x = x.reshape(4, 3***REMOVED***
        s = pickle.dumps(x***REMOVED***
        y = pickle.loads(s***REMOVED***
        assert_(eq(x, y***REMOVED******REMOVED***

    def test_testMasked(self***REMOVED***:
        # Test of masked element
        xx = arange(6***REMOVED***
        xx[1***REMOVED*** = masked
        self.assertTrue(str(masked***REMOVED*** == '--'***REMOVED***
        self.assertTrue(xx[1***REMOVED*** is masked***REMOVED***
        self.assertEqual(filled(xx[1***REMOVED***, 0***REMOVED***, 0***REMOVED***

    def test_testAverage1(self***REMOVED***:
        # Test of average.
        ott = array([0., 1., 2., 3.***REMOVED***, mask=[1, 0, 0, 0***REMOVED******REMOVED***
        self.assertTrue(eq(2.0, average(ott, axis=0***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(2.0, average(ott, weights=[1., 1., 2., 1.***REMOVED******REMOVED******REMOVED******REMOVED***
        result, wts = average(ott, weights=[1., 1., 2., 1.***REMOVED***, returned=1***REMOVED***
        self.assertTrue(eq(2.0, result***REMOVED******REMOVED***
        self.assertTrue(wts == 4.0***REMOVED***
        ott[:***REMOVED*** = masked
        self.assertTrue(average(ott, axis=0***REMOVED*** is masked***REMOVED***
        ott = array([0., 1., 2., 3.***REMOVED***, mask=[1, 0, 0, 0***REMOVED******REMOVED***
        ott = ott.reshape(2, 2***REMOVED***
        ott[:, 1***REMOVED*** = masked
        self.assertTrue(eq(average(ott, axis=0***REMOVED***, [2.0, 0.0***REMOVED******REMOVED******REMOVED***
        self.assertTrue(average(ott, axis=1***REMOVED***[0***REMOVED*** is masked***REMOVED***
        self.assertTrue(eq([2., 0.***REMOVED***, average(ott, axis=0***REMOVED******REMOVED******REMOVED***
        result, wts = average(ott, axis=0, returned=1***REMOVED***
        self.assertTrue(eq(wts, [1., 0.***REMOVED******REMOVED******REMOVED***

    def test_testAverage2(self***REMOVED***:
        # More tests of average.
        w1 = [0, 1, 1, 1, 1, 0***REMOVED***
        w2 = [[0, 1, 1, 1, 1, 0***REMOVED***, [1, 0, 0, 0, 0, 1***REMOVED******REMOVED***
        x = arange(6***REMOVED***
        self.assertTrue(allclose(average(x, axis=0***REMOVED***, 2.5***REMOVED******REMOVED***
        self.assertTrue(allclose(average(x, axis=0, weights=w1***REMOVED***, 2.5***REMOVED******REMOVED***
        y = array([arange(6***REMOVED***, 2.0 * arange(6***REMOVED******REMOVED******REMOVED***
        self.assertTrue(allclose(average(y, None***REMOVED***,
                                 np.add.reduce(np.arange(6***REMOVED******REMOVED*** * 3. / 12.***REMOVED******REMOVED***
        self.assertTrue(allclose(average(y, axis=0***REMOVED***, np.arange(6***REMOVED*** * 3. / 2.***REMOVED******REMOVED***
        self.assertTrue(allclose(average(y, axis=1***REMOVED***,
                                 [average(x, axis=0***REMOVED***, average(x, axis=0***REMOVED****2.0***REMOVED******REMOVED******REMOVED***
        self.assertTrue(allclose(average(y, None, weights=w2***REMOVED***, 20. / 6.***REMOVED******REMOVED***
        self.assertTrue(allclose(average(y, axis=0, weights=w2***REMOVED***,
                                 [0., 1., 2., 3., 4., 10.***REMOVED******REMOVED******REMOVED***
        self.assertTrue(allclose(average(y, axis=1***REMOVED***,
                                 [average(x, axis=0***REMOVED***, average(x, axis=0***REMOVED****2.0***REMOVED******REMOVED******REMOVED***
        m1 = zeros(6***REMOVED***
        m2 = [0, 0, 1, 1, 0, 0***REMOVED***
        m3 = [[0, 0, 1, 1, 0, 0***REMOVED***, [0, 1, 1, 1, 1, 0***REMOVED******REMOVED***
        m4 = ones(6***REMOVED***
        m5 = [0, 1, 1, 1, 1, 1***REMOVED***
        self.assertTrue(allclose(average(masked_array(x, m1***REMOVED***, axis=0***REMOVED***, 2.5***REMOVED******REMOVED***
        self.assertTrue(allclose(average(masked_array(x, m2***REMOVED***, axis=0***REMOVED***, 2.5***REMOVED******REMOVED***
        self.assertTrue(average(masked_array(x, m4***REMOVED***, axis=0***REMOVED*** is masked***REMOVED***
        self.assertEqual(average(masked_array(x, m5***REMOVED***, axis=0***REMOVED***, 0.0***REMOVED***
        self.assertEqual(count(average(masked_array(x, m4***REMOVED***, axis=0***REMOVED******REMOVED***, 0***REMOVED***
        z = masked_array(y, m3***REMOVED***
        self.assertTrue(allclose(average(z, None***REMOVED***, 20. / 6.***REMOVED******REMOVED***
        self.assertTrue(allclose(average(z, axis=0***REMOVED***,
                                 [0., 1., 99., 99., 4.0, 7.5***REMOVED******REMOVED******REMOVED***
        self.assertTrue(allclose(average(z, axis=1***REMOVED***, [2.5, 5.0***REMOVED******REMOVED******REMOVED***
        self.assertTrue(allclose(average(z, axis=0, weights=w2***REMOVED***,
                                 [0., 1., 99., 99., 4.0, 10.0***REMOVED******REMOVED******REMOVED***

        a = arange(6***REMOVED***
        b = arange(6***REMOVED*** * 3
        r1, w1 = average([[a, b***REMOVED***, [b, a***REMOVED******REMOVED***, axis=1, returned=1***REMOVED***
        self.assertEqual(shape(r1***REMOVED***, shape(w1***REMOVED******REMOVED***
        self.assertEqual(r1.shape, w1.shape***REMOVED***
        r2, w2 = average(ones((2, 2, 3***REMOVED******REMOVED***, axis=0, weights=[3, 1***REMOVED***, returned=1***REMOVED***
        self.assertEqual(shape(w2***REMOVED***, shape(r2***REMOVED******REMOVED***
        r2, w2 = average(ones((2, 2, 3***REMOVED******REMOVED***, returned=1***REMOVED***
        self.assertEqual(shape(w2***REMOVED***, shape(r2***REMOVED******REMOVED***
        r2, w2 = average(ones((2, 2, 3***REMOVED******REMOVED***, weights=ones((2, 2, 3***REMOVED******REMOVED***, returned=1***REMOVED***
        self.assertTrue(shape(w2***REMOVED*** == shape(r2***REMOVED******REMOVED***
        a2d = array([[1, 2***REMOVED***, [0, 4***REMOVED******REMOVED***, float***REMOVED***
        a2dm = masked_array(a2d, [[0, 0***REMOVED***, [1, 0***REMOVED******REMOVED******REMOVED***
        a2da = average(a2d, axis=0***REMOVED***
        self.assertTrue(eq(a2da, [0.5, 3.0***REMOVED******REMOVED******REMOVED***
        a2dma = average(a2dm, axis=0***REMOVED***
        self.assertTrue(eq(a2dma, [1.0, 3.0***REMOVED******REMOVED******REMOVED***
        a2dma = average(a2dm, axis=None***REMOVED***
        self.assertTrue(eq(a2dma, 7. / 3.***REMOVED******REMOVED***
        a2dma = average(a2dm, axis=1***REMOVED***
        self.assertTrue(eq(a2dma, [1.5, 4.0***REMOVED******REMOVED******REMOVED***

    def test_testToPython(self***REMOVED***:
        self.assertEqual(1, int(array(1***REMOVED******REMOVED******REMOVED***
        self.assertEqual(1.0, float(array(1***REMOVED******REMOVED******REMOVED***
        self.assertEqual(1, int(array([[[1***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        self.assertEqual(1.0, float(array([[1***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        self.assertRaises(TypeError, float, array([1, 1***REMOVED******REMOVED******REMOVED***
        self.assertRaises(ValueError, bool, array([0, 1***REMOVED******REMOVED******REMOVED***
        self.assertRaises(ValueError, bool, array([0, 0***REMOVED***, mask=[0, 1***REMOVED******REMOVED******REMOVED***

    def test_testScalarArithmetic(self***REMOVED***:
        xm = array(0, mask=1***REMOVED***
        #TODO FIXME: Find out what the following raises a warning in r8247
        with np.errstate(divide='ignore'***REMOVED***:
            self.assertTrue((1 / array(0***REMOVED******REMOVED***.mask***REMOVED***
        self.assertTrue((1 + xm***REMOVED***.mask***REMOVED***
        self.assertTrue((-xm***REMOVED***.mask***REMOVED***
        self.assertTrue((-xm***REMOVED***.mask***REMOVED***
        self.assertTrue(maximum(xm, xm***REMOVED***.mask***REMOVED***
        self.assertTrue(minimum(xm, xm***REMOVED***.mask***REMOVED***
        self.assertTrue(xm.filled(***REMOVED***.dtype is xm._data.dtype***REMOVED***
        x = array(0, mask=0***REMOVED***
        self.assertTrue(x.filled(***REMOVED*** == x._data***REMOVED***
        self.assertEqual(str(xm***REMOVED***, str(masked_print_option***REMOVED******REMOVED***

    def test_testArrayMethods(self***REMOVED***:
        a = array([1, 3, 2***REMOVED******REMOVED***
        self.assertTrue(eq(a.any(***REMOVED***, a._data.any(***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(a.all(***REMOVED***, a._data.all(***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(a.argmax(***REMOVED***, a._data.argmax(***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(a.argmin(***REMOVED***, a._data.argmin(***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(a.choose(0, 1, 2, 3, 4***REMOVED***,
                           a._data.choose(0, 1, 2, 3, 4***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(a.compress([1, 0, 1***REMOVED******REMOVED***, a._data.compress([1, 0, 1***REMOVED******REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(a.conj(***REMOVED***, a._data.conj(***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(a.conjugate(***REMOVED***, a._data.conjugate(***REMOVED******REMOVED******REMOVED***
        m = array([[1, 2***REMOVED***, [3, 4***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(m.diagonal(***REMOVED***, m._data.diagonal(***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(a.sum(***REMOVED***, a._data.sum(***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(a.take([1, 2***REMOVED******REMOVED***, a._data.take([1, 2***REMOVED******REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(m.transpose(***REMOVED***, m._data.transpose(***REMOVED******REMOVED******REMOVED***

    def test_testArrayAttributes(self***REMOVED***:
        a = array([1, 3, 2***REMOVED******REMOVED***
        self.assertEqual(a.ndim, 1***REMOVED***

    def test_testAPI(self***REMOVED***:
        self.assertFalse([m for m in dir(np.ndarray***REMOVED***
                          if m not in dir(MaskedArray***REMOVED*** and
                          not m.startswith('_'***REMOVED******REMOVED******REMOVED***

    def test_testSingleElementSubscript(self***REMOVED***:
        a = array([1, 3, 2***REMOVED******REMOVED***
        b = array([1, 3, 2***REMOVED***, mask=[1, 0, 1***REMOVED******REMOVED***
        self.assertEqual(a[0***REMOVED***.shape, (***REMOVED******REMOVED***
        self.assertEqual(b[0***REMOVED***.shape, (***REMOVED******REMOVED***
        self.assertEqual(b[1***REMOVED***.shape, (***REMOVED******REMOVED***


class TestUfuncs(TestCase***REMOVED***:
    def setUp(self***REMOVED***:
        self.d = (array([1.0, 0, -1, pi / 2***REMOVED*** * 2, mask=[0, 1***REMOVED*** + [0***REMOVED*** * 6***REMOVED***,
                  array([1.0, 0, -1, pi / 2***REMOVED*** * 2, mask=[1, 0***REMOVED*** + [0***REMOVED*** * 6***REMOVED***,***REMOVED***

    def test_testUfuncRegression(self***REMOVED***:
        f_invalid_ignore = [
            'sqrt', 'arctanh', 'arcsin', 'arccos',
            'arccosh', 'arctanh', 'log', 'log10', 'divide',
            'true_divide', 'floor_divide', 'remainder', 'fmod'***REMOVED***
        for f in ['sqrt', 'log', 'log10', 'exp', 'conjugate',
                  'sin', 'cos', 'tan',
                  'arcsin', 'arccos', 'arctan',
                  'sinh', 'cosh', 'tanh',
                  'arcsinh',
                  'arccosh',
                  'arctanh',
                  'absolute', 'fabs', 'negative',
                  'floor', 'ceil',
                  'logical_not',
                  'add', 'subtract', 'multiply',
                  'divide', 'true_divide', 'floor_divide',
                  'remainder', 'fmod', 'hypot', 'arctan2',
                  'equal', 'not_equal', 'less_equal', 'greater_equal',
                  'less', 'greater',
                  'logical_and', 'logical_or', 'logical_xor'***REMOVED***:
            ***REMOVED***
                uf = getattr(umath, f***REMOVED***
            except AttributeError:
                uf = getattr(fromnumeric, f***REMOVED***
            mf = getattr(np.ma, f***REMOVED***
            args = self.d[:uf.nin***REMOVED***
            with np.errstate(***REMOVED***:
                if f in f_invalid_ignore:
                    np.seterr(invalid='ignore'***REMOVED***
                if f in ['arctanh', 'log', 'log10'***REMOVED***:
                    np.seterr(divide='ignore'***REMOVED***
                ur = uf(*args***REMOVED***
                mr = mf(*args***REMOVED***
            self.assertTrue(eq(ur.filled(0***REMOVED***, mr.filled(0***REMOVED***, f***REMOVED******REMOVED***
            self.assertTrue(eqmask(ur.mask, mr.mask***REMOVED******REMOVED***

    def test_reduce(self***REMOVED***:
        a = self.d[0***REMOVED***
        self.assertFalse(alltrue(a, axis=0***REMOVED******REMOVED***
        self.assertTrue(sometrue(a, axis=0***REMOVED******REMOVED***
        self.assertEqual(sum(a[:3***REMOVED***, axis=0***REMOVED***, 0***REMOVED***
        self.assertEqual(product(a, axis=0***REMOVED***, 0***REMOVED***

    def test_minmax(self***REMOVED***:
        a = arange(1, 13***REMOVED***.reshape(3, 4***REMOVED***
        amask = masked_where(a < 5, a***REMOVED***
        self.assertEqual(amask.max(***REMOVED***, a.max(***REMOVED******REMOVED***
        self.assertEqual(amask.min(***REMOVED***, 5***REMOVED***
        self.assertTrue((amask.max(0***REMOVED*** == a.max(0***REMOVED******REMOVED***.all(***REMOVED******REMOVED***
        self.assertTrue((amask.min(0***REMOVED*** == [5, 6, 7, 8***REMOVED******REMOVED***.all(***REMOVED******REMOVED***
        self.assertTrue(amask.max(1***REMOVED***[0***REMOVED***.mask***REMOVED***
        self.assertTrue(amask.min(1***REMOVED***[0***REMOVED***.mask***REMOVED***

    def test_nonzero(self***REMOVED***:
        for t in "?bhilqpBHILQPfdgFDGO":
            x = array([1, 0, 2, 0***REMOVED***, mask=[0, 0, 1, 1***REMOVED******REMOVED***
            self.assertTrue(eq(nonzero(x***REMOVED***, [0***REMOVED******REMOVED******REMOVED***


class TestArrayMethods(TestCase***REMOVED***:

    def setUp(self***REMOVED***:
        x = np.array([8.375, 7.545, 8.828, 8.5, 1.757, 5.928,
                      8.43, 7.78, 9.865, 5.878, 8.979, 4.732,
                      3.012, 6.022, 5.095, 3.116, 5.238, 3.957,
                      6.04, 9.63, 7.712, 3.382, 4.489, 6.479,
                      7.189, 9.645, 5.395, 4.961, 9.894, 2.893,
                      7.357, 9.828, 6.272, 3.758, 6.693, 0.993***REMOVED******REMOVED***
        X = x.reshape(6, 6***REMOVED***
        XX = x.reshape(3, 2, 2, 3***REMOVED***

        m = np.array([0, 1, 0, 1, 0, 0,
                      1, 0, 1, 1, 0, 1,
                      0, 0, 0, 1, 0, 1,
                      0, 0, 0, 1, 1, 1,
                      1, 0, 0, 1, 0, 0,
                      0, 0, 1, 0, 1, 0***REMOVED******REMOVED***
        mx = array(data=x, mask=m***REMOVED***
        mX = array(data=X, mask=m.reshape(X.shape***REMOVED******REMOVED***
        mXX = array(data=XX, mask=m.reshape(XX.shape***REMOVED******REMOVED***

        self.d = (x, X, XX, m, mx, mX, mXX***REMOVED***

    def test_trace(self***REMOVED***:
        (x, X, XX, m, mx, mX, mXX,***REMOVED*** = self.d
        mXdiag = mX.diagonal(***REMOVED***
        self.assertEqual(mX.trace(***REMOVED***, mX.diagonal(***REMOVED***.compressed(***REMOVED***.sum(***REMOVED******REMOVED***
        self.assertTrue(eq(mX.trace(***REMOVED***,
                           X.trace(***REMOVED*** - sum(mXdiag.mask * X.diagonal(***REMOVED***,
                                           axis=0***REMOVED******REMOVED******REMOVED***

    def test_clip(self***REMOVED***:
        (x, X, XX, m, mx, mX, mXX,***REMOVED*** = self.d
        clipped = mx.clip(2, 8***REMOVED***
        self.assertTrue(eq(clipped.mask, mx.mask***REMOVED******REMOVED***
        self.assertTrue(eq(clipped._data, x.clip(2, 8***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(clipped._data, mx._data.clip(2, 8***REMOVED******REMOVED******REMOVED***

    def test_ptp(self***REMOVED***:
        (x, X, XX, m, mx, mX, mXX,***REMOVED*** = self.d
        (n, m***REMOVED*** = X.shape
        self.assertEqual(mx.ptp(***REMOVED***, mx.compressed(***REMOVED***.ptp(***REMOVED******REMOVED***
        rows = np.zeros(n, np.float_***REMOVED***
        cols = np.zeros(m, np.float_***REMOVED***
        for k in range(m***REMOVED***:
            cols[k***REMOVED*** = mX[:, k***REMOVED***.compressed(***REMOVED***.ptp(***REMOVED***
        for k in range(n***REMOVED***:
            rows[k***REMOVED*** = mX[k***REMOVED***.compressed(***REMOVED***.ptp(***REMOVED***
        self.assertTrue(eq(mX.ptp(0***REMOVED***, cols***REMOVED******REMOVED***
        self.assertTrue(eq(mX.ptp(1***REMOVED***, rows***REMOVED******REMOVED***

    def test_swapaxes(self***REMOVED***:
        (x, X, XX, m, mx, mX, mXX,***REMOVED*** = self.d
        mXswapped = mX.swapaxes(0, 1***REMOVED***
        self.assertTrue(eq(mXswapped[-1***REMOVED***, mX[:, -1***REMOVED******REMOVED******REMOVED***
        mXXswapped = mXX.swapaxes(0, 2***REMOVED***
        self.assertEqual(mXXswapped.shape, (2, 2, 3, 3***REMOVED******REMOVED***

    def test_cumprod(self***REMOVED***:
        (x, X, XX, m, mx, mX, mXX,***REMOVED*** = self.d
        mXcp = mX.cumprod(0***REMOVED***
        self.assertTrue(eq(mXcp._data, mX.filled(1***REMOVED***.cumprod(0***REMOVED******REMOVED******REMOVED***
        mXcp = mX.cumprod(1***REMOVED***
        self.assertTrue(eq(mXcp._data, mX.filled(1***REMOVED***.cumprod(1***REMOVED******REMOVED******REMOVED***

    def test_cumsum(self***REMOVED***:
        (x, X, XX, m, mx, mX, mXX,***REMOVED*** = self.d
        mXcp = mX.cumsum(0***REMOVED***
        self.assertTrue(eq(mXcp._data, mX.filled(0***REMOVED***.cumsum(0***REMOVED******REMOVED******REMOVED***
        mXcp = mX.cumsum(1***REMOVED***
        self.assertTrue(eq(mXcp._data, mX.filled(0***REMOVED***.cumsum(1***REMOVED******REMOVED******REMOVED***

    def test_varstd(self***REMOVED***:
        (x, X, XX, m, mx, mX, mXX,***REMOVED*** = self.d
        self.assertTrue(eq(mX.var(axis=None***REMOVED***, mX.compressed(***REMOVED***.var(***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(mX.std(axis=None***REMOVED***, mX.compressed(***REMOVED***.std(***REMOVED******REMOVED******REMOVED***
        self.assertTrue(eq(mXX.var(axis=3***REMOVED***.shape, XX.var(axis=3***REMOVED***.shape***REMOVED******REMOVED***
        self.assertTrue(eq(mX.var(***REMOVED***.shape, X.var(***REMOVED***.shape***REMOVED******REMOVED***
        (mXvar0, mXvar1***REMOVED*** = (mX.var(axis=0***REMOVED***, mX.var(axis=1***REMOVED******REMOVED***
        for k in range(6***REMOVED***:
            self.assertTrue(eq(mXvar1[k***REMOVED***, mX[k***REMOVED***.compressed(***REMOVED***.var(***REMOVED******REMOVED******REMOVED***
            self.assertTrue(eq(mXvar0[k***REMOVED***, mX[:, k***REMOVED***.compressed(***REMOVED***.var(***REMOVED******REMOVED******REMOVED***
            self.assertTrue(eq(np.sqrt(mXvar0[k***REMOVED******REMOVED***,
                               mX[:, k***REMOVED***.compressed(***REMOVED***.std(***REMOVED******REMOVED******REMOVED***


def eqmask(m1, m2***REMOVED***:
    if m1 is nomask:
        return m2 is nomask
    if m2 is nomask:
        return m1 is nomask
    return (m1 == m2***REMOVED***.all(***REMOVED***

if __name__ == "__main__":
    run_module_suite(***REMOVED***
