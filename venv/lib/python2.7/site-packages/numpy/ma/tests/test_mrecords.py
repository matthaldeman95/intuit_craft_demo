# pylint: disable-msg=W0611, W0612, W0511,R0201
***REMOVED***Tests suite for mrecords.

:author: Pierre Gerard-Marchant
:contact: pierregm_at_uga_dot_edu

***REMOVED***
from __future__ import division, absolute_import, print_function

import warnings
import pickle

import numpy as np
import numpy.ma as ma
from numpy import recarray
from numpy.compat import asbytes, asbytes_nested
from numpy.ma import masked, nomask
from numpy.testing import TestCase, run_module_suite, temppath
from numpy.core.records import (
    fromrecords as recfromrecords, fromarrays as recfromarrays
    ***REMOVED***
from numpy.ma.mrecords import (
    MaskedRecords, mrecarray, fromarrays, fromtextfile, fromrecords,
    addfield
    ***REMOVED***
from numpy.ma.testutils import (
    assert_, assert_equal,
    assert_equal_records,
    ***REMOVED***


class TestMRecords(TestCase***REMOVED***:
    # Base test class for MaskedArrays.
    def __init__(self, *args, **kwds***REMOVED***:
        TestCase.__init__(self, *args, **kwds***REMOVED***
        self.setup(***REMOVED***

    def setup(self***REMOVED***:
        # Generic setup
        ilist = [1, 2, 3, 4, 5***REMOVED***
        flist = [1.1, 2.2, 3.3, 4.4, 5.5***REMOVED***
        slist = asbytes_nested(['one', 'two', 'three', 'four', 'five'***REMOVED******REMOVED***
        ddtype = [('a', int***REMOVED***, ('b', float***REMOVED***, ('c', '|S8'***REMOVED******REMOVED***
        mask = [0, 1, 0, 0, 1***REMOVED***
        self.base = ma.array(list(zip(ilist, flist, slist***REMOVED******REMOVED***,
                             mask=mask, dtype=ddtype***REMOVED***

    def test_byview(self***REMOVED***:
        # Test creation by view
        base = self.base
        mbase = base.view(mrecarray***REMOVED***
        assert_equal(mbase.recordmask, base.recordmask***REMOVED***
        assert_equal_records(mbase._mask, base._mask***REMOVED***
        assert_(isinstance(mbase._data, recarray***REMOVED******REMOVED***
        assert_equal_records(mbase._data, base._data.view(recarray***REMOVED******REMOVED***
        for field in ('a', 'b', 'c'***REMOVED***:
            assert_equal(base[field***REMOVED***, mbase[field***REMOVED******REMOVED***
        assert_equal_records(mbase.view(mrecarray***REMOVED***, mbase***REMOVED***

    def test_get(self***REMOVED***:
        # Tests fields retrieval
        base = self.base.copy(***REMOVED***
        mbase = base.view(mrecarray***REMOVED***
        # As fields..........
        for field in ('a', 'b', 'c'***REMOVED***:
            assert_equal(getattr(mbase, field***REMOVED***, mbase[field***REMOVED******REMOVED***
            assert_equal(base[field***REMOVED***, mbase[field***REMOVED******REMOVED***
        # as elements .......
        mbase_first = mbase[0***REMOVED***
        assert_(isinstance(mbase_first, mrecarray***REMOVED******REMOVED***
        assert_equal(mbase_first.dtype, mbase.dtype***REMOVED***
        assert_equal(mbase_first.tolist(***REMOVED***, (1, 1.1, asbytes('one'***REMOVED******REMOVED******REMOVED***
        # Used to be mask, now it's recordmask
        assert_equal(mbase_first.recordmask, nomask***REMOVED***
        assert_equal(mbase_first._mask.item(***REMOVED***, (False, False, False***REMOVED******REMOVED***
        assert_equal(mbase_first['a'***REMOVED***, mbase['a'***REMOVED***[0***REMOVED******REMOVED***
        mbase_last = mbase[-1***REMOVED***
        assert_(isinstance(mbase_last, mrecarray***REMOVED******REMOVED***
        assert_equal(mbase_last.dtype, mbase.dtype***REMOVED***
        assert_equal(mbase_last.tolist(***REMOVED***, (None, None, None***REMOVED******REMOVED***
        # Used to be mask, now it's recordmask
        assert_equal(mbase_last.recordmask, True***REMOVED***
        assert_equal(mbase_last._mask.item(***REMOVED***, (True, True, True***REMOVED******REMOVED***
        assert_equal(mbase_last['a'***REMOVED***, mbase['a'***REMOVED***[-1***REMOVED******REMOVED***
        assert_((mbase_last['a'***REMOVED*** is masked***REMOVED******REMOVED***
        # as slice ..........
        mbase_sl = mbase[:2***REMOVED***
        assert_(isinstance(mbase_sl, mrecarray***REMOVED******REMOVED***
        assert_equal(mbase_sl.dtype, mbase.dtype***REMOVED***
        # Used to be mask, now it's recordmask
        assert_equal(mbase_sl.recordmask, [0, 1***REMOVED******REMOVED***
        assert_equal_records(mbase_sl.mask,
                             np.array([(False, False, False***REMOVED***,
                                       (True, True, True***REMOVED******REMOVED***,
                                      dtype=mbase._mask.dtype***REMOVED******REMOVED***
        assert_equal_records(mbase_sl, base[:2***REMOVED***.view(mrecarray***REMOVED******REMOVED***
        for field in ('a', 'b', 'c'***REMOVED***:
            assert_equal(getattr(mbase_sl, field***REMOVED***, base[:2***REMOVED***[field***REMOVED******REMOVED***

    def test_set_fields(self***REMOVED***:
        # Tests setting fields.
        base = self.base.copy(***REMOVED***
        mbase = base.view(mrecarray***REMOVED***
        mbase = mbase.copy(***REMOVED***
        mbase.fill_value = (999999, 1e20, 'N/A'***REMOVED***
        # Change the data, the mask should be conserved
        mbase.a._data[:***REMOVED*** = 5
        assert_equal(mbase['a'***REMOVED***._data, [5, 5, 5, 5, 5***REMOVED******REMOVED***
        assert_equal(mbase['a'***REMOVED***._mask, [0, 1, 0, 0, 1***REMOVED******REMOVED***
        # Change the elements, and the mask will follow
        mbase.a = 1
        assert_equal(mbase['a'***REMOVED***._data, [1***REMOVED****5***REMOVED***
        assert_equal(ma.getmaskarray(mbase['a'***REMOVED******REMOVED***, [0***REMOVED****5***REMOVED***
        # Use to be _mask, now it's recordmask
        assert_equal(mbase.recordmask, [False***REMOVED****5***REMOVED***
        assert_equal(mbase._mask.tolist(***REMOVED***,
                     np.array([(0, 0, 0***REMOVED***,
                               (0, 1, 1***REMOVED***,
                               (0, 0, 0***REMOVED***,
                               (0, 0, 0***REMOVED***,
                               (0, 1, 1***REMOVED******REMOVED***,
                              dtype=bool***REMOVED******REMOVED***
        # Set a field to mask ........................
        mbase.c = masked
        # Use to be mask, and now it's still mask !
        assert_equal(mbase.c.mask, [1***REMOVED****5***REMOVED***
        assert_equal(mbase.c.recordmask, [1***REMOVED****5***REMOVED***
        assert_equal(ma.getmaskarray(mbase['c'***REMOVED******REMOVED***, [1***REMOVED****5***REMOVED***
        assert_equal(ma.getdata(mbase['c'***REMOVED******REMOVED***, [asbytes('N/A'***REMOVED******REMOVED****5***REMOVED***
        assert_equal(mbase._mask.tolist(***REMOVED***,
                     np.array([(0, 0, 1***REMOVED***,
                               (0, 1, 1***REMOVED***,
                               (0, 0, 1***REMOVED***,
                               (0, 0, 1***REMOVED***,
                               (0, 1, 1***REMOVED******REMOVED***,
                              dtype=bool***REMOVED******REMOVED***
        # Set fields by slices .......................
        mbase = base.view(mrecarray***REMOVED***.copy(***REMOVED***
        mbase.a[3:***REMOVED*** = 5
        assert_equal(mbase.a, [1, 2, 3, 5, 5***REMOVED******REMOVED***
        assert_equal(mbase.a._mask, [0, 1, 0, 0, 0***REMOVED******REMOVED***
        mbase.b[3:***REMOVED*** = masked
        assert_equal(mbase.b, base['b'***REMOVED******REMOVED***
        assert_equal(mbase.b._mask, [0, 1, 0, 1, 1***REMOVED******REMOVED***
        # Set fields globally..........................
        ndtype = [('alpha', '|S1'***REMOVED***, ('num', int***REMOVED******REMOVED***
        data = ma.array([('a', 1***REMOVED***, ('b', 2***REMOVED***, ('c', 3***REMOVED******REMOVED***, dtype=ndtype***REMOVED***
        rdata = data.view(MaskedRecords***REMOVED***
        val = ma.array([10, 20, 30***REMOVED***, mask=[1, 0, 0***REMOVED******REMOVED***

        with warnings.catch_warnings(***REMOVED***:
            warnings.simplefilter("ignore"***REMOVED***
            rdata['num'***REMOVED*** = val
            assert_equal(rdata.num, val***REMOVED***
            assert_equal(rdata.num.mask, [1, 0, 0***REMOVED******REMOVED***

    def test_set_fields_mask(self***REMOVED***:
        # Tests setting the mask of a field.
        base = self.base.copy(***REMOVED***
        # This one has already a mask....
        mbase = base.view(mrecarray***REMOVED***
        mbase['a'***REMOVED***[-2***REMOVED*** = masked
        assert_equal(mbase.a, [1, 2, 3, 4, 5***REMOVED******REMOVED***
        assert_equal(mbase.a._mask, [0, 1, 0, 1, 1***REMOVED******REMOVED***
        # This one has not yet
        mbase = fromarrays([np.arange(5***REMOVED***, np.random.rand(5***REMOVED******REMOVED***,
                           dtype=[('a', int***REMOVED***, ('b', float***REMOVED******REMOVED******REMOVED***
        mbase['a'***REMOVED***[-2***REMOVED*** = masked
        assert_equal(mbase.a, [0, 1, 2, 3, 4***REMOVED******REMOVED***
        assert_equal(mbase.a._mask, [0, 0, 0, 1, 0***REMOVED******REMOVED***

    def test_set_mask(self***REMOVED***:
        base = self.base.copy(***REMOVED***
        mbase = base.view(mrecarray***REMOVED***
        # Set the mask to True .......................
        mbase.mask = masked
        assert_equal(ma.getmaskarray(mbase['b'***REMOVED******REMOVED***, [1***REMOVED****5***REMOVED***
        assert_equal(mbase['a'***REMOVED***._mask, mbase['b'***REMOVED***._mask***REMOVED***
        assert_equal(mbase['a'***REMOVED***._mask, mbase['c'***REMOVED***._mask***REMOVED***
        assert_equal(mbase._mask.tolist(***REMOVED***,
                     np.array([(1, 1, 1***REMOVED******REMOVED****5, dtype=bool***REMOVED******REMOVED***
        # Delete the mask ............................
        mbase.mask = nomask
        assert_equal(ma.getmaskarray(mbase['c'***REMOVED******REMOVED***, [0***REMOVED****5***REMOVED***
        assert_equal(mbase._mask.tolist(***REMOVED***,
                     np.array([(0, 0, 0***REMOVED******REMOVED****5, dtype=bool***REMOVED******REMOVED***

    def test_set_mask_fromarray(self***REMOVED***:
        base = self.base.copy(***REMOVED***
        mbase = base.view(mrecarray***REMOVED***
        # Sets the mask w/ an array
        mbase.mask = [1, 0, 0, 0, 1***REMOVED***
        assert_equal(mbase.a.mask, [1, 0, 0, 0, 1***REMOVED******REMOVED***
        assert_equal(mbase.b.mask, [1, 0, 0, 0, 1***REMOVED******REMOVED***
        assert_equal(mbase.c.mask, [1, 0, 0, 0, 1***REMOVED******REMOVED***
        # Yay, once more !
        mbase.mask = [0, 0, 0, 0, 1***REMOVED***
        assert_equal(mbase.a.mask, [0, 0, 0, 0, 1***REMOVED******REMOVED***
        assert_equal(mbase.b.mask, [0, 0, 0, 0, 1***REMOVED******REMOVED***
        assert_equal(mbase.c.mask, [0, 0, 0, 0, 1***REMOVED******REMOVED***

    def test_set_mask_fromfields(self***REMOVED***:
        mbase = self.base.copy(***REMOVED***.view(mrecarray***REMOVED***

        nmask = np.array(
            [(0, 1, 0***REMOVED***, (0, 1, 0***REMOVED***, (1, 0, 1***REMOVED***, (1, 0, 1***REMOVED***, (0, 0, 0***REMOVED******REMOVED***,
            dtype=[('a', bool***REMOVED***, ('b', bool***REMOVED***, ('c', bool***REMOVED******REMOVED******REMOVED***
        mbase.mask = nmask
        assert_equal(mbase.a.mask, [0, 0, 1, 1, 0***REMOVED******REMOVED***
        assert_equal(mbase.b.mask, [1, 1, 0, 0, 0***REMOVED******REMOVED***
        assert_equal(mbase.c.mask, [0, 0, 1, 1, 0***REMOVED******REMOVED***
        # Reinitalizes and redo
        mbase.mask = False
        mbase.fieldmask = nmask
        assert_equal(mbase.a.mask, [0, 0, 1, 1, 0***REMOVED******REMOVED***
        assert_equal(mbase.b.mask, [1, 1, 0, 0, 0***REMOVED******REMOVED***
        assert_equal(mbase.c.mask, [0, 0, 1, 1, 0***REMOVED******REMOVED***

    def test_set_elements(self***REMOVED***:
        base = self.base.copy(***REMOVED***
        # Set an element to mask .....................
        mbase = base.view(mrecarray***REMOVED***.copy(***REMOVED***
        mbase[-2***REMOVED*** = masked
        assert_equal(
            mbase._mask.tolist(***REMOVED***,
            np.array([(0, 0, 0***REMOVED***, (1, 1, 1***REMOVED***, (0, 0, 0***REMOVED***, (1, 1, 1***REMOVED***, (1, 1, 1***REMOVED******REMOVED***,
                     dtype=bool***REMOVED******REMOVED***
        # Used to be mask, now it's recordmask!
        assert_equal(mbase.recordmask, [0, 1, 0, 1, 1***REMOVED******REMOVED***
        # Set slices .................................
        mbase = base.view(mrecarray***REMOVED***.copy(***REMOVED***
        mbase[:2***REMOVED*** = (5, 5, 5***REMOVED***
        assert_equal(mbase.a._data, [5, 5, 3, 4, 5***REMOVED******REMOVED***
        assert_equal(mbase.a._mask, [0, 0, 0, 0, 1***REMOVED******REMOVED***
        assert_equal(mbase.b._data, [5., 5., 3.3, 4.4, 5.5***REMOVED******REMOVED***
        assert_equal(mbase.b._mask, [0, 0, 0, 0, 1***REMOVED******REMOVED***
        assert_equal(mbase.c._data,
                     asbytes_nested(['5', '5', 'three', 'four', 'five'***REMOVED******REMOVED******REMOVED***
        assert_equal(mbase.b._mask, [0, 0, 0, 0, 1***REMOVED******REMOVED***

        mbase = base.view(mrecarray***REMOVED***.copy(***REMOVED***
        mbase[:2***REMOVED*** = masked
        assert_equal(mbase.a._data, [1, 2, 3, 4, 5***REMOVED******REMOVED***
        assert_equal(mbase.a._mask, [1, 1, 0, 0, 1***REMOVED******REMOVED***
        assert_equal(mbase.b._data, [1.1, 2.2, 3.3, 4.4, 5.5***REMOVED******REMOVED***
        assert_equal(mbase.b._mask, [1, 1, 0, 0, 1***REMOVED******REMOVED***
        assert_equal(mbase.c._data,
                     asbytes_nested(['one', 'two', 'three', 'four', 'five'***REMOVED******REMOVED******REMOVED***
        assert_equal(mbase.b._mask, [1, 1, 0, 0, 1***REMOVED******REMOVED***

    def test_setslices_hardmask(self***REMOVED***:
        # Tests setting slices w/ hardmask.
        base = self.base.copy(***REMOVED***
        mbase = base.view(mrecarray***REMOVED***
        mbase.harden_mask(***REMOVED***
        ***REMOVED***
            mbase[-2:***REMOVED*** = (5, 5, 5***REMOVED***
            assert_equal(mbase.a._data, [1, 2, 3, 5, 5***REMOVED******REMOVED***
            assert_equal(mbase.b._data, [1.1, 2.2, 3.3, 5, 5.5***REMOVED******REMOVED***
            assert_equal(mbase.c._data,
                         asbytes_nested(['one', 'two', 'three', '5', 'five'***REMOVED******REMOVED******REMOVED***
            assert_equal(mbase.a._mask, [0, 1, 0, 0, 1***REMOVED******REMOVED***
            assert_equal(mbase.b._mask, mbase.a._mask***REMOVED***
            assert_equal(mbase.b._mask, mbase.c._mask***REMOVED***
        except NotImplementedError:
            # OK, not implemented yet...
            pass
        except AssertionError:
            raise
        else:
            raise Exception("Flexible hard masks should be supported !"***REMOVED***
        # Not using a tuple should crash
        ***REMOVED***
            mbase[-2:***REMOVED*** = 3
        except (NotImplementedError, TypeError***REMOVED***:
            pass
        else:
            raise TypeError("Should have expected a readable buffer object!"***REMOVED***

    def test_hardmask(self***REMOVED***:
        # Test hardmask
        base = self.base.copy(***REMOVED***
        mbase = base.view(mrecarray***REMOVED***
        mbase.harden_mask(***REMOVED***
        self.assertTrue(mbase._hardmask***REMOVED***
        mbase.mask = nomask
        assert_equal_records(mbase._mask, base._mask***REMOVED***
        mbase.soften_mask(***REMOVED***
        self.assertTrue(not mbase._hardmask***REMOVED***
        mbase.mask = nomask
        # So, the mask of a field is no longer set to nomask...
        assert_equal_records(mbase._mask,
                             ma.make_mask_none(base.shape, base.dtype***REMOVED******REMOVED***
        self.assertTrue(ma.make_mask(mbase['b'***REMOVED***._mask***REMOVED*** is nomask***REMOVED***
        assert_equal(mbase['a'***REMOVED***._mask, mbase['b'***REMOVED***._mask***REMOVED***

    def test_pickling(self***REMOVED***:
        # Test pickling
        base = self.base.copy(***REMOVED***
        mrec = base.view(mrecarray***REMOVED***
        _ = pickle.dumps(mrec***REMOVED***
        mrec_ = pickle.loads(_***REMOVED***
        assert_equal(mrec_.dtype, mrec.dtype***REMOVED***
        assert_equal_records(mrec_._data, mrec._data***REMOVED***
        assert_equal(mrec_._mask, mrec._mask***REMOVED***
        assert_equal_records(mrec_._mask, mrec._mask***REMOVED***

    def test_filled(self***REMOVED***:
        # Test filling the array
        _a = ma.array([1, 2, 3***REMOVED***, mask=[0, 0, 1***REMOVED***, dtype=int***REMOVED***
        _b = ma.array([1.1, 2.2, 3.3***REMOVED***, mask=[0, 0, 1***REMOVED***, dtype=float***REMOVED***
        _c = ma.array(['one', 'two', 'three'***REMOVED***, mask=[0, 0, 1***REMOVED***, dtype='|S8'***REMOVED***
        ddtype = [('a', int***REMOVED***, ('b', float***REMOVED***, ('c', '|S8'***REMOVED******REMOVED***
        mrec = fromarrays([_a, _b, _c***REMOVED***, dtype=ddtype,
                          fill_value=(99999, 99999., 'N/A'***REMOVED******REMOVED***
        mrecfilled = mrec.filled(***REMOVED***
        assert_equal(mrecfilled['a'***REMOVED***, np.array((1, 2, 99999***REMOVED***, dtype=int***REMOVED******REMOVED***
        assert_equal(mrecfilled['b'***REMOVED***, np.array((1.1, 2.2, 99999.***REMOVED***,
                                               dtype=float***REMOVED******REMOVED***
        assert_equal(mrecfilled['c'***REMOVED***, np.array(('one', 'two', 'N/A'***REMOVED***,
                                               dtype='|S8'***REMOVED******REMOVED***

    def test_tolist(self***REMOVED***:
        # Test tolist.
        _a = ma.array([1, 2, 3***REMOVED***, mask=[0, 0, 1***REMOVED***, dtype=int***REMOVED***
        _b = ma.array([1.1, 2.2, 3.3***REMOVED***, mask=[0, 0, 1***REMOVED***, dtype=float***REMOVED***
        _c = ma.array(['one', 'two', 'three'***REMOVED***, mask=[1, 0, 0***REMOVED***, dtype='|S8'***REMOVED***
        ddtype = [('a', int***REMOVED***, ('b', float***REMOVED***, ('c', '|S8'***REMOVED******REMOVED***
        mrec = fromarrays([_a, _b, _c***REMOVED***, dtype=ddtype,
                          fill_value=(99999, 99999., 'N/A'***REMOVED******REMOVED***

        assert_equal(mrec.tolist(***REMOVED***,
                     [(1, 1.1, None***REMOVED***, (2, 2.2, asbytes('two'***REMOVED******REMOVED***,
                      (None, None, asbytes('three'***REMOVED******REMOVED******REMOVED******REMOVED***

    def test_withnames(self***REMOVED***:
        # Test the creation w/ format and names
        x = mrecarray(1, formats=float, names='base'***REMOVED***
        x[0***REMOVED***['base'***REMOVED*** = 10
        assert_equal(x['base'***REMOVED***[0***REMOVED***, 10***REMOVED***

    def test_exotic_formats(self***REMOVED***:
        # Test that 'exotic' formats are processed properly
        easy = mrecarray(1, dtype=[('i', int***REMOVED***, ('s', '|S8'***REMOVED***, ('f', float***REMOVED******REMOVED******REMOVED***
        easy[0***REMOVED*** = masked
        assert_equal(easy.filled(1***REMOVED***.item(***REMOVED***, (1, asbytes('1'***REMOVED***, 1.***REMOVED******REMOVED***

        solo = mrecarray(1, dtype=[('f0', '<f8', (2, 2***REMOVED******REMOVED******REMOVED******REMOVED***
        solo[0***REMOVED*** = masked
        assert_equal(solo.filled(1***REMOVED***.item(***REMOVED***,
                     np.array((1,***REMOVED***, dtype=solo.dtype***REMOVED***.item(***REMOVED******REMOVED***

        mult = mrecarray(2, dtype="i4, (2,3***REMOVED***float, float"***REMOVED***
        mult[0***REMOVED*** = masked
        mult[1***REMOVED*** = (1, 1, 1***REMOVED***
        mult.filled(0***REMOVED***
        assert_equal_records(mult.filled(0***REMOVED***,
                             np.array([(0, 0, 0***REMOVED***, (1, 1, 1***REMOVED******REMOVED***,
                                      dtype=mult.dtype***REMOVED******REMOVED***


class TestView(TestCase***REMOVED***:

    def setUp(self***REMOVED***:
        (a, b***REMOVED*** = (np.arange(10***REMOVED***, np.random.rand(10***REMOVED******REMOVED***
        ndtype = [('a', np.float***REMOVED***, ('b', np.float***REMOVED******REMOVED***
        arr = np.array(list(zip(a, b***REMOVED******REMOVED***, dtype=ndtype***REMOVED***

        mrec = fromarrays([a, b***REMOVED***, dtype=ndtype, fill_value=(-9., -99.***REMOVED******REMOVED***
        mrec.mask[3***REMOVED*** = (False, True***REMOVED***
        self.data = (mrec, a, b, arr***REMOVED***

    def test_view_by_itself(self***REMOVED***:
        (mrec, a, b, arr***REMOVED*** = self.data
        test = mrec.view(***REMOVED***
        self.assertTrue(isinstance(test, MaskedRecords***REMOVED******REMOVED***
        assert_equal_records(test, mrec***REMOVED***
        assert_equal_records(test._mask, mrec._mask***REMOVED***

    def test_view_simple_dtype(self***REMOVED***:
        (mrec, a, b, arr***REMOVED*** = self.data
        ntype = (np.float, 2***REMOVED***
        test = mrec.view(ntype***REMOVED***
        self.assertTrue(isinstance(test, ma.MaskedArray***REMOVED******REMOVED***
        assert_equal(test, np.array(list(zip(a, b***REMOVED******REMOVED***, dtype=np.float***REMOVED******REMOVED***
        self.assertTrue(test[3, 1***REMOVED*** is ma.masked***REMOVED***

    def test_view_flexible_type(self***REMOVED***:
        (mrec, a, b, arr***REMOVED*** = self.data
        alttype = [('A', np.float***REMOVED***, ('B', np.float***REMOVED******REMOVED***
        test = mrec.view(alttype***REMOVED***
        self.assertTrue(isinstance(test, MaskedRecords***REMOVED******REMOVED***
        assert_equal_records(test, arr.view(alttype***REMOVED******REMOVED***
        self.assertTrue(test['B'***REMOVED***[3***REMOVED*** is masked***REMOVED***
        assert_equal(test.dtype, np.dtype(alttype***REMOVED******REMOVED***
        self.assertTrue(test._fill_value is None***REMOVED***


##############################################################################
class TestMRecordsImport(TestCase***REMOVED***:
    # Base test class for MaskedArrays.
    def __init__(self, *args, **kwds***REMOVED***:
        TestCase.__init__(self, *args, **kwds***REMOVED***
        self.setup(***REMOVED***

    def setup(self***REMOVED***:
        # Generic setup
        _a = ma.array([1, 2, 3***REMOVED***, mask=[0, 0, 1***REMOVED***, dtype=int***REMOVED***
        _b = ma.array([1.1, 2.2, 3.3***REMOVED***, mask=[0, 0, 1***REMOVED***, dtype=float***REMOVED***
        _c = ma.array(list(map(asbytes, ['one', 'two', 'three'***REMOVED******REMOVED******REMOVED***,
                      mask=[0, 0, 1***REMOVED***, dtype='|S8'***REMOVED***
        ddtype = [('a', int***REMOVED***, ('b', float***REMOVED***, ('c', '|S8'***REMOVED******REMOVED***
        mrec = fromarrays([_a, _b, _c***REMOVED***, dtype=ddtype,
                          fill_value=(asbytes('99999'***REMOVED***, asbytes('99999.'***REMOVED***,
                                      asbytes('N/A'***REMOVED******REMOVED******REMOVED***
        nrec = recfromarrays((_a._data, _b._data, _c._data***REMOVED***, dtype=ddtype***REMOVED***
        self.data = (mrec, nrec, ddtype***REMOVED***

    def test_fromarrays(self***REMOVED***:
        _a = ma.array([1, 2, 3***REMOVED***, mask=[0, 0, 1***REMOVED***, dtype=int***REMOVED***
        _b = ma.array([1.1, 2.2, 3.3***REMOVED***, mask=[0, 0, 1***REMOVED***, dtype=float***REMOVED***
        _c = ma.array(['one', 'two', 'three'***REMOVED***, mask=[0, 0, 1***REMOVED***, dtype='|S8'***REMOVED***
        (mrec, nrec, _***REMOVED*** = self.data
        for (f, l***REMOVED*** in zip(('a', 'b', 'c'***REMOVED***, (_a, _b, _c***REMOVED******REMOVED***:
            assert_equal(getattr(mrec, f***REMOVED***._mask, l._mask***REMOVED***
        # One record only
        _x = ma.array([1, 1.1, 'one'***REMOVED***, mask=[1, 0, 0***REMOVED***,***REMOVED***
        assert_equal_records(fromarrays(_x, dtype=mrec.dtype***REMOVED***, mrec[0***REMOVED******REMOVED***

    def test_fromrecords(self***REMOVED***:
        # Test construction from records.
        (mrec, nrec, ddtype***REMOVED*** = self.data
        #......
        palist = [(1, 'abc', 3.7000002861022949, 0***REMOVED***,
                  (2, 'xy', 6.6999998092651367, 1***REMOVED***,
                  (0, ' ', 0.40000000596046448, 0***REMOVED******REMOVED***
        pa = recfromrecords(palist, names='c1, c2, c3, c4'***REMOVED***
        mpa = fromrecords(palist, names='c1, c2, c3, c4'***REMOVED***
        assert_equal_records(pa, mpa***REMOVED***
        #.....
        _mrec = fromrecords(nrec***REMOVED***
        assert_equal(_mrec.dtype, mrec.dtype***REMOVED***
        for field in _mrec.dtype.names:
            assert_equal(getattr(_mrec, field***REMOVED***, getattr(mrec._data, field***REMOVED******REMOVED***

        _mrec = fromrecords(nrec.tolist(***REMOVED***, names='c1,c2,c3'***REMOVED***
        assert_equal(_mrec.dtype, [('c1', int***REMOVED***, ('c2', float***REMOVED***, ('c3', '|S5'***REMOVED******REMOVED******REMOVED***
        for (f, n***REMOVED*** in zip(('c1', 'c2', 'c3'***REMOVED***, ('a', 'b', 'c'***REMOVED******REMOVED***:
            assert_equal(getattr(_mrec, f***REMOVED***, getattr(mrec._data, n***REMOVED******REMOVED***

        _mrec = fromrecords(mrec***REMOVED***
        assert_equal(_mrec.dtype, mrec.dtype***REMOVED***
        assert_equal_records(_mrec._data, mrec.filled(***REMOVED******REMOVED***
        assert_equal_records(_mrec._mask, mrec._mask***REMOVED***

    def test_fromrecords_wmask(self***REMOVED***:
        # Tests construction from records w/ mask.
        (mrec, nrec, ddtype***REMOVED*** = self.data

        _mrec = fromrecords(nrec.tolist(***REMOVED***, dtype=ddtype, mask=[0, 1, 0,***REMOVED******REMOVED***
        assert_equal_records(_mrec._data, mrec._data***REMOVED***
        assert_equal(_mrec._mask.tolist(***REMOVED***, [(0, 0, 0***REMOVED***, (1, 1, 1***REMOVED***, (0, 0, 0***REMOVED******REMOVED******REMOVED***

        _mrec = fromrecords(nrec.tolist(***REMOVED***, dtype=ddtype, mask=True***REMOVED***
        assert_equal_records(_mrec._data, mrec._data***REMOVED***
        assert_equal(_mrec._mask.tolist(***REMOVED***, [(1, 1, 1***REMOVED***, (1, 1, 1***REMOVED***, (1, 1, 1***REMOVED******REMOVED******REMOVED***

        _mrec = fromrecords(nrec.tolist(***REMOVED***, dtype=ddtype, mask=mrec._mask***REMOVED***
        assert_equal_records(_mrec._data, mrec._data***REMOVED***
        assert_equal(_mrec._mask.tolist(***REMOVED***, mrec._mask.tolist(***REMOVED******REMOVED***

        _mrec = fromrecords(nrec.tolist(***REMOVED***, dtype=ddtype,
                            mask=mrec._mask.tolist(***REMOVED******REMOVED***
        assert_equal_records(_mrec._data, mrec._data***REMOVED***
        assert_equal(_mrec._mask.tolist(***REMOVED***, mrec._mask.tolist(***REMOVED******REMOVED***

    def test_fromtextfile(self***REMOVED***:
        # Tests reading from a text file.
        fcontent = (
***REMOVED***#
'One (S***REMOVED***','Two (I***REMOVED***','Three (F***REMOVED***','Four (M***REMOVED***','Five (-***REMOVED***','Six (C***REMOVED***'
'strings',1,1.0,'mixed column',,1
'with embedded "double quotes"',2,2.0,1.0,,1
'strings',3,3.0E5,3,,1
'strings',4,-1e-10,,,1
***REMOVED******REMOVED***
        with temppath(***REMOVED*** as path:
            with open(path, 'w'***REMOVED*** as f:
                f.write(fcontent***REMOVED***
            mrectxt = fromtextfile(path, delimitor=',', varnames='ABCDEFG'***REMOVED***
        self.assertTrue(isinstance(mrectxt, MaskedRecords***REMOVED******REMOVED***
        assert_equal(mrectxt.F, [1, 1, 1, 1***REMOVED******REMOVED***
        assert_equal(mrectxt.E._mask, [1, 1, 1, 1***REMOVED******REMOVED***
        assert_equal(mrectxt.C, [1, 2, 3.e+5, -1e-10***REMOVED******REMOVED***

    def test_addfield(self***REMOVED***:
        # Tests addfield
        (mrec, nrec, ddtype***REMOVED*** = self.data
        (d, m***REMOVED*** = ([100, 200, 300***REMOVED***, [1, 0, 0***REMOVED******REMOVED***
        mrec = addfield(mrec, ma.array(d, mask=m***REMOVED******REMOVED***
        assert_equal(mrec.f3, d***REMOVED***
        assert_equal(mrec.f3._mask, m***REMOVED***


def test_record_array_with_object_field(***REMOVED***:
    # Trac #1839
    y = ma.masked_array(
        [(1, '2'***REMOVED***, (3, '4'***REMOVED******REMOVED***,
        mask=[(0, 0***REMOVED***, (0, 1***REMOVED******REMOVED***,
        dtype=[('a', int***REMOVED***, ('b', np.object***REMOVED******REMOVED******REMOVED***
    # getting an item used to fail
    y[1***REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
