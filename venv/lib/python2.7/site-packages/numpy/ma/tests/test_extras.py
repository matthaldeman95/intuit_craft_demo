# pylint: disable-msg=W0611, W0612, W0511
***REMOVED***Tests suite for MaskedArray.
Adapted from the original test_ma by Pierre Gerard-Marchant

:author: Pierre Gerard-Marchant
:contact: pierregm_at_uga_dot_edu
:version: $Id: test_extras.py 3473 2007-10-29 15:18:13Z jarrod.millman $

***REMOVED***
from __future__ import division, absolute_import, print_function

import warnings
import itertools

import numpy as np
from numpy.testing import (
    TestCase, run_module_suite, assert_warns, clear_and_catch_warnings
    ***REMOVED***
from numpy.ma.testutils import (
    assert_, assert_array_equal, assert_equal, assert_almost_equal
    ***REMOVED***
from numpy.ma.core import (
    array, arange, masked, MaskedArray, masked_array, getmaskarray, shape,
    nomask, ones, zeros, count
    ***REMOVED***
from numpy.ma.extras import (
    atleast_1d, atleast_2d, atleast_3d, mr_, dot, polyfit, cov, corrcoef,
    median, average, unique, setxor1d, setdiff1d, union1d, intersect1d, in1d,
    ediff1d, apply_over_axes, apply_along_axis, compress_nd, compress_rowcols,
    mask_rowcols, clump_masked, clump_unmasked, flatnotmasked_contiguous,
    notmasked_contiguous, notmasked_edges, masked_all, masked_all_like,
    diagflat
    ***REMOVED***
import numpy.ma.extras as mae


class TestGeneric(TestCase***REMOVED***:
    #
    def test_masked_all(self***REMOVED***:
        # Tests masked_all
        # Standard dtype
        test = masked_all((2,***REMOVED***, dtype=float***REMOVED***
        control = array([1, 1***REMOVED***, mask=[1, 1***REMOVED***, dtype=float***REMOVED***
        assert_equal(test, control***REMOVED***
        # Flexible dtype
        dt = np.dtype({'names': ['a', 'b'***REMOVED***, 'formats': ['f', 'f'***REMOVED******REMOVED******REMOVED***
        test = masked_all((2,***REMOVED***, dtype=dt***REMOVED***
        control = array([(0, 0***REMOVED***, (0, 0***REMOVED******REMOVED***, mask=[(1, 1***REMOVED***, (1, 1***REMOVED******REMOVED***, dtype=dt***REMOVED***
        assert_equal(test, control***REMOVED***
        test = masked_all((2, 2***REMOVED***, dtype=dt***REMOVED***
        control = array([[(0, 0***REMOVED***, (0, 0***REMOVED******REMOVED***, [(0, 0***REMOVED***, (0, 0***REMOVED******REMOVED******REMOVED***,
                        mask=[[(1, 1***REMOVED***, (1, 1***REMOVED******REMOVED***, [(1, 1***REMOVED***, (1, 1***REMOVED******REMOVED******REMOVED***,
                        dtype=dt***REMOVED***
        assert_equal(test, control***REMOVED***
        # Nested dtype
        dt = np.dtype([('a', 'f'***REMOVED***, ('b', [('ba', 'f'***REMOVED***, ('bb', 'f'***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        test = masked_all((2,***REMOVED***, dtype=dt***REMOVED***
        control = array([(1, (1, 1***REMOVED******REMOVED***, (1, (1, 1***REMOVED******REMOVED******REMOVED***,
                        mask=[(1, (1, 1***REMOVED******REMOVED***, (1, (1, 1***REMOVED******REMOVED******REMOVED***, dtype=dt***REMOVED***
        assert_equal(test, control***REMOVED***
        test = masked_all((2,***REMOVED***, dtype=dt***REMOVED***
        control = array([(1, (1, 1***REMOVED******REMOVED***, (1, (1, 1***REMOVED******REMOVED******REMOVED***,
                        mask=[(1, (1, 1***REMOVED******REMOVED***, (1, (1, 1***REMOVED******REMOVED******REMOVED***, dtype=dt***REMOVED***
        assert_equal(test, control***REMOVED***
        test = masked_all((1, 1***REMOVED***, dtype=dt***REMOVED***
        control = array([[(1, (1, 1***REMOVED******REMOVED******REMOVED******REMOVED***, mask=[[(1, (1, 1***REMOVED******REMOVED******REMOVED******REMOVED***, dtype=dt***REMOVED***
        assert_equal(test, control***REMOVED***

    def test_masked_all_like(self***REMOVED***:
        # Tests masked_all
        # Standard dtype
        base = array([1, 2***REMOVED***, dtype=float***REMOVED***
        test = masked_all_like(base***REMOVED***
        control = array([1, 1***REMOVED***, mask=[1, 1***REMOVED***, dtype=float***REMOVED***
        assert_equal(test, control***REMOVED***
        # Flexible dtype
        dt = np.dtype({'names': ['a', 'b'***REMOVED***, 'formats': ['f', 'f'***REMOVED******REMOVED******REMOVED***
        base = array([(0, 0***REMOVED***, (0, 0***REMOVED******REMOVED***, mask=[(1, 1***REMOVED***, (1, 1***REMOVED******REMOVED***, dtype=dt***REMOVED***
        test = masked_all_like(base***REMOVED***
        control = array([(10, 10***REMOVED***, (10, 10***REMOVED******REMOVED***, mask=[(1, 1***REMOVED***, (1, 1***REMOVED******REMOVED***, dtype=dt***REMOVED***
        assert_equal(test, control***REMOVED***
        # Nested dtype
        dt = np.dtype([('a', 'f'***REMOVED***, ('b', [('ba', 'f'***REMOVED***, ('bb', 'f'***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        control = array([(1, (1, 1***REMOVED******REMOVED***, (1, (1, 1***REMOVED******REMOVED******REMOVED***,
                        mask=[(1, (1, 1***REMOVED******REMOVED***, (1, (1, 1***REMOVED******REMOVED******REMOVED***, dtype=dt***REMOVED***
        test = masked_all_like(control***REMOVED***
        assert_equal(test, control***REMOVED***

    def check_clump(self, f***REMOVED***:
        for i in range(1, 7***REMOVED***:
            for j in range(2**i***REMOVED***:
                k = np.arange(i, dtype=int***REMOVED***
                ja = np.full(i, j, dtype=int***REMOVED***
                a = masked_array(2**k***REMOVED***
                a.mask = (ja & (2**k***REMOVED******REMOVED*** != 0
                s = 0
                for sl in f(a***REMOVED***:
                    s += a.data[sl***REMOVED***.sum(***REMOVED***
                if f == clump_unmasked:
                    assert_equal(a.compressed(***REMOVED***.sum(***REMOVED***, s***REMOVED***
                else:
                    a.mask = ~a.mask
                    assert_equal(a.compressed(***REMOVED***.sum(***REMOVED***, s***REMOVED***

    def test_clump_masked(self***REMOVED***:
        # Test clump_masked
        a = masked_array(np.arange(10***REMOVED******REMOVED***
        a[[0, 1, 2, 6, 8, 9***REMOVED******REMOVED*** = masked
        #
        test = clump_masked(a***REMOVED***
        control = [slice(0, 3***REMOVED***, slice(6, 7***REMOVED***, slice(8, 10***REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

        self.check_clump(clump_masked***REMOVED***

    def test_clump_unmasked(self***REMOVED***:
        # Test clump_unmasked
        a = masked_array(np.arange(10***REMOVED******REMOVED***
        a[[0, 1, 2, 6, 8, 9***REMOVED******REMOVED*** = masked
        test = clump_unmasked(a***REMOVED***
        control = [slice(3, 6***REMOVED***, slice(7, 8***REMOVED***, ***REMOVED***
        assert_equal(test, control***REMOVED***

        self.check_clump(clump_unmasked***REMOVED***

    def test_flatnotmasked_contiguous(self***REMOVED***:
        # Test flatnotmasked_contiguous
        a = arange(10***REMOVED***
        # No mask
        test = flatnotmasked_contiguous(a***REMOVED***
        assert_equal(test, slice(0, a.size***REMOVED******REMOVED***
        # Some mask
        a[(a < 3***REMOVED*** | (a > 8***REMOVED*** | (a == 5***REMOVED******REMOVED*** = masked
        test = flatnotmasked_contiguous(a***REMOVED***
        assert_equal(test, [slice(3, 5***REMOVED***, slice(6, 9***REMOVED******REMOVED******REMOVED***
        #
        a[:***REMOVED*** = masked
        test = flatnotmasked_contiguous(a***REMOVED***
        assert_equal(test, None***REMOVED***


class TestAverage(TestCase***REMOVED***:
    # Several tests of average. Why so many ? Good point...
    def test_testAverage1(self***REMOVED***:
        # Test of average.
        ott = array([0., 1., 2., 3.***REMOVED***, mask=[True, False, False, False***REMOVED******REMOVED***
        assert_equal(2.0, average(ott, axis=0***REMOVED******REMOVED***
        assert_equal(2.0, average(ott, weights=[1., 1., 2., 1.***REMOVED******REMOVED******REMOVED***
        result, wts = average(ott, weights=[1., 1., 2., 1.***REMOVED***, returned=1***REMOVED***
        assert_equal(2.0, result***REMOVED***
        self.assertTrue(wts == 4.0***REMOVED***
        ott[:***REMOVED*** = masked
        assert_equal(average(ott, axis=0***REMOVED***.mask, [True***REMOVED******REMOVED***
        ott = array([0., 1., 2., 3.***REMOVED***, mask=[True, False, False, False***REMOVED******REMOVED***
        ott = ott.reshape(2, 2***REMOVED***
        ott[:, 1***REMOVED*** = masked
        assert_equal(average(ott, axis=0***REMOVED***, [2.0, 0.0***REMOVED******REMOVED***
        assert_equal(average(ott, axis=1***REMOVED***.mask[0***REMOVED***, [True***REMOVED******REMOVED***
        assert_equal([2., 0.***REMOVED***, average(ott, axis=0***REMOVED******REMOVED***
        result, wts = average(ott, axis=0, returned=1***REMOVED***
        assert_equal(wts, [1., 0.***REMOVED******REMOVED***

    def test_testAverage2(self***REMOVED***:
        # More tests of average.
        w1 = [0, 1, 1, 1, 1, 0***REMOVED***
        w2 = [[0, 1, 1, 1, 1, 0***REMOVED***, [1, 0, 0, 0, 0, 1***REMOVED******REMOVED***
        x = arange(6, dtype=np.float_***REMOVED***
        assert_equal(average(x, axis=0***REMOVED***, 2.5***REMOVED***
        assert_equal(average(x, axis=0, weights=w1***REMOVED***, 2.5***REMOVED***
        y = array([arange(6, dtype=np.float_***REMOVED***, 2.0 * arange(6***REMOVED******REMOVED******REMOVED***
        assert_equal(average(y, None***REMOVED***, np.add.reduce(np.arange(6***REMOVED******REMOVED*** * 3. / 12.***REMOVED***
        assert_equal(average(y, axis=0***REMOVED***, np.arange(6***REMOVED*** * 3. / 2.***REMOVED***
        assert_equal(average(y, axis=1***REMOVED***,
                     [average(x, axis=0***REMOVED***, average(x, axis=0***REMOVED*** * 2.0***REMOVED******REMOVED***
        assert_equal(average(y, None, weights=w2***REMOVED***, 20. / 6.***REMOVED***
        assert_equal(average(y, axis=0, weights=w2***REMOVED***,
                     [0., 1., 2., 3., 4., 10.***REMOVED******REMOVED***
        assert_equal(average(y, axis=1***REMOVED***,
                     [average(x, axis=0***REMOVED***, average(x, axis=0***REMOVED*** * 2.0***REMOVED******REMOVED***
        m1 = zeros(6***REMOVED***
        m2 = [0, 0, 1, 1, 0, 0***REMOVED***
        m3 = [[0, 0, 1, 1, 0, 0***REMOVED***, [0, 1, 1, 1, 1, 0***REMOVED******REMOVED***
        m4 = ones(6***REMOVED***
        m5 = [0, 1, 1, 1, 1, 1***REMOVED***
        assert_equal(average(masked_array(x, m1***REMOVED***, axis=0***REMOVED***, 2.5***REMOVED***
        assert_equal(average(masked_array(x, m2***REMOVED***, axis=0***REMOVED***, 2.5***REMOVED***
        assert_equal(average(masked_array(x, m4***REMOVED***, axis=0***REMOVED***.mask, [True***REMOVED******REMOVED***
        assert_equal(average(masked_array(x, m5***REMOVED***, axis=0***REMOVED***, 0.0***REMOVED***
        assert_equal(count(average(masked_array(x, m4***REMOVED***, axis=0***REMOVED******REMOVED***, 0***REMOVED***
        z = masked_array(y, m3***REMOVED***
        assert_equal(average(z, None***REMOVED***, 20. / 6.***REMOVED***
        assert_equal(average(z, axis=0***REMOVED***, [0., 1., 99., 99., 4.0, 7.5***REMOVED******REMOVED***
        assert_equal(average(z, axis=1***REMOVED***, [2.5, 5.0***REMOVED******REMOVED***
        assert_equal(average(z, axis=0, weights=w2***REMOVED***,
                     [0., 1., 99., 99., 4.0, 10.0***REMOVED******REMOVED***

    def test_testAverage3(self***REMOVED***:
        # Yet more tests of average!
        a = arange(6***REMOVED***
        b = arange(6***REMOVED*** * 3
        r1, w1 = average([[a, b***REMOVED***, [b, a***REMOVED******REMOVED***, axis=1, returned=1***REMOVED***
        assert_equal(shape(r1***REMOVED***, shape(w1***REMOVED******REMOVED***
        assert_equal(r1.shape, w1.shape***REMOVED***
        r2, w2 = average(ones((2, 2, 3***REMOVED******REMOVED***, axis=0, weights=[3, 1***REMOVED***, returned=1***REMOVED***
        assert_equal(shape(w2***REMOVED***, shape(r2***REMOVED******REMOVED***
        r2, w2 = average(ones((2, 2, 3***REMOVED******REMOVED***, returned=1***REMOVED***
        assert_equal(shape(w2***REMOVED***, shape(r2***REMOVED******REMOVED***
        r2, w2 = average(ones((2, 2, 3***REMOVED******REMOVED***, weights=ones((2, 2, 3***REMOVED******REMOVED***, returned=1***REMOVED***
        assert_equal(shape(w2***REMOVED***, shape(r2***REMOVED******REMOVED***
        a2d = array([[1, 2***REMOVED***, [0, 4***REMOVED******REMOVED***, float***REMOVED***
        a2dm = masked_array(a2d, [[False, False***REMOVED***, [True, False***REMOVED******REMOVED******REMOVED***
        a2da = average(a2d, axis=0***REMOVED***
        assert_equal(a2da, [0.5, 3.0***REMOVED******REMOVED***
        a2dma = average(a2dm, axis=0***REMOVED***
        assert_equal(a2dma, [1.0, 3.0***REMOVED******REMOVED***
        a2dma = average(a2dm, axis=None***REMOVED***
        assert_equal(a2dma, 7. / 3.***REMOVED***
        a2dma = average(a2dm, axis=1***REMOVED***
        assert_equal(a2dma, [1.5, 4.0***REMOVED******REMOVED***

    def test_onintegers_with_mask(self***REMOVED***:
        # Test average on integers with mask
        a = average(array([1, 2***REMOVED******REMOVED******REMOVED***
        assert_equal(a, 1.5***REMOVED***
        a = average(array([1, 2, 3, 4***REMOVED***, mask=[False, False, True, True***REMOVED******REMOVED******REMOVED***
        assert_equal(a, 1.5***REMOVED***

    def test_complex(self***REMOVED***:
        # Test with complex data.
        # (Regression test for https://github.com/numpy/numpy/issues/2684***REMOVED***
        mask = np.array([[0, 0, 0, 1, 0***REMOVED***,
                         [0, 1, 0, 0, 0***REMOVED******REMOVED***, dtype=bool***REMOVED***
        a = masked_array([[0, 1+2j, 3+4j, 5+6j, 7+8j***REMOVED***,
                          [9j, 0+1j, 2+3j, 4+5j, 7+7j***REMOVED******REMOVED***,
                         mask=mask***REMOVED***

        av = average(a***REMOVED***
        expected = np.average(a.compressed(***REMOVED******REMOVED***
        assert_almost_equal(av.real, expected.real***REMOVED***
        assert_almost_equal(av.imag, expected.imag***REMOVED***

        av0 = average(a, axis=0***REMOVED***
        expected0 = average(a.real, axis=0***REMOVED*** + average(a.imag, axis=0***REMOVED****1j
        assert_almost_equal(av0.real, expected0.real***REMOVED***
        assert_almost_equal(av0.imag, expected0.imag***REMOVED***

        av1 = average(a, axis=1***REMOVED***
        expected1 = average(a.real, axis=1***REMOVED*** + average(a.imag, axis=1***REMOVED****1j
        assert_almost_equal(av1.real, expected1.real***REMOVED***
        assert_almost_equal(av1.imag, expected1.imag***REMOVED***

        # Test with the 'weights' argument.
        wts = np.array([[0.5, 1.0, 2.0, 1.0, 0.5***REMOVED***,
                        [1.0, 1.0, 1.0, 1.0, 1.0***REMOVED******REMOVED******REMOVED***
        wav = average(a, weights=wts***REMOVED***
        expected = np.average(a.compressed(***REMOVED***, weights=wts[~mask***REMOVED******REMOVED***
        assert_almost_equal(wav.real, expected.real***REMOVED***
        assert_almost_equal(wav.imag, expected.imag***REMOVED***

        wav0 = average(a, weights=wts, axis=0***REMOVED***
        expected0 = (average(a.real, weights=wts, axis=0***REMOVED*** +
                     average(a.imag, weights=wts, axis=0***REMOVED****1j***REMOVED***
        assert_almost_equal(wav0.real, expected0.real***REMOVED***
        assert_almost_equal(wav0.imag, expected0.imag***REMOVED***

        wav1 = average(a, weights=wts, axis=1***REMOVED***
        expected1 = (average(a.real, weights=wts, axis=1***REMOVED*** +
                     average(a.imag, weights=wts, axis=1***REMOVED****1j***REMOVED***
        assert_almost_equal(wav1.real, expected1.real***REMOVED***
        assert_almost_equal(wav1.imag, expected1.imag***REMOVED***


class TestConcatenator(TestCase***REMOVED***:
    # Tests for mr_, the equivalent of r_ for masked arrays.

    def test_1d(self***REMOVED***:
        # Tests mr_ on 1D arrays.
        assert_array_equal(mr_[1, 2, 3, 4, 5, 6***REMOVED***, array([1, 2, 3, 4, 5, 6***REMOVED******REMOVED******REMOVED***
        b = ones(5***REMOVED***
        m = [1, 0, 0, 0, 0***REMOVED***
        d = masked_array(b, mask=m***REMOVED***
        c = mr_[d, 0, 0, d***REMOVED***
        self.assertTrue(isinstance(c, MaskedArray***REMOVED******REMOVED***
        assert_array_equal(c, [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1***REMOVED******REMOVED***
        assert_array_equal(c.mask, mr_[m, 0, 0, m***REMOVED******REMOVED***

    def test_2d(self***REMOVED***:
        # Tests mr_ on 2D arrays.
        a_1 = np.random.rand(5, 5***REMOVED***
        a_2 = np.random.rand(5, 5***REMOVED***
        m_1 = np.round_(np.random.rand(5, 5***REMOVED***, 0***REMOVED***
        m_2 = np.round_(np.random.rand(5, 5***REMOVED***, 0***REMOVED***
        b_1 = masked_array(a_1, mask=m_1***REMOVED***
        b_2 = masked_array(a_2, mask=m_2***REMOVED***
        # append columns
        d = mr_['1', b_1, b_2***REMOVED***
        self.assertTrue(d.shape == (5, 10***REMOVED******REMOVED***
        assert_array_equal(d[:, :5***REMOVED***, b_1***REMOVED***
        assert_array_equal(d[:, 5:***REMOVED***, b_2***REMOVED***
        assert_array_equal(d.mask, np.r_['1', m_1, m_2***REMOVED******REMOVED***
        d = mr_[b_1, b_2***REMOVED***
        self.assertTrue(d.shape == (10, 5***REMOVED******REMOVED***
        assert_array_equal(d[:5,:***REMOVED***, b_1***REMOVED***
        assert_array_equal(d[5:,:***REMOVED***, b_2***REMOVED***
        assert_array_equal(d.mask, np.r_[m_1, m_2***REMOVED******REMOVED***


class TestNotMasked(TestCase***REMOVED***:
    # Tests notmasked_edges and notmasked_contiguous.

    def test_edges(self***REMOVED***:
        # Tests unmasked_edges
        data = masked_array(np.arange(25***REMOVED***.reshape(5, 5***REMOVED***,
                            mask=[[0, 0, 1, 0, 0***REMOVED***,
                                  [0, 0, 0, 1, 1***REMOVED***,
                                  [1, 1, 0, 0, 0***REMOVED***,
                                  [0, 0, 0, 0, 0***REMOVED***,
                                  [1, 1, 1, 0, 0***REMOVED******REMOVED***,***REMOVED***
        test = notmasked_edges(data, None***REMOVED***
        assert_equal(test, [0, 24***REMOVED******REMOVED***
        test = notmasked_edges(data, 0***REMOVED***
        assert_equal(test[0***REMOVED***, [(0, 0, 1, 0, 0***REMOVED***, (0, 1, 2, 3, 4***REMOVED******REMOVED******REMOVED***
        assert_equal(test[1***REMOVED***, [(3, 3, 3, 4, 4***REMOVED***, (0, 1, 2, 3, 4***REMOVED******REMOVED******REMOVED***
        test = notmasked_edges(data, 1***REMOVED***
        assert_equal(test[0***REMOVED***, [(0, 1, 2, 3, 4***REMOVED***, (0, 0, 2, 0, 3***REMOVED******REMOVED******REMOVED***
        assert_equal(test[1***REMOVED***, [(0, 1, 2, 3, 4***REMOVED***, (4, 2, 4, 4, 4***REMOVED******REMOVED******REMOVED***
        #
        test = notmasked_edges(data.data, None***REMOVED***
        assert_equal(test, [0, 24***REMOVED******REMOVED***
        test = notmasked_edges(data.data, 0***REMOVED***
        assert_equal(test[0***REMOVED***, [(0, 0, 0, 0, 0***REMOVED***, (0, 1, 2, 3, 4***REMOVED******REMOVED******REMOVED***
        assert_equal(test[1***REMOVED***, [(4, 4, 4, 4, 4***REMOVED***, (0, 1, 2, 3, 4***REMOVED******REMOVED******REMOVED***
        test = notmasked_edges(data.data, -1***REMOVED***
        assert_equal(test[0***REMOVED***, [(0, 1, 2, 3, 4***REMOVED***, (0, 0, 0, 0, 0***REMOVED******REMOVED******REMOVED***
        assert_equal(test[1***REMOVED***, [(0, 1, 2, 3, 4***REMOVED***, (4, 4, 4, 4, 4***REMOVED******REMOVED******REMOVED***
        #
        data[-2***REMOVED*** = masked
        test = notmasked_edges(data, 0***REMOVED***
        assert_equal(test[0***REMOVED***, [(0, 0, 1, 0, 0***REMOVED***, (0, 1, 2, 3, 4***REMOVED******REMOVED******REMOVED***
        assert_equal(test[1***REMOVED***, [(1, 1, 2, 4, 4***REMOVED***, (0, 1, 2, 3, 4***REMOVED******REMOVED******REMOVED***
        test = notmasked_edges(data, -1***REMOVED***
        assert_equal(test[0***REMOVED***, [(0, 1, 2, 4***REMOVED***, (0, 0, 2, 3***REMOVED******REMOVED******REMOVED***
        assert_equal(test[1***REMOVED***, [(0, 1, 2, 4***REMOVED***, (4, 2, 4, 4***REMOVED******REMOVED******REMOVED***

    def test_contiguous(self***REMOVED***:
        # Tests notmasked_contiguous
        a = masked_array(np.arange(24***REMOVED***.reshape(3, 8***REMOVED***,
                         mask=[[0, 0, 0, 0, 1, 1, 1, 1***REMOVED***,
                               [1, 1, 1, 1, 1, 1, 1, 1***REMOVED***,
                               [0, 0, 0, 0, 0, 0, 1, 0***REMOVED***, ***REMOVED******REMOVED***
        tmp = notmasked_contiguous(a, None***REMOVED***
        assert_equal(tmp[-1***REMOVED***, slice(23, 24, None***REMOVED******REMOVED***
        assert_equal(tmp[-2***REMOVED***, slice(16, 22, None***REMOVED******REMOVED***
        assert_equal(tmp[-3***REMOVED***, slice(0, 4, None***REMOVED******REMOVED***
        #
        tmp = notmasked_contiguous(a, 0***REMOVED***
        self.assertTrue(len(tmp[-1***REMOVED******REMOVED*** == 1***REMOVED***
        self.assertTrue(tmp[-2***REMOVED*** is None***REMOVED***
        assert_equal(tmp[-3***REMOVED***, tmp[-1***REMOVED******REMOVED***
        self.assertTrue(len(tmp[0***REMOVED******REMOVED*** == 2***REMOVED***
        #
        tmp = notmasked_contiguous(a, 1***REMOVED***
        assert_equal(tmp[0***REMOVED***[-1***REMOVED***, slice(0, 4, None***REMOVED******REMOVED***
        self.assertTrue(tmp[1***REMOVED*** is None***REMOVED***
        assert_equal(tmp[2***REMOVED***[-1***REMOVED***, slice(7, 8, None***REMOVED******REMOVED***
        assert_equal(tmp[2***REMOVED***[-2***REMOVED***, slice(0, 6, None***REMOVED******REMOVED***


class TestCompressFunctions(TestCase***REMOVED***:

    def test_compress_nd(self***REMOVED***:
        # Tests compress_nd
        x = np.array(list(range(3*4*5***REMOVED******REMOVED******REMOVED***.reshape(3, 4, 5***REMOVED***
        m = np.zeros((3,4,5***REMOVED******REMOVED***.astype(bool***REMOVED***
        m[1,1,1***REMOVED*** = True
        x = array(x, mask=m***REMOVED***

        # axis=None
        a = compress_nd(x***REMOVED***
        assert_equal(a, [[[ 0,  2,  3,  4***REMOVED***,
                          [10, 12, 13, 14***REMOVED***,
                          [15, 17, 18, 19***REMOVED******REMOVED***,
                         [[40, 42, 43, 44***REMOVED***,
                          [50, 52, 53, 54***REMOVED***,
                          [55, 57, 58, 59***REMOVED******REMOVED******REMOVED******REMOVED***

        # axis=0
        a = compress_nd(x, 0***REMOVED***
        assert_equal(a, [[[ 0,  1,  2,  3,  4***REMOVED***,
                          [ 5,  6,  7,  8,  9***REMOVED***,
                          [10, 11, 12, 13, 14***REMOVED***,
                          [15, 16, 17, 18, 19***REMOVED******REMOVED***,
                         [[40, 41, 42, 43, 44***REMOVED***,
                          [45, 46, 47, 48, 49***REMOVED***,
                          [50, 51, 52, 53, 54***REMOVED***,
                          [55, 56, 57, 58, 59***REMOVED******REMOVED******REMOVED******REMOVED***

        # axis=1
        a = compress_nd(x, 1***REMOVED***
        assert_equal(a, [[[ 0,  1,  2,  3,  4***REMOVED***,
                          [10, 11, 12, 13, 14***REMOVED***,
                          [15, 16, 17, 18, 19***REMOVED******REMOVED***,
                         [[20, 21, 22, 23, 24***REMOVED***,
                          [30, 31, 32, 33, 34***REMOVED***,
                          [35, 36, 37, 38, 39***REMOVED******REMOVED***,
                         [[40, 41, 42, 43, 44***REMOVED***,
                          [50, 51, 52, 53, 54***REMOVED***,
                          [55, 56, 57, 58, 59***REMOVED******REMOVED******REMOVED******REMOVED***

        a2 = compress_nd(x, (1,***REMOVED******REMOVED***
        a3 = compress_nd(x, -2***REMOVED***
        a4 = compress_nd(x, (-2,***REMOVED******REMOVED***
        assert_equal(a, a2***REMOVED***
        assert_equal(a, a3***REMOVED***
        assert_equal(a, a4***REMOVED***

        # axis=2
        a = compress_nd(x, 2***REMOVED***
        assert_equal(a, [[[ 0, 2,  3,  4***REMOVED***,
                          [ 5, 7,  8,  9***REMOVED***,
                          [10, 12, 13, 14***REMOVED***,
                          [15, 17, 18, 19***REMOVED******REMOVED***,
                         [[20, 22, 23, 24***REMOVED***,
                          [25, 27, 28, 29***REMOVED***,
                          [30, 32, 33, 34***REMOVED***,
                          [35, 37, 38, 39***REMOVED******REMOVED***,
                         [[40, 42, 43, 44***REMOVED***,
                          [45, 47, 48, 49***REMOVED***,
                          [50, 52, 53, 54***REMOVED***,
                          [55, 57, 58, 59***REMOVED******REMOVED******REMOVED******REMOVED***

        a2 = compress_nd(x, (2,***REMOVED******REMOVED***
        a3 = compress_nd(x, -1***REMOVED***
        a4 = compress_nd(x, (-1,***REMOVED******REMOVED***
        assert_equal(a, a2***REMOVED***
        assert_equal(a, a3***REMOVED***
        assert_equal(a, a4***REMOVED***

        # axis=(0, 1***REMOVED***
        a = compress_nd(x, (0, 1***REMOVED******REMOVED***
        assert_equal(a, [[[ 0,  1,  2,  3,  4***REMOVED***,
                          [10, 11, 12, 13, 14***REMOVED***,
                          [15, 16, 17, 18, 19***REMOVED******REMOVED***,
                         [[40, 41, 42, 43, 44***REMOVED***,
                          [50, 51, 52, 53, 54***REMOVED***,
                          [55, 56, 57, 58, 59***REMOVED******REMOVED******REMOVED******REMOVED***
        a2 = compress_nd(x, (0, -2***REMOVED******REMOVED***
        assert_equal(a, a2***REMOVED***

        # axis=(1, 2***REMOVED***
        a = compress_nd(x, (1, 2***REMOVED******REMOVED***
        assert_equal(a, [[[ 0,  2,  3,  4***REMOVED***,
                          [10, 12, 13, 14***REMOVED***,
                          [15, 17, 18, 19***REMOVED******REMOVED***,
                         [[20, 22, 23, 24***REMOVED***,
                          [30, 32, 33, 34***REMOVED***,
                          [35, 37, 38, 39***REMOVED******REMOVED***,
                         [[40, 42, 43, 44***REMOVED***,
                          [50, 52, 53, 54***REMOVED***,
                          [55, 57, 58, 59***REMOVED******REMOVED******REMOVED******REMOVED***

        a2 = compress_nd(x, (-2, 2***REMOVED******REMOVED***
        a3 = compress_nd(x, (1, -1***REMOVED******REMOVED***
        a4 = compress_nd(x, (-2, -1***REMOVED******REMOVED***
        assert_equal(a, a2***REMOVED***
        assert_equal(a, a3***REMOVED***
        assert_equal(a, a4***REMOVED***

        # axis=(0, 2***REMOVED***
        a = compress_nd(x, (0, 2***REMOVED******REMOVED***
        assert_equal(a, [[[ 0,  2,  3,  4***REMOVED***,
                          [ 5,  7,  8,  9***REMOVED***,
                          [10, 12, 13, 14***REMOVED***,
                          [15, 17, 18, 19***REMOVED******REMOVED***,
                         [[40, 42, 43, 44***REMOVED***,
                          [45, 47, 48, 49***REMOVED***,
                          [50, 52, 53, 54***REMOVED***,
                          [55, 57, 58, 59***REMOVED******REMOVED******REMOVED******REMOVED***

        a2 = compress_nd(x, (0, -1***REMOVED******REMOVED***
        assert_equal(a, a2***REMOVED***

    def test_compress_rowcols(self***REMOVED***:
        # Tests compress_rowcols
        x = array(np.arange(9***REMOVED***.reshape(3, 3***REMOVED***,
                  mask=[[1, 0, 0***REMOVED***, [0, 0, 0***REMOVED***, [0, 0, 0***REMOVED******REMOVED******REMOVED***
        assert_equal(compress_rowcols(x***REMOVED***, [[4, 5***REMOVED***, [7, 8***REMOVED******REMOVED******REMOVED***
        assert_equal(compress_rowcols(x, 0***REMOVED***, [[3, 4, 5***REMOVED***, [6, 7, 8***REMOVED******REMOVED******REMOVED***
        assert_equal(compress_rowcols(x, 1***REMOVED***, [[1, 2***REMOVED***, [4, 5***REMOVED***, [7, 8***REMOVED******REMOVED******REMOVED***
        x = array(x._data, mask=[[0, 0, 0***REMOVED***, [0, 1, 0***REMOVED***, [0, 0, 0***REMOVED******REMOVED******REMOVED***
        assert_equal(compress_rowcols(x***REMOVED***, [[0, 2***REMOVED***, [6, 8***REMOVED******REMOVED******REMOVED***
        assert_equal(compress_rowcols(x, 0***REMOVED***, [[0, 1, 2***REMOVED***, [6, 7, 8***REMOVED******REMOVED******REMOVED***
        assert_equal(compress_rowcols(x, 1***REMOVED***, [[0, 2***REMOVED***, [3, 5***REMOVED***, [6, 8***REMOVED******REMOVED******REMOVED***
        x = array(x._data, mask=[[1, 0, 0***REMOVED***, [0, 1, 0***REMOVED***, [0, 0, 0***REMOVED******REMOVED******REMOVED***
        assert_equal(compress_rowcols(x***REMOVED***, [[8***REMOVED******REMOVED******REMOVED***
        assert_equal(compress_rowcols(x, 0***REMOVED***, [[6, 7, 8***REMOVED******REMOVED******REMOVED***
        assert_equal(compress_rowcols(x, 1,***REMOVED***, [[2***REMOVED***, [5***REMOVED***, [8***REMOVED******REMOVED******REMOVED***
        x = array(x._data, mask=[[1, 0, 0***REMOVED***, [0, 1, 0***REMOVED***, [0, 0, 1***REMOVED******REMOVED******REMOVED***
        assert_equal(compress_rowcols(x***REMOVED***.size, 0***REMOVED***
        assert_equal(compress_rowcols(x, 0***REMOVED***.size, 0***REMOVED***
        assert_equal(compress_rowcols(x, 1***REMOVED***.size, 0***REMOVED***

    def test_mask_rowcols(self***REMOVED***:
        # Tests mask_rowcols.
        x = array(np.arange(9***REMOVED***.reshape(3, 3***REMOVED***,
                  mask=[[1, 0, 0***REMOVED***, [0, 0, 0***REMOVED***, [0, 0, 0***REMOVED******REMOVED******REMOVED***
        assert_equal(mask_rowcols(x***REMOVED***.mask,
                     [[1, 1, 1***REMOVED***, [1, 0, 0***REMOVED***, [1, 0, 0***REMOVED******REMOVED******REMOVED***
        assert_equal(mask_rowcols(x, 0***REMOVED***.mask,
                     [[1, 1, 1***REMOVED***, [0, 0, 0***REMOVED***, [0, 0, 0***REMOVED******REMOVED******REMOVED***
        assert_equal(mask_rowcols(x, 1***REMOVED***.mask,
                     [[1, 0, 0***REMOVED***, [1, 0, 0***REMOVED***, [1, 0, 0***REMOVED******REMOVED******REMOVED***
        x = array(x._data, mask=[[0, 0, 0***REMOVED***, [0, 1, 0***REMOVED***, [0, 0, 0***REMOVED******REMOVED******REMOVED***
        assert_equal(mask_rowcols(x***REMOVED***.mask,
                     [[0, 1, 0***REMOVED***, [1, 1, 1***REMOVED***, [0, 1, 0***REMOVED******REMOVED******REMOVED***
        assert_equal(mask_rowcols(x, 0***REMOVED***.mask,
                     [[0, 0, 0***REMOVED***, [1, 1, 1***REMOVED***, [0, 0, 0***REMOVED******REMOVED******REMOVED***
        assert_equal(mask_rowcols(x, 1***REMOVED***.mask,
                     [[0, 1, 0***REMOVED***, [0, 1, 0***REMOVED***, [0, 1, 0***REMOVED******REMOVED******REMOVED***
        x = array(x._data, mask=[[1, 0, 0***REMOVED***, [0, 1, 0***REMOVED***, [0, 0, 0***REMOVED******REMOVED******REMOVED***
        assert_equal(mask_rowcols(x***REMOVED***.mask,
                     [[1, 1, 1***REMOVED***, [1, 1, 1***REMOVED***, [1, 1, 0***REMOVED******REMOVED******REMOVED***
        assert_equal(mask_rowcols(x, 0***REMOVED***.mask,
                     [[1, 1, 1***REMOVED***, [1, 1, 1***REMOVED***, [0, 0, 0***REMOVED******REMOVED******REMOVED***
        assert_equal(mask_rowcols(x, 1,***REMOVED***.mask,
                     [[1, 1, 0***REMOVED***, [1, 1, 0***REMOVED***, [1, 1, 0***REMOVED******REMOVED******REMOVED***
        x = array(x._data, mask=[[1, 0, 0***REMOVED***, [0, 1, 0***REMOVED***, [0, 0, 1***REMOVED******REMOVED******REMOVED***
        self.assertTrue(mask_rowcols(x***REMOVED***.all(***REMOVED*** is masked***REMOVED***
        self.assertTrue(mask_rowcols(x, 0***REMOVED***.all(***REMOVED*** is masked***REMOVED***
        self.assertTrue(mask_rowcols(x, 1***REMOVED***.all(***REMOVED*** is masked***REMOVED***
        self.assertTrue(mask_rowcols(x***REMOVED***.mask.all(***REMOVED******REMOVED***
        self.assertTrue(mask_rowcols(x, 0***REMOVED***.mask.all(***REMOVED******REMOVED***
        self.assertTrue(mask_rowcols(x, 1***REMOVED***.mask.all(***REMOVED******REMOVED***

    def test_dot(self***REMOVED***:
        # Tests dot product
        n = np.arange(1, 7***REMOVED***
        #
        m = [1, 0, 0, 0, 0, 0***REMOVED***
        a = masked_array(n, mask=m***REMOVED***.reshape(2, 3***REMOVED***
        b = masked_array(n, mask=m***REMOVED***.reshape(3, 2***REMOVED***
        c = dot(a, b, strict=True***REMOVED***
        assert_equal(c.mask, [[1, 1***REMOVED***, [1, 0***REMOVED******REMOVED******REMOVED***
        c = dot(b, a, strict=True***REMOVED***
        assert_equal(c.mask, [[1, 1, 1***REMOVED***, [1, 0, 0***REMOVED***, [1, 0, 0***REMOVED******REMOVED******REMOVED***
        c = dot(a, b, strict=False***REMOVED***
        assert_equal(c, np.dot(a.filled(0***REMOVED***, b.filled(0***REMOVED******REMOVED******REMOVED***
        c = dot(b, a, strict=False***REMOVED***
        assert_equal(c, np.dot(b.filled(0***REMOVED***, a.filled(0***REMOVED******REMOVED******REMOVED***
        #
        m = [0, 0, 0, 0, 0, 1***REMOVED***
        a = masked_array(n, mask=m***REMOVED***.reshape(2, 3***REMOVED***
        b = masked_array(n, mask=m***REMOVED***.reshape(3, 2***REMOVED***
        c = dot(a, b, strict=True***REMOVED***
        assert_equal(c.mask, [[0, 1***REMOVED***, [1, 1***REMOVED******REMOVED******REMOVED***
        c = dot(b, a, strict=True***REMOVED***
        assert_equal(c.mask, [[0, 0, 1***REMOVED***, [0, 0, 1***REMOVED***, [1, 1, 1***REMOVED******REMOVED******REMOVED***
        c = dot(a, b, strict=False***REMOVED***
        assert_equal(c, np.dot(a.filled(0***REMOVED***, b.filled(0***REMOVED******REMOVED******REMOVED***
        assert_equal(c, dot(a, b***REMOVED******REMOVED***
        c = dot(b, a, strict=False***REMOVED***
        assert_equal(c, np.dot(b.filled(0***REMOVED***, a.filled(0***REMOVED******REMOVED******REMOVED***
        #
        m = [0, 0, 0, 0, 0, 0***REMOVED***
        a = masked_array(n, mask=m***REMOVED***.reshape(2, 3***REMOVED***
        b = masked_array(n, mask=m***REMOVED***.reshape(3, 2***REMOVED***
        c = dot(a, b***REMOVED***
        assert_equal(c.mask, nomask***REMOVED***
        c = dot(b, a***REMOVED***
        assert_equal(c.mask, nomask***REMOVED***
        #
        a = masked_array(n, mask=[1, 0, 0, 0, 0, 0***REMOVED******REMOVED***.reshape(2, 3***REMOVED***
        b = masked_array(n, mask=[0, 0, 0, 0, 0, 0***REMOVED******REMOVED***.reshape(3, 2***REMOVED***
        c = dot(a, b, strict=True***REMOVED***
        assert_equal(c.mask, [[1, 1***REMOVED***, [0, 0***REMOVED******REMOVED******REMOVED***
        c = dot(a, b, strict=False***REMOVED***
        assert_equal(c, np.dot(a.filled(0***REMOVED***, b.filled(0***REMOVED******REMOVED******REMOVED***
        c = dot(b, a, strict=True***REMOVED***
        assert_equal(c.mask, [[1, 0, 0***REMOVED***, [1, 0, 0***REMOVED***, [1, 0, 0***REMOVED******REMOVED******REMOVED***
        c = dot(b, a, strict=False***REMOVED***
        assert_equal(c, np.dot(b.filled(0***REMOVED***, a.filled(0***REMOVED******REMOVED******REMOVED***
        #
        a = masked_array(n, mask=[0, 0, 0, 0, 0, 1***REMOVED******REMOVED***.reshape(2, 3***REMOVED***
        b = masked_array(n, mask=[0, 0, 0, 0, 0, 0***REMOVED******REMOVED***.reshape(3, 2***REMOVED***
        c = dot(a, b, strict=True***REMOVED***
        assert_equal(c.mask, [[0, 0***REMOVED***, [1, 1***REMOVED******REMOVED******REMOVED***
        c = dot(a, b***REMOVED***
        assert_equal(c, np.dot(a.filled(0***REMOVED***, b.filled(0***REMOVED******REMOVED******REMOVED***
        c = dot(b, a, strict=True***REMOVED***
        assert_equal(c.mask, [[0, 0, 1***REMOVED***, [0, 0, 1***REMOVED***, [0, 0, 1***REMOVED******REMOVED******REMOVED***
        c = dot(b, a, strict=False***REMOVED***
        assert_equal(c, np.dot(b.filled(0***REMOVED***, a.filled(0***REMOVED******REMOVED******REMOVED***
        #
        a = masked_array(n, mask=[0, 0, 0, 0, 0, 1***REMOVED******REMOVED***.reshape(2, 3***REMOVED***
        b = masked_array(n, mask=[0, 0, 1, 0, 0, 0***REMOVED******REMOVED***.reshape(3, 2***REMOVED***
        c = dot(a, b, strict=True***REMOVED***
        assert_equal(c.mask, [[1, 0***REMOVED***, [1, 1***REMOVED******REMOVED******REMOVED***
        c = dot(a, b, strict=False***REMOVED***
        assert_equal(c, np.dot(a.filled(0***REMOVED***, b.filled(0***REMOVED******REMOVED******REMOVED***
        c = dot(b, a, strict=True***REMOVED***
        assert_equal(c.mask, [[0, 0, 1***REMOVED***, [1, 1, 1***REMOVED***, [0, 0, 1***REMOVED******REMOVED******REMOVED***
        c = dot(b, a, strict=False***REMOVED***
        assert_equal(c, np.dot(b.filled(0***REMOVED***, a.filled(0***REMOVED******REMOVED******REMOVED***

    def test_dot_returns_maskedarray(self***REMOVED***:
        # See gh-6611
        a = np.eye(3***REMOVED***
        b = array(a***REMOVED***
        assert_(type(dot(a, a***REMOVED******REMOVED*** is MaskedArray***REMOVED***
        assert_(type(dot(a, b***REMOVED******REMOVED*** is MaskedArray***REMOVED***
        assert_(type(dot(b, a***REMOVED******REMOVED*** is MaskedArray***REMOVED***
        assert_(type(dot(b, b***REMOVED******REMOVED*** is MaskedArray***REMOVED***

    def test_dot_out(self***REMOVED***:
        a = array(np.eye(3***REMOVED******REMOVED***
        out = array(np.zeros((3, 3***REMOVED******REMOVED******REMOVED***
        res = dot(a, a, out=out***REMOVED***
        assert_(res is out***REMOVED***
        assert_equal(a, res***REMOVED***


class TestApplyAlongAxis(TestCase***REMOVED***:
    # Tests 2D functions
    def test_3d(self***REMOVED***:
        a = arange(12.***REMOVED***.reshape(2, 2, 3***REMOVED***

        def myfunc(b***REMOVED***:
            return b[1***REMOVED***

        xa = apply_along_axis(myfunc, 2, a***REMOVED***
        assert_equal(xa, [[1, 4***REMOVED***, [7, 10***REMOVED******REMOVED******REMOVED***

    # Tests kwargs functions
    def test_3d_kwargs(self***REMOVED***:
        a = arange(12***REMOVED***.reshape(2, 2, 3***REMOVED***

        def myfunc(b, offset=0***REMOVED***:
            return b[1+offset***REMOVED***

        xa = apply_along_axis(myfunc, 2, a, offset=1***REMOVED***
        assert_equal(xa, [[2, 5***REMOVED***, [8, 11***REMOVED******REMOVED******REMOVED***


class TestApplyOverAxes(TestCase***REMOVED***:
    # Tests apply_over_axes
    def test_basic(self***REMOVED***:
        a = arange(24***REMOVED***.reshape(2, 3, 4***REMOVED***
        test = apply_over_axes(np.sum, a, [0, 2***REMOVED******REMOVED***
        ctrl = np.array([[[60***REMOVED***, [92***REMOVED***, [124***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_equal(test, ctrl***REMOVED***
        a[(a % 2***REMOVED***.astype(np.bool***REMOVED******REMOVED*** = masked
        test = apply_over_axes(np.sum, a, [0, 2***REMOVED******REMOVED***
        ctrl = np.array([[[28***REMOVED***, [44***REMOVED***, [60***REMOVED******REMOVED******REMOVED******REMOVED***
        assert_equal(test, ctrl***REMOVED***


class TestMedian(TestCase***REMOVED***:
    def test_pytype(self***REMOVED***:
        r = np.ma.median([[np.inf, np.inf***REMOVED***, [np.inf, np.inf***REMOVED******REMOVED***, axis=-1***REMOVED***
        assert_equal(r, np.inf***REMOVED***

    def test_non_masked(self***REMOVED***:
        x = np.arange(9***REMOVED***
        assert_equal(np.ma.median(x***REMOVED***, 4.***REMOVED***
        assert_(type(np.ma.median(x***REMOVED******REMOVED*** is not MaskedArray***REMOVED***
        x = range(9***REMOVED***
        assert_equal(np.ma.median(x***REMOVED***, 4.***REMOVED***
        assert_(type(np.ma.median(x***REMOVED******REMOVED*** is not MaskedArray***REMOVED***
        x = 5
        assert_equal(np.ma.median(x***REMOVED***, 5.***REMOVED***
        assert_(type(np.ma.median(x***REMOVED******REMOVED*** is not MaskedArray***REMOVED***

    def test_docstring_examples(self***REMOVED***:
        "test the examples given in the docstring of ma.median"
        x = array(np.arange(8***REMOVED***, mask=[0***REMOVED****4 + [1***REMOVED****4***REMOVED***
        assert_equal(np.ma.median(x***REMOVED***, 1.5***REMOVED***
        assert_equal(np.ma.median(x***REMOVED***.shape, (***REMOVED***, "shape mismatch"***REMOVED***
        assert_(type(np.ma.median(x***REMOVED******REMOVED*** is not MaskedArray***REMOVED***
        x = array(np.arange(10***REMOVED***.reshape(2, 5***REMOVED***, mask=[0***REMOVED****6 + [1***REMOVED****4***REMOVED***
        assert_equal(np.ma.median(x***REMOVED***, 2.5***REMOVED***
        assert_equal(np.ma.median(x***REMOVED***.shape, (***REMOVED***, "shape mismatch"***REMOVED***
        assert_(type(np.ma.median(x***REMOVED******REMOVED*** is not MaskedArray***REMOVED***
        ma_x = np.ma.median(x, axis=-1, overwrite_input=True***REMOVED***
        assert_equal(ma_x, [2., 5.***REMOVED******REMOVED***
        assert_equal(ma_x.shape, (2,***REMOVED***, "shape mismatch"***REMOVED***
        assert_(type(ma_x***REMOVED*** is MaskedArray***REMOVED***

    def test_axis_argument_errors(self***REMOVED***:
        msg = "mask = %s, ndim = %s, axis = %s, overwrite_input = %s"
        for ndmin in range(5***REMOVED***:
            for mask in [False, True***REMOVED***:
                x = array(1, ndmin=ndmin, mask=mask***REMOVED***

                # Valid axis values should not raise exception
                args = itertools.product(range(-ndmin, ndmin***REMOVED***, [False, True***REMOVED******REMOVED***
                for axis, over in args:
                    ***REMOVED***
                        np.ma.median(x, axis=axis, overwrite_input=over***REMOVED***
                    ***REMOVED***
                        raise AssertionError(msg % (mask, ndmin, axis, over***REMOVED******REMOVED***

                # Invalid axis values should raise exception
                args = itertools.product([-(ndmin + 1***REMOVED***, ndmin***REMOVED***, [False, True***REMOVED******REMOVED***
                for axis, over in args:
                    ***REMOVED***
                        np.ma.median(x, axis=axis, overwrite_input=over***REMOVED***
                    except IndexError:
                        pass
                    else:
                        raise AssertionError(msg % (mask, ndmin, axis, over***REMOVED******REMOVED***

    def test_masked_0d(self***REMOVED***:
        # Check values
        x = array(1, mask=False***REMOVED***
        assert_equal(np.ma.median(x***REMOVED***, 1***REMOVED***
        x = array(1, mask=True***REMOVED***
        assert_equal(np.ma.median(x***REMOVED***, np.ma.masked***REMOVED***

    def test_masked_1d(self***REMOVED***:
        x = array(np.arange(5***REMOVED***, mask=True***REMOVED***
        assert_equal(np.ma.median(x***REMOVED***, np.ma.masked***REMOVED***
        assert_equal(np.ma.median(x***REMOVED***.shape, (***REMOVED***, "shape mismatch"***REMOVED***
        assert_(type(np.ma.median(x***REMOVED******REMOVED*** is np.ma.core.MaskedConstant***REMOVED***
        x = array(np.arange(5***REMOVED***, mask=False***REMOVED***
        assert_equal(np.ma.median(x***REMOVED***, 2.***REMOVED***
        assert_equal(np.ma.median(x***REMOVED***.shape, (***REMOVED***, "shape mismatch"***REMOVED***
        assert_(type(np.ma.median(x***REMOVED******REMOVED*** is not MaskedArray***REMOVED***
        x = array(np.arange(5***REMOVED***, mask=[0,1,0,0,0***REMOVED******REMOVED***
        assert_equal(np.ma.median(x***REMOVED***, 2.5***REMOVED***
        assert_equal(np.ma.median(x***REMOVED***.shape, (***REMOVED***, "shape mismatch"***REMOVED***
        assert_(type(np.ma.median(x***REMOVED******REMOVED*** is not MaskedArray***REMOVED***
        x = array(np.arange(5***REMOVED***, mask=[0,1,1,1,1***REMOVED******REMOVED***
        assert_equal(np.ma.median(x***REMOVED***, 0.***REMOVED***
        assert_equal(np.ma.median(x***REMOVED***.shape, (***REMOVED***, "shape mismatch"***REMOVED***
        assert_(type(np.ma.median(x***REMOVED******REMOVED*** is not MaskedArray***REMOVED***

    def test_1d_shape_consistency(self***REMOVED***:
        assert_equal(np.ma.median(array([1,2,3***REMOVED***,mask=[0,0,0***REMOVED******REMOVED******REMOVED***.shape,
                     np.ma.median(array([1,2,3***REMOVED***,mask=[0,1,0***REMOVED******REMOVED******REMOVED***.shape ***REMOVED***

    def test_2d(self***REMOVED***:
        # Tests median w/ 2D
        (n, p***REMOVED*** = (101, 30***REMOVED***
        x = masked_array(np.linspace(-1., 1., n***REMOVED***,***REMOVED***
        x[:10***REMOVED*** = x[-10:***REMOVED*** = masked
        z = masked_array(np.empty((n, p***REMOVED***, dtype=float***REMOVED******REMOVED***
        z[:, 0***REMOVED*** = x[:***REMOVED***
        idx = np.arange(len(x***REMOVED******REMOVED***
        for i in range(1, p***REMOVED***:
            np.random.shuffle(idx***REMOVED***
            z[:, i***REMOVED*** = x[idx***REMOVED***
        assert_equal(median(z[:, 0***REMOVED******REMOVED***, 0***REMOVED***
        assert_equal(median(z***REMOVED***, 0***REMOVED***
        assert_equal(median(z, axis=0***REMOVED***, np.zeros(p***REMOVED******REMOVED***
        assert_equal(median(z.T, axis=1***REMOVED***, np.zeros(p***REMOVED******REMOVED***

    def test_2d_waxis(self***REMOVED***:
        # Tests median w/ 2D arrays and different axis.
        x = masked_array(np.arange(30***REMOVED***.reshape(10, 3***REMOVED******REMOVED***
        x[:3***REMOVED*** = x[-3:***REMOVED*** = masked
        assert_equal(median(x***REMOVED***, 14.5***REMOVED***
        assert_(type(np.ma.median(x***REMOVED******REMOVED*** is not MaskedArray***REMOVED***
        assert_equal(median(x, axis=0***REMOVED***, [13.5, 14.5, 15.5***REMOVED******REMOVED***
        assert_(type(np.ma.median(x, axis=0***REMOVED******REMOVED*** is MaskedArray***REMOVED***
        assert_equal(median(x, axis=1***REMOVED***, [0, 0, 0, 10, 13, 16, 19, 0, 0, 0***REMOVED******REMOVED***
        assert_(type(np.ma.median(x, axis=1***REMOVED******REMOVED*** is MaskedArray***REMOVED***
        assert_equal(median(x, axis=1***REMOVED***.mask, [1, 1, 1, 0, 0, 0, 0, 1, 1, 1***REMOVED******REMOVED***

    def test_3d(self***REMOVED***:
        # Tests median w/ 3D
        x = np.ma.arange(24***REMOVED***.reshape(3, 4, 2***REMOVED***
        x[x % 3 == 0***REMOVED*** = masked
        assert_equal(median(x, 0***REMOVED***, [[12, 9***REMOVED***, [6, 15***REMOVED***, [12, 9***REMOVED***, [18, 15***REMOVED******REMOVED******REMOVED***
        x.shape = (4, 3, 2***REMOVED***
        assert_equal(median(x, 0***REMOVED***, [[99, 10***REMOVED***, [11, 99***REMOVED***, [13, 14***REMOVED******REMOVED******REMOVED***
        x = np.ma.arange(24***REMOVED***.reshape(4, 3, 2***REMOVED***
        x[x % 5 == 0***REMOVED*** = masked
        assert_equal(median(x, 0***REMOVED***, [[12, 10***REMOVED***, [8, 9***REMOVED***, [16, 17***REMOVED******REMOVED******REMOVED***

    def test_neg_axis(self***REMOVED***:
        x = masked_array(np.arange(30***REMOVED***.reshape(10, 3***REMOVED******REMOVED***
        x[:3***REMOVED*** = x[-3:***REMOVED*** = masked
        assert_equal(median(x, axis=-1***REMOVED***, median(x, axis=1***REMOVED******REMOVED***

    def test_out(self***REMOVED***:
        x = masked_array(np.arange(30***REMOVED***.reshape(10, 3***REMOVED******REMOVED***
        x[:3***REMOVED*** = x[-3:***REMOVED*** = masked
        out = masked_array(np.ones(10***REMOVED******REMOVED***
        r = median(x, axis=1, out=out***REMOVED***
        assert_equal(r, out***REMOVED***
        assert_(type(r***REMOVED*** == MaskedArray***REMOVED***

    def test_single_non_masked_value_on_axis(self***REMOVED***:
        data = [[1., 0.***REMOVED***,
                [0., 3.***REMOVED***,
                [0., 0.***REMOVED******REMOVED***
        masked_arr = np.ma.masked_equal(data, 0***REMOVED***
        expected = [1., 3.***REMOVED***
        assert_array_equal(np.ma.median(masked_arr, axis=0***REMOVED***,
                           expected***REMOVED***


class TestCov(TestCase***REMOVED***:

    def setUp(self***REMOVED***:
        self.data = array(np.random.rand(12***REMOVED******REMOVED***

    def test_1d_wo_missing(self***REMOVED***:
        # Test cov on 1D variable w/o missing values
        x = self.data
        assert_almost_equal(np.cov(x***REMOVED***, cov(x***REMOVED******REMOVED***
        assert_almost_equal(np.cov(x, rowvar=False***REMOVED***, cov(x, rowvar=False***REMOVED******REMOVED***
        assert_almost_equal(np.cov(x, rowvar=False, bias=True***REMOVED***,
                            cov(x, rowvar=False, bias=True***REMOVED******REMOVED***

    def test_2d_wo_missing(self***REMOVED***:
        # Test cov on 1 2D variable w/o missing values
        x = self.data.reshape(3, 4***REMOVED***
        assert_almost_equal(np.cov(x***REMOVED***, cov(x***REMOVED******REMOVED***
        assert_almost_equal(np.cov(x, rowvar=False***REMOVED***, cov(x, rowvar=False***REMOVED******REMOVED***
        assert_almost_equal(np.cov(x, rowvar=False, bias=True***REMOVED***,
                            cov(x, rowvar=False, bias=True***REMOVED******REMOVED***

    def test_1d_w_missing(self***REMOVED***:
        # Test cov 1 1D variable w/missing values
        x = self.data
        x[-1***REMOVED*** = masked
        x -= x.mean(***REMOVED***
        nx = x.compressed(***REMOVED***
        assert_almost_equal(np.cov(nx***REMOVED***, cov(x***REMOVED******REMOVED***
        assert_almost_equal(np.cov(nx, rowvar=False***REMOVED***, cov(x, rowvar=False***REMOVED******REMOVED***
        assert_almost_equal(np.cov(nx, rowvar=False, bias=True***REMOVED***,
                            cov(x, rowvar=False, bias=True***REMOVED******REMOVED***
        #
        ***REMOVED***
            cov(x, allow_masked=False***REMOVED***
        except ValueError:
            pass
        #
        # 2 1D variables w/ missing values
        nx = x[1:-1***REMOVED***
        assert_almost_equal(np.cov(nx, nx[::-1***REMOVED******REMOVED***, cov(x, x[::-1***REMOVED******REMOVED******REMOVED***
        assert_almost_equal(np.cov(nx, nx[::-1***REMOVED***, rowvar=False***REMOVED***,
                            cov(x, x[::-1***REMOVED***, rowvar=False***REMOVED******REMOVED***
        assert_almost_equal(np.cov(nx, nx[::-1***REMOVED***, rowvar=False, bias=True***REMOVED***,
                            cov(x, x[::-1***REMOVED***, rowvar=False, bias=True***REMOVED******REMOVED***

    def test_2d_w_missing(self***REMOVED***:
        # Test cov on 2D variable w/ missing value
        x = self.data
        x[-1***REMOVED*** = masked
        x = x.reshape(3, 4***REMOVED***
        valid = np.logical_not(getmaskarray(x***REMOVED******REMOVED***.astype(int***REMOVED***
        frac = np.dot(valid, valid.T***REMOVED***
        xf = (x - x.mean(1***REMOVED***[:, None***REMOVED******REMOVED***.filled(0***REMOVED***
        assert_almost_equal(cov(x***REMOVED***,
                            np.cov(xf***REMOVED*** * (x.shape[1***REMOVED*** - 1***REMOVED*** / (frac - 1.***REMOVED******REMOVED***
        assert_almost_equal(cov(x, bias=True***REMOVED***,
                            np.cov(xf, bias=True***REMOVED*** * x.shape[1***REMOVED*** / frac***REMOVED***
        frac = np.dot(valid.T, valid***REMOVED***
        xf = (x - x.mean(0***REMOVED******REMOVED***.filled(0***REMOVED***
        assert_almost_equal(cov(x, rowvar=False***REMOVED***,
                            (np.cov(xf, rowvar=False***REMOVED*** *
                             (x.shape[0***REMOVED*** - 1***REMOVED*** / (frac - 1.***REMOVED******REMOVED******REMOVED***
        assert_almost_equal(cov(x, rowvar=False, bias=True***REMOVED***,
                            (np.cov(xf, rowvar=False, bias=True***REMOVED*** *
                             x.shape[0***REMOVED*** / frac***REMOVED******REMOVED***


class catch_warn_mae(clear_and_catch_warnings***REMOVED***:
    ***REMOVED*** Context manager to catch, reset warnings in ma.extras module
    ***REMOVED***
    class_modules = (mae,***REMOVED***


class TestCorrcoef(TestCase***REMOVED***:

    def setUp(self***REMOVED***:
        self.data = array(np.random.rand(12***REMOVED******REMOVED***
        self.data2 = array(np.random.rand(12***REMOVED******REMOVED***

    def test_ddof(self***REMOVED***:
        # ddof raises DeprecationWarning
        x, y = self.data, self.data2
        expected = np.corrcoef(x***REMOVED***
        expected2 = np.corrcoef(x, y***REMOVED***
        with catch_warn_mae(***REMOVED***:
            warnings.simplefilter("always"***REMOVED***
            assert_warns(DeprecationWarning, corrcoef, x, ddof=-1***REMOVED***
            warnings.simplefilter("ignore"***REMOVED***
            # ddof has no or negligible effect on the function
            assert_almost_equal(np.corrcoef(x, ddof=0***REMOVED***, corrcoef(x, ddof=0***REMOVED******REMOVED***
            assert_almost_equal(corrcoef(x, ddof=-1***REMOVED***, expected***REMOVED***
            assert_almost_equal(corrcoef(x, y, ddof=-1***REMOVED***, expected2***REMOVED***
            assert_almost_equal(corrcoef(x, ddof=3***REMOVED***, expected***REMOVED***
            assert_almost_equal(corrcoef(x, y, ddof=3***REMOVED***, expected2***REMOVED***

    def test_bias(self***REMOVED***:
        x, y = self.data, self.data2
        expected = np.corrcoef(x***REMOVED***
        # bias raises DeprecationWarning
        with catch_warn_mae(***REMOVED***:
            warnings.simplefilter("always"***REMOVED***
            assert_warns(DeprecationWarning, corrcoef, x, y, True, False***REMOVED***
            assert_warns(DeprecationWarning, corrcoef, x, y, True, True***REMOVED***
            assert_warns(DeprecationWarning, corrcoef, x, bias=False***REMOVED***
            warnings.simplefilter("ignore"***REMOVED***
            # bias has no or negligible effect on the function
            assert_almost_equal(corrcoef(x, bias=1***REMOVED***, expected***REMOVED***

    def test_1d_wo_missing(self***REMOVED***:
        # Test cov on 1D variable w/o missing values
        x = self.data
        assert_almost_equal(np.corrcoef(x***REMOVED***, corrcoef(x***REMOVED******REMOVED***
        assert_almost_equal(np.corrcoef(x, rowvar=False***REMOVED***,
                            corrcoef(x, rowvar=False***REMOVED******REMOVED***
        with catch_warn_mae(***REMOVED***:
            warnings.simplefilter("ignore"***REMOVED***
            assert_almost_equal(np.corrcoef(x, rowvar=False, bias=True***REMOVED***,
                                corrcoef(x, rowvar=False, bias=True***REMOVED******REMOVED***

    def test_2d_wo_missing(self***REMOVED***:
        # Test corrcoef on 1 2D variable w/o missing values
        x = self.data.reshape(3, 4***REMOVED***
        assert_almost_equal(np.corrcoef(x***REMOVED***, corrcoef(x***REMOVED******REMOVED***
        assert_almost_equal(np.corrcoef(x, rowvar=False***REMOVED***,
                            corrcoef(x, rowvar=False***REMOVED******REMOVED***
        with catch_warn_mae(***REMOVED***:
            warnings.simplefilter("ignore"***REMOVED***
            assert_almost_equal(np.corrcoef(x, rowvar=False, bias=True***REMOVED***,
                                corrcoef(x, rowvar=False, bias=True***REMOVED******REMOVED***

    def test_1d_w_missing(self***REMOVED***:
        # Test corrcoef 1 1D variable w/missing values
        x = self.data
        x[-1***REMOVED*** = masked
        x -= x.mean(***REMOVED***
        nx = x.compressed(***REMOVED***
        assert_almost_equal(np.corrcoef(nx***REMOVED***, corrcoef(x***REMOVED******REMOVED***
        assert_almost_equal(np.corrcoef(nx, rowvar=False***REMOVED***,
                            corrcoef(x, rowvar=False***REMOVED******REMOVED***
        with catch_warn_mae(***REMOVED***:
            warnings.simplefilter("ignore"***REMOVED***
            assert_almost_equal(np.corrcoef(nx, rowvar=False, bias=True***REMOVED***,
                                corrcoef(x, rowvar=False, bias=True***REMOVED******REMOVED***
        ***REMOVED***
            corrcoef(x, allow_masked=False***REMOVED***
        except ValueError:
            pass
        # 2 1D variables w/ missing values
        nx = x[1:-1***REMOVED***
        assert_almost_equal(np.corrcoef(nx, nx[::-1***REMOVED******REMOVED***, corrcoef(x, x[::-1***REMOVED******REMOVED******REMOVED***
        assert_almost_equal(np.corrcoef(nx, nx[::-1***REMOVED***, rowvar=False***REMOVED***,
                            corrcoef(x, x[::-1***REMOVED***, rowvar=False***REMOVED******REMOVED***
        with catch_warn_mae(***REMOVED***:
            warnings.simplefilter("ignore"***REMOVED***
            # ddof and bias have no or negligible effect on the function
            assert_almost_equal(np.corrcoef(nx, nx[::-1***REMOVED******REMOVED***,
                                corrcoef(x, x[::-1***REMOVED***, bias=1***REMOVED******REMOVED***
            assert_almost_equal(np.corrcoef(nx, nx[::-1***REMOVED******REMOVED***,
                                corrcoef(x, x[::-1***REMOVED***, ddof=2***REMOVED******REMOVED***

    def test_2d_w_missing(self***REMOVED***:
        # Test corrcoef on 2D variable w/ missing value
        x = self.data
        x[-1***REMOVED*** = masked
        x = x.reshape(3, 4***REMOVED***

        test = corrcoef(x***REMOVED***
        control = np.corrcoef(x***REMOVED***
        assert_almost_equal(test[:-1, :-1***REMOVED***, control[:-1, :-1***REMOVED******REMOVED***
        with catch_warn_mae(***REMOVED***:
            warnings.simplefilter("ignore"***REMOVED***
            # ddof and bias have no or negligible effect on the function
            assert_almost_equal(corrcoef(x, ddof=-2***REMOVED***[:-1, :-1***REMOVED***,
                                control[:-1, :-1***REMOVED******REMOVED***
            assert_almost_equal(corrcoef(x, ddof=3***REMOVED***[:-1, :-1***REMOVED***,
                                control[:-1, :-1***REMOVED******REMOVED***
            assert_almost_equal(corrcoef(x, bias=1***REMOVED***[:-1, :-1***REMOVED***,
                                control[:-1, :-1***REMOVED******REMOVED***


class TestPolynomial(TestCase***REMOVED***:
    #
    def test_polyfit(self***REMOVED***:
        # Tests polyfit
        # On ndarrays
        x = np.random.rand(10***REMOVED***
        y = np.random.rand(20***REMOVED***.reshape(-1, 2***REMOVED***
        assert_almost_equal(polyfit(x, y, 3***REMOVED***, np.polyfit(x, y, 3***REMOVED******REMOVED***
        # ON 1D maskedarrays
        x = x.view(MaskedArray***REMOVED***
        x[0***REMOVED*** = masked
        y = y.view(MaskedArray***REMOVED***
        y[0, 0***REMOVED*** = y[-1, -1***REMOVED*** = masked
        #
        (C, R, K, S, D***REMOVED*** = polyfit(x, y[:, 0***REMOVED***, 3, full=True***REMOVED***
        (c, r, k, s, d***REMOVED*** = np.polyfit(x[1:***REMOVED***, y[1:, 0***REMOVED***.compressed(***REMOVED***, 3,
                                     full=True***REMOVED***
        for (a, a_***REMOVED*** in zip((C, R, K, S, D***REMOVED***, (c, r, k, s, d***REMOVED******REMOVED***:
            assert_almost_equal(a, a_***REMOVED***
        #
        (C, R, K, S, D***REMOVED*** = polyfit(x, y[:, -1***REMOVED***, 3, full=True***REMOVED***
        (c, r, k, s, d***REMOVED*** = np.polyfit(x[1:-1***REMOVED***, y[1:-1, -1***REMOVED***, 3, full=True***REMOVED***
        for (a, a_***REMOVED*** in zip((C, R, K, S, D***REMOVED***, (c, r, k, s, d***REMOVED******REMOVED***:
            assert_almost_equal(a, a_***REMOVED***
        #
        (C, R, K, S, D***REMOVED*** = polyfit(x, y, 3, full=True***REMOVED***
        (c, r, k, s, d***REMOVED*** = np.polyfit(x[1:-1***REMOVED***, y[1:-1,:***REMOVED***, 3, full=True***REMOVED***
        for (a, a_***REMOVED*** in zip((C, R, K, S, D***REMOVED***, (c, r, k, s, d***REMOVED******REMOVED***:
            assert_almost_equal(a, a_***REMOVED***
        #
        w = np.random.rand(10***REMOVED*** + 1
        wo = w.copy(***REMOVED***
        xs = x[1:-1***REMOVED***
        ys = y[1:-1***REMOVED***
        ws = w[1:-1***REMOVED***
        (C, R, K, S, D***REMOVED*** = polyfit(x, y, 3, full=True, w=w***REMOVED***
        (c, r, k, s, d***REMOVED*** = np.polyfit(xs, ys, 3, full=True, w=ws***REMOVED***
        assert_equal(w, wo***REMOVED***
        for (a, a_***REMOVED*** in zip((C, R, K, S, D***REMOVED***, (c, r, k, s, d***REMOVED******REMOVED***:
            assert_almost_equal(a, a_***REMOVED***

    def test_polyfit_with_masked_NaNs(self***REMOVED***:
        x = np.random.rand(10***REMOVED***
        y = np.random.rand(20***REMOVED***.reshape(-1, 2***REMOVED***

        x[0***REMOVED*** = np.nan
        y[-1,-1***REMOVED*** = np.nan
        x = x.view(MaskedArray***REMOVED***
        y = y.view(MaskedArray***REMOVED***
        x[0***REMOVED*** = masked
        y[-1,-1***REMOVED*** = masked

        (C, R, K, S, D***REMOVED*** = polyfit(x, y, 3, full=True***REMOVED***
        (c, r, k, s, d***REMOVED*** = np.polyfit(x[1:-1***REMOVED***, y[1:-1,:***REMOVED***, 3, full=True***REMOVED***
        for (a, a_***REMOVED*** in zip((C, R, K, S, D***REMOVED***, (c, r, k, s, d***REMOVED******REMOVED***:
            assert_almost_equal(a, a_***REMOVED***


class TestArraySetOps(TestCase***REMOVED***:

    def test_unique_onlist(self***REMOVED***:
        # Test unique on list
        data = [1, 1, 1, 2, 2, 3***REMOVED***
        test = unique(data, return_index=True, return_inverse=True***REMOVED***
        self.assertTrue(isinstance(test[0***REMOVED***, MaskedArray***REMOVED******REMOVED***
        assert_equal(test[0***REMOVED***, masked_array([1, 2, 3***REMOVED***, mask=[0, 0, 0***REMOVED******REMOVED******REMOVED***
        assert_equal(test[1***REMOVED***, [0, 3, 5***REMOVED******REMOVED***
        assert_equal(test[2***REMOVED***, [0, 0, 0, 1, 1, 2***REMOVED******REMOVED***

    def test_unique_onmaskedarray(self***REMOVED***:
        # Test unique on masked data w/use_mask=True
        data = masked_array([1, 1, 1, 2, 2, 3***REMOVED***, mask=[0, 0, 1, 0, 1, 0***REMOVED******REMOVED***
        test = unique(data, return_index=True, return_inverse=True***REMOVED***
        assert_equal(test[0***REMOVED***, masked_array([1, 2, 3, -1***REMOVED***, mask=[0, 0, 0, 1***REMOVED******REMOVED******REMOVED***
        assert_equal(test[1***REMOVED***, [0, 3, 5, 2***REMOVED******REMOVED***
        assert_equal(test[2***REMOVED***, [0, 0, 3, 1, 3, 2***REMOVED******REMOVED***
        #
        data.fill_value = 3
        data = masked_array(data=[1, 1, 1, 2, 2, 3***REMOVED***,
                            mask=[0, 0, 1, 0, 1, 0***REMOVED***, fill_value=3***REMOVED***
        test = unique(data, return_index=True, return_inverse=True***REMOVED***
        assert_equal(test[0***REMOVED***, masked_array([1, 2, 3, -1***REMOVED***, mask=[0, 0, 0, 1***REMOVED******REMOVED******REMOVED***
        assert_equal(test[1***REMOVED***, [0, 3, 5, 2***REMOVED******REMOVED***
        assert_equal(test[2***REMOVED***, [0, 0, 3, 1, 3, 2***REMOVED******REMOVED***

    def test_unique_allmasked(self***REMOVED***:
        # Test all masked
        data = masked_array([1, 1, 1***REMOVED***, mask=True***REMOVED***
        test = unique(data, return_index=True, return_inverse=True***REMOVED***
        assert_equal(test[0***REMOVED***, masked_array([1, ***REMOVED***, mask=[True***REMOVED******REMOVED******REMOVED***
        assert_equal(test[1***REMOVED***, [0***REMOVED******REMOVED***
        assert_equal(test[2***REMOVED***, [0, 0, 0***REMOVED******REMOVED***
        #
        # Test masked
        data = masked
        test = unique(data, return_index=True, return_inverse=True***REMOVED***
        assert_equal(test[0***REMOVED***, masked_array(masked***REMOVED******REMOVED***
        assert_equal(test[1***REMOVED***, [0***REMOVED******REMOVED***
        assert_equal(test[2***REMOVED***, [0***REMOVED******REMOVED***

    def test_ediff1d(self***REMOVED***:
        # Tests mediff1d
        x = masked_array(np.arange(5***REMOVED***, mask=[1, 0, 0, 0, 1***REMOVED******REMOVED***
        control = array([1, 1, 1, 4***REMOVED***, mask=[1, 0, 0, 1***REMOVED******REMOVED***
        test = ediff1d(x***REMOVED***
        assert_equal(test, control***REMOVED***
        assert_equal(test.data, control.data***REMOVED***
        assert_equal(test.mask, control.mask***REMOVED***

    def test_ediff1d_tobegin(self***REMOVED***:
        # Test ediff1d w/ to_begin
        x = masked_array(np.arange(5***REMOVED***, mask=[1, 0, 0, 0, 1***REMOVED******REMOVED***
        test = ediff1d(x, to_begin=masked***REMOVED***
        control = array([0, 1, 1, 1, 4***REMOVED***, mask=[1, 1, 0, 0, 1***REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        assert_equal(test.data, control.data***REMOVED***
        assert_equal(test.mask, control.mask***REMOVED***
        #
        test = ediff1d(x, to_begin=[1, 2, 3***REMOVED******REMOVED***
        control = array([1, 2, 3, 1, 1, 1, 4***REMOVED***, mask=[0, 0, 0, 1, 0, 0, 1***REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        assert_equal(test.data, control.data***REMOVED***
        assert_equal(test.mask, control.mask***REMOVED***

    def test_ediff1d_toend(self***REMOVED***:
        # Test ediff1d w/ to_end
        x = masked_array(np.arange(5***REMOVED***, mask=[1, 0, 0, 0, 1***REMOVED******REMOVED***
        test = ediff1d(x, to_end=masked***REMOVED***
        control = array([1, 1, 1, 4, 0***REMOVED***, mask=[1, 0, 0, 1, 1***REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        assert_equal(test.data, control.data***REMOVED***
        assert_equal(test.mask, control.mask***REMOVED***
        #
        test = ediff1d(x, to_end=[1, 2, 3***REMOVED******REMOVED***
        control = array([1, 1, 1, 4, 1, 2, 3***REMOVED***, mask=[1, 0, 0, 1, 0, 0, 0***REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        assert_equal(test.data, control.data***REMOVED***
        assert_equal(test.mask, control.mask***REMOVED***

    def test_ediff1d_tobegin_toend(self***REMOVED***:
        # Test ediff1d w/ to_begin and to_end
        x = masked_array(np.arange(5***REMOVED***, mask=[1, 0, 0, 0, 1***REMOVED******REMOVED***
        test = ediff1d(x, to_end=masked, to_begin=masked***REMOVED***
        control = array([0, 1, 1, 1, 4, 0***REMOVED***, mask=[1, 1, 0, 0, 1, 1***REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        assert_equal(test.data, control.data***REMOVED***
        assert_equal(test.mask, control.mask***REMOVED***
        #
        test = ediff1d(x, to_end=[1, 2, 3***REMOVED***, to_begin=masked***REMOVED***
        control = array([0, 1, 1, 1, 4, 1, 2, 3***REMOVED***,
                        mask=[1, 1, 0, 0, 1, 0, 0, 0***REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        assert_equal(test.data, control.data***REMOVED***
        assert_equal(test.mask, control.mask***REMOVED***

    def test_ediff1d_ndarray(self***REMOVED***:
        # Test ediff1d w/ a ndarray
        x = np.arange(5***REMOVED***
        test = ediff1d(x***REMOVED***
        control = array([1, 1, 1, 1***REMOVED***, mask=[0, 0, 0, 0***REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        self.assertTrue(isinstance(test, MaskedArray***REMOVED******REMOVED***
        assert_equal(test.data, control.data***REMOVED***
        assert_equal(test.mask, control.mask***REMOVED***
        #
        test = ediff1d(x, to_end=masked, to_begin=masked***REMOVED***
        control = array([0, 1, 1, 1, 1, 0***REMOVED***, mask=[1, 0, 0, 0, 0, 1***REMOVED******REMOVED***
        self.assertTrue(isinstance(test, MaskedArray***REMOVED******REMOVED***
        assert_equal(test.data, control.data***REMOVED***
        assert_equal(test.mask, control.mask***REMOVED***

    def test_intersect1d(self***REMOVED***:
        # Test intersect1d
        x = array([1, 3, 3, 3***REMOVED***, mask=[0, 0, 0, 1***REMOVED******REMOVED***
        y = array([3, 1, 1, 1***REMOVED***, mask=[0, 0, 0, 1***REMOVED******REMOVED***
        test = intersect1d(x, y***REMOVED***
        control = array([1, 3, -1***REMOVED***, mask=[0, 0, 1***REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***

    def test_setxor1d(self***REMOVED***:
        # Test setxor1d
        a = array([1, 2, 5, 7, -1***REMOVED***, mask=[0, 0, 0, 0, 1***REMOVED******REMOVED***
        b = array([1, 2, 3, 4, 5, -1***REMOVED***, mask=[0, 0, 0, 0, 0, 1***REMOVED******REMOVED***
        test = setxor1d(a, b***REMOVED***
        assert_equal(test, array([3, 4, 7***REMOVED******REMOVED******REMOVED***
        #
        a = array([1, 2, 5, 7, -1***REMOVED***, mask=[0, 0, 0, 0, 1***REMOVED******REMOVED***
        b = [1, 2, 3, 4, 5***REMOVED***
        test = setxor1d(a, b***REMOVED***
        assert_equal(test, array([3, 4, 7, -1***REMOVED***, mask=[0, 0, 0, 1***REMOVED******REMOVED******REMOVED***
        #
        a = array([1, 2, 3***REMOVED******REMOVED***
        b = array([6, 5, 4***REMOVED******REMOVED***
        test = setxor1d(a, b***REMOVED***
        assert_(isinstance(test, MaskedArray***REMOVED******REMOVED***
        assert_equal(test, [1, 2, 3, 4, 5, 6***REMOVED******REMOVED***
        #
        a = array([1, 8, 2, 3***REMOVED***, mask=[0, 1, 0, 0***REMOVED******REMOVED***
        b = array([6, 5, 4, 8***REMOVED***, mask=[0, 0, 0, 1***REMOVED******REMOVED***
        test = setxor1d(a, b***REMOVED***
        assert_(isinstance(test, MaskedArray***REMOVED******REMOVED***
        assert_equal(test, [1, 2, 3, 4, 5, 6***REMOVED******REMOVED***
        #
        assert_array_equal([***REMOVED***, setxor1d([***REMOVED***, [***REMOVED******REMOVED******REMOVED***

    def test_in1d(self***REMOVED***:
        # Test in1d
        a = array([1, 2, 5, 7, -1***REMOVED***, mask=[0, 0, 0, 0, 1***REMOVED******REMOVED***
        b = array([1, 2, 3, 4, 5, -1***REMOVED***, mask=[0, 0, 0, 0, 0, 1***REMOVED******REMOVED***
        test = in1d(a, b***REMOVED***
        assert_equal(test, [True, True, True, False, True***REMOVED******REMOVED***
        #
        a = array([5, 5, 2, 1, -1***REMOVED***, mask=[0, 0, 0, 0, 1***REMOVED******REMOVED***
        b = array([1, 5, -1***REMOVED***, mask=[0, 0, 1***REMOVED******REMOVED***
        test = in1d(a, b***REMOVED***
        assert_equal(test, [True, True, False, True, True***REMOVED******REMOVED***
        #
        assert_array_equal([***REMOVED***, in1d([***REMOVED***, [***REMOVED******REMOVED******REMOVED***

    def test_in1d_invert(self***REMOVED***:
        # Test in1d's invert parameter
        a = array([1, 2, 5, 7, -1***REMOVED***, mask=[0, 0, 0, 0, 1***REMOVED******REMOVED***
        b = array([1, 2, 3, 4, 5, -1***REMOVED***, mask=[0, 0, 0, 0, 0, 1***REMOVED******REMOVED***
        assert_equal(np.invert(in1d(a, b***REMOVED******REMOVED***, in1d(a, b, invert=True***REMOVED******REMOVED***

        a = array([5, 5, 2, 1, -1***REMOVED***, mask=[0, 0, 0, 0, 1***REMOVED******REMOVED***
        b = array([1, 5, -1***REMOVED***, mask=[0, 0, 1***REMOVED******REMOVED***
        assert_equal(np.invert(in1d(a, b***REMOVED******REMOVED***, in1d(a, b, invert=True***REMOVED******REMOVED***

        assert_array_equal([***REMOVED***, in1d([***REMOVED***, [***REMOVED***, invert=True***REMOVED******REMOVED***

    def test_union1d(self***REMOVED***:
        # Test union1d
        a = array([1, 2, 5, 7, 5, -1***REMOVED***, mask=[0, 0, 0, 0, 0, 1***REMOVED******REMOVED***
        b = array([1, 2, 3, 4, 5, -1***REMOVED***, mask=[0, 0, 0, 0, 0, 1***REMOVED******REMOVED***
        test = union1d(a, b***REMOVED***
        control = array([1, 2, 3, 4, 5, 7, -1***REMOVED***, mask=[0, 0, 0, 0, 0, 0, 1***REMOVED******REMOVED***
        assert_equal(test, control***REMOVED***
        #
        assert_array_equal([***REMOVED***, union1d([***REMOVED***, [***REMOVED******REMOVED******REMOVED***

    def test_setdiff1d(self***REMOVED***:
        # Test setdiff1d
        a = array([6, 5, 4, 7, 7, 1, 2, 1***REMOVED***, mask=[0, 0, 0, 0, 0, 0, 0, 1***REMOVED******REMOVED***
        b = array([2, 4, 3, 3, 2, 1, 5***REMOVED******REMOVED***
        test = setdiff1d(a, b***REMOVED***
        assert_equal(test, array([6, 7, -1***REMOVED***, mask=[0, 0, 1***REMOVED******REMOVED******REMOVED***
        #
        a = arange(10***REMOVED***
        b = arange(8***REMOVED***
        assert_equal(setdiff1d(a, b***REMOVED***, array([8, 9***REMOVED******REMOVED******REMOVED***
        a = array([***REMOVED***, np.uint32, mask=[***REMOVED******REMOVED***
        assert_equal(setdiff1d(a, [***REMOVED******REMOVED***.dtype, np.uint32***REMOVED***

    def test_setdiff1d_char_array(self***REMOVED***:
        # Test setdiff1d_charray
        a = np.array(['a', 'b', 'c'***REMOVED******REMOVED***
        b = np.array(['a', 'b', 's'***REMOVED******REMOVED***
        assert_array_equal(setdiff1d(a, b***REMOVED***, np.array(['c'***REMOVED******REMOVED******REMOVED***


class TestShapeBase(TestCase***REMOVED***:

    def test_atleast2d(self***REMOVED***:
        # Test atleast_2d
        a = masked_array([0, 1, 2***REMOVED***, mask=[0, 1, 0***REMOVED******REMOVED***
        b = atleast_2d(a***REMOVED***
        assert_equal(b.shape, (1, 3***REMOVED******REMOVED***
        assert_equal(b.mask.shape, b.data.shape***REMOVED***
        assert_equal(a.shape, (3,***REMOVED******REMOVED***
        assert_equal(a.mask.shape, a.data.shape***REMOVED***

    def test_shape_scalar(self***REMOVED***:
        # the atleast and diagflat function should work with scalars
        # GitHub issue #3367
        b = atleast_1d(1.0***REMOVED***
        assert_equal(b.shape, (1, ***REMOVED******REMOVED***
        assert_equal(b.mask.shape, b.data.shape***REMOVED***

        b = atleast_2d(1.0***REMOVED***
        assert_equal(b.shape, (1, 1***REMOVED******REMOVED***
        assert_equal(b.mask.shape, b.data.shape***REMOVED***

        b = atleast_3d(1.0***REMOVED***
        assert_equal(b.shape, (1, 1, 1***REMOVED******REMOVED***
        assert_equal(b.mask.shape, b.data.shape***REMOVED***

        b = diagflat(1.0***REMOVED***
        assert_equal(b.shape, (1, 1***REMOVED******REMOVED***
        assert_equal(b.mask.shape, b.data.shape***REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
