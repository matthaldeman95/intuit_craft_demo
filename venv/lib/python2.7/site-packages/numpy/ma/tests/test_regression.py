from __future__ import division, absolute_import, print_function

import warnings

import numpy as np
from numpy.testing import (assert_, TestCase, assert_array_equal,
                           assert_allclose, run_module_suite***REMOVED***
from numpy.compat import sixu

rlevel = 1


class TestRegression(TestCase***REMOVED***:
    def test_masked_array_create(self,level=rlevel***REMOVED***:
        # Ticket #17
        x = np.ma.masked_array([0, 1, 2, 3, 0, 4, 5, 6***REMOVED***,
                               mask=[0, 0, 0, 1, 1, 1, 0, 0***REMOVED******REMOVED***
        assert_array_equal(np.ma.nonzero(x***REMOVED***, [[1, 2, 6, 7***REMOVED******REMOVED******REMOVED***

    def test_masked_array(self,level=rlevel***REMOVED***:
        # Ticket #61
        np.ma.array(1, mask=[1***REMOVED******REMOVED***

    def test_mem_masked_where(self,level=rlevel***REMOVED***:
        # Ticket #62
        from numpy.ma import masked_where, MaskType
        a = np.zeros((1, 1***REMOVED******REMOVED***
        b = np.zeros(a.shape, MaskType***REMOVED***
        c = masked_where(b, a***REMOVED***
        a-c

    def test_masked_array_multiply(self,level=rlevel***REMOVED***:
        # Ticket #254
        a = np.ma.zeros((4, 1***REMOVED******REMOVED***
        a[2, 0***REMOVED*** = np.ma.masked
        b = np.zeros((4, 2***REMOVED******REMOVED***
        a*b
        b*a

    def test_masked_array_repeat(self, level=rlevel***REMOVED***:
        # Ticket #271
        np.ma.array([1***REMOVED***, mask=False***REMOVED***.repeat(10***REMOVED***

    def test_masked_array_repr_unicode(self***REMOVED***:
        # Ticket #1256
        repr(np.ma.array(sixu("Unicode"***REMOVED******REMOVED******REMOVED***

    def test_atleast_2d(self***REMOVED***:
        # Ticket #1559
        a = np.ma.masked_array([0.0, 1.2, 3.5***REMOVED***, mask=[False, True, False***REMOVED******REMOVED***
        b = np.atleast_2d(a***REMOVED***
        assert_(a.mask.ndim == 1***REMOVED***
        assert_(b.mask.ndim == 2***REMOVED***

    def test_set_fill_value_unicode_py3(self***REMOVED***:
        # Ticket #2733
        a = np.ma.masked_array(['a', 'b', 'c'***REMOVED***, mask=[1, 0, 0***REMOVED******REMOVED***
        a.fill_value = 'X'
        assert_(a.fill_value == 'X'***REMOVED***

    def test_var_sets_maskedarray_scalar(self***REMOVED***:
        # Issue gh-2757
        a = np.ma.array(np.arange(5***REMOVED***, mask=True***REMOVED***
        mout = np.ma.array(-1, dtype=float***REMOVED***
        a.var(out=mout***REMOVED***
        assert_(mout._data == 0***REMOVED***

    def test_ddof_corrcoef(self***REMOVED***:
        # See gh-3336
        x = np.ma.masked_equal([1, 2, 3, 4, 5***REMOVED***, 4***REMOVED***
        y = np.array([2, 2.5, 3.1, 3, 5***REMOVED******REMOVED***
        with warnings.catch_warnings(***REMOVED***:
            warnings.simplefilter("ignore"***REMOVED***
            r0 = np.ma.corrcoef(x, y, ddof=0***REMOVED***
            r1 = np.ma.corrcoef(x, y, ddof=1***REMOVED***
            # ddof should not have an effect (it gets cancelled out***REMOVED***
            assert_allclose(r0.data, r1.data***REMOVED***

if __name__ == "__main__":
    run_module_suite(***REMOVED***
