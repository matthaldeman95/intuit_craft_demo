***REMOVED***Miscellaneous functions for testing masked arrays and subclasses

:author: Pierre Gerard-Marchant
:contact: pierregm_at_uga_dot_edu
:version: $Id: testutils.py 3529 2007-11-13 08:01:14Z jarrod.millman $

***REMOVED***
from __future__ import division, absolute_import, print_function

import operator

import numpy as np
from numpy import ndarray, float_
import numpy.core.umath as umath
from numpy.testing import (
    TestCase, assert_, assert_allclose, assert_array_almost_equal_nulp,
    assert_raises, build_err_msg, run_module_suite,
    ***REMOVED***
import numpy.testing.utils as utils
from .core import mask_or, getmask, masked_array, nomask, masked, filled

__all__masked = [
    'almost', 'approx', 'assert_almost_equal', 'assert_array_almost_equal',
    'assert_array_approx_equal', 'assert_array_compare',
    'assert_array_equal', 'assert_array_less', 'assert_close',
    'assert_equal', 'assert_equal_records', 'assert_mask_equal',
    'assert_not_equal', 'fail_if_array_equal',
    ***REMOVED***

# Include some normal test functions to avoid breaking other projects who
# have mistakenly included them from this file. SciPy is one. That is
# unfortunate, as some of these functions are not intended to work with
# masked arrays. But there was no way to tell before.
__some__from_testing = [
    'TestCase', 'assert_', 'assert_allclose',
    'assert_array_almost_equal_nulp', 'assert_raises', 'run_module_suite',
    ***REMOVED***

__all__ = __all__masked + __some__from_testing


def approx(a, b, fill_value=True, rtol=1e-5, atol=1e-8***REMOVED***:
    ***REMOVED***
    Returns true if all components of a and b are equal to given tolerances.

    If fill_value is True, masked values considered equal. Otherwise,
    masked values are considered unequal.  The relative error rtol should
    be positive and << 1.0 The absolute error atol comes into play for
    those elements of b that are very small or zero; it says how small a
    must be also.

    ***REMOVED***
    m = mask_or(getmask(a***REMOVED***, getmask(b***REMOVED******REMOVED***
    d1 = filled(a***REMOVED***
    d2 = filled(b***REMOVED***
    if d1.dtype.char == "O" or d2.dtype.char == "O":
        return np.equal(d1, d2***REMOVED***.ravel(***REMOVED***
    x = filled(masked_array(d1, copy=False, mask=m***REMOVED***, fill_value***REMOVED***.astype(float_***REMOVED***
    y = filled(masked_array(d2, copy=False, mask=m***REMOVED***, 1***REMOVED***.astype(float_***REMOVED***
    d = np.less_equal(umath.absolute(x - y***REMOVED***, atol + rtol * umath.absolute(y***REMOVED******REMOVED***
    return d.ravel(***REMOVED***


def almost(a, b, decimal=6, fill_value=True***REMOVED***:
    ***REMOVED***
    Returns True if a and b are equal up to decimal places.

    If fill_value is True, masked values considered equal. Otherwise,
    masked values are considered unequal.

    ***REMOVED***
    m = mask_or(getmask(a***REMOVED***, getmask(b***REMOVED******REMOVED***
    d1 = filled(a***REMOVED***
    d2 = filled(b***REMOVED***
    if d1.dtype.char == "O" or d2.dtype.char == "O":
        return np.equal(d1, d2***REMOVED***.ravel(***REMOVED***
    x = filled(masked_array(d1, copy=False, mask=m***REMOVED***, fill_value***REMOVED***.astype(float_***REMOVED***
    y = filled(masked_array(d2, copy=False, mask=m***REMOVED***, 1***REMOVED***.astype(float_***REMOVED***
    d = np.around(np.abs(x - y***REMOVED***, decimal***REMOVED*** <= 10.0 ** (-decimal***REMOVED***
    return d.ravel(***REMOVED***


def _assert_equal_on_sequences(actual, desired, err_msg=''***REMOVED***:
    ***REMOVED***
    Asserts the equality of two non-array sequences.

    ***REMOVED***
    assert_equal(len(actual***REMOVED***, len(desired***REMOVED***, err_msg***REMOVED***
    for k in range(len(desired***REMOVED******REMOVED***:
        assert_equal(actual[k***REMOVED***, desired[k***REMOVED***, 'item=%r\n%s' % (k, err_msg***REMOVED******REMOVED***
    return


def assert_equal_records(a, b***REMOVED***:
    ***REMOVED***
    Asserts that two records are equal.

    Pretty crude for now.

    ***REMOVED***
    assert_equal(a.dtype, b.dtype***REMOVED***
    for f in a.dtype.names:
        (af, bf***REMOVED*** = (operator.getitem(a, f***REMOVED***, operator.getitem(b, f***REMOVED******REMOVED***
        if not (af is masked***REMOVED*** and not (bf is masked***REMOVED***:
            assert_equal(operator.getitem(a, f***REMOVED***, operator.getitem(b, f***REMOVED******REMOVED***
    return


def assert_equal(actual, desired, err_msg=''***REMOVED***:
    ***REMOVED***
    Asserts that two items are equal.

    ***REMOVED***
    # Case #1: dictionary .....
    if isinstance(desired, dict***REMOVED***:
        if not isinstance(actual, dict***REMOVED***:
            raise AssertionError(repr(type(actual***REMOVED******REMOVED******REMOVED***
        assert_equal(len(actual***REMOVED***, len(desired***REMOVED***, err_msg***REMOVED***
        for k, i in desired.items(***REMOVED***:
            if k not in actual:
                raise AssertionError("%s not in %s" % (k, actual***REMOVED******REMOVED***
            assert_equal(actual[k***REMOVED***, desired[k***REMOVED***, 'key=%r\n%s' % (k, err_msg***REMOVED******REMOVED***
        return
    # Case #2: lists .....
    if isinstance(desired, (list, tuple***REMOVED******REMOVED*** and isinstance(actual, (list, tuple***REMOVED******REMOVED***:
        return _assert_equal_on_sequences(actual, desired, err_msg=''***REMOVED***
    if not (isinstance(actual, ndarray***REMOVED*** or isinstance(desired, ndarray***REMOVED******REMOVED***:
        msg = build_err_msg([actual, desired***REMOVED***, err_msg,***REMOVED***
        if not desired == actual:
            raise AssertionError(msg***REMOVED***
        return
    # Case #4. arrays or equivalent
    if ((actual is masked***REMOVED*** and not (desired is masked***REMOVED******REMOVED*** or \
            ((desired is masked***REMOVED*** and not (actual is masked***REMOVED******REMOVED***:
        msg = build_err_msg([actual, desired***REMOVED***,
                            err_msg, header='', names=('x', 'y'***REMOVED******REMOVED***
        raise ValueError(msg***REMOVED***
    actual = np.array(actual, copy=False, subok=True***REMOVED***
    desired = np.array(desired, copy=False, subok=True***REMOVED***
    (actual_dtype, desired_dtype***REMOVED*** = (actual.dtype, desired.dtype***REMOVED***
    if actual_dtype.char == "S" and desired_dtype.char == "S":
        return _assert_equal_on_sequences(actual.tolist(***REMOVED***,
                                          desired.tolist(***REMOVED***,
                                          err_msg=''***REMOVED***
    return assert_array_equal(actual, desired, err_msg***REMOVED***


def fail_if_equal(actual, desired, err_msg='',***REMOVED***:
    ***REMOVED***
    Raises an assertion error if two items are equal.

    ***REMOVED***
    if isinstance(desired, dict***REMOVED***:
        if not isinstance(actual, dict***REMOVED***:
            raise AssertionError(repr(type(actual***REMOVED******REMOVED******REMOVED***
        fail_if_equal(len(actual***REMOVED***, len(desired***REMOVED***, err_msg***REMOVED***
        for k, i in desired.items(***REMOVED***:
            if k not in actual:
                raise AssertionError(repr(k***REMOVED******REMOVED***
            fail_if_equal(actual[k***REMOVED***, desired[k***REMOVED***, 'key=%r\n%s' % (k, err_msg***REMOVED******REMOVED***
        return
    if isinstance(desired, (list, tuple***REMOVED******REMOVED*** and isinstance(actual, (list, tuple***REMOVED******REMOVED***:
        fail_if_equal(len(actual***REMOVED***, len(desired***REMOVED***, err_msg***REMOVED***
        for k in range(len(desired***REMOVED******REMOVED***:
            fail_if_equal(actual[k***REMOVED***, desired[k***REMOVED***, 'item=%r\n%s' % (k, err_msg***REMOVED******REMOVED***
        return
    if isinstance(actual, np.ndarray***REMOVED*** or isinstance(desired, np.ndarray***REMOVED***:
        return fail_if_array_equal(actual, desired, err_msg***REMOVED***
    msg = build_err_msg([actual, desired***REMOVED***, err_msg***REMOVED***
    if not desired != actual:
        raise AssertionError(msg***REMOVED***


assert_not_equal = fail_if_equal


def assert_almost_equal(actual, desired, decimal=7, err_msg='', verbose=True***REMOVED***:
    ***REMOVED***
    Asserts that two items are almost equal.

    The test is equivalent to abs(desired-actual***REMOVED*** < 0.5 * 10**(-decimal***REMOVED***.

    ***REMOVED***
    if isinstance(actual, np.ndarray***REMOVED*** or isinstance(desired, np.ndarray***REMOVED***:
        return assert_array_almost_equal(actual, desired, decimal=decimal,
                                         err_msg=err_msg, verbose=verbose***REMOVED***
    msg = build_err_msg([actual, desired***REMOVED***,
                        err_msg=err_msg, verbose=verbose***REMOVED***
    if not round(abs(desired - actual***REMOVED***, decimal***REMOVED*** == 0:
        raise AssertionError(msg***REMOVED***


assert_close = assert_almost_equal


def assert_array_compare(comparison, x, y, err_msg='', verbose=True, header='',
                         fill_value=True***REMOVED***:
    ***REMOVED***
    Asserts that comparison between two masked arrays is satisfied.

    The comparison is elementwise.

    ***REMOVED***
    # Allocate a common mask and refill
    m = mask_or(getmask(x***REMOVED***, getmask(y***REMOVED******REMOVED***
    x = masked_array(x, copy=False, mask=m, keep_mask=False, subok=False***REMOVED***
    y = masked_array(y, copy=False, mask=m, keep_mask=False, subok=False***REMOVED***
    if ((x is masked***REMOVED*** and not (y is masked***REMOVED******REMOVED*** or \
            ((y is masked***REMOVED*** and not (x is masked***REMOVED******REMOVED***:
        msg = build_err_msg([x, y***REMOVED***, err_msg=err_msg, verbose=verbose,
                            header=header, names=('x', 'y'***REMOVED******REMOVED***
        raise ValueError(msg***REMOVED***
    # OK, now run the basic tests on filled versions
    return utils.assert_array_compare(comparison,
                                      x.filled(fill_value***REMOVED***,
                                      y.filled(fill_value***REMOVED***,
                                      err_msg=err_msg,
                                      verbose=verbose, header=header***REMOVED***


def assert_array_equal(x, y, err_msg='', verbose=True***REMOVED***:
    ***REMOVED***
    Checks the elementwise equality of two masked arrays.

    ***REMOVED***
    assert_array_compare(operator.__eq__, x, y,
                         err_msg=err_msg, verbose=verbose,
                         header='Arrays are not equal'***REMOVED***


def fail_if_array_equal(x, y, err_msg='', verbose=True***REMOVED***:
    ***REMOVED***
    Raises an assertion error if two masked arrays are not equal elementwise.

    ***REMOVED***
    def compare(x, y***REMOVED***:
        return (not np.alltrue(approx(x, y***REMOVED******REMOVED******REMOVED***
    assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,
                         header='Arrays are not equal'***REMOVED***


def assert_array_approx_equal(x, y, decimal=6, err_msg='', verbose=True***REMOVED***:
    ***REMOVED***
    Checks the equality of two masked arrays, up to given number odecimals.

    The equality is checked elementwise.

    ***REMOVED***
    def compare(x, y***REMOVED***:
        "Returns the result of the loose comparison between x and y***REMOVED***."
        return approx(x, y, rtol=10. ** -decimal***REMOVED***
    assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,
                         header='Arrays are not almost equal'***REMOVED***


def assert_array_almost_equal(x, y, decimal=6, err_msg='', verbose=True***REMOVED***:
    ***REMOVED***
    Checks the equality of two masked arrays, up to given number odecimals.

    The equality is checked elementwise.

    ***REMOVED***
    def compare(x, y***REMOVED***:
        "Returns the result of the loose comparison between x and y***REMOVED***."
        return almost(x, y, decimal***REMOVED***
    assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,
                         header='Arrays are not almost equal'***REMOVED***


def assert_array_less(x, y, err_msg='', verbose=True***REMOVED***:
    ***REMOVED***
    Checks that x is smaller than y elementwise.

    ***REMOVED***
    assert_array_compare(operator.__lt__, x, y,
                         err_msg=err_msg, verbose=verbose,
                         header='Arrays are not less-ordered'***REMOVED***


def assert_mask_equal(m1, m2, err_msg=''***REMOVED***:
    ***REMOVED***
    Asserts the equality of two masks.

    ***REMOVED***
    if m1 is nomask:
        assert_(m2 is nomask***REMOVED***
    if m2 is nomask:
        assert_(m1 is nomask***REMOVED***
    assert_array_equal(m1, m2, err_msg=err_msg***REMOVED***
