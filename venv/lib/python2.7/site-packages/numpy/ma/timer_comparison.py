from __future__ import division, absolute_import, print_function

import timeit
from functools import reduce

import numpy as np
from numpy import float_
import numpy.core.fromnumeric as fromnumeric

from numpy.testing.utils import build_err_msg

# Fixme: this does not look right.
np.seterr(all='ignore'***REMOVED***

pi = np.pi


class ModuleTester(object***REMOVED***:
    def __init__(self, module***REMOVED***:
        self.module = module
        self.allequal = module.allequal
        self.arange = module.arange
        self.array = module.array
        self.concatenate = module.concatenate
        self.count = module.count
        self.equal = module.equal
        self.filled = module.filled
        self.getmask = module.getmask
        self.getmaskarray = module.getmaskarray
        self.id = id
        self.inner = module.inner
        self.make_mask = module.make_mask
        self.masked = module.masked
        self.masked_array = module.masked_array
        self.masked_values = module.masked_values
        self.mask_or = module.mask_or
        self.nomask = module.nomask
        self.ones = module.ones
        self.outer = module.outer
        self.repeat = module.repeat
        self.resize = module.resize
        self.sort = module.sort
        self.take = module.take
        self.transpose = module.transpose
        self.zeros = module.zeros
        self.MaskType = module.MaskType
        ***REMOVED***
            self.umath = module.umath
        except AttributeError:
            self.umath = module.core.umath
        self.testnames = [***REMOVED***

    def assert_array_compare(self, comparison, x, y, err_msg='', header='',
                         fill_value=True***REMOVED***:
        ***REMOVED***
        Assert that a comparison of two masked arrays is satisfied elementwise.

        ***REMOVED***
        xf = self.filled(x***REMOVED***
        yf = self.filled(y***REMOVED***
        m = self.mask_or(self.getmask(x***REMOVED***, self.getmask(y***REMOVED******REMOVED***

        x = self.filled(self.masked_array(xf, mask=m***REMOVED***, fill_value***REMOVED***
        y = self.filled(self.masked_array(yf, mask=m***REMOVED***, fill_value***REMOVED***
        if (x.dtype.char != "O"***REMOVED***:
            x = x.astype(float_***REMOVED***
            if isinstance(x, np.ndarray***REMOVED*** and x.size > 1:
                x[np.isnan(x***REMOVED******REMOVED*** = 0
            elif np.isnan(x***REMOVED***:
                x = 0
        if (y.dtype.char != "O"***REMOVED***:
            y = y.astype(float_***REMOVED***
            if isinstance(y, np.ndarray***REMOVED*** and y.size > 1:
                y[np.isnan(y***REMOVED******REMOVED*** = 0
            elif np.isnan(y***REMOVED***:
                y = 0
        ***REMOVED***
            cond = (x.shape == (***REMOVED*** or y.shape == (***REMOVED******REMOVED*** or x.shape == y.shape
            if not cond:
                msg = build_err_msg([x, y***REMOVED***,
                                    err_msg
                                    + '\n(shapes %s, %s mismatch***REMOVED***' % (x.shape,
                                                                      y.shape***REMOVED***,
                                    header=header,
                                    names=('x', 'y'***REMOVED******REMOVED***
                assert cond, msg
            val = comparison(x, y***REMOVED***
            if m is not self.nomask and fill_value:
                val = self.masked_array(val, mask=m***REMOVED***
            if isinstance(val, bool***REMOVED***:
                cond = val
                reduced = [0***REMOVED***
            else:
                reduced = val.ravel(***REMOVED***
                cond = reduced.all(***REMOVED***
                reduced = reduced.tolist(***REMOVED***
            if not cond:
                match = 100-100.0*reduced.count(1***REMOVED***/len(reduced***REMOVED***
                msg = build_err_msg([x, y***REMOVED***,
                                    err_msg
                                    + '\n(mismatch %s%%***REMOVED***' % (match,***REMOVED***,
                                    header=header,
                                    names=('x', 'y'***REMOVED******REMOVED***
                assert cond, msg
        except ValueError:
            msg = build_err_msg([x, y***REMOVED***, err_msg, header=header, names=('x', 'y'***REMOVED******REMOVED***
            raise ValueError(msg***REMOVED***

    def assert_array_equal(self, x, y, err_msg=''***REMOVED***:
        ***REMOVED***
        Checks the elementwise equality of two masked arrays.

        ***REMOVED***
        self.assert_array_compare(self.equal, x, y, err_msg=err_msg,
                                  header='Arrays are not equal'***REMOVED***

    def test_0(self***REMOVED***:
        ***REMOVED***
        Tests creation

        ***REMOVED***
        x = np.array([1., 1., 1., -2., pi/2.0, 4., 5., -10., 10., 1., 2., 3.***REMOVED******REMOVED***
        m = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0***REMOVED***
        xm = self.masked_array(x, mask=m***REMOVED***
        xm[0***REMOVED***

    def test_1(self***REMOVED***:
        ***REMOVED***
        Tests creation

        ***REMOVED***
        x = np.array([1., 1., 1., -2., pi/2.0, 4., 5., -10., 10., 1., 2., 3.***REMOVED******REMOVED***
        y = np.array([5., 0., 3., 2., -1., -4., 0., -10., 10., 1., 0., 3.***REMOVED******REMOVED***
        m1 = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0***REMOVED***
        m2 = [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1***REMOVED***
        xm = self.masked_array(x, mask=m1***REMOVED***
        ym = self.masked_array(y, mask=m2***REMOVED***
        xf = np.where(m1, 1.e+20, x***REMOVED***
        xm.set_fill_value(1.e+20***REMOVED***

        assert((xm-ym***REMOVED***.filled(0***REMOVED***.any(***REMOVED******REMOVED***
        s = x.shape
        assert(xm.size == reduce(lambda x, y:x*y, s***REMOVED******REMOVED***
        assert(self.count(xm***REMOVED*** == len(m1***REMOVED*** - reduce(lambda x, y:x+y, m1***REMOVED******REMOVED***

        for s in [(4, 3***REMOVED***, (6, 2***REMOVED******REMOVED***:
            x.shape = s
            y.shape = s
            xm.shape = s
            ym.shape = s
            xf.shape = s
            assert(self.count(xm***REMOVED*** == len(m1***REMOVED*** - reduce(lambda x, y:x+y, m1***REMOVED******REMOVED***

    def test_2(self***REMOVED***:
        ***REMOVED***
        Tests conversions and indexing.

        ***REMOVED***
        x1 = np.array([1, 2, 4, 3***REMOVED******REMOVED***
        x2 = self.array(x1, mask=[1, 0, 0, 0***REMOVED******REMOVED***
        x3 = self.array(x1, mask=[0, 1, 0, 1***REMOVED******REMOVED***
        x4 = self.array(x1***REMOVED***
        # test conversion to strings, no errors
        str(x2***REMOVED***
        repr(x2***REMOVED***
        # tests of indexing
        assert type(x2[1***REMOVED******REMOVED*** is type(x1[1***REMOVED******REMOVED***
        assert x1[1***REMOVED*** == x2[1***REMOVED***
        x1[2***REMOVED*** = 9
        x2[2***REMOVED*** = 9
        self.assert_array_equal(x1, x2***REMOVED***
        x1[1:3***REMOVED*** = 99
        x2[1:3***REMOVED*** = 99
        x2[1***REMOVED*** = self.masked
        x2[1:3***REMOVED*** = self.masked
        x2[:***REMOVED*** = x1
        x2[1***REMOVED*** = self.masked
        x3[:***REMOVED*** = self.masked_array([1, 2, 3, 4***REMOVED***, [0, 1, 1, 0***REMOVED******REMOVED***
        x4[:***REMOVED*** = self.masked_array([1, 2, 3, 4***REMOVED***, [0, 1, 1, 0***REMOVED******REMOVED***
        x1 = np.arange(5***REMOVED****1.0
        x2 = self.masked_values(x1, 3.0***REMOVED***
        x1 = self.array([1, 'hello', 2, 3***REMOVED***, object***REMOVED***
        x2 = np.array([1, 'hello', 2, 3***REMOVED***, object***REMOVED***
        # check that no error occurs.
        x1[1***REMOVED***
        x2[1***REMOVED***
        assert x1[1:1***REMOVED***.shape == (0,***REMOVED***
        # Tests copy-size
        n = [0, 0, 1, 0, 0***REMOVED***
        m = self.make_mask(n***REMOVED***
        m2 = self.make_mask(m***REMOVED***
        assert(m is m2***REMOVED***
        m3 = self.make_mask(m, copy=1***REMOVED***
        assert(m is not m3***REMOVED***

    def test_3(self***REMOVED***:
        ***REMOVED***
        Tests resize/repeat

        ***REMOVED***
        x4 = self.arange(4***REMOVED***
        x4[2***REMOVED*** = self.masked
        y4 = self.resize(x4, (8,***REMOVED******REMOVED***
        assert self.allequal(self.concatenate([x4, x4***REMOVED******REMOVED***, y4***REMOVED***
        assert self.allequal(self.getmask(y4***REMOVED***, [0, 0, 1, 0, 0, 0, 1, 0***REMOVED******REMOVED***
        y5 = self.repeat(x4, (2, 2, 2, 2***REMOVED***, axis=0***REMOVED***
        self.assert_array_equal(y5, [0, 0, 1, 1, 2, 2, 3, 3***REMOVED******REMOVED***
        y6 = self.repeat(x4, 2, axis=0***REMOVED***
        assert self.allequal(y5, y6***REMOVED***
        y7 = x4.repeat((2, 2, 2, 2***REMOVED***, axis=0***REMOVED***
        assert self.allequal(y5, y7***REMOVED***
        y8 = x4.repeat(2, 0***REMOVED***
        assert self.allequal(y5, y8***REMOVED***

    def test_4(self***REMOVED***:
        ***REMOVED***
        Test of take, transpose, inner, outer products.

        ***REMOVED***
        x = self.arange(24***REMOVED***
        y = np.arange(24***REMOVED***
        x[5:6***REMOVED*** = self.masked
        x = x.reshape(2, 3, 4***REMOVED***
        y = y.reshape(2, 3, 4***REMOVED***
        assert self.allequal(np.transpose(y, (2, 0, 1***REMOVED******REMOVED***, self.transpose(x, (2, 0, 1***REMOVED******REMOVED******REMOVED***
        assert self.allequal(np.take(y, (2, 0, 1***REMOVED***, 1***REMOVED***, self.take(x, (2, 0, 1***REMOVED***, 1***REMOVED******REMOVED***
        assert self.allequal(np.inner(self.filled(x, 0***REMOVED***, self.filled(y, 0***REMOVED******REMOVED***,
                            self.inner(x, y***REMOVED******REMOVED***
        assert self.allequal(np.outer(self.filled(x, 0***REMOVED***, self.filled(y, 0***REMOVED******REMOVED***,
                            self.outer(x, y***REMOVED******REMOVED***
        y = self.array(['abc', 1, 'def', 2, 3***REMOVED***, object***REMOVED***
        y[2***REMOVED*** = self.masked
        t = self.take(y, [0, 3, 4***REMOVED******REMOVED***
        assert t[0***REMOVED*** == 'abc'
        assert t[1***REMOVED*** == 2
        assert t[2***REMOVED*** == 3

    def test_5(self***REMOVED***:
        ***REMOVED***
        Tests inplace w/ scalar

        ***REMOVED***
        x = self.arange(10***REMOVED***
        y = self.arange(10***REMOVED***
        xm = self.arange(10***REMOVED***
        xm[2***REMOVED*** = self.masked
        x += 1
        assert self.allequal(x, y+1***REMOVED***
        xm += 1
        assert self.allequal(xm, y+1***REMOVED***

        x = self.arange(10***REMOVED***
        xm = self.arange(10***REMOVED***
        xm[2***REMOVED*** = self.masked
        x -= 1
        assert self.allequal(x, y-1***REMOVED***
        xm -= 1
        assert self.allequal(xm, y-1***REMOVED***

        x = self.arange(10***REMOVED****1.0
        xm = self.arange(10***REMOVED****1.0
        xm[2***REMOVED*** = self.masked
        x *= 2.0
        assert self.allequal(x, y*2***REMOVED***
        xm *= 2.0
        assert self.allequal(xm, y*2***REMOVED***

        x = self.arange(10***REMOVED****2
        xm = self.arange(10***REMOVED****2
        xm[2***REMOVED*** = self.masked
        x /= 2
        assert self.allequal(x, y***REMOVED***
        xm /= 2
        assert self.allequal(xm, y***REMOVED***

        x = self.arange(10***REMOVED****1.0
        xm = self.arange(10***REMOVED****1.0
        xm[2***REMOVED*** = self.masked
        x /= 2.0
        assert self.allequal(x, y/2.0***REMOVED***
        xm /= self.arange(10***REMOVED***
        self.assert_array_equal(xm, self.ones((10,***REMOVED******REMOVED******REMOVED***

        x = self.arange(10***REMOVED***.astype(float_***REMOVED***
        xm = self.arange(10***REMOVED***
        xm[2***REMOVED*** = self.masked
        x += 1.
        assert self.allequal(x, y + 1.***REMOVED***

    def test_6(self***REMOVED***:
        ***REMOVED***
        Tests inplace w/ array

        ***REMOVED***
        x = self.arange(10, dtype=float_***REMOVED***
        y = self.arange(10***REMOVED***
        xm = self.arange(10, dtype=float_***REMOVED***
        xm[2***REMOVED*** = self.masked
        m = xm.mask
        a = self.arange(10, dtype=float_***REMOVED***
        a[-1***REMOVED*** = self.masked
        x += a
        xm += a
        assert self.allequal(x, y+a***REMOVED***
        assert self.allequal(xm, y+a***REMOVED***
        assert self.allequal(xm.mask, self.mask_or(m, a.mask***REMOVED******REMOVED***

        x = self.arange(10, dtype=float_***REMOVED***
        xm = self.arange(10, dtype=float_***REMOVED***
        xm[2***REMOVED*** = self.masked
        m = xm.mask
        a = self.arange(10, dtype=float_***REMOVED***
        a[-1***REMOVED*** = self.masked
        x -= a
        xm -= a
        assert self.allequal(x, y-a***REMOVED***
        assert self.allequal(xm, y-a***REMOVED***
        assert self.allequal(xm.mask, self.mask_or(m, a.mask***REMOVED******REMOVED***

        x = self.arange(10, dtype=float_***REMOVED***
        xm = self.arange(10, dtype=float_***REMOVED***
        xm[2***REMOVED*** = self.masked
        m = xm.mask
        a = self.arange(10, dtype=float_***REMOVED***
        a[-1***REMOVED*** = self.masked
        x *= a
        xm *= a
        assert self.allequal(x, y*a***REMOVED***
        assert self.allequal(xm, y*a***REMOVED***
        assert self.allequal(xm.mask, self.mask_or(m, a.mask***REMOVED******REMOVED***

        x = self.arange(10, dtype=float_***REMOVED***
        xm = self.arange(10, dtype=float_***REMOVED***
        xm[2***REMOVED*** = self.masked
        m = xm.mask
        a = self.arange(10, dtype=float_***REMOVED***
        a[-1***REMOVED*** = self.masked
        x /= a
        xm /= a

    def test_7(self***REMOVED***:
        "Tests ufunc"
        d = (self.array([1.0, 0, -1, pi/2***REMOVED****2, mask=[0, 1***REMOVED***+[0***REMOVED****6***REMOVED***,
             self.array([1.0, 0, -1, pi/2***REMOVED****2, mask=[1, 0***REMOVED***+[0***REMOVED****6***REMOVED***,***REMOVED***
        for f in ['sqrt', 'log', 'log10', 'exp', 'conjugate',
#                  'sin', 'cos', 'tan',
#                  'arcsin', 'arccos', 'arctan',
#                  'sinh', 'cosh', 'tanh',
#                  'arcsinh',
#                  'arccosh',
#                  'arctanh',
#                  'absolute', 'fabs', 'negative',
#                  # 'nonzero', 'around',
#                  'floor', 'ceil',
#                  # 'sometrue', 'alltrue',
#                  'logical_not',
#                  'add', 'subtract', 'multiply',
#                  'divide', 'true_divide', 'floor_divide',
#                  'remainder', 'fmod', 'hypot', 'arctan2',
#                  'equal', 'not_equal', 'less_equal', 'greater_equal',
#                  'less', 'greater',
#                  'logical_and', 'logical_or', 'logical_xor',
                  ***REMOVED***:
            ***REMOVED***
                uf = getattr(self.umath, f***REMOVED***
            except AttributeError:
                uf = getattr(fromnumeric, f***REMOVED***
            mf = getattr(self.module, f***REMOVED***
            args = d[:uf.nin***REMOVED***
            ur = uf(*args***REMOVED***
            mr = mf(*args***REMOVED***
            self.assert_array_equal(ur.filled(0***REMOVED***, mr.filled(0***REMOVED***, f***REMOVED***
            self.assert_array_equal(ur._mask, mr._mask***REMOVED***

    def test_99(self***REMOVED***:
        # test average
        ott = self.array([0., 1., 2., 3.***REMOVED***, mask=[1, 0, 0, 0***REMOVED******REMOVED***
        self.assert_array_equal(2.0, self.average(ott, axis=0***REMOVED******REMOVED***
        self.assert_array_equal(2.0, self.average(ott, weights=[1., 1., 2., 1.***REMOVED******REMOVED******REMOVED***
        result, wts = self.average(ott, weights=[1., 1., 2., 1.***REMOVED***, returned=1***REMOVED***
        self.assert_array_equal(2.0, result***REMOVED***
        assert(wts == 4.0***REMOVED***
        ott[:***REMOVED*** = self.masked
        assert(self.average(ott, axis=0***REMOVED*** is self.masked***REMOVED***
        ott = self.array([0., 1., 2., 3.***REMOVED***, mask=[1, 0, 0, 0***REMOVED******REMOVED***
        ott = ott.reshape(2, 2***REMOVED***
        ott[:, 1***REMOVED*** = self.masked
        self.assert_array_equal(self.average(ott, axis=0***REMOVED***, [2.0, 0.0***REMOVED******REMOVED***
        assert(self.average(ott, axis=1***REMOVED***[0***REMOVED*** is self.masked***REMOVED***
        self.assert_array_equal([2., 0.***REMOVED***, self.average(ott, axis=0***REMOVED******REMOVED***
        result, wts = self.average(ott, axis=0, returned=1***REMOVED***
        self.assert_array_equal(wts, [1., 0.***REMOVED******REMOVED***
        w1 = [0, 1, 1, 1, 1, 0***REMOVED***
        w2 = [[0, 1, 1, 1, 1, 0***REMOVED***, [1, 0, 0, 0, 0, 1***REMOVED******REMOVED***
        x = self.arange(6***REMOVED***
        self.assert_array_equal(self.average(x, axis=0***REMOVED***, 2.5***REMOVED***
        self.assert_array_equal(self.average(x, axis=0, weights=w1***REMOVED***, 2.5***REMOVED***
        y = self.array([self.arange(6***REMOVED***, 2.0*self.arange(6***REMOVED******REMOVED******REMOVED***
        self.assert_array_equal(self.average(y, None***REMOVED***, np.add.reduce(np.arange(6***REMOVED******REMOVED****3./12.***REMOVED***
        self.assert_array_equal(self.average(y, axis=0***REMOVED***, np.arange(6***REMOVED*** * 3./2.***REMOVED***
        self.assert_array_equal(self.average(y, axis=1***REMOVED***, [self.average(x, axis=0***REMOVED***, self.average(x, axis=0***REMOVED*** * 2.0***REMOVED******REMOVED***
        self.assert_array_equal(self.average(y, None, weights=w2***REMOVED***, 20./6.***REMOVED***
        self.assert_array_equal(self.average(y, axis=0, weights=w2***REMOVED***, [0., 1., 2., 3., 4., 10.***REMOVED******REMOVED***
        self.assert_array_equal(self.average(y, axis=1***REMOVED***, [self.average(x, axis=0***REMOVED***, self.average(x, axis=0***REMOVED*** * 2.0***REMOVED******REMOVED***
        m1 = self.zeros(6***REMOVED***
        m2 = [0, 0, 1, 1, 0, 0***REMOVED***
        m3 = [[0, 0, 1, 1, 0, 0***REMOVED***, [0, 1, 1, 1, 1, 0***REMOVED******REMOVED***
        m4 = self.ones(6***REMOVED***
        m5 = [0, 1, 1, 1, 1, 1***REMOVED***
        self.assert_array_equal(self.average(self.masked_array(x, m1***REMOVED***, axis=0***REMOVED***, 2.5***REMOVED***
        self.assert_array_equal(self.average(self.masked_array(x, m2***REMOVED***, axis=0***REMOVED***, 2.5***REMOVED***
        self.assert_array_equal(self.average(self.masked_array(x, m5***REMOVED***, axis=0***REMOVED***, 0.0***REMOVED***
        self.assert_array_equal(self.count(self.average(self.masked_array(x, m4***REMOVED***, axis=0***REMOVED******REMOVED***, 0***REMOVED***
        z = self.masked_array(y, m3***REMOVED***
        self.assert_array_equal(self.average(z, None***REMOVED***, 20./6.***REMOVED***
        self.assert_array_equal(self.average(z, axis=0***REMOVED***, [0., 1., 99., 99., 4.0, 7.5***REMOVED******REMOVED***
        self.assert_array_equal(self.average(z, axis=1***REMOVED***, [2.5, 5.0***REMOVED******REMOVED***
        self.assert_array_equal(self.average(z, axis=0, weights=w2***REMOVED***, [0., 1., 99., 99., 4.0, 10.0***REMOVED******REMOVED***

    def test_A(self***REMOVED***:
        x = self.arange(24***REMOVED***
        x[5:6***REMOVED*** = self.masked
        x = x.reshape(2, 3, 4***REMOVED***


if __name__ == '__main__':
    setup_base = ("from __main__ import ModuleTester \n"
                  "import numpy\n"
                  "tester = ModuleTester(module***REMOVED***\n"***REMOVED***
    setup_cur = "import numpy.ma.core as module\n" + setup_base
    (nrepeat, nloop***REMOVED*** = (10, 10***REMOVED***

    if 1:
        for i in range(1, 8***REMOVED***:
            func = 'tester.test_%i(***REMOVED***' % i
            cur = timeit.Timer(func, setup_cur***REMOVED***.repeat(nrepeat, nloop*10***REMOVED***
            cur = np.sort(cur***REMOVED***
            print("#%i" % i + 50*'.'***REMOVED***
            print(eval("ModuleTester.test_%i.__doc__" % i***REMOVED******REMOVED***
            print("core_current : %.3f - %.3f" % (cur[0***REMOVED***, cur[1***REMOVED******REMOVED******REMOVED***
