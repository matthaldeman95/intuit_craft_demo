#! /usr/bin/env python
from __future__ import division, print_function

import timeit
import numpy


###############################################################################
#                               Global variables                              #
###############################################################################


# Small arrays
xs = numpy.random.uniform(-1, 1, 6***REMOVED***.reshape(2, 3***REMOVED***
ys = numpy.random.uniform(-1, 1, 6***REMOVED***.reshape(2, 3***REMOVED***
zs = xs + 1j * ys
m1 = [[True, False, False***REMOVED***, [False, False, True***REMOVED******REMOVED***
m2 = [[True, False, True***REMOVED***, [False, False, True***REMOVED******REMOVED***
nmxs = numpy.ma.array(xs, mask=m1***REMOVED***
nmys = numpy.ma.array(ys, mask=m2***REMOVED***
nmzs = numpy.ma.array(zs, mask=m1***REMOVED***

# Big arrays
xl = numpy.random.uniform(-1, 1, 100*100***REMOVED***.reshape(100, 100***REMOVED***
yl = numpy.random.uniform(-1, 1, 100*100***REMOVED***.reshape(100, 100***REMOVED***
zl = xl + 1j * yl
maskx = xl > 0.8
masky = yl < -0.8
nmxl = numpy.ma.array(xl, mask=maskx***REMOVED***
nmyl = numpy.ma.array(yl, mask=masky***REMOVED***
nmzl = numpy.ma.array(zl, mask=maskx***REMOVED***


###############################################################################
#                                 Functions                                   #
###############################################################################


def timer(s, v='', nloop=500, nrep=3***REMOVED***:
    units = ["s", "ms", "Âµs", "ns"***REMOVED***
    scaling = [1, 1e3, 1e6, 1e9***REMOVED***
    print("%s : %-50s : " % (v, s***REMOVED***, end=' '***REMOVED***
    varnames = ["%ss,nm%ss,%sl,nm%sl" % tuple(x*4***REMOVED*** for x in 'xyz'***REMOVED***
    setup = 'from __main__ import numpy, ma, %s' % ','.join(varnames***REMOVED***
    Timer = timeit.Timer(stmt=s, setup=setup***REMOVED***
    best = min(Timer.repeat(nrep, nloop***REMOVED******REMOVED*** / nloop
    if best > 0.0:
        order = min(-int(numpy.floor(numpy.log10(best***REMOVED******REMOVED*** // 3***REMOVED***, 3***REMOVED***
    else:
        order = 3
    print("%d loops, best of %d: %.*g %s per loop" % (nloop, nrep,
                                                      3,
                                                      best * scaling[order***REMOVED***,
                                                      units[order***REMOVED******REMOVED******REMOVED***


def compare_functions_1v(func, nloop=500,
                       xs=xs, nmxs=nmxs, xl=xl, nmxl=nmxl***REMOVED***:
    funcname = func.__name__
    print("-"*50***REMOVED***
    print("%s on small arrays" % funcname***REMOVED***
    module, data = "numpy.ma", "nmxs"
    timer("%(module***REMOVED***s.%(funcname***REMOVED***s(%(data***REMOVED***s***REMOVED***" % locals(***REMOVED***, v="%11s" % module, nloop=nloop***REMOVED***

    print("%s on large arrays" % funcname***REMOVED***
    module, data = "numpy.ma", "nmxl"
    timer("%(module***REMOVED***s.%(funcname***REMOVED***s(%(data***REMOVED***s***REMOVED***" % locals(***REMOVED***, v="%11s" % module, nloop=nloop***REMOVED***
    return

def compare_methods(methodname, args, vars='x', nloop=500, test=True,
                    xs=xs, nmxs=nmxs, xl=xl, nmxl=nmxl***REMOVED***:
    print("-"*50***REMOVED***
    print("%s on small arrays" % methodname***REMOVED***
    data, ver = "nm%ss" % vars, 'numpy.ma'
    timer("%(data***REMOVED***s.%(methodname***REMOVED***s(%(args***REMOVED***s***REMOVED***" % locals(***REMOVED***, v=ver, nloop=nloop***REMOVED***

    print("%s on large arrays" % methodname***REMOVED***
    data, ver = "nm%sl" % vars, 'numpy.ma'
    timer("%(data***REMOVED***s.%(methodname***REMOVED***s(%(args***REMOVED***s***REMOVED***" % locals(***REMOVED***, v=ver, nloop=nloop***REMOVED***
    return

def compare_functions_2v(func, nloop=500, test=True,
                       xs=xs, nmxs=nmxs,
                       ys=ys, nmys=nmys,
                       xl=xl, nmxl=nmxl,
                       yl=yl, nmyl=nmyl***REMOVED***:
    funcname = func.__name__
    print("-"*50***REMOVED***
    print("%s on small arrays" % funcname***REMOVED***
    module, data = "numpy.ma", "nmxs,nmys"
    timer("%(module***REMOVED***s.%(funcname***REMOVED***s(%(data***REMOVED***s***REMOVED***" % locals(***REMOVED***, v="%11s" % module, nloop=nloop***REMOVED***

    print("%s on large arrays" % funcname***REMOVED***
    module, data = "numpy.ma", "nmxl,nmyl"
    timer("%(module***REMOVED***s.%(funcname***REMOVED***s(%(data***REMOVED***s***REMOVED***" % locals(***REMOVED***, v="%11s" % module, nloop=nloop***REMOVED***
    return


if __name__ == '__main__':
    compare_functions_1v(numpy.sin***REMOVED***
    compare_functions_1v(numpy.log***REMOVED***
    compare_functions_1v(numpy.sqrt***REMOVED***

    compare_functions_2v(numpy.multiply***REMOVED***
    compare_functions_2v(numpy.divide***REMOVED***
    compare_functions_2v(numpy.power***REMOVED***

    compare_methods('ravel', '', nloop=1000***REMOVED***
    compare_methods('conjugate', '', 'z', nloop=1000***REMOVED***
    compare_methods('transpose', '', nloop=1000***REMOVED***
    compare_methods('compressed', '', nloop=1000***REMOVED***
    compare_methods('__getitem__', '0', nloop=1000***REMOVED***
    compare_methods('__getitem__', '(0,0***REMOVED***', nloop=1000***REMOVED***
    compare_methods('__getitem__', '[0,-1***REMOVED***', nloop=1000***REMOVED***
    compare_methods('__setitem__', '0, 17', nloop=1000, test=False***REMOVED***
    compare_methods('__setitem__', '(0,0***REMOVED***, 17', nloop=1000, test=False***REMOVED***

    print("-"*50***REMOVED***
    print("__setitem__ on small arrays"***REMOVED***
    timer('nmxs.__setitem__((-1,0***REMOVED***,numpy.ma.masked***REMOVED***', 'numpy.ma   ', nloop=10000***REMOVED***

    print("-"*50***REMOVED***
    print("__setitem__ on large arrays"***REMOVED***
    timer('nmxl.__setitem__((-1,0***REMOVED***,numpy.ma.masked***REMOVED***', 'numpy.ma   ', nloop=10000***REMOVED***

    print("-"*50***REMOVED***
    print("where on small arrays"***REMOVED***
    timer('numpy.ma.where(nmxs>2,nmxs,nmys***REMOVED***', 'numpy.ma   ', nloop=1000***REMOVED***
    print("-"*50***REMOVED***
    print("where on large arrays"***REMOVED***
    timer('numpy.ma.where(nmxl>2,nmxl,nmyl***REMOVED***', 'numpy.ma   ', nloop=100***REMOVED***
