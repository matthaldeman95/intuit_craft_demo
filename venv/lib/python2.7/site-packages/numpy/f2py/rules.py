#!/usr/bin/env python
***REMOVED***

Rules for building C/API module with f2py2e.

Here is a skeleton of a new wrapper function (13Dec2001***REMOVED***:

wrapper_function(args***REMOVED***
  declarations
  get_python_arguments, say, `a' and `b'

  get_a_from_python
  if (successful***REMOVED*** {

    get_b_from_python
    if (successful***REMOVED*** {

      callfortran
      if (succesful***REMOVED*** {

        put_a_to_python
        if (succesful***REMOVED*** {

          put_b_to_python
          if (succesful***REMOVED*** {

            buildvalue = ...

      ***REMOVED***

    ***REMOVED***

  ***REMOVED***

***REMOVED***
    cleanup_b

  ***REMOVED***
  cleanup_a

  return buildvalue

Copyright 1999,2000 Pearu Peterson all rights reserved,
Pearu Peterson <pearu@ioc.ee>
Permission to use, modify, and distribute this software is given under the
terms of the NumPy License.

NO WARRANTY IS EXPRESSED OR IMPLIED.  USE AT YOUR OWN RISK.
$Date: 2005/08/30 08:58:42 $
Pearu Peterson

***REMOVED***
from __future__ import division, absolute_import, print_function

__version__ = "$Revision: 1.129 $"[10:-1***REMOVED***

from . import __version__
f2py_version = __version__.version

***REMOVED***
import time
import copy

from .auxfuncs import (
    applyrules, debugcapi, dictappend, errmess, gentitle, getargs2,
    hascallstatement, hasexternals, hasinitvalue, hasnote, hasresultnote,
    isarray, isarrayofstrings, iscomplex, iscomplexarray,
    iscomplexfunction, iscomplexfunction_warn, isdummyroutine, isexternal,
    isfunction, isfunction_wrap, isint1array, isintent_aux, isintent_c,
    isintent_callback, isintent_copy, isintent_hide, isintent_inout,
    isintent_nothide, isintent_out, isintent_overwrite, islogical,
    islong_complex, islong_double, islong_doublefunction, islong_long,
    islong_longfunction, ismoduleroutine, isoptional, isrequired, isscalar,
    issigned_long_longarray, isstring, isstringarray, isstringfunction,
    issubroutine, issubroutine_wrap, isthreadsafe, isunsigned,
    isunsigned_char, isunsigned_chararray, isunsigned_long_long,
    isunsigned_long_longarray, isunsigned_short, isunsigned_shortarray,
    l_and, l_not, l_or, outmess, replace, stripcomma,
***REMOVED***

from . import capi_maps
from . import cfuncs
from . import common_rules
from . import use_rules
from . import f90mod_rules
from . import func2subr

options = {***REMOVED***
sepdict = {***REMOVED***
#for k in ['need_cfuncs'***REMOVED***: sepdict[k***REMOVED***=','
for k in ['decl',
          'frompyobj',
          'cleanupfrompyobj',
          'topyarr', 'method',
          'pyobjfrom', 'closepyobjfrom',
          'freemem',
          'userincludes',
          'includes0', 'includes', 'typedefs', 'typedefs_generated',
          'cppmacros', 'cfuncs', 'callbacks',
          'latexdoc',
          'restdoc',
          'routine_defs', 'externroutines',
          'initf2pywraphooks',
          'commonhooks', 'initcommonhooks',
          'f90modhooks', 'initf90modhooks'***REMOVED***:
    sepdict[k***REMOVED*** = '\n'

#################### Rules for C/API module #################

module_rules = {
    'modulebody': ***REMOVED***\
/* File: #modulename#module.c
 * This file is auto-generated with f2py (version:#f2py_version#***REMOVED***.
 * f2py is a Fortran to Python Interface Generator (FPIG***REMOVED***, Second Edition,
 * written by Pearu Peterson <pearu@cens.ioc.ee>.
 * See http://cens.ioc.ee/projects/f2py2e/
 * Generation date: ***REMOVED*** + time.asctime(time.localtime(time.time(***REMOVED******REMOVED******REMOVED*** + ***REMOVED***
 * $R***REMOVED*** + ***REMOVED***evision:$
 * $D***REMOVED*** + ***REMOVED***ate:$
 * Do not edit this file directly unless you know what you are doing!!!
 */

#ifdef __cplusplus
extern \"C\" {
#endif

***REMOVED*** + gentitle("See f2py2e/cfuncs.py: includes"***REMOVED*** + ***REMOVED***
#includes#
#includes0#

***REMOVED*** + gentitle("See f2py2e/rules.py: mod_rules['modulebody'***REMOVED***"***REMOVED*** + ***REMOVED***
static PyObject *#modulename#_error;
static PyObject *#modulename#_module;

***REMOVED*** + gentitle("See f2py2e/cfuncs.py: typedefs"***REMOVED*** + ***REMOVED***
#typedefs#

***REMOVED*** + gentitle("See f2py2e/cfuncs.py: typedefs_generated"***REMOVED*** + ***REMOVED***
#typedefs_generated#

***REMOVED*** + gentitle("See f2py2e/cfuncs.py: cppmacros"***REMOVED*** + ***REMOVED***
#cppmacros#

***REMOVED*** + gentitle("See f2py2e/cfuncs.py: cfuncs"***REMOVED*** + ***REMOVED***
#cfuncs#

***REMOVED*** + gentitle("See f2py2e/cfuncs.py: userincludes"***REMOVED*** + ***REMOVED***
#userincludes#

***REMOVED*** + gentitle("See f2py2e/capi_rules.py: usercode"***REMOVED*** + ***REMOVED***
#usercode#

/* See f2py2e/rules.py */
#externroutines#

***REMOVED*** + gentitle("See f2py2e/capi_rules.py: usercode1"***REMOVED*** + ***REMOVED***
#usercode1#

***REMOVED*** + gentitle("See f2py2e/cb_rules.py: buildcallback"***REMOVED*** + ***REMOVED***
#callbacks#

***REMOVED*** + gentitle("See f2py2e/rules.py: buildapi"***REMOVED*** + ***REMOVED***
#body#

***REMOVED*** + gentitle("See f2py2e/f90mod_rules.py: buildhooks"***REMOVED*** + ***REMOVED***
#f90modhooks#

***REMOVED*** + gentitle("See f2py2e/rules.py: module_rules['modulebody'***REMOVED***"***REMOVED*** + ***REMOVED***

***REMOVED*** + gentitle("See f2py2e/common_rules.py: buildhooks"***REMOVED*** + ***REMOVED***
#commonhooks#

***REMOVED*** + gentitle("See f2py2e/rules.py"***REMOVED*** + ***REMOVED***

static FortranDataDef f2py_routine_defs[***REMOVED*** = {
#routine_defs#
\t{NULL***REMOVED***
***REMOVED***;

static PyMethodDef f2py_module_methods[***REMOVED*** = {
#pymethoddef#
\t{NULL,NULL***REMOVED***
***REMOVED***;

#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef moduledef = {
\tPyModuleDef_HEAD_INIT,
\t"#modulename#",
\tNULL,
\t-1,
\tf2py_module_methods,
\tNULL,
\tNULL,
\tNULL,
\tNULL
***REMOVED***;
#endif

#if PY_VERSION_HEX >= 0x03000000
#define RETVAL m
PyMODINIT_FUNC PyInit_#modulename#(void***REMOVED*** {
#else
#define RETVAL
PyMODINIT_FUNC init#modulename#(void***REMOVED*** {
#endif
\tint i;
\tPyObject *m,*d, *s;
#if PY_VERSION_HEX >= 0x03000000
\tm = #modulename#_module = PyModule_Create(&moduledef***REMOVED***;
#else
\tm = #modulename#_module = Py_InitModule(\"#modulename#\", f2py_module_methods***REMOVED***;
#endif
\tPy_TYPE(&PyFortran_Type***REMOVED*** = &PyType_Type;
\timport_array(***REMOVED***;
\tif (PyErr_Occurred(***REMOVED******REMOVED***
\t\t{PyErr_SetString(PyExc_ImportError, \"can't initialize module #modulename# (failed to import numpy***REMOVED***\"***REMOVED***; return RETVAL;***REMOVED***
\td = PyModule_GetDict(m***REMOVED***;
\ts = PyString_FromString(\"$R***REMOVED*** + ***REMOVED***evision: $\"***REMOVED***;
\tPyDict_SetItemString(d, \"__version__\", s***REMOVED***;
#if PY_VERSION_HEX >= 0x03000000
\ts = PyUnicode_FromString(
#else
\ts = PyString_FromString(
#endif
\t\t\"This module '#modulename#' is auto-generated with f2py (version:#f2py_version#***REMOVED***.\\nFunctions:\\n\"\n#docs#\".\"***REMOVED***;
\tPyDict_SetItemString(d, \"__doc__\", s***REMOVED***;
\t#modulename#_error = PyErr_NewException (\"#modulename#.error\", NULL, NULL***REMOVED***;
\tPy_DECREF(s***REMOVED***;
\tfor(i=0;f2py_routine_defs[i***REMOVED***.name!=NULL;i++***REMOVED***
\t\tPyDict_SetItemString(d, f2py_routine_defs[i***REMOVED***.name,PyFortranObject_NewAsAttr(&f2py_routine_defs[i***REMOVED******REMOVED******REMOVED***;
#initf2pywraphooks#
#initf90modhooks#
#initcommonhooks#
#interface_usercode#

#ifdef F2PY_REPORT_ATEXIT
\tif (! PyErr_Occurred(***REMOVED******REMOVED***
\t\ton_exit(f2py_report_on_exit,(void****REMOVED***\"#modulename#\"***REMOVED***;
#endif

\treturn RETVAL;
***REMOVED***
#ifdef __cplusplus
***REMOVED***
#endif
***REMOVED***,
    'separatorsfor': {'latexdoc': '\n\n',
                      'restdoc': '\n\n'***REMOVED***,
    'latexdoc': ['\\section{Module \\texttt{#texmodulename#***REMOVED******REMOVED***\n',
                 '#modnote#\n',
                 '#latexdoc#'***REMOVED***,
    'restdoc': ['Module #modulename#\n' + '=' * 80,
                '\n#restdoc#'***REMOVED***
***REMOVED***

defmod_rules = [
***REMOVED***'body': '/*eof body*/',
     'method': '/*eof method*/',
     'externroutines': '/*eof externroutines*/',
     'routine_defs': '/*eof routine_defs*/',
     'initf90modhooks': '/*eof initf90modhooks*/',
     'initf2pywraphooks': '/*eof initf2pywraphooks*/',
     'initcommonhooks': '/*eof initcommonhooks*/',
     'latexdoc': '',
     'restdoc': '',
     'modnote': {hasnote: '#note#', l_not(hasnote***REMOVED***: ''***REMOVED***,
 ***REMOVED***
***REMOVED***

routine_rules = {
    'separatorsfor': sepdict,
    'body': ***REMOVED***
#begintitle#
static char doc_#apiname#[***REMOVED*** = \"\\\n#docreturn##name#(#docsignatureshort#***REMOVED***\\n\\nWrapper for ``#name#``.\\\n\\n#docstrsigns#\";
/* #declfortranroutine# */
static PyObject *#apiname#(const PyObject *capi_self,
                           PyObject *capi_args,
                           PyObject *capi_keywds,
                           #functype# (*f2py_func***REMOVED***(#callprotoargument#***REMOVED******REMOVED*** {
\tPyObject * volatile capi_buildvalue = NULL;
\tvolatile int f2py_success = 1;
#decl#
\tstatic char *capi_kwlist[***REMOVED*** = {#kwlist##kwlistopt##kwlistxa#NULL***REMOVED***;
#usercode#
#routdebugenter#
#ifdef F2PY_REPORT_ATEXIT
f2py_start_clock(***REMOVED***;
#endif
\tif (!PyArg_ParseTupleAndKeywords(capi_args,capi_keywds,\\
\t\t\"#argformat##keyformat##xaformat#:#pyname#\",\\
\t\tcapi_kwlist#args_capi##keys_capi##keys_xa#***REMOVED******REMOVED***\n\t\treturn NULL;
#frompyobj#
/*end of frompyobj*/
#ifdef F2PY_REPORT_ATEXIT
f2py_start_call_clock(***REMOVED***;
#endif
#callfortranroutine#
if (PyErr_Occurred(***REMOVED******REMOVED***
  f2py_success = 0;
#ifdef F2PY_REPORT_ATEXIT
f2py_stop_call_clock(***REMOVED***;
#endif
/*end of callfortranroutine*/
\t\tif (f2py_success***REMOVED*** {
#pyobjfrom#
/*end of pyobjfrom*/
\t\tCFUNCSMESS(\"Building return value.\\n\"***REMOVED***;
\t\tcapi_buildvalue = Py_BuildValue(\"#returnformat#\"#return#***REMOVED***;
/*closepyobjfrom*/
#closepyobjfrom#
\t\t***REMOVED*** /*if (f2py_success***REMOVED*** after callfortranroutine*/
/*cleanupfrompyobj*/
#cleanupfrompyobj#
\tif (capi_buildvalue == NULL***REMOVED*** {
#routdebugfailure#
\t***REMOVED*** else {
#routdebugleave#
\t***REMOVED***
\tCFUNCSMESS(\"Freeing memory.\\n\"***REMOVED***;
#freemem#
#ifdef F2PY_REPORT_ATEXIT
f2py_stop_clock(***REMOVED***;
#endif
\treturn capi_buildvalue;
***REMOVED***
#endtitle#
***REMOVED***,
    'routine_defs': '#routine_def#',
    'initf2pywraphooks': '#initf2pywraphook#',
    'externroutines': '#declfortranroutine#',
    'doc': '#docreturn##name#(#docsignature#***REMOVED***',
    'docshort': '#docreturn##name#(#docsignatureshort#***REMOVED***',
    'docs': '"\t#docreturn##name#(#docsignature#***REMOVED***\\n"\n',
    'need': ['arrayobject.h', 'CFUNCSMESS', 'MINMAX'***REMOVED***,
    'cppmacros': {debugcapi: '#define DEBUGCFUNCS'***REMOVED***,
    'latexdoc': ['\\subsection{Wrapper function \\texttt{#texname#***REMOVED******REMOVED***\n',
                 ***REMOVED***
\\noindent{{***REMOVED***\\verb@#docreturn##name#@{***REMOVED******REMOVED***\\texttt{(#latexdocsignatureshort#***REMOVED******REMOVED***
#routnote#

#latexdocstrsigns#
***REMOVED******REMOVED***,
    'restdoc': ['Wrapped function ``#name#``\n' + '-' * 80,

                ***REMOVED***
***REMOVED***

################## Rules for C/API function ##############

rout_rules = [
***REMOVED***  # Init
        'separatorsfor': {'callfortranroutine': '\n', 'routdebugenter': '\n', 'decl': '\n',
                          'routdebugleave': '\n', 'routdebugfailure': '\n',
                          'setjmpbuf': ' || ',
                          'docstrreq': '\n', 'docstropt': '\n', 'docstrout': '\n',
                          'docstrcbs': '\n', 'docstrsigns': '\\n"\n"',
                          'latexdocstrsigns': '\n',
                          'latexdocstrreq': '\n', 'latexdocstropt': '\n',
                          'latexdocstrout': '\n', 'latexdocstrcbs': '\n',
                  ***REMOVED***
        'kwlist': '', 'kwlistopt': '', 'callfortran': '', 'callfortranappend': '',
        'docsign': '', 'docsignopt': '', 'decl': '/*decl*/',
        'freemem': '/*freemem*/',
        'docsignshort': '', 'docsignoptshort': '',
        'docstrsigns': '', 'latexdocstrsigns': '',
        'docstrreq': '\\nParameters\\n----------',
        'docstropt': '\\nOther Parameters\\n----------------',
        'docstrout': '\\nReturns\\n-------',
        'docstrcbs': '\\nNotes\\n-----\\nCall-back functions::\\n',
        'latexdocstrreq': '\\noindent Required arguments:',
        'latexdocstropt': '\\noindent Optional arguments:',
        'latexdocstrout': '\\noindent Return objects:',
        'latexdocstrcbs': '\\noindent Call-back functions:',
        'args_capi': '', 'keys_capi': '', 'functype': '',
        'frompyobj': '/*frompyobj*/',
        # this list will be reversed
        'cleanupfrompyobj': ['/*end of cleanupfrompyobj*/'***REMOVED***,
        'pyobjfrom': '/*pyobjfrom*/',
        # this list will be reversed
        'closepyobjfrom': ['/*end of closepyobjfrom*/'***REMOVED***,
        'topyarr': '/*topyarr*/', 'routdebugleave': '/*routdebugleave*/',
        'routdebugenter': '/*routdebugenter*/',
        'routdebugfailure': '/*routdebugfailure*/',
        'callfortranroutine': '/*callfortranroutine*/',
        'argformat': '', 'keyformat': '', 'need_cfuncs': '',
        'docreturn': '', 'return': '', 'returnformat': '', 'rformat': '',
        'kwlistxa': '', 'keys_xa': '', 'xaformat': '', 'docsignxa': '', 'docsignxashort': '',
        'initf2pywraphook': '',
        'routnote': {hasnote: '--- #note#', l_not(hasnote***REMOVED***: ''***REMOVED***,
***REMOVED*** {
        'apiname': 'f2py_rout_#modulename#_#name#',
        'pyname': '#modulename#.#name#',
        'decl': '',
        '_check': l_not(ismoduleroutine***REMOVED***
***REMOVED*** {
        'apiname': 'f2py_rout_#modulename#_#f90modulename#_#name#',
        'pyname': '#modulename#.#f90modulename#.#name#',
        'decl': '',
        '_check': ismoduleroutine
***REMOVED*** {  # Subroutine
        'functype': 'void',
        'declfortranroutine': {l_and(l_not(l_or(ismoduleroutine, isintent_c***REMOVED******REMOVED***, l_not(isdummyroutine***REMOVED******REMOVED***: 'extern void #F_FUNC#(#fortranname#,#FORTRANNAME#***REMOVED***(#callprotoargument#***REMOVED***;',
                               l_and(l_not(ismoduleroutine***REMOVED***, isintent_c, l_not(isdummyroutine***REMOVED******REMOVED***: 'extern void #fortranname#(#callprotoargument#***REMOVED***;',
                               ismoduleroutine: '',
                               isdummyroutine: ''
                       ***REMOVED***
        'routine_def': {l_not(l_or(ismoduleroutine, isintent_c, isdummyroutine***REMOVED******REMOVED***: '\t{\"#name#\",-1,{{-1***REMOVED******REMOVED***,0,(char ****REMOVED***#F_FUNC#(#fortranname#,#FORTRANNAME#***REMOVED***,(f2py_init_func***REMOVED***#apiname#,doc_#apiname#***REMOVED***,',
                        l_and(l_not(ismoduleroutine***REMOVED***, isintent_c, l_not(isdummyroutine***REMOVED******REMOVED***: '\t{\"#name#\",-1,{{-1***REMOVED******REMOVED***,0,(char ****REMOVED***#fortranname#,(f2py_init_func***REMOVED***#apiname#,doc_#apiname#***REMOVED***,',
                        l_and(l_not(ismoduleroutine***REMOVED***, isdummyroutine***REMOVED***: '\t{\"#name#\",-1,{{-1***REMOVED******REMOVED***,0,NULL,(f2py_init_func***REMOVED***#apiname#,doc_#apiname#***REMOVED***,',
                ***REMOVED***
        'need': {l_and(l_not(l_or(ismoduleroutine, isintent_c***REMOVED******REMOVED***, l_not(isdummyroutine***REMOVED******REMOVED***: 'F_FUNC'***REMOVED***,
        'callfortranroutine': [
        ***REMOVED***debugcapi: [
                ***REMOVED***\tfprintf(stderr,\"debug-capi:Fortran subroutine `#fortranname#(#callfortran#***REMOVED***\'\\n\"***REMOVED***;***REMOVED******REMOVED******REMOVED***,
        ***REMOVED***hasexternals: ***REMOVED***\
\t\tif (#setjmpbuf#***REMOVED*** {
\t\t\tf2py_success = 0;
\t\t***REMOVED*** else {***REMOVED******REMOVED***,
        ***REMOVED***isthreadsafe: '\t\t\tPy_BEGIN_ALLOW_THREADS'***REMOVED***,
        ***REMOVED***hascallstatement: '''\t\t\t\t#callstatement#;
\t\t\t\t/*(*f2py_func***REMOVED***(#callfortran#***REMOVED***;*/'''***REMOVED***,
        ***REMOVED***l_not(l_or(hascallstatement, isdummyroutine***REMOVED******REMOVED***
                   : '\t\t\t\t(*f2py_func***REMOVED***(#callfortran#***REMOVED***;'***REMOVED***,
        ***REMOVED***isthreadsafe: '\t\t\tPy_END_ALLOW_THREADS'***REMOVED***,
        ***REMOVED***hasexternals: ***REMOVED***\t\t***REMOVED******REMOVED******REMOVED***
        ***REMOVED***,
        '_check': l_and(issubroutine, l_not(issubroutine_wrap***REMOVED******REMOVED***,
***REMOVED*** {  # Wrapped function
        'functype': 'void',
        'declfortranroutine': {l_not(l_or(ismoduleroutine, isdummyroutine***REMOVED******REMOVED***: 'extern void #F_WRAPPEDFUNC#(#name_lower#,#NAME#***REMOVED***(#callprotoargument#***REMOVED***;',
                               isdummyroutine: '',
                       ***REMOVED***

        'routine_def': {l_not(l_or(ismoduleroutine, isdummyroutine***REMOVED******REMOVED***: '\t{\"#name#\",-1,{{-1***REMOVED******REMOVED***,0,(char ****REMOVED***#F_WRAPPEDFUNC#(#name_lower#,#NAME#***REMOVED***,(f2py_init_func***REMOVED***#apiname#,doc_#apiname#***REMOVED***,',
                        isdummyroutine: '\t{\"#name#\",-1,{{-1***REMOVED******REMOVED***,0,NULL,(f2py_init_func***REMOVED***#apiname#,doc_#apiname#***REMOVED***,',
                ***REMOVED***
        'initf2pywraphook': {l_not(l_or(ismoduleroutine, isdummyroutine***REMOVED******REMOVED***: '''
***REMOVED***
      extern #ctype# #F_FUNC#(#name_lower#,#NAME#***REMOVED***(void***REMOVED***;
      PyObject* o = PyDict_GetItemString(d,"#name#"***REMOVED***;
      PyObject_SetAttrString(o,"_cpointer", F2PyCapsule_FromVoidPtr((void****REMOVED***#F_FUNC#(#name_lower#,#NAME#***REMOVED***,NULL***REMOVED******REMOVED***;
#if PY_VERSION_HEX >= 0x03000000
      PyObject_SetAttrString(o,"__name__", PyUnicode_FromString("#name#"***REMOVED******REMOVED***;
#else
      PyObject_SetAttrString(o,"__name__", PyString_FromString("#name#"***REMOVED******REMOVED***;
#endif
***REMOVED***
    '''***REMOVED***,
        'need': {l_not(l_or(ismoduleroutine, isdummyroutine***REMOVED******REMOVED***: ['F_WRAPPEDFUNC', 'F_FUNC'***REMOVED******REMOVED***,
        'callfortranroutine': [
        ***REMOVED***debugcapi: [
                ***REMOVED***\tfprintf(stderr,\"debug-capi:Fortran subroutine `f2pywrap#name_lower#(#callfortran#***REMOVED***\'\\n\"***REMOVED***;***REMOVED******REMOVED******REMOVED***,
        ***REMOVED***hasexternals: ***REMOVED***\
\tif (#setjmpbuf#***REMOVED*** {
\t\tf2py_success = 0;
\t***REMOVED*** else {***REMOVED******REMOVED***,
        ***REMOVED***isthreadsafe: '\tPy_BEGIN_ALLOW_THREADS'***REMOVED***,
        ***REMOVED***l_not(l_or(hascallstatement, isdummyroutine***REMOVED******REMOVED***
                   : '\t(*f2py_func***REMOVED***(#callfortran#***REMOVED***;'***REMOVED***,
        ***REMOVED***hascallstatement:
                '\t#callstatement#;\n\t/*(*f2py_func***REMOVED***(#callfortran#***REMOVED***;*/'***REMOVED***,
        ***REMOVED***isthreadsafe: '\tPy_END_ALLOW_THREADS'***REMOVED***,
        ***REMOVED***hasexternals: '\t***REMOVED***'***REMOVED***
        ***REMOVED***,
        '_check': isfunction_wrap,
***REMOVED*** {  # Wrapped subroutine
        'functype': 'void',
        'declfortranroutine': {l_not(l_or(ismoduleroutine, isdummyroutine***REMOVED******REMOVED***: 'extern void #F_WRAPPEDFUNC#(#name_lower#,#NAME#***REMOVED***(#callprotoargument#***REMOVED***;',
                               isdummyroutine: '',
                       ***REMOVED***

        'routine_def': {l_not(l_or(ismoduleroutine, isdummyroutine***REMOVED******REMOVED***: '\t{\"#name#\",-1,{{-1***REMOVED******REMOVED***,0,(char ****REMOVED***#F_WRAPPEDFUNC#(#name_lower#,#NAME#***REMOVED***,(f2py_init_func***REMOVED***#apiname#,doc_#apiname#***REMOVED***,',
                        isdummyroutine: '\t{\"#name#\",-1,{{-1***REMOVED******REMOVED***,0,NULL,(f2py_init_func***REMOVED***#apiname#,doc_#apiname#***REMOVED***,',
                ***REMOVED***
        'initf2pywraphook': {l_not(l_or(ismoduleroutine, isdummyroutine***REMOVED******REMOVED***: '''
***REMOVED***
      extern void #F_FUNC#(#name_lower#,#NAME#***REMOVED***(void***REMOVED***;
      PyObject* o = PyDict_GetItemString(d,"#name#"***REMOVED***;
      PyObject_SetAttrString(o,"_cpointer", F2PyCapsule_FromVoidPtr((void****REMOVED***#F_FUNC#(#name_lower#,#NAME#***REMOVED***,NULL***REMOVED******REMOVED***;
#if PY_VERSION_HEX >= 0x03000000
      PyObject_SetAttrString(o,"__name__", PyUnicode_FromString("#name#"***REMOVED******REMOVED***;
#else
      PyObject_SetAttrString(o,"__name__", PyString_FromString("#name#"***REMOVED******REMOVED***;
#endif
***REMOVED***
    '''***REMOVED***,
        'need': {l_not(l_or(ismoduleroutine, isdummyroutine***REMOVED******REMOVED***: ['F_WRAPPEDFUNC', 'F_FUNC'***REMOVED******REMOVED***,
        'callfortranroutine': [
        ***REMOVED***debugcapi: [
                ***REMOVED***\tfprintf(stderr,\"debug-capi:Fortran subroutine `f2pywrap#name_lower#(#callfortran#***REMOVED***\'\\n\"***REMOVED***;***REMOVED******REMOVED******REMOVED***,
        ***REMOVED***hasexternals: ***REMOVED***\
\tif (#setjmpbuf#***REMOVED*** {
\t\tf2py_success = 0;
\t***REMOVED*** else {***REMOVED******REMOVED***,
        ***REMOVED***isthreadsafe: '\tPy_BEGIN_ALLOW_THREADS'***REMOVED***,
        ***REMOVED***l_not(l_or(hascallstatement, isdummyroutine***REMOVED******REMOVED***
                   : '\t(*f2py_func***REMOVED***(#callfortran#***REMOVED***;'***REMOVED***,
        ***REMOVED***hascallstatement:
                '\t#callstatement#;\n\t/*(*f2py_func***REMOVED***(#callfortran#***REMOVED***;*/'***REMOVED***,
        ***REMOVED***isthreadsafe: '\tPy_END_ALLOW_THREADS'***REMOVED***,
        ***REMOVED***hasexternals: '\t***REMOVED***'***REMOVED***
        ***REMOVED***,
        '_check': issubroutine_wrap,
***REMOVED*** {  # Function
        'functype': '#ctype#',
        'docreturn': {l_not(isintent_hide***REMOVED***: '#rname#,'***REMOVED***,
        'docstrout': '#pydocsignout#',
        'latexdocstrout': ['\\item[***REMOVED***{{***REMOVED***\\verb@#pydocsignout#@{***REMOVED******REMOVED***',
                       ***REMOVED***hasresultnote: '--- #resultnote#'***REMOVED******REMOVED***,
        'callfortranroutine': [{l_and(debugcapi, isstringfunction***REMOVED***: ***REMOVED***\
#ifdef USESCOMPAQFORTRAN
\tfprintf(stderr,\"debug-capi:Fortran function #ctype# #fortranname#(#callcompaqfortran#***REMOVED***\\n\"***REMOVED***;
#else
\tfprintf(stderr,\"debug-capi:Fortran function #ctype# #fortranname#(#callfortran#***REMOVED***\\n\"***REMOVED***;
#endif
***REMOVED******REMOVED***,
                           ***REMOVED***l_and(debugcapi, l_not(isstringfunction***REMOVED******REMOVED***: ***REMOVED***\
\tfprintf(stderr,\"debug-capi:Fortran function #ctype# #fortranname#(#callfortran#***REMOVED***\\n\"***REMOVED***;
***REMOVED******REMOVED***
                               ***REMOVED***,
        '_check': l_and(isfunction, l_not(isfunction_wrap***REMOVED******REMOVED***
***REMOVED*** {  # Scalar function
        'declfortranroutine': {l_and(l_not(l_or(ismoduleroutine, isintent_c***REMOVED******REMOVED***, l_not(isdummyroutine***REMOVED******REMOVED***: 'extern #ctype# #F_FUNC#(#fortranname#,#FORTRANNAME#***REMOVED***(#callprotoargument#***REMOVED***;',
                               l_and(l_not(ismoduleroutine***REMOVED***, isintent_c, l_not(isdummyroutine***REMOVED******REMOVED***: 'extern #ctype# #fortranname#(#callprotoargument#***REMOVED***;',
                               isdummyroutine: ''
                       ***REMOVED***
        'routine_def': {l_and(l_not(l_or(ismoduleroutine, isintent_c***REMOVED******REMOVED***, l_not(isdummyroutine***REMOVED******REMOVED***: '\t{\"#name#\",-1,{{-1***REMOVED******REMOVED***,0,(char ****REMOVED***#F_FUNC#(#fortranname#,#FORTRANNAME#***REMOVED***,(f2py_init_func***REMOVED***#apiname#,doc_#apiname#***REMOVED***,',
                        l_and(l_not(ismoduleroutine***REMOVED***, isintent_c, l_not(isdummyroutine***REMOVED******REMOVED***: '\t{\"#name#\",-1,{{-1***REMOVED******REMOVED***,0,(char ****REMOVED***#fortranname#,(f2py_init_func***REMOVED***#apiname#,doc_#apiname#***REMOVED***,',
                        isdummyroutine: '\t{\"#name#\",-1,{{-1***REMOVED******REMOVED***,0,NULL,(f2py_init_func***REMOVED***#apiname#,doc_#apiname#***REMOVED***,',
                ***REMOVED***
        'decl': [{iscomplexfunction_warn: '\t#ctype# #name#_return_value={0,0***REMOVED***;',
                  l_not(iscomplexfunction***REMOVED***: '\t#ctype# #name#_return_value=0;'***REMOVED***,
             ***REMOVED***iscomplexfunction:
                  '\tPyObject *#name#_return_value_capi = Py_None;'***REMOVED***
                 ***REMOVED***,
        'callfortranroutine': [
        ***REMOVED***hasexternals: ***REMOVED***\
\tif (#setjmpbuf#***REMOVED*** {
\t\tf2py_success = 0;
\t***REMOVED*** else {***REMOVED******REMOVED***,
        ***REMOVED***isthreadsafe: '\tPy_BEGIN_ALLOW_THREADS'***REMOVED***,
        ***REMOVED***hascallstatement: '''\t#callstatement#;
/*\t#name#_return_value = (*f2py_func***REMOVED***(#callfortran#***REMOVED***;*/
'''***REMOVED***,
        ***REMOVED***l_not(l_or(hascallstatement, isdummyroutine***REMOVED******REMOVED***
                   : '\t#name#_return_value = (*f2py_func***REMOVED***(#callfortran#***REMOVED***;'***REMOVED***,
        ***REMOVED***isthreadsafe: '\tPy_END_ALLOW_THREADS'***REMOVED***,
        ***REMOVED***hasexternals: '\t***REMOVED***'***REMOVED***,
        ***REMOVED***l_and(debugcapi, iscomplexfunction***REMOVED***
                   : '\tfprintf(stderr,"#routdebugshowvalue#\\n",#name#_return_value.r,#name#_return_value.i***REMOVED***;'***REMOVED***,
        ***REMOVED***l_and(debugcapi, l_not(iscomplexfunction***REMOVED******REMOVED***: '\tfprintf(stderr,"#routdebugshowvalue#\\n",#name#_return_value***REMOVED***;'***REMOVED******REMOVED***,
        'pyobjfrom': {iscomplexfunction: '\t#name#_return_value_capi = pyobj_from_#ctype#1(#name#_return_value***REMOVED***;'***REMOVED***,
        'need': [{l_not(isdummyroutine***REMOVED***: 'F_FUNC'***REMOVED***,
             ***REMOVED***iscomplexfunction: 'pyobj_from_#ctype#1'***REMOVED***,
             ***REMOVED***islong_longfunction: 'long_long'***REMOVED***,
             ***REMOVED***islong_doublefunction: 'long_double'***REMOVED******REMOVED***,
        'returnformat': {l_not(isintent_hide***REMOVED***: '#rformat#'***REMOVED***,
        'return': {iscomplexfunction: ',#name#_return_value_capi',
                   l_not(l_or(iscomplexfunction, isintent_hide***REMOVED******REMOVED***: ',#name#_return_value'***REMOVED***,
        '_check': l_and(isfunction, l_not(isstringfunction***REMOVED***, l_not(isfunction_wrap***REMOVED******REMOVED***
***REMOVED*** {  # String function # in use for --no-wrap
        'declfortranroutine': 'extern void #F_FUNC#(#fortranname#,#FORTRANNAME#***REMOVED***(#callprotoargument#***REMOVED***;',
        'routine_def': {l_not(l_or(ismoduleroutine, isintent_c***REMOVED******REMOVED***:
                        '\t{\"#name#\",-1,{{-1***REMOVED******REMOVED***,0,(char ****REMOVED***#F_FUNC#(#fortranname#,#FORTRANNAME#***REMOVED***,(f2py_init_func***REMOVED***#apiname#,doc_#apiname#***REMOVED***,',
                        l_and(l_not(ismoduleroutine***REMOVED***, isintent_c***REMOVED***:
                        '\t{\"#name#\",-1,{{-1***REMOVED******REMOVED***,0,(char ****REMOVED***#fortranname#,(f2py_init_func***REMOVED***#apiname#,doc_#apiname#***REMOVED***,'
                ***REMOVED***
        'decl': ['\t#ctype# #name#_return_value = NULL;',
                 '\tint #name#_return_value_len = 0;'***REMOVED***,
        'callfortran':'#name#_return_value,#name#_return_value_len,',
        'callfortranroutine':['\t#name#_return_value_len = #rlength#;',
                              '\tif ((#name#_return_value = (string***REMOVED***malloc(sizeof(char***REMOVED****(#name#_return_value_len+1***REMOVED******REMOVED******REMOVED*** == NULL***REMOVED*** {',
                              '\t\tPyErr_SetString(PyExc_MemoryError, \"out of memory\"***REMOVED***;',
                              '\t\tf2py_success = 0;',
                              '\t***REMOVED*** else {',
                              "\t\t(#name#_return_value***REMOVED***[#name#_return_value_len***REMOVED*** = '\\0';",
                              '\t***REMOVED***',
                              '\tif (f2py_success***REMOVED*** {',
                          ***REMOVED***hasexternals: ***REMOVED***\
\t\tif (#setjmpbuf#***REMOVED*** {
\t\t\tf2py_success = 0;
\t\t***REMOVED*** else {***REMOVED******REMOVED***,
                          ***REMOVED***isthreadsafe: '\t\tPy_BEGIN_ALLOW_THREADS'***REMOVED***,
                              ***REMOVED***\
#ifdef USESCOMPAQFORTRAN
\t\t(*f2py_func***REMOVED***(#callcompaqfortran#***REMOVED***;
#else
\t\t(*f2py_func***REMOVED***(#callfortran#***REMOVED***;
#endif
***REMOVED***,
                          ***REMOVED***isthreadsafe: '\t\tPy_END_ALLOW_THREADS'***REMOVED***,
                          ***REMOVED***hasexternals: '\t\t***REMOVED***'***REMOVED***,
                          ***REMOVED***debugcapi:
                                  '\t\tfprintf(stderr,"#routdebugshowvalue#\\n",#name#_return_value_len,#name#_return_value***REMOVED***;'***REMOVED***,
                              '\t***REMOVED*** /* if (f2py_success***REMOVED*** after (string***REMOVED***malloc */',
                              ***REMOVED***,
        'returnformat': '#rformat#',
        'return': ',#name#_return_value',
        'freemem': '\tSTRINGFREE(#name#_return_value***REMOVED***;',
        'need': ['F_FUNC', '#ctype#', 'STRINGFREE'***REMOVED***,
        '_check':l_and(isstringfunction, l_not(isfunction_wrap***REMOVED******REMOVED***  # ???obsolete
***REMOVED***
***REMOVED***  # Debugging
        'routdebugenter': '\tfprintf(stderr,"debug-capi:Python C/API function #modulename#.#name#(#docsignature#***REMOVED***\\n"***REMOVED***;',
        'routdebugleave': '\tfprintf(stderr,"debug-capi:Python C/API function #modulename#.#name#: successful.\\n"***REMOVED***;',
        'routdebugfailure': '\tfprintf(stderr,"debug-capi:Python C/API function #modulename#.#name#: failure.\\n"***REMOVED***;',
        '_check': debugcapi
***REMOVED***
***REMOVED***

################ Rules for arguments ##################

typedef_need_dict = {islong_long: 'long_long',
                     islong_double: 'long_double',
                     islong_complex: 'complex_long_double',
                     isunsigned_char: 'unsigned_char',
                     isunsigned_short: 'unsigned_short',
                     isunsigned: 'unsigned',
                     isunsigned_long_long: 'unsigned_long_long',
                     isunsigned_chararray: 'unsigned_char',
                     isunsigned_shortarray: 'unsigned_short',
                     isunsigned_long_longarray: 'unsigned_long_long',
                     issigned_long_longarray: 'long_long',
                 ***REMOVED***

aux_rules = [
***REMOVED***
        'separatorsfor': sepdict
***REMOVED***
***REMOVED***  # Common
        'frompyobj': ['\t/* Processing auxiliary variable #varname# */',
                  ***REMOVED***debugcapi: '\tfprintf(stderr,"#vardebuginfo#\\n"***REMOVED***;'***REMOVED***, ***REMOVED***,
        'cleanupfrompyobj': '\t/* End of cleaning variable #varname# */',
        'need': typedef_need_dict,
***REMOVED***
    # Scalars (not complex***REMOVED***
***REMOVED***  # Common
        'decl': '\t#ctype# #varname# = 0;',
        'need': {hasinitvalue: 'math.h'***REMOVED***,
        'frompyobj': {hasinitvalue: '\t#varname# = #init#;'***REMOVED***,
        '_check': l_and(isscalar, l_not(iscomplex***REMOVED******REMOVED***,
***REMOVED***
***REMOVED***
        'return': ',#varname#',
        'docstrout': '#pydocsignout#',
        'docreturn': '#outvarname#,',
        'returnformat': '#varrformat#',
        '_check': l_and(isscalar, l_not(iscomplex***REMOVED***, isintent_out***REMOVED***,
***REMOVED***
    # Complex scalars
***REMOVED***  # Common
        'decl': '\t#ctype# #varname#;',
        'frompyobj': {hasinitvalue: '\t#varname#.r = #init.r#, #varname#.i = #init.i#;'***REMOVED***,
        '_check': iscomplex
***REMOVED***
    # String
***REMOVED***  # Common
        'decl': ['\t#ctype# #varname# = NULL;',
                 '\tint slen(#varname#***REMOVED***;',
                 ***REMOVED***,
        'need':['len..'***REMOVED***,
        '_check':isstring
***REMOVED***
    # Array
***REMOVED***  # Common
        'decl': ['\t#ctype# *#varname# = NULL;',
                 '\tnpy_intp #varname#_Dims[#rank#***REMOVED*** = {#rank*[-1***REMOVED***#***REMOVED***;',
                 '\tconst int #varname#_Rank = #rank#;',
                 ***REMOVED***,
        'need':['len..', {hasinitvalue: 'forcomb'***REMOVED***, {hasinitvalue: 'CFUNCSMESS'***REMOVED******REMOVED***,
        '_check': isarray
***REMOVED***
    # Scalararray
***REMOVED***  # Common
        '_check': l_and(isarray, l_not(iscomplexarray***REMOVED******REMOVED***
***REMOVED*** {  # Not hidden
        '_check': l_and(isarray, l_not(iscomplexarray***REMOVED***, isintent_nothide***REMOVED***
***REMOVED***
    # Integer*1 array
***REMOVED***'need': '#ctype#',
     '_check': isint1array,
     '_depend': ''
 ***REMOVED***
    # Integer*-1 array
***REMOVED***'need': '#ctype#',
     '_check': isunsigned_chararray,
     '_depend': ''
 ***REMOVED***
    # Integer*-2 array
***REMOVED***'need': '#ctype#',
     '_check': isunsigned_shortarray,
     '_depend': ''
 ***REMOVED***
    # Integer*-8 array
***REMOVED***'need': '#ctype#',
     '_check': isunsigned_long_longarray,
     '_depend': ''
 ***REMOVED***
    # Complexarray
***REMOVED***'need': '#ctype#',
     '_check': iscomplexarray,
     '_depend': ''
 ***REMOVED***
    # Stringarray
***REMOVED***
        'callfortranappend': {isarrayofstrings: 'flen(#varname#***REMOVED***,'***REMOVED***,
        'need': 'string',
        '_check': isstringarray
***REMOVED***
***REMOVED***

arg_rules = [
***REMOVED***
        'separatorsfor': sepdict
***REMOVED***
***REMOVED***  # Common
        'frompyobj': ['\t/* Processing variable #varname# */',
                  ***REMOVED***debugcapi: '\tfprintf(stderr,"#vardebuginfo#\\n"***REMOVED***;'***REMOVED***, ***REMOVED***,
        'cleanupfrompyobj': '\t/* End of cleaning variable #varname# */',
        '_depend': '',
        'need': typedef_need_dict,
***REMOVED***
    # Doc signatures
***REMOVED***
        'docstropt': {l_and(isoptional, isintent_nothide***REMOVED***: '#pydocsign#'***REMOVED***,
        'docstrreq': {l_and(isrequired, isintent_nothide***REMOVED***: '#pydocsign#'***REMOVED***,
        'docstrout': {isintent_out: '#pydocsignout#'***REMOVED***,
        'latexdocstropt': {l_and(isoptional, isintent_nothide***REMOVED***: ['\\item[***REMOVED***{{***REMOVED***\\verb@#pydocsign#@{***REMOVED******REMOVED***',
                                                             ***REMOVED***hasnote: '--- #note#'***REMOVED******REMOVED******REMOVED***,
        'latexdocstrreq': {l_and(isrequired, isintent_nothide***REMOVED***: ['\\item[***REMOVED***{{***REMOVED***\\verb@#pydocsign#@{***REMOVED******REMOVED***',
                                                             ***REMOVED***hasnote: '--- #note#'***REMOVED******REMOVED******REMOVED***,
        'latexdocstrout': {isintent_out: ['\\item[***REMOVED***{{***REMOVED***\\verb@#pydocsignout#@{***REMOVED******REMOVED***',
                                      ***REMOVED***l_and(hasnote, isintent_hide***REMOVED***: '--- #note#',
                                           l_and(hasnote, isintent_nothide***REMOVED***: '--- See above.'***REMOVED******REMOVED******REMOVED***,
        'depend': ''
***REMOVED***
    # Required/Optional arguments
***REMOVED***
        'kwlist': '"#varname#",',
        'docsign': '#varname#,',
        '_check': l_and(isintent_nothide, l_not(isoptional***REMOVED******REMOVED***
***REMOVED***
***REMOVED***
        'kwlistopt': '"#varname#",',
        'docsignopt': '#varname#=#showinit#,',
        'docsignoptshort': '#varname#,',
        '_check': l_and(isintent_nothide, isoptional***REMOVED***
***REMOVED***
    # Docstring/BuildValue
***REMOVED***
        'docreturn': '#outvarname#,',
        'returnformat': '#varrformat#',
        '_check': isintent_out
***REMOVED***
    # Externals (call-back functions***REMOVED***
***REMOVED***  # Common
        'docsignxa': {isintent_nothide: '#varname#_extra_args=(***REMOVED***,'***REMOVED***,
        'docsignxashort': {isintent_nothide: '#varname#_extra_args,'***REMOVED***,
        'docstropt': {isintent_nothide: '#varname#_extra_args : input tuple, optional\\n    Default: (***REMOVED***'***REMOVED***,
        'docstrcbs': '#cbdocstr#',
        'latexdocstrcbs': '\\item[***REMOVED*** #cblatexdocstr#',
        'latexdocstropt': {isintent_nothide: '\\item[***REMOVED***{{***REMOVED***\\verb@#varname#_extra_args := (***REMOVED*** input tuple@{***REMOVED******REMOVED*** --- Extra arguments for call-back function {{***REMOVED***\\verb@#varname#@{***REMOVED******REMOVED***.'***REMOVED***,
        'decl': ['\tPyObject *#varname#_capi = Py_None;',
                 '\tPyTupleObject *#varname#_xa_capi = NULL;',
                 '\tPyTupleObject *#varname#_args_capi = NULL;',
                 '\tint #varname#_nofargs_capi = 0;',
             ***REMOVED***l_not(isintent_callback***REMOVED***:
                  '\t#cbname#_typedef #varname#_cptr;'***REMOVED***
                 ***REMOVED***,
        'kwlistxa': {isintent_nothide: '"#varname#_extra_args",'***REMOVED***,
        'argformat': {isrequired: 'O'***REMOVED***,
        'keyformat': {isoptional: 'O'***REMOVED***,
        'xaformat': {isintent_nothide: 'O!'***REMOVED***,
        'args_capi': {isrequired: ',&#varname#_capi'***REMOVED***,
        'keys_capi': {isoptional: ',&#varname#_capi'***REMOVED***,
        'keys_xa': ',&PyTuple_Type,&#varname#_xa_capi',
        'setjmpbuf': '(setjmp(#cbname#_jmpbuf***REMOVED******REMOVED***',
        'callfortran': {l_not(isintent_callback***REMOVED***: '#varname#_cptr,'***REMOVED***,
        'need': ['#cbname#', 'setjmp.h'***REMOVED***,
        '_check':isexternal
***REMOVED***
***REMOVED***
        'frompyobj': [{l_not(isintent_callback***REMOVED***: ***REMOVED***\
if(F2PyCapsule_Check(#varname#_capi***REMOVED******REMOVED*** {
  #varname#_cptr = F2PyCapsule_AsVoidPtr(#varname#_capi***REMOVED***;
***REMOVED*** else {
  #varname#_cptr = #cbname#;
***REMOVED***
***REMOVED******REMOVED***, {isintent_callback: ***REMOVED***\
if (#varname#_capi==Py_None***REMOVED*** {
  #varname#_capi = PyObject_GetAttrString(#modulename#_module,\"#varname#\"***REMOVED***;
  if (#varname#_capi***REMOVED*** {
    if (#varname#_xa_capi==NULL***REMOVED*** {
      if (PyObject_HasAttrString(#modulename#_module,\"#varname#_extra_args\"***REMOVED******REMOVED*** {
        PyObject* capi_tmp = PyObject_GetAttrString(#modulename#_module,\"#varname#_extra_args\"***REMOVED***;
        if (capi_tmp***REMOVED***
          #varname#_xa_capi = (PyTupleObject ****REMOVED***PySequence_Tuple(capi_tmp***REMOVED***;
        else
          #varname#_xa_capi = (PyTupleObject ****REMOVED***Py_BuildValue(\"(***REMOVED***\"***REMOVED***;
        if (#varname#_xa_capi==NULL***REMOVED*** {
          PyErr_SetString(#modulename#_error,\"Failed to convert #modulename#.#varname#_extra_args to tuple.\\n\"***REMOVED***;
          return NULL;
    ***REMOVED***
  ***REMOVED***
***REMOVED***
  ***REMOVED***
  if (#varname#_capi==NULL***REMOVED*** {
    PyErr_SetString(#modulename#_error,\"Callback #varname# not defined (as an argument or module #modulename# attribute***REMOVED***.\\n\"***REMOVED***;
    return NULL;
  ***REMOVED***
***REMOVED***
***REMOVED******REMOVED***,
            ***REMOVED***\
\t#varname#_nofargs_capi = #cbname#_nofargs;
\tif (create_cb_arglist(#varname#_capi,#varname#_xa_capi,#maxnofargs#,#nofoptargs#,&#cbname#_nofargs,&#varname#_args_capi,\"failed in processing argument list for call-back #varname#.\"***REMOVED******REMOVED*** {
\t\tjmp_buf #varname#_jmpbuf;***REMOVED***,
        ***REMOVED***debugcapi: [***REMOVED***\
\t\tfprintf(stderr,\"debug-capi:Assuming %d arguments; at most #maxnofargs#(-#nofoptargs#***REMOVED*** is expected.\\n\",#cbname#_nofargs***REMOVED***;
\t\tCFUNCSMESSPY(\"for #varname#=\",#cbname#_capi***REMOVED***;***REMOVED***,
                     ***REMOVED***l_not(isintent_callback***REMOVED***: ***REMOVED***\t\tfprintf(stderr,\"#vardebugshowvalue# (call-back in C***REMOVED***.\\n\",#cbname#***REMOVED***;***REMOVED******REMOVED******REMOVED******REMOVED***,
            ***REMOVED***\
\t\tCFUNCSMESS(\"Saving jmpbuf for `#varname#`.\\n\"***REMOVED***;
\t\tSWAP(#varname#_capi,#cbname#_capi,PyObject***REMOVED***;
\t\tSWAP(#varname#_args_capi,#cbname#_args_capi,PyTupleObject***REMOVED***;
\t\tmemcpy(&#varname#_jmpbuf,&#cbname#_jmpbuf,sizeof(jmp_buf***REMOVED******REMOVED***;***REMOVED***,
        ***REMOVED***,
        'cleanupfrompyobj':
        ***REMOVED***\
\t\tCFUNCSMESS(\"Restoring jmpbuf for `#varname#`.\\n\"***REMOVED***;
\t\t#cbname#_capi = #varname#_capi;
\t\tPy_DECREF(#cbname#_args_capi***REMOVED***;
\t\t#cbname#_args_capi = #varname#_args_capi;
\t\t#cbname#_nofargs = #varname#_nofargs_capi;
\t\tmemcpy(&#cbname#_jmpbuf,&#varname#_jmpbuf,sizeof(jmp_buf***REMOVED******REMOVED***;
\t***REMOVED******REMOVED***,
        'need': ['SWAP', 'create_cb_arglist'***REMOVED***,
        '_check':isexternal,
        '_depend':''
***REMOVED***
    # Scalars (not complex***REMOVED***
***REMOVED***  # Common
        'decl': '\t#ctype# #varname# = 0;',
        'pyobjfrom': {debugcapi: '\tfprintf(stderr,"#vardebugshowvalue#\\n",#varname#***REMOVED***;'***REMOVED***,
        'callfortran': {isintent_c: '#varname#,', l_not(isintent_c***REMOVED***: '&#varname#,'***REMOVED***,
        'return': {isintent_out: ',#varname#'***REMOVED***,
        '_check': l_and(isscalar, l_not(iscomplex***REMOVED******REMOVED***
***REMOVED*** {
        'need': {hasinitvalue: 'math.h'***REMOVED***,
        '_check': l_and(isscalar, l_not(iscomplex***REMOVED******REMOVED***,
***REMOVED*** {  # Not hidden
        'decl': '\tPyObject *#varname#_capi = Py_None;',
        'argformat': {isrequired: 'O'***REMOVED***,
        'keyformat': {isoptional: 'O'***REMOVED***,
        'args_capi': {isrequired: ',&#varname#_capi'***REMOVED***,
        'keys_capi': {isoptional: ',&#varname#_capi'***REMOVED***,
        'pyobjfrom': {isintent_inout: ***REMOVED***\
\tf2py_success = try_pyarr_from_#ctype#(#varname#_capi,&#varname#***REMOVED***;
\tif (f2py_success***REMOVED*** {***REMOVED******REMOVED***,
        'closepyobjfrom': {isintent_inout: "\t***REMOVED*** /*if (f2py_success***REMOVED*** of #varname# pyobjfrom*/"***REMOVED***,
        'need': {isintent_inout: 'try_pyarr_from_#ctype#'***REMOVED***,
        '_check': l_and(isscalar, l_not(iscomplex***REMOVED***, isintent_nothide***REMOVED***
***REMOVED*** {
        'frompyobj': [
            # hasinitvalue...
            #   if pyobj is None:
            #     varname = init
            #   else
            #     from_pyobj(varname***REMOVED***
            #
            # isoptional and noinitvalue...
            #   if pyobj is not None:
            #     from_pyobj(varname***REMOVED***
            #   else:
            #     varname is uninitialized
            #
            # ...
            #   from_pyobj(varname***REMOVED***
            #
        ***REMOVED***hasinitvalue: '\tif (#varname#_capi == Py_None***REMOVED*** #varname# = #init#; else',
             '_depend': ''***REMOVED***,
        ***REMOVED***l_and(isoptional, l_not(hasinitvalue***REMOVED******REMOVED***: '\tif (#varname#_capi != Py_None***REMOVED***',
             '_depend': ''***REMOVED***,
        ***REMOVED***l_not(islogical***REMOVED***: '''\
\t\tf2py_success = #ctype#_from_pyobj(&#varname#,#varname#_capi,"#pyname#(***REMOVED*** #nth# (#varname#***REMOVED*** can\'t be converted to #ctype#"***REMOVED***;
\tif (f2py_success***REMOVED*** {'''***REMOVED***,
        ***REMOVED***islogical: '''\
\t\t#varname# = (#ctype#***REMOVED***PyObject_IsTrue(#varname#_capi***REMOVED***;
\t\tf2py_success = 1;
\tif (f2py_success***REMOVED*** {'''***REMOVED***,
        ***REMOVED***,
        'cleanupfrompyobj': '\t***REMOVED*** /*if (f2py_success***REMOVED*** of #varname#*/',
        'need': {l_not(islogical***REMOVED***: '#ctype#_from_pyobj'***REMOVED***,
        '_check': l_and(isscalar, l_not(iscomplex***REMOVED***, isintent_nothide***REMOVED***,
        '_depend': ''
***REMOVED*** {  # Hidden
        'frompyobj': {hasinitvalue: '\t#varname# = #init#;'***REMOVED***,
        'need': typedef_need_dict,
        '_check': l_and(isscalar, l_not(iscomplex***REMOVED***, isintent_hide***REMOVED***,
        '_depend': ''
***REMOVED*** {  # Common
        'frompyobj': {debugcapi: '\tfprintf(stderr,"#vardebugshowvalue#\\n",#varname#***REMOVED***;'***REMOVED***,
        '_check': l_and(isscalar, l_not(iscomplex***REMOVED******REMOVED***,
        '_depend': ''
***REMOVED***
    # Complex scalars
***REMOVED***  # Common
        'decl': '\t#ctype# #varname#;',
        'callfortran': {isintent_c: '#varname#,', l_not(isintent_c***REMOVED***: '&#varname#,'***REMOVED***,
        'pyobjfrom': {debugcapi: '\tfprintf(stderr,"#vardebugshowvalue#\\n",#varname#.r,#varname#.i***REMOVED***;'***REMOVED***,
        'return': {isintent_out: ',#varname#_capi'***REMOVED***,
        '_check': iscomplex
***REMOVED*** {  # Not hidden
        'decl': '\tPyObject *#varname#_capi = Py_None;',
        'argformat': {isrequired: 'O'***REMOVED***,
        'keyformat': {isoptional: 'O'***REMOVED***,
        'args_capi': {isrequired: ',&#varname#_capi'***REMOVED***,
        'keys_capi': {isoptional: ',&#varname#_capi'***REMOVED***,
        'need': {isintent_inout: 'try_pyarr_from_#ctype#'***REMOVED***,
        'pyobjfrom': {isintent_inout: ***REMOVED***\
\t\tf2py_success = try_pyarr_from_#ctype#(#varname#_capi,&#varname#***REMOVED***;
\t\tif (f2py_success***REMOVED*** {***REMOVED******REMOVED***,
        'closepyobjfrom': {isintent_inout: "\t\t***REMOVED*** /*if (f2py_success***REMOVED*** of #varname# pyobjfrom*/"***REMOVED***,
        '_check': l_and(iscomplex, isintent_nothide***REMOVED***
***REMOVED*** {
        'frompyobj': [{hasinitvalue: '\tif (#varname#_capi==Py_None***REMOVED*** {#varname#.r = #init.r#, #varname#.i = #init.i#;***REMOVED*** else'***REMOVED***,
                  ***REMOVED***l_and(isoptional, l_not(hasinitvalue***REMOVED******REMOVED***
                             : '\tif (#varname#_capi != Py_None***REMOVED***'***REMOVED***,
                      '\t\tf2py_success = #ctype#_from_pyobj(&#varname#,#varname#_capi,"#pyname#(***REMOVED*** #nth# (#varname#***REMOVED*** can\'t be converted to #ctype#"***REMOVED***;'
                      '\n\tif (f2py_success***REMOVED*** {'***REMOVED***,
        'cleanupfrompyobj': '\t***REMOVED***  /*if (f2py_success***REMOVED*** of #varname# frompyobj*/',
        'need': ['#ctype#_from_pyobj'***REMOVED***,
        '_check': l_and(iscomplex, isintent_nothide***REMOVED***,
        '_depend': ''
***REMOVED*** {  # Hidden
        'decl': {isintent_out: '\tPyObject *#varname#_capi = Py_None;'***REMOVED***,
        '_check': l_and(iscomplex, isintent_hide***REMOVED***
***REMOVED*** {
        'frompyobj': {hasinitvalue: '\t#varname#.r = #init.r#, #varname#.i = #init.i#;'***REMOVED***,
        '_check': l_and(iscomplex, isintent_hide***REMOVED***,
        '_depend': ''
***REMOVED*** {  # Common
        'pyobjfrom': {isintent_out: '\t#varname#_capi = pyobj_from_#ctype#1(#varname#***REMOVED***;'***REMOVED***,
        'need': ['pyobj_from_#ctype#1'***REMOVED***,
        '_check': iscomplex
***REMOVED*** {
        'frompyobj': {debugcapi: '\tfprintf(stderr,"#vardebugshowvalue#\\n",#varname#.r,#varname#.i***REMOVED***;'***REMOVED***,
        '_check': iscomplex,
        '_depend': ''
***REMOVED***
    # String
***REMOVED***  # Common
        'decl': ['\t#ctype# #varname# = NULL;',
                 '\tint slen(#varname#***REMOVED***;',
                 '\tPyObject *#varname#_capi = Py_None;'***REMOVED***,
        'callfortran':'#varname#,',
        'callfortranappend':'slen(#varname#***REMOVED***,',
        'pyobjfrom':{debugcapi: '\tfprintf(stderr,"#vardebugshowvalue#\\n",slen(#varname#***REMOVED***,#varname#***REMOVED***;'***REMOVED***,
        'return': {isintent_out: ',#varname#'***REMOVED***,
        'need': ['len..'***REMOVED***,  # 'STRINGFREE'***REMOVED***,
        '_check':isstring
***REMOVED*** {  # Common
        'frompyobj': ***REMOVED***\
\tslen(#varname#***REMOVED*** = #length#;
\tf2py_success = #ctype#_from_pyobj(&#varname#,&slen(#varname#***REMOVED***,#init#,#varname#_capi,\"#ctype#_from_pyobj failed in converting #nth# `#varname#\' of #pyname# to C #ctype#\"***REMOVED***;
\tif (f2py_success***REMOVED*** {***REMOVED***,
        'cleanupfrompyobj': ***REMOVED***\
\t\tSTRINGFREE(#varname#***REMOVED***;
\t***REMOVED***  /*if (f2py_success***REMOVED*** of #varname#*/***REMOVED***,
        'need': ['#ctype#_from_pyobj', 'len..', 'STRINGFREE'***REMOVED***,
        '_check':isstring,
        '_depend':''
***REMOVED*** {  # Not hidden
        'argformat': {isrequired: 'O'***REMOVED***,
        'keyformat': {isoptional: 'O'***REMOVED***,
        'args_capi': {isrequired: ',&#varname#_capi'***REMOVED***,
        'keys_capi': {isoptional: ',&#varname#_capi'***REMOVED***,
        'pyobjfrom': {isintent_inout: '''\
\tf2py_success = try_pyarr_from_#ctype#(#varname#_capi,#varname#***REMOVED***;
\tif (f2py_success***REMOVED*** {'''***REMOVED***,
        'closepyobjfrom': {isintent_inout: '\t***REMOVED*** /*if (f2py_success***REMOVED*** of #varname# pyobjfrom*/'***REMOVED***,
        'need': {isintent_inout: 'try_pyarr_from_#ctype#'***REMOVED***,
        '_check': l_and(isstring, isintent_nothide***REMOVED***
***REMOVED*** {  # Hidden
        '_check': l_and(isstring, isintent_hide***REMOVED***
***REMOVED*** {
        'frompyobj': {debugcapi: '\tfprintf(stderr,"#vardebugshowvalue#\\n",slen(#varname#***REMOVED***,#varname#***REMOVED***;'***REMOVED***,
        '_check': isstring,
        '_depend': ''
***REMOVED***
    # Array
***REMOVED***  # Common
        'decl': ['\t#ctype# *#varname# = NULL;',
                 '\tnpy_intp #varname#_Dims[#rank#***REMOVED*** = {#rank*[-1***REMOVED***#***REMOVED***;',
                 '\tconst int #varname#_Rank = #rank#;',
                 '\tPyArrayObject *capi_#varname#_tmp = NULL;',
                 '\tint capi_#varname#_intent = 0;',
                 ***REMOVED***,
        'callfortran':'#varname#,',
        'return':{isintent_out: ',capi_#varname#_tmp'***REMOVED***,
        'need': 'len..',
        '_check': isarray
***REMOVED*** {  # intent(overwrite***REMOVED*** array
        'decl': '\tint capi_overwrite_#varname# = 1;',
        'kwlistxa': '"overwrite_#varname#",',
        'xaformat': 'i',
        'keys_xa': ',&capi_overwrite_#varname#',
        'docsignxa': 'overwrite_#varname#=1,',
        'docsignxashort': 'overwrite_#varname#,',
        'docstropt': 'overwrite_#varname# : input int, optional\\n    Default: 1',
        '_check': l_and(isarray, isintent_overwrite***REMOVED***,
***REMOVED*** {
        'frompyobj': '\tcapi_#varname#_intent |= (capi_overwrite_#varname#?0:F2PY_INTENT_COPY***REMOVED***;',
        '_check': l_and(isarray, isintent_overwrite***REMOVED***,
        '_depend': '',
***REMOVED***
***REMOVED***  # intent(copy***REMOVED*** array
        'decl': '\tint capi_overwrite_#varname# = 0;',
        'kwlistxa': '"overwrite_#varname#",',
        'xaformat': 'i',
        'keys_xa': ',&capi_overwrite_#varname#',
        'docsignxa': 'overwrite_#varname#=0,',
        'docsignxashort': 'overwrite_#varname#,',
        'docstropt': 'overwrite_#varname# : input int, optional\\n    Default: 0',
        '_check': l_and(isarray, isintent_copy***REMOVED***,
***REMOVED*** {
        'frompyobj': '\tcapi_#varname#_intent |= (capi_overwrite_#varname#?0:F2PY_INTENT_COPY***REMOVED***;',
        '_check': l_and(isarray, isintent_copy***REMOVED***,
        '_depend': '',
***REMOVED*** {
        'need': [{hasinitvalue: 'forcomb'***REMOVED***, {hasinitvalue: 'CFUNCSMESS'***REMOVED******REMOVED***,
        '_check': isarray,
        '_depend': ''
***REMOVED*** {  # Not hidden
        'decl': '\tPyObject *#varname#_capi = Py_None;',
        'argformat': {isrequired: 'O'***REMOVED***,
        'keyformat': {isoptional: 'O'***REMOVED***,
        'args_capi': {isrequired: ',&#varname#_capi'***REMOVED***,
        'keys_capi': {isoptional: ',&#varname#_capi'***REMOVED***,
        '_check': l_and(isarray, isintent_nothide***REMOVED***
***REMOVED*** {
        'frompyobj': ['\t#setdims#;',
                      '\tcapi_#varname#_intent |= #intent#;',
                  ***REMOVED***isintent_hide:
                       '\tcapi_#varname#_tmp = array_from_pyobj(#atype#,#varname#_Dims,#varname#_Rank,capi_#varname#_intent,Py_None***REMOVED***;'***REMOVED***,
                  ***REMOVED***isintent_nothide:
                       '\tcapi_#varname#_tmp = array_from_pyobj(#atype#,#varname#_Dims,#varname#_Rank,capi_#varname#_intent,#varname#_capi***REMOVED***;'***REMOVED***,
                      ***REMOVED***\
\tif (capi_#varname#_tmp == NULL***REMOVED*** {
\t\tif (!PyErr_Occurred(***REMOVED******REMOVED***
\t\t\tPyErr_SetString(#modulename#_error,\"failed in converting #nth# `#varname#\' of #pyname# to C/Fortran array\" ***REMOVED***;
\t***REMOVED*** else {
\t\t#varname# = (#ctype# ****REMOVED***(PyArray_DATA(capi_#varname#_tmp***REMOVED******REMOVED***;
***REMOVED***,
                  ***REMOVED***hasinitvalue: [
                      ***REMOVED***isintent_nothide:
                              '\tif (#varname#_capi == Py_None***REMOVED*** {'***REMOVED***,
                      ***REMOVED***isintent_hide: '\t{'***REMOVED***,
                      ***REMOVED***iscomplexarray: '\t\t#ctype# capi_c;'***REMOVED***,
                          ***REMOVED***\
\t\tint *_i,capi_i=0;
\t\tCFUNCSMESS(\"#name#: Initializing #varname#=#init#\\n\"***REMOVED***;
\t\tif (initforcomb(PyArray_DIMS(capi_#varname#_tmp***REMOVED***,PyArray_NDIM(capi_#varname#_tmp***REMOVED***,1***REMOVED******REMOVED*** {
\t\t\twhile ((_i = nextforcomb(***REMOVED******REMOVED******REMOVED***
\t\t\t\t#varname#[capi_i++***REMOVED*** = #init#; /* fortran way */
\t\t***REMOVED*** else {
\t\t\tif (!PyErr_Occurred(***REMOVED******REMOVED***
\t\t\t\tPyErr_SetString(#modulename#_error,\"Initialization of #nth# #varname# failed (initforcomb***REMOVED***.\"***REMOVED***;
\t\t\tf2py_success = 0;
\t\t***REMOVED***
\t***REMOVED***
\tif (f2py_success***REMOVED*** {***REMOVED******REMOVED******REMOVED***,
                      ***REMOVED***,
        'cleanupfrompyobj': [  # note that this list will be reversed
            '\t***REMOVED***  /*if (capi_#varname#_tmp == NULL***REMOVED*** ... else of #varname#*/',
        ***REMOVED***l_not(l_or(isintent_out, isintent_hide***REMOVED******REMOVED***: ***REMOVED***\
\tif((PyObject ****REMOVED***capi_#varname#_tmp!=#varname#_capi***REMOVED*** {
\t\tPy_XDECREF(capi_#varname#_tmp***REMOVED***; ***REMOVED******REMOVED******REMOVED***,
        ***REMOVED***l_and(isintent_hide, l_not(isintent_out***REMOVED******REMOVED***
                   : ***REMOVED***\t\tPy_XDECREF(capi_#varname#_tmp***REMOVED***;***REMOVED******REMOVED***,
        ***REMOVED***hasinitvalue: '\t***REMOVED***  /*if (f2py_success***REMOVED*** of #varname# init*/'***REMOVED***,
        ***REMOVED***,
        '_check': isarray,
        '_depend': ''
***REMOVED***
    # Scalararray
***REMOVED***  # Common
        '_check': l_and(isarray, l_not(iscomplexarray***REMOVED******REMOVED***
***REMOVED*** {  # Not hidden
        '_check': l_and(isarray, l_not(iscomplexarray***REMOVED***, isintent_nothide***REMOVED***
***REMOVED***
    # Integer*1 array
***REMOVED***'need': '#ctype#',
     '_check': isint1array,
     '_depend': ''
 ***REMOVED***
    # Integer*-1 array
***REMOVED***'need': '#ctype#',
     '_check': isunsigned_chararray,
     '_depend': ''
 ***REMOVED***
    # Integer*-2 array
***REMOVED***'need': '#ctype#',
     '_check': isunsigned_shortarray,
     '_depend': ''
 ***REMOVED***
    # Integer*-8 array
***REMOVED***'need': '#ctype#',
     '_check': isunsigned_long_longarray,
     '_depend': ''
 ***REMOVED***
    # Complexarray
***REMOVED***'need': '#ctype#',
     '_check': iscomplexarray,
     '_depend': ''
 ***REMOVED***
    # Stringarray
***REMOVED***
        'callfortranappend': {isarrayofstrings: 'flen(#varname#***REMOVED***,'***REMOVED***,
        'need': 'string',
        '_check': isstringarray
***REMOVED***
***REMOVED***

################# Rules for checking ###############

check_rules = [
***REMOVED***
        'frompyobj': {debugcapi: '\tfprintf(stderr,\"debug-capi:Checking `#check#\'\\n\"***REMOVED***;'***REMOVED***,
        'need': 'len..'
***REMOVED*** {
        'frompyobj': '\tCHECKSCALAR(#check#,\"#check#\",\"#nth# #varname#\",\"#varshowvalue#\",#varname#***REMOVED*** {',
        'cleanupfrompyobj': '\t***REMOVED*** /*CHECKSCALAR(#check#***REMOVED****/',
        'need': 'CHECKSCALAR',
        '_check': l_and(isscalar, l_not(iscomplex***REMOVED******REMOVED***,
        '_break': ''
***REMOVED*** {
        'frompyobj': '\tCHECKSTRING(#check#,\"#check#\",\"#nth# #varname#\",\"#varshowvalue#\",#varname#***REMOVED*** {',
        'cleanupfrompyobj': '\t***REMOVED*** /*CHECKSTRING(#check#***REMOVED****/',
        'need': 'CHECKSTRING',
        '_check': isstring,
        '_break': ''
***REMOVED*** {
        'need': 'CHECKARRAY',
        'frompyobj': '\tCHECKARRAY(#check#,\"#check#\",\"#nth# #varname#\"***REMOVED*** {',
        'cleanupfrompyobj': '\t***REMOVED*** /*CHECKARRAY(#check#***REMOVED****/',
        '_check': isarray,
        '_break': ''
***REMOVED*** {
        'need': 'CHECKGENERIC',
        'frompyobj': '\tCHECKGENERIC(#check#,\"#check#\",\"#nth# #varname#\"***REMOVED*** {',
        'cleanupfrompyobj': '\t***REMOVED*** /*CHECKGENERIC(#check#***REMOVED****/',
***REMOVED***
***REMOVED***

########## Applying the rules. No need to modify what follows #############

#################### Build C/API module #######################


def buildmodule(m, um***REMOVED***:
    ***REMOVED***
    Return
    ***REMOVED***
    global f2py_version, options
    outmess('\tBuilding module "%s"...\n' % (m['name'***REMOVED******REMOVED******REMOVED***
    ret = {***REMOVED***
    mod_rules = defmod_rules[:***REMOVED***
    vrd = capi_maps.modsign2map(m***REMOVED***
    rd = dictappend({'f2py_version': f2py_version***REMOVED***, vrd***REMOVED***
    funcwrappers = [***REMOVED***
    funcwrappers2 = [***REMOVED***  # F90 codes
    for n in m['interfaced'***REMOVED***:
        nb = None
        for bi in m['body'***REMOVED***:
            if not bi['block'***REMOVED*** == 'interface':
                errmess('buildmodule: Expected interface block. Skipping.\n'***REMOVED***
                continue
            for b in bi['body'***REMOVED***:
                if b['name'***REMOVED*** == n:
                    nb = b
                    break

        if not nb:
            errmess(
                'buildmodule: Could not found the body of interfaced routine "%s". Skipping.\n' % (n***REMOVED******REMOVED***
            continue
        nb_list = [nb***REMOVED***
        if 'entry' in nb:
            for k, a in nb['entry'***REMOVED***.items(***REMOVED***:
                nb1 = copy.deepcopy(nb***REMOVED***
                del nb1['entry'***REMOVED***
                nb1['name'***REMOVED*** = k
                nb1['args'***REMOVED*** = a
                nb_list.append(nb1***REMOVED***
        for nb in nb_list:
            api, wrap = buildapi(nb***REMOVED***
            if wrap:
                if ismoduleroutine(nb***REMOVED***:
                    funcwrappers2.append(wrap***REMOVED***
                else:
                    funcwrappers.append(wrap***REMOVED***
            ar = applyrules(api, vrd***REMOVED***
            rd = dictappend(rd, ar***REMOVED***

    # Construct COMMON block support
    cr, wrap = common_rules.buildhooks(m***REMOVED***
    if wrap:
        funcwrappers.append(wrap***REMOVED***
    ar = applyrules(cr, vrd***REMOVED***
    rd = dictappend(rd, ar***REMOVED***

    # Construct F90 module support
    mr, wrap = f90mod_rules.buildhooks(m***REMOVED***
    if wrap:
        funcwrappers2.append(wrap***REMOVED***
    ar = applyrules(mr, vrd***REMOVED***
    rd = dictappend(rd, ar***REMOVED***

    for u in um:
        ar = use_rules.buildusevars(u, m['use'***REMOVED***[u['name'***REMOVED******REMOVED******REMOVED***
        rd = dictappend(rd, ar***REMOVED***

    needs = cfuncs.get_needs(***REMOVED***
    code = {***REMOVED***
    for n in needs.keys(***REMOVED***:
        code[n***REMOVED*** = [***REMOVED***
        for k in needs[n***REMOVED***:
            c = ''
            if k in cfuncs.includes0:
                c = cfuncs.includes0[k***REMOVED***
            elif k in cfuncs.includes:
                c = cfuncs.includes[k***REMOVED***
            elif k in cfuncs.userincludes:
                c = cfuncs.userincludes[k***REMOVED***
            elif k in cfuncs.typedefs:
                c = cfuncs.typedefs[k***REMOVED***
            elif k in cfuncs.typedefs_generated:
                c = cfuncs.typedefs_generated[k***REMOVED***
            elif k in cfuncs.cppmacros:
                c = cfuncs.cppmacros[k***REMOVED***
            elif k in cfuncs.cfuncs:
                c = cfuncs.cfuncs[k***REMOVED***
            elif k in cfuncs.callbacks:
                c = cfuncs.callbacks[k***REMOVED***
            elif k in cfuncs.f90modhooks:
                c = cfuncs.f90modhooks[k***REMOVED***
            elif k in cfuncs.commonhooks:
                c = cfuncs.commonhooks[k***REMOVED***
            else:
                errmess('buildmodule: unknown need %s.\n' % (repr(k***REMOVED******REMOVED******REMOVED***
                continue
            code[n***REMOVED***.append(c***REMOVED***
    mod_rules.append(code***REMOVED***
    for r in mod_rules:
        if ('_check' in r and r['_check'***REMOVED***(m***REMOVED******REMOVED*** or ('_check' not in r***REMOVED***:
            ar = applyrules(r, vrd, m***REMOVED***
            rd = dictappend(rd, ar***REMOVED***
    ar = applyrules(module_rules, rd***REMOVED***

    fn = os.path.join(options['buildpath'***REMOVED***, vrd['coutput'***REMOVED******REMOVED***
    ret['csrc'***REMOVED*** = fn
    f = open(fn, 'w'***REMOVED***
    f.write(ar['modulebody'***REMOVED***.replace('\t', 2 * ' '***REMOVED******REMOVED***
    f.close(***REMOVED***
    outmess('\tWrote C/API module "%s" to file "%s"\n' % (m['name'***REMOVED***, fn***REMOVED******REMOVED***

    if options['dorestdoc'***REMOVED***:
        fn = os.path.join(
            options['buildpath'***REMOVED***, vrd['modulename'***REMOVED*** + 'module.rest'***REMOVED***
        f = open(fn, 'w'***REMOVED***
        f.write('.. -*- rest -*-\n'***REMOVED***
        f.write('\n'.join(ar['restdoc'***REMOVED******REMOVED******REMOVED***
        f.close(***REMOVED***
        outmess('\tReST Documentation is saved to file "%s/%smodule.rest"\n' %
                (options['buildpath'***REMOVED***, vrd['modulename'***REMOVED******REMOVED******REMOVED***
    if options['dolatexdoc'***REMOVED***:
        fn = os.path.join(
            options['buildpath'***REMOVED***, vrd['modulename'***REMOVED*** + 'module.tex'***REMOVED***
        ret['ltx'***REMOVED*** = fn
        f = open(fn, 'w'***REMOVED***
        f.write(
            '%% This file is auto-generated with f2py (version:%s***REMOVED***\n' % (f2py_version***REMOVED******REMOVED***
        if 'shortlatex' not in options:
            f.write(
                '\\documentclass{article***REMOVED***\n\\usepackage{a4wide***REMOVED***\n\\begin{document***REMOVED***\n\\tableofcontents\n\n'***REMOVED***
        f.write('\n'.join(ar['latexdoc'***REMOVED******REMOVED******REMOVED***
        if 'shortlatex' not in options:
            f.write('\\end{document***REMOVED***'***REMOVED***
        f.close(***REMOVED***
        outmess('\tDocumentation is saved to file "%s/%smodule.tex"\n' %
                (options['buildpath'***REMOVED***, vrd['modulename'***REMOVED******REMOVED******REMOVED***
    if funcwrappers:
        wn = os.path.join(options['buildpath'***REMOVED***, vrd['f2py_wrapper_output'***REMOVED******REMOVED***
        ret['fsrc'***REMOVED*** = wn
        f = open(wn, 'w'***REMOVED***
        f.write('C     -*- fortran -*-\n'***REMOVED***
        f.write(
            'C     This file is autogenerated with f2py (version:%s***REMOVED***\n' % (f2py_version***REMOVED******REMOVED***
        f.write(
            'C     It contains Fortran 77 wrappers to fortran functions.\n'***REMOVED***
        lines = [***REMOVED***
        for l in ('\n\n'.join(funcwrappers***REMOVED*** + '\n'***REMOVED***.split('\n'***REMOVED***:
            if l and l[0***REMOVED*** == ' ':
                while len(l***REMOVED*** >= 66:
                    lines.append(l[:66***REMOVED*** + '\n     &'***REMOVED***
                    l = l[66:***REMOVED***
                lines.append(l + '\n'***REMOVED***
            else:
                lines.append(l + '\n'***REMOVED***
        lines = ''.join(lines***REMOVED***.replace('\n     &\n', '\n'***REMOVED***
        f.write(lines***REMOVED***
        f.close(***REMOVED***
        outmess('\tFortran 77 wrappers are saved to "%s"\n' % (wn***REMOVED******REMOVED***
    if funcwrappers2:
        wn = os.path.join(
            options['buildpath'***REMOVED***, '%s-f2pywrappers2.f90' % (vrd['modulename'***REMOVED******REMOVED******REMOVED***
        ret['fsrc'***REMOVED*** = wn
        f = open(wn, 'w'***REMOVED***
        f.write('!     -*- f90 -*-\n'***REMOVED***
        f.write(
            '!     This file is autogenerated with f2py (version:%s***REMOVED***\n' % (f2py_version***REMOVED******REMOVED***
        f.write(
            '!     It contains Fortran 90 wrappers to fortran functions.\n'***REMOVED***
        lines = [***REMOVED***
        for l in ('\n\n'.join(funcwrappers2***REMOVED*** + '\n'***REMOVED***.split('\n'***REMOVED***:
            if len(l***REMOVED*** > 72 and l[0***REMOVED*** == ' ':
                lines.append(l[:72***REMOVED*** + '&\n     &'***REMOVED***
                l = l[72:***REMOVED***
                while len(l***REMOVED*** > 66:
                    lines.append(l[:66***REMOVED*** + '&\n     &'***REMOVED***
                    l = l[66:***REMOVED***
                lines.append(l + '\n'***REMOVED***
            else:
                lines.append(l + '\n'***REMOVED***
        lines = ''.join(lines***REMOVED***.replace('\n     &\n', '\n'***REMOVED***
        f.write(lines***REMOVED***
        f.close(***REMOVED***
        outmess('\tFortran 90 wrappers are saved to "%s"\n' % (wn***REMOVED******REMOVED***
    return ret

################## Build C/API function #############

stnd = {1: 'st', 2: 'nd', 3: 'rd', 4: 'th', 5: 'th',
        6: 'th', 7: 'th', 8: 'th', 9: 'th', 0: 'th'***REMOVED***


def buildapi(rout***REMOVED***:
    rout, wrap = func2subr.assubr(rout***REMOVED***
    args, depargs = getargs2(rout***REMOVED***
    capi_maps.depargs = depargs
    var = rout['vars'***REMOVED***

    if ismoduleroutine(rout***REMOVED***:
        outmess('\t\t\tConstructing wrapper function "%s.%s"...\n' %
                (rout['modulename'***REMOVED***, rout['name'***REMOVED******REMOVED******REMOVED***
    else:
        outmess('\t\tConstructing wrapper function "%s"...\n' % (rout['name'***REMOVED******REMOVED******REMOVED***
    # Routine
    vrd = capi_maps.routsign2map(rout***REMOVED***
    rd = dictappend({***REMOVED***, vrd***REMOVED***
    for r in rout_rules:
        if ('_check' in r and r['_check'***REMOVED***(rout***REMOVED******REMOVED*** or ('_check' not in r***REMOVED***:
            ar = applyrules(r, vrd, rout***REMOVED***
            rd = dictappend(rd, ar***REMOVED***

    # Args
    nth, nthk = 0, 0
    savevrd = {***REMOVED***
    for a in args:
        vrd = capi_maps.sign2map(a, var[a***REMOVED******REMOVED***
        if isintent_aux(var[a***REMOVED******REMOVED***:
            _rules = aux_rules
        else:
            _rules = arg_rules
            if not isintent_hide(var[a***REMOVED******REMOVED***:
                if not isoptional(var[a***REMOVED******REMOVED***:
                    nth = nth + 1
                    vrd['nth'***REMOVED*** = repr(nth***REMOVED*** + stnd[nth % 10***REMOVED*** + ' argument'
                else:
                    nthk = nthk + 1
                    vrd['nth'***REMOVED*** = repr(nthk***REMOVED*** + stnd[nthk % 10***REMOVED*** + ' keyword'
            else:
                vrd['nth'***REMOVED*** = 'hidden'
        savevrd[a***REMOVED*** = vrd
        for r in _rules:
            if '_depend' in r:
                continue
            if ('_check' in r and r['_check'***REMOVED***(var[a***REMOVED******REMOVED******REMOVED*** or ('_check' not in r***REMOVED***:
                ar = applyrules(r, vrd, var[a***REMOVED******REMOVED***
                rd = dictappend(rd, ar***REMOVED***
                if '_break' in r:
                    break
    for a in depargs:
        if isintent_aux(var[a***REMOVED******REMOVED***:
            _rules = aux_rules
        else:
            _rules = arg_rules
        vrd = savevrd[a***REMOVED***
        for r in _rules:
            if '_depend' not in r:
                continue
            if ('_check' in r and r['_check'***REMOVED***(var[a***REMOVED******REMOVED******REMOVED*** or ('_check' not in r***REMOVED***:
                ar = applyrules(r, vrd, var[a***REMOVED******REMOVED***
                rd = dictappend(rd, ar***REMOVED***
                if '_break' in r:
                    break
        if 'check' in var[a***REMOVED***:
            for c in var[a***REMOVED***['check'***REMOVED***:
                vrd['check'***REMOVED*** = c
                ar = applyrules(check_rules, vrd, var[a***REMOVED******REMOVED***
                rd = dictappend(rd, ar***REMOVED***
    if isinstance(rd['cleanupfrompyobj'***REMOVED***, list***REMOVED***:
        rd['cleanupfrompyobj'***REMOVED***.reverse(***REMOVED***
    if isinstance(rd['closepyobjfrom'***REMOVED***, list***REMOVED***:
        rd['closepyobjfrom'***REMOVED***.reverse(***REMOVED***
    rd['docsignature'***REMOVED*** = stripcomma(replace('#docsign##docsignopt##docsignxa#',
                                        ***REMOVED***'docsign': rd['docsign'***REMOVED***,
                                             'docsignopt': rd['docsignopt'***REMOVED***,
                                             'docsignxa': rd['docsignxa'***REMOVED******REMOVED******REMOVED******REMOVED***
    optargs = stripcomma(replace('#docsignopt##docsignxa#',
                             ***REMOVED***'docsignxa': rd['docsignxashort'***REMOVED***,
                                  'docsignopt': rd['docsignoptshort'***REMOVED******REMOVED***
                                 ***REMOVED******REMOVED***
    if optargs == '':
        rd['docsignatureshort'***REMOVED*** = stripcomma(
            replace('#docsign#', {'docsign': rd['docsign'***REMOVED******REMOVED******REMOVED******REMOVED***
    else:
        rd['docsignatureshort'***REMOVED*** = replace('#docsign#[#docsignopt#***REMOVED***',
                                      ***REMOVED***'docsign': rd['docsign'***REMOVED***,
                                           'docsignopt': optargs,
                                       ***REMOVED******REMOVED***
    rd['latexdocsignatureshort'***REMOVED*** = rd['docsignatureshort'***REMOVED***.replace('_', '\\_'***REMOVED***
    rd['latexdocsignatureshort'***REMOVED*** = rd[
        'latexdocsignatureshort'***REMOVED***.replace(',', ', '***REMOVED***
    cfs = stripcomma(replace('#callfortran##callfortranappend#', {
                     'callfortran': rd['callfortran'***REMOVED***, 'callfortranappend': rd['callfortranappend'***REMOVED******REMOVED******REMOVED******REMOVED***
    if len(rd['callfortranappend'***REMOVED******REMOVED*** > 1:
        rd['callcompaqfortran'***REMOVED*** = stripcomma(replace('#callfortran# 0,#callfortranappend#', {
                                             'callfortran': rd['callfortran'***REMOVED***, 'callfortranappend': rd['callfortranappend'***REMOVED******REMOVED******REMOVED******REMOVED***
    else:
        rd['callcompaqfortran'***REMOVED*** = cfs
    rd['callfortran'***REMOVED*** = cfs
    if isinstance(rd['docreturn'***REMOVED***, list***REMOVED***:
        rd['docreturn'***REMOVED*** = stripcomma(
            replace('#docreturn#', {'docreturn': rd['docreturn'***REMOVED******REMOVED******REMOVED******REMOVED*** + ' = '
    rd['docstrsigns'***REMOVED*** = [***REMOVED***
    rd['latexdocstrsigns'***REMOVED*** = [***REMOVED***
    for k in ['docstrreq', 'docstropt', 'docstrout', 'docstrcbs'***REMOVED***:
        if k in rd and isinstance(rd[k***REMOVED***, list***REMOVED***:
            rd['docstrsigns'***REMOVED*** = rd['docstrsigns'***REMOVED*** + rd[k***REMOVED***
        k = 'latex' + k
        if k in rd and isinstance(rd[k***REMOVED***, list***REMOVED***:
            rd['latexdocstrsigns'***REMOVED*** = rd['latexdocstrsigns'***REMOVED*** + rd[k***REMOVED***[0:1***REMOVED*** +\
                ['\\begin{description***REMOVED***'***REMOVED*** + rd[k***REMOVED***[1:***REMOVED*** +\
                ['\\end{description***REMOVED***'***REMOVED***

    # Workaround for Python 2.6, 2.6.1 bug: http://bugs.python.org/issue4720
    if rd['keyformat'***REMOVED*** or rd['xaformat'***REMOVED***:
        argformat = rd['argformat'***REMOVED***
        if isinstance(argformat, list***REMOVED***:
            argformat.append('|'***REMOVED***
        else:
            assert isinstance(argformat, str***REMOVED***, repr(
                (argformat, type(argformat***REMOVED******REMOVED******REMOVED***
            rd['argformat'***REMOVED*** += '|'

    ar = applyrules(routine_rules, rd***REMOVED***
    if ismoduleroutine(rout***REMOVED***:
        outmess('\t\t\t  %s\n' % (ar['docshort'***REMOVED******REMOVED******REMOVED***
    else:
        outmess('\t\t  %s\n' % (ar['docshort'***REMOVED******REMOVED******REMOVED***
    return ar, wrap


#################### EOF rules.py #######################
