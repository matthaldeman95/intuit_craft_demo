#!/usr/bin/env python
***REMOVED***

Build F90 module support for f2py2e.

Copyright 2000 Pearu Peterson all rights reserved,
Pearu Peterson <pearu@ioc.ee>
Permission to use, modify, and distribute this software is given under the
terms of the NumPy License.

NO WARRANTY IS EXPRESSED OR IMPLIED.  USE AT YOUR OWN RISK.
$Date: 2005/02/03 19:30:23 $
Pearu Peterson

***REMOVED***
from __future__ import division, absolute_import, print_function

__version__ = "$Revision: 1.27 $"[10:-1***REMOVED***

f2py_version = 'See `f2py -v`'

import numpy as np

from . import capi_maps
from . import func2subr
from .crackfortran import undo_rmbadname, undo_rmbadname1

# The eviroment provided by auxfuncs.py is needed for some calls to eval.
# As the needed functions cannot be determined by static inspection of the
# code, it is safest to use import * pending a major refactoring of f2py.
from .auxfuncs import *

options = {***REMOVED***


def findf90modules(m***REMOVED***:
    if ismodule(m***REMOVED***:
        return [m***REMOVED***
    if not hasbody(m***REMOVED***:
        return [***REMOVED***
    ret = [***REMOVED***
    for b in m['body'***REMOVED***:
        if ismodule(b***REMOVED***:
            ret.append(b***REMOVED***
        else:
            ret = ret + findf90modules(b***REMOVED***
    return ret

fgetdims1 = ***REMOVED***\
      external f2pysetdata
      logical ns
      integer r,i
      integer(%d***REMOVED*** s(****REMOVED***
      ns = .FALSE.
      if (allocated(d***REMOVED******REMOVED*** then
         do i=1,r
            if ((size(d,i***REMOVED***.ne.s(i***REMOVED******REMOVED***.and.(s(i***REMOVED***.ge.0***REMOVED******REMOVED*** then
               ns = .TRUE.
            end if
         end do
         if (ns***REMOVED*** then
            deallocate(d***REMOVED***
         end if
      end if
      if ((.not.allocated(d***REMOVED******REMOVED***.and.(s(1***REMOVED***.ge.1***REMOVED******REMOVED*** then***REMOVED*** % np.intp(***REMOVED***.itemsize

fgetdims2 = ***REMOVED***\
      end if
      if (allocated(d***REMOVED******REMOVED*** then
         do i=1,r
            s(i***REMOVED*** = size(d,i***REMOVED***
         end do
      end if
      flag = 1
      call f2pysetdata(d,allocated(d***REMOVED******REMOVED******REMOVED***

fgetdims2_sa = ***REMOVED***\
      end if
      if (allocated(d***REMOVED******REMOVED*** then
         do i=1,r
            s(i***REMOVED*** = size(d,i***REMOVED***
         end do
         !s(r***REMOVED*** must be equal to len(d(1***REMOVED******REMOVED***
      end if
      flag = 2
      call f2pysetdata(d,allocated(d***REMOVED******REMOVED******REMOVED***


def buildhooks(pymod***REMOVED***:
    global fgetdims1, fgetdims2
    from . import rules
    ret = {'f90modhooks': [***REMOVED***, 'initf90modhooks': [***REMOVED***, 'body': [***REMOVED***,
           'need': ['F_FUNC', 'arrayobject.h'***REMOVED***,
           'separatorsfor': {'includes0': '\n', 'includes': '\n'***REMOVED***,
           'docs': ['"Fortran 90/95 modules:\\n"'***REMOVED***,
           'latexdoc': [***REMOVED******REMOVED***
    fhooks = [''***REMOVED***

    def fadd(line, s=fhooks***REMOVED***:
        s[0***REMOVED*** = '%s\n      %s' % (s[0***REMOVED***, line***REMOVED***
    doc = [''***REMOVED***

    def dadd(line, s=doc***REMOVED***:
        s[0***REMOVED*** = '%s\n%s' % (s[0***REMOVED***, line***REMOVED***
    for m in findf90modules(pymod***REMOVED***:
        sargs, fargs, efargs, modobjs, notvars, onlyvars = [***REMOVED***, [***REMOVED***, [***REMOVED***, [***REMOVED***, [
            m['name'***REMOVED******REMOVED***, [***REMOVED***
        sargsp = [***REMOVED***
        ifargs = [***REMOVED***
        mfargs = [***REMOVED***
        if hasbody(m***REMOVED***:
            for b in m['body'***REMOVED***:
                notvars.append(b['name'***REMOVED******REMOVED***
        for n in m['vars'***REMOVED***.keys(***REMOVED***:
            var = m['vars'***REMOVED***[n***REMOVED***
            if (n not in notvars***REMOVED*** and (not l_or(isintent_hide, isprivate***REMOVED***(var***REMOVED******REMOVED***:
                onlyvars.append(n***REMOVED***
                mfargs.append(n***REMOVED***
        outmess('\t\tConstructing F90 module support for "%s"...\n' %
                (m['name'***REMOVED******REMOVED******REMOVED***
        if onlyvars:
            outmess('\t\t  Variables: %s\n' % (' '.join(onlyvars***REMOVED******REMOVED******REMOVED***
        chooks = [''***REMOVED***

        def cadd(line, s=chooks***REMOVED***:
            s[0***REMOVED*** = '%s\n%s' % (s[0***REMOVED***, line***REMOVED***
        ihooks = [''***REMOVED***

        def iadd(line, s=ihooks***REMOVED***:
            s[0***REMOVED*** = '%s\n%s' % (s[0***REMOVED***, line***REMOVED***

        vrd = capi_maps.modsign2map(m***REMOVED***
        cadd('static FortranDataDef f2py_%s_def[***REMOVED*** = {' % (m['name'***REMOVED******REMOVED******REMOVED***
        dadd('\\subsection{Fortran 90/95 module \\texttt{%s***REMOVED******REMOVED***\n' % (m['name'***REMOVED******REMOVED******REMOVED***
        if hasnote(m***REMOVED***:
            note = m['note'***REMOVED***
            if isinstance(note, list***REMOVED***:
                note = '\n'.join(note***REMOVED***
            dadd(note***REMOVED***
        if onlyvars:
            dadd('\\begin{description***REMOVED***'***REMOVED***
        for n in onlyvars:
            var = m['vars'***REMOVED***[n***REMOVED***
            modobjs.append(n***REMOVED***
            ct = capi_maps.getctype(var***REMOVED***
            at = capi_maps.c2capi_map[ct***REMOVED***
            dm = capi_maps.getarrdims(n, var***REMOVED***
            dms = dm['dims'***REMOVED***.replace('*', '-1'***REMOVED***.strip(***REMOVED***
            dms = dms.replace(':', '-1'***REMOVED***.strip(***REMOVED***
            if not dms:
                dms = '-1'
            use_fgetdims2 = fgetdims2
            if isstringarray(var***REMOVED***:
                if 'charselector' in var and 'len' in var['charselector'***REMOVED***:
                    cadd('\t{"%s",%s,{{%s,%s***REMOVED******REMOVED***,%s***REMOVED***,'
                         % (undo_rmbadname1(n***REMOVED***, dm['rank'***REMOVED***, dms, var['charselector'***REMOVED***['len'***REMOVED***, at***REMOVED******REMOVED***
                    use_fgetdims2 = fgetdims2_sa
                else:
                    cadd('\t{"%s",%s,{{%s***REMOVED******REMOVED***,%s***REMOVED***,' %
                         (undo_rmbadname1(n***REMOVED***, dm['rank'***REMOVED***, dms, at***REMOVED******REMOVED***
            else:
                cadd('\t{"%s",%s,{{%s***REMOVED******REMOVED***,%s***REMOVED***,' %
                     (undo_rmbadname1(n***REMOVED***, dm['rank'***REMOVED***, dms, at***REMOVED******REMOVED***
            dadd('\\item[***REMOVED***{{***REMOVED***\\verb@%s@{***REMOVED******REMOVED***' %
                 (capi_maps.getarrdocsign(n, var***REMOVED******REMOVED******REMOVED***
            if hasnote(var***REMOVED***:
                note = var['note'***REMOVED***
                if isinstance(note, list***REMOVED***:
                    note = '\n'.join(note***REMOVED***
                dadd('--- %s' % (note***REMOVED******REMOVED***
            if isallocatable(var***REMOVED***:
                fargs.append('f2py_%s_getdims_%s' % (m['name'***REMOVED***, n***REMOVED******REMOVED***
                efargs.append(fargs[-1***REMOVED******REMOVED***
                sargs.append(
                    'void (*%s***REMOVED***(int*,int*,void(****REMOVED***(char*,int****REMOVED***,int****REMOVED***' % (n***REMOVED******REMOVED***
                sargsp.append('void (****REMOVED***(int*,int*,void(****REMOVED***(char*,int****REMOVED***,int****REMOVED***'***REMOVED***
                iadd('\tf2py_%s_def[i_f2py++***REMOVED***.func = %s;' % (m['name'***REMOVED***, n***REMOVED******REMOVED***
                fadd('subroutine %s(r,s,f2pysetdata,flag***REMOVED***' % (fargs[-1***REMOVED******REMOVED******REMOVED***
                fadd('use %s, only: d => %s\n' %
                     (m['name'***REMOVED***, undo_rmbadname1(n***REMOVED******REMOVED******REMOVED***
                fadd('integer flag\n'***REMOVED***
                fhooks[0***REMOVED*** = fhooks[0***REMOVED*** + fgetdims1
                dms = eval('range(1,%s+1***REMOVED***' % (dm['rank'***REMOVED******REMOVED******REMOVED***
                fadd(' allocate(d(%s***REMOVED******REMOVED***\n' %
                     (','.join(['s(%s***REMOVED***' % i for i in dms***REMOVED******REMOVED******REMOVED******REMOVED***
                fhooks[0***REMOVED*** = fhooks[0***REMOVED*** + use_fgetdims2
                fadd('end subroutine %s' % (fargs[-1***REMOVED******REMOVED******REMOVED***
            else:
                fargs.append(n***REMOVED***
                sargs.append('char *%s' % (n***REMOVED******REMOVED***
                sargsp.append('char*'***REMOVED***
                iadd('\tf2py_%s_def[i_f2py++***REMOVED***.data = %s;' % (m['name'***REMOVED***, n***REMOVED******REMOVED***
        if onlyvars:
            dadd('\\end{description***REMOVED***'***REMOVED***
        if hasbody(m***REMOVED***:
            for b in m['body'***REMOVED***:
                if not isroutine(b***REMOVED***:
                    print('Skipping', b['block'***REMOVED***, b['name'***REMOVED******REMOVED***
                    continue
                modobjs.append('%s(***REMOVED***' % (b['name'***REMOVED******REMOVED******REMOVED***
                b['modulename'***REMOVED*** = m['name'***REMOVED***
                api, wrap = rules.buildapi(b***REMOVED***
                if isfunction(b***REMOVED***:
                    fhooks[0***REMOVED*** = fhooks[0***REMOVED*** + wrap
                    fargs.append('f2pywrap_%s_%s' % (m['name'***REMOVED***, b['name'***REMOVED******REMOVED******REMOVED***
                    ifargs.append(func2subr.createfuncwrapper(b, signature=1***REMOVED******REMOVED***
                else:
                    if wrap:
                        fhooks[0***REMOVED*** = fhooks[0***REMOVED*** + wrap
                        fargs.append('f2pywrap_%s_%s' % (m['name'***REMOVED***, b['name'***REMOVED******REMOVED******REMOVED***
                        ifargs.append(
                            func2subr.createsubrwrapper(b, signature=1***REMOVED******REMOVED***
                    else:
                        fargs.append(b['name'***REMOVED******REMOVED***
                        mfargs.append(fargs[-1***REMOVED******REMOVED***
                api['externroutines'***REMOVED*** = [***REMOVED***
                ar = applyrules(api, vrd***REMOVED***
                ar['docs'***REMOVED*** = [***REMOVED***
                ar['docshort'***REMOVED*** = [***REMOVED***
                ret = dictappend(ret, ar***REMOVED***
                cadd('\t{"%s",-1,{{-1***REMOVED******REMOVED***,0,NULL,(void ****REMOVED***f2py_rout_#modulename#_%s_%s,doc_f2py_rout_#modulename#_%s_%s***REMOVED***,' %
                     (b['name'***REMOVED***, m['name'***REMOVED***, b['name'***REMOVED***, m['name'***REMOVED***, b['name'***REMOVED******REMOVED******REMOVED***
                sargs.append('char *%s' % (b['name'***REMOVED******REMOVED******REMOVED***
                sargsp.append('char *'***REMOVED***
                iadd('\tf2py_%s_def[i_f2py++***REMOVED***.data = %s;' %
                     (m['name'***REMOVED***, b['name'***REMOVED******REMOVED******REMOVED***
        cadd('\t{NULL***REMOVED***\n***REMOVED***;\n'***REMOVED***
        iadd('***REMOVED***'***REMOVED***
        ihooks[0***REMOVED*** = 'static void f2py_setup_%s(%s***REMOVED*** {\n\tint i_f2py=0;%s' % (
            m['name'***REMOVED***, ','.join(sargs***REMOVED***, ihooks[0***REMOVED******REMOVED***
        if '_' in m['name'***REMOVED***:
            F_FUNC = 'F_FUNC_US'
        else:
            F_FUNC = 'F_FUNC'
        iadd('extern void %s(f2pyinit%s,F2PYINIT%s***REMOVED***(void (****REMOVED***(%s***REMOVED******REMOVED***;'
             % (F_FUNC, m['name'***REMOVED***, m['name'***REMOVED***.upper(***REMOVED***, ','.join(sargsp***REMOVED******REMOVED******REMOVED***
        iadd('static void f2py_init_%s(void***REMOVED*** {' % (m['name'***REMOVED******REMOVED******REMOVED***
        iadd('\t%s(f2pyinit%s,F2PYINIT%s***REMOVED***(f2py_setup_%s***REMOVED***;'
             % (F_FUNC, m['name'***REMOVED***, m['name'***REMOVED***.upper(***REMOVED***, m['name'***REMOVED******REMOVED******REMOVED***
        iadd('***REMOVED***\n'***REMOVED***
        ret['f90modhooks'***REMOVED*** = ret['f90modhooks'***REMOVED*** + chooks + ihooks
        ret['initf90modhooks'***REMOVED*** = ['\tPyDict_SetItemString(d, "%s", PyFortranObject_New(f2py_%s_def,f2py_init_%s***REMOVED******REMOVED***;' % (
            m['name'***REMOVED***, m['name'***REMOVED***, m['name'***REMOVED******REMOVED******REMOVED*** + ret['initf90modhooks'***REMOVED***
        fadd(''***REMOVED***
        fadd('subroutine f2pyinit%s(f2pysetupfunc***REMOVED***' % (m['name'***REMOVED******REMOVED******REMOVED***
        if mfargs:
            for a in undo_rmbadname(mfargs***REMOVED***:
                fadd('use %s, only : %s' % (m['name'***REMOVED***, a***REMOVED******REMOVED***
        if ifargs:
            fadd(' '.join(['interface'***REMOVED*** + ifargs***REMOVED******REMOVED***
            fadd('end interface'***REMOVED***
        fadd('external f2pysetupfunc'***REMOVED***
        if efargs:
            for a in undo_rmbadname(efargs***REMOVED***:
                fadd('external %s' % (a***REMOVED******REMOVED***
        fadd('call f2pysetupfunc(%s***REMOVED***' % (','.join(undo_rmbadname(fargs***REMOVED******REMOVED******REMOVED******REMOVED***
        fadd('end subroutine f2pyinit%s\n' % (m['name'***REMOVED******REMOVED******REMOVED***

        dadd('\n'.join(ret['latexdoc'***REMOVED******REMOVED***.replace(
            r'\subsection{', r'\subsubsection{'***REMOVED******REMOVED***

        ret['latexdoc'***REMOVED*** = [***REMOVED***
        ret['docs'***REMOVED***.append('"\t%s --- %s"' % (m['name'***REMOVED***,
                                              ','.join(undo_rmbadname(modobjs***REMOVED******REMOVED******REMOVED******REMOVED***

    ret['routine_defs'***REMOVED*** = ''
    ret['doc'***REMOVED*** = [***REMOVED***
    ret['docshort'***REMOVED*** = [***REMOVED***
    ret['latexdoc'***REMOVED*** = doc[0***REMOVED***
    if len(ret['docs'***REMOVED******REMOVED*** <= 1:
        ret['docs'***REMOVED*** = ''
    return ret, fhooks[0***REMOVED***
