#!/usr/bin/env python
***REMOVED***

Build 'use others module data' mechanism for f2py2e.

Unfinished.

Copyright 2000 Pearu Peterson all rights reserved,
Pearu Peterson <pearu@ioc.ee>
Permission to use, modify, and distribute this software is given under the
terms of the NumPy License.

NO WARRANTY IS EXPRESSED OR IMPLIED.  USE AT YOUR OWN RISK.
$Date: 2000/09/10 12:35:43 $
Pearu Peterson

***REMOVED***
from __future__ import division, absolute_import, print_function

__version__ = "$Revision: 1.3 $"[10:-1***REMOVED***

f2py_version = 'See `f2py -v`'


from .auxfuncs import (
    applyrules, dictappend, gentitle, hasnote, outmess
***REMOVED***


usemodule_rules = {
    'body': ***REMOVED***
#begintitle#
static char doc_#apiname#[***REMOVED*** = \"\\\nVariable wrapper signature:\\n\\
\t #name# = get_#name#(***REMOVED***\\n\\
Arguments:\\n\\
#docstr#\";
extern F_MODFUNC(#usemodulename#,#USEMODULENAME#,#realname#,#REALNAME#***REMOVED***;
static PyObject *#apiname#(PyObject *capi_self, PyObject *capi_args***REMOVED*** {
/*#decl#*/
\tif (!PyArg_ParseTuple(capi_args, \"\"***REMOVED******REMOVED*** goto capi_fail;
printf(\"c: %d\\n\",F_MODFUNC(#usemodulename#,#USEMODULENAME#,#realname#,#REALNAME#***REMOVED******REMOVED***;
\treturn Py_BuildValue(\"\"***REMOVED***;
capi_fail:
\treturn NULL;
***REMOVED***
***REMOVED***,
    'method': '\t{\"get_#name#\",#apiname#,METH_VARARGS|METH_KEYWORDS,doc_#apiname#***REMOVED***,',
    'need': ['F_MODFUNC'***REMOVED***
***REMOVED***

################


def buildusevars(m, r***REMOVED***:
    ret = {***REMOVED***
    outmess(
        '\t\tBuilding use variable hooks for module "%s" (feature only for F90/F95***REMOVED***...\n' % (m['name'***REMOVED******REMOVED******REMOVED***
    varsmap = {***REMOVED***
    revmap = {***REMOVED***
    if 'map' in r:
        for k in r['map'***REMOVED***.keys(***REMOVED***:
            if r['map'***REMOVED***[k***REMOVED*** in revmap:
                outmess('\t\t\tVariable "%s<=%s" is already mapped by "%s". Skipping.\n' % (
                    r['map'***REMOVED***[k***REMOVED***, k, revmap[r['map'***REMOVED***[k***REMOVED******REMOVED******REMOVED******REMOVED***
            else:
                revmap[r['map'***REMOVED***[k***REMOVED******REMOVED*** = k
    if 'only' in r and r['only'***REMOVED***:
        for v in r['map'***REMOVED***.keys(***REMOVED***:
            if r['map'***REMOVED***[v***REMOVED*** in m['vars'***REMOVED***:

                if revmap[r['map'***REMOVED***[v***REMOVED******REMOVED*** == v:
                    varsmap[v***REMOVED*** = r['map'***REMOVED***[v***REMOVED***
                else:
                    outmess('\t\t\tIgnoring map "%s=>%s". See above.\n' %
                            (v, r['map'***REMOVED***[v***REMOVED******REMOVED******REMOVED***
            else:
                outmess(
                    '\t\t\tNo definition for variable "%s=>%s". Skipping.\n' % (v, r['map'***REMOVED***[v***REMOVED******REMOVED******REMOVED***
    else:
        for v in m['vars'***REMOVED***.keys(***REMOVED***:
            if v in revmap:
                varsmap[v***REMOVED*** = revmap[v***REMOVED***
            else:
                varsmap[v***REMOVED*** = v
    for v in varsmap.keys(***REMOVED***:
        ret = dictappend(ret, buildusevar(v, varsmap[v***REMOVED***, m['vars'***REMOVED***, m['name'***REMOVED******REMOVED******REMOVED***
    return ret


def buildusevar(name, realname, vars, usemodulename***REMOVED***:
    outmess('\t\t\tConstructing wrapper function for variable "%s=>%s"...\n' % (
        name, realname***REMOVED******REMOVED***
    ret = {***REMOVED***
    vrd = {'name': name,
           'realname': realname,
           'REALNAME': realname.upper(***REMOVED***,
           'usemodulename': usemodulename,
           'USEMODULENAME': usemodulename.upper(***REMOVED***,
           'texname': name.replace('_', '\\_'***REMOVED***,
           'begintitle': gentitle('%s=>%s' % (name, realname***REMOVED******REMOVED***,
           'endtitle': gentitle('end of %s=>%s' % (name, realname***REMOVED******REMOVED***,
           'apiname': '#modulename#_use_%s_from_%s' % (realname, usemodulename***REMOVED***
       ***REMOVED***
    nummap = {0: 'Ro', 1: 'Ri', 2: 'Rii', 3: 'Riii', 4: 'Riv',
              5: 'Rv', 6: 'Rvi', 7: 'Rvii', 8: 'Rviii', 9: 'Rix'***REMOVED***
    vrd['texnamename'***REMOVED*** = name
    for i in nummap.keys(***REMOVED***:
        vrd['texnamename'***REMOVED*** = vrd['texnamename'***REMOVED***.replace(repr(i***REMOVED***, nummap[i***REMOVED******REMOVED***
    if hasnote(vars[realname***REMOVED******REMOVED***:
        vrd['note'***REMOVED*** = vars[realname***REMOVED***['note'***REMOVED***
    rd = dictappend({***REMOVED***, vrd***REMOVED***

    print(name, realname, vars[realname***REMOVED******REMOVED***
    ret = applyrules(usemodule_rules, rd***REMOVED***
    return ret
