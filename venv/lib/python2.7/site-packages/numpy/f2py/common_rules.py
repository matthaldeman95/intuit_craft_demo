#!/usr/bin/env python
***REMOVED***

Build common block mechanism for f2py2e.

Copyright 2000 Pearu Peterson all rights reserved,
Pearu Peterson <pearu@ioc.ee>
Permission to use, modify, and distribute this software is given under the
terms of the NumPy License

NO WARRANTY IS EXPRESSED OR IMPLIED.  USE AT YOUR OWN RISK.
$Date: 2005/05/06 10:57:33 $
Pearu Peterson

***REMOVED***
from __future__ import division, absolute_import, print_function

__version__ = "$Revision: 1.19 $"[10:-1***REMOVED***

from . import __version__
f2py_version = __version__.version

from .auxfuncs import (
    hasbody, hascommon, hasnote, isintent_hide, outmess
***REMOVED***
from . import capi_maps
from . import func2subr
from .crackfortran import rmbadname


def findcommonblocks(block, top=1***REMOVED***:
    ret = [***REMOVED***
    if hascommon(block***REMOVED***:
        for n in block['common'***REMOVED***.keys(***REMOVED***:
            vars = {***REMOVED***
            for v in block['common'***REMOVED***[n***REMOVED***:
                vars[v***REMOVED*** = block['vars'***REMOVED***[v***REMOVED***
            ret.append((n, block['common'***REMOVED***[n***REMOVED***, vars***REMOVED******REMOVED***
    elif hasbody(block***REMOVED***:
        for b in block['body'***REMOVED***:
            ret = ret + findcommonblocks(b, 0***REMOVED***
    if top:
        tret = [***REMOVED***
        names = [***REMOVED***
        for t in ret:
            if t[0***REMOVED*** not in names:
                names.append(t[0***REMOVED******REMOVED***
                tret.append(t***REMOVED***
        return tret
    return ret


def buildhooks(m***REMOVED***:
    ret = {'commonhooks': [***REMOVED***, 'initcommonhooks': [***REMOVED***,
           'docs': ['"COMMON blocks:\\n"'***REMOVED******REMOVED***
    fwrap = [''***REMOVED***

    def fadd(line, s=fwrap***REMOVED***:
        s[0***REMOVED*** = '%s\n      %s' % (s[0***REMOVED***, line***REMOVED***
    chooks = [''***REMOVED***

    def cadd(line, s=chooks***REMOVED***:
        s[0***REMOVED*** = '%s\n%s' % (s[0***REMOVED***, line***REMOVED***
    ihooks = [''***REMOVED***

    def iadd(line, s=ihooks***REMOVED***:
        s[0***REMOVED*** = '%s\n%s' % (s[0***REMOVED***, line***REMOVED***
    doc = [''***REMOVED***

    def dadd(line, s=doc***REMOVED***:
        s[0***REMOVED*** = '%s\n%s' % (s[0***REMOVED***, line***REMOVED***
    for (name, vnames, vars***REMOVED*** in findcommonblocks(m***REMOVED***:
        lower_name = name.lower(***REMOVED***
        hnames, inames = [***REMOVED***, [***REMOVED***
        for n in vnames:
            if isintent_hide(vars[n***REMOVED******REMOVED***:
                hnames.append(n***REMOVED***
            else:
                inames.append(n***REMOVED***
        if hnames:
            outmess('\t\tConstructing COMMON block support for "%s"...\n\t\t  %s\n\t\t  Hidden: %s\n' % (
                name, ','.join(inames***REMOVED***, ','.join(hnames***REMOVED******REMOVED******REMOVED***
        else:
            outmess('\t\tConstructing COMMON block support for "%s"...\n\t\t  %s\n' % (
                name, ','.join(inames***REMOVED******REMOVED******REMOVED***
        fadd('subroutine f2pyinit%s(setupfunc***REMOVED***' % name***REMOVED***
        fadd('external setupfunc'***REMOVED***
        for n in vnames:
            fadd(func2subr.var2fixfortran(vars, n***REMOVED******REMOVED***
        if name == '_BLNK_':
            fadd('common %s' % (','.join(vnames***REMOVED******REMOVED******REMOVED***
        else:
            fadd('common /%s/ %s' % (name, ','.join(vnames***REMOVED******REMOVED******REMOVED***
        fadd('call setupfunc(%s***REMOVED***' % (','.join(inames***REMOVED******REMOVED******REMOVED***
        fadd('end\n'***REMOVED***
        cadd('static FortranDataDef f2py_%s_def[***REMOVED*** = {' % (name***REMOVED******REMOVED***
        idims = [***REMOVED***
        for n in inames:
            ct = capi_maps.getctype(vars[n***REMOVED******REMOVED***
            at = capi_maps.c2capi_map[ct***REMOVED***
            dm = capi_maps.getarrdims(n, vars[n***REMOVED******REMOVED***
            if dm['dims'***REMOVED***:
                idims.append('(%s***REMOVED***' % (dm['dims'***REMOVED******REMOVED******REMOVED***
            else:
                idims.append(''***REMOVED***
            dms = dm['dims'***REMOVED***.strip(***REMOVED***
            if not dms:
                dms = '-1'
            cadd('\t{\"%s\",%s,{{%s***REMOVED******REMOVED***,%s***REMOVED***,' % (n, dm['rank'***REMOVED***, dms, at***REMOVED******REMOVED***
        cadd('\t{NULL***REMOVED***\n***REMOVED***;'***REMOVED***
        inames1 = rmbadname(inames***REMOVED***
        inames1_tps = ','.join(['char *' + s for s in inames1***REMOVED******REMOVED***
        cadd('static void f2py_setup_%s(%s***REMOVED*** {' % (name, inames1_tps***REMOVED******REMOVED***
        cadd('\tint i_f2py=0;'***REMOVED***
        for n in inames1:
            cadd('\tf2py_%s_def[i_f2py++***REMOVED***.data = %s;' % (name, n***REMOVED******REMOVED***
        cadd('***REMOVED***'***REMOVED***
        if '_' in lower_name:
            F_FUNC = 'F_FUNC_US'
        else:
            F_FUNC = 'F_FUNC'
        cadd('extern void %s(f2pyinit%s,F2PYINIT%s***REMOVED***(void(****REMOVED***(%s***REMOVED******REMOVED***;'
             % (F_FUNC, lower_name, name.upper(***REMOVED***,
                ','.join(['char*'***REMOVED*** * len(inames1***REMOVED******REMOVED******REMOVED******REMOVED***
        cadd('static void f2py_init_%s(void***REMOVED*** {' % name***REMOVED***
        cadd('\t%s(f2pyinit%s,F2PYINIT%s***REMOVED***(f2py_setup_%s***REMOVED***;'
             % (F_FUNC, lower_name, name.upper(***REMOVED***, name***REMOVED******REMOVED***
        cadd('***REMOVED***\n'***REMOVED***
        iadd('\tF2PyDict_SetItemString(d, \"%s\", PyFortranObject_New(f2py_%s_def,f2py_init_%s***REMOVED******REMOVED***;' % (
            name, name, name***REMOVED******REMOVED***
        tname = name.replace('_', '\\_'***REMOVED***
        dadd('\\subsection{Common block \\texttt{%s***REMOVED******REMOVED***\n' % (tname***REMOVED******REMOVED***
        dadd('\\begin{description***REMOVED***'***REMOVED***
        for n in inames:
            dadd('\\item[***REMOVED***{{***REMOVED***\\verb@%s@{***REMOVED******REMOVED***' %
                 (capi_maps.getarrdocsign(n, vars[n***REMOVED******REMOVED******REMOVED******REMOVED***
            if hasnote(vars[n***REMOVED******REMOVED***:
                note = vars[n***REMOVED***['note'***REMOVED***
                if isinstance(note, list***REMOVED***:
                    note = '\n'.join(note***REMOVED***
                dadd('--- %s' % (note***REMOVED******REMOVED***
        dadd('\\end{description***REMOVED***'***REMOVED***
        ret['docs'***REMOVED***.append(
            '"\t/%s/ %s\\n"' % (name, ','.join(map(lambda v, d: v + d, inames, idims***REMOVED******REMOVED******REMOVED******REMOVED***
    ret['commonhooks'***REMOVED*** = chooks
    ret['initcommonhooks'***REMOVED*** = ihooks
    ret['latexdoc'***REMOVED*** = doc[0***REMOVED***
    if len(ret['docs'***REMOVED******REMOVED*** <= 1:
        ret['docs'***REMOVED*** = ''
    return ret, fwrap[0***REMOVED***
