#!/usr/bin/env python
***REMOVED***

C declarations, CPP macros, and C functions for f2py2e.
Only required declarations/macros/functions will be used.

Copyright 1999,2000 Pearu Peterson all rights reserved,
Pearu Peterson <pearu@ioc.ee>
Permission to use, modify, and distribute this software is given under the
terms of the NumPy License.

NO WARRANTY IS EXPRESSED OR IMPLIED.  USE AT YOUR OWN RISK.
$Date: 2005/05/06 11:42:34 $
Pearu Peterson

***REMOVED***
from __future__ import division, absolute_import, print_function

import sys
import copy

from . import __version__

f2py_version = __version__.version
errmess = sys.stderr.write

##################### Definitions ##################

outneeds = {'includes0': [***REMOVED***, 'includes': [***REMOVED***, 'typedefs': [***REMOVED***, 'typedefs_generated': [***REMOVED***,
            'userincludes': [***REMOVED***,
            'cppmacros': [***REMOVED***, 'cfuncs': [***REMOVED***, 'callbacks': [***REMOVED***, 'f90modhooks': [***REMOVED***,
            'commonhooks': [***REMOVED******REMOVED***
needs = {***REMOVED***
includes0 = {'includes0': '/*need_includes0*/'***REMOVED***
includes = {'includes': '/*need_includes*/'***REMOVED***
userincludes = {'userincludes': '/*need_userincludes*/'***REMOVED***
typedefs = {'typedefs': '/*need_typedefs*/'***REMOVED***
typedefs_generated = {'typedefs_generated': '/*need_typedefs_generated*/'***REMOVED***
cppmacros = {'cppmacros': '/*need_cppmacros*/'***REMOVED***
cfuncs = {'cfuncs': '/*need_cfuncs*/'***REMOVED***
callbacks = {'callbacks': '/*need_callbacks*/'***REMOVED***
f90modhooks = {'f90modhooks': '/*need_f90modhooks*/',
               'initf90modhooksstatic': '/*initf90modhooksstatic*/',
               'initf90modhooksdynamic': '/*initf90modhooksdynamic*/',
           ***REMOVED***
commonhooks = {'commonhooks': '/*need_commonhooks*/',
               'initcommonhooks': '/*need_initcommonhooks*/',
           ***REMOVED***

############ Includes ###################

includes0['math.h'***REMOVED*** = '#include <math.h>'
includes0['string.h'***REMOVED*** = '#include <string.h>'
includes0['setjmp.h'***REMOVED*** = '#include <setjmp.h>'

includes['Python.h'***REMOVED*** = '#include "Python.h"'
needs['arrayobject.h'***REMOVED*** = ['Python.h'***REMOVED***
includes['arrayobject.h'***REMOVED*** = '''#define PY_ARRAY_UNIQUE_SYMBOL PyArray_API
#include "arrayobject.h"'''

includes['arrayobject.h'***REMOVED*** = '#include "fortranobject.h"'
includes['stdarg.h'***REMOVED*** = '#include <stdarg.h>'

############# Type definitions ###############

typedefs['unsigned_char'***REMOVED*** = 'typedef unsigned char unsigned_char;'
typedefs['unsigned_short'***REMOVED*** = 'typedef unsigned short unsigned_short;'
typedefs['unsigned_long'***REMOVED*** = 'typedef unsigned long unsigned_long;'
typedefs['signed_char'***REMOVED*** = 'typedef signed char signed_char;'
typedefs['long_long'***REMOVED*** = ***REMOVED***\
#ifdef _WIN32
typedef __int64 long_long;
#else
typedef long long long_long;
typedef unsigned long long unsigned_long_long;
#endif
***REMOVED***
typedefs['unsigned_long_long'***REMOVED*** = ***REMOVED***\
#ifdef _WIN32
typedef __uint64 long_long;
#else
typedef unsigned long long unsigned_long_long;
#endif
***REMOVED***
typedefs['long_double'***REMOVED*** = ***REMOVED***\
#ifndef _LONG_DOUBLE
typedef long double long_double;
#endif
***REMOVED***
typedefs[
    'complex_long_double'***REMOVED*** = 'typedef struct {long double r,i;***REMOVED*** complex_long_double;'
typedefs['complex_float'***REMOVED*** = 'typedef struct {float r,i;***REMOVED*** complex_float;'
typedefs['complex_double'***REMOVED*** = 'typedef struct {double r,i;***REMOVED*** complex_double;'
typedefs['string'***REMOVED*** = ***REMOVED***typedef char * string;***REMOVED***


############### CPP macros ####################
cppmacros['CFUNCSMESS'***REMOVED*** = ***REMOVED***\
#ifdef DEBUGCFUNCS
#define CFUNCSMESS(mess***REMOVED*** fprintf(stderr,\"debug-capi:\"mess***REMOVED***;
#define CFUNCSMESSPY(mess,obj***REMOVED*** CFUNCSMESS(mess***REMOVED*** \\
\tPyObject_Print((PyObject ****REMOVED***obj,stderr,Py_PRINT_RAW***REMOVED***;\\
\tfprintf(stderr,\"\\n\"***REMOVED***;
#else
#define CFUNCSMESS(mess***REMOVED***
#define CFUNCSMESSPY(mess,obj***REMOVED***
#endif
***REMOVED***
cppmacros['F_FUNC'***REMOVED*** = ***REMOVED***\
#if defined(PREPEND_FORTRAN***REMOVED***
#if defined(NO_APPEND_FORTRAN***REMOVED***
#if defined(UPPERCASE_FORTRAN***REMOVED***
#define F_FUNC(f,F***REMOVED*** _##F
#else
#define F_FUNC(f,F***REMOVED*** _##f
#endif
#else
#if defined(UPPERCASE_FORTRAN***REMOVED***
#define F_FUNC(f,F***REMOVED*** _##F##_
#else
#define F_FUNC(f,F***REMOVED*** _##f##_
#endif
#endif
#else
#if defined(NO_APPEND_FORTRAN***REMOVED***
#if defined(UPPERCASE_FORTRAN***REMOVED***
#define F_FUNC(f,F***REMOVED*** F
#else
#define F_FUNC(f,F***REMOVED*** f
#endif
#else
#if defined(UPPERCASE_FORTRAN***REMOVED***
#define F_FUNC(f,F***REMOVED*** F##_
#else
#define F_FUNC(f,F***REMOVED*** f##_
#endif
#endif
#endif
#if defined(UNDERSCORE_G77***REMOVED***
#define F_FUNC_US(f,F***REMOVED*** F_FUNC(f##_,F##_***REMOVED***
#else
#define F_FUNC_US(f,F***REMOVED*** F_FUNC(f,F***REMOVED***
#endif
***REMOVED***
cppmacros['F_WRAPPEDFUNC'***REMOVED*** = ***REMOVED***\
#if defined(PREPEND_FORTRAN***REMOVED***
#if defined(NO_APPEND_FORTRAN***REMOVED***
#if defined(UPPERCASE_FORTRAN***REMOVED***
#define F_WRAPPEDFUNC(f,F***REMOVED*** _F2PYWRAP##F
#else
#define F_WRAPPEDFUNC(f,F***REMOVED*** _f2pywrap##f
#endif
#else
#if defined(UPPERCASE_FORTRAN***REMOVED***
#define F_WRAPPEDFUNC(f,F***REMOVED*** _F2PYWRAP##F##_
#else
#define F_WRAPPEDFUNC(f,F***REMOVED*** _f2pywrap##f##_
#endif
#endif
#else
#if defined(NO_APPEND_FORTRAN***REMOVED***
#if defined(UPPERCASE_FORTRAN***REMOVED***
#define F_WRAPPEDFUNC(f,F***REMOVED*** F2PYWRAP##F
#else
#define F_WRAPPEDFUNC(f,F***REMOVED*** f2pywrap##f
#endif
#else
#if defined(UPPERCASE_FORTRAN***REMOVED***
#define F_WRAPPEDFUNC(f,F***REMOVED*** F2PYWRAP##F##_
#else
#define F_WRAPPEDFUNC(f,F***REMOVED*** f2pywrap##f##_
#endif
#endif
#endif
#if defined(UNDERSCORE_G77***REMOVED***
#define F_WRAPPEDFUNC_US(f,F***REMOVED*** F_WRAPPEDFUNC(f##_,F##_***REMOVED***
#else
#define F_WRAPPEDFUNC_US(f,F***REMOVED*** F_WRAPPEDFUNC(f,F***REMOVED***
#endif
***REMOVED***
cppmacros['F_MODFUNC'***REMOVED*** = ***REMOVED***\
#if defined(F90MOD2CCONV1***REMOVED*** /*E.g. Compaq Fortran */
#if defined(NO_APPEND_FORTRAN***REMOVED***
#define F_MODFUNCNAME(m,f***REMOVED*** $ ## m ## $ ## f
#else
#define F_MODFUNCNAME(m,f***REMOVED*** $ ## m ## $ ## f ## _
#endif
#endif

#if defined(F90MOD2CCONV2***REMOVED*** /*E.g. IBM XL Fortran, not tested though */
#if defined(NO_APPEND_FORTRAN***REMOVED***
#define F_MODFUNCNAME(m,f***REMOVED***  __ ## m ## _MOD_ ## f
#else
#define F_MODFUNCNAME(m,f***REMOVED***  __ ## m ## _MOD_ ## f ## _
#endif
#endif

#if defined(F90MOD2CCONV3***REMOVED*** /*E.g. MIPSPro Compilers */
#if defined(NO_APPEND_FORTRAN***REMOVED***
#define F_MODFUNCNAME(m,f***REMOVED***  f ## .in. ## m
#else
#define F_MODFUNCNAME(m,f***REMOVED***  f ## .in. ## m ## _
#endif
#endif
/*
#if defined(UPPERCASE_FORTRAN***REMOVED***
#define F_MODFUNC(m,M,f,F***REMOVED*** F_MODFUNCNAME(M,F***REMOVED***
#else
#define F_MODFUNC(m,M,f,F***REMOVED*** F_MODFUNCNAME(m,f***REMOVED***
#endif
*/

#define F_MODFUNC(m,f***REMOVED*** (*(f2pymodstruct##m##.##f***REMOVED******REMOVED***
***REMOVED***
cppmacros['SWAPUNSAFE'***REMOVED*** = ***REMOVED***\
#define SWAP(a,b***REMOVED*** (size_t***REMOVED***(a***REMOVED*** = ((size_t***REMOVED***(a***REMOVED*** ^ (size_t***REMOVED***(b***REMOVED******REMOVED***;\\
 (size_t***REMOVED***(b***REMOVED*** = ((size_t***REMOVED***(a***REMOVED*** ^ (size_t***REMOVED***(b***REMOVED******REMOVED***;\\
 (size_t***REMOVED***(a***REMOVED*** = ((size_t***REMOVED***(a***REMOVED*** ^ (size_t***REMOVED***(b***REMOVED******REMOVED***
***REMOVED***
cppmacros['SWAP'***REMOVED*** = ***REMOVED***\
#define SWAP(a,b,t***REMOVED*** {\\
\tt *c;\\
\tc = a;\\
\ta = b;\\
\tb = c;***REMOVED***
***REMOVED***
# cppmacros['ISCONTIGUOUS'***REMOVED***='#define ISCONTIGUOUS(m***REMOVED*** (PyArray_FLAGS(m***REMOVED*** &
# NPY_ARRAY_C_CONTIGUOUS***REMOVED***'
cppmacros['PRINTPYOBJERR'***REMOVED*** = ***REMOVED***\
#define PRINTPYOBJERR(obj***REMOVED***\\
\tfprintf(stderr,\"#modulename#.error is related to \"***REMOVED***;\\
\tPyObject_Print((PyObject ****REMOVED***obj,stderr,Py_PRINT_RAW***REMOVED***;\\
\tfprintf(stderr,\"\\n\"***REMOVED***;
***REMOVED***
cppmacros['MINMAX'***REMOVED*** = ***REMOVED***\
#ifndef max
#define max(a,b***REMOVED*** ((a > b***REMOVED*** ? (a***REMOVED*** : (b***REMOVED******REMOVED***
#endif
#ifndef min
#define min(a,b***REMOVED*** ((a < b***REMOVED*** ? (a***REMOVED*** : (b***REMOVED******REMOVED***
#endif
#ifndef MAX
#define MAX(a,b***REMOVED*** ((a > b***REMOVED*** ? (a***REMOVED*** : (b***REMOVED******REMOVED***
#endif
#ifndef MIN
#define MIN(a,b***REMOVED*** ((a < b***REMOVED*** ? (a***REMOVED*** : (b***REMOVED******REMOVED***
#endif
***REMOVED***
needs['len..'***REMOVED*** = ['f2py_size'***REMOVED***
cppmacros['len..'***REMOVED*** = ***REMOVED***\
#define rank(var***REMOVED*** var ## _Rank
#define shape(var,dim***REMOVED*** var ## _Dims[dim***REMOVED***
#define old_rank(var***REMOVED*** (PyArray_NDIM((PyArrayObject ****REMOVED***(capi_ ## var ## _tmp***REMOVED******REMOVED******REMOVED***
#define old_shape(var,dim***REMOVED*** PyArray_DIM(((PyArrayObject ****REMOVED***(capi_ ## var ## _tmp***REMOVED******REMOVED***,dim***REMOVED***
#define fshape(var,dim***REMOVED*** shape(var,rank(var***REMOVED***-dim-1***REMOVED***
#define len(var***REMOVED*** shape(var,0***REMOVED***
#define flen(var***REMOVED*** fshape(var,0***REMOVED***
#define old_size(var***REMOVED*** PyArray_SIZE((PyArrayObject ****REMOVED***(capi_ ## var ## _tmp***REMOVED******REMOVED***
/* #define index(i***REMOVED*** capi_i ## i */
#define slen(var***REMOVED*** capi_ ## var ## _len
#define size(var, ...***REMOVED*** f2py_size((PyArrayObject ****REMOVED***(capi_ ## var ## _tmp***REMOVED***, ## __VA_ARGS__, -1***REMOVED***
***REMOVED***
needs['f2py_size'***REMOVED*** = ['stdarg.h'***REMOVED***
cfuncs['f2py_size'***REMOVED*** = ***REMOVED***\
static int f2py_size(PyArrayObject* var, ...***REMOVED***
{
  npy_int sz = 0;
  npy_int dim;
  npy_int rank;
  va_list argp;
  va_start(argp, var***REMOVED***;
  dim = va_arg(argp, npy_int***REMOVED***;
  if (dim==-1***REMOVED***
***REMOVED***
      sz = PyArray_SIZE(var***REMOVED***;
***REMOVED***
  else
***REMOVED***
      rank = PyArray_NDIM(var***REMOVED***;
      if (dim>=1 && dim<=rank***REMOVED***
        sz = PyArray_DIM(var, dim-1***REMOVED***;
      else
        fprintf(stderr, \"f2py_size: 2nd argument value=%d fails to satisfy 1<=value<=%d. Result will be 0.\\n\", dim, rank***REMOVED***;
***REMOVED***
  va_end(argp***REMOVED***;
  return sz;
***REMOVED***
***REMOVED***

cppmacros[
    'pyobj_from_char1'***REMOVED*** = '#define pyobj_from_char1(v***REMOVED*** (PyInt_FromLong(v***REMOVED******REMOVED***'
cppmacros[
    'pyobj_from_short1'***REMOVED*** = '#define pyobj_from_short1(v***REMOVED*** (PyInt_FromLong(v***REMOVED******REMOVED***'
needs['pyobj_from_int1'***REMOVED*** = ['signed_char'***REMOVED***
cppmacros['pyobj_from_int1'***REMOVED*** = '#define pyobj_from_int1(v***REMOVED*** (PyInt_FromLong(v***REMOVED******REMOVED***'
cppmacros[
    'pyobj_from_long1'***REMOVED*** = '#define pyobj_from_long1(v***REMOVED*** (PyLong_FromLong(v***REMOVED******REMOVED***'
needs['pyobj_from_long_long1'***REMOVED*** = ['long_long'***REMOVED***
cppmacros['pyobj_from_long_long1'***REMOVED*** = ***REMOVED***\
#ifdef HAVE_LONG_LONG
#define pyobj_from_long_long1(v***REMOVED*** (PyLong_FromLongLong(v***REMOVED******REMOVED***
#else
#warning HAVE_LONG_LONG is not available. Redefining pyobj_from_long_long.
#define pyobj_from_long_long1(v***REMOVED*** (PyLong_FromLong(v***REMOVED******REMOVED***
#endif
***REMOVED***
needs['pyobj_from_long_double1'***REMOVED*** = ['long_double'***REMOVED***
cppmacros[
    'pyobj_from_long_double1'***REMOVED*** = '#define pyobj_from_long_double1(v***REMOVED*** (PyFloat_FromDouble(v***REMOVED******REMOVED***'
cppmacros[
    'pyobj_from_double1'***REMOVED*** = '#define pyobj_from_double1(v***REMOVED*** (PyFloat_FromDouble(v***REMOVED******REMOVED***'
cppmacros[
    'pyobj_from_float1'***REMOVED*** = '#define pyobj_from_float1(v***REMOVED*** (PyFloat_FromDouble(v***REMOVED******REMOVED***'
needs['pyobj_from_complex_long_double1'***REMOVED*** = ['complex_long_double'***REMOVED***
cppmacros[
    'pyobj_from_complex_long_double1'***REMOVED*** = '#define pyobj_from_complex_long_double1(v***REMOVED*** (PyComplex_FromDoubles(v.r,v.i***REMOVED******REMOVED***'
needs['pyobj_from_complex_double1'***REMOVED*** = ['complex_double'***REMOVED***
cppmacros[
    'pyobj_from_complex_double1'***REMOVED*** = '#define pyobj_from_complex_double1(v***REMOVED*** (PyComplex_FromDoubles(v.r,v.i***REMOVED******REMOVED***'
needs['pyobj_from_complex_float1'***REMOVED*** = ['complex_float'***REMOVED***
cppmacros[
    'pyobj_from_complex_float1'***REMOVED*** = '#define pyobj_from_complex_float1(v***REMOVED*** (PyComplex_FromDoubles(v.r,v.i***REMOVED******REMOVED***'
needs['pyobj_from_string1'***REMOVED*** = ['string'***REMOVED***
cppmacros[
    'pyobj_from_string1'***REMOVED*** = '#define pyobj_from_string1(v***REMOVED*** (PyString_FromString((char ****REMOVED***v***REMOVED******REMOVED***'
needs['pyobj_from_string1size'***REMOVED*** = ['string'***REMOVED***
cppmacros[
    'pyobj_from_string1size'***REMOVED*** = '#define pyobj_from_string1size(v,len***REMOVED*** (PyUString_FromStringAndSize((char ****REMOVED***v, len***REMOVED******REMOVED***'
needs['TRYPYARRAYTEMPLATE'***REMOVED*** = ['PRINTPYOBJERR'***REMOVED***
cppmacros['TRYPYARRAYTEMPLATE'***REMOVED*** = ***REMOVED***\
/* New SciPy */
#define TRYPYARRAYTEMPLATECHAR case NPY_STRING: *(char ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=*v; break;
#define TRYPYARRAYTEMPLATELONG case NPY_LONG: *(long ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=*v; break;
#define TRYPYARRAYTEMPLATEOBJECT case NPY_OBJECT: (PyArray_DESCR(arr***REMOVED***->f->setitem***REMOVED***(pyobj_from_ ## ctype ## 1(*v***REMOVED***,PyArray_DATA(arr***REMOVED******REMOVED***; break;

#define TRYPYARRAYTEMPLATE(ctype,typecode***REMOVED*** \\
        PyArrayObject *arr = NULL;\\
        if (!obj***REMOVED*** return -2;\\
        if (!PyArray_Check(obj***REMOVED******REMOVED*** return -1;\\
        if (!(arr=(PyArrayObject ****REMOVED***obj***REMOVED******REMOVED*** {fprintf(stderr,\"TRYPYARRAYTEMPLATE:\"***REMOVED***;PRINTPYOBJERR(obj***REMOVED***;return 0;***REMOVED***\\
        if (PyArray_DESCR(arr***REMOVED***->type==typecode***REMOVED***  {*(ctype ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=*v; return 1;***REMOVED***\\
        switch (PyArray_TYPE(arr***REMOVED******REMOVED*** {\\
                case NPY_DOUBLE: *(double ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=*v; break;\\
                case NPY_INT: *(int ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=*v; break;\\
                case NPY_LONG: *(long ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=*v; break;\\
                case NPY_FLOAT: *(float ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=*v; break;\\
                case NPY_CDOUBLE: *(double ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=*v; break;\\
                case NPY_CFLOAT: *(float ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=*v; break;\\
                case NPY_BOOL: *(npy_bool ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=(*v!=0***REMOVED***; break;\\
                case NPY_UBYTE: *(unsigned char ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=*v; break;\\
                case NPY_BYTE: *(signed char ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=*v; break;\\
                case NPY_SHORT: *(short ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=*v; break;\\
                case NPY_USHORT: *(npy_ushort ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=*v; break;\\
                case NPY_UINT: *(npy_uint ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=*v; break;\\
                case NPY_ULONG: *(npy_ulong ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=*v; break;\\
                case NPY_LONGLONG: *(npy_longlong ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=*v; break;\\
                case NPY_ULONGLONG: *(npy_ulonglong ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=*v; break;\\
                case NPY_LONGDOUBLE: *(npy_longdouble ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=*v; break;\\
                case NPY_CLONGDOUBLE: *(npy_longdouble ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=*v; break;\\
                case NPY_OBJECT: (PyArray_DESCR(arr***REMOVED***->f->setitem***REMOVED***(pyobj_from_ ## ctype ## 1(*v***REMOVED***,PyArray_DATA(arr***REMOVED***, arr***REMOVED***; break;\\
        default: return -2;\\
    ***REMOVED***;\\
        return 1
***REMOVED***

needs['TRYCOMPLEXPYARRAYTEMPLATE'***REMOVED*** = ['PRINTPYOBJERR'***REMOVED***
cppmacros['TRYCOMPLEXPYARRAYTEMPLATE'***REMOVED*** = ***REMOVED***\
#define TRYCOMPLEXPYARRAYTEMPLATEOBJECT case NPY_OBJECT: (PyArray_DESCR(arr***REMOVED***->f->setitem***REMOVED***(pyobj_from_complex_ ## ctype ## 1((*v***REMOVED******REMOVED***,PyArray_DATA(arr***REMOVED***, arr***REMOVED***; break;
#define TRYCOMPLEXPYARRAYTEMPLATE(ctype,typecode***REMOVED***\\
        PyArrayObject *arr = NULL;\\
        if (!obj***REMOVED*** return -2;\\
        if (!PyArray_Check(obj***REMOVED******REMOVED*** return -1;\\
        if (!(arr=(PyArrayObject ****REMOVED***obj***REMOVED******REMOVED*** {fprintf(stderr,\"TRYCOMPLEXPYARRAYTEMPLATE:\"***REMOVED***;PRINTPYOBJERR(obj***REMOVED***;return 0;***REMOVED***\\
        if (PyArray_DESCR(arr***REMOVED***->type==typecode***REMOVED*** {\\
            *(ctype ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=(*v***REMOVED***.r;\\
            *(ctype ****REMOVED***(PyArray_DATA(arr***REMOVED***+sizeof(ctype***REMOVED******REMOVED***=(*v***REMOVED***.i;\\
            return 1;\\
    ***REMOVED***\\
        switch (PyArray_TYPE(arr***REMOVED******REMOVED*** {\\
                case NPY_CDOUBLE: *(double ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=(*v***REMOVED***.r;*(double ****REMOVED***(PyArray_DATA(arr***REMOVED***+sizeof(double***REMOVED******REMOVED***=(*v***REMOVED***.i;break;\\
                case NPY_CFLOAT: *(float ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=(*v***REMOVED***.r;*(float ****REMOVED***(PyArray_DATA(arr***REMOVED***+sizeof(float***REMOVED******REMOVED***=(*v***REMOVED***.i;break;\\
                case NPY_DOUBLE: *(double ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=(*v***REMOVED***.r; break;\\
                case NPY_LONG: *(long ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=(*v***REMOVED***.r; break;\\
                case NPY_FLOAT: *(float ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=(*v***REMOVED***.r; break;\\
                case NPY_INT: *(int ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=(*v***REMOVED***.r; break;\\
                case NPY_SHORT: *(short ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=(*v***REMOVED***.r; break;\\
                case NPY_UBYTE: *(unsigned char ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=(*v***REMOVED***.r; break;\\
                case NPY_BYTE: *(signed char ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=(*v***REMOVED***.r; break;\\
                case NPY_BOOL: *(npy_bool ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=((*v***REMOVED***.r!=0 && (*v***REMOVED***.i!=0***REMOVED***; break;\\
                case NPY_USHORT: *(npy_ushort ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=(*v***REMOVED***.r; break;\\
                case NPY_UINT: *(npy_uint ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=(*v***REMOVED***.r; break;\\
                case NPY_ULONG: *(npy_ulong ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=(*v***REMOVED***.r; break;\\
                case NPY_LONGLONG: *(npy_longlong ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=(*v***REMOVED***.r; break;\\
                case NPY_ULONGLONG: *(npy_ulonglong ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=(*v***REMOVED***.r; break;\\
                case NPY_LONGDOUBLE: *(npy_longdouble ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=(*v***REMOVED***.r; break;\\
                case NPY_CLONGDOUBLE: *(npy_longdouble ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***=(*v***REMOVED***.r;*(npy_longdouble ****REMOVED***(PyArray_DATA(arr***REMOVED***+sizeof(npy_longdouble***REMOVED******REMOVED***=(*v***REMOVED***.i;break;\\
                case NPY_OBJECT: (PyArray_DESCR(arr***REMOVED***->f->setitem***REMOVED***(pyobj_from_complex_ ## ctype ## 1((*v***REMOVED******REMOVED***,PyArray_DATA(arr***REMOVED***, arr***REMOVED***; break;\\
                default: return -2;\\
    ***REMOVED***;\\
        return -1;
***REMOVED***
# cppmacros['NUMFROMARROBJ'***REMOVED***=***REMOVED***\
# define NUMFROMARROBJ(typenum,ctype***REMOVED*** \\
# \tif (PyArray_Check(obj***REMOVED******REMOVED*** arr = (PyArrayObject ****REMOVED***obj;\\
# \telse arr = (PyArrayObject ****REMOVED***PyArray_ContiguousFromObject(obj,typenum,0,0***REMOVED***;\\
# \tif (arr***REMOVED*** {\\
# \t\tif (PyArray_TYPE(arr***REMOVED***==NPY_OBJECT***REMOVED*** {\\
# \t\t\tif (!ctype ## _from_pyobj(v,(PyArray_DESCR(arr***REMOVED***->getitem***REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***,\"\"***REMOVED******REMOVED***\\
# \t\t\tgoto capi_fail;\\
# \t\t***REMOVED*** else {\\
# \t\t\t(PyArray_DESCR(arr***REMOVED***->cast[typenum***REMOVED******REMOVED***(PyArray_DATA(arr***REMOVED***,1,(char****REMOVED***v,1,1***REMOVED***;\\
# \t\t***REMOVED***\\
# \t\tif ((PyObject ****REMOVED***arr != obj***REMOVED*** { Py_DECREF(arr***REMOVED***; ***REMOVED***\\
# \t\treturn 1;\\
# \t***REMOVED***
# ***REMOVED***
# XXX: Note that CNUMFROMARROBJ is identical with NUMFROMARROBJ
# cppmacros['CNUMFROMARROBJ'***REMOVED***=***REMOVED***\
# define CNUMFROMARROBJ(typenum,ctype***REMOVED*** \\
# \tif (PyArray_Check(obj***REMOVED******REMOVED*** arr = (PyArrayObject ****REMOVED***obj;\\
# \telse arr = (PyArrayObject ****REMOVED***PyArray_ContiguousFromObject(obj,typenum,0,0***REMOVED***;\\
# \tif (arr***REMOVED*** {\\
# \t\tif (PyArray_TYPE(arr***REMOVED***==NPY_OBJECT***REMOVED*** {\\
# \t\t\tif (!ctype ## _from_pyobj(v,(PyArray_DESCR(arr***REMOVED***->getitem***REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***,\"\"***REMOVED******REMOVED***\\
# \t\t\tgoto capi_fail;\\
# \t\t***REMOVED*** else {\\
# \t\t\t(PyArray_DESCR(arr***REMOVED***->cast[typenum***REMOVED******REMOVED***((void ****REMOVED***(PyArray_DATA(arr***REMOVED******REMOVED***,1,(void ****REMOVED***(v***REMOVED***,1,1***REMOVED***;\\
# \t\t***REMOVED***\\
# \t\tif ((PyObject ****REMOVED***arr != obj***REMOVED*** { Py_DECREF(arr***REMOVED***; ***REMOVED***\\
# \t\treturn 1;\\
# \t***REMOVED***
# ***REMOVED***


needs['GETSTRFROMPYTUPLE'***REMOVED*** = ['STRINGCOPYN', 'PRINTPYOBJERR'***REMOVED***
cppmacros['GETSTRFROMPYTUPLE'***REMOVED*** = ***REMOVED***\
#define GETSTRFROMPYTUPLE(tuple,index,str,len***REMOVED*** {\\
\t\tPyObject *rv_cb_str = PyTuple_GetItem((tuple***REMOVED***,(index***REMOVED******REMOVED***;\\
\t\tif (rv_cb_str == NULL***REMOVED***\\
\t\t\tgoto capi_fail;\\
\t\tif (PyString_Check(rv_cb_str***REMOVED******REMOVED*** {\\
\t\t\tstr[len-1***REMOVED***='\\0';\\
\t\t\tSTRINGCOPYN((str***REMOVED***,PyString_AS_STRING((PyStringObject****REMOVED***rv_cb_str***REMOVED***,(len***REMOVED******REMOVED***;\\
\t\t***REMOVED*** else {\\
\t\t\tPRINTPYOBJERR(rv_cb_str***REMOVED***;\\
\t\t\tPyErr_SetString(#modulename#_error,\"string object expected\"***REMOVED***;\\
\t\t\tgoto capi_fail;\\
\t\t***REMOVED***\\
\t***REMOVED***
***REMOVED***
cppmacros['GETSCALARFROMPYTUPLE'***REMOVED*** = ***REMOVED***\
#define GETSCALARFROMPYTUPLE(tuple,index,var,ctype,mess***REMOVED*** {\\
\t\tif ((capi_tmp = PyTuple_GetItem((tuple***REMOVED***,(index***REMOVED******REMOVED******REMOVED***==NULL***REMOVED*** goto capi_fail;\\
\t\tif (!(ctype ## _from_pyobj((var***REMOVED***,capi_tmp,mess***REMOVED******REMOVED******REMOVED***\\
\t\t\tgoto capi_fail;\\
\t***REMOVED***
***REMOVED***

cppmacros['FAILNULL'***REMOVED*** = ***REMOVED***\\
#define FAILNULL(p***REMOVED*** do {                                            \\
    if ((p***REMOVED*** == NULL***REMOVED*** {                                              \\
        PyErr_SetString(PyExc_MemoryError, "NULL pointer found"***REMOVED***;   \\
        goto capi_fail;                                             \\
***REMOVED***                                                               \\
***REMOVED*** while (0***REMOVED***
***REMOVED***
needs['MEMCOPY'***REMOVED*** = ['string.h', 'FAILNULL'***REMOVED***
cppmacros['MEMCOPY'***REMOVED*** = ***REMOVED***\
#define MEMCOPY(to,from,n***REMOVED***\\
    do { FAILNULL(to***REMOVED***; FAILNULL(from***REMOVED***; (void***REMOVED***memcpy(to,from,n***REMOVED***; ***REMOVED*** while (0***REMOVED***
***REMOVED***
cppmacros['STRINGMALLOC'***REMOVED*** = ***REMOVED***\
#define STRINGMALLOC(str,len***REMOVED***\\
\tif ((str = (string***REMOVED***malloc(sizeof(char***REMOVED****(len+1***REMOVED******REMOVED******REMOVED*** == NULL***REMOVED*** {\\
\t\tPyErr_SetString(PyExc_MemoryError, \"out of memory\"***REMOVED***;\\
\t\tgoto capi_fail;\\
\t***REMOVED*** else {\\
\t\t(str***REMOVED***[len***REMOVED*** = '\\0';\\
\t***REMOVED***
***REMOVED***
cppmacros['STRINGFREE'***REMOVED*** = ***REMOVED***\
#define STRINGFREE(str***REMOVED*** do {if (!(str == NULL***REMOVED******REMOVED*** free(str***REMOVED***;***REMOVED*** while (0***REMOVED***
***REMOVED***
needs['STRINGCOPYN'***REMOVED*** = ['string.h', 'FAILNULL'***REMOVED***
cppmacros['STRINGCOPYN'***REMOVED*** = ***REMOVED***\
#define STRINGCOPYN(to,from,buf_size***REMOVED***                           \\
    do {                                                        \\
        int _m = (buf_size***REMOVED***;                                    \\
        char *_to = (to***REMOVED***;                                       \\
        char *_from = (from***REMOVED***;                                   \\
        FAILNULL(_to***REMOVED***; FAILNULL(_from***REMOVED***;                         \\
        (void***REMOVED***strncpy(_to, _from, sizeof(char***REMOVED****_m***REMOVED***;             \\
        _to[_m-1***REMOVED*** = '\\0';                                      \\
        /* Padding with spaces instead of nulls */              \\
        for (_m -= 2; _m >= 0 && _to[_m***REMOVED*** == '\\0'; _m--***REMOVED*** {      \\
            _to[_m***REMOVED*** = ' ';                                      \\
    ***REMOVED***                                                       \\
***REMOVED*** while (0***REMOVED***
***REMOVED***
needs['STRINGCOPY'***REMOVED*** = ['string.h', 'FAILNULL'***REMOVED***
cppmacros['STRINGCOPY'***REMOVED*** = ***REMOVED***\
#define STRINGCOPY(to,from***REMOVED***\\
    do { FAILNULL(to***REMOVED***; FAILNULL(from***REMOVED***; (void***REMOVED***strcpy(to,from***REMOVED***; ***REMOVED*** while (0***REMOVED***
***REMOVED***
cppmacros['CHECKGENERIC'***REMOVED*** = ***REMOVED***\
#define CHECKGENERIC(check,tcheck,name***REMOVED*** \\
\tif (!(check***REMOVED******REMOVED*** {\\
\t\tPyErr_SetString(#modulename#_error,\"(\"tcheck\"***REMOVED*** failed for \"name***REMOVED***;\\
\t\t/*goto capi_fail;*/\\
\t***REMOVED*** else ***REMOVED***
cppmacros['CHECKARRAY'***REMOVED*** = ***REMOVED***\
#define CHECKARRAY(check,tcheck,name***REMOVED*** \\
\tif (!(check***REMOVED******REMOVED*** {\\
\t\tPyErr_SetString(#modulename#_error,\"(\"tcheck\"***REMOVED*** failed for \"name***REMOVED***;\\
\t\t/*goto capi_fail;*/\\
\t***REMOVED*** else ***REMOVED***
cppmacros['CHECKSTRING'***REMOVED*** = ***REMOVED***\
#define CHECKSTRING(check,tcheck,name,show,var***REMOVED***\\
\tif (!(check***REMOVED******REMOVED*** {\\
\t\tchar errstring[256***REMOVED***;\\
\t\tsprintf(errstring, \"%s: \"show, \"(\"tcheck\"***REMOVED*** failed for \"name, slen(var***REMOVED***, var***REMOVED***;\\
\t\tPyErr_SetString(#modulename#_error, errstring***REMOVED***;\\
\t\t/*goto capi_fail;*/\\
\t***REMOVED*** else ***REMOVED***
cppmacros['CHECKSCALAR'***REMOVED*** = ***REMOVED***\
#define CHECKSCALAR(check,tcheck,name,show,var***REMOVED***\\
\tif (!(check***REMOVED******REMOVED*** {\\
\t\tchar errstring[256***REMOVED***;\\
\t\tsprintf(errstring, \"%s: \"show, \"(\"tcheck\"***REMOVED*** failed for \"name, var***REMOVED***;\\
\t\tPyErr_SetString(#modulename#_error,errstring***REMOVED***;\\
\t\t/*goto capi_fail;*/\\
\t***REMOVED*** else ***REMOVED***
# cppmacros['CHECKDIMS'***REMOVED***=***REMOVED***\
# define CHECKDIMS(dims,rank***REMOVED*** \\
# \tfor (int i=0;i<(rank***REMOVED***;i++***REMOVED***\\
# \t\tif (dims[i***REMOVED***<0***REMOVED*** {\\
# \t\t\tfprintf(stderr,\"Unspecified array argument requires a complete dimension specification.\\n\"***REMOVED***;\\
# \t\t\tgoto capi_fail;\\
# \t\t***REMOVED***
# ***REMOVED***
cppmacros[
    'ARRSIZE'***REMOVED*** = '#define ARRSIZE(dims,rank***REMOVED*** (_PyArray_multiply_list(dims,rank***REMOVED******REMOVED***'
cppmacros['OLDPYNUM'***REMOVED*** = ***REMOVED***\
#ifdef OLDPYNUM
#error You need to intall Numeric Python version 13 or higher. Get it from http:/sourceforge.net/project/?group_id=1369
#endif
***REMOVED***
################# C functions ###############

cfuncs['calcarrindex'***REMOVED*** = ***REMOVED***\
static int calcarrindex(int *i,PyArrayObject *arr***REMOVED*** {
\tint k,ii = i[0***REMOVED***;
\tfor (k=1; k < PyArray_NDIM(arr***REMOVED***; k++***REMOVED***
\t\tii += (ii*(PyArray_DIM(arr,k***REMOVED*** - 1***REMOVED***+i[k***REMOVED******REMOVED***; /* assuming contiguous arr */
\treturn ii;
***REMOVED******REMOVED***
cfuncs['calcarrindextr'***REMOVED*** = ***REMOVED***\
static int calcarrindextr(int *i,PyArrayObject *arr***REMOVED*** {
\tint k,ii = i[PyArray_NDIM(arr***REMOVED***-1***REMOVED***;
\tfor (k=1; k < PyArray_NDIM(arr***REMOVED***; k++***REMOVED***
\t\tii += (ii*(PyArray_DIM(arr,PyArray_NDIM(arr***REMOVED***-k-1***REMOVED*** - 1***REMOVED***+i[PyArray_NDIM(arr***REMOVED***-k-1***REMOVED******REMOVED***; /* assuming contiguous arr */
\treturn ii;
***REMOVED******REMOVED***
cfuncs['forcomb'***REMOVED*** = ***REMOVED***\
static struct { int nd;npy_intp *d;int *i,*i_tr,tr; ***REMOVED*** forcombcache;
static int initforcomb(npy_intp *dims,int nd,int tr***REMOVED*** {
  int k;
  if (dims==NULL***REMOVED*** return 0;
  if (nd<0***REMOVED*** return 0;
  forcombcache.nd = nd;
  forcombcache.d = dims;
  forcombcache.tr = tr;
  if ((forcombcache.i = (int ****REMOVED***malloc(sizeof(int***REMOVED****nd***REMOVED******REMOVED***==NULL***REMOVED*** return 0;
  if ((forcombcache.i_tr = (int ****REMOVED***malloc(sizeof(int***REMOVED****nd***REMOVED******REMOVED***==NULL***REMOVED*** return 0;
  for (k=1;k<nd;k++***REMOVED*** {
    forcombcache.i[k***REMOVED*** = forcombcache.i_tr[nd-k-1***REMOVED*** = 0;
  ***REMOVED***
  forcombcache.i[0***REMOVED*** = forcombcache.i_tr[nd-1***REMOVED*** = -1;
  return 1;
***REMOVED***
static int *nextforcomb(void***REMOVED*** {
  int j,*i,*i_tr,k;
  int nd=forcombcache.nd;
  if ((i=forcombcache.i***REMOVED*** == NULL***REMOVED*** return NULL;
  if ((i_tr=forcombcache.i_tr***REMOVED*** == NULL***REMOVED*** return NULL;
  if (forcombcache.d == NULL***REMOVED*** return NULL;
  i[0***REMOVED***++;
  if (i[0***REMOVED***==forcombcache.d[0***REMOVED******REMOVED*** {
    j=1;
    while ((j<nd***REMOVED*** && (i[j***REMOVED***==forcombcache.d[j***REMOVED***-1***REMOVED******REMOVED*** j++;
    if (j==nd***REMOVED*** {
      free(i***REMOVED***;
      free(i_tr***REMOVED***;
      return NULL;
***REMOVED***
    for (k=0;k<j;k++***REMOVED*** i[k***REMOVED*** = i_tr[nd-k-1***REMOVED*** = 0;
    i[j***REMOVED***++;
    i_tr[nd-j-1***REMOVED***++;
  ***REMOVED*** else
    i_tr[nd-1***REMOVED***++;
  if (forcombcache.tr***REMOVED*** return i_tr;
  return i;
***REMOVED******REMOVED***
needs['try_pyarr_from_string'***REMOVED*** = ['STRINGCOPYN', 'PRINTPYOBJERR', 'string'***REMOVED***
cfuncs['try_pyarr_from_string'***REMOVED*** = ***REMOVED***\
static int try_pyarr_from_string(PyObject *obj,const string str***REMOVED*** {
\tPyArrayObject *arr = NULL;
\tif (PyArray_Check(obj***REMOVED*** && (!((arr = (PyArrayObject ****REMOVED***obj***REMOVED*** == NULL***REMOVED******REMOVED******REMOVED***
\t\t{ STRINGCOPYN(PyArray_DATA(arr***REMOVED***,str,PyArray_NBYTES(arr***REMOVED******REMOVED***; ***REMOVED***
\treturn 1;
capi_fail:
\tPRINTPYOBJERR(obj***REMOVED***;
\tPyErr_SetString(#modulename#_error,\"try_pyarr_from_string failed\"***REMOVED***;
\treturn 0;
***REMOVED***
***REMOVED***
needs['string_from_pyobj'***REMOVED*** = ['string', 'STRINGMALLOC', 'STRINGCOPYN'***REMOVED***
cfuncs['string_from_pyobj'***REMOVED*** = ***REMOVED***\
static int string_from_pyobj(string *str,int *len,const string inistr,PyObject *obj,const char *errmess***REMOVED*** {
\tPyArrayObject *arr = NULL;
\tPyObject *tmp = NULL;
#ifdef DEBUGCFUNCS
fprintf(stderr,\"string_from_pyobj(str='%s',len=%d,inistr='%s',obj=%p***REMOVED***\\n\",(char****REMOVED***str,*len,(char ****REMOVED***inistr,obj***REMOVED***;
#endif
\tif (obj == Py_None***REMOVED*** {
\t\tif (*len == -1***REMOVED***
\t\t\t*len = strlen(inistr***REMOVED***; /* Will this cause problems? */
\t\tSTRINGMALLOC(*str,*len***REMOVED***;
\t\tSTRINGCOPYN(*str,inistr,*len+1***REMOVED***;
\t\treturn 1;
\t***REMOVED***
\tif (PyArray_Check(obj***REMOVED******REMOVED*** {
\t\tif ((arr = (PyArrayObject ****REMOVED***obj***REMOVED*** == NULL***REMOVED***
\t\t\tgoto capi_fail;
\t\tif (!ISCONTIGUOUS(arr***REMOVED******REMOVED*** {
\t\t\tPyErr_SetString(PyExc_ValueError,\"array object is non-contiguous.\"***REMOVED***;
\t\t\tgoto capi_fail;
\t\t***REMOVED***
\t\tif (*len == -1***REMOVED***
\t\t\t*len = (PyArray_ITEMSIZE(arr***REMOVED******REMOVED****PyArray_SIZE(arr***REMOVED***;
\t\tSTRINGMALLOC(*str,*len***REMOVED***;
\t\tSTRINGCOPYN(*str,PyArray_DATA(arr***REMOVED***,*len+1***REMOVED***;
\t\treturn 1;
\t***REMOVED***
\tif (PyString_Check(obj***REMOVED******REMOVED*** {
\t\ttmp = obj;
\t\tPy_INCREF(tmp***REMOVED***;
\t***REMOVED***
#if PY_VERSION_HEX >= 0x03000000
\telse if (PyUnicode_Check(obj***REMOVED******REMOVED*** {
\t\ttmp = PyUnicode_AsASCIIString(obj***REMOVED***;
\t***REMOVED***
\telse {
\t\tPyObject *tmp2;
\t\ttmp2 = PyObject_Str(obj***REMOVED***;
\t\tif (tmp2***REMOVED*** {
\t\t\ttmp = PyUnicode_AsASCIIString(tmp2***REMOVED***;
\t\t\tPy_DECREF(tmp2***REMOVED***;
\t\t***REMOVED***
\t\telse {
\t\t\ttmp = NULL;
\t\t***REMOVED***
\t***REMOVED***
#else
\telse {
\t\ttmp = PyObject_Str(obj***REMOVED***;
\t***REMOVED***
#endif
\tif (tmp == NULL***REMOVED*** goto capi_fail;
\tif (*len == -1***REMOVED***
\t\t*len = PyString_GET_SIZE(tmp***REMOVED***;
\tSTRINGMALLOC(*str,*len***REMOVED***;
\tSTRINGCOPYN(*str,PyString_AS_STRING(tmp***REMOVED***,*len+1***REMOVED***;
\tPy_DECREF(tmp***REMOVED***;
\treturn 1;
capi_fail:
\tPy_XDECREF(tmp***REMOVED***;
\t{
\t\tPyObject* err = PyErr_Occurred(***REMOVED***;
\t\tif (err==NULL***REMOVED*** err = #modulename#_error;
\t\tPyErr_SetString(err,errmess***REMOVED***;
\t***REMOVED***
\treturn 0;
***REMOVED***
***REMOVED***
needs['char_from_pyobj'***REMOVED*** = ['int_from_pyobj'***REMOVED***
cfuncs['char_from_pyobj'***REMOVED*** = ***REMOVED***\
static int char_from_pyobj(char* v,PyObject *obj,const char *errmess***REMOVED*** {
\tint i=0;
\tif (int_from_pyobj(&i,obj,errmess***REMOVED******REMOVED*** {
\t\t*v = (char***REMOVED***i;
\t\treturn 1;
\t***REMOVED***
\treturn 0;
***REMOVED***
***REMOVED***
needs['signed_char_from_pyobj'***REMOVED*** = ['int_from_pyobj', 'signed_char'***REMOVED***
cfuncs['signed_char_from_pyobj'***REMOVED*** = ***REMOVED***\
static int signed_char_from_pyobj(signed_char* v,PyObject *obj,const char *errmess***REMOVED*** {
\tint i=0;
\tif (int_from_pyobj(&i,obj,errmess***REMOVED******REMOVED*** {
\t\t*v = (signed_char***REMOVED***i;
\t\treturn 1;
\t***REMOVED***
\treturn 0;
***REMOVED***
***REMOVED***
needs['short_from_pyobj'***REMOVED*** = ['int_from_pyobj'***REMOVED***
cfuncs['short_from_pyobj'***REMOVED*** = ***REMOVED***\
static int short_from_pyobj(short* v,PyObject *obj,const char *errmess***REMOVED*** {
\tint i=0;
\tif (int_from_pyobj(&i,obj,errmess***REMOVED******REMOVED*** {
\t\t*v = (short***REMOVED***i;
\t\treturn 1;
\t***REMOVED***
\treturn 0;
***REMOVED***
***REMOVED***
cfuncs['int_from_pyobj'***REMOVED*** = ***REMOVED***\
static int int_from_pyobj(int* v,PyObject *obj,const char *errmess***REMOVED*** {
\tPyObject* tmp = NULL;
\tif (PyInt_Check(obj***REMOVED******REMOVED*** {
\t\t*v = (int***REMOVED***PyInt_AS_LONG(obj***REMOVED***;
\t\treturn 1;
\t***REMOVED***
\ttmp = PyNumber_Int(obj***REMOVED***;
\tif (tmp***REMOVED*** {
\t\t*v = PyInt_AS_LONG(tmp***REMOVED***;
\t\tPy_DECREF(tmp***REMOVED***;
\t\treturn 1;
\t***REMOVED***
\tif (PyComplex_Check(obj***REMOVED******REMOVED***
\t\ttmp = PyObject_GetAttrString(obj,\"real\"***REMOVED***;
\telse if (PyString_Check(obj***REMOVED*** || PyUnicode_Check(obj***REMOVED******REMOVED***
\t\t/*pass*/;
\telse if (PySequence_Check(obj***REMOVED******REMOVED***
\t\ttmp = PySequence_GetItem(obj,0***REMOVED***;
\tif (tmp***REMOVED*** {
\t\tPyErr_Clear(***REMOVED***;
\t\tif (int_from_pyobj(v,tmp,errmess***REMOVED******REMOVED*** {Py_DECREF(tmp***REMOVED***; return 1;***REMOVED***
\t\tPy_DECREF(tmp***REMOVED***;
\t***REMOVED***
\t{
\t\tPyObject* err = PyErr_Occurred(***REMOVED***;
\t\tif (err==NULL***REMOVED*** err = #modulename#_error;
\t\tPyErr_SetString(err,errmess***REMOVED***;
\t***REMOVED***
\treturn 0;
***REMOVED***
***REMOVED***
cfuncs['long_from_pyobj'***REMOVED*** = ***REMOVED***\
static int long_from_pyobj(long* v,PyObject *obj,const char *errmess***REMOVED*** {
\tPyObject* tmp = NULL;
\tif (PyInt_Check(obj***REMOVED******REMOVED*** {
\t\t*v = PyInt_AS_LONG(obj***REMOVED***;
\t\treturn 1;
\t***REMOVED***
\ttmp = PyNumber_Int(obj***REMOVED***;
\tif (tmp***REMOVED*** {
\t\t*v = PyInt_AS_LONG(tmp***REMOVED***;
\t\tPy_DECREF(tmp***REMOVED***;
\t\treturn 1;
\t***REMOVED***
\tif (PyComplex_Check(obj***REMOVED******REMOVED***
\t\ttmp = PyObject_GetAttrString(obj,\"real\"***REMOVED***;
\telse if (PyString_Check(obj***REMOVED*** || PyUnicode_Check(obj***REMOVED******REMOVED***
\t\t/*pass*/;
\telse if (PySequence_Check(obj***REMOVED******REMOVED***
\t\ttmp = PySequence_GetItem(obj,0***REMOVED***;
\tif (tmp***REMOVED*** {
\t\tPyErr_Clear(***REMOVED***;
\t\tif (long_from_pyobj(v,tmp,errmess***REMOVED******REMOVED*** {Py_DECREF(tmp***REMOVED***; return 1;***REMOVED***
\t\tPy_DECREF(tmp***REMOVED***;
\t***REMOVED***
\t{
\t\tPyObject* err = PyErr_Occurred(***REMOVED***;
\t\tif (err==NULL***REMOVED*** err = #modulename#_error;
\t\tPyErr_SetString(err,errmess***REMOVED***;
\t***REMOVED***
\treturn 0;
***REMOVED***
***REMOVED***
needs['long_long_from_pyobj'***REMOVED*** = ['long_long'***REMOVED***
cfuncs['long_long_from_pyobj'***REMOVED*** = ***REMOVED***\
static int long_long_from_pyobj(long_long* v,PyObject *obj,const char *errmess***REMOVED*** {
\tPyObject* tmp = NULL;
\tif (PyLong_Check(obj***REMOVED******REMOVED*** {
\t\t*v = PyLong_AsLongLong(obj***REMOVED***;
\t\treturn (!PyErr_Occurred(***REMOVED******REMOVED***;
\t***REMOVED***
\tif (PyInt_Check(obj***REMOVED******REMOVED*** {
\t\t*v = (long_long***REMOVED***PyInt_AS_LONG(obj***REMOVED***;
\t\treturn 1;
\t***REMOVED***
\ttmp = PyNumber_Long(obj***REMOVED***;
\tif (tmp***REMOVED*** {
\t\t*v = PyLong_AsLongLong(tmp***REMOVED***;
\t\tPy_DECREF(tmp***REMOVED***;
\t\treturn (!PyErr_Occurred(***REMOVED******REMOVED***;
\t***REMOVED***
\tif (PyComplex_Check(obj***REMOVED******REMOVED***
\t\ttmp = PyObject_GetAttrString(obj,\"real\"***REMOVED***;
\telse if (PyString_Check(obj***REMOVED*** || PyUnicode_Check(obj***REMOVED******REMOVED***
\t\t/*pass*/;
\telse if (PySequence_Check(obj***REMOVED******REMOVED***
\t\ttmp = PySequence_GetItem(obj,0***REMOVED***;
\tif (tmp***REMOVED*** {
\t\tPyErr_Clear(***REMOVED***;
\t\tif (long_long_from_pyobj(v,tmp,errmess***REMOVED******REMOVED*** {Py_DECREF(tmp***REMOVED***; return 1;***REMOVED***
\t\tPy_DECREF(tmp***REMOVED***;
\t***REMOVED***
\t{
\t\tPyObject* err = PyErr_Occurred(***REMOVED***;
\t\tif (err==NULL***REMOVED*** err = #modulename#_error;
\t\tPyErr_SetString(err,errmess***REMOVED***;
\t***REMOVED***
\treturn 0;
***REMOVED***
***REMOVED***
needs['long_double_from_pyobj'***REMOVED*** = ['double_from_pyobj', 'long_double'***REMOVED***
cfuncs['long_double_from_pyobj'***REMOVED*** = ***REMOVED***\
static int long_double_from_pyobj(long_double* v,PyObject *obj,const char *errmess***REMOVED*** {
\tdouble d=0;
\tif (PyArray_CheckScalar(obj***REMOVED******REMOVED***{
\t\tif PyArray_IsScalar(obj, LongDouble***REMOVED*** {
\t\t\tPyArray_ScalarAsCtype(obj, v***REMOVED***;
\t\t\treturn 1;
\t\t***REMOVED***
\t\telse if (PyArray_Check(obj***REMOVED*** && PyArray_TYPE(obj***REMOVED***==NPY_LONGDOUBLE***REMOVED*** {
\t\t\t(*v***REMOVED*** = *((npy_longdouble ****REMOVED***PyArray_DATA(obj***REMOVED******REMOVED***;
\t\t\treturn 1;
\t\t***REMOVED***
\t***REMOVED***
\tif (double_from_pyobj(&d,obj,errmess***REMOVED******REMOVED*** {
\t\t*v = (long_double***REMOVED***d;
\t\treturn 1;
\t***REMOVED***
\treturn 0;
***REMOVED***
***REMOVED***
cfuncs['double_from_pyobj'***REMOVED*** = ***REMOVED***\
static int double_from_pyobj(double* v,PyObject *obj,const char *errmess***REMOVED*** {
\tPyObject* tmp = NULL;
\tif (PyFloat_Check(obj***REMOVED******REMOVED*** {
#ifdef __sgi
\t\t*v = PyFloat_AsDouble(obj***REMOVED***;
#else
\t\t*v = PyFloat_AS_DOUBLE(obj***REMOVED***;
#endif
\t\treturn 1;
\t***REMOVED***
\ttmp = PyNumber_Float(obj***REMOVED***;
\tif (tmp***REMOVED*** {
#ifdef __sgi
\t\t*v = PyFloat_AsDouble(tmp***REMOVED***;
#else
\t\t*v = PyFloat_AS_DOUBLE(tmp***REMOVED***;
#endif
\t\tPy_DECREF(tmp***REMOVED***;
\t\treturn 1;
\t***REMOVED***
\tif (PyComplex_Check(obj***REMOVED******REMOVED***
\t\ttmp = PyObject_GetAttrString(obj,\"real\"***REMOVED***;
\telse if (PyString_Check(obj***REMOVED*** || PyUnicode_Check(obj***REMOVED******REMOVED***
\t\t/*pass*/;
\telse if (PySequence_Check(obj***REMOVED******REMOVED***
\t\ttmp = PySequence_GetItem(obj,0***REMOVED***;
\tif (tmp***REMOVED*** {
\t\tPyErr_Clear(***REMOVED***;
\t\tif (double_from_pyobj(v,tmp,errmess***REMOVED******REMOVED*** {Py_DECREF(tmp***REMOVED***; return 1;***REMOVED***
\t\tPy_DECREF(tmp***REMOVED***;
\t***REMOVED***
\t{
\t\tPyObject* err = PyErr_Occurred(***REMOVED***;
\t\tif (err==NULL***REMOVED*** err = #modulename#_error;
\t\tPyErr_SetString(err,errmess***REMOVED***;
\t***REMOVED***
\treturn 0;
***REMOVED***
***REMOVED***
needs['float_from_pyobj'***REMOVED*** = ['double_from_pyobj'***REMOVED***
cfuncs['float_from_pyobj'***REMOVED*** = ***REMOVED***\
static int float_from_pyobj(float* v,PyObject *obj,const char *errmess***REMOVED*** {
\tdouble d=0.0;
\tif (double_from_pyobj(&d,obj,errmess***REMOVED******REMOVED*** {
\t\t*v = (float***REMOVED***d;
\t\treturn 1;
\t***REMOVED***
\treturn 0;
***REMOVED***
***REMOVED***
needs['complex_long_double_from_pyobj'***REMOVED*** = ['complex_long_double', 'long_double',
                                           'complex_double_from_pyobj'***REMOVED***
cfuncs['complex_long_double_from_pyobj'***REMOVED*** = ***REMOVED***\
static int complex_long_double_from_pyobj(complex_long_double* v,PyObject *obj,const char *errmess***REMOVED*** {
\tcomplex_double cd={0.0,0.0***REMOVED***;
\tif (PyArray_CheckScalar(obj***REMOVED******REMOVED***{
\t\tif PyArray_IsScalar(obj, CLongDouble***REMOVED*** {
\t\t\tPyArray_ScalarAsCtype(obj, v***REMOVED***;
\t\t\treturn 1;
\t\t***REMOVED***
\t\telse if (PyArray_Check(obj***REMOVED*** && PyArray_TYPE(obj***REMOVED***==NPY_CLONGDOUBLE***REMOVED*** {
\t\t\t(*v***REMOVED***.r = ((npy_clongdouble ****REMOVED***PyArray_DATA(obj***REMOVED******REMOVED***->real;
\t\t\t(*v***REMOVED***.i = ((npy_clongdouble ****REMOVED***PyArray_DATA(obj***REMOVED******REMOVED***->imag;
\t\t\treturn 1;
\t\t***REMOVED***
\t***REMOVED***
\tif (complex_double_from_pyobj(&cd,obj,errmess***REMOVED******REMOVED*** {
\t\t(*v***REMOVED***.r = (long_double***REMOVED***cd.r;
\t\t(*v***REMOVED***.i = (long_double***REMOVED***cd.i;
\t\treturn 1;
\t***REMOVED***
\treturn 0;
***REMOVED***
***REMOVED***
needs['complex_double_from_pyobj'***REMOVED*** = ['complex_double'***REMOVED***
cfuncs['complex_double_from_pyobj'***REMOVED*** = ***REMOVED***\
static int complex_double_from_pyobj(complex_double* v,PyObject *obj,const char *errmess***REMOVED*** {
\tPy_complex c;
\tif (PyComplex_Check(obj***REMOVED******REMOVED*** {
\t\tc=PyComplex_AsCComplex(obj***REMOVED***;
\t\t(*v***REMOVED***.r=c.real, (*v***REMOVED***.i=c.imag;
\t\treturn 1;
\t***REMOVED***
\tif (PyArray_IsScalar(obj, ComplexFloating***REMOVED******REMOVED*** {
\t\tif (PyArray_IsScalar(obj, CFloat***REMOVED******REMOVED*** {
\t\t\tnpy_cfloat new;
\t\t\tPyArray_ScalarAsCtype(obj, &new***REMOVED***;
\t\t\t(*v***REMOVED***.r = (double***REMOVED***new.real;
\t\t\t(*v***REMOVED***.i = (double***REMOVED***new.imag;
\t\t***REMOVED***
\t\telse if (PyArray_IsScalar(obj, CLongDouble***REMOVED******REMOVED*** {
\t\t\tnpy_clongdouble new;
\t\t\tPyArray_ScalarAsCtype(obj, &new***REMOVED***;
\t\t\t(*v***REMOVED***.r = (double***REMOVED***new.real;
\t\t\t(*v***REMOVED***.i = (double***REMOVED***new.imag;
\t\t***REMOVED***
\t\telse { /* if (PyArray_IsScalar(obj, CDouble***REMOVED******REMOVED*** */
\t\t\tPyArray_ScalarAsCtype(obj, v***REMOVED***;
\t\t***REMOVED***
\t\treturn 1;
\t***REMOVED***
\tif (PyArray_CheckScalar(obj***REMOVED******REMOVED*** { /* 0-dim array or still array scalar */
\t\tPyObject *arr;
\t\tif (PyArray_Check(obj***REMOVED******REMOVED*** {
\t\t\tarr = PyArray_Cast((PyArrayObject ****REMOVED***obj, NPY_CDOUBLE***REMOVED***;
\t\t***REMOVED***
\t\telse {
\t\t\tarr = PyArray_FromScalar(obj, PyArray_DescrFromType(NPY_CDOUBLE***REMOVED******REMOVED***;
\t\t***REMOVED***
\t\tif (arr==NULL***REMOVED*** return 0;
\t\t(*v***REMOVED***.r = ((npy_cdouble ****REMOVED***PyArray_DATA(arr***REMOVED******REMOVED***->real;
\t\t(*v***REMOVED***.i = ((npy_cdouble ****REMOVED***PyArray_DATA(arr***REMOVED******REMOVED***->imag;
\t\treturn 1;
\t***REMOVED***
\t/* Python does not provide PyNumber_Complex function :-( */
\t(*v***REMOVED***.i=0.0;
\tif (PyFloat_Check(obj***REMOVED******REMOVED*** {
#ifdef __sgi
\t\t(*v***REMOVED***.r = PyFloat_AsDouble(obj***REMOVED***;
#else
\t\t(*v***REMOVED***.r = PyFloat_AS_DOUBLE(obj***REMOVED***;
#endif
\t\treturn 1;
\t***REMOVED***
\tif (PyInt_Check(obj***REMOVED******REMOVED*** {
\t\t(*v***REMOVED***.r = (double***REMOVED***PyInt_AS_LONG(obj***REMOVED***;
\t\treturn 1;
\t***REMOVED***
\tif (PyLong_Check(obj***REMOVED******REMOVED*** {
\t\t(*v***REMOVED***.r = PyLong_AsDouble(obj***REMOVED***;
\t\treturn (!PyErr_Occurred(***REMOVED******REMOVED***;
\t***REMOVED***
\tif (PySequence_Check(obj***REMOVED*** && !(PyString_Check(obj***REMOVED*** || PyUnicode_Check(obj***REMOVED******REMOVED******REMOVED*** {
\t\tPyObject *tmp = PySequence_GetItem(obj,0***REMOVED***;
\t\tif (tmp***REMOVED*** {
\t\t\tif (complex_double_from_pyobj(v,tmp,errmess***REMOVED******REMOVED*** {
\t\t\t\tPy_DECREF(tmp***REMOVED***;
\t\t\t\treturn 1;
\t\t\t***REMOVED***
\t\t\tPy_DECREF(tmp***REMOVED***;
\t\t***REMOVED***
\t***REMOVED***
\t{
\t\tPyObject* err = PyErr_Occurred(***REMOVED***;
\t\tif (err==NULL***REMOVED***
\t\t\terr = PyExc_TypeError;
\t\tPyErr_SetString(err,errmess***REMOVED***;
\t***REMOVED***
\treturn 0;
***REMOVED***
***REMOVED***
needs['complex_float_from_pyobj'***REMOVED*** = [
    'complex_float', 'complex_double_from_pyobj'***REMOVED***
cfuncs['complex_float_from_pyobj'***REMOVED*** = ***REMOVED***\
static int complex_float_from_pyobj(complex_float* v,PyObject *obj,const char *errmess***REMOVED*** {
\tcomplex_double cd={0.0,0.0***REMOVED***;
\tif (complex_double_from_pyobj(&cd,obj,errmess***REMOVED******REMOVED*** {
\t\t(*v***REMOVED***.r = (float***REMOVED***cd.r;
\t\t(*v***REMOVED***.i = (float***REMOVED***cd.i;
\t\treturn 1;
\t***REMOVED***
\treturn 0;
***REMOVED***
***REMOVED***
needs['try_pyarr_from_char'***REMOVED*** = ['pyobj_from_char1', 'TRYPYARRAYTEMPLATE'***REMOVED***
cfuncs[
    'try_pyarr_from_char'***REMOVED*** = 'static int try_pyarr_from_char(PyObject* obj,char* v***REMOVED*** {\n\tTRYPYARRAYTEMPLATE(char,\'c\'***REMOVED***;\n***REMOVED***\n'
needs['try_pyarr_from_signed_char'***REMOVED*** = ['TRYPYARRAYTEMPLATE', 'unsigned_char'***REMOVED***
cfuncs[
    'try_pyarr_from_unsigned_char'***REMOVED*** = 'static int try_pyarr_from_unsigned_char(PyObject* obj,unsigned_char* v***REMOVED*** {\n\tTRYPYARRAYTEMPLATE(unsigned_char,\'b\'***REMOVED***;\n***REMOVED***\n'
needs['try_pyarr_from_signed_char'***REMOVED*** = ['TRYPYARRAYTEMPLATE', 'signed_char'***REMOVED***
cfuncs[
    'try_pyarr_from_signed_char'***REMOVED*** = 'static int try_pyarr_from_signed_char(PyObject* obj,signed_char* v***REMOVED*** {\n\tTRYPYARRAYTEMPLATE(signed_char,\'1\'***REMOVED***;\n***REMOVED***\n'
needs['try_pyarr_from_short'***REMOVED*** = ['pyobj_from_short1', 'TRYPYARRAYTEMPLATE'***REMOVED***
cfuncs[
    'try_pyarr_from_short'***REMOVED*** = 'static int try_pyarr_from_short(PyObject* obj,short* v***REMOVED*** {\n\tTRYPYARRAYTEMPLATE(short,\'s\'***REMOVED***;\n***REMOVED***\n'
needs['try_pyarr_from_int'***REMOVED*** = ['pyobj_from_int1', 'TRYPYARRAYTEMPLATE'***REMOVED***
cfuncs[
    'try_pyarr_from_int'***REMOVED*** = 'static int try_pyarr_from_int(PyObject* obj,int* v***REMOVED*** {\n\tTRYPYARRAYTEMPLATE(int,\'i\'***REMOVED***;\n***REMOVED***\n'
needs['try_pyarr_from_long'***REMOVED*** = ['pyobj_from_long1', 'TRYPYARRAYTEMPLATE'***REMOVED***
cfuncs[
    'try_pyarr_from_long'***REMOVED*** = 'static int try_pyarr_from_long(PyObject* obj,long* v***REMOVED*** {\n\tTRYPYARRAYTEMPLATE(long,\'l\'***REMOVED***;\n***REMOVED***\n'
needs['try_pyarr_from_long_long'***REMOVED*** = [
    'pyobj_from_long_long1', 'TRYPYARRAYTEMPLATE', 'long_long'***REMOVED***
cfuncs[
    'try_pyarr_from_long_long'***REMOVED*** = 'static int try_pyarr_from_long_long(PyObject* obj,long_long* v***REMOVED*** {\n\tTRYPYARRAYTEMPLATE(long_long,\'L\'***REMOVED***;\n***REMOVED***\n'
needs['try_pyarr_from_float'***REMOVED*** = ['pyobj_from_float1', 'TRYPYARRAYTEMPLATE'***REMOVED***
cfuncs[
    'try_pyarr_from_float'***REMOVED*** = 'static int try_pyarr_from_float(PyObject* obj,float* v***REMOVED*** {\n\tTRYPYARRAYTEMPLATE(float,\'f\'***REMOVED***;\n***REMOVED***\n'
needs['try_pyarr_from_double'***REMOVED*** = ['pyobj_from_double1', 'TRYPYARRAYTEMPLATE'***REMOVED***
cfuncs[
    'try_pyarr_from_double'***REMOVED*** = 'static int try_pyarr_from_double(PyObject* obj,double* v***REMOVED*** {\n\tTRYPYARRAYTEMPLATE(double,\'d\'***REMOVED***;\n***REMOVED***\n'
needs['try_pyarr_from_complex_float'***REMOVED*** = [
    'pyobj_from_complex_float1', 'TRYCOMPLEXPYARRAYTEMPLATE', 'complex_float'***REMOVED***
cfuncs[
    'try_pyarr_from_complex_float'***REMOVED*** = 'static int try_pyarr_from_complex_float(PyObject* obj,complex_float* v***REMOVED*** {\n\tTRYCOMPLEXPYARRAYTEMPLATE(float,\'F\'***REMOVED***;\n***REMOVED***\n'
needs['try_pyarr_from_complex_double'***REMOVED*** = [
    'pyobj_from_complex_double1', 'TRYCOMPLEXPYARRAYTEMPLATE', 'complex_double'***REMOVED***
cfuncs[
    'try_pyarr_from_complex_double'***REMOVED*** = 'static int try_pyarr_from_complex_double(PyObject* obj,complex_double* v***REMOVED*** {\n\tTRYCOMPLEXPYARRAYTEMPLATE(double,\'D\'***REMOVED***;\n***REMOVED***\n'

needs['create_cb_arglist'***REMOVED*** = ['CFUNCSMESS', 'PRINTPYOBJERR', 'MINMAX'***REMOVED***
cfuncs['create_cb_arglist'***REMOVED*** = ***REMOVED***\
static int create_cb_arglist(PyObject* fun,PyTupleObject* xa,const int maxnofargs,const int nofoptargs,int *nofargs,PyTupleObject **args,const char *errmess***REMOVED*** {
\tPyObject *tmp = NULL;
\tPyObject *tmp_fun = NULL;
\tint tot,opt,ext,siz,i,di=0;
\tCFUNCSMESS(\"create_cb_arglist\\n\"***REMOVED***;
\ttot=opt=ext=siz=0;
\t/* Get the total number of arguments */
\tif (PyFunction_Check(fun***REMOVED******REMOVED***
\t\ttmp_fun = fun;
\telse {
\t\tdi = 1;
\t\tif (PyObject_HasAttrString(fun,\"im_func\"***REMOVED******REMOVED*** {
\t\t\ttmp_fun = PyObject_GetAttrString(fun,\"im_func\"***REMOVED***;
\t\t***REMOVED***
\t\telse if (PyObject_HasAttrString(fun,\"__call__\"***REMOVED******REMOVED*** {
\t\t\ttmp = PyObject_GetAttrString(fun,\"__call__\"***REMOVED***;
\t\t\tif (PyObject_HasAttrString(tmp,\"im_func\"***REMOVED******REMOVED***
\t\t\t\ttmp_fun = PyObject_GetAttrString(tmp,\"im_func\"***REMOVED***;
\t\t\telse {
\t\t\t\ttmp_fun = fun; /* built-in function */
\t\t\t\ttot = maxnofargs;
\t\t\t\tif (xa != NULL***REMOVED***
\t\t\t\t\ttot += PyTuple_Size((PyObject ****REMOVED***xa***REMOVED***;
\t\t\t***REMOVED***
\t\t\tPy_XDECREF(tmp***REMOVED***;
\t\t***REMOVED***
\t\telse if (PyFortran_Check(fun***REMOVED*** || PyFortran_Check1(fun***REMOVED******REMOVED*** {
\t\t\ttot = maxnofargs;
\t\t\tif (xa != NULL***REMOVED***
\t\t\t\ttot += PyTuple_Size((PyObject ****REMOVED***xa***REMOVED***;
\t\t\ttmp_fun = fun;
\t\t***REMOVED***
\t\telse if (F2PyCapsule_Check(fun***REMOVED******REMOVED*** {
\t\t\ttot = maxnofargs;
\t\t\tif (xa != NULL***REMOVED***
\t\t\t\text = PyTuple_Size((PyObject ****REMOVED***xa***REMOVED***;
\t\t\tif(ext>0***REMOVED*** {
\t\t\t\tfprintf(stderr,\"extra arguments tuple cannot be used with CObject call-back\\n\"***REMOVED***;
\t\t\t\tgoto capi_fail;
\t\t\t***REMOVED***
\t\t\ttmp_fun = fun;
\t\t***REMOVED***
\t***REMOVED***
if (tmp_fun==NULL***REMOVED*** {
fprintf(stderr,\"Call-back argument must be function|instance|instance.__call__|f2py-function but got %s.\\n\",(fun==NULL?\"NULL\":Py_TYPE(fun***REMOVED***->tp_name***REMOVED******REMOVED***;
goto capi_fail;
***REMOVED***
#if PY_VERSION_HEX >= 0x03000000
\tif (PyObject_HasAttrString(tmp_fun,\"__code__\"***REMOVED******REMOVED*** {
\t\tif (PyObject_HasAttrString(tmp = PyObject_GetAttrString(tmp_fun,\"__code__\"***REMOVED***,\"co_argcount\"***REMOVED******REMOVED***
#else
\tif (PyObject_HasAttrString(tmp_fun,\"func_code\"***REMOVED******REMOVED*** {
\t\tif (PyObject_HasAttrString(tmp = PyObject_GetAttrString(tmp_fun,\"func_code\"***REMOVED***,\"co_argcount\"***REMOVED******REMOVED***
#endif
\t\t\ttot = PyInt_AsLong(PyObject_GetAttrString(tmp,\"co_argcount\"***REMOVED******REMOVED*** - di;
\t\tPy_XDECREF(tmp***REMOVED***;
\t***REMOVED***
\t/* Get the number of optional arguments */
#if PY_VERSION_HEX >= 0x03000000
\tif (PyObject_HasAttrString(tmp_fun,\"__defaults__\"***REMOVED******REMOVED*** {
\t\tif (PyTuple_Check(tmp = PyObject_GetAttrString(tmp_fun,\"__defaults__\"***REMOVED******REMOVED******REMOVED***
#else
\tif (PyObject_HasAttrString(tmp_fun,\"func_defaults\"***REMOVED******REMOVED*** {
\t\tif (PyTuple_Check(tmp = PyObject_GetAttrString(tmp_fun,\"func_defaults\"***REMOVED******REMOVED******REMOVED***
#endif
\t\t\topt = PyTuple_Size(tmp***REMOVED***;
\t\tPy_XDECREF(tmp***REMOVED***;
\t***REMOVED***
\t/* Get the number of extra arguments */
\tif (xa != NULL***REMOVED***
\t\text = PyTuple_Size((PyObject ****REMOVED***xa***REMOVED***;
\t/* Calculate the size of call-backs argument list */
\tsiz = MIN(maxnofargs+ext,tot***REMOVED***;
\t*nofargs = MAX(0,siz-ext***REMOVED***;
#ifdef DEBUGCFUNCS
\tfprintf(stderr,\"debug-capi:create_cb_arglist:maxnofargs(-nofoptargs***REMOVED***,tot,opt,ext,siz,nofargs=%d(-%d***REMOVED***,%d,%d,%d,%d,%d\\n\",maxnofargs,nofoptargs,tot,opt,ext,siz,*nofargs***REMOVED***;
#endif
\tif (siz<tot-opt***REMOVED*** {
\t\tfprintf(stderr,\"create_cb_arglist: Failed to build argument list (siz***REMOVED*** with enough arguments (tot-opt***REMOVED*** required by user-supplied function (siz,tot,opt=%d,%d,%d***REMOVED***.\\n\",siz,tot,opt***REMOVED***;
\t\tgoto capi_fail;
\t***REMOVED***
\t/* Initialize argument list */
\t*args = (PyTupleObject ****REMOVED***PyTuple_New(siz***REMOVED***;
\tfor (i=0;i<*nofargs;i++***REMOVED*** {
\t\tPy_INCREF(Py_None***REMOVED***;
\t\tPyTuple_SET_ITEM((PyObject ****REMOVED***(*args***REMOVED***,i,Py_None***REMOVED***;
\t***REMOVED***
\tif (xa != NULL***REMOVED***
\t\tfor (i=(*nofargs***REMOVED***;i<siz;i++***REMOVED*** {
\t\t\ttmp = PyTuple_GetItem((PyObject ****REMOVED***xa,i-(*nofargs***REMOVED******REMOVED***;
\t\t\tPy_INCREF(tmp***REMOVED***;
\t\t\tPyTuple_SET_ITEM(*args,i,tmp***REMOVED***;
\t\t***REMOVED***
\tCFUNCSMESS(\"create_cb_arglist-end\\n\"***REMOVED***;
\treturn 1;
capi_fail:
\tif ((PyErr_Occurred(***REMOVED******REMOVED***==NULL***REMOVED***
\t\tPyErr_SetString(#modulename#_error,errmess***REMOVED***;
\treturn 0;
***REMOVED***
***REMOVED***


def buildcfuncs(***REMOVED***:
    from .capi_maps import c2capi_map
    for k in c2capi_map.keys(***REMOVED***:
        m = 'pyarr_from_p_%s1' % k
        cppmacros[
            m***REMOVED*** = '#define %s(v***REMOVED*** (PyArray_SimpleNewFromData(0,NULL,%s,(char ****REMOVED***v***REMOVED******REMOVED***' % (m, c2capi_map[k***REMOVED******REMOVED***
    k = 'string'
    m = 'pyarr_from_p_%s1' % k
    cppmacros[
        m***REMOVED*** = '#define %s(v,dims***REMOVED*** (PyArray_SimpleNewFromData(1,dims,NPY_CHAR,(char ****REMOVED***v***REMOVED******REMOVED***' % (m***REMOVED***


############ Auxiliary functions for sorting needs ###################

def append_needs(need, flag=1***REMOVED***:
    global outneeds, needs
    if isinstance(need, list***REMOVED***:
        for n in need:
            append_needs(n, flag***REMOVED***
    elif isinstance(need, str***REMOVED***:
        if not need:
            return
        if need in includes0:
            n = 'includes0'
        elif need in includes:
            n = 'includes'
        elif need in typedefs:
            n = 'typedefs'
        elif need in typedefs_generated:
            n = 'typedefs_generated'
        elif need in cppmacros:
            n = 'cppmacros'
        elif need in cfuncs:
            n = 'cfuncs'
        elif need in callbacks:
            n = 'callbacks'
        elif need in f90modhooks:
            n = 'f90modhooks'
        elif need in commonhooks:
            n = 'commonhooks'
        else:
            errmess('append_needs: unknown need %s\n' % (repr(need***REMOVED******REMOVED******REMOVED***
            return
        if need in outneeds[n***REMOVED***:
            return
        if flag:
            tmp = {***REMOVED***
            if need in needs:
                for nn in needs[need***REMOVED***:
                    t = append_needs(nn, 0***REMOVED***
                    if isinstance(t, dict***REMOVED***:
                        for nnn in t.keys(***REMOVED***:
                            if nnn in tmp:
                                tmp[nnn***REMOVED*** = tmp[nnn***REMOVED*** + t[nnn***REMOVED***
                            else:
                                tmp[nnn***REMOVED*** = t[nnn***REMOVED***
            for nn in tmp.keys(***REMOVED***:
                for nnn in tmp[nn***REMOVED***:
                    if nnn not in outneeds[nn***REMOVED***:
                        outneeds[nn***REMOVED*** = [nnn***REMOVED*** + outneeds[nn***REMOVED***
            outneeds[n***REMOVED***.append(need***REMOVED***
        else:
            tmp = {***REMOVED***
            if need in needs:
                for nn in needs[need***REMOVED***:
                    t = append_needs(nn, flag***REMOVED***
                    if isinstance(t, dict***REMOVED***:
                        for nnn in t.keys(***REMOVED***:
                            if nnn in tmp:
                                tmp[nnn***REMOVED*** = t[nnn***REMOVED*** + tmp[nnn***REMOVED***
                            else:
                                tmp[nnn***REMOVED*** = t[nnn***REMOVED***
            if n not in tmp:
                tmp[n***REMOVED*** = [***REMOVED***
            tmp[n***REMOVED***.append(need***REMOVED***
            return tmp
    else:
        errmess('append_needs: expected list or string but got :%s\n' %
                (repr(need***REMOVED******REMOVED******REMOVED***


def get_needs(***REMOVED***:
    global outneeds, needs
    res = {***REMOVED***
    for n in outneeds.keys(***REMOVED***:
        out = [***REMOVED***
        saveout = copy.copy(outneeds[n***REMOVED******REMOVED***
        while len(outneeds[n***REMOVED******REMOVED*** > 0:
            if outneeds[n***REMOVED***[0***REMOVED*** not in needs:
                out.append(outneeds[n***REMOVED***[0***REMOVED******REMOVED***
                del outneeds[n***REMOVED***[0***REMOVED***
            else:
                flag = 0
                for k in outneeds[n***REMOVED***[1:***REMOVED***:
                    if k in needs[outneeds[n***REMOVED***[0***REMOVED******REMOVED***:
                        flag = 1
                        break
                if flag:
                    outneeds[n***REMOVED*** = outneeds[n***REMOVED***[1:***REMOVED*** + [outneeds[n***REMOVED***[0***REMOVED******REMOVED***
                else:
                    out.append(outneeds[n***REMOVED***[0***REMOVED******REMOVED***
                    del outneeds[n***REMOVED***[0***REMOVED***
            if saveout and (0 not in map(lambda x, y: x == y, saveout, outneeds[n***REMOVED******REMOVED******REMOVED*** \
                    and outneeds[n***REMOVED*** != [***REMOVED***:
                print(n, saveout***REMOVED***
                errmess(
                    'get_needs: no progress in sorting needs, probably circular dependence, skipping.\n'***REMOVED***
                out = out + saveout
                break
            saveout = copy.copy(outneeds[n***REMOVED******REMOVED***
        if out == [***REMOVED***:
            out = [n***REMOVED***
        res[n***REMOVED*** = out
    return res
