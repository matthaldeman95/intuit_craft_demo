from __future__ import division, absolute_import, print_function

from numpy import array
from numpy.compat import long
from numpy.testing import run_module_suite, assert_, assert_raises, dec
import util


class TestReturnInteger(util.F2PyTest***REMOVED***:

    def check_function(self, t***REMOVED***:
        assert_(t(123***REMOVED*** == 123, repr(t(123***REMOVED******REMOVED******REMOVED***
        assert_(t(123.6***REMOVED*** == 123***REMOVED***
        assert_(t(long(123***REMOVED******REMOVED*** == 123***REMOVED***
        assert_(t('123'***REMOVED*** == 123***REMOVED***
        assert_(t(-123***REMOVED*** == -123***REMOVED***
        assert_(t([123***REMOVED******REMOVED*** == 123***REMOVED***
        assert_(t((123,***REMOVED******REMOVED*** == 123***REMOVED***
        assert_(t(array(123***REMOVED******REMOVED*** == 123***REMOVED***
        assert_(t(array([123***REMOVED******REMOVED******REMOVED*** == 123***REMOVED***
        assert_(t(array([[123***REMOVED******REMOVED******REMOVED******REMOVED*** == 123***REMOVED***
        assert_(t(array([123***REMOVED***, 'b'***REMOVED******REMOVED*** == 123***REMOVED***
        assert_(t(array([123***REMOVED***, 'h'***REMOVED******REMOVED*** == 123***REMOVED***
        assert_(t(array([123***REMOVED***, 'i'***REMOVED******REMOVED*** == 123***REMOVED***
        assert_(t(array([123***REMOVED***, 'l'***REMOVED******REMOVED*** == 123***REMOVED***
        assert_(t(array([123***REMOVED***, 'B'***REMOVED******REMOVED*** == 123***REMOVED***
        assert_(t(array([123***REMOVED***, 'f'***REMOVED******REMOVED*** == 123***REMOVED***
        assert_(t(array([123***REMOVED***, 'd'***REMOVED******REMOVED*** == 123***REMOVED***

        #assert_raises(ValueError, t, array([123***REMOVED***,'S3'***REMOVED******REMOVED***
        assert_raises(ValueError, t, 'abc'***REMOVED***

        assert_raises(IndexError, t, [***REMOVED******REMOVED***
        assert_raises(IndexError, t, (***REMOVED******REMOVED***

        assert_raises(Exception, t, t***REMOVED***
        assert_raises(Exception, t, {***REMOVED******REMOVED***

        if t.__doc__.split(***REMOVED***[0***REMOVED*** in ['t8', 's8'***REMOVED***:
            assert_raises(OverflowError, t, 100000000000000000000000***REMOVED***
            assert_raises(OverflowError, t, 10000000011111111111111.23***REMOVED***


class TestF77ReturnInteger(TestReturnInteger***REMOVED***:
    code = ***REMOVED***
       function t0(value***REMOVED***
         integer value
         integer t0
         t0 = value
       end
       function t1(value***REMOVED***
         integer*1 value
         integer*1 t1
         t1 = value
       end
       function t2(value***REMOVED***
         integer*2 value
         integer*2 t2
         t2 = value
       end
       function t4(value***REMOVED***
         integer*4 value
         integer*4 t4
         t4 = value
       end
       function t8(value***REMOVED***
         integer*8 value
         integer*8 t8
         t8 = value
       end

       subroutine s0(t0,value***REMOVED***
         integer value
         integer t0
cf2py    intent(out***REMOVED*** t0
         t0 = value
       end
       subroutine s1(t1,value***REMOVED***
         integer*1 value
         integer*1 t1
cf2py    intent(out***REMOVED*** t1
         t1 = value
       end
       subroutine s2(t2,value***REMOVED***
         integer*2 value
         integer*2 t2
cf2py    intent(out***REMOVED*** t2
         t2 = value
       end
       subroutine s4(t4,value***REMOVED***
         integer*4 value
         integer*4 t4
cf2py    intent(out***REMOVED*** t4
         t4 = value
       end
       subroutine s8(t8,value***REMOVED***
         integer*8 value
         integer*8 t8
cf2py    intent(out***REMOVED*** t8
         t8 = value
       end
    ***REMOVED***

    @dec.slow
    def test_all(self***REMOVED***:
        for name in "t0,t1,t2,t4,t8,s0,s1,s2,s4,s8".split(","***REMOVED***:
            self.check_function(getattr(self.module, name***REMOVED******REMOVED***


class TestF90ReturnInteger(TestReturnInteger***REMOVED***:
    suffix = ".f90"
    code = ***REMOVED***
module f90_return_integer
  contains
       function t0(value***REMOVED***
         integer :: value
         integer :: t0
         t0 = value
       end function t0
       function t1(value***REMOVED***
         integer(kind=1***REMOVED*** :: value
         integer(kind=1***REMOVED*** :: t1
         t1 = value
       end function t1
       function t2(value***REMOVED***
         integer(kind=2***REMOVED*** :: value
         integer(kind=2***REMOVED*** :: t2
         t2 = value
       end function t2
       function t4(value***REMOVED***
         integer(kind=4***REMOVED*** :: value
         integer(kind=4***REMOVED*** :: t4
         t4 = value
       end function t4
       function t8(value***REMOVED***
         integer(kind=8***REMOVED*** :: value
         integer(kind=8***REMOVED*** :: t8
         t8 = value
       end function t8

       subroutine s0(t0,value***REMOVED***
         integer :: value
         integer :: t0
!f2py    intent(out***REMOVED*** t0
         t0 = value
       end subroutine s0
       subroutine s1(t1,value***REMOVED***
         integer(kind=1***REMOVED*** :: value
         integer(kind=1***REMOVED*** :: t1
!f2py    intent(out***REMOVED*** t1
         t1 = value
       end subroutine s1
       subroutine s2(t2,value***REMOVED***
         integer(kind=2***REMOVED*** :: value
         integer(kind=2***REMOVED*** :: t2
!f2py    intent(out***REMOVED*** t2
         t2 = value
       end subroutine s2
       subroutine s4(t4,value***REMOVED***
         integer(kind=4***REMOVED*** :: value
         integer(kind=4***REMOVED*** :: t4
!f2py    intent(out***REMOVED*** t4
         t4 = value
       end subroutine s4
       subroutine s8(t8,value***REMOVED***
         integer(kind=8***REMOVED*** :: value
         integer(kind=8***REMOVED*** :: t8
!f2py    intent(out***REMOVED*** t8
         t8 = value
       end subroutine s8
end module f90_return_integer
    ***REMOVED***

    @dec.slow
    def test_all(self***REMOVED***:
        for name in "t0,t1,t2,t4,t8,s0,s1,s2,s4,s8".split(","***REMOVED***:
            self.check_function(getattr(self.module.f90_return_integer, name***REMOVED******REMOVED***

if __name__ == "__main__":
    run_module_suite(***REMOVED***
