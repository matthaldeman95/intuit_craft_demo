from __future__ import division, absolute_import, print_function

from numpy import array
from numpy.compat import asbytes
from numpy.testing import run_module_suite, assert_, dec
import util


class TestReturnCharacter(util.F2PyTest***REMOVED***:

    def check_function(self, t***REMOVED***:
        tname = t.__doc__.split(***REMOVED***[0***REMOVED***
        if tname in ['t0', 't1', 's0', 's1'***REMOVED***:
            assert_(t(23***REMOVED*** == asbytes('2'***REMOVED******REMOVED***
            r = t('ab'***REMOVED***
            assert_(r == asbytes('a'***REMOVED***, repr(r***REMOVED******REMOVED***
            r = t(array('ab'***REMOVED******REMOVED***
            assert_(r == asbytes('a'***REMOVED***, repr(r***REMOVED******REMOVED***
            r = t(array(77, 'u1'***REMOVED******REMOVED***
            assert_(r == asbytes('M'***REMOVED***, repr(r***REMOVED******REMOVED***
            #assert_(_raises(ValueError, t, array([77,87***REMOVED******REMOVED******REMOVED******REMOVED***
            #assert_(_raises(ValueError, t, array(77***REMOVED******REMOVED******REMOVED***
        elif tname in ['ts', 'ss'***REMOVED***:
            assert_(t(23***REMOVED*** == asbytes('23        '***REMOVED***, repr(t(23***REMOVED******REMOVED******REMOVED***
            assert_(t('123456789abcdef'***REMOVED*** == asbytes('123456789a'***REMOVED******REMOVED***
        elif tname in ['t5', 's5'***REMOVED***:
            assert_(t(23***REMOVED*** == asbytes('23   '***REMOVED***, repr(t(23***REMOVED******REMOVED******REMOVED***
            assert_(t('ab'***REMOVED*** == asbytes('ab   '***REMOVED***, repr(t('ab'***REMOVED******REMOVED******REMOVED***
            assert_(t('123456789abcdef'***REMOVED*** == asbytes('12345'***REMOVED******REMOVED***
        else:
            raise NotImplementedError


class TestF77ReturnCharacter(TestReturnCharacter***REMOVED***:
    code = ***REMOVED***
       function t0(value***REMOVED***
         character value
         character t0
         t0 = value
       end
       function t1(value***REMOVED***
         character*1 value
         character*1 t1
         t1 = value
       end
       function t5(value***REMOVED***
         character*5 value
         character*5 t5
         t5 = value
       end
       function ts(value***REMOVED***
         character*(****REMOVED*** value
         character*(****REMOVED*** ts
         ts = value
       end

       subroutine s0(t0,value***REMOVED***
         character value
         character t0
cf2py    intent(out***REMOVED*** t0
         t0 = value
       end
       subroutine s1(t1,value***REMOVED***
         character*1 value
         character*1 t1
cf2py    intent(out***REMOVED*** t1
         t1 = value
       end
       subroutine s5(t5,value***REMOVED***
         character*5 value
         character*5 t5
cf2py    intent(out***REMOVED*** t5
         t5 = value
       end
       subroutine ss(ts,value***REMOVED***
         character*(****REMOVED*** value
         character*10 ts
cf2py    intent(out***REMOVED*** ts
         ts = value
       end
    ***REMOVED***

    @dec.slow
    def test_all(self***REMOVED***:
        for name in "t0,t1,t5,s0,s1,s5,ss".split(","***REMOVED***:
            self.check_function(getattr(self.module, name***REMOVED******REMOVED***


class TestF90ReturnCharacter(TestReturnCharacter***REMOVED***:
    suffix = ".f90"
    code = ***REMOVED***
module f90_return_char
  contains
       function t0(value***REMOVED***
         character :: value
         character :: t0
         t0 = value
       end function t0
       function t1(value***REMOVED***
         character(len=1***REMOVED*** :: value
         character(len=1***REMOVED*** :: t1
         t1 = value
       end function t1
       function t5(value***REMOVED***
         character(len=5***REMOVED*** :: value
         character(len=5***REMOVED*** :: t5
         t5 = value
       end function t5
       function ts(value***REMOVED***
         character(len=****REMOVED*** :: value
         character(len=10***REMOVED*** :: ts
         ts = value
       end function ts

       subroutine s0(t0,value***REMOVED***
         character :: value
         character :: t0
!f2py    intent(out***REMOVED*** t0
         t0 = value
       end subroutine s0
       subroutine s1(t1,value***REMOVED***
         character(len=1***REMOVED*** :: value
         character(len=1***REMOVED*** :: t1
!f2py    intent(out***REMOVED*** t1
         t1 = value
       end subroutine s1
       subroutine s5(t5,value***REMOVED***
         character(len=5***REMOVED*** :: value
         character(len=5***REMOVED*** :: t5
!f2py    intent(out***REMOVED*** t5
         t5 = value
       end subroutine s5
       subroutine ss(ts,value***REMOVED***
         character(len=****REMOVED*** :: value
         character(len=10***REMOVED*** :: ts
!f2py    intent(out***REMOVED*** ts
         ts = value
       end subroutine ss
end module f90_return_char
    ***REMOVED***

    @dec.slow
    def test_all(self***REMOVED***:
        for name in "t0,t1,t5,ts,s0,s1,s5,ss".split(","***REMOVED***:
            self.check_function(getattr(self.module.f90_return_char, name***REMOVED******REMOVED***

if __name__ == "__main__":
    run_module_suite(***REMOVED***
