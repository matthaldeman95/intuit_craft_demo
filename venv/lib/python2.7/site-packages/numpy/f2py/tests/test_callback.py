from __future__ import division, absolute_import, print_function

import math
import textwrap

from numpy import array
from numpy.testing import run_module_suite, assert_, assert_equal, dec
import util


class TestF77Callback(util.F2PyTest***REMOVED***:
    code = ***REMOVED***
       subroutine t(fun,a***REMOVED***
       integer a
cf2py  intent(out***REMOVED*** a
       external fun
       call fun(a***REMOVED***
       end

       subroutine func(a***REMOVED***
cf2py  intent(in,out***REMOVED*** a
       integer a
       a = a + 11
       end

       subroutine func0(a***REMOVED***
cf2py  intent(out***REMOVED*** a
       integer a
       a = 11
       end

       subroutine t2(a***REMOVED***
cf2py  intent(callback***REMOVED*** fun
       integer a
cf2py  intent(out***REMOVED*** a
       external fun
       call fun(a***REMOVED***
       end

       subroutine string_callback(callback, a***REMOVED***
       external callback
       double precision callback
       double precision a
       character*1 r
cf2py  intent(out***REMOVED*** a
       r = 'r'
       a = callback(r***REMOVED***
       end

    ***REMOVED***

    @dec.slow
    def test_all(self***REMOVED***:
        for name in "t,t2".split(","***REMOVED***:
            self.check_function(name***REMOVED***

    @dec.slow
    def test_docstring(self***REMOVED***:
        expected = ***REMOVED***
        a = t(fun,[fun_extra_args***REMOVED******REMOVED***

        Wrapper for ``t``.

        Parameters
        ----------
        fun : call-back function

        Other Parameters
        ----------------
        fun_extra_args : input tuple, optional
            Default: (***REMOVED***

        Returns
        -------
        a : int

        Notes
        -----
        Call-back functions::

          def fun(***REMOVED***: return a
          Return objects:
            a : int
        ***REMOVED***
        assert_equal(self.module.t.__doc__, textwrap.dedent(expected***REMOVED***.lstrip(***REMOVED******REMOVED***

    def check_function(self, name***REMOVED***:
        t = getattr(self.module, name***REMOVED***
        r = t(lambda: 4***REMOVED***
        assert_(r == 4, repr(r***REMOVED******REMOVED***
        r = t(lambda a: 5, fun_extra_args=(6,***REMOVED******REMOVED***
        assert_(r == 5, repr(r***REMOVED******REMOVED***
        r = t(lambda a: a, fun_extra_args=(6,***REMOVED******REMOVED***
        assert_(r == 6, repr(r***REMOVED******REMOVED***
        r = t(lambda a: 5 + a, fun_extra_args=(7,***REMOVED******REMOVED***
        assert_(r == 12, repr(r***REMOVED******REMOVED***
        r = t(lambda a: math.degrees(a***REMOVED***, fun_extra_args=(math.pi,***REMOVED******REMOVED***
        assert_(r == 180, repr(r***REMOVED******REMOVED***
        r = t(math.degrees, fun_extra_args=(math.pi,***REMOVED******REMOVED***
        assert_(r == 180, repr(r***REMOVED******REMOVED***

        r = t(self.module.func, fun_extra_args=(6,***REMOVED******REMOVED***
        assert_(r == 17, repr(r***REMOVED******REMOVED***
        r = t(self.module.func0***REMOVED***
        assert_(r == 11, repr(r***REMOVED******REMOVED***
        r = t(self.module.func0._cpointer***REMOVED***
        assert_(r == 11, repr(r***REMOVED******REMOVED***

        class A(object***REMOVED***:

            def __call__(self***REMOVED***:
                return 7

            def mth(self***REMOVED***:
                return 9
        a = A(***REMOVED***
        r = t(a***REMOVED***
        assert_(r == 7, repr(r***REMOVED******REMOVED***
        r = t(a.mth***REMOVED***
        assert_(r == 9, repr(r***REMOVED******REMOVED***

    def test_string_callback(self***REMOVED***:

        def callback(code***REMOVED***:
            if code == 'r':
                return 0
            else:
                return 1

        f = getattr(self.module, 'string_callback'***REMOVED***
        r = f(callback***REMOVED***
        assert_(r == 0, repr(r***REMOVED******REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
