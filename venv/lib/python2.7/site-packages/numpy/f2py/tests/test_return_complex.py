from __future__ import division, absolute_import, print_function

from numpy import array
from numpy.compat import long
from numpy.testing import run_module_suite, assert_, assert_raises, dec
import util


class TestReturnComplex(util.F2PyTest***REMOVED***:

    def check_function(self, t***REMOVED***:
        tname = t.__doc__.split(***REMOVED***[0***REMOVED***
        if tname in ['t0', 't8', 's0', 's8'***REMOVED***:
            err = 1e-5
        else:
            err = 0.0
        assert_(abs(t(234j***REMOVED*** - 234.0j***REMOVED*** <= err***REMOVED***
        assert_(abs(t(234.6***REMOVED*** - 234.6***REMOVED*** <= err***REMOVED***
        assert_(abs(t(long(234***REMOVED******REMOVED*** - 234.0***REMOVED*** <= err***REMOVED***
        assert_(abs(t(234.6 + 3j***REMOVED*** - (234.6 + 3j***REMOVED******REMOVED*** <= err***REMOVED***
        #assert_( abs(t('234'***REMOVED***-234.***REMOVED***<=err***REMOVED***
        #assert_( abs(t('234.6'***REMOVED***-234.6***REMOVED***<=err***REMOVED***
        assert_(abs(t(-234***REMOVED*** + 234.***REMOVED*** <= err***REMOVED***
        assert_(abs(t([234***REMOVED******REMOVED*** - 234.***REMOVED*** <= err***REMOVED***
        assert_(abs(t((234,***REMOVED******REMOVED*** - 234.***REMOVED*** <= err***REMOVED***
        assert_(abs(t(array(234***REMOVED******REMOVED*** - 234.***REMOVED*** <= err***REMOVED***
        assert_(abs(t(array(23 + 4j, 'F'***REMOVED******REMOVED*** - (23 + 4j***REMOVED******REMOVED*** <= err***REMOVED***
        assert_(abs(t(array([234***REMOVED******REMOVED******REMOVED*** - 234.***REMOVED*** <= err***REMOVED***
        assert_(abs(t(array([[234***REMOVED******REMOVED******REMOVED******REMOVED*** - 234.***REMOVED*** <= err***REMOVED***
        assert_(abs(t(array([234***REMOVED***, 'b'***REMOVED******REMOVED*** + 22.***REMOVED*** <= err***REMOVED***
        assert_(abs(t(array([234***REMOVED***, 'h'***REMOVED******REMOVED*** - 234.***REMOVED*** <= err***REMOVED***
        assert_(abs(t(array([234***REMOVED***, 'i'***REMOVED******REMOVED*** - 234.***REMOVED*** <= err***REMOVED***
        assert_(abs(t(array([234***REMOVED***, 'l'***REMOVED******REMOVED*** - 234.***REMOVED*** <= err***REMOVED***
        assert_(abs(t(array([234***REMOVED***, 'q'***REMOVED******REMOVED*** - 234.***REMOVED*** <= err***REMOVED***
        assert_(abs(t(array([234***REMOVED***, 'f'***REMOVED******REMOVED*** - 234.***REMOVED*** <= err***REMOVED***
        assert_(abs(t(array([234***REMOVED***, 'd'***REMOVED******REMOVED*** - 234.***REMOVED*** <= err***REMOVED***
        assert_(abs(t(array([234 + 3j***REMOVED***, 'F'***REMOVED******REMOVED*** - (234 + 3j***REMOVED******REMOVED*** <= err***REMOVED***
        assert_(abs(t(array([234***REMOVED***, 'D'***REMOVED******REMOVED*** - 234.***REMOVED*** <= err***REMOVED***

        #assert_raises(TypeError, t, array([234***REMOVED***, 'a1'***REMOVED******REMOVED***
        assert_raises(TypeError, t, 'abc'***REMOVED***

        assert_raises(IndexError, t, [***REMOVED******REMOVED***
        assert_raises(IndexError, t, (***REMOVED******REMOVED***

        assert_raises(TypeError, t, t***REMOVED***
        assert_raises(TypeError, t, {***REMOVED******REMOVED***

        ***REMOVED***
            r = t(10 ** 400***REMOVED***
            assert_(repr(r***REMOVED*** in ['(inf+0j***REMOVED***', '(Infinity+0j***REMOVED***'***REMOVED***, repr(r***REMOVED******REMOVED***
        except OverflowError:
            pass


class TestF77ReturnComplex(TestReturnComplex***REMOVED***:
    code = ***REMOVED***
       function t0(value***REMOVED***
         complex value
         complex t0
         t0 = value
       end
       function t8(value***REMOVED***
         complex*8 value
         complex*8 t8
         t8 = value
       end
       function t16(value***REMOVED***
         complex*16 value
         complex*16 t16
         t16 = value
       end
       function td(value***REMOVED***
         double complex value
         double complex td
         td = value
       end

       subroutine s0(t0,value***REMOVED***
         complex value
         complex t0
cf2py    intent(out***REMOVED*** t0
         t0 = value
       end
       subroutine s8(t8,value***REMOVED***
         complex*8 value
         complex*8 t8
cf2py    intent(out***REMOVED*** t8
         t8 = value
       end
       subroutine s16(t16,value***REMOVED***
         complex*16 value
         complex*16 t16
cf2py    intent(out***REMOVED*** t16
         t16 = value
       end
       subroutine sd(td,value***REMOVED***
         double complex value
         double complex td
cf2py    intent(out***REMOVED*** td
         td = value
       end
    ***REMOVED***

    @dec.slow
    def test_all(self***REMOVED***:
        for name in "t0,t8,t16,td,s0,s8,s16,sd".split(","***REMOVED***:
            self.check_function(getattr(self.module, name***REMOVED******REMOVED***


class TestF90ReturnComplex(TestReturnComplex***REMOVED***:
    suffix = ".f90"
    code = ***REMOVED***
module f90_return_complex
  contains
       function t0(value***REMOVED***
         complex :: value
         complex :: t0
         t0 = value
       end function t0
       function t8(value***REMOVED***
         complex(kind=4***REMOVED*** :: value
         complex(kind=4***REMOVED*** :: t8
         t8 = value
       end function t8
       function t16(value***REMOVED***
         complex(kind=8***REMOVED*** :: value
         complex(kind=8***REMOVED*** :: t16
         t16 = value
       end function t16
       function td(value***REMOVED***
         double complex :: value
         double complex :: td
         td = value
       end function td

       subroutine s0(t0,value***REMOVED***
         complex :: value
         complex :: t0
!f2py    intent(out***REMOVED*** t0
         t0 = value
       end subroutine s0
       subroutine s8(t8,value***REMOVED***
         complex(kind=4***REMOVED*** :: value
         complex(kind=4***REMOVED*** :: t8
!f2py    intent(out***REMOVED*** t8
         t8 = value
       end subroutine s8
       subroutine s16(t16,value***REMOVED***
         complex(kind=8***REMOVED*** :: value
         complex(kind=8***REMOVED*** :: t16
!f2py    intent(out***REMOVED*** t16
         t16 = value
       end subroutine s16
       subroutine sd(td,value***REMOVED***
         double complex :: value
         double complex :: td
!f2py    intent(out***REMOVED*** td
         td = value
       end subroutine sd
end module f90_return_complex
    ***REMOVED***

    @dec.slow
    def test_all(self***REMOVED***:
        for name in "t0,t8,t16,td,s0,s8,s16,sd".split(","***REMOVED***:
            self.check_function(getattr(self.module.f90_return_complex, name***REMOVED******REMOVED***

if __name__ == "__main__":
    run_module_suite(***REMOVED***
