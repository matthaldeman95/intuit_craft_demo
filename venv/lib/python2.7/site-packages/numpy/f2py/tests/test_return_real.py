from __future__ import division, absolute_import, print_function

from numpy import array
from numpy.compat import long
from numpy.testing import run_module_suite, assert_, assert_raises, dec
import util


class TestReturnReal(util.F2PyTest***REMOVED***:

    def check_function(self, t***REMOVED***:
        if t.__doc__.split(***REMOVED***[0***REMOVED*** in ['t0', 't4', 's0', 's4'***REMOVED***:
            err = 1e-5
        else:
            err = 0.0
        assert_(abs(t(234***REMOVED*** - 234.0***REMOVED*** <= err***REMOVED***
        assert_(abs(t(234.6***REMOVED*** - 234.6***REMOVED*** <= err***REMOVED***
        assert_(abs(t(long(234***REMOVED******REMOVED*** - 234.0***REMOVED*** <= err***REMOVED***
        assert_(abs(t('234'***REMOVED*** - 234***REMOVED*** <= err***REMOVED***
        assert_(abs(t('234.6'***REMOVED*** - 234.6***REMOVED*** <= err***REMOVED***
        assert_(abs(t(-234***REMOVED*** + 234***REMOVED*** <= err***REMOVED***
        assert_(abs(t([234***REMOVED******REMOVED*** - 234***REMOVED*** <= err***REMOVED***
        assert_(abs(t((234,***REMOVED******REMOVED*** - 234.***REMOVED*** <= err***REMOVED***
        assert_(abs(t(array(234***REMOVED******REMOVED*** - 234.***REMOVED*** <= err***REMOVED***
        assert_(abs(t(array([234***REMOVED******REMOVED******REMOVED*** - 234.***REMOVED*** <= err***REMOVED***
        assert_(abs(t(array([[234***REMOVED******REMOVED******REMOVED******REMOVED*** - 234.***REMOVED*** <= err***REMOVED***
        assert_(abs(t(array([234***REMOVED***, 'b'***REMOVED******REMOVED*** + 22***REMOVED*** <= err***REMOVED***
        assert_(abs(t(array([234***REMOVED***, 'h'***REMOVED******REMOVED*** - 234.***REMOVED*** <= err***REMOVED***
        assert_(abs(t(array([234***REMOVED***, 'i'***REMOVED******REMOVED*** - 234.***REMOVED*** <= err***REMOVED***
        assert_(abs(t(array([234***REMOVED***, 'l'***REMOVED******REMOVED*** - 234.***REMOVED*** <= err***REMOVED***
        assert_(abs(t(array([234***REMOVED***, 'B'***REMOVED******REMOVED*** - 234.***REMOVED*** <= err***REMOVED***
        assert_(abs(t(array([234***REMOVED***, 'f'***REMOVED******REMOVED*** - 234.***REMOVED*** <= err***REMOVED***
        assert_(abs(t(array([234***REMOVED***, 'd'***REMOVED******REMOVED*** - 234.***REMOVED*** <= err***REMOVED***
        if t.__doc__.split(***REMOVED***[0***REMOVED*** in ['t0', 't4', 's0', 's4'***REMOVED***:
            assert_(t(1e200***REMOVED*** == t(1e300***REMOVED******REMOVED***  # inf

        #assert_raises(ValueError, t, array([234***REMOVED***, 'S1'***REMOVED******REMOVED***
        assert_raises(ValueError, t, 'abc'***REMOVED***

        assert_raises(IndexError, t, [***REMOVED******REMOVED***
        assert_raises(IndexError, t, (***REMOVED******REMOVED***

        assert_raises(Exception, t, t***REMOVED***
        assert_raises(Exception, t, {***REMOVED******REMOVED***

        ***REMOVED***
            r = t(10 ** 400***REMOVED***
            assert_(repr(r***REMOVED*** in ['inf', 'Infinity'***REMOVED***, repr(r***REMOVED******REMOVED***
        except OverflowError:
            pass


class TestCReturnReal(TestReturnReal***REMOVED***:
    suffix = ".pyf"
    module_name = "c_ext_return_real"
    code = ***REMOVED***
python module c_ext_return_real
usercode \'\'\'
float t4(float value***REMOVED*** { return value; ***REMOVED***
void s4(float *t4, float value***REMOVED*** { *t4 = value; ***REMOVED***
double t8(double value***REMOVED*** { return value; ***REMOVED***
void s8(double *t8, double value***REMOVED*** { *t8 = value; ***REMOVED***
\'\'\'
interface
  function t4(value***REMOVED***
    real*4 intent(c***REMOVED*** :: t4,value
  end
  function t8(value***REMOVED***
    real*8 intent(c***REMOVED*** :: t8,value
  end
  subroutine s4(t4,value***REMOVED***
    intent(c***REMOVED*** s4
    real*4 intent(out***REMOVED*** :: t4
    real*4 intent(c***REMOVED*** :: value
  end
  subroutine s8(t8,value***REMOVED***
    intent(c***REMOVED*** s8
    real*8 intent(out***REMOVED*** :: t8
    real*8 intent(c***REMOVED*** :: value
  end
end interface
end python module c_ext_return_real
    ***REMOVED***

    @dec.slow
    def test_all(self***REMOVED***:
        for name in "t4,t8,s4,s8".split(","***REMOVED***:
            self.check_function(getattr(self.module, name***REMOVED******REMOVED***


class TestF77ReturnReal(TestReturnReal***REMOVED***:
    code = ***REMOVED***
       function t0(value***REMOVED***
         real value
         real t0
         t0 = value
       end
       function t4(value***REMOVED***
         real*4 value
         real*4 t4
         t4 = value
       end
       function t8(value***REMOVED***
         real*8 value
         real*8 t8
         t8 = value
       end
       function td(value***REMOVED***
         double precision value
         double precision td
         td = value
       end

       subroutine s0(t0,value***REMOVED***
         real value
         real t0
cf2py    intent(out***REMOVED*** t0
         t0 = value
       end
       subroutine s4(t4,value***REMOVED***
         real*4 value
         real*4 t4
cf2py    intent(out***REMOVED*** t4
         t4 = value
       end
       subroutine s8(t8,value***REMOVED***
         real*8 value
         real*8 t8
cf2py    intent(out***REMOVED*** t8
         t8 = value
       end
       subroutine sd(td,value***REMOVED***
         double precision value
         double precision td
cf2py    intent(out***REMOVED*** td
         td = value
       end
    ***REMOVED***

    @dec.slow
    def test_all(self***REMOVED***:
        for name in "t0,t4,t8,td,s0,s4,s8,sd".split(","***REMOVED***:
            self.check_function(getattr(self.module, name***REMOVED******REMOVED***


class TestF90ReturnReal(TestReturnReal***REMOVED***:
    suffix = ".f90"
    code = ***REMOVED***
module f90_return_real
  contains
       function t0(value***REMOVED***
         real :: value
         real :: t0
         t0 = value
       end function t0
       function t4(value***REMOVED***
         real(kind=4***REMOVED*** :: value
         real(kind=4***REMOVED*** :: t4
         t4 = value
       end function t4
       function t8(value***REMOVED***
         real(kind=8***REMOVED*** :: value
         real(kind=8***REMOVED*** :: t8
         t8 = value
       end function t8
       function td(value***REMOVED***
         double precision :: value
         double precision :: td
         td = value
       end function td

       subroutine s0(t0,value***REMOVED***
         real :: value
         real :: t0
!f2py    intent(out***REMOVED*** t0
         t0 = value
       end subroutine s0
       subroutine s4(t4,value***REMOVED***
         real(kind=4***REMOVED*** :: value
         real(kind=4***REMOVED*** :: t4
!f2py    intent(out***REMOVED*** t4
         t4 = value
       end subroutine s4
       subroutine s8(t8,value***REMOVED***
         real(kind=8***REMOVED*** :: value
         real(kind=8***REMOVED*** :: t8
!f2py    intent(out***REMOVED*** t8
         t8 = value
       end subroutine s8
       subroutine sd(td,value***REMOVED***
         double precision :: value
         double precision :: td
!f2py    intent(out***REMOVED*** td
         td = value
       end subroutine sd
end module f90_return_real
    ***REMOVED***

    @dec.slow
    def test_all(self***REMOVED***:
        for name in "t0,t4,t8,td,s0,s4,s8,sd".split(","***REMOVED***:
            self.check_function(getattr(self.module.f90_return_real, name***REMOVED******REMOVED***


if __name__ == "__main__":
    run_module_suite(***REMOVED***
