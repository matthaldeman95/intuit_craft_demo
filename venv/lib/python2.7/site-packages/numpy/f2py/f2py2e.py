#!/usr/bin/env python
***REMOVED***

f2py2e - Fortran to Python C/API generator. 2nd Edition.
         See __usage__ below.

Copyright 1999--2011 Pearu Peterson all rights reserved,
Pearu Peterson <pearu@cens.ioc.ee>
Permission to use, modify, and distribute this software is given under the
terms of the NumPy License.

NO WARRANTY IS EXPRESSED OR IMPLIED.  USE AT YOUR OWN RISK.
$Date: 2005/05/06 08:31:19 $
Pearu Peterson

***REMOVED***
from __future__ import division, absolute_import, print_function

import sys
***REMOVED***
import pprint
import re

from . import crackfortran
from . import rules
from . import cb_rules
from . import auxfuncs
from . import cfuncs
from . import f90mod_rules
from . import __version__

f2py_version = __version__.version
errmess = sys.stderr.write
# outmess=sys.stdout.write
show = pprint.pprint
outmess = auxfuncs.outmess

***REMOVED***
    from numpy import __version__ as numpy_version
except ImportError:
    numpy_version = 'N/A'

__usage__ = ***REMOVED***\
Usage:

1***REMOVED*** To construct extension module sources:

      f2py [<options>***REMOVED*** <fortran files> [[[only:***REMOVED***||[skip:***REMOVED******REMOVED*** \\
                                        <fortran functions> ***REMOVED*** \\
                                       [: <fortran files> ...***REMOVED***

2***REMOVED*** To compile fortran files and build extension modules:

      f2py -c [<options>, <build_flib options>, <extra options>***REMOVED*** <fortran files>

3***REMOVED*** To generate signature files:

      f2py -h <filename.pyf> ...< same options as in (1***REMOVED*** >

Description: This program generates a Python C/API file (<modulename>module.c***REMOVED***
             that contains wrappers for given fortran functions so that they
             can be called from Python. With the -c option the corresponding
             extension modules are built.

Options:

  --2d-numpy       Use numpy.f2py tool with NumPy support. [DEFAULT***REMOVED***
  --2d-numeric     Use f2py2e tool with Numeric support.
  --2d-numarray    Use f2py2e tool with Numarray support.
  --g3-numpy       Use 3rd generation f2py from the separate f2py package.
                   [NOT AVAILABLE YET***REMOVED***

  -h <filename>    Write signatures of the fortran routines to file <filename>
                   and exit. You can then edit <filename> and use it instead
                   of <fortran files>. If <filename>==stdout then the
                   signatures are printed to stdout.
  <fortran functions>  Names of fortran routines for which Python C/API
                   functions will be generated. Default is all that are found
                   in <fortran files>.
  <fortran files>  Paths to fortran/signature files that will be scanned for
                   <fortran functions> in order to determine their signatures.
  skip:            Ignore fortran functions that follow until `:'.
  only:            Use only fortran functions that follow until `:'.
  :                Get back to <fortran files> mode.

  -m <modulename>  Name of the module; f2py generates a Python/C API
                   file <modulename>module.c or extension module <modulename>.
                   Default is 'untitled'.

  --[no-***REMOVED***lower     Do [not***REMOVED*** lower the cases in <fortran files>. By default,
                   --lower is assumed with -h key, and --no-lower without -h key.

  --build-dir <dirname>  All f2py generated files are created in <dirname>.
                   Default is tempfile.mkdtemp(***REMOVED***.

  --overwrite-signature  Overwrite existing signature file.

  --[no-***REMOVED***latex-doc Create (or not***REMOVED*** <modulename>module.tex.
                   Default is --no-latex-doc.
  --short-latex    Create 'incomplete' LaTeX document (without commands
                   \\documentclass, \\tableofcontents, and \\begin{document***REMOVED***,
                   \\end{document***REMOVED******REMOVED***.

  --[no-***REMOVED***rest-doc Create (or not***REMOVED*** <modulename>module.rst.
                   Default is --no-rest-doc.

  --debug-capi     Create C/API code that reports the state of the wrappers
                   during runtime. Useful for debugging.

  --[no-***REMOVED***wrap-functions    Create Fortran subroutine wrappers to Fortran 77
                   functions. --wrap-functions is default because it ensures
                   maximum portability/compiler independence.

  --include-paths <path1>:<path2>:...   Search include files from the given
                   directories.

  --help-link [..***REMOVED*** List system resources found by system_info.py. See also
                   --link-<resource> switch below. [..***REMOVED*** is optional list
                   of resources names. E.g. try 'f2py --help-link lapack_opt'.

  --quiet          Run quietly.
  --verbose        Run with extra verbosity.
  -v               Print f2py version ID and exit.


numpy.distutils options (only effective with -c***REMOVED***:

  --fcompiler=         Specify Fortran compiler type by vendor
  --compiler=          Specify C compiler type (as defined by distutils***REMOVED***

  --help-fcompiler     List available Fortran compilers and exit
  --f77exec=           Specify the path to F77 compiler
  --f90exec=           Specify the path to F90 compiler
  --f77flags=          Specify F77 compiler flags
  --f90flags=          Specify F90 compiler flags
  --opt=               Specify optimization flags
  --arch=              Specify architecture specific optimization flags
  --noopt              Compile without optimization
  --noarch             Compile without arch-dependent optimization
  --debug              Compile with debugging information

Extra options (only effective with -c***REMOVED***:

  --link-<resource>    Link extension module with <resource> as defined
                       by numpy.distutils/system_info.py. E.g. to link
                       with optimized LAPACK libraries (vecLib on MacOSX,
                       ATLAS elsewhere***REMOVED***, use --link-lapack_opt.
                       See also --help-link switch.

  -L/path/to/lib/ -l<libname>
  -D<define> -U<name>
  -I/path/to/include/
  <filename>.o <filename>.so <filename>.a

  Using the following macros may be required with non-gcc Fortran
  compilers:
    -DPREPEND_FORTRAN -DNO_APPEND_FORTRAN -DUPPERCASE_FORTRAN
    -DUNDERSCORE_G77

  When using -DF2PY_REPORT_ATEXIT, a performance report of F2PY
  interface is printed out at exit (platforms: Linux***REMOVED***.

  When using -DF2PY_REPORT_ON_ARRAY_COPY=<int>, a message is
  sent to stderr whenever F2PY interface makes a copy of an
  array. Integer <int> sets the threshold for array sizes when
  a message should be shown.

Version:     %s
numpy Version: %s
Requires:    Python 2.3 or higher.
License:     NumPy license (see LICENSE.txt in the NumPy source code***REMOVED***
Copyright 1999 - 2011 Pearu Peterson all rights reserved.
http://cens.ioc.ee/projects/f2py2e/***REMOVED*** % (f2py_version, numpy_version***REMOVED***


def scaninputline(inputline***REMOVED***:
    files, skipfuncs, onlyfuncs, debug = [***REMOVED***, [***REMOVED***, [***REMOVED***, [***REMOVED***
    f, f2, f3, f5, f6, f7, f8, f9 = 1, 0, 0, 0, 0, 0, 0, 0
    verbose = 1
    dolc = -1
    dolatexdoc = 0
    dorestdoc = 0
    wrapfuncs = 1
    buildpath = '.'
    include_paths = [***REMOVED***
    signsfile, modulename = None, None
    options = {'buildpath': buildpath,
               'coutput': None,
               'f2py_wrapper_output': None***REMOVED***
    for l in inputline:
        if l == '':
            pass
        elif l == 'only:':
            f = 0
        elif l == 'skip:':
            f = -1
        elif l == ':':
            f = 1
        elif l[:8***REMOVED*** == '--debug-':
            debug.append(l[8:***REMOVED******REMOVED***
        elif l == '--lower':
            dolc = 1
        elif l == '--build-dir':
            f6 = 1
        elif l == '--no-lower':
            dolc = 0
        elif l == '--quiet':
            verbose = 0
        elif l == '--verbose':
            verbose += 1
        elif l == '--latex-doc':
            dolatexdoc = 1
        elif l == '--no-latex-doc':
            dolatexdoc = 0
        elif l == '--rest-doc':
            dorestdoc = 1
        elif l == '--no-rest-doc':
            dorestdoc = 0
        elif l == '--wrap-functions':
            wrapfuncs = 1
        elif l == '--no-wrap-functions':
            wrapfuncs = 0
        elif l == '--short-latex':
            options['shortlatex'***REMOVED*** = 1
        elif l == '--coutput':
            f8 = 1
        elif l == '--f2py-wrapper-output':
            f9 = 1
        elif l == '--overwrite-signature':
            options['h-overwrite'***REMOVED*** = 1
        elif l == '-h':
            f2 = 1
        elif l == '-m':
            f3 = 1
        elif l[:2***REMOVED*** == '-v':
            print(f2py_version***REMOVED***
            sys.exit(***REMOVED***
        elif l == '--show-compilers':
            f5 = 1
        elif l[:8***REMOVED*** == '-include':
            cfuncs.outneeds['userincludes'***REMOVED***.append(l[9:-1***REMOVED******REMOVED***
            cfuncs.userincludes[l[9:-1***REMOVED******REMOVED*** = '#include ' + l[8:***REMOVED***
        elif l[:15***REMOVED*** in '--include_paths':
            outmess(
                'f2py option --include_paths is deprecated, use --include-paths instead.\n'***REMOVED***
            f7 = 1
        elif l[:15***REMOVED*** in '--include-paths':
            f7 = 1
        elif l[0***REMOVED*** == '-':
            errmess('Unknown option %s\n' % repr(l***REMOVED******REMOVED***
            sys.exit(***REMOVED***
        elif f2:
            f2 = 0
            signsfile = l
        elif f3:
            f3 = 0
            modulename = l
        elif f6:
            f6 = 0
            buildpath = l
        elif f7:
            f7 = 0
            include_paths.extend(l.split(os.pathsep***REMOVED******REMOVED***
        elif f8:
            f8 = 0
            options["coutput"***REMOVED*** = l
        elif f9:
            f9 = 0
            options["f2py_wrapper_output"***REMOVED*** = l
        elif f == 1:
            ***REMOVED***
                open(l***REMOVED***.close(***REMOVED***
                files.append(l***REMOVED***
            except IOError as detail:
                errmess('IOError: %s. Skipping file "%s".\n' %
                        (str(detail***REMOVED***, l***REMOVED******REMOVED***
        elif f == -1:
            skipfuncs.append(l***REMOVED***
        elif f == 0:
            onlyfuncs.append(l***REMOVED***
    if not f5 and not files and not modulename:
        print(__usage__***REMOVED***
        sys.exit(***REMOVED***
    if not os.path.isdir(buildpath***REMOVED***:
        if not verbose:
            outmess('Creating build directory %s' % (buildpath***REMOVED******REMOVED***
        os.mkdir(buildpath***REMOVED***
    if signsfile:
        signsfile = os.path.join(buildpath, signsfile***REMOVED***
    if signsfile and os.path.isfile(signsfile***REMOVED*** and 'h-overwrite' not in options:
        errmess(
            'Signature file "%s" exists!!! Use --overwrite-signature to overwrite.\n' % (signsfile***REMOVED******REMOVED***
        sys.exit(***REMOVED***

    options['debug'***REMOVED*** = debug
    options['verbose'***REMOVED*** = verbose
    if dolc == -1 and not signsfile:
        options['do-lower'***REMOVED*** = 0
    else:
        options['do-lower'***REMOVED*** = dolc
    if modulename:
        options['module'***REMOVED*** = modulename
    if signsfile:
        options['signsfile'***REMOVED*** = signsfile
    if onlyfuncs:
        options['onlyfuncs'***REMOVED*** = onlyfuncs
    if skipfuncs:
        options['skipfuncs'***REMOVED*** = skipfuncs
    options['dolatexdoc'***REMOVED*** = dolatexdoc
    options['dorestdoc'***REMOVED*** = dorestdoc
    options['wrapfuncs'***REMOVED*** = wrapfuncs
    options['buildpath'***REMOVED*** = buildpath
    options['include_paths'***REMOVED*** = include_paths
    return files, options


def callcrackfortran(files, options***REMOVED***:
    rules.options = options
    crackfortran.debug = options['debug'***REMOVED***
    crackfortran.verbose = options['verbose'***REMOVED***
    if 'module' in options:
        crackfortran.f77modulename = options['module'***REMOVED***
    if 'skipfuncs' in options:
        crackfortran.skipfuncs = options['skipfuncs'***REMOVED***
    if 'onlyfuncs' in options:
        crackfortran.onlyfuncs = options['onlyfuncs'***REMOVED***
    crackfortran.include_paths[:***REMOVED*** = options['include_paths'***REMOVED***
    crackfortran.dolowercase = options['do-lower'***REMOVED***
    postlist = crackfortran.crackfortran(files***REMOVED***
    if 'signsfile' in options:
        outmess('Saving signatures to file "%s"\n' % (options['signsfile'***REMOVED******REMOVED******REMOVED***
        pyf = crackfortran.crack2fortran(postlist***REMOVED***
        if options['signsfile'***REMOVED***[-6:***REMOVED*** == 'stdout':
            sys.stdout.write(pyf***REMOVED***
        else:
            f = open(options['signsfile'***REMOVED***, 'w'***REMOVED***
            f.write(pyf***REMOVED***
            f.close(***REMOVED***
    if options["coutput"***REMOVED*** is None:
        for mod in postlist:
            mod["coutput"***REMOVED*** = "%smodule.c" % mod["name"***REMOVED***
    else:
        for mod in postlist:
            mod["coutput"***REMOVED*** = options["coutput"***REMOVED***
    if options["f2py_wrapper_output"***REMOVED*** is None:
        for mod in postlist:
            mod["f2py_wrapper_output"***REMOVED*** = "%s-f2pywrappers.f" % mod["name"***REMOVED***
    else:
        for mod in postlist:
            mod["f2py_wrapper_output"***REMOVED*** = options["f2py_wrapper_output"***REMOVED***
    return postlist


def buildmodules(lst***REMOVED***:
    cfuncs.buildcfuncs(***REMOVED***
    outmess('Building modules...\n'***REMOVED***
    modules, mnames, isusedby = [***REMOVED***, [***REMOVED***, {***REMOVED***
    for i in range(len(lst***REMOVED******REMOVED***:
        if '__user__' in lst[i***REMOVED***['name'***REMOVED***:
            cb_rules.buildcallbacks(lst[i***REMOVED******REMOVED***
        else:
            if 'use' in lst[i***REMOVED***:
                for u in lst[i***REMOVED***['use'***REMOVED***.keys(***REMOVED***:
                    if u not in isusedby:
                        isusedby[u***REMOVED*** = [***REMOVED***
                    isusedby[u***REMOVED***.append(lst[i***REMOVED***['name'***REMOVED******REMOVED***
            modules.append(lst[i***REMOVED******REMOVED***
            mnames.append(lst[i***REMOVED***['name'***REMOVED******REMOVED***
    ret = {***REMOVED***
    for i in range(len(mnames***REMOVED******REMOVED***:
        if mnames[i***REMOVED*** in isusedby:
            outmess('\tSkipping module "%s" which is used by %s.\n' % (
                mnames[i***REMOVED***, ','.join(['"%s"' % s for s in isusedby[mnames[i***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
        else:
            um = [***REMOVED***
            if 'use' in modules[i***REMOVED***:
                for u in modules[i***REMOVED***['use'***REMOVED***.keys(***REMOVED***:
                    if u in isusedby and u in mnames:
                        um.append(modules[mnames.index(u***REMOVED******REMOVED******REMOVED***
                    else:
                        outmess(
                            '\tModule "%s" uses nonexisting "%s" which will be ignored.\n' % (mnames[i***REMOVED***, u***REMOVED******REMOVED***
            ret[mnames[i***REMOVED******REMOVED*** = {***REMOVED***
            dict_append(ret[mnames[i***REMOVED******REMOVED***, rules.buildmodule(modules[i***REMOVED***, um***REMOVED******REMOVED***
    return ret


def dict_append(d_out, d_in***REMOVED***:
    for (k, v***REMOVED*** in d_in.items(***REMOVED***:
        if k not in d_out:
            d_out[k***REMOVED*** = [***REMOVED***
        if isinstance(v, list***REMOVED***:
            d_out[k***REMOVED*** = d_out[k***REMOVED*** + v
        else:
            d_out[k***REMOVED***.append(v***REMOVED***


def run_main(comline_list***REMOVED***:
    ***REMOVED***Run f2py as if string.join(comline_list,' '***REMOVED*** is used as a command line.
    In case of using -h flag, return None.
    ***REMOVED***
    crackfortran.reset_global_f2py_vars(***REMOVED***
    f2pydir = os.path.dirname(os.path.abspath(cfuncs.__file__***REMOVED******REMOVED***
    fobjhsrc = os.path.join(f2pydir, 'src', 'fortranobject.h'***REMOVED***
    fobjcsrc = os.path.join(f2pydir, 'src', 'fortranobject.c'***REMOVED***
    files, options = scaninputline(comline_list***REMOVED***
    auxfuncs.options = options
    postlist = callcrackfortran(files, options***REMOVED***
    isusedby = {***REMOVED***
    for i in range(len(postlist***REMOVED******REMOVED***:
        if 'use' in postlist[i***REMOVED***:
            for u in postlist[i***REMOVED***['use'***REMOVED***.keys(***REMOVED***:
                if u not in isusedby:
                    isusedby[u***REMOVED*** = [***REMOVED***
                isusedby[u***REMOVED***.append(postlist[i***REMOVED***['name'***REMOVED******REMOVED***
    for i in range(len(postlist***REMOVED******REMOVED***:
        if postlist[i***REMOVED***['block'***REMOVED*** == 'python module' and '__user__' in postlist[i***REMOVED***['name'***REMOVED***:
            if postlist[i***REMOVED***['name'***REMOVED*** in isusedby:
                # if not quiet:
                outmess('Skipping Makefile build for module "%s" which is used by %s\n' % (
                    postlist[i***REMOVED***['name'***REMOVED***, ','.join(['"%s"' % s for s in isusedby[postlist[i***REMOVED***['name'***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***
    if 'signsfile' in options:
        if options['verbose'***REMOVED*** > 1:
            outmess(
                'Stopping. Edit the signature file and then run f2py on the signature file: '***REMOVED***
            outmess('%s %s\n' %
                    (os.path.basename(sys.argv[0***REMOVED******REMOVED***, options['signsfile'***REMOVED******REMOVED******REMOVED***
        return
    for i in range(len(postlist***REMOVED******REMOVED***:
        if postlist[i***REMOVED***['block'***REMOVED*** != 'python module':
            if 'python module' not in options:
                errmess(
                    'Tip: If your original code is Fortran source then you must use -m option.\n'***REMOVED***
            raise TypeError('All blocks must be python module blocks but got %s' % (
                repr(postlist[i***REMOVED***['block'***REMOVED******REMOVED******REMOVED******REMOVED***
    auxfuncs.debugoptions = options['debug'***REMOVED***
    f90mod_rules.options = options
    auxfuncs.wrapfuncs = options['wrapfuncs'***REMOVED***

    ret = buildmodules(postlist***REMOVED***

    for mn in ret.keys(***REMOVED***:
        dict_append(ret[mn***REMOVED***, {'csrc': fobjcsrc, 'h': fobjhsrc***REMOVED******REMOVED***
    return ret


def filter_files(prefix, suffix, files, remove_prefix=None***REMOVED***:
    ***REMOVED***
    Filter files by prefix and suffix.
    ***REMOVED***
    filtered, rest = [***REMOVED***, [***REMOVED***
    match = re.compile(prefix + r'.*' + suffix + r'\Z'***REMOVED***.match
    if remove_prefix:
        ind = len(prefix***REMOVED***
    else:
        ind = 0
    for file in [x.strip(***REMOVED*** for x in files***REMOVED***:
        if match(file***REMOVED***:
            filtered.append(file[ind:***REMOVED******REMOVED***
        else:
            rest.append(file***REMOVED***
    return filtered, rest


def get_prefix(module***REMOVED***:
    p = os.path.dirname(os.path.dirname(module.__file__***REMOVED******REMOVED***
    return p


def run_compile(***REMOVED***:
    ***REMOVED***
    Do it all in one call!
    ***REMOVED***
    import tempfile

    i = sys.argv.index('-c'***REMOVED***
    del sys.argv[i***REMOVED***

    remove_build_dir = 0
    ***REMOVED***
        i = sys.argv.index('--build-dir'***REMOVED***
    except ValueError:
        i = None
    if i is not None:
        build_dir = sys.argv[i + 1***REMOVED***
        del sys.argv[i + 1***REMOVED***
        del sys.argv[i***REMOVED***
    else:
        remove_build_dir = 1
        build_dir = tempfile.mkdtemp(***REMOVED***

    _reg1 = re.compile(r'[-***REMOVED***[-***REMOVED***link[-***REMOVED***'***REMOVED***
    sysinfo_flags = [_m for _m in sys.argv[1:***REMOVED*** if _reg1.match(_m***REMOVED******REMOVED***
    sys.argv = [_m for _m in sys.argv if _m not in sysinfo_flags***REMOVED***
    if sysinfo_flags:
        sysinfo_flags = [f[7:***REMOVED*** for f in sysinfo_flags***REMOVED***

    _reg2 = re.compile(
        r'[-***REMOVED***[-***REMOVED***((no[-***REMOVED***|***REMOVED***(wrap[-***REMOVED***functions|lower***REMOVED***|debug[-***REMOVED***capi|quiet***REMOVED***|[-***REMOVED***include'***REMOVED***
    f2py_flags = [_m for _m in sys.argv[1:***REMOVED*** if _reg2.match(_m***REMOVED******REMOVED***
    sys.argv = [_m for _m in sys.argv if _m not in f2py_flags***REMOVED***
    f2py_flags2 = [***REMOVED***
    fl = 0
    for a in sys.argv[1:***REMOVED***:
        if a in ['only:', 'skip:'***REMOVED***:
            fl = 1
        elif a == ':':
            fl = 0
        if fl or a == ':':
            f2py_flags2.append(a***REMOVED***
    if f2py_flags2 and f2py_flags2[-1***REMOVED*** != ':':
        f2py_flags2.append(':'***REMOVED***
    f2py_flags.extend(f2py_flags2***REMOVED***

    sys.argv = [_m for _m in sys.argv if _m not in f2py_flags2***REMOVED***
    _reg3 = re.compile(
        r'[-***REMOVED***[-***REMOVED***((f(90***REMOVED***?compiler([-***REMOVED***exec|***REMOVED***|compiler***REMOVED***=|help[-***REMOVED***compiler***REMOVED***'***REMOVED***
    flib_flags = [_m for _m in sys.argv[1:***REMOVED*** if _reg3.match(_m***REMOVED******REMOVED***
    sys.argv = [_m for _m in sys.argv if _m not in flib_flags***REMOVED***
    _reg4 = re.compile(
        r'[-***REMOVED***[-***REMOVED***((f(77|90***REMOVED***(flags|exec***REMOVED***|opt|arch***REMOVED***=|(debug|noopt|noarch|help[-***REMOVED***fcompiler***REMOVED******REMOVED***'***REMOVED***
    fc_flags = [_m for _m in sys.argv[1:***REMOVED*** if _reg4.match(_m***REMOVED******REMOVED***
    sys.argv = [_m for _m in sys.argv if _m not in fc_flags***REMOVED***

    if 1:
        del_list = [***REMOVED***
        for s in flib_flags:
            v = '--fcompiler='
            if s[:len(v***REMOVED******REMOVED*** == v:
                from numpy.distutils import fcompiler
                fcompiler.load_all_fcompiler_classes(***REMOVED***
                allowed_keys = list(fcompiler.fcompiler_class.keys(***REMOVED******REMOVED***
                nv = ov = s[len(v***REMOVED***:***REMOVED***.lower(***REMOVED***
                if ov not in allowed_keys:
                    vmap = {***REMOVED***  # XXX
                    ***REMOVED***
                        nv = vmap[ov***REMOVED***
                    except KeyError:
                        if ov not in vmap.values(***REMOVED***:
                            print('Unknown vendor: "%s"' % (s[len(v***REMOVED***:***REMOVED******REMOVED******REMOVED***
                    nv = ov
                i = flib_flags.index(s***REMOVED***
                flib_flags[i***REMOVED*** = '--fcompiler=' + nv
                continue
        for s in del_list:
            i = flib_flags.index(s***REMOVED***
            del flib_flags[i***REMOVED***
        assert len(flib_flags***REMOVED*** <= 2, repr(flib_flags***REMOVED***

    _reg5 = re.compile(r'[-***REMOVED***[-***REMOVED***(verbose***REMOVED***'***REMOVED***
    setup_flags = [_m for _m in sys.argv[1:***REMOVED*** if _reg5.match(_m***REMOVED******REMOVED***
    sys.argv = [_m for _m in sys.argv if _m not in setup_flags***REMOVED***

    if '--quiet' in f2py_flags:
        setup_flags.append('--quiet'***REMOVED***

    modulename = 'untitled'
    sources = sys.argv[1:***REMOVED***

    for optname in ['--include_paths', '--include-paths'***REMOVED***:
        if optname in sys.argv:
            i = sys.argv.index(optname***REMOVED***
            f2py_flags.extend(sys.argv[i:i + 2***REMOVED******REMOVED***
            del sys.argv[i + 1***REMOVED***, sys.argv[i***REMOVED***
            sources = sys.argv[1:***REMOVED***

    if '-m' in sys.argv:
        i = sys.argv.index('-m'***REMOVED***
        modulename = sys.argv[i + 1***REMOVED***
        del sys.argv[i + 1***REMOVED***, sys.argv[i***REMOVED***
        sources = sys.argv[1:***REMOVED***
    else:
        from numpy.distutils.command.build_src import get_f2py_modulename
        pyf_files, sources = filter_files('', '[.***REMOVED***pyf([.***REMOVED***src|***REMOVED***', sources***REMOVED***
        sources = pyf_files + sources
        for f in pyf_files:
            modulename = get_f2py_modulename(f***REMOVED***
            if modulename:
                break

    extra_objects, sources = filter_files('', '[.***REMOVED***(o|a|so***REMOVED***', sources***REMOVED***
    include_dirs, sources = filter_files('-I', '', sources, remove_prefix=1***REMOVED***
    library_dirs, sources = filter_files('-L', '', sources, remove_prefix=1***REMOVED***
    libraries, sources = filter_files('-l', '', sources, remove_prefix=1***REMOVED***
    undef_macros, sources = filter_files('-U', '', sources, remove_prefix=1***REMOVED***
    define_macros, sources = filter_files('-D', '', sources, remove_prefix=1***REMOVED***
    for i in range(len(define_macros***REMOVED******REMOVED***:
        name_value = define_macros[i***REMOVED***.split('=', 1***REMOVED***
        if len(name_value***REMOVED*** == 1:
            name_value.append(None***REMOVED***
        if len(name_value***REMOVED*** == 2:
            define_macros[i***REMOVED*** = tuple(name_value***REMOVED***
        else:
            print('Invalid use of -D:', name_value***REMOVED***

    from numpy.distutils.system_info import get_info

    num_info = {***REMOVED***
    if num_info:
        include_dirs.extend(num_info.get('include_dirs', [***REMOVED******REMOVED******REMOVED***

    from numpy.distutils.core import setup, Extension
    ext_args = {'name': modulename, 'sources': sources,
                'include_dirs': include_dirs,
                'library_dirs': library_dirs,
                'libraries': libraries,
                'define_macros': define_macros,
                'undef_macros': undef_macros,
                'extra_objects': extra_objects,
                'f2py_options': f2py_flags,
            ***REMOVED***

    if sysinfo_flags:
        from numpy.distutils.misc_util import dict_append
        for n in sysinfo_flags:
            i = get_info(n***REMOVED***
            if not i:
                outmess('No %s resources found in system'
                        ' (try `f2py --help-link`***REMOVED***\n' % (repr(n***REMOVED******REMOVED******REMOVED***
            dict_append(ext_args, **i***REMOVED***

    ext = Extension(**ext_args***REMOVED***
    sys.argv = [sys.argv[0***REMOVED******REMOVED*** + setup_flags
    sys.argv.extend(['build',
                     '--build-temp', build_dir,
                     '--build-base', build_dir,
                     '--build-platlib', '.'***REMOVED******REMOVED***
    if fc_flags:
        sys.argv.extend(['config_fc'***REMOVED*** + fc_flags***REMOVED***
    if flib_flags:
        sys.argv.extend(['build_ext'***REMOVED*** + flib_flags***REMOVED***

    setup(ext_modules=[ext***REMOVED******REMOVED***

    if remove_build_dir and os.path.exists(build_dir***REMOVED***:
        import shutil
        outmess('Removing build directory %s\n' % (build_dir***REMOVED******REMOVED***
        shutil.rmtree(build_dir***REMOVED***


def main(***REMOVED***:
    if '--help-link' in sys.argv[1:***REMOVED***:
        sys.argv.remove('--help-link'***REMOVED***
        from numpy.distutils.system_info import show_all
        show_all(***REMOVED***
        return
    if '-c' in sys.argv[1:***REMOVED***:
        run_compile(***REMOVED***
    else:
        run_main(sys.argv[1:***REMOVED******REMOVED***

# if __name__ == "__main__":
#    main(***REMOVED***


# EOF
