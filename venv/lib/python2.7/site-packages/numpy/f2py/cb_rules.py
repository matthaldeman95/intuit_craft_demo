#!/usr/bin/env python
***REMOVED***

Build call-back mechanism for f2py2e.

Copyright 2000 Pearu Peterson all rights reserved,
Pearu Peterson <pearu@ioc.ee>
Permission to use, modify, and distribute this software is given under the
terms of the NumPy License.

NO WARRANTY IS EXPRESSED OR IMPLIED.  USE AT YOUR OWN RISK.
$Date: 2005/07/20 11:27:58 $
Pearu Peterson

***REMOVED***
from __future__ import division, absolute_import, print_function

from . import __version__
from .auxfuncs import (
    applyrules, debugcapi, dictappend, errmess, getargs, hasnote, isarray,
    iscomplex, iscomplexarray, iscomplexfunction, isfunction, isintent_c,
    isintent_hide, isintent_in, isintent_inout, isintent_nothide,
    isintent_out, isoptional, isrequired, isscalar, isstring,
    isstringfunction, issubroutine, l_and, l_not, l_or, outmess, replace,
    stripcomma, throw_error
***REMOVED***
from . import cfuncs

f2py_version = __version__.version


################## Rules for callback function ##############

cb_routine_rules = {
    'cbtypedefs': 'typedef #rctype#(*#name#_typedef***REMOVED***(#optargs_td##args_td##strarglens_td##noargs#***REMOVED***;',
    'body': ***REMOVED***
#begintitle#
PyObject *#name#_capi = NULL;/*was Py_None*/
PyTupleObject *#name#_args_capi = NULL;
int #name#_nofargs = 0;
jmp_buf #name#_jmpbuf;
/*typedef #rctype#(*#name#_typedef***REMOVED***(#optargs_td##args_td##strarglens_td##noargs#***REMOVED***;*/
#static# #rctype# #callbackname# (#optargs##args##strarglens##noargs#***REMOVED*** {
\tPyTupleObject *capi_arglist = #name#_args_capi;
\tPyObject *capi_return = NULL;
\tPyObject *capi_tmp = NULL;
\tint capi_j,capi_i = 0;
\tint capi_longjmp_ok = 1;
#decl#
#ifdef F2PY_REPORT_ATEXIT
f2py_cb_start_clock(***REMOVED***;
#endif
\tCFUNCSMESS(\"cb:Call-back function #name# (maxnofargs=#maxnofargs#(-#nofoptargs#***REMOVED******REMOVED***\\n\"***REMOVED***;
\tCFUNCSMESSPY(\"cb:#name#_capi=\",#name#_capi***REMOVED***;
\tif (#name#_capi==NULL***REMOVED*** {
\t\tcapi_longjmp_ok = 0;
\t\t#name#_capi = PyObject_GetAttrString(#modulename#_module,\"#argname#\"***REMOVED***;
\t***REMOVED***
\tif (#name#_capi==NULL***REMOVED*** {
\t\tPyErr_SetString(#modulename#_error,\"cb: Callback #argname# not defined (as an argument or module #modulename# attribute***REMOVED***.\\n\"***REMOVED***;
\t\tgoto capi_fail;
\t***REMOVED***
\tif (F2PyCapsule_Check(#name#_capi***REMOVED******REMOVED*** {
\t#name#_typedef #name#_cptr;
\t#name#_cptr = F2PyCapsule_AsVoidPtr(#name#_capi***REMOVED***;
\t#returncptr#(*#name#_cptr***REMOVED***(#optargs_nm##args_nm##strarglens_nm#***REMOVED***;
\t#return#
\t***REMOVED***
\tif (capi_arglist==NULL***REMOVED*** {
\t\tcapi_longjmp_ok = 0;
\t\tcapi_tmp = PyObject_GetAttrString(#modulename#_module,\"#argname#_extra_args\"***REMOVED***;
\t\tif (capi_tmp***REMOVED*** {
\t\t\tcapi_arglist = (PyTupleObject ****REMOVED***PySequence_Tuple(capi_tmp***REMOVED***;
\t\t\tif (capi_arglist==NULL***REMOVED*** {
\t\t\t\tPyErr_SetString(#modulename#_error,\"Failed to convert #modulename#.#argname#_extra_args to tuple.\\n\"***REMOVED***;
\t\t\t\tgoto capi_fail;
\t\t\t***REMOVED***
\t\t***REMOVED*** else {
\t\t\tPyErr_Clear(***REMOVED***;
\t\t\tcapi_arglist = (PyTupleObject ****REMOVED***Py_BuildValue(\"(***REMOVED***\"***REMOVED***;
\t\t***REMOVED***
\t***REMOVED***
\tif (capi_arglist == NULL***REMOVED*** {
\t\tPyErr_SetString(#modulename#_error,\"Callback #argname# argument list is not set.\\n\"***REMOVED***;
\t\tgoto capi_fail;
\t***REMOVED***
#setdims#
#pyobjfrom#
\tCFUNCSMESSPY(\"cb:capi_arglist=\",capi_arglist***REMOVED***;
\tCFUNCSMESS(\"cb:Call-back calling Python function #argname#.\\n\"***REMOVED***;
#ifdef F2PY_REPORT_ATEXIT
f2py_cb_start_call_clock(***REMOVED***;
#endif
\tcapi_return = PyObject_CallObject(#name#_capi,(PyObject ****REMOVED***capi_arglist***REMOVED***;
#ifdef F2PY_REPORT_ATEXIT
f2py_cb_stop_call_clock(***REMOVED***;
#endif
\tCFUNCSMESSPY(\"cb:capi_return=\",capi_return***REMOVED***;
\tif (capi_return == NULL***REMOVED*** {
\t\tfprintf(stderr,\"capi_return is NULL\\n\"***REMOVED***;
\t\tgoto capi_fail;
\t***REMOVED***
\tif (capi_return == Py_None***REMOVED*** {
\t\tPy_DECREF(capi_return***REMOVED***;
\t\tcapi_return = Py_BuildValue(\"(***REMOVED***\"***REMOVED***;
\t***REMOVED***
\telse if (!PyTuple_Check(capi_return***REMOVED******REMOVED*** {
\t\tcapi_return = Py_BuildValue(\"(N***REMOVED***\",capi_return***REMOVED***;
\t***REMOVED***
\tcapi_j = PyTuple_Size(capi_return***REMOVED***;
\tcapi_i = 0;
#frompyobj#
\tCFUNCSMESS(\"cb:#name#:successful\\n\"***REMOVED***;
\tPy_DECREF(capi_return***REMOVED***;
#ifdef F2PY_REPORT_ATEXIT
f2py_cb_stop_clock(***REMOVED***;
#endif
\tgoto capi_return_pt;
capi_fail:
\tfprintf(stderr,\"Call-back #name# failed.\\n\"***REMOVED***;
\tPy_XDECREF(capi_return***REMOVED***;
\tif (capi_longjmp_ok***REMOVED***
\t\tlongjmp(#name#_jmpbuf,-1***REMOVED***;
capi_return_pt:
\t;
#return#
***REMOVED***
#endtitle#
***REMOVED***,
    'need': ['setjmp.h', 'CFUNCSMESS'***REMOVED***,
    'maxnofargs': '#maxnofargs#',
    'nofoptargs': '#nofoptargs#',
    'docstr': ***REMOVED***\
\tdef #argname#(#docsignature#***REMOVED***: return #docreturn#\\n\\
#docstrsigns#***REMOVED***,
    'latexdocstr': ***REMOVED***
{{***REMOVED***\\verb@def #argname#(#latexdocsignature#***REMOVED***: return #docreturn#@{***REMOVED******REMOVED***
#routnote#

#latexdocstrsigns#***REMOVED***,
    'docstrshort': 'def #argname#(#docsignature#***REMOVED***: return #docreturn#'
***REMOVED***
cb_rout_rules = [
***REMOVED***  # Init
        'separatorsfor': {'decl': '\n',
                          'args': ',', 'optargs': '', 'pyobjfrom': '\n', 'freemem': '\n',
                          'args_td': ',', 'optargs_td': '',
                          'args_nm': ',', 'optargs_nm': '',
                          'frompyobj': '\n', 'setdims': '\n',
                          'docstrsigns': '\\n"\n"',
                          'latexdocstrsigns': '\n',
                          'latexdocstrreq': '\n', 'latexdocstropt': '\n',
                          'latexdocstrout': '\n', 'latexdocstrcbs': '\n',
                  ***REMOVED***
        'decl': '/*decl*/', 'pyobjfrom': '/*pyobjfrom*/', 'frompyobj': '/*frompyobj*/',
        'args': [***REMOVED***, 'optargs': '', 'return': '', 'strarglens': '', 'freemem': '/*freemem*/',
        'args_td': [***REMOVED***, 'optargs_td': '', 'strarglens_td': '',
        'args_nm': [***REMOVED***, 'optargs_nm': '', 'strarglens_nm': '',
        'noargs': '',
        'setdims': '/*setdims*/',
        'docstrsigns': '', 'latexdocstrsigns': '',
        'docstrreq': '\tRequired arguments:',
        'docstropt': '\tOptional arguments:',
        'docstrout': '\tReturn objects:',
        'docstrcbs': '\tCall-back functions:',
        'docreturn': '', 'docsign': '', 'docsignopt': '',
        'latexdocstrreq': '\\noindent Required arguments:',
        'latexdocstropt': '\\noindent Optional arguments:',
        'latexdocstrout': '\\noindent Return objects:',
        'latexdocstrcbs': '\\noindent Call-back functions:',
        'routnote': {hasnote: '--- #note#', l_not(hasnote***REMOVED***: ''***REMOVED***,
***REMOVED*** {  # Function
        'decl': '\t#ctype# return_value;',
        'frompyobj': [{debugcapi: '\tCFUNCSMESS("cb:Getting return_value->"***REMOVED***;'***REMOVED***,
                      '\tif (capi_j>capi_i***REMOVED***\n\t\tGETSCALARFROMPYTUPLE(capi_return,capi_i++,&return_value,#ctype#,"#ctype#_from_pyobj failed in converting return_value of call-back function #name# to C #ctype#\\n"***REMOVED***;',
                  ***REMOVED***debugcapi:
                       '\tfprintf(stderr,"#showvalueformat#.\\n",return_value***REMOVED***;'***REMOVED***
                      ***REMOVED***,
        'need': ['#ctype#_from_pyobj', {debugcapi: 'CFUNCSMESS'***REMOVED***, 'GETSCALARFROMPYTUPLE'***REMOVED***,
        'return': '\treturn return_value;',
        '_check': l_and(isfunction, l_not(isstringfunction***REMOVED***, l_not(iscomplexfunction***REMOVED******REMOVED***
***REMOVED***
***REMOVED***  # String function
        'pyobjfrom': {debugcapi: '\tfprintf(stderr,"debug-capi:cb:#name#:%d:\\n",return_value_len***REMOVED***;'***REMOVED***,
        'args': '#ctype# return_value,int return_value_len',
        'args_nm': 'return_value,&return_value_len',
        'args_td': '#ctype# ,int',
        'frompyobj': [{debugcapi: '\tCFUNCSMESS("cb:Getting return_value->\\""***REMOVED***;'***REMOVED***,
                      ***REMOVED***\tif (capi_j>capi_i***REMOVED***
\t\tGETSTRFROMPYTUPLE(capi_return,capi_i++,return_value,return_value_len***REMOVED***;***REMOVED***,
                  ***REMOVED***debugcapi:
                       '\tfprintf(stderr,"#showvalueformat#\\".\\n",return_value***REMOVED***;'***REMOVED***
                      ***REMOVED***,
        'need': ['#ctype#_from_pyobj', {debugcapi: 'CFUNCSMESS'***REMOVED***,
                 'string.h', 'GETSTRFROMPYTUPLE'***REMOVED***,
        'return': 'return;',
        '_check': isstringfunction
***REMOVED***
***REMOVED***  # Complex function
        'optargs': ***REMOVED***
#ifndef F2PY_CB_RETURNCOMPLEX
#ctype# *return_value
#endif
***REMOVED***,
        'optargs_nm': ***REMOVED***
#ifndef F2PY_CB_RETURNCOMPLEX
return_value
#endif
***REMOVED***,
        'optargs_td': ***REMOVED***
#ifndef F2PY_CB_RETURNCOMPLEX
#ctype# *
#endif
***REMOVED***,
        'decl': ***REMOVED***
#ifdef F2PY_CB_RETURNCOMPLEX
\t#ctype# return_value;
#endif
***REMOVED***,
        'frompyobj': [{debugcapi: '\tCFUNCSMESS("cb:Getting return_value->"***REMOVED***;'***REMOVED***,
                      ***REMOVED***\
\tif (capi_j>capi_i***REMOVED***
#ifdef F2PY_CB_RETURNCOMPLEX
\t\tGETSCALARFROMPYTUPLE(capi_return,capi_i++,&return_value,#ctype#,\"#ctype#_from_pyobj failed in converting return_value of call-back function #name# to C #ctype#\\n\"***REMOVED***;
#else
\t\tGETSCALARFROMPYTUPLE(capi_return,capi_i++,return_value,#ctype#,\"#ctype#_from_pyobj failed in converting return_value of call-back function #name# to C #ctype#\\n\"***REMOVED***;
#endif
***REMOVED***,
                  ***REMOVED***debugcapi: ***REMOVED***
#ifdef F2PY_CB_RETURNCOMPLEX
\tfprintf(stderr,\"#showvalueformat#.\\n\",(return_value***REMOVED***.r,(return_value***REMOVED***.i***REMOVED***;
#else
\tfprintf(stderr,\"#showvalueformat#.\\n\",(*return_value***REMOVED***.r,(*return_value***REMOVED***.i***REMOVED***;
#endif

***REMOVED******REMOVED***
                      ***REMOVED***,
        'return': ***REMOVED***
#ifdef F2PY_CB_RETURNCOMPLEX
\treturn return_value;
#else
\treturn;
#endif
***REMOVED***,
        'need': ['#ctype#_from_pyobj', {debugcapi: 'CFUNCSMESS'***REMOVED***,
                 'string.h', 'GETSCALARFROMPYTUPLE', '#ctype#'***REMOVED***,
        '_check': iscomplexfunction
***REMOVED***
***REMOVED***'docstrout': '\t\t#pydocsignout#',
     'latexdocstrout': ['\\item[***REMOVED***{{***REMOVED***\\verb@#pydocsignout#@{***REMOVED******REMOVED***',
                    ***REMOVED***hasnote: '--- #note#'***REMOVED******REMOVED***,
     'docreturn': '#rname#,',
     '_check': isfunction***REMOVED***,
***REMOVED***'_check': issubroutine, 'return': 'return;'***REMOVED***
***REMOVED***

cb_arg_rules = [
***REMOVED***  # Doc
        'docstropt': {l_and(isoptional, isintent_nothide***REMOVED***: '\t\t#pydocsign#'***REMOVED***,
        'docstrreq': {l_and(isrequired, isintent_nothide***REMOVED***: '\t\t#pydocsign#'***REMOVED***,
        'docstrout': {isintent_out: '\t\t#pydocsignout#'***REMOVED***,
        'latexdocstropt': {l_and(isoptional, isintent_nothide***REMOVED***: ['\\item[***REMOVED***{{***REMOVED***\\verb@#pydocsign#@{***REMOVED******REMOVED***',
                                                             ***REMOVED***hasnote: '--- #note#'***REMOVED******REMOVED******REMOVED***,
        'latexdocstrreq': {l_and(isrequired, isintent_nothide***REMOVED***: ['\\item[***REMOVED***{{***REMOVED***\\verb@#pydocsign#@{***REMOVED******REMOVED***',
                                                             ***REMOVED***hasnote: '--- #note#'***REMOVED******REMOVED******REMOVED***,
        'latexdocstrout': {isintent_out: ['\\item[***REMOVED***{{***REMOVED***\\verb@#pydocsignout#@{***REMOVED******REMOVED***',
                                      ***REMOVED***l_and(hasnote, isintent_hide***REMOVED***: '--- #note#',
                                           l_and(hasnote, isintent_nothide***REMOVED***: '--- See above.'***REMOVED******REMOVED******REMOVED***,
        'docsign': {l_and(isrequired, isintent_nothide***REMOVED***: '#varname#,'***REMOVED***,
        'docsignopt': {l_and(isoptional, isintent_nothide***REMOVED***: '#varname#,'***REMOVED***,
        'depend': ''
***REMOVED***
***REMOVED***
        'args': {
            l_and(isscalar, isintent_c***REMOVED***: '#ctype# #varname_i#',
            l_and(isscalar, l_not(isintent_c***REMOVED******REMOVED***: '#ctype# *#varname_i#_cb_capi',
            isarray: '#ctype# *#varname_i#',
            isstring: '#ctype# #varname_i#'
***REMOVED***
        'args_nm': {
            l_and(isscalar, isintent_c***REMOVED***: '#varname_i#',
            l_and(isscalar, l_not(isintent_c***REMOVED******REMOVED***: '#varname_i#_cb_capi',
            isarray: '#varname_i#',
            isstring: '#varname_i#'
***REMOVED***
        'args_td': {
            l_and(isscalar, isintent_c***REMOVED***: '#ctype#',
            l_and(isscalar, l_not(isintent_c***REMOVED******REMOVED***: '#ctype# *',
            isarray: '#ctype# *',
            isstring: '#ctype#'
***REMOVED***
        # untested with multiple args
        'strarglens': {isstring: ',int #varname_i#_cb_len'***REMOVED***,
        'strarglens_td': {isstring: ',int'***REMOVED***,  # untested with multiple args
        # untested with multiple args
        'strarglens_nm': {isstring: ',#varname_i#_cb_len'***REMOVED***,
***REMOVED***
***REMOVED***  # Scalars
        'decl': {l_not(isintent_c***REMOVED***: '\t#ctype# #varname_i#=(*#varname_i#_cb_capi***REMOVED***;'***REMOVED***,
        'error': {l_and(isintent_c, isintent_out,
                        throw_error('intent(c,out***REMOVED*** is forbidden for callback scalar arguments'***REMOVED******REMOVED***:
                  ''***REMOVED***,
        'frompyobj': [{debugcapi: '\tCFUNCSMESS("cb:Getting #varname#->"***REMOVED***;'***REMOVED***,
                  ***REMOVED***isintent_out:
                       '\tif (capi_j>capi_i***REMOVED***\n\t\tGETSCALARFROMPYTUPLE(capi_return,capi_i++,#varname_i#_cb_capi,#ctype#,"#ctype#_from_pyobj failed in converting argument #varname# of call-back function #name# to C #ctype#\\n"***REMOVED***;'***REMOVED***,
                  ***REMOVED***l_and(debugcapi, l_and(l_not(iscomplex***REMOVED***, isintent_c***REMOVED******REMOVED***:
                          '\tfprintf(stderr,"#showvalueformat#.\\n",#varname_i#***REMOVED***;'***REMOVED***,
                  ***REMOVED***l_and(debugcapi, l_and(l_not(iscomplex***REMOVED***, l_not( isintent_c***REMOVED******REMOVED******REMOVED***:
                          '\tfprintf(stderr,"#showvalueformat#.\\n",*#varname_i#_cb_capi***REMOVED***;'***REMOVED***,
                  ***REMOVED***l_and(debugcapi, l_and(iscomplex, isintent_c***REMOVED******REMOVED***:
                          '\tfprintf(stderr,"#showvalueformat#.\\n",(#varname_i#***REMOVED***.r,(#varname_i#***REMOVED***.i***REMOVED***;'***REMOVED***,
                  ***REMOVED***l_and(debugcapi, l_and(iscomplex, l_not( isintent_c***REMOVED******REMOVED******REMOVED***:
                          '\tfprintf(stderr,"#showvalueformat#.\\n",(*#varname_i#_cb_capi***REMOVED***.r,(*#varname_i#_cb_capi***REMOVED***.i***REMOVED***;'***REMOVED***,
                      ***REMOVED***,
        'need': [{isintent_out: ['#ctype#_from_pyobj', 'GETSCALARFROMPYTUPLE'***REMOVED******REMOVED***,
             ***REMOVED***debugcapi: 'CFUNCSMESS'***REMOVED******REMOVED***,
        '_check': isscalar
***REMOVED*** {
        'pyobjfrom': [{isintent_in: ***REMOVED***\
\tif (#name#_nofargs>capi_i***REMOVED***
\t\tif (PyTuple_SetItem((PyObject ****REMOVED***capi_arglist,capi_i++,pyobj_from_#ctype#1(#varname_i#***REMOVED******REMOVED******REMOVED***
\t\t\tgoto capi_fail;***REMOVED******REMOVED***,
                  ***REMOVED***isintent_inout: ***REMOVED***\
\tif (#name#_nofargs>capi_i***REMOVED***
\t\tif (PyTuple_SetItem((PyObject ****REMOVED***capi_arglist,capi_i++,pyarr_from_p_#ctype#1(#varname_i#_cb_capi***REMOVED******REMOVED******REMOVED***
\t\t\tgoto capi_fail;***REMOVED******REMOVED******REMOVED***,
        'need': [{isintent_in: 'pyobj_from_#ctype#1'***REMOVED***,
             ***REMOVED***isintent_inout: 'pyarr_from_p_#ctype#1'***REMOVED***,
             ***REMOVED***iscomplex: '#ctype#'***REMOVED******REMOVED***,
        '_check': l_and(isscalar, isintent_nothide***REMOVED***,
        '_optional': ''
***REMOVED*** {  # String
        'frompyobj': [{debugcapi: '\tCFUNCSMESS("cb:Getting #varname#->\\""***REMOVED***;'***REMOVED***,
                      ***REMOVED***\tif (capi_j>capi_i***REMOVED***
\t\tGETSTRFROMPYTUPLE(capi_return,capi_i++,#varname_i#,#varname_i#_cb_len***REMOVED***;***REMOVED***,
                  ***REMOVED***debugcapi:
                       '\tfprintf(stderr,"#showvalueformat#\\":%d:.\\n",#varname_i#,#varname_i#_cb_len***REMOVED***;'***REMOVED***,
                      ***REMOVED***,
        'need': ['#ctype#', 'GETSTRFROMPYTUPLE',
             ***REMOVED***debugcapi: 'CFUNCSMESS'***REMOVED***, 'string.h'***REMOVED***,
        '_check': l_and(isstring, isintent_out***REMOVED***
***REMOVED*** {
        'pyobjfrom': [{debugcapi: '\tfprintf(stderr,"debug-capi:cb:#varname#=\\"#showvalueformat#\\":%d:\\n",#varname_i#,#varname_i#_cb_len***REMOVED***;'***REMOVED***,
                  ***REMOVED***isintent_in: ***REMOVED***\
\tif (#name#_nofargs>capi_i***REMOVED***
\t\tif (PyTuple_SetItem((PyObject ****REMOVED***capi_arglist,capi_i++,pyobj_from_#ctype#1size(#varname_i#,#varname_i#_cb_len***REMOVED******REMOVED******REMOVED***
\t\t\tgoto capi_fail;***REMOVED******REMOVED***,
                  ***REMOVED***isintent_inout: ***REMOVED***\
\tif (#name#_nofargs>capi_i***REMOVED*** {
\t\tint #varname_i#_cb_dims[***REMOVED*** = {#varname_i#_cb_len***REMOVED***;
\t\tif (PyTuple_SetItem((PyObject ****REMOVED***capi_arglist,capi_i++,pyarr_from_p_#ctype#1(#varname_i#,#varname_i#_cb_dims***REMOVED******REMOVED******REMOVED***
\t\t\tgoto capi_fail;
\t***REMOVED******REMOVED******REMOVED******REMOVED***,
        'need': [{isintent_in: 'pyobj_from_#ctype#1size'***REMOVED***,
             ***REMOVED***isintent_inout: 'pyarr_from_p_#ctype#1'***REMOVED******REMOVED***,
        '_check': l_and(isstring, isintent_nothide***REMOVED***,
        '_optional': ''
***REMOVED***
    # Array ...
***REMOVED***
        'decl': '\tnpy_intp #varname_i#_Dims[#rank#***REMOVED*** = {#rank*[-1***REMOVED***#***REMOVED***;',
        'setdims': '\t#cbsetdims#;',
        '_check': isarray,
        '_depend': ''
***REMOVED***
***REMOVED***
        'pyobjfrom': [{debugcapi: '\tfprintf(stderr,"debug-capi:cb:#varname#\\n"***REMOVED***;'***REMOVED***,
                  ***REMOVED***isintent_c: ***REMOVED***\
\tif (#name#_nofargs>capi_i***REMOVED*** {
\t\tPyArrayObject *tmp_arr = (PyArrayObject ****REMOVED***PyArray_New(&PyArray_Type,#rank#,#varname_i#_Dims,#atype#,NULL,(char****REMOVED***#varname_i#,0,NPY_ARRAY_CARRAY,NULL***REMOVED***; /*XXX: Hmm, what will destroy this array??? */
***REMOVED***,
                       l_not(isintent_c***REMOVED***: ***REMOVED***\
\tif (#name#_nofargs>capi_i***REMOVED*** {
\t\tPyArrayObject *tmp_arr = (PyArrayObject ****REMOVED***PyArray_New(&PyArray_Type,#rank#,#varname_i#_Dims,#atype#,NULL,(char****REMOVED***#varname_i#,0,NPY_ARRAY_FARRAY,NULL***REMOVED***; /*XXX: Hmm, what will destroy this array??? */
***REMOVED***,
               ***REMOVED***
                      ***REMOVED***
\t\tif (tmp_arr==NULL***REMOVED***
\t\t\tgoto capi_fail;
\t\tif (PyTuple_SetItem((PyObject ****REMOVED***capi_arglist,capi_i++,(PyObject ****REMOVED***tmp_arr***REMOVED******REMOVED***
\t\t\tgoto capi_fail;
***REMOVED******REMOVED******REMOVED***,
        '_check': l_and(isarray, isintent_nothide, l_or(isintent_in, isintent_inout***REMOVED******REMOVED***,
        '_optional': '',
***REMOVED*** {
        'frompyobj': [{debugcapi: '\tCFUNCSMESS("cb:Getting #varname#->"***REMOVED***;'***REMOVED***,
                      ***REMOVED***\tif (capi_j>capi_i***REMOVED*** {
\t\tPyArrayObject *rv_cb_arr = NULL;
\t\tif ((capi_tmp = PyTuple_GetItem(capi_return,capi_i++***REMOVED******REMOVED***==NULL***REMOVED*** goto capi_fail;
\t\trv_cb_arr =  array_from_pyobj(#atype#,#varname_i#_Dims,#rank#,F2PY_INTENT_IN***REMOVED***,
                  ***REMOVED***isintent_c: '|F2PY_INTENT_C'***REMOVED***,
                      ***REMOVED***,capi_tmp***REMOVED***;
\t\tif (rv_cb_arr == NULL***REMOVED*** {
\t\t\tfprintf(stderr,\"rv_cb_arr is NULL\\n\"***REMOVED***;
\t\t\tgoto capi_fail;
\t\t***REMOVED***
\t\tMEMCOPY(#varname_i#,PyArray_DATA(rv_cb_arr***REMOVED***,PyArray_NBYTES(rv_cb_arr***REMOVED******REMOVED***;
\t\tif (capi_tmp != (PyObject ****REMOVED***rv_cb_arr***REMOVED*** {
\t\t\tPy_DECREF(rv_cb_arr***REMOVED***;
\t\t***REMOVED***
\t***REMOVED******REMOVED***,
                  ***REMOVED***debugcapi: '\tfprintf(stderr,"<-.\\n"***REMOVED***;'***REMOVED***,
                      ***REMOVED***,
        'need': ['MEMCOPY', {iscomplexarray: '#ctype#'***REMOVED******REMOVED***,
        '_check': l_and(isarray, isintent_out***REMOVED***
***REMOVED*** {
        'docreturn': '#varname#,',
        '_check': isintent_out
***REMOVED***
***REMOVED***

################## Build call-back module #############
cb_map = {***REMOVED***


def buildcallbacks(m***REMOVED***:
    global cb_map
    cb_map[m['name'***REMOVED******REMOVED*** = [***REMOVED***
    for bi in m['body'***REMOVED***:
        if bi['block'***REMOVED*** == 'interface':
            for b in bi['body'***REMOVED***:
                if b:
                    buildcallback(b, m['name'***REMOVED******REMOVED***
                else:
                    errmess('warning: empty body for %s\n' % (m['name'***REMOVED******REMOVED******REMOVED***


def buildcallback(rout, um***REMOVED***:
    global cb_map
    from . import capi_maps

    outmess('\tConstructing call-back function "cb_%s_in_%s"\n' %
            (rout['name'***REMOVED***, um***REMOVED******REMOVED***
    args, depargs = getargs(rout***REMOVED***
    capi_maps.depargs = depargs
    var = rout['vars'***REMOVED***
    vrd = capi_maps.cb_routsign2map(rout, um***REMOVED***
    rd = dictappend({***REMOVED***, vrd***REMOVED***
    cb_map[um***REMOVED***.append([rout['name'***REMOVED***, rd['name'***REMOVED******REMOVED******REMOVED***
    for r in cb_rout_rules:
        if ('_check' in r and r['_check'***REMOVED***(rout***REMOVED******REMOVED*** or ('_check' not in r***REMOVED***:
            ar = applyrules(r, vrd, rout***REMOVED***
            rd = dictappend(rd, ar***REMOVED***
    savevrd = {***REMOVED***
    for i, a in enumerate(args***REMOVED***:
        vrd = capi_maps.cb_sign2map(a, var[a***REMOVED***, index=i***REMOVED***
        savevrd[a***REMOVED*** = vrd
        for r in cb_arg_rules:
            if '_depend' in r:
                continue
            if '_optional' in r and isoptional(var[a***REMOVED******REMOVED***:
                continue
            if ('_check' in r and r['_check'***REMOVED***(var[a***REMOVED******REMOVED******REMOVED*** or ('_check' not in r***REMOVED***:
                ar = applyrules(r, vrd, var[a***REMOVED******REMOVED***
                rd = dictappend(rd, ar***REMOVED***
                if '_break' in r:
                    break
    for a in args:
        vrd = savevrd[a***REMOVED***
        for r in cb_arg_rules:
            if '_depend' in r:
                continue
            if ('_optional' not in r***REMOVED*** or ('_optional' in r and isrequired(var[a***REMOVED******REMOVED******REMOVED***:
                continue
            if ('_check' in r and r['_check'***REMOVED***(var[a***REMOVED******REMOVED******REMOVED*** or ('_check' not in r***REMOVED***:
                ar = applyrules(r, vrd, var[a***REMOVED******REMOVED***
                rd = dictappend(rd, ar***REMOVED***
                if '_break' in r:
                    break
    for a in depargs:
        vrd = savevrd[a***REMOVED***
        for r in cb_arg_rules:
            if '_depend' not in r:
                continue
            if '_optional' in r:
                continue
            if ('_check' in r and r['_check'***REMOVED***(var[a***REMOVED******REMOVED******REMOVED*** or ('_check' not in r***REMOVED***:
                ar = applyrules(r, vrd, var[a***REMOVED******REMOVED***
                rd = dictappend(rd, ar***REMOVED***
                if '_break' in r:
                    break
    if 'args' in rd and 'optargs' in rd:
        if isinstance(rd['optargs'***REMOVED***, list***REMOVED***:
            rd['optargs'***REMOVED*** = rd['optargs'***REMOVED*** + [***REMOVED***
#ifndef F2PY_CB_RETURNCOMPLEX
,
#endif
***REMOVED******REMOVED***
            rd['optargs_nm'***REMOVED*** = rd['optargs_nm'***REMOVED*** + [***REMOVED***
#ifndef F2PY_CB_RETURNCOMPLEX
,
#endif
***REMOVED******REMOVED***
            rd['optargs_td'***REMOVED*** = rd['optargs_td'***REMOVED*** + [***REMOVED***
#ifndef F2PY_CB_RETURNCOMPLEX
,
#endif
***REMOVED******REMOVED***
    if isinstance(rd['docreturn'***REMOVED***, list***REMOVED***:
        rd['docreturn'***REMOVED*** = stripcomma(
            replace('#docreturn#', {'docreturn': rd['docreturn'***REMOVED******REMOVED******REMOVED******REMOVED***
    optargs = stripcomma(replace('#docsignopt#',
                             ***REMOVED***'docsignopt': rd['docsignopt'***REMOVED******REMOVED***
                                 ***REMOVED******REMOVED***
    if optargs == '':
        rd['docsignature'***REMOVED*** = stripcomma(
            replace('#docsign#', {'docsign': rd['docsign'***REMOVED******REMOVED******REMOVED******REMOVED***
    else:
        rd['docsignature'***REMOVED*** = replace('#docsign#[#docsignopt#***REMOVED***',
                                 ***REMOVED***'docsign': rd['docsign'***REMOVED***,
                                      'docsignopt': optargs,
                                  ***REMOVED******REMOVED***
    rd['latexdocsignature'***REMOVED*** = rd['docsignature'***REMOVED***.replace('_', '\\_'***REMOVED***
    rd['latexdocsignature'***REMOVED*** = rd['latexdocsignature'***REMOVED***.replace(',', ', '***REMOVED***
    rd['docstrsigns'***REMOVED*** = [***REMOVED***
    rd['latexdocstrsigns'***REMOVED*** = [***REMOVED***
    for k in ['docstrreq', 'docstropt', 'docstrout', 'docstrcbs'***REMOVED***:
        if k in rd and isinstance(rd[k***REMOVED***, list***REMOVED***:
            rd['docstrsigns'***REMOVED*** = rd['docstrsigns'***REMOVED*** + rd[k***REMOVED***
        k = 'latex' + k
        if k in rd and isinstance(rd[k***REMOVED***, list***REMOVED***:
            rd['latexdocstrsigns'***REMOVED*** = rd['latexdocstrsigns'***REMOVED*** + rd[k***REMOVED***[0:1***REMOVED*** +\
                ['\\begin{description***REMOVED***'***REMOVED*** + rd[k***REMOVED***[1:***REMOVED*** +\
                ['\\end{description***REMOVED***'***REMOVED***
    if 'args' not in rd:
        rd['args'***REMOVED*** = ''
        rd['args_td'***REMOVED*** = ''
        rd['args_nm'***REMOVED*** = ''
    if not (rd.get('args'***REMOVED*** or rd.get('optargs'***REMOVED*** or rd.get('strarglens'***REMOVED******REMOVED***:
        rd['noargs'***REMOVED*** = 'void'

    ar = applyrules(cb_routine_rules, rd***REMOVED***
    cfuncs.callbacks[rd['name'***REMOVED******REMOVED*** = ar['body'***REMOVED***
    if isinstance(ar['need'***REMOVED***, str***REMOVED***:
        ar['need'***REMOVED*** = [ar['need'***REMOVED******REMOVED***

    if 'need' in rd:
        for t in cfuncs.typedefs.keys(***REMOVED***:
            if t in rd['need'***REMOVED***:
                ar['need'***REMOVED***.append(t***REMOVED***

    cfuncs.typedefs_generated[rd['name'***REMOVED*** + '_typedef'***REMOVED*** = ar['cbtypedefs'***REMOVED***
    ar['need'***REMOVED***.append(rd['name'***REMOVED*** + '_typedef'***REMOVED***
    cfuncs.needs[rd['name'***REMOVED******REMOVED*** = ar['need'***REMOVED***

    capi_maps.lcb2_map[rd['name'***REMOVED******REMOVED*** = {'maxnofargs': ar['maxnofargs'***REMOVED***,
                                      'nofoptargs': ar['nofoptargs'***REMOVED***,
                                      'docstr': ar['docstr'***REMOVED***,
                                      'latexdocstr': ar['latexdocstr'***REMOVED***,
                                      'argname': rd['argname'***REMOVED***
                                  ***REMOVED***
    outmess('\t  %s\n' % (ar['docstrshort'***REMOVED******REMOVED******REMOVED***
    return
################## Build call-back function #############
