#!/usr/bin/env python
***REMOVED***

Rules for building C/API module with f2py2e.

Copyright 1999,2000 Pearu Peterson all rights reserved,
Pearu Peterson <pearu@ioc.ee>
Permission to use, modify, and distribute this software is given under the
terms of the NumPy License.

NO WARRANTY IS EXPRESSED OR IMPLIED.  USE AT YOUR OWN RISK.
$Date: 2004/11/26 11:13:06 $
Pearu Peterson

***REMOVED***
from __future__ import division, absolute_import, print_function

__version__ = "$Revision: 1.16 $"[10:-1***REMOVED***

f2py_version = 'See `f2py -v`'

import copy

from .auxfuncs import (
    getfortranname, isexternal, isfunction, isfunction_wrap, isintent_in,
    isintent_out, islogicalfunction, ismoduleroutine, isscalar,
    issubroutine, issubroutine_wrap, outmess, show
***REMOVED***


def var2fixfortran(vars, a, fa=None, f90mode=None***REMOVED***:
    if fa is None:
        fa = a
    if a not in vars:
        show(vars***REMOVED***
        outmess('var2fixfortran: No definition for argument "%s".\n' % a***REMOVED***
        return ''
    if 'typespec' not in vars[a***REMOVED***:
        show(vars[a***REMOVED******REMOVED***
        outmess('var2fixfortran: No typespec for argument "%s".\n' % a***REMOVED***
        return ''
    vardef = vars[a***REMOVED***['typespec'***REMOVED***
    if vardef == 'type' and 'typename' in vars[a***REMOVED***:
        vardef = '%s(%s***REMOVED***' % (vardef, vars[a***REMOVED***['typename'***REMOVED******REMOVED***
    selector = {***REMOVED***
    lk = ''
    if 'kindselector' in vars[a***REMOVED***:
        selector = vars[a***REMOVED***['kindselector'***REMOVED***
        lk = 'kind'
    elif 'charselector' in vars[a***REMOVED***:
        selector = vars[a***REMOVED***['charselector'***REMOVED***
        lk = 'len'
    if '*' in selector:
        if f90mode:
            if selector['*'***REMOVED*** in ['*', ':', '(****REMOVED***'***REMOVED***:
                vardef = '%s(len=****REMOVED***' % (vardef***REMOVED***
            else:
                vardef = '%s(%s=%s***REMOVED***' % (vardef, lk, selector['*'***REMOVED******REMOVED***
        else:
            if selector['*'***REMOVED*** in ['*', ':'***REMOVED***:
                vardef = '%s*(%s***REMOVED***' % (vardef, selector['*'***REMOVED******REMOVED***
            else:
                vardef = '%s*%s' % (vardef, selector['*'***REMOVED******REMOVED***
    else:
        if 'len' in selector:
            vardef = '%s(len=%s' % (vardef, selector['len'***REMOVED******REMOVED***
            if 'kind' in selector:
                vardef = '%s,kind=%s***REMOVED***' % (vardef, selector['kind'***REMOVED******REMOVED***
            else:
                vardef = '%s***REMOVED***' % (vardef***REMOVED***
        elif 'kind' in selector:
            vardef = '%s(kind=%s***REMOVED***' % (vardef, selector['kind'***REMOVED******REMOVED***

    vardef = '%s %s' % (vardef, fa***REMOVED***
    if 'dimension' in vars[a***REMOVED***:
        vardef = '%s(%s***REMOVED***' % (vardef, ','.join(vars[a***REMOVED***['dimension'***REMOVED******REMOVED******REMOVED***
    return vardef


def createfuncwrapper(rout, signature=0***REMOVED***:
    assert isfunction(rout***REMOVED***

    extra_args = [***REMOVED***
    vars = rout['vars'***REMOVED***
    for a in rout['args'***REMOVED***:
        v = rout['vars'***REMOVED***[a***REMOVED***
        for i, d in enumerate(v.get('dimension', [***REMOVED******REMOVED******REMOVED***:
            if d == ':':
                dn = 'f2py_%s_d%s' % (a, i***REMOVED***
                dv = dict(typespec='integer', intent=['hide'***REMOVED******REMOVED***
                dv['='***REMOVED*** = 'shape(%s, %s***REMOVED***' % (a, i***REMOVED***
                extra_args.append(dn***REMOVED***
                vars[dn***REMOVED*** = dv
                v['dimension'***REMOVED***[i***REMOVED*** = dn
    rout['args'***REMOVED***.extend(extra_args***REMOVED***
    need_interface = bool(extra_args***REMOVED***

    ret = [''***REMOVED***

    def add(line, ret=ret***REMOVED***:
        ret[0***REMOVED*** = '%s\n      %s' % (ret[0***REMOVED***, line***REMOVED***
    name = rout['name'***REMOVED***
    fortranname = getfortranname(rout***REMOVED***
    f90mode = ismoduleroutine(rout***REMOVED***
    newname = '%sf2pywrap' % (name***REMOVED***

    if newname not in vars:
        vars[newname***REMOVED*** = vars[name***REMOVED***
        args = [newname***REMOVED*** + rout['args'***REMOVED***[1:***REMOVED***
    else:
        args = [newname***REMOVED*** + rout['args'***REMOVED***

    l = var2fixfortran(vars, name, newname, f90mode***REMOVED***
    if l[:13***REMOVED*** == 'character*(****REMOVED***':
        if f90mode:
            l = 'character(len=10***REMOVED***' + l[13:***REMOVED***
        else:
            l = 'character*10' + l[13:***REMOVED***
        charselect = vars[name***REMOVED***['charselector'***REMOVED***
        if charselect.get('*', ''***REMOVED*** == '(****REMOVED***':
            charselect['*'***REMOVED*** = '10'
    sargs = ', '.join(args***REMOVED***
    if f90mode:
        add('subroutine f2pywrap_%s_%s (%s***REMOVED***' %
            (rout['modulename'***REMOVED***, name, sargs***REMOVED******REMOVED***
        if not signature:
            add('use %s, only : %s' % (rout['modulename'***REMOVED***, fortranname***REMOVED******REMOVED***
    else:
        add('subroutine f2pywrap%s (%s***REMOVED***' % (name, sargs***REMOVED******REMOVED***
        if not need_interface:
            add('external %s' % (fortranname***REMOVED******REMOVED***
            l = l + ', ' + fortranname
    if need_interface:
        for line in rout['saved_interface'***REMOVED***.split('\n'***REMOVED***:
            if line.lstrip(***REMOVED***.startswith('use '***REMOVED***:
                add(line***REMOVED***

    args = args[1:***REMOVED***
    dumped_args = [***REMOVED***
    for a in args:
        if isexternal(vars[a***REMOVED******REMOVED***:
            add('external %s' % (a***REMOVED******REMOVED***
            dumped_args.append(a***REMOVED***
    for a in args:
        if a in dumped_args:
            continue
        if isscalar(vars[a***REMOVED******REMOVED***:
            add(var2fixfortran(vars, a, f90mode=f90mode***REMOVED******REMOVED***
            dumped_args.append(a***REMOVED***
    for a in args:
        if a in dumped_args:
            continue
        if isintent_in(vars[a***REMOVED******REMOVED***:
            add(var2fixfortran(vars, a, f90mode=f90mode***REMOVED******REMOVED***
            dumped_args.append(a***REMOVED***
    for a in args:
        if a in dumped_args:
            continue
        add(var2fixfortran(vars, a, f90mode=f90mode***REMOVED******REMOVED***

    add(l***REMOVED***

    if need_interface:
        if f90mode:
            # f90 module already defines needed interface
            pass
        else:
            add('interface'***REMOVED***
            add(rout['saved_interface'***REMOVED***.lstrip(***REMOVED******REMOVED***
            add('end interface'***REMOVED***

    sargs = ', '.join([a for a in args if a not in extra_args***REMOVED******REMOVED***

    if not signature:
        if islogicalfunction(rout***REMOVED***:
            add('%s = .not.(.not.%s(%s***REMOVED******REMOVED***' % (newname, fortranname, sargs***REMOVED******REMOVED***
        else:
            add('%s = %s(%s***REMOVED***' % (newname, fortranname, sargs***REMOVED******REMOVED***
    if f90mode:
        add('end subroutine f2pywrap_%s_%s' % (rout['modulename'***REMOVED***, name***REMOVED******REMOVED***
    else:
        add('end'***REMOVED***
    return ret[0***REMOVED***


def createsubrwrapper(rout, signature=0***REMOVED***:
    assert issubroutine(rout***REMOVED***

    extra_args = [***REMOVED***
    vars = rout['vars'***REMOVED***
    for a in rout['args'***REMOVED***:
        v = rout['vars'***REMOVED***[a***REMOVED***
        for i, d in enumerate(v.get('dimension', [***REMOVED******REMOVED******REMOVED***:
            if d == ':':
                dn = 'f2py_%s_d%s' % (a, i***REMOVED***
                dv = dict(typespec='integer', intent=['hide'***REMOVED******REMOVED***
                dv['='***REMOVED*** = 'shape(%s, %s***REMOVED***' % (a, i***REMOVED***
                extra_args.append(dn***REMOVED***
                vars[dn***REMOVED*** = dv
                v['dimension'***REMOVED***[i***REMOVED*** = dn
    rout['args'***REMOVED***.extend(extra_args***REMOVED***
    need_interface = bool(extra_args***REMOVED***

    ret = [''***REMOVED***

    def add(line, ret=ret***REMOVED***:
        ret[0***REMOVED*** = '%s\n      %s' % (ret[0***REMOVED***, line***REMOVED***
    name = rout['name'***REMOVED***
    fortranname = getfortranname(rout***REMOVED***
    f90mode = ismoduleroutine(rout***REMOVED***

    args = rout['args'***REMOVED***

    sargs = ', '.join(args***REMOVED***
    if f90mode:
        add('subroutine f2pywrap_%s_%s (%s***REMOVED***' %
            (rout['modulename'***REMOVED***, name, sargs***REMOVED******REMOVED***
        if not signature:
            add('use %s, only : %s' % (rout['modulename'***REMOVED***, fortranname***REMOVED******REMOVED***
    else:
        add('subroutine f2pywrap%s (%s***REMOVED***' % (name, sargs***REMOVED******REMOVED***
        if not need_interface:
            add('external %s' % (fortranname***REMOVED******REMOVED***

    if need_interface:
        for line in rout['saved_interface'***REMOVED***.split('\n'***REMOVED***:
            if line.lstrip(***REMOVED***.startswith('use '***REMOVED***:
                add(line***REMOVED***

    dumped_args = [***REMOVED***
    for a in args:
        if isexternal(vars[a***REMOVED******REMOVED***:
            add('external %s' % (a***REMOVED******REMOVED***
            dumped_args.append(a***REMOVED***
    for a in args:
        if a in dumped_args:
            continue
        if isscalar(vars[a***REMOVED******REMOVED***:
            add(var2fixfortran(vars, a, f90mode=f90mode***REMOVED******REMOVED***
            dumped_args.append(a***REMOVED***
    for a in args:
        if a in dumped_args:
            continue
        add(var2fixfortran(vars, a, f90mode=f90mode***REMOVED******REMOVED***

    if need_interface:
        if f90mode:
            # f90 module already defines needed interface
            pass
        else:
            add('interface'***REMOVED***
            add(rout['saved_interface'***REMOVED***.lstrip(***REMOVED******REMOVED***
            add('end interface'***REMOVED***

    sargs = ', '.join([a for a in args if a not in extra_args***REMOVED******REMOVED***

    if not signature:
        add('call %s(%s***REMOVED***' % (fortranname, sargs***REMOVED******REMOVED***
    if f90mode:
        add('end subroutine f2pywrap_%s_%s' % (rout['modulename'***REMOVED***, name***REMOVED******REMOVED***
    else:
        add('end'***REMOVED***
    return ret[0***REMOVED***


def assubr(rout***REMOVED***:
    if isfunction_wrap(rout***REMOVED***:
        fortranname = getfortranname(rout***REMOVED***
        name = rout['name'***REMOVED***
        outmess('\t\tCreating wrapper for Fortran function "%s"("%s"***REMOVED***...\n' % (
            name, fortranname***REMOVED******REMOVED***
        rout = copy.copy(rout***REMOVED***
        fname = name
        rname = fname
        if 'result' in rout:
            rname = rout['result'***REMOVED***
            rout['vars'***REMOVED***[fname***REMOVED*** = rout['vars'***REMOVED***[rname***REMOVED***
        fvar = rout['vars'***REMOVED***[fname***REMOVED***
        if not isintent_out(fvar***REMOVED***:
            if 'intent' not in fvar:
                fvar['intent'***REMOVED*** = [***REMOVED***
            fvar['intent'***REMOVED***.append('out'***REMOVED***
            flag = 1
            for i in fvar['intent'***REMOVED***:
                if i.startswith('out='***REMOVED***:
                    flag = 0
                    break
            if flag:
                fvar['intent'***REMOVED***.append('out=%s' % (rname***REMOVED******REMOVED***
        rout['args'***REMOVED***[:***REMOVED*** = [fname***REMOVED*** + rout['args'***REMOVED***
        return rout, createfuncwrapper(rout***REMOVED***
    if issubroutine_wrap(rout***REMOVED***:
        fortranname = getfortranname(rout***REMOVED***
        name = rout['name'***REMOVED***
        outmess('\t\tCreating wrapper for Fortran subroutine "%s"("%s"***REMOVED***...\n' % (
            name, fortranname***REMOVED******REMOVED***
        rout = copy.copy(rout***REMOVED***
        return rout, createsubrwrapper(rout***REMOVED***
    return rout, ''
