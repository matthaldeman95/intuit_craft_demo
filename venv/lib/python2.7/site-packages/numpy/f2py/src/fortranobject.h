#ifndef Py_FORTRANOBJECT_H
#define Py_FORTRANOBJECT_H
#ifdef __cplusplus
extern "C" {
#endif

#include "Python.h"

#ifdef FORTRANOBJECT_C
#define NO_IMPORT_ARRAY
#endif
#define PY_ARRAY_UNIQUE_SYMBOL _npy_f2py_ARRAY_API
#include "numpy/arrayobject.h"

/*
 * Python 3 support macros
 */
#if PY_VERSION_HEX >= 0x03000000
#define PyString_Check PyBytes_Check
#define PyString_GET_SIZE PyBytes_GET_SIZE
#define PyString_AS_STRING PyBytes_AS_STRING
#define PyString_FromString PyBytes_FromString
#define PyUString_FromStringAndSize PyUnicode_FromStringAndSize
#define PyString_ConcatAndDel PyBytes_ConcatAndDel
#define PyString_AsString PyBytes_AsString

#define PyInt_Check PyLong_Check
#define PyInt_FromLong PyLong_FromLong
#define PyInt_AS_LONG PyLong_AsLong
#define PyInt_AsLong PyLong_AsLong

#define PyNumber_Int PyNumber_Long

#else

#define PyUString_FromStringAndSize PyString_FromStringAndSize
#endif


#ifdef F2PY_REPORT_ATEXIT
#include <sys/timeb.h>
  extern void f2py_start_clock(void***REMOVED***;
  extern void f2py_stop_clock(void***REMOVED***;
  extern void f2py_start_call_clock(void***REMOVED***;
  extern void f2py_stop_call_clock(void***REMOVED***;
  extern void f2py_cb_start_clock(void***REMOVED***;
  extern void f2py_cb_stop_clock(void***REMOVED***;
  extern void f2py_cb_start_call_clock(void***REMOVED***;
  extern void f2py_cb_stop_call_clock(void***REMOVED***;
  extern void f2py_report_on_exit(int,void****REMOVED***;
#endif

#ifdef DMALLOC
#include "dmalloc.h"
#endif

/* Fortran object interface */

/*
123456789-123456789-123456789-123456789-123456789-123456789-123456789-12

PyFortranObject represents various Fortran objects:
Fortran (module***REMOVED*** routines, COMMON blocks, module data.

Author: Pearu Peterson <pearu@cens.ioc.ee>
*/

#define F2PY_MAX_DIMS 40

typedef void (*f2py_set_data_func***REMOVED***(char*,npy_intp****REMOVED***;
typedef void (*f2py_void_func***REMOVED***(void***REMOVED***;
typedef void (*f2py_init_func***REMOVED***(int*,npy_intp*,f2py_set_data_func,int****REMOVED***;

  /*typedef void* (*f2py_c_func***REMOVED***(void*,...***REMOVED***;*/

typedef void *(*f2pycfunc***REMOVED***(void***REMOVED***;

typedef struct {
  char *name;                /* attribute (array||routine***REMOVED*** name */
  int rank;                  /* array rank, 0 for scalar, max is F2PY_MAX_DIMS,
				|| rank=-1 for Fortran routine */
  struct {npy_intp d[F2PY_MAX_DIMS***REMOVED***;***REMOVED*** dims; /* dimensions of the array, || not used */
  int type;                  /* PyArray_<type> || not used */
  char *data;                /* pointer to array || Fortran routine */
  f2py_init_func func;            /* initialization function for
				allocatable arrays:
				func(&rank,dims,set_ptr_func,name,len(name***REMOVED******REMOVED***
				|| C/API wrapper for Fortran routine */
  char *doc;                 /* documentation string; only recommended
				for routines. */
***REMOVED*** FortranDataDef;

typedef struct {
  PyObject_HEAD
  int len;                   /* Number of attributes */
  FortranDataDef *defs;      /* An array of FortranDataDef's */
  PyObject       *dict;      /* Fortran object attribute dictionary */
***REMOVED*** PyFortranObject;

#define PyFortran_Check(op***REMOVED*** (Py_TYPE(op***REMOVED*** == &PyFortran_Type***REMOVED***
#define PyFortran_Check1(op***REMOVED*** (0==strcmp(Py_TYPE(op***REMOVED***->tp_name,"fortran"***REMOVED******REMOVED***

  extern PyTypeObject PyFortran_Type;
  extern int F2PyDict_SetItemString(PyObject* dict, char *name, PyObject *obj***REMOVED***;
  extern PyObject * PyFortranObject_New(FortranDataDef* defs, f2py_void_func init***REMOVED***;
  extern PyObject * PyFortranObject_NewAsAttr(FortranDataDef* defs***REMOVED***;

#if PY_VERSION_HEX >= 0x03000000

PyObject * F2PyCapsule_FromVoidPtr(void *ptr, void (*dtor***REMOVED***(PyObject ****REMOVED******REMOVED***;
void * F2PyCapsule_AsVoidPtr(PyObject *obj***REMOVED***;
int F2PyCapsule_Check(PyObject *ptr***REMOVED***;

#else

PyObject * F2PyCapsule_FromVoidPtr(void *ptr, void (*dtor***REMOVED***(void ****REMOVED******REMOVED***;
void * F2PyCapsule_AsVoidPtr(PyObject *ptr***REMOVED***;
int F2PyCapsule_Check(PyObject *ptr***REMOVED***;

#endif

#define ISCONTIGUOUS(m***REMOVED*** (PyArray_FLAGS(m***REMOVED*** & NPY_ARRAY_C_CONTIGUOUS***REMOVED***
#define F2PY_INTENT_IN 1
#define F2PY_INTENT_INOUT 2
#define F2PY_INTENT_OUT 4
#define F2PY_INTENT_HIDE 8
#define F2PY_INTENT_CACHE 16
#define F2PY_INTENT_COPY 32
#define F2PY_INTENT_C 64
#define F2PY_OPTIONAL 128
#define F2PY_INTENT_INPLACE 256
#define F2PY_INTENT_ALIGNED4 512
#define F2PY_INTENT_ALIGNED8 1024
#define F2PY_INTENT_ALIGNED16 2048

#define ARRAY_ISALIGNED(ARR, SIZE***REMOVED*** ((size_t***REMOVED***(PyArray_DATA(ARR***REMOVED******REMOVED*** % (SIZE***REMOVED*** == 0***REMOVED***
#define F2PY_ALIGN4(intent***REMOVED*** (intent & F2PY_INTENT_ALIGNED4***REMOVED***
#define F2PY_ALIGN8(intent***REMOVED*** (intent & F2PY_INTENT_ALIGNED8***REMOVED***
#define F2PY_ALIGN16(intent***REMOVED*** (intent & F2PY_INTENT_ALIGNED16***REMOVED***

#define F2PY_GET_ALIGNMENT(intent***REMOVED*** \
	(F2PY_ALIGN4(intent***REMOVED*** ? 4 : \
	 (F2PY_ALIGN8(intent***REMOVED*** ? 8 : \
	  (F2PY_ALIGN16(intent***REMOVED*** ? 16 : 1***REMOVED*** ***REMOVED******REMOVED***
#define F2PY_CHECK_ALIGNMENT(arr, intent***REMOVED*** ARRAY_ISALIGNED(arr, F2PY_GET_ALIGNMENT(intent***REMOVED******REMOVED***

  extern PyArrayObject* array_from_pyobj(const int type_num,
					 npy_intp *dims,
					 const int rank,
					 const int intent,
					 PyObject *obj***REMOVED***;
  extern int copy_ND_array(const PyArrayObject *in, PyArrayObject *out***REMOVED***;

#ifdef DEBUG_COPY_ND_ARRAY
  extern void dump_attrs(const PyArrayObject* arr***REMOVED***;
#endif


#ifdef __cplusplus
***REMOVED***
#endif
#endif /* !Py_FORTRANOBJECT_H */
