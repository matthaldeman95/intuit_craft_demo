# Autoreloading launcher.
# Borrowed from Peter Hunt and the CherryPy project (http://www.cherrypy.org***REMOVED***.
# Some taken from Ian Bicking's Paste (http://pythonpaste.org/***REMOVED***.
#
# Portions copyright (c***REMOVED*** 2004, CherryPy Team (team@cherrypy.org***REMOVED***
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright notice,
#       this list of conditions and the following disclaimer in the documentation
#       and/or other materials provided with the distribution.
#     * Neither the name of the CherryPy Team nor the names of its contributors
#       may be used to endorse or promote products derived from this software
#       without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION***REMOVED*** HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE***REMOVED*** ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

***REMOVED***
import signal
import sys
import time
import traceback

from django.apps import apps
from django.conf import settings
from django.core.signals import request_finished
from django.utils import six
from django.utils._os import npath
from django.utils.six.moves import _thread as thread

# This import does nothing, but it's necessary to avoid some race conditions
# in the threading module. See http://code.djangoproject.com/ticket/2330 .
***REMOVED***
    import threading  # NOQA
except ImportError:
    pass

***REMOVED***
    import termios
except ImportError:
    termios = None

USE_INOTIFY = False
***REMOVED***
    # Test whether inotify is enabled and likely to work
    import pyinotify

    fd = pyinotify.INotifyWrapper.create(***REMOVED***.inotify_init(***REMOVED***
    if fd >= 0:
        USE_INOTIFY = True
        os.close(fd***REMOVED***
except ImportError:
    pass

RUN_RELOADER = True

FILE_MODIFIED = 1
I18N_MODIFIED = 2

_mtimes = {***REMOVED***
_win = (sys.platform == "win32"***REMOVED***

_exception = None
_error_files = [***REMOVED***
_cached_modules = set(***REMOVED***
_cached_filenames = [***REMOVED***


def gen_filenames(only_new=False***REMOVED***:
    ***REMOVED***
    Returns a list of filenames referenced in sys.modules and translation
    files.
    ***REMOVED***
    # N.B. ``list(...***REMOVED***`` is needed, because this runs in parallel with
    # application code which might be mutating ``sys.modules``, and this will
    # fail with RuntimeError: cannot mutate dictionary while iterating
    global _cached_modules, _cached_filenames
    module_values = set(sys.modules.values(***REMOVED******REMOVED***
    _cached_filenames = clean_files(_cached_filenames***REMOVED***
    if _cached_modules == module_values:
        # No changes in module list, short-circuit the function
        if only_new:
            return [***REMOVED***
        else:
            return _cached_filenames + clean_files(_error_files***REMOVED***

    new_modules = module_values - _cached_modules
    new_filenames = clean_files(
        [filename.__file__ for filename in new_modules
         if hasattr(filename, '__file__'***REMOVED******REMOVED******REMOVED***

    if not _cached_filenames and settings.USE_I18N:
        # Add the names of the .mo files that can be generated
        # by compilemessages management command to the list of files watched.
        basedirs = [os.path.join(os.path.dirname(os.path.dirname(__file__***REMOVED******REMOVED***,
                                 'conf', 'locale'***REMOVED***,
                    'locale'***REMOVED***
        for app_config in reversed(list(apps.get_app_configs(***REMOVED******REMOVED******REMOVED***:
            basedirs.append(os.path.join(npath(app_config.path***REMOVED***, 'locale'***REMOVED******REMOVED***
        basedirs.extend(settings.LOCALE_PATHS***REMOVED***
        basedirs = [os.path.abspath(basedir***REMOVED*** for basedir in basedirs
                    if os.path.isdir(basedir***REMOVED******REMOVED***
        for basedir in basedirs:
            for dirpath, dirnames, locale_filenames in os.walk(basedir***REMOVED***:
                for filename in locale_filenames:
                    if filename.endswith('.mo'***REMOVED***:
                        new_filenames.append(os.path.join(dirpath, filename***REMOVED******REMOVED***

    _cached_modules = _cached_modules.union(new_modules***REMOVED***
    _cached_filenames += new_filenames
    if only_new:
        return new_filenames + clean_files(_error_files***REMOVED***
    else:
        return _cached_filenames + clean_files(_error_files***REMOVED***


def clean_files(filelist***REMOVED***:
    filenames = [***REMOVED***
    for filename in filelist:
        if not filename:
            continue
        if filename.endswith(".pyc"***REMOVED*** or filename.endswith(".pyo"***REMOVED***:
            filename = filename[:-1***REMOVED***
        if filename.endswith("$py.class"***REMOVED***:
            filename = filename[:-9***REMOVED*** + ".py"
        if os.path.exists(filename***REMOVED***:
            filenames.append(filename***REMOVED***
    return filenames


def reset_translations(***REMOVED***:
    import gettext
    from django.utils.translation import trans_real
    gettext._translations = {***REMOVED***
    trans_real._translations = {***REMOVED***
    trans_real._default = None
    trans_real._active = threading.local(***REMOVED***


def inotify_code_changed(***REMOVED***:
    ***REMOVED***
    Checks for changed code using inotify. After being called
    it blocks until a change event has been fired.
    ***REMOVED***
    class EventHandler(pyinotify.ProcessEvent***REMOVED***:
        modified_code = None

        def process_default(self, event***REMOVED***:
            if event.path.endswith('.mo'***REMOVED***:
                EventHandler.modified_code = I18N_MODIFIED
            else:
                EventHandler.modified_code = FILE_MODIFIED

    wm = pyinotify.WatchManager(***REMOVED***
    notifier = pyinotify.Notifier(wm, EventHandler(***REMOVED******REMOVED***

    def update_watch(sender=None, **kwargs***REMOVED***:
        if sender and getattr(sender, 'handles_files', False***REMOVED***:
            # No need to update watches when request serves files.
            # (sender is supposed to be a django.core.handlers.BaseHandler subclass***REMOVED***
            return
        mask = (
            pyinotify.IN_MODIFY |
            pyinotify.IN_DELETE |
            pyinotify.IN_ATTRIB |
            pyinotify.IN_MOVED_FROM |
            pyinotify.IN_MOVED_TO |
            pyinotify.IN_CREATE |
            pyinotify.IN_DELETE_SELF |
            pyinotify.IN_MOVE_SELF
        ***REMOVED***
        for path in gen_filenames(only_new=True***REMOVED***:
            wm.add_watch(path, mask***REMOVED***

    # New modules may get imported when a request is processed.
    request_finished.connect(update_watch***REMOVED***

    # Block until an event happens.
    update_watch(***REMOVED***
    notifier.check_events(timeout=None***REMOVED***
    notifier.read_events(***REMOVED***
    notifier.process_events(***REMOVED***
    notifier.stop(***REMOVED***

    # If we are here the code must have changed.
    return EventHandler.modified_code


def code_changed(***REMOVED***:
    global _mtimes, _win
    for filename in gen_filenames(***REMOVED***:
        stat = os.stat(filename***REMOVED***
        mtime = stat.st_mtime
        if _win:
            mtime -= stat.st_ctime
        if filename not in _mtimes:
            _mtimes[filename***REMOVED*** = mtime
            continue
        if mtime != _mtimes[filename***REMOVED***:
            _mtimes = {***REMOVED***
            ***REMOVED***
                del _error_files[_error_files.index(filename***REMOVED******REMOVED***
            except ValueError:
                pass
            return I18N_MODIFIED if filename.endswith('.mo'***REMOVED*** else FILE_MODIFIED
    return False


def check_errors(fn***REMOVED***:
    def wrapper(*args, **kwargs***REMOVED***:
        global _exception
        ***REMOVED***
            fn(*args, **kwargs***REMOVED***
        except Exception:
            _exception = sys.exc_info(***REMOVED***

            et, ev, tb = _exception

            if getattr(ev, 'filename', None***REMOVED*** is None:
                # get the filename from the last item in the stack
                filename = traceback.extract_tb(tb***REMOVED***[-1***REMOVED***[0***REMOVED***
            else:
                filename = ev.filename

            if filename not in _error_files:
                _error_files.append(filename***REMOVED***

            raise

    return wrapper


def raise_last_exception(***REMOVED***:
    global _exception
    if _exception is not None:
        six.reraise(*_exception***REMOVED***


def ensure_echo_on(***REMOVED***:
    if termios:
        fd = sys.stdin
        if fd.isatty(***REMOVED***:
            attr_list = termios.tcgetattr(fd***REMOVED***
            if not attr_list[3***REMOVED*** & termios.ECHO:
                attr_list[3***REMOVED*** |= termios.ECHO
                if hasattr(signal, 'SIGTTOU'***REMOVED***:
                    old_handler = signal.signal(signal.SIGTTOU, signal.SIG_IGN***REMOVED***
                else:
                    old_handler = None
                termios.tcsetattr(fd, termios.TCSANOW, attr_list***REMOVED***
                if old_handler is not None:
                    signal.signal(signal.SIGTTOU, old_handler***REMOVED***


def reloader_thread(***REMOVED***:
    ensure_echo_on(***REMOVED***
    if USE_INOTIFY:
        fn = inotify_code_changed
    else:
        fn = code_changed
    while RUN_RELOADER:
        change = fn(***REMOVED***
        if change == FILE_MODIFIED:
            sys.exit(3***REMOVED***  # force reload
        elif change == I18N_MODIFIED:
            reset_translations(***REMOVED***
        time.sleep(1***REMOVED***


def restart_with_reloader(***REMOVED***:
    while True:
        args = [sys.executable***REMOVED*** + ['-W%s' % o for o in sys.warnoptions***REMOVED*** + sys.argv
        if sys.platform == "win32":
            args = ['"%s"' % arg for arg in args***REMOVED***
        new_environ = os.environ.copy(***REMOVED***
        new_environ["RUN_MAIN"***REMOVED*** = 'true'
        exit_code = os.spawnve(os.P_WAIT, sys.executable, args, new_environ***REMOVED***
        if exit_code != 3:
            return exit_code


def python_reloader(main_func, args, kwargs***REMOVED***:
    if os.environ.get("RUN_MAIN"***REMOVED*** == "true":
        thread.start_new_thread(main_func, args, kwargs***REMOVED***
        ***REMOVED***
            reloader_thread(***REMOVED***
        except KeyboardInterrupt:
            pass
    else:
        ***REMOVED***
            exit_code = restart_with_reloader(***REMOVED***
            if exit_code < 0:
                os.kill(os.getpid(***REMOVED***, -exit_code***REMOVED***
            else:
                sys.exit(exit_code***REMOVED***
        except KeyboardInterrupt:
            pass


def jython_reloader(main_func, args, kwargs***REMOVED***:
    from _systemrestart import SystemRestart
    thread.start_new_thread(main_func, args***REMOVED***
    while True:
        if code_changed(***REMOVED***:
            raise SystemRestart
        time.sleep(1***REMOVED***


def main(main_func, args=None, kwargs=None***REMOVED***:
    if args is None:
        args = (***REMOVED***
    if kwargs is None:
        kwargs = {***REMOVED***
    if sys.platform.startswith('java'***REMOVED***:
        reloader = jython_reloader
    else:
        reloader = python_reloader

    wrapped_main_func = check_errors(main_func***REMOVED***
    reloader(wrapped_main_func, args, kwargs***REMOVED***
