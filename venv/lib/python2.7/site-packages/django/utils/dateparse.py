***REMOVED***Functions to parse datetime objects.***REMOVED***

# We're using regular expressions rather than time.strptime because:
# - They provide both validation and parsing.
# - They're more flexible for datetimes.
# - The date/datetime/time constructors produce friendlier error messages.

import datetime
import re

from django.utils import six
from django.utils.timezone import get_fixed_timezone, utc

date_re = re.compile(
    r'(?P<year>\d{4***REMOVED******REMOVED***-(?P<month>\d{1,2***REMOVED******REMOVED***-(?P<day>\d{1,2***REMOVED******REMOVED***$'
***REMOVED***

time_re = re.compile(
    r'(?P<hour>\d{1,2***REMOVED******REMOVED***:(?P<minute>\d{1,2***REMOVED******REMOVED***'
    r'(?::(?P<second>\d{1,2***REMOVED******REMOVED***(?:\.(?P<microsecond>\d{1,6***REMOVED******REMOVED***\d{0,6***REMOVED******REMOVED***?***REMOVED***?'
***REMOVED***

datetime_re = re.compile(
    r'(?P<year>\d{4***REMOVED******REMOVED***-(?P<month>\d{1,2***REMOVED******REMOVED***-(?P<day>\d{1,2***REMOVED******REMOVED***'
    r'[T ***REMOVED***(?P<hour>\d{1,2***REMOVED******REMOVED***:(?P<minute>\d{1,2***REMOVED******REMOVED***'
    r'(?::(?P<second>\d{1,2***REMOVED******REMOVED***(?:\.(?P<microsecond>\d{1,6***REMOVED******REMOVED***\d{0,6***REMOVED******REMOVED***?***REMOVED***?'
    r'(?P<tzinfo>Z|[+-***REMOVED***\d{2***REMOVED***(?::?\d{2***REMOVED******REMOVED***?***REMOVED***?$'
***REMOVED***

standard_duration_re = re.compile(
    r'^'
    r'(?:(?P<days>-?\d+***REMOVED*** (days?, ***REMOVED***?***REMOVED***?'
    r'((?:(?P<hours>\d+***REMOVED***:***REMOVED***(?=\d+:\d+***REMOVED******REMOVED***?'
    r'(?:(?P<minutes>\d+***REMOVED***:***REMOVED***?'
    r'(?P<seconds>\d+***REMOVED***'
    r'(?:\.(?P<microseconds>\d{1,6***REMOVED******REMOVED***\d{0,6***REMOVED******REMOVED***?'
    r'$'
***REMOVED***

# Support the sections of ISO 8601 date representation that are accepted by
# timedelta
iso8601_duration_re = re.compile(
    r'^P'
    r'(?:(?P<days>\d+(.\d+***REMOVED***?***REMOVED***D***REMOVED***?'
    r'(?:T'
    r'(?:(?P<hours>\d+(.\d+***REMOVED***?***REMOVED***H***REMOVED***?'
    r'(?:(?P<minutes>\d+(.\d+***REMOVED***?***REMOVED***M***REMOVED***?'
    r'(?:(?P<seconds>\d+(.\d+***REMOVED***?***REMOVED***S***REMOVED***?'
    r'***REMOVED***?'
    r'$'
***REMOVED***


def parse_date(value***REMOVED***:
    ***REMOVED***Parses a string and return a datetime.date.

    Raises ValueError if the input is well formatted but not a valid date.
    Returns None if the input isn't well formatted.
    ***REMOVED***
    match = date_re.match(value***REMOVED***
    if match:
        kw = {k: int(v***REMOVED*** for k, v in six.iteritems(match.groupdict(***REMOVED******REMOVED******REMOVED***
        return datetime.date(**kw***REMOVED***


def parse_time(value***REMOVED***:
    ***REMOVED***Parses a string and return a datetime.time.

    This function doesn't support time zone offsets.

    Raises ValueError if the input is well formatted but not a valid time.
    Returns None if the input isn't well formatted, in particular if it
    contains an offset.
    ***REMOVED***
    match = time_re.match(value***REMOVED***
    if match:
        kw = match.groupdict(***REMOVED***
        if kw['microsecond'***REMOVED***:
            kw['microsecond'***REMOVED*** = kw['microsecond'***REMOVED***.ljust(6, '0'***REMOVED***
        kw = {k: int(v***REMOVED*** for k, v in six.iteritems(kw***REMOVED*** if v is not None***REMOVED***
        return datetime.time(**kw***REMOVED***


def parse_datetime(value***REMOVED***:
    ***REMOVED***Parses a string and return a datetime.datetime.

    This function supports time zone offsets. When the input contains one,
    the output uses a timezone with a fixed offset from UTC.

    Raises ValueError if the input is well formatted but not a valid datetime.
    Returns None if the input isn't well formatted.
    ***REMOVED***
    match = datetime_re.match(value***REMOVED***
    if match:
        kw = match.groupdict(***REMOVED***
        if kw['microsecond'***REMOVED***:
            kw['microsecond'***REMOVED*** = kw['microsecond'***REMOVED***.ljust(6, '0'***REMOVED***
        tzinfo = kw.pop('tzinfo'***REMOVED***
        if tzinfo == 'Z':
            tzinfo = utc
        elif tzinfo is not None:
            offset_mins = int(tzinfo[-2:***REMOVED******REMOVED*** if len(tzinfo***REMOVED*** > 3 else 0
            offset = 60 * int(tzinfo[1:3***REMOVED******REMOVED*** + offset_mins
            if tzinfo[0***REMOVED*** == '-':
                offset = -offset
            tzinfo = get_fixed_timezone(offset***REMOVED***
        kw = {k: int(v***REMOVED*** for k, v in six.iteritems(kw***REMOVED*** if v is not None***REMOVED***
        kw['tzinfo'***REMOVED*** = tzinfo
        return datetime.datetime(**kw***REMOVED***


def parse_duration(value***REMOVED***:
    ***REMOVED***Parses a duration string and returns a datetime.timedelta.

    The preferred format for durations in Django is '%d %H:%M:%S.%f'.

    Also supports ISO 8601 representation.
    ***REMOVED***
    match = standard_duration_re.match(value***REMOVED***
    if not match:
        match = iso8601_duration_re.match(value***REMOVED***
    if match:
        kw = match.groupdict(***REMOVED***
        if kw.get('microseconds'***REMOVED***:
            kw['microseconds'***REMOVED*** = kw['microseconds'***REMOVED***.ljust(6, '0'***REMOVED***
        kw = {k: float(v***REMOVED*** for k, v in six.iteritems(kw***REMOVED*** if v is not None***REMOVED***
        return datetime.timedelta(**kw***REMOVED***
