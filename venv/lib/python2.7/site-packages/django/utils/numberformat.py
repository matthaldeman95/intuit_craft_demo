from __future__ import unicode_literals

from decimal import Decimal

from django.conf import settings
from django.utils import six
from django.utils.safestring import mark_safe


def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',
           force_grouping=False***REMOVED***:
    ***REMOVED***
    Gets a number (as a number or string***REMOVED***, and returns it as a string,
    using formats defined as arguments:

    * decimal_sep: Decimal separator symbol (for example "."***REMOVED***
    * decimal_pos: Number of decimal positions
    * grouping: Number of digits in every group limited by thousand separator
    * thousand_sep: Thousand separator symbol (for example ","***REMOVED***
    ***REMOVED***
    use_grouping = settings.USE_L10N and settings.USE_THOUSAND_SEPARATOR
    use_grouping = use_grouping or force_grouping
    use_grouping = use_grouping and grouping > 0
    # Make the common case fast
    if isinstance(number, int***REMOVED*** and not use_grouping and not decimal_pos:
        return mark_safe(six.text_type(number***REMOVED******REMOVED***
    # sign
    sign = ''
    if isinstance(number, Decimal***REMOVED***:
        str_number = '{:f***REMOVED***'.format(number***REMOVED***
    else:
        str_number = six.text_type(number***REMOVED***
    if str_number[0***REMOVED*** == '-':
        sign = '-'
        str_number = str_number[1:***REMOVED***
    # decimal part
    if '.' in str_number:
        int_part, dec_part = str_number.split('.'***REMOVED***
        if decimal_pos is not None:
            dec_part = dec_part[:decimal_pos***REMOVED***
    else:
        int_part, dec_part = str_number, ''
    if decimal_pos is not None:
        dec_part = dec_part + ('0' * (decimal_pos - len(dec_part***REMOVED******REMOVED******REMOVED***
    if dec_part:
        dec_part = decimal_sep + dec_part
    # grouping
    if use_grouping:
        int_part_gd = ''
        for cnt, digit in enumerate(int_part[::-1***REMOVED******REMOVED***:
            if cnt and not cnt % grouping:
                int_part_gd += thousand_sep[::-1***REMOVED***
            int_part_gd += digit
        int_part = int_part_gd[::-1***REMOVED***
    return sign + int_part + dec_part
