***REMOVED***
termcolors.py
***REMOVED***

from django.utils import six

color_names = ('black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white'***REMOVED***
foreground = {color_names[x***REMOVED***: '3%s' % x for x in range(8***REMOVED******REMOVED***
background = {color_names[x***REMOVED***: '4%s' % x for x in range(8***REMOVED******REMOVED***

RESET = '0'
opt_dict = {'bold': '1', 'underscore': '4', 'blink': '5', 'reverse': '7', 'conceal': '8'***REMOVED***


def colorize(text='', opts=(***REMOVED***, **kwargs***REMOVED***:
    ***REMOVED***
    Returns your text, enclosed in ANSI graphics codes.

    Depends on the keyword arguments 'fg' and 'bg', and the contents of
    the opts tuple/list.

    Returns the RESET code if no parameters are given.

    Valid colors:
        'black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white'

    Valid options:
        'bold'
        'underscore'
        'blink'
        'reverse'
        'conceal'
        'noreset' - string will not be auto-terminated with the RESET code

    Examples:
        colorize('hello', fg='red', bg='blue', opts=('blink',***REMOVED******REMOVED***
        colorize(***REMOVED***
        colorize('goodbye', opts=('underscore',***REMOVED******REMOVED***
        print(colorize('first line', fg='red', opts=('noreset',***REMOVED******REMOVED******REMOVED***
        print('this should be red too'***REMOVED***
        print(colorize('and so should this'***REMOVED******REMOVED***
        print('this should not be red'***REMOVED***
    ***REMOVED***
    code_list = [***REMOVED***
    if text == '' and len(opts***REMOVED*** == 1 and opts[0***REMOVED*** == 'reset':
        return '\x1b[%sm' % RESET
    for k, v in six.iteritems(kwargs***REMOVED***:
        if k == 'fg':
            code_list.append(foreground[v***REMOVED******REMOVED***
        elif k == 'bg':
            code_list.append(background[v***REMOVED******REMOVED***
    for o in opts:
        if o in opt_dict:
            code_list.append(opt_dict[o***REMOVED******REMOVED***
    if 'noreset' not in opts:
        text = '%s\x1b[%sm' % (text or '', RESET***REMOVED***
    return '%s%s' % (('\x1b[%sm' % ';'.join(code_list***REMOVED******REMOVED***, text or ''***REMOVED***


def make_style(opts=(***REMOVED***, **kwargs***REMOVED***:
    ***REMOVED***
    Returns a function with default parameters for colorize(***REMOVED***

    Example:
        bold_red = make_style(opts=('bold',***REMOVED***, fg='red'***REMOVED***
        print(bold_red('hello'***REMOVED******REMOVED***
        KEYWORD = make_style(fg='yellow'***REMOVED***
        COMMENT = make_style(fg='blue', opts=('bold',***REMOVED******REMOVED***
    ***REMOVED***
    return lambda text: colorize(text, opts, **kwargs***REMOVED***

NOCOLOR_PALETTE = 'nocolor'
DARK_PALETTE = 'dark'
LIGHT_PALETTE = 'light'

PALETTES = {
    NOCOLOR_PALETTE: {
        'ERROR': {***REMOVED***,
        'SUCCESS': {***REMOVED***,
        'WARNING': {***REMOVED***,
        'NOTICE': {***REMOVED***,
        'SQL_FIELD': {***REMOVED***,
        'SQL_COLTYPE': {***REMOVED***,
        'SQL_KEYWORD': {***REMOVED***,
        'SQL_TABLE': {***REMOVED***,
        'HTTP_INFO': {***REMOVED***,
        'HTTP_SUCCESS': {***REMOVED***,
        'HTTP_REDIRECT': {***REMOVED***,
        'HTTP_NOT_MODIFIED': {***REMOVED***,
        'HTTP_BAD_REQUEST': {***REMOVED***,
        'HTTP_NOT_FOUND': {***REMOVED***,
        'HTTP_SERVER_ERROR': {***REMOVED***,
        'MIGRATE_HEADING': {***REMOVED***,
        'MIGRATE_LABEL': {***REMOVED***,
***REMOVED***
    DARK_PALETTE: {
        'ERROR': {'fg': 'red', 'opts': ('bold',***REMOVED******REMOVED***,
        'SUCCESS': {'fg': 'green', 'opts': ('bold',***REMOVED******REMOVED***,
        'WARNING': {'fg': 'yellow', 'opts': ('bold',***REMOVED******REMOVED***,
        'NOTICE': {'fg': 'red'***REMOVED***,
        'SQL_FIELD': {'fg': 'green', 'opts': ('bold',***REMOVED******REMOVED***,
        'SQL_COLTYPE': {'fg': 'green'***REMOVED***,
        'SQL_KEYWORD': {'fg': 'yellow'***REMOVED***,
        'SQL_TABLE': {'opts': ('bold',***REMOVED******REMOVED***,
        'HTTP_INFO': {'opts': ('bold',***REMOVED******REMOVED***,
        'HTTP_SUCCESS': {***REMOVED***,
        'HTTP_REDIRECT': {'fg': 'green'***REMOVED***,
        'HTTP_NOT_MODIFIED': {'fg': 'cyan'***REMOVED***,
        'HTTP_BAD_REQUEST': {'fg': 'red', 'opts': ('bold',***REMOVED******REMOVED***,
        'HTTP_NOT_FOUND': {'fg': 'yellow'***REMOVED***,
        'HTTP_SERVER_ERROR': {'fg': 'magenta', 'opts': ('bold',***REMOVED******REMOVED***,
        'MIGRATE_HEADING': {'fg': 'cyan', 'opts': ('bold',***REMOVED******REMOVED***,
        'MIGRATE_LABEL': {'opts': ('bold',***REMOVED******REMOVED***,
***REMOVED***
    LIGHT_PALETTE: {
        'ERROR': {'fg': 'red', 'opts': ('bold',***REMOVED******REMOVED***,
        'SUCCESS': {'fg': 'green', 'opts': ('bold',***REMOVED******REMOVED***,
        'WARNING': {'fg': 'yellow', 'opts': ('bold',***REMOVED******REMOVED***,
        'NOTICE': {'fg': 'red'***REMOVED***,
        'SQL_FIELD': {'fg': 'green', 'opts': ('bold',***REMOVED******REMOVED***,
        'SQL_COLTYPE': {'fg': 'green'***REMOVED***,
        'SQL_KEYWORD': {'fg': 'blue'***REMOVED***,
        'SQL_TABLE': {'opts': ('bold',***REMOVED******REMOVED***,
        'HTTP_INFO': {'opts': ('bold',***REMOVED******REMOVED***,
        'HTTP_SUCCESS': {***REMOVED***,
        'HTTP_REDIRECT': {'fg': 'green', 'opts': ('bold',***REMOVED******REMOVED***,
        'HTTP_NOT_MODIFIED': {'fg': 'green'***REMOVED***,
        'HTTP_BAD_REQUEST': {'fg': 'red', 'opts': ('bold',***REMOVED******REMOVED***,
        'HTTP_NOT_FOUND': {'fg': 'red'***REMOVED***,
        'HTTP_SERVER_ERROR': {'fg': 'magenta', 'opts': ('bold',***REMOVED******REMOVED***,
        'MIGRATE_HEADING': {'fg': 'cyan', 'opts': ('bold',***REMOVED******REMOVED***,
        'MIGRATE_LABEL': {'opts': ('bold',***REMOVED******REMOVED***,
***REMOVED***
***REMOVED***
DEFAULT_PALETTE = DARK_PALETTE


def parse_color_setting(config_string***REMOVED***:
    ***REMOVED***Parse a DJANGO_COLORS environment variable to produce the system palette

    The general form of a palette definition is:

        "palette;role=fg;role=fg/bg;role=fg,option,option;role=fg/bg,option,option"

    where:
        palette is a named palette; one of 'light', 'dark', or 'nocolor'.
        role is a named style used by Django
        fg is a background color.
        bg is a background color.
        option is a display options.

    Specifying a named palette is the same as manually specifying the individual
    definitions for each role. Any individual definitions following the palette
    definition will augment the base palette definition.

    Valid roles:
        'error', 'notice', 'sql_field', 'sql_coltype', 'sql_keyword', 'sql_table',
        'http_info', 'http_success', 'http_redirect', 'http_bad_request',
        'http_not_found', 'http_server_error'

    Valid colors:
        'black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white'

    Valid options:
        'bold', 'underscore', 'blink', 'reverse', 'conceal'
    ***REMOVED***
    if not config_string:
        return PALETTES[DEFAULT_PALETTE***REMOVED***

    # Split the color configuration into parts
    parts = config_string.lower(***REMOVED***.split(';'***REMOVED***
    palette = PALETTES[NOCOLOR_PALETTE***REMOVED***.copy(***REMOVED***
    for part in parts:
        if part in PALETTES:
            # A default palette has been specified
            palette.update(PALETTES[part***REMOVED******REMOVED***
        elif '=' in part:
            # Process a palette defining string
            definition = {***REMOVED***

            # Break the definition into the role,
            # plus the list of specific instructions.
            # The role must be in upper case
            role, instructions = part.split('='***REMOVED***
            role = role.upper(***REMOVED***

            styles = instructions.split(','***REMOVED***
            styles.reverse(***REMOVED***

            # The first instruction can contain a slash
            # to break apart fg/bg.
            colors = styles.pop(***REMOVED***.split('/'***REMOVED***
            colors.reverse(***REMOVED***
            fg = colors.pop(***REMOVED***
            if fg in color_names:
                definition['fg'***REMOVED*** = fg
            if colors and colors[-1***REMOVED*** in color_names:
                definition['bg'***REMOVED*** = colors[-1***REMOVED***

            # All remaining instructions are options
            opts = tuple(s for s in styles if s in opt_dict.keys(***REMOVED******REMOVED***
            if opts:
                definition['opts'***REMOVED*** = opts

            # The nocolor palette has all available roles.
            # Use that palette as the basis for determining
            # if the role is valid.
            if role in PALETTES[NOCOLOR_PALETTE***REMOVED*** and definition:
                palette[role***REMOVED*** = definition

    # If there are no colors specified, return the empty palette.
    if palette == PALETTES[NOCOLOR_PALETTE***REMOVED***:
        return None
    return palette
