# These are versions of the functions in django.utils.translation.trans_real
# that don't actually do anything. This is purely for performance, so that
# settings.USE_I18N = False can use this module rather than trans_real.py.

from django.conf import settings
from django.utils.encoding import force_text


def ngettext(singular, plural, number***REMOVED***:
    if number == 1:
        return singular
    return plural
ngettext_lazy = ngettext


def ungettext(singular, plural, number***REMOVED***:
    return force_text(ngettext(singular, plural, number***REMOVED******REMOVED***


def pgettext(context, message***REMOVED***:
    return ugettext(message***REMOVED***


def npgettext(context, singular, plural, number***REMOVED***:
    return ungettext(singular, plural, number***REMOVED***


def activate(x***REMOVED***:
    return None


def deactivate(***REMOVED***:
    return None


deactivate_all = deactivate


def get_language(***REMOVED***:
    return settings.LANGUAGE_CODE


def get_language_bidi(***REMOVED***:
    return settings.LANGUAGE_CODE in settings.LANGUAGES_BIDI


def check_for_language(x***REMOVED***:
    return True


def gettext(message***REMOVED***:
    return message


def ugettext(message***REMOVED***:
    return force_text(gettext(message***REMOVED******REMOVED***

gettext_noop = gettext_lazy = _ = gettext


def to_locale(language***REMOVED***:
    p = language.find('-'***REMOVED***
    if p >= 0:
        return language[:p***REMOVED***.lower(***REMOVED*** + '_' + language[p + 1:***REMOVED***.upper(***REMOVED***
    else:
        return language.lower(***REMOVED***


def get_language_from_request(request, check_path=False***REMOVED***:
    return settings.LANGUAGE_CODE


def get_language_from_path(request***REMOVED***:
    return None
