***REMOVED***
Functions for working with "safe strings": strings that can be displayed safely
without further escaping in HTML. Marking something as a "safe string" means
that the producer of the string has already turned characters that should not
be interpreted by the HTML engine (e.g. '<'***REMOVED*** into the appropriate entities.
***REMOVED***
import warnings

from django.utils import six
from django.utils.deprecation import RemovedInDjango20Warning
from django.utils.functional import Promise, curry


class EscapeData(object***REMOVED***:
    pass


class EscapeBytes(bytes, EscapeData***REMOVED***:
    ***REMOVED***
    A byte string that should be HTML-escaped when output.
    ***REMOVED***
    pass


class EscapeText(six.text_type, EscapeData***REMOVED***:
    ***REMOVED***
    A unicode string object that should be HTML-escaped when output.
    ***REMOVED***
    pass

if six.PY3:
    EscapeString = EscapeText
else:
    EscapeString = EscapeBytes
    # backwards compatibility for Python 2
    EscapeUnicode = EscapeText


class SafeData(object***REMOVED***:
    def __html__(self***REMOVED***:
        ***REMOVED***
        Returns the html representation of a string for interoperability.

        This allows other template engines to understand Django's SafeData.
        ***REMOVED***
        return self


class SafeBytes(bytes, SafeData***REMOVED***:
    ***REMOVED***
    A bytes subclass that has been specifically marked as "safe" (requires no
    further escaping***REMOVED*** for HTML output purposes.
    ***REMOVED***
    def __add__(self, rhs***REMOVED***:
        ***REMOVED***
        Concatenating a safe byte string with another safe byte string or safe
        unicode string is safe. Otherwise, the result is no longer safe.
        ***REMOVED***
        t = super(SafeBytes, self***REMOVED***.__add__(rhs***REMOVED***
        if isinstance(rhs, SafeText***REMOVED***:
            return SafeText(t***REMOVED***
        elif isinstance(rhs, SafeBytes***REMOVED***:
            return SafeBytes(t***REMOVED***
        return t

    def _proxy_method(self, *args, **kwargs***REMOVED***:
        ***REMOVED***
        Wrap a call to a normal unicode method up so that we return safe
        results. The method that is being wrapped is passed in the 'method'
        argument.
        ***REMOVED***
        method = kwargs.pop('method'***REMOVED***
        data = method(self, *args, **kwargs***REMOVED***
        if isinstance(data, bytes***REMOVED***:
            return SafeBytes(data***REMOVED***
        else:
            return SafeText(data***REMOVED***

    decode = curry(_proxy_method, method=bytes.decode***REMOVED***


class SafeText(six.text_type, SafeData***REMOVED***:
    ***REMOVED***
    A unicode (Python 2***REMOVED*** / str (Python 3***REMOVED*** subclass that has been specifically
    marked as "safe" for HTML output purposes.
    ***REMOVED***
    def __add__(self, rhs***REMOVED***:
        ***REMOVED***
        Concatenating a safe unicode string with another safe byte string or
        safe unicode string is safe. Otherwise, the result is no longer safe.
        ***REMOVED***
        t = super(SafeText, self***REMOVED***.__add__(rhs***REMOVED***
        if isinstance(rhs, SafeData***REMOVED***:
            return SafeText(t***REMOVED***
        return t

    def _proxy_method(self, *args, **kwargs***REMOVED***:
        ***REMOVED***
        Wrap a call to a normal unicode method up so that we return safe
        results. The method that is being wrapped is passed in the 'method'
        argument.
        ***REMOVED***
        method = kwargs.pop('method'***REMOVED***
        data = method(self, *args, **kwargs***REMOVED***
        if isinstance(data, bytes***REMOVED***:
            return SafeBytes(data***REMOVED***
        else:
            return SafeText(data***REMOVED***

    encode = curry(_proxy_method, method=six.text_type.encode***REMOVED***

if six.PY3:
    SafeString = SafeText
else:
    SafeString = SafeBytes
    # backwards compatibility for Python 2
    SafeUnicode = SafeText


def mark_safe(s***REMOVED***:
    ***REMOVED***
    Explicitly mark a string as safe for (HTML***REMOVED*** output purposes. The returned
    object can be used everywhere a string or unicode object is appropriate.

    Can be called multiple times on a single string.
    ***REMOVED***
    if hasattr(s, '__html__'***REMOVED***:
        return s
    if isinstance(s, bytes***REMOVED*** or (isinstance(s, Promise***REMOVED*** and s._delegate_bytes***REMOVED***:
        return SafeBytes(s***REMOVED***
    if isinstance(s, (six.text_type, Promise***REMOVED******REMOVED***:
        return SafeText(s***REMOVED***
    return SafeString(str(s***REMOVED******REMOVED***


def mark_for_escaping(s***REMOVED***:
    ***REMOVED***
    Explicitly mark a string as requiring HTML escaping upon output. Has no
    effect on SafeData subclasses.

    Can be called multiple times on a single string (the resulting escaping is
    only applied once***REMOVED***.
    ***REMOVED***
    warnings.warn('mark_for_escaping(***REMOVED*** is deprecated.', RemovedInDjango20Warning***REMOVED***
    if hasattr(s, '__html__'***REMOVED*** or isinstance(s, EscapeData***REMOVED***:
        return s
    if isinstance(s, bytes***REMOVED*** or (isinstance(s, Promise***REMOVED*** and s._delegate_bytes***REMOVED***:
        return EscapeBytes(s***REMOVED***
    if isinstance(s, (six.text_type, Promise***REMOVED******REMOVED***:
        return EscapeText(s***REMOVED***
    return EscapeString(str(s***REMOVED******REMOVED***
