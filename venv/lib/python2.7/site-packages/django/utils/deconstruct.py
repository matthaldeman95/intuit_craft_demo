from importlib import import_module

from django.utils.version import get_docs_version


def deconstructible(*args, **kwargs***REMOVED***:
    ***REMOVED***
    Class decorator that allow the decorated class to be serialized
    by the migrations subsystem.

    Accepts an optional kwarg `path` to specify the import path.
    ***REMOVED***
    path = kwargs.pop('path', None***REMOVED***

    def decorator(klass***REMOVED***:
        def __new__(cls, *args, **kwargs***REMOVED***:
            # We capture the arguments to make returning them trivial
            obj = super(klass, cls***REMOVED***.__new__(cls***REMOVED***
            obj._constructor_args = (args, kwargs***REMOVED***
            return obj

        def deconstruct(obj***REMOVED***:
            ***REMOVED***
            Returns a 3-tuple of class import path, positional arguments,
            and keyword arguments.
            ***REMOVED***
            # Python 2/fallback version
            if path:
                module_name, _, name = path.rpartition('.'***REMOVED***
            else:
                module_name = obj.__module__
                name = obj.__class__.__name__
            # Make sure it's actually there and not an inner class
            module = import_module(module_name***REMOVED***
            if not hasattr(module, name***REMOVED***:
                raise ValueError(
                    "Could not find object %s in %s.\n"
                    "Please note that you cannot serialize things like inner "
                    "classes. Please move the object into the main module "
                    "body to use migrations.\n"
                    "For more information, see "
                    "https://docs.djangoproject.com/en/%s/topics/migrations/#serializing-values"
                    % (name, module_name, get_docs_version(***REMOVED******REMOVED******REMOVED***
            return (
                path or '%s.%s' % (obj.__class__.__module__, name***REMOVED***,
                obj._constructor_args[0***REMOVED***,
                obj._constructor_args[1***REMOVED***,
            ***REMOVED***

        klass.__new__ = staticmethod(__new__***REMOVED***
        klass.deconstruct = deconstruct

        return klass

    if not args:
        return decorator
    return decorator(*args, **kwargs***REMOVED***
