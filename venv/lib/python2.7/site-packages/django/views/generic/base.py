from __future__ import unicode_literals

import logging
from functools import update_wrapper

from django import http
from django.core.exceptions import ImproperlyConfigured
from django.template.response import TemplateResponse
from django.urls import NoReverseMatch, reverse
from django.utils import six
from django.utils.decorators import classonlymethod

logger = logging.getLogger('django.request'***REMOVED***


class ContextMixin(object***REMOVED***:
    ***REMOVED***
    A default context mixin that passes the keyword arguments received by
    get_context_data as the template context.
    ***REMOVED***

    def get_context_data(self, **kwargs***REMOVED***:
        if 'view' not in kwargs:
            kwargs['view'***REMOVED*** = self
        return kwargs


class View(object***REMOVED***:
    ***REMOVED***
    Intentionally simple parent class for all views. Only implements
    dispatch-by-method and simple sanity checking.
    ***REMOVED***

    http_method_names = ['get', 'post', 'put', 'patch', 'delete', 'head', 'options', 'trace'***REMOVED***

    def __init__(self, **kwargs***REMOVED***:
        ***REMOVED***
        Constructor. Called in the URLconf; can contain helpful extra
        keyword arguments, and other things.
        ***REMOVED***
        # Go through keyword arguments, and either save their values to our
        # instance, or raise an error.
        for key, value in six.iteritems(kwargs***REMOVED***:
            setattr(self, key, value***REMOVED***

    @classonlymethod
    def as_view(cls, **initkwargs***REMOVED***:
        ***REMOVED***
        Main entry point for a request-response process.
        ***REMOVED***
        for key in initkwargs:
            if key in cls.http_method_names:
                raise TypeError("You tried to pass in the %s method name as a "
                                "keyword argument to %s(***REMOVED***. Don't do that."
                                % (key, cls.__name__***REMOVED******REMOVED***
            if not hasattr(cls, key***REMOVED***:
                raise TypeError("%s(***REMOVED*** received an invalid keyword %r. as_view "
                                "only accepts arguments that are already "
                                "attributes of the class." % (cls.__name__, key***REMOVED******REMOVED***

        def view(request, *args, **kwargs***REMOVED***:
            self = cls(**initkwargs***REMOVED***
            if hasattr(self, 'get'***REMOVED*** and not hasattr(self, 'head'***REMOVED***:
                self.head = self.get
            self.request = request
            self.args = args
            self.kwargs = kwargs
            return self.dispatch(request, *args, **kwargs***REMOVED***
        view.view_class = cls
        view.view_initkwargs = initkwargs

        # take name and docstring from class
        update_wrapper(view, cls, updated=(***REMOVED******REMOVED***

        # and possible attributes set by decorators
        # like csrf_exempt from dispatch
        update_wrapper(view, cls.dispatch, assigned=(***REMOVED******REMOVED***
        return view

    def dispatch(self, request, *args, **kwargs***REMOVED***:
        # Try to dispatch to the right method; if a method doesn't exist,
        # defer to the error handler. Also defer to the error handler if the
        # request method isn't on the approved list.
        if request.method.lower(***REMOVED*** in self.http_method_names:
            handler = getattr(self, request.method.lower(***REMOVED***, self.http_method_not_allowed***REMOVED***
        else:
            handler = self.http_method_not_allowed
        return handler(request, *args, **kwargs***REMOVED***

    def http_method_not_allowed(self, request, *args, **kwargs***REMOVED***:
        logger.warning(
            'Method Not Allowed (%s***REMOVED***: %s', request.method, request.path,
            extra={'status_code': 405, 'request': request***REMOVED***
        ***REMOVED***
        return http.HttpResponseNotAllowed(self._allowed_methods(***REMOVED******REMOVED***

    def options(self, request, *args, **kwargs***REMOVED***:
        ***REMOVED***
        Handles responding to requests for the OPTIONS HTTP verb.
        ***REMOVED***
        response = http.HttpResponse(***REMOVED***
        response['Allow'***REMOVED*** = ', '.join(self._allowed_methods(***REMOVED******REMOVED***
        response['Content-Length'***REMOVED*** = '0'
        return response

    def _allowed_methods(self***REMOVED***:
        return [m.upper(***REMOVED*** for m in self.http_method_names if hasattr(self, m***REMOVED******REMOVED***


class TemplateResponseMixin(object***REMOVED***:
    ***REMOVED***
    A mixin that can be used to render a template.
    ***REMOVED***
    template_name = None
    template_engine = None
    response_class = TemplateResponse
    content_type = None

    def render_to_response(self, context, **response_kwargs***REMOVED***:
        ***REMOVED***
        Returns a response, using the `response_class` for this
        view, with a template rendered with the given context.

        If any keyword arguments are provided, they will be
        passed to the constructor of the response class.
        ***REMOVED***
        response_kwargs.setdefault('content_type', self.content_type***REMOVED***
        return self.response_class(
            request=self.request,
            template=self.get_template_names(***REMOVED***,
            context=context,
            using=self.template_engine,
            **response_kwargs
        ***REMOVED***

    def get_template_names(self***REMOVED***:
        ***REMOVED***
        Returns a list of template names to be used for the request. Must return
        a list. May not be called if render_to_response is overridden.
        ***REMOVED***
        if self.template_name is None:
            raise ImproperlyConfigured(
                "TemplateResponseMixin requires either a definition of "
                "'template_name' or an implementation of 'get_template_names(***REMOVED***'"***REMOVED***
        else:
            return [self.template_name***REMOVED***


class TemplateView(TemplateResponseMixin, ContextMixin, View***REMOVED***:
    ***REMOVED***
    A view that renders a template.  This view will also pass into the context
    any keyword arguments passed by the URLconf.
    ***REMOVED***
    def get(self, request, *args, **kwargs***REMOVED***:
        context = self.get_context_data(**kwargs***REMOVED***
        return self.render_to_response(context***REMOVED***


class RedirectView(View***REMOVED***:
    ***REMOVED***
    A view that provides a redirect on any GET request.
    ***REMOVED***
    permanent = False
    url = None
    pattern_name = None
    query_string = False

    def get_redirect_url(self, *args, **kwargs***REMOVED***:
        ***REMOVED***
        Return the URL redirect to. Keyword arguments from the
        URL pattern match generating the redirect request
        are provided as kwargs to this method.
        ***REMOVED***
        if self.url:
            url = self.url % kwargs
        elif self.pattern_name:
            ***REMOVED***
                url = reverse(self.pattern_name, args=args, kwargs=kwargs***REMOVED***
            except NoReverseMatch:
                return None
        else:
            return None

        args = self.request.META.get('QUERY_STRING', ''***REMOVED***
        if args and self.query_string:
            url = "%s?%s" % (url, args***REMOVED***
        return url

    def get(self, request, *args, **kwargs***REMOVED***:
        url = self.get_redirect_url(*args, **kwargs***REMOVED***
        if url:
            if self.permanent:
                return http.HttpResponsePermanentRedirect(url***REMOVED***
            else:
                return http.HttpResponseRedirect(url***REMOVED***
        else:
            logger.warning(
                'Gone: %s', request.path,
                extra={'status_code': 410, 'request': request***REMOVED***
            ***REMOVED***
            return http.HttpResponseGone(***REMOVED***

    def head(self, request, *args, **kwargs***REMOVED***:
        return self.get(request, *args, **kwargs***REMOVED***

    def post(self, request, *args, **kwargs***REMOVED***:
        return self.get(request, *args, **kwargs***REMOVED***

    def options(self, request, *args, **kwargs***REMOVED***:
        return self.get(request, *args, **kwargs***REMOVED***

    def delete(self, request, *args, **kwargs***REMOVED***:
        return self.get(request, *args, **kwargs***REMOVED***

    def put(self, request, *args, **kwargs***REMOVED***:
        return self.get(request, *args, **kwargs***REMOVED***

    def patch(self, request, *args, **kwargs***REMOVED***:
        return self.get(request, *args, **kwargs***REMOVED***
