from django.core.exceptions import ImproperlyConfigured
from django.forms import models as model_forms
from django.http import HttpResponseRedirect
from django.utils.encoding import force_text
from django.views.generic.base import ContextMixin, TemplateResponseMixin, View
from django.views.generic.detail import (
    BaseDetailView, SingleObjectMixin, SingleObjectTemplateResponseMixin,
***REMOVED***


class FormMixin(ContextMixin***REMOVED***:
    ***REMOVED***
    A mixin that provides a way to show and handle a form in a request.
    ***REMOVED***

    initial = {***REMOVED***
    form_class = None
    success_url = None
    prefix = None

    def get_initial(self***REMOVED***:
        ***REMOVED***
        Returns the initial data to use for forms on this view.
        ***REMOVED***
        return self.initial.copy(***REMOVED***

    def get_prefix(self***REMOVED***:
        ***REMOVED***
        Returns the prefix to use for forms on this view
        ***REMOVED***
        return self.prefix

    def get_form_class(self***REMOVED***:
        ***REMOVED***
        Returns the form class to use in this view
        ***REMOVED***
        return self.form_class

    def get_form(self, form_class=None***REMOVED***:
        ***REMOVED***
        Returns an instance of the form to be used in this view.
        ***REMOVED***
        if form_class is None:
            form_class = self.get_form_class(***REMOVED***
        return form_class(**self.get_form_kwargs(***REMOVED******REMOVED***

    def get_form_kwargs(self***REMOVED***:
        ***REMOVED***
        Returns the keyword arguments for instantiating the form.
        ***REMOVED***
        kwargs = {
            'initial': self.get_initial(***REMOVED***,
            'prefix': self.get_prefix(***REMOVED***,
    ***REMOVED***

        if self.request.method in ('POST', 'PUT'***REMOVED***:
            kwargs.update({
                'data': self.request.POST,
                'files': self.request.FILES,
        ***REMOVED******REMOVED***
        return kwargs

    def get_success_url(self***REMOVED***:
        ***REMOVED***
        Returns the supplied success URL.
        ***REMOVED***
        if self.success_url:
            # Forcing possible reverse_lazy evaluation
            url = force_text(self.success_url***REMOVED***
        else:
            raise ImproperlyConfigured(
                "No URL to redirect to. Provide a success_url."***REMOVED***
        return url

    def form_valid(self, form***REMOVED***:
        ***REMOVED***
        If the form is valid, redirect to the supplied URL.
        ***REMOVED***
        return HttpResponseRedirect(self.get_success_url(***REMOVED******REMOVED***

    def form_invalid(self, form***REMOVED***:
        ***REMOVED***
        If the form is invalid, re-render the context data with the
        data-filled form and errors.
        ***REMOVED***
        return self.render_to_response(self.get_context_data(form=form***REMOVED******REMOVED***

    def get_context_data(self, **kwargs***REMOVED***:
        ***REMOVED***
        Insert the form into the context dict.
        ***REMOVED***
        if 'form' not in kwargs:
            kwargs['form'***REMOVED*** = self.get_form(***REMOVED***
        return super(FormMixin, self***REMOVED***.get_context_data(**kwargs***REMOVED***


class ModelFormMixin(FormMixin, SingleObjectMixin***REMOVED***:
    ***REMOVED***
    A mixin that provides a way to show and handle a modelform in a request.
    ***REMOVED***
    fields = None

    def get_form_class(self***REMOVED***:
        ***REMOVED***
        Returns the form class to use in this view.
        ***REMOVED***
        if self.fields is not None and self.form_class:
            raise ImproperlyConfigured(
                "Specifying both 'fields' and 'form_class' is not permitted."
            ***REMOVED***
        if self.form_class:
            return self.form_class
        else:
            if self.model is not None:
                # If a model has been explicitly provided, use it
                model = self.model
            elif hasattr(self, 'object'***REMOVED*** and self.object is not None:
                # If this view is operating on a single object, use
                # the class of that object
                model = self.object.__class__
            else:
                # Try to get a queryset and extract the model class
                # from that
                model = self.get_queryset(***REMOVED***.model

            if self.fields is None:
                raise ImproperlyConfigured(
                    "Using ModelFormMixin (base class of %s***REMOVED*** without "
                    "the 'fields' attribute is prohibited." % self.__class__.__name__
                ***REMOVED***

            return model_forms.modelform_factory(model, fields=self.fields***REMOVED***

    def get_form_kwargs(self***REMOVED***:
        ***REMOVED***
        Returns the keyword arguments for instantiating the form.
        ***REMOVED***
        kwargs = super(ModelFormMixin, self***REMOVED***.get_form_kwargs(***REMOVED***
        if hasattr(self, 'object'***REMOVED***:
            kwargs.update({'instance': self.object***REMOVED******REMOVED***
        return kwargs

    def get_success_url(self***REMOVED***:
        ***REMOVED***
        Returns the supplied URL.
        ***REMOVED***
        if self.success_url:
            url = self.success_url.format(**self.object.__dict__***REMOVED***
        else:
            ***REMOVED***
                url = self.object.get_absolute_url(***REMOVED***
            except AttributeError:
                raise ImproperlyConfigured(
                    "No URL to redirect to.  Either provide a url or define"
                    " a get_absolute_url method on the Model."***REMOVED***
        return url

    def form_valid(self, form***REMOVED***:
        ***REMOVED***
        If the form is valid, save the associated model.
        ***REMOVED***
        self.object = form.save(***REMOVED***
        return super(ModelFormMixin, self***REMOVED***.form_valid(form***REMOVED***


class ProcessFormView(View***REMOVED***:
    ***REMOVED***
    A mixin that renders a form on GET and processes it on POST.
    ***REMOVED***
    def get(self, request, *args, **kwargs***REMOVED***:
        ***REMOVED***
        Handles GET requests and instantiates a blank version of the form.
        ***REMOVED***
        return self.render_to_response(self.get_context_data(***REMOVED******REMOVED***

    def post(self, request, *args, **kwargs***REMOVED***:
        ***REMOVED***
        Handles POST requests, instantiating a form instance with the passed
        POST variables and then checked for validity.
        ***REMOVED***
        form = self.get_form(***REMOVED***
        if form.is_valid(***REMOVED***:
            return self.form_valid(form***REMOVED***
        else:
            return self.form_invalid(form***REMOVED***

    # PUT is a valid HTTP verb for creating (with a known URL***REMOVED*** or editing an
    # object, note that browsers only support POST for now.
    def put(self, *args, **kwargs***REMOVED***:
        return self.post(*args, **kwargs***REMOVED***


class BaseFormView(FormMixin, ProcessFormView***REMOVED***:
    ***REMOVED***
    A base view for displaying a form
    ***REMOVED***


class FormView(TemplateResponseMixin, BaseFormView***REMOVED***:
    ***REMOVED***
    A view for displaying a form, and rendering a template response.
    ***REMOVED***


class BaseCreateView(ModelFormMixin, ProcessFormView***REMOVED***:
    ***REMOVED***
    Base view for creating an new object instance.

    Using this base class requires subclassing to provide a response mixin.
    ***REMOVED***
    def get(self, request, *args, **kwargs***REMOVED***:
        self.object = None
        return super(BaseCreateView, self***REMOVED***.get(request, *args, **kwargs***REMOVED***

    def post(self, request, *args, **kwargs***REMOVED***:
        self.object = None
        return super(BaseCreateView, self***REMOVED***.post(request, *args, **kwargs***REMOVED***


class CreateView(SingleObjectTemplateResponseMixin, BaseCreateView***REMOVED***:
    ***REMOVED***
    View for creating a new object instance,
    with a response rendered by template.
    ***REMOVED***
    template_name_suffix = '_form'


class BaseUpdateView(ModelFormMixin, ProcessFormView***REMOVED***:
    ***REMOVED***
    Base view for updating an existing object.

    Using this base class requires subclassing to provide a response mixin.
    ***REMOVED***
    def get(self, request, *args, **kwargs***REMOVED***:
        self.object = self.get_object(***REMOVED***
        return super(BaseUpdateView, self***REMOVED***.get(request, *args, **kwargs***REMOVED***

    def post(self, request, *args, **kwargs***REMOVED***:
        self.object = self.get_object(***REMOVED***
        return super(BaseUpdateView, self***REMOVED***.post(request, *args, **kwargs***REMOVED***


class UpdateView(SingleObjectTemplateResponseMixin, BaseUpdateView***REMOVED***:
    ***REMOVED***
    View for updating an object,
    with a response rendered by template.
    ***REMOVED***
    template_name_suffix = '_form'


class DeletionMixin(object***REMOVED***:
    ***REMOVED***
    A mixin providing the ability to delete objects
    ***REMOVED***
    success_url = None

    def delete(self, request, *args, **kwargs***REMOVED***:
        ***REMOVED***
        Calls the delete(***REMOVED*** method on the fetched object and then
        redirects to the success URL.
        ***REMOVED***
        self.object = self.get_object(***REMOVED***
        success_url = self.get_success_url(***REMOVED***
        self.object.delete(***REMOVED***
        return HttpResponseRedirect(success_url***REMOVED***

    # Add support for browsers which only accept GET and POST for now.
    def post(self, request, *args, **kwargs***REMOVED***:
        return self.delete(request, *args, **kwargs***REMOVED***

    def get_success_url(self***REMOVED***:
        if self.success_url:
            return self.success_url.format(**self.object.__dict__***REMOVED***
        else:
            raise ImproperlyConfigured(
                "No URL to redirect to. Provide a success_url."***REMOVED***


class BaseDeleteView(DeletionMixin, BaseDetailView***REMOVED***:
    ***REMOVED***
    Base view for deleting an object.

    Using this base class requires subclassing to provide a response mixin.
    ***REMOVED***


class DeleteView(SingleObjectTemplateResponseMixin, BaseDeleteView***REMOVED***:
    ***REMOVED***
    View for deleting an object retrieved with `self.get_object(***REMOVED***`,
    with a response rendered by template.
    ***REMOVED***
    template_name_suffix = '_confirm_delete'
