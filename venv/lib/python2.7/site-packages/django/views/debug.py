from __future__ import unicode_literals

import re
import sys
import types

from django.conf import settings
from django.http import HttpResponse, HttpResponseNotFound
from django.template import Context, Engine, TemplateDoesNotExist
from django.template.defaultfilters import force_escape, pprint
from django.urls import Resolver404, resolve
from django.utils import lru_cache, six, timezone
from django.utils.datastructures import MultiValueDict
from django.utils.encoding import force_bytes, smart_text
from django.utils.module_loading import import_string
from django.utils.translation import ugettext as _

# Minimal Django templates engine to render the error templates
# regardless of the project's TEMPLATES setting.
DEBUG_ENGINE = Engine(debug=True***REMOVED***

HIDDEN_SETTINGS = re.compile('API|TOKEN|KEY|SECRET|PASS|SIGNATURE', flags=re.IGNORECASE***REMOVED***

CLEANSED_SUBSTITUTE = '********************'


class CallableSettingWrapper(object***REMOVED***:
    ***REMOVED*** Object to wrap callable appearing in settings

    * Not to call in the debug page (#21345***REMOVED***.
    * Not to break the debug page if the callable forbidding to set attributes (#23070***REMOVED***.
    ***REMOVED***
    def __init__(self, callable_setting***REMOVED***:
        self._wrapped = callable_setting

    def __repr__(self***REMOVED***:
        return repr(self._wrapped***REMOVED***


def cleanse_setting(key, value***REMOVED***:
    ***REMOVED***Cleanse an individual setting key/value of sensitive content.

    If the value is a dictionary, recursively cleanse the keys in
    that dictionary.
    ***REMOVED***
    ***REMOVED***
        if HIDDEN_SETTINGS.search(key***REMOVED***:
            cleansed = CLEANSED_SUBSTITUTE
        else:
            if isinstance(value, dict***REMOVED***:
                cleansed = {k: cleanse_setting(k, v***REMOVED*** for k, v in value.items(***REMOVED******REMOVED***
            else:
                cleansed = value
    except TypeError:
        # If the key isn't regex-able, just return as-is.
        cleansed = value

    if callable(cleansed***REMOVED***:
        # For fixing #21345 and #23070
        cleansed = CallableSettingWrapper(cleansed***REMOVED***

    return cleansed


def get_safe_settings(***REMOVED***:
    "Returns a dictionary of the settings module, with sensitive settings blurred out."
    settings_dict = {***REMOVED***
    for k in dir(settings***REMOVED***:
        if k.isupper(***REMOVED***:
            settings_dict[k***REMOVED*** = cleanse_setting(k, getattr(settings, k***REMOVED******REMOVED***
    return settings_dict


def technical_500_response(request, exc_type, exc_value, tb, status_code=500***REMOVED***:
    ***REMOVED***
    Create a technical server error response. The last three arguments are
    the values returned from sys.exc_info(***REMOVED*** and friends.
    ***REMOVED***
    reporter = ExceptionReporter(request, exc_type, exc_value, tb***REMOVED***
    if request.is_ajax(***REMOVED***:
        text = reporter.get_traceback_text(***REMOVED***
        return HttpResponse(text, status=status_code, content_type='text/plain'***REMOVED***
    else:
        html = reporter.get_traceback_html(***REMOVED***
        return HttpResponse(html, status=status_code, content_type='text/html'***REMOVED***


@lru_cache.lru_cache(***REMOVED***
def get_default_exception_reporter_filter(***REMOVED***:
    # Instantiate the default filter for the first time and cache it.
    return import_string(settings.DEFAULT_EXCEPTION_REPORTER_FILTER***REMOVED***(***REMOVED***


def get_exception_reporter_filter(request***REMOVED***:
    default_filter = get_default_exception_reporter_filter(***REMOVED***
    return getattr(request, 'exception_reporter_filter', default_filter***REMOVED***


class ExceptionReporterFilter(object***REMOVED***:
    ***REMOVED***
    Base for all exception reporter filter classes. All overridable hooks
    contain lenient default behaviors.
    ***REMOVED***

    def get_post_parameters(self, request***REMOVED***:
        if request is None:
            return {***REMOVED***
        else:
            return request.POST

    def get_traceback_frame_variables(self, request, tb_frame***REMOVED***:
        return list(tb_frame.f_locals.items(***REMOVED******REMOVED***


class SafeExceptionReporterFilter(ExceptionReporterFilter***REMOVED***:
    ***REMOVED***
    Use annotations made by the sensitive_post_parameters and
    sensitive_variables decorators to filter out sensitive information.
    ***REMOVED***

    def is_active(self, request***REMOVED***:
        ***REMOVED***
        This filter is to add safety in production environments (i.e. DEBUG
        is False***REMOVED***. If DEBUG is True then your site is not safe anyway.
        This hook is provided as a convenience to easily activate or
        deactivate the filter on a per request basis.
        ***REMOVED***
        return settings.DEBUG is False

    def get_cleansed_multivaluedict(self, request, multivaluedict***REMOVED***:
        ***REMOVED***
        Replaces the keys in a MultiValueDict marked as sensitive with stars.
        This mitigates leaking sensitive POST parameters if something like
        request.POST['nonexistent_key'***REMOVED*** throws an exception (#21098***REMOVED***.
        ***REMOVED***
        sensitive_post_parameters = getattr(request, 'sensitive_post_parameters', [***REMOVED******REMOVED***
        if self.is_active(request***REMOVED*** and sensitive_post_parameters:
            multivaluedict = multivaluedict.copy(***REMOVED***
            for param in sensitive_post_parameters:
                if param in multivaluedict:
                    multivaluedict[param***REMOVED*** = CLEANSED_SUBSTITUTE
        return multivaluedict

    def get_post_parameters(self, request***REMOVED***:
        ***REMOVED***
        Replaces the values of POST parameters marked as sensitive with
        stars (************REMOVED***.
        ***REMOVED***
        if request is None:
            return {***REMOVED***
        else:
            sensitive_post_parameters = getattr(request, 'sensitive_post_parameters', [***REMOVED******REMOVED***
            if self.is_active(request***REMOVED*** and sensitive_post_parameters:
                cleansed = request.POST.copy(***REMOVED***
                if sensitive_post_parameters == '__ALL__':
                    # Cleanse all parameters.
                    for k, v in cleansed.items(***REMOVED***:
                        cleansed[k***REMOVED*** = CLEANSED_SUBSTITUTE
                    return cleansed
                else:
                    # Cleanse only the specified parameters.
                    for param in sensitive_post_parameters:
                        if param in cleansed:
                            cleansed[param***REMOVED*** = CLEANSED_SUBSTITUTE
                    return cleansed
            else:
                return request.POST

    def cleanse_special_types(self, request, value***REMOVED***:
        ***REMOVED***
            # If value is lazy or a complex object of another kind, this check
            # might raise an exception. isinstance checks that lazy
            # MultiValueDicts will have a return value.
            is_multivalue_dict = isinstance(value, MultiValueDict***REMOVED***
        except Exception as e:
            return '{!r***REMOVED*** while evaluating {!r***REMOVED***'.format(e, value***REMOVED***

        if is_multivalue_dict:
            # Cleanse MultiValueDicts (request.POST is the one we usually care about***REMOVED***
            value = self.get_cleansed_multivaluedict(request, value***REMOVED***
        return value

    def get_traceback_frame_variables(self, request, tb_frame***REMOVED***:
        ***REMOVED***
        Replaces the values of variables marked as sensitive with
        stars (************REMOVED***.
        ***REMOVED***
        # Loop through the frame's callers to see if the sensitive_variables
        # decorator was used.
        current_frame = tb_frame.f_back
        sensitive_variables = None
        while current_frame is not None:
            if (current_frame.f_code.co_name == 'sensitive_variables_wrapper' and
                    'sensitive_variables_wrapper' in current_frame.f_locals***REMOVED***:
                # The sensitive_variables decorator was used, so we take note
                # of the sensitive variables' names.
                wrapper = current_frame.f_locals['sensitive_variables_wrapper'***REMOVED***
                sensitive_variables = getattr(wrapper, 'sensitive_variables', None***REMOVED***
                break
            current_frame = current_frame.f_back

        cleansed = {***REMOVED***
        if self.is_active(request***REMOVED*** and sensitive_variables:
            if sensitive_variables == '__ALL__':
                # Cleanse all variables
                for name, value in tb_frame.f_locals.items(***REMOVED***:
                    cleansed[name***REMOVED*** = CLEANSED_SUBSTITUTE
            else:
                # Cleanse specified variables
                for name, value in tb_frame.f_locals.items(***REMOVED***:
                    if name in sensitive_variables:
                        value = CLEANSED_SUBSTITUTE
                    else:
                        value = self.cleanse_special_types(request, value***REMOVED***
                    cleansed[name***REMOVED*** = value
        else:
            # Potentially cleanse the request and any MultiValueDicts if they
            # are one of the frame variables.
            for name, value in tb_frame.f_locals.items(***REMOVED***:
                cleansed[name***REMOVED*** = self.cleanse_special_types(request, value***REMOVED***

        if (tb_frame.f_code.co_name == 'sensitive_variables_wrapper' and
                'sensitive_variables_wrapper' in tb_frame.f_locals***REMOVED***:
            # For good measure, obfuscate the decorated function's arguments in
            # the sensitive_variables decorator's frame, in case the variables
            # associated with those arguments were meant to be obfuscated from
            # the decorated function's frame.
            cleansed['func_args'***REMOVED*** = CLEANSED_SUBSTITUTE
            cleansed['func_kwargs'***REMOVED*** = CLEANSED_SUBSTITUTE

        return cleansed.items(***REMOVED***


class ExceptionReporter(object***REMOVED***:
    ***REMOVED***
    A class to organize and coordinate reporting on exceptions.
    ***REMOVED***
    def __init__(self, request, exc_type, exc_value, tb, is_email=False***REMOVED***:
        self.request = request
        self.filter = get_exception_reporter_filter(self.request***REMOVED***
        self.exc_type = exc_type
        self.exc_value = exc_value
        self.tb = tb
        self.is_email = is_email

        self.template_info = getattr(self.exc_value, 'template_debug', None***REMOVED***
        self.template_does_not_exist = False
        self.postmortem = None

        # Handle deprecated string exceptions
        if isinstance(self.exc_type, six.string_types***REMOVED***:
            self.exc_value = Exception('Deprecated String Exception: %r' % self.exc_type***REMOVED***
            self.exc_type = type(self.exc_value***REMOVED***

    def get_traceback_data(self***REMOVED***:
        ***REMOVED***Return a dictionary containing traceback information.***REMOVED***
        if self.exc_type and issubclass(self.exc_type, TemplateDoesNotExist***REMOVED***:
            self.template_does_not_exist = True
            self.postmortem = self.exc_value.chain or [self.exc_value***REMOVED***

        frames = self.get_traceback_frames(***REMOVED***
        for i, frame in enumerate(frames***REMOVED***:
            if 'vars' in frame:
                frame_vars = [***REMOVED***
                for k, v in frame['vars'***REMOVED***:
                    v = pprint(v***REMOVED***
                    # The force_escape filter assume unicode, make sure that works
                    if isinstance(v, six.binary_type***REMOVED***:
                        v = v.decode('utf-8', 'replace'***REMOVED***  # don't choke on non-utf-8 input
                    # Trim large blobs of data
                    if len(v***REMOVED*** > 4096:
                        v = '%s... <trimmed %d bytes string>' % (v[0:4096***REMOVED***, len(v***REMOVED******REMOVED***
                    frame_vars.append((k, force_escape(v***REMOVED******REMOVED******REMOVED***
                frame['vars'***REMOVED*** = frame_vars
            frames[i***REMOVED*** = frame

        unicode_hint = ''
        if self.exc_type and issubclass(self.exc_type, UnicodeError***REMOVED***:
            start = getattr(self.exc_value, 'start', None***REMOVED***
            end = getattr(self.exc_value, 'end', None***REMOVED***
            if start is not None and end is not None:
                unicode_str = self.exc_value.args[1***REMOVED***
                unicode_hint = smart_text(
                    unicode_str[max(start - 5, 0***REMOVED***:min(end + 5, len(unicode_str***REMOVED******REMOVED******REMOVED***,
                    'ascii', errors='replace'
                ***REMOVED***
        from django import get_version
        c = {
            'is_email': self.is_email,
            'unicode_hint': unicode_hint,
            'frames': frames,
            'request': self.request,
            'filtered_POST': self.filter.get_post_parameters(self.request***REMOVED***,
            'settings': get_safe_settings(***REMOVED***,
            'sys_executable': sys.executable,
            'sys_version_info': '%d.%d.%d' % sys.version_info[0:3***REMOVED***,
            'server_time': timezone.now(***REMOVED***,
            'django_version_info': get_version(***REMOVED***,
            'sys_path': sys.path,
            'template_info': self.template_info,
            'template_does_not_exist': self.template_does_not_exist,
            'postmortem': self.postmortem,
    ***REMOVED***
        # Check whether exception info is available
        if self.exc_type:
            c['exception_type'***REMOVED*** = self.exc_type.__name__
        if self.exc_value:
            c['exception_value'***REMOVED*** = smart_text(self.exc_value, errors='replace'***REMOVED***
        if frames:
            c['lastframe'***REMOVED*** = frames[-1***REMOVED***
        return c

    def get_traceback_html(self***REMOVED***:
        "Return HTML version of debug 500 HTTP error page."
        t = DEBUG_ENGINE.from_string(TECHNICAL_500_TEMPLATE***REMOVED***
        c = Context(self.get_traceback_data(***REMOVED***, use_l10n=False***REMOVED***
        return t.render(c***REMOVED***

    def get_traceback_text(self***REMOVED***:
        "Return plain text version of debug 500 HTTP error page."
        t = DEBUG_ENGINE.from_string(TECHNICAL_500_TEXT_TEMPLATE***REMOVED***
        c = Context(self.get_traceback_data(***REMOVED***, autoescape=False, use_l10n=False***REMOVED***
        return t.render(c***REMOVED***

    def _get_lines_from_file(self, filename, lineno, context_lines, loader=None, module_name=None***REMOVED***:
        ***REMOVED***
        Returns context_lines before and after lineno from file.
        Returns (pre_context_lineno, pre_context, context_line, post_context***REMOVED***.
        ***REMOVED***
        source = None
        if loader is not None and hasattr(loader, "get_source"***REMOVED***:
            ***REMOVED***
                source = loader.get_source(module_name***REMOVED***
            except ImportError:
                pass
            if source is not None:
                source = source.splitlines(***REMOVED***
        if source is None:
            ***REMOVED***
                with open(filename, 'rb'***REMOVED*** as fp:
                    source = fp.read(***REMOVED***.splitlines(***REMOVED***
            except (OSError, IOError***REMOVED***:
                pass
        if source is None:
            return None, [***REMOVED***, None, [***REMOVED***

        # If we just read the source from a file, or if the loader did not
        # apply tokenize.detect_encoding to decode the source into a Unicode
        # string, then we should do that ourselves.
        if isinstance(source[0***REMOVED***, six.binary_type***REMOVED***:
            encoding = 'ascii'
            for line in source[:2***REMOVED***:
                # File coding may be specified. Match pattern from PEP-263
                # (http://www.python.org/dev/peps/pep-0263/***REMOVED***
                match = re.search(br'coding[:=***REMOVED***\s*([-\w.***REMOVED***+***REMOVED***', line***REMOVED***
                if match:
                    encoding = match.group(1***REMOVED***.decode('ascii'***REMOVED***
                    break
            source = [six.text_type(sline, encoding, 'replace'***REMOVED*** for sline in source***REMOVED***

        lower_bound = max(0, lineno - context_lines***REMOVED***
        upper_bound = lineno + context_lines

        pre_context = source[lower_bound:lineno***REMOVED***
        context_line = source[lineno***REMOVED***
        post_context = source[lineno + 1:upper_bound***REMOVED***

        return lower_bound, pre_context, context_line, post_context

    def get_traceback_frames(self***REMOVED***:
        def explicit_or_implicit_cause(exc_value***REMOVED***:
            explicit = getattr(exc_value, '__cause__', None***REMOVED***
            implicit = getattr(exc_value, '__context__', None***REMOVED***
            return explicit or implicit

        # Get the exception and all its causes
        exceptions = [***REMOVED***
        exc_value = self.exc_value
        while exc_value:
            exceptions.append(exc_value***REMOVED***
            exc_value = explicit_or_implicit_cause(exc_value***REMOVED***

        frames = [***REMOVED***
        # No exceptions were supplied to ExceptionReporter
        if not exceptions:
            return frames

        # In case there's just one exception (always in Python 2,
        # sometimes in Python 3***REMOVED***, take the traceback from self.tb (Python 2
        # doesn't have a __traceback__ attribute on Exception***REMOVED***
        exc_value = exceptions.pop(***REMOVED***
        tb = self.tb if six.PY2 or not exceptions else exc_value.__traceback__

        while tb is not None:
            # Support for __traceback_hide__ which is used by a few libraries
            # to hide internal frames.
            if tb.tb_frame.f_locals.get('__traceback_hide__'***REMOVED***:
                tb = tb.tb_next
                continue
            filename = tb.tb_frame.f_code.co_filename
            function = tb.tb_frame.f_code.co_name
            lineno = tb.tb_lineno - 1
            loader = tb.tb_frame.f_globals.get('__loader__'***REMOVED***
            module_name = tb.tb_frame.f_globals.get('__name__'***REMOVED*** or ''
            pre_context_lineno, pre_context, context_line, post_context = self._get_lines_from_file(
                filename, lineno, 7, loader, module_name,
            ***REMOVED***
            if pre_context_lineno is not None:
                frames.append({
                    'exc_cause': explicit_or_implicit_cause(exc_value***REMOVED***,
                    'exc_cause_explicit': getattr(exc_value, '__cause__', True***REMOVED***,
                    'tb': tb,
                    'type': 'django' if module_name.startswith('django.'***REMOVED*** else 'user',
                    'filename': filename,
                    'function': function,
                    'lineno': lineno + 1,
                    'vars': self.filter.get_traceback_frame_variables(self.request, tb.tb_frame***REMOVED***,
                    'id': id(tb***REMOVED***,
                    'pre_context': pre_context,
                    'context_line': context_line,
                    'post_context': post_context,
                    'pre_context_lineno': pre_context_lineno + 1,
            ***REMOVED******REMOVED***

            # If the traceback for current exception is consumed, try the
            # other exception.
            if six.PY2:
                tb = tb.tb_next
            elif not tb.tb_next and exceptions:
                exc_value = exceptions.pop(***REMOVED***
                tb = exc_value.__traceback__
            else:
                tb = tb.tb_next

        return frames

    def format_exception(self***REMOVED***:
        ***REMOVED***
        Return the same data as from traceback.format_exception.
        ***REMOVED***
        import traceback
        frames = self.get_traceback_frames(***REMOVED***
        tb = [(f['filename'***REMOVED***, f['lineno'***REMOVED***, f['function'***REMOVED***, f['context_line'***REMOVED******REMOVED*** for f in frames***REMOVED***
        list = ['Traceback (most recent call last***REMOVED***:\n'***REMOVED***
        list += traceback.format_list(tb***REMOVED***
        list += traceback.format_exception_only(self.exc_type, self.exc_value***REMOVED***
        return list


def technical_404_response(request, exception***REMOVED***:
    "Create a technical 404 error response. The exception should be the Http404."
    ***REMOVED***
        error_url = exception.args[0***REMOVED***['path'***REMOVED***
    except (IndexError, TypeError, KeyError***REMOVED***:
        error_url = request.path_info[1:***REMOVED***  # Trim leading slash

    ***REMOVED***
        tried = exception.args[0***REMOVED***['tried'***REMOVED***
    except (IndexError, TypeError, KeyError***REMOVED***:
        tried = [***REMOVED***
    else:
        if (not tried or (                  # empty URLconf
            request.path == '/' and
            len(tried***REMOVED*** == 1 and             # default URLconf
            len(tried[0***REMOVED******REMOVED*** == 1 and
            getattr(tried[0***REMOVED***[0***REMOVED***, 'app_name', ''***REMOVED*** == getattr(tried[0***REMOVED***[0***REMOVED***, 'namespace', ''***REMOVED*** == 'admin'
        ***REMOVED******REMOVED***:
            return default_urlconf(request***REMOVED***

    urlconf = getattr(request, 'urlconf', settings.ROOT_URLCONF***REMOVED***
    if isinstance(urlconf, types.ModuleType***REMOVED***:
        urlconf = urlconf.__name__

    caller = ''
    ***REMOVED***
        resolver_match = resolve(request.path***REMOVED***
    except Resolver404:
        pass
    else:
        obj = resolver_match.func

        if hasattr(obj, '__name__'***REMOVED***:
            caller = obj.__name__
        elif hasattr(obj, '__class__'***REMOVED*** and hasattr(obj.__class__, '__name__'***REMOVED***:
            caller = obj.__class__.__name__

        if hasattr(obj, '__module__'***REMOVED***:
            module = obj.__module__
            caller = '%s.%s' % (module, caller***REMOVED***

    t = DEBUG_ENGINE.from_string(TECHNICAL_404_TEMPLATE***REMOVED***
    c = Context({
        'urlconf': urlconf,
        'root_urlconf': settings.ROOT_URLCONF,
        'request_path': error_url,
        'urlpatterns': tried,
        'reason': force_bytes(exception, errors='replace'***REMOVED***,
        'request': request,
        'settings': get_safe_settings(***REMOVED***,
        'raising_view_name': caller,
***REMOVED******REMOVED***
    return HttpResponseNotFound(t.render(c***REMOVED***, content_type='text/html'***REMOVED***


def default_urlconf(request***REMOVED***:
    "Create an empty URLconf 404 error response."
    t = DEBUG_ENGINE.from_string(DEFAULT_URLCONF_TEMPLATE***REMOVED***
    c = Context({
        "title": _("Welcome to Django"***REMOVED***,
        "heading": _("It worked!"***REMOVED***,
        "subheading": _("Congratulations on your first Django-powered page."***REMOVED***,
        "instructions": _(
            "Of course, you haven't actually done any work yet. "
            "Next, start your first app by running <code>python manage.py startapp [app_label***REMOVED***</code>."
        ***REMOVED***,
        "explanation": _(
            "You're seeing this message because you have <code>***REMOVED***</code> in your "
            "Django settings file and you haven't configured any URLs. Get to work!"
        ***REMOVED***,
***REMOVED******REMOVED***

    return HttpResponse(t.render(c***REMOVED***, content_type='text/html'***REMOVED***

#
# Templates are embedded in the file so that we know the error handler will
# always work even if the template loader is broken.
#

TECHNICAL_500_TEMPLATE = (***REMOVED***
<!DOCTYPE html>
<html lang="en">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <meta name="robots" content="NONE,NOARCHIVE">
  <title>{% if exception_type %***REMOVED***{{ exception_type ***REMOVED******REMOVED***{% else %***REMOVED***Report{% endif %***REMOVED******REMOVED***
***REMOVED***{% if request %***REMOVED*** at {{ request.path_info|escape ***REMOVED******REMOVED***{% endif %***REMOVED***</title>
  <style type="text/css">
    html * { padding:0; margin:0; ***REMOVED***
    body * { padding:10px 20px; ***REMOVED***
    body * * { padding:0; ***REMOVED***
    body { font:small sans-serif; ***REMOVED***
    body>div { border-bottom:1px solid #ddd; ***REMOVED***
    h1 { font-weight:normal; ***REMOVED***
    h2 { margin-bottom:.8em; ***REMOVED***
    h2 span { font-size:80%; color:#666; font-weight:normal; ***REMOVED***
    h3 { margin:1em 0 .5em 0; ***REMOVED***
    h4 { margin:0 0 .5em 0; font-weight: normal; ***REMOVED***
    code, pre { font-size: 100%; white-space: pre-wrap; ***REMOVED***
    table { border:1px solid #ccc; border-collapse: collapse; width:100%; background:white; ***REMOVED***
    tbody td, tbody th { vertical-align:top; padding:2px 3px; ***REMOVED***
    thead th {
      padding:1px 6px 1px 3px; background:#fefefe; text-align:left;
      font-weight:normal; font-size:11px; border:1px solid #ddd;
***REMOVED***
    tbody th { width:12em; text-align:right; color:#666; padding-right:.5em; ***REMOVED***
    table.vars { margin:5px 0 2px 40px; ***REMOVED***
    table.vars td, table.req td { font-family:monospace; ***REMOVED***
    table td.code { width:100%; ***REMOVED***
    table td.code pre { overflow:hidden; ***REMOVED***
    table.source th { color:#666; ***REMOVED***
    table.source td { font-family:monospace; white-space:pre; border-bottom:1px solid #eee; ***REMOVED***
    ul.traceback { list-style-type:none; color: #222; ***REMOVED***
    ul.traceback li.frame { padding-bottom:1em; color:#666; ***REMOVED***
    ul.traceback li.user { background-color:#e0e0e0; color:#000 ***REMOVED***
    div.context { padding:10px 0; overflow:hidden; ***REMOVED***
    div.context ol { padding-left:30px; margin:0 10px; list-style-position: inside; ***REMOVED***
    div.context ol li { font-family:monospace; white-space:pre; color:#777; cursor:pointer; padding-left: 2px; ***REMOVED***
    div.context ol li pre { display:inline; ***REMOVED***
    div.context ol.context-line li { color:#505050; background-color:#dfdfdf; padding: 3px 2px; ***REMOVED***
    div.context ol.context-line li span { position:absolute; right:32px; ***REMOVED***
    .user div.context ol.context-line li { background-color:#bbb; color:#000; ***REMOVED***
    .user div.context ol li { color:#666; ***REMOVED***
    div.commands { margin-left: 40px; ***REMOVED***
    div.commands a { color:#555; text-decoration:none; ***REMOVED***
    .user div.commands a { color: black; ***REMOVED***
    #summary { background: #ffc; ***REMOVED***
    #summary h2 { font-weight: normal; color: #666; ***REMOVED***
    #explanation { background:#eee; ***REMOVED***
    #template, #template-not-exist { background:#f6f6f6; ***REMOVED***
    #template-not-exist ul { margin: 0 0 10px 20px; ***REMOVED***
    #template-not-exist .postmortem-section { margin-bottom: 3px; ***REMOVED***
    #unicode-hint { background:#eee; ***REMOVED***
    #traceback { background:#eee; ***REMOVED***
    #requestinfo { background:#f6f6f6; padding-left:120px; ***REMOVED***
    #summary table { border:none; background:transparent; ***REMOVED***
    #requestinfo h2, #requestinfo h3 { position:relative; margin-left:-100px; ***REMOVED***
    #requestinfo h3 { margin-bottom:-1em; ***REMOVED***
    .error { background: #ffc; ***REMOVED***
    .specific { color:#cc3300; font-weight:bold; ***REMOVED***
    h2 span.commands { font-size:.7em;***REMOVED***
    span.commands a:link {color:#5E5694;***REMOVED***
    pre.exception_value { font-family: sans-serif; color: #666; font-size: 1.5em; margin: 10px 0 10px 0; ***REMOVED***
    .append-bottom { margin-bottom: 10px; ***REMOVED***
  </style>
  {% if not is_email %***REMOVED***
  <script type="text/javascript">
  //<!--
    function getElementsByClassName(oElm, strTagName, strClassName***REMOVED***{
        // Written by Jonathan Snook, http://www.snook.ca/jon; Add-ons by Robert Nyman, http://www.robertnyman.com
        var arrElements = (strTagName == "*" && document.all***REMOVED***? document.all :
        oElm.getElementsByTagName(strTagName***REMOVED***;
        var arrReturnElements = new Array(***REMOVED***;
        strClassName = strClassName.replace(/\-/g, "\\-"***REMOVED***;
        var oRegExp = new RegExp("(^|\\s***REMOVED***" + strClassName + "(\\s|$***REMOVED***"***REMOVED***;
        var oElement;
        for(var i=0; i<arrElements.length; i++***REMOVED***{
            oElement = arrElements[i***REMOVED***;
            if(oRegExp.test(oElement.className***REMOVED******REMOVED***{
                arrReturnElements.push(oElement***REMOVED***;
        ***REMOVED***
    ***REMOVED***
        return (arrReturnElements***REMOVED***
***REMOVED***
    function hideAll(elems***REMOVED*** {
      for (var e = 0; e < elems.length; e++***REMOVED*** {
        elems[e***REMOVED***.style.display = 'none';
  ***REMOVED***
***REMOVED***
    window.onload = function(***REMOVED*** {
      hideAll(getElementsByClassName(document, 'table', 'vars'***REMOVED******REMOVED***;
      hideAll(getElementsByClassName(document, 'ol', 'pre-context'***REMOVED******REMOVED***;
      hideAll(getElementsByClassName(document, 'ol', 'post-context'***REMOVED******REMOVED***;
      hideAll(getElementsByClassName(document, 'div', 'pastebin'***REMOVED******REMOVED***;
***REMOVED***
    function toggle(***REMOVED*** {
      for (var i = 0; i < arguments.length; i++***REMOVED*** {
        var e = document.getElementById(arguments[i***REMOVED******REMOVED***;
        if (e***REMOVED*** {
          e.style.display = e.style.display == 'none' ? 'block': 'none';
    ***REMOVED***
  ***REMOVED***
      return false;
***REMOVED***
    function varToggle(link, id***REMOVED*** {
      toggle('v' + id***REMOVED***;
      var s = link.getElementsByTagName('span'***REMOVED***[0***REMOVED***;
      var uarr = String.fromCharCode(0x25b6***REMOVED***;
      var darr = String.fromCharCode(0x25bc***REMOVED***;
      s.textContent = s.textContent == uarr ? darr : uarr;
      return false;
***REMOVED***
    function switchPastebinFriendly(link***REMOVED*** {
      s1 = "Switch to copy-and-paste view";
      s2 = "Switch back to interactive view";
      link.textContent = link.textContent.trim(***REMOVED*** == s1 ? s2: s1;
      toggle('browserTraceback', 'pastebinTraceback'***REMOVED***;
      return false;
***REMOVED***
    //-->
  </script>
  {% endif %***REMOVED***
</head>
<body>
<div id="summary">
  <h1>{% if exception_type %***REMOVED***{{ exception_type ***REMOVED******REMOVED***{% else %***REMOVED***Report{% endif %***REMOVED******REMOVED***
  ***REMOVED***{% if request %***REMOVED*** at {{ request.path_info|escape ***REMOVED******REMOVED***{% endif %***REMOVED***</h1>
  <pre class="exception_value">***REMOVED***
 ***REMOVED***{% if exception_value %***REMOVED***{{ exception_value|force_escape ***REMOVED******REMOVED***{% else %***REMOVED***No exception message supplied{% endif %***REMOVED******REMOVED***
***REMOVED***</pre>
  <table class="meta">
{% if request %***REMOVED***
    <tr>
      <th>Request Method:</th>
      <td>{{ request.META.REQUEST_METHOD ***REMOVED******REMOVED***</td>
    </tr>
    <tr>
      <th>Request URL:</th>
      <td>{{ request.get_raw_uri|escape ***REMOVED******REMOVED***</td>
    </tr>
{% endif %***REMOVED***
    <tr>
      <th>Django Version:</th>
      <td>{{ django_version_info ***REMOVED******REMOVED***</td>
    </tr>
{% if exception_type %***REMOVED***
    <tr>
      <th>Exception Type:</th>
      <td>{{ exception_type ***REMOVED******REMOVED***</td>
    </tr>
{% endif %***REMOVED***
{% if exception_type and exception_value %***REMOVED***
    <tr>
      <th>Exception Value:</th>
      <td><pre>{{ exception_value|force_escape ***REMOVED******REMOVED***</pre></td>
    </tr>
{% endif %***REMOVED***
{% if lastframe %***REMOVED***
    <tr>
      <th>Exception Location:</th>
      <td>{{ lastframe.filename|escape ***REMOVED******REMOVED*** in {{ lastframe.function|escape ***REMOVED******REMOVED***, line {{ lastframe.lineno ***REMOVED******REMOVED***</td>
    </tr>
{% endif %***REMOVED***
    <tr>
      <th>Python Executable:</th>
      <td>{{ sys_executable|escape ***REMOVED******REMOVED***</td>
    </tr>
    <tr>
      <th>Python Version:</th>
      <td>{{ sys_version_info ***REMOVED******REMOVED***</td>
    </tr>
    <tr>
      <th>Python Path:</th>
      <td><pre>{{ sys_path|pprint ***REMOVED******REMOVED***</pre></td>
    </tr>
    <tr>
      <th>Server time:</th>
      <td>{{server_time|date:"r"***REMOVED******REMOVED***</td>
    </tr>
  </table>
</div>
{% if unicode_hint %***REMOVED***
<div id="unicode-hint">
    <h2>Unicode error hint</h2>
    <p>The string that could not be encoded/decoded was: <strong>{{ unicode_hint|force_escape ***REMOVED******REMOVED***</strong></p>
</div>
{% endif %***REMOVED***
{% if template_does_not_exist %***REMOVED***
<div id="template-not-exist">
    <h2>Template-loader postmortem</h2>
***REMOVED***% if postmortem %***REMOVED***
        <p class="append-bottom">Django tried loading these templates, in this order:</p>
    ***REMOVED***% for entry in postmortem %***REMOVED***
            <p class="postmortem-section">Using engine <code>{{ entry.backend.name ***REMOVED******REMOVED***</code>:</p>
            <ul>
            ***REMOVED***% if entry.tried %***REMOVED***
                ***REMOVED***% for attempt in entry.tried %***REMOVED***
                        <li><code>{{ attempt.0.loader_name ***REMOVED******REMOVED***</code>: {{ attempt.0.name ***REMOVED******REMOVED*** ({{ attempt.1 ***REMOVED******REMOVED******REMOVED***</li>
                ***REMOVED***% endfor %***REMOVED***
            ***REMOVED***% else %***REMOVED***
                    <li>This engine did not provide a list of tried templates.</li>
            ***REMOVED***% endif %***REMOVED***
            </ul>
    ***REMOVED***% endfor %***REMOVED***
***REMOVED***% else %***REMOVED***
        <p>No templates were found because your 'TEMPLATES' setting is not configured.</p>
***REMOVED***% endif %***REMOVED***
</div>
{% endif %***REMOVED***
{% if template_info %***REMOVED***
<div id="template">
   <h2>Error during template rendering</h2>
   <p>In template <code>{{ template_info.name ***REMOVED******REMOVED***</code>, error at line <strong>{{ template_info.line ***REMOVED******REMOVED***</strong></p>
   <h3>{{ template_info.message ***REMOVED******REMOVED***</h3>
   <table class="source{% if template_info.top %***REMOVED*** cut-top{% endif %***REMOVED***
  ***REMOVED***% if template_info.bottom != template_info.total %***REMOVED*** cut-bottom{% endif %***REMOVED***">
   {% for source_line in template_info.source_lines %***REMOVED***
   {% if source_line.0 == template_info.line %***REMOVED***
   <tr class="error"><th>{{ source_line.0 ***REMOVED******REMOVED***</th>
     <td>{{ template_info.before ***REMOVED******REMOVED******REMOVED***
      ***REMOVED***<span class="specific">{{ template_info.during ***REMOVED******REMOVED***</span>***REMOVED***
      ***REMOVED***{{ template_info.after ***REMOVED******REMOVED***</td>
   </tr>
   {% else %***REMOVED***
      <tr><th>{{ source_line.0 ***REMOVED******REMOVED***</th>
      <td>{{ source_line.1 ***REMOVED******REMOVED***</td></tr>
   {% endif %***REMOVED***
   {% endfor %***REMOVED***
   </table>
</div>
{% endif %***REMOVED***
{% if frames %***REMOVED***
<div id="traceback">
  <h2>Traceback <span class="commands">{% if not is_email %***REMOVED***<a href="#" onclick="return switchPastebinFriendly(this***REMOVED***;">
    Switch to copy-and-paste view</a></span>{% endif %***REMOVED***
  </h2>
  {% autoescape off %***REMOVED***
  <div id="browserTraceback">
    <ul class="traceback">
  ***REMOVED***% for frame in frames %***REMOVED***
    ***REMOVED***% ifchanged frame.exc_cause %***REMOVED***{% if frame.exc_cause %***REMOVED***
          <li><h3>
      ***REMOVED***% if frame.exc_cause_explicit %***REMOVED***
            The above exception ({{ frame.exc_cause ***REMOVED******REMOVED******REMOVED*** was the direct cause of the following exception:
      ***REMOVED***% else %***REMOVED***
            During handling of the above exception ({{ frame.exc_cause ***REMOVED******REMOVED******REMOVED***, another exception occurred:
      ***REMOVED***% endif %***REMOVED***
        </h3></li>
    ***REMOVED***% endif %***REMOVED***{% endifchanged %***REMOVED***
        <li class="frame {{ frame.type ***REMOVED******REMOVED***">
          <code>{{ frame.filename|escape ***REMOVED******REMOVED***</code> in <code>{{ frame.function|escape ***REMOVED******REMOVED***</code>

      ***REMOVED***% if frame.context_line %***REMOVED***
            <div class="context" id="c{{ frame.id ***REMOVED******REMOVED***">
          ***REMOVED***% if frame.pre_context and not is_email %***REMOVED***
                <ol start="{{ frame.pre_context_lineno ***REMOVED******REMOVED***" class="pre-context" id="pre{{ frame.id ***REMOVED******REMOVED***">
            ***REMOVED***% for line in frame.pre_context %***REMOVED***
                  <li onclick="toggle('pre{{ frame.id ***REMOVED******REMOVED***', 'post{{ frame.id ***REMOVED******REMOVED***'***REMOVED***"><pre>{{ line|escape ***REMOVED******REMOVED***</pre></li>
            ***REMOVED***% endfor %***REMOVED***
                </ol>
          ***REMOVED***% endif %***REMOVED***
              <ol start="{{ frame.lineno ***REMOVED******REMOVED***" class="context-line">
                <li onclick="toggle('pre{{ frame.id ***REMOVED******REMOVED***', 'post{{ frame.id ***REMOVED******REMOVED***'***REMOVED***"><pre>
***REMOVED***            ***REMOVED***{{ frame.context_line|escape ***REMOVED******REMOVED***</pre>{% if not is_email %***REMOVED*** <span>...</span>{% endif %***REMOVED***</li></ol>
          ***REMOVED***% if frame.post_context and not is_email  %***REMOVED***
                <ol start='{{ frame.lineno|add:"1" ***REMOVED******REMOVED***' class="post-context" id="post{{ frame.id ***REMOVED******REMOVED***">
              ***REMOVED***% for line in frame.post_context %***REMOVED***
                  <li onclick="toggle('pre{{ frame.id ***REMOVED******REMOVED***', 'post{{ frame.id ***REMOVED******REMOVED***'***REMOVED***"><pre>{{ line|escape ***REMOVED******REMOVED***</pre></li>
              ***REMOVED***% endfor %***REMOVED***
              </ol>
          ***REMOVED***% endif %***REMOVED***
            </div>
      ***REMOVED***% endif %***REMOVED***

      ***REMOVED***% if frame.vars %***REMOVED***
            <div class="commands">
            ***REMOVED***% if is_email %***REMOVED***
                    <h2>Local Vars</h2>
            ***REMOVED***% else %***REMOVED***
                    <a href="#" onclick="return varToggle(this, '{{ frame.id ***REMOVED******REMOVED***'***REMOVED***"><span>&#x25b6;</span> Local vars</a>
            ***REMOVED***% endif %***REMOVED***
            </div>
            <table class="vars" id="v{{ frame.id ***REMOVED******REMOVED***">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
            ***REMOVED***% for var in frame.vars|dictsort:0 %***REMOVED***
                  <tr>
                    <td>{{ var.0|force_escape ***REMOVED******REMOVED***</td>
                    <td class="code"><pre>{{ var.1 ***REMOVED******REMOVED***</pre></td>
                  </tr>
            ***REMOVED***% endfor %***REMOVED***
              </tbody>
            </table>
      ***REMOVED***% endif %***REMOVED***
        </li>
  ***REMOVED***% endfor %***REMOVED***
    </ul>
  </div>
  {% endautoescape %***REMOVED***
  <form action="http://dpaste.com/" name="pasteform" id="pasteform" method="post">
{% if not is_email %***REMOVED***
  <div id="pastebinTraceback" class="pastebin">
    <input type="hidden" name="language" value="PythonConsole">
    <input type="hidden" name="title"
      value="{{ exception_type|escape ***REMOVED******REMOVED***{% if request %***REMOVED*** at {{ request.path_info|escape ***REMOVED******REMOVED***{% endif %***REMOVED***">
    <input type="hidden" name="source" value="Django Dpaste Agent">
    <input type="hidden" name="poster" value="Django">
    <textarea name="content" id="traceback_area" cols="140" rows="25">
Environment:

{% if request %***REMOVED***
Request Method: {{ request.META.REQUEST_METHOD ***REMOVED******REMOVED***
Request URL: {{ request.get_raw_uri|escape ***REMOVED******REMOVED***
{% endif %***REMOVED***
Django Version: {{ django_version_info ***REMOVED******REMOVED***
Python Version: {{ sys_version_info ***REMOVED******REMOVED***
Installed Applications:
{{ settings.INSTALLED_APPS|pprint ***REMOVED******REMOVED***
Installed Middleware:
{% if settings.MIDDLEWARE is not None %***REMOVED***{{ settings.MIDDLEWARE|pprint ***REMOVED******REMOVED******REMOVED***
***REMOVED***{% else %***REMOVED***{{ settings.MIDDLEWARE_CLASSES|pprint ***REMOVED******REMOVED***{% endif %***REMOVED***

{% if template_does_not_exist %***REMOVED***Template loader postmortem
{% if postmortem %***REMOVED***Django tried loading these templates, in this order:
{% for entry in postmortem %***REMOVED***
Using engine {{ entry.backend.name ***REMOVED******REMOVED***:
{% if entry.tried %***REMOVED***{% for attempt in entry.tried %***REMOVED******REMOVED***
***REMOVED***    * {{ attempt.0.loader_name ***REMOVED******REMOVED***: {{ attempt.0.name ***REMOVED******REMOVED*** ({{ attempt.1 ***REMOVED******REMOVED******REMOVED***
{% endfor %***REMOVED***{% else %***REMOVED***    This engine did not provide a list of tried templates.
{% endif %***REMOVED***{% endfor %***REMOVED***
{% else %***REMOVED***No templates were found because your 'TEMPLATES' setting is not configured.
{% endif %***REMOVED***{% endif %***REMOVED***{% if template_info %***REMOVED***
Template error:
In template {{ template_info.name ***REMOVED******REMOVED***, error at line {{ template_info.line ***REMOVED******REMOVED***
   {{ template_info.message ***REMOVED******REMOVED******REMOVED***
"{% for source_line in template_info.source_lines %***REMOVED***"
"{% if source_line.0 == template_info.line %***REMOVED***"
"   {{ source_line.0 ***REMOVED******REMOVED*** : {{ template_info.before ***REMOVED******REMOVED*** {{ template_info.during ***REMOVED******REMOVED*** {{ template_info.after ***REMOVED******REMOVED***"
"{% else %***REMOVED***"
"   {{ source_line.0 ***REMOVED******REMOVED*** : {{ source_line.1 ***REMOVED******REMOVED***"
***REMOVED***{% endif %***REMOVED***{% endfor %***REMOVED***{% endif %***REMOVED***

Traceback:{% for frame in frames %***REMOVED***
{% ifchanged frame.exc_cause %***REMOVED***{% if frame.exc_cause %***REMOVED***{% if frame.exc_cause_explicit %***REMOVED***
The above exception ({{ frame.exc_cause ***REMOVED******REMOVED******REMOVED*** was the direct cause of the following exception:
{% else %***REMOVED***
During handling of the above exception ({{ frame.exc_cause ***REMOVED******REMOVED******REMOVED***, another exception occurred:
{% endif %***REMOVED***{% endif %***REMOVED***{% endifchanged %***REMOVED***
File "{{ frame.filename|escape ***REMOVED******REMOVED***" in {{ frame.function|escape ***REMOVED******REMOVED***
{% if frame.context_line %***REMOVED***  {{ frame.lineno ***REMOVED******REMOVED***. {{ frame.context_line|escape ***REMOVED******REMOVED***{% endif %***REMOVED***{% endfor %***REMOVED***

Exception Type: {{ exception_type|escape ***REMOVED******REMOVED***{% if request %***REMOVED*** at {{ request.path_info|escape ***REMOVED******REMOVED***{% endif %***REMOVED***
Exception Value: {{ exception_value|force_escape ***REMOVED******REMOVED***
</textarea>
  <br><br>
  <input type="submit" value="Share this traceback on a public website">
  </div>
</form>
</div>
{% endif %***REMOVED***
{% endif %***REMOVED***

<div id="requestinfo">
  <h2>Request information</h2>

{% if request %***REMOVED***
  {% if request.user %***REMOVED***
    <h3 id="user-info">USER</h3>
    <p>{{ request.user ***REMOVED******REMOVED***</p>
  {% endif %***REMOVED***

  <h3 id="get-info">GET</h3>
  {% if request.GET %***REMOVED***
    <table class="req">
      <thead>
        <tr>
          <th>Variable</th>
          <th>Value</th>
        </tr>
      </thead>
      <tbody>
    ***REMOVED***% for var in request.GET.items %***REMOVED***
          <tr>
            <td>{{ var.0 ***REMOVED******REMOVED***</td>
            <td class="code"><pre>{{ var.1|pprint ***REMOVED******REMOVED***</pre></td>
          </tr>
    ***REMOVED***% endfor %***REMOVED***
      </tbody>
    </table>
  {% else %***REMOVED***
    <p>No GET data</p>
  {% endif %***REMOVED***

  <h3 id="post-info">POST</h3>
  {% if filtered_POST %***REMOVED***
    <table class="req">
      <thead>
        <tr>
          <th>Variable</th>
          <th>Value</th>
        </tr>
      </thead>
      <tbody>
    ***REMOVED***% for var in filtered_POST.items %***REMOVED***
          <tr>
            <td>{{ var.0 ***REMOVED******REMOVED***</td>
            <td class="code"><pre>{{ var.1|pprint ***REMOVED******REMOVED***</pre></td>
          </tr>
    ***REMOVED***% endfor %***REMOVED***
      </tbody>
    </table>
  {% else %***REMOVED***
    <p>No POST data</p>
  {% endif %***REMOVED***
  <h3 id="files-info">FILES</h3>
  {% if request.FILES %***REMOVED***
    <table class="req">
        <thead>
            <tr>
                <th>Variable</th>
                <th>Value</th>
            </tr>
        </thead>
        <tbody>
        ***REMOVED***% for var in request.FILES.items %***REMOVED***
                <tr>
                    <td>{{ var.0 ***REMOVED******REMOVED***</td>
                    <td class="code"><pre>{{ var.1|pprint ***REMOVED******REMOVED***</pre></td>
                </tr>
        ***REMOVED***% endfor %***REMOVED***
        </tbody>
    </table>
  {% else %***REMOVED***
    <p>No FILES data</p>
  {% endif %***REMOVED***


  <h3 id="cookie-info">COOKIES</h3>
  {% if request.COOKIES %***REMOVED***
    <table class="req">
      <thead>
        <tr>
          <th>Variable</th>
          <th>Value</th>
        </tr>
      </thead>
      <tbody>
    ***REMOVED***% for var in request.COOKIES.items %***REMOVED***
          <tr>
            <td>{{ var.0 ***REMOVED******REMOVED***</td>
            <td class="code"><pre>{{ var.1|pprint ***REMOVED******REMOVED***</pre></td>
          </tr>
    ***REMOVED***% endfor %***REMOVED***
      </tbody>
    </table>
  {% else %***REMOVED***
    <p>No cookie data</p>
  {% endif %***REMOVED***

  <h3 id="meta-info">META</h3>
  <table class="req">
    <thead>
      <tr>
        <th>Variable</th>
        <th>Value</th>
      </tr>
    </thead>
    <tbody>
  ***REMOVED***% for var in request.META.items|dictsort:0 %***REMOVED***
        <tr>
          <td>{{ var.0 ***REMOVED******REMOVED***</td>
          <td class="code"><pre>{{ var.1|pprint ***REMOVED******REMOVED***</pre></td>
        </tr>
  ***REMOVED***% endfor %***REMOVED***
    </tbody>
  </table>
{% else %***REMOVED***
  <p>Request data not supplied</p>
{% endif %***REMOVED***

  <h3 id="settings-info">Settings</h3>
  <h4>Using settings module <code>{{ settings.SETTINGS_MODULE ***REMOVED******REMOVED***</code></h4>
  <table class="req">
    <thead>
      <tr>
        <th>Setting</th>
        <th>Value</th>
      </tr>
    </thead>
    <tbody>
  ***REMOVED***% for var in settings.items|dictsort:0 %***REMOVED***
        <tr>
          <td>{{ var.0 ***REMOVED******REMOVED***</td>
          <td class="code"><pre>{{ var.1|pprint ***REMOVED******REMOVED***</pre></td>
        </tr>
  ***REMOVED***% endfor %***REMOVED***
    </tbody>
  </table>

</div>
{% if not is_email %***REMOVED***
  <div id="explanation">
    <p>
      You're seeing this error because you have <code>***REMOVED***</code> in your
      Django settings file. Change that to <code>False</code>, and Django will
      display a standard page generated by the handler for this status code.
    </p>
  </div>
{% endif %***REMOVED***
</body>
</html>
***REMOVED******REMOVED***  # NOQA

TECHNICAL_500_TEXT_TEMPLATE = (***REMOVED******REMOVED***
***REMOVED***{% firstof exception_type 'Report' %***REMOVED***{% if request %***REMOVED*** at {{ request.path_info ***REMOVED******REMOVED***{% endif %***REMOVED***
{% firstof exception_value 'No exception message supplied' %***REMOVED***
{% if request %***REMOVED***
Request Method: {{ request.META.REQUEST_METHOD ***REMOVED******REMOVED***
Request URL: {{ request.get_raw_uri ***REMOVED******REMOVED***{% endif %***REMOVED***
Django Version: {{ django_version_info ***REMOVED******REMOVED***
Python Executable: {{ sys_executable ***REMOVED******REMOVED***
Python Version: {{ sys_version_info ***REMOVED******REMOVED***
Python Path: {{ sys_path ***REMOVED******REMOVED***
Server time: {{server_time|date:"r"***REMOVED******REMOVED***
Installed Applications:
{{ settings.INSTALLED_APPS|pprint ***REMOVED******REMOVED***
Installed Middleware:
{% if settings.MIDDLEWARE is not None %***REMOVED***{{ settings.MIDDLEWARE|pprint ***REMOVED******REMOVED******REMOVED***
***REMOVED***{% else %***REMOVED***{{ settings.MIDDLEWARE_CLASSES|pprint ***REMOVED******REMOVED***{% endif %***REMOVED***
{% if template_does_not_exist %***REMOVED***Template loader postmortem
{% if postmortem %***REMOVED***Django tried loading these templates, in this order:
{% for entry in postmortem %***REMOVED***
Using engine {{ entry.backend.name ***REMOVED******REMOVED***:
{% if entry.tried %***REMOVED***{% for attempt in entry.tried %***REMOVED******REMOVED***
***REMOVED***    * {{ attempt.0.loader_name ***REMOVED******REMOVED***: {{ attempt.0.name ***REMOVED******REMOVED*** ({{ attempt.1 ***REMOVED******REMOVED******REMOVED***
{% endfor %***REMOVED***{% else %***REMOVED***    This engine did not provide a list of tried templates.
{% endif %***REMOVED***{% endfor %***REMOVED***
{% else %***REMOVED***No templates were found because your 'TEMPLATES' setting is not configured.
{% endif %***REMOVED***
{% endif %***REMOVED***{% if template_info %***REMOVED***
Template error:
In template {{ template_info.name ***REMOVED******REMOVED***, error at line {{ template_info.line ***REMOVED******REMOVED***
   {{ template_info.message ***REMOVED******REMOVED***
{% for source_line in template_info.source_lines %***REMOVED******REMOVED***
"{% if source_line.0 == template_info.line %***REMOVED***"
"   {{ source_line.0 ***REMOVED******REMOVED*** : {{ template_info.before ***REMOVED******REMOVED*** {{ template_info.during ***REMOVED******REMOVED*** {{ template_info.after ***REMOVED******REMOVED***"
"{% else %***REMOVED***"
"   {{ source_line.0 ***REMOVED******REMOVED*** : {{ source_line.1 ***REMOVED******REMOVED***"
***REMOVED***{% endif %***REMOVED***{% endfor %***REMOVED***{% endif %***REMOVED***{% if frames %***REMOVED***

Traceback:***REMOVED***
"{% for frame in frames %***REMOVED***"
"{% ifchanged frame.exc_cause %***REMOVED***"
"  {% if frame.exc_cause %***REMOVED***" ***REMOVED***
***REMOVED***% if frame.exc_cause_explicit %***REMOVED***
      The above exception ({{ frame.exc_cause ***REMOVED******REMOVED******REMOVED*** was the direct cause of the following exception:
***REMOVED***% else %***REMOVED***
      During handling of the above exception ({{ frame.exc_cause ***REMOVED******REMOVED******REMOVED***, another exception occurred:
***REMOVED***% endif %***REMOVED***
  {% endif %***REMOVED***
{% endifchanged %***REMOVED***
File "{{ frame.filename ***REMOVED******REMOVED***" in {{ frame.function ***REMOVED******REMOVED***
{% if frame.context_line %***REMOVED***  {{ frame.lineno ***REMOVED******REMOVED***. {{ frame.context_line ***REMOVED******REMOVED***{% endif %***REMOVED***
{% endfor %***REMOVED***
{% if exception_type %***REMOVED***Exception Type: {{ exception_type ***REMOVED******REMOVED***{% if request %***REMOVED*** at {{ request.path_info ***REMOVED******REMOVED***{% endif %***REMOVED***
{% if exception_value %***REMOVED***Exception Value: {{ exception_value ***REMOVED******REMOVED***{% endif %***REMOVED***{% endif %***REMOVED***{% endif %***REMOVED***
{% if request %***REMOVED***Request information:
{% if request.user %***REMOVED***USER: {{ request.user ***REMOVED******REMOVED***{% endif %***REMOVED***

GET:{% for k, v in request.GET.items %***REMOVED***
{{ k ***REMOVED******REMOVED*** = {{ v|stringformat:"r" ***REMOVED******REMOVED***{% empty %***REMOVED*** No GET data{% endfor %***REMOVED***

POST:{% for k, v in filtered_POST.items %***REMOVED***
{{ k ***REMOVED******REMOVED*** = {{ v|stringformat:"r" ***REMOVED******REMOVED***{% empty %***REMOVED*** No POST data{% endfor %***REMOVED***

FILES:{% for k, v in request.FILES.items %***REMOVED***
{{ k ***REMOVED******REMOVED*** = {{ v|stringformat:"r" ***REMOVED******REMOVED***{% empty %***REMOVED*** No FILES data{% endfor %***REMOVED***

COOKIES:{% for k, v in request.COOKIES.items %***REMOVED***
{{ k ***REMOVED******REMOVED*** = {{ v|stringformat:"r" ***REMOVED******REMOVED***{% empty %***REMOVED*** No cookie data{% endfor %***REMOVED***

META:{% for k, v in request.META.items|dictsort:0 %***REMOVED***
{{ k ***REMOVED******REMOVED*** = {{ v|stringformat:"r" ***REMOVED******REMOVED***{% endfor %***REMOVED***
{% else %***REMOVED***Request data not supplied
{% endif %***REMOVED***
Settings:
Using settings module {{ settings.SETTINGS_MODULE ***REMOVED******REMOVED***{% for k, v in settings.items|dictsort:0 %***REMOVED***
{{ k ***REMOVED******REMOVED*** = {{ v|stringformat:"r" ***REMOVED******REMOVED***{% endfor %***REMOVED***

{% if not is_email %***REMOVED***
You're seeing this error because you have ***REMOVED*** in your
Django settings file. Change that to False, and Django will
display a standard page generated by the handler for this status code.
{% endif %***REMOVED***
***REMOVED******REMOVED***  # NOQA

TECHNICAL_404_TEMPLATE = ***REMOVED***
<!DOCTYPE html>
<html lang="en">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <title>Page not found at {{ request.path_info|escape ***REMOVED******REMOVED***</title>
  <meta name="robots" content="NONE,NOARCHIVE">
  <style type="text/css">
    html * { padding:0; margin:0; ***REMOVED***
    body * { padding:10px 20px; ***REMOVED***
    body * * { padding:0; ***REMOVED***
    body { font:small sans-serif; background:#eee; ***REMOVED***
    body>div { border-bottom:1px solid #ddd; ***REMOVED***
    h1 { font-weight:normal; margin-bottom:.4em; ***REMOVED***
    h1 span { font-size:60%; color:#666; font-weight:normal; ***REMOVED***
    table { border:none; border-collapse: collapse; width:100%; ***REMOVED***
    td, th { vertical-align:top; padding:2px 3px; ***REMOVED***
    th { width:12em; text-align:right; color:#666; padding-right:.5em; ***REMOVED***
    #info { background:#f6f6f6; ***REMOVED***
    #info ol { margin: 0.5em 4em; ***REMOVED***
    #info ol li { font-family: monospace; ***REMOVED***
    #summary { background: #ffc; ***REMOVED***
    #explanation { background:#eee; border-bottom: 0px none; ***REMOVED***
  </style>
</head>
<body>
  <div id="summary">
    <h1>Page not found <span>(404***REMOVED***</span></h1>
    <table class="meta">
      <tr>
        <th>Request Method:</th>
        <td>{{ request.META.REQUEST_METHOD ***REMOVED******REMOVED***</td>
      </tr>
      <tr>
        <th>Request URL:</th>
        <td>{{ request.build_absolute_uri|escape ***REMOVED******REMOVED***</td>
      </tr>
  ***REMOVED***% if raising_view_name %***REMOVED***
      <tr>
        <th>Raised by:</th>
        <td>{{ raising_view_name ***REMOVED******REMOVED***</td>
      </tr>
  ***REMOVED***% endif %***REMOVED***
    </table>
  </div>
  <div id="info">
***REMOVED***% if urlpatterns %***REMOVED***
      <p>
      Using the URLconf defined in <code>{{ urlconf ***REMOVED******REMOVED***</code>,
      Django tried these URL patterns, in this order:
      </p>
      <ol>
    ***REMOVED***% for pattern in urlpatterns %***REMOVED***
          <li>
        ***REMOVED***% for pat in pattern %***REMOVED***
            ***REMOVED***{ pat.regex.pattern ***REMOVED******REMOVED***
            ***REMOVED***% if forloop.last and pat.name %***REMOVED***[name='{{ pat.name ***REMOVED******REMOVED***'***REMOVED***{% endif %***REMOVED***
        ***REMOVED***% endfor %***REMOVED***
          </li>
    ***REMOVED***% endfor %***REMOVED***
      </ol>
      <p>The current URL, <code>{{ request_path|escape ***REMOVED******REMOVED***</code>, didn't match any of these.</p>
***REMOVED***% else %***REMOVED***
      <p>{{ reason ***REMOVED******REMOVED***</p>
***REMOVED***% endif %***REMOVED***
  </div>

  <div id="explanation">
    <p>
      You're seeing this error because you have <code>***REMOVED***</code> in
      your Django settings file. Change that to <code>False</code>, and Django
      will display a standard 404 page.
    </p>
  </div>
</body>
</html>
***REMOVED***

DEFAULT_URLCONF_TEMPLATE = ***REMOVED***
<!DOCTYPE html>
<html lang="en"><head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <meta name="robots" content="NONE,NOARCHIVE"><title>{{ title ***REMOVED******REMOVED***</title>
  <style type="text/css">
    html * { padding:0; margin:0; ***REMOVED***
    body * { padding:10px 20px; ***REMOVED***
    body * * { padding:0; ***REMOVED***
    body { font:small sans-serif; ***REMOVED***
    body>div { border-bottom:1px solid #ddd; ***REMOVED***
    h1 { font-weight:normal; ***REMOVED***
    h2 { margin-bottom:.8em; ***REMOVED***
    h2 span { font-size:80%; color:#666; font-weight:normal; ***REMOVED***
    h3 { margin:1em 0 .5em 0; ***REMOVED***
    h4 { margin:0 0 .5em 0; font-weight: normal; ***REMOVED***
    table { border:1px solid #ccc; border-collapse: collapse; width:100%; background:white; ***REMOVED***
    tbody td, tbody th { vertical-align:top; padding:2px 3px; ***REMOVED***
    thead th {
      padding:1px 6px 1px 3px; background:#fefefe; text-align:left;
      font-weight:normal; font-size:11px; border:1px solid #ddd;
***REMOVED***
    tbody th { width:12em; text-align:right; color:#666; padding-right:.5em; ***REMOVED***
    #summary { background: #e0ebff; ***REMOVED***
    #summary h2 { font-weight: normal; color: #666; ***REMOVED***
    #explanation { background:#eee; ***REMOVED***
    #instructions { background:#f6f6f6; ***REMOVED***
    #summary table { border:none; background:transparent; ***REMOVED***
  </style>
</head>

<body>
<div id="summary">
  <h1>{{ heading ***REMOVED******REMOVED***</h1>
  <h2>{{ subheading ***REMOVED******REMOVED***</h2>
</div>

<div id="instructions">
  <p>
***REMOVED***{ instructions|safe ***REMOVED******REMOVED***
  </p>
</div>

<div id="explanation">
  <p>
***REMOVED***{ explanation|safe ***REMOVED******REMOVED***
  </p>
</div>
</body></html>
***REMOVED***
