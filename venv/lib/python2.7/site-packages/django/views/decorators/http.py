***REMOVED***
Decorators for views based on HTTP headers.
***REMOVED***

import logging
from calendar import timegm
from functools import wraps

from django.http import HttpResponseNotAllowed
from django.middleware.http import ConditionalGetMiddleware
from django.utils.cache import get_conditional_response
from django.utils.decorators import available_attrs, decorator_from_middleware
from django.utils.http import http_date, quote_etag

conditional_page = decorator_from_middleware(ConditionalGetMiddleware***REMOVED***

logger = logging.getLogger('django.request'***REMOVED***


def require_http_methods(request_method_list***REMOVED***:
    ***REMOVED***
    Decorator to make a view only accept particular request methods.  Usage::

        @require_http_methods(["GET", "POST"***REMOVED******REMOVED***
        def my_view(request***REMOVED***:
            # I can assume now that only GET or POST requests make it this far
            # ...

    Note that request methods should be in uppercase.
    ***REMOVED***
    def decorator(func***REMOVED***:
        @wraps(func, assigned=available_attrs(func***REMOVED******REMOVED***
        def inner(request, *args, **kwargs***REMOVED***:
            if request.method not in request_method_list:
                logger.warning(
                    'Method Not Allowed (%s***REMOVED***: %s', request.method, request.path,
                    extra={'status_code': 405, 'request': request***REMOVED***
                ***REMOVED***
                return HttpResponseNotAllowed(request_method_list***REMOVED***
            return func(request, *args, **kwargs***REMOVED***
        return inner
    return decorator

require_GET = require_http_methods(["GET"***REMOVED******REMOVED***
require_GET.__doc__ = "Decorator to require that a view only accepts the GET method."

require_POST = require_http_methods(["POST"***REMOVED******REMOVED***
require_POST.__doc__ = "Decorator to require that a view only accepts the POST method."

require_safe = require_http_methods(["GET", "HEAD"***REMOVED******REMOVED***
require_safe.__doc__ = "Decorator to require that a view only accepts safe methods: GET and HEAD."


def condition(etag_func=None, last_modified_func=None***REMOVED***:
    ***REMOVED***
    Decorator to support conditional retrieval (or change***REMOVED*** for a view
    function.

    The parameters are callables to compute the ETag and last modified time for
    the requested resource, respectively. The callables are passed the same
    parameters as the view itself. The ETag function should return a string (or
    None if the resource doesn't exist***REMOVED***, while the last_modified function
    should return a datetime object (or None if the resource doesn't exist***REMOVED***.

    If both parameters are provided, all the preconditions must be met before
    the view is processed.

    This decorator will either pass control to the wrapped view function or
    return an HTTP 304 response (unmodified***REMOVED*** or 412 response (preconditions
    failed***REMOVED***, depending upon the request method.

    Any behavior marked as "undefined" in the HTTP spec (e.g. If-none-match
    plus If-modified-since headers***REMOVED*** will result in the view function being
    called.
    ***REMOVED***
    def decorator(func***REMOVED***:
        @wraps(func, assigned=available_attrs(func***REMOVED******REMOVED***
        def inner(request, *args, **kwargs***REMOVED***:
            # Compute values (if any***REMOVED*** for the requested resource.
            def get_last_modified(***REMOVED***:
                if last_modified_func:
                    dt = last_modified_func(request, *args, **kwargs***REMOVED***
                    if dt:
                        return timegm(dt.utctimetuple(***REMOVED******REMOVED***

            res_etag = etag_func(request, *args, **kwargs***REMOVED*** if etag_func else None
            res_last_modified = get_last_modified(***REMOVED***

            response = get_conditional_response(
                request,
                etag=res_etag,
                last_modified=res_last_modified,
            ***REMOVED***

            if response is None:
                response = func(request, *args, **kwargs***REMOVED***

            # Set relevant headers on the response if they don't already exist.
            if res_last_modified and not response.has_header('Last-Modified'***REMOVED***:
                response['Last-Modified'***REMOVED*** = http_date(res_last_modified***REMOVED***
            if res_etag and not response.has_header('ETag'***REMOVED***:
                response['ETag'***REMOVED*** = quote_etag(res_etag***REMOVED***

            return response

        return inner
    return decorator


# Shortcut decorators for common cases based on ETag or Last-Modified only
def etag(etag_func***REMOVED***:
    return condition(etag_func=etag_func***REMOVED***


def last_modified(last_modified_func***REMOVED***:
    return condition(last_modified_func=last_modified_func***REMOVED***
