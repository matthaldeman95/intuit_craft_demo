from functools import wraps

from django.middleware.csrf import CsrfViewMiddleware, get_token
from django.utils.decorators import available_attrs, decorator_from_middleware

csrf_protect = decorator_from_middleware(CsrfViewMiddleware***REMOVED***
csrf_protect.__name__ = "csrf_protect"
csrf_protect.__doc__ = ***REMOVED***
This decorator adds CSRF protection in exactly the same way as
CsrfViewMiddleware, but it can be used on a per view basis.  Using both, or
using the decorator multiple times, is harmless and efficient.
***REMOVED***


class _EnsureCsrfToken(CsrfViewMiddleware***REMOVED***:
    # We need this to behave just like the CsrfViewMiddleware, but not reject
    # requests or log warnings.
    def _reject(self, request, reason***REMOVED***:
        return None


requires_csrf_token = decorator_from_middleware(_EnsureCsrfToken***REMOVED***
requires_csrf_token.__name__ = 'requires_csrf_token'
requires_csrf_token.__doc__ = ***REMOVED***
Use this decorator on views that need a correct csrf_token available to
RequestContext, but without the CSRF protection that csrf_protect
enforces.
***REMOVED***


class _EnsureCsrfCookie(CsrfViewMiddleware***REMOVED***:
    def _reject(self, request, reason***REMOVED***:
        return None

    def process_view(self, request, callback, callback_args, callback_kwargs***REMOVED***:
        retval = super(_EnsureCsrfCookie, self***REMOVED***.process_view(request, callback, callback_args, callback_kwargs***REMOVED***
        # Forces process_response to send the cookie
        get_token(request***REMOVED***
        return retval


ensure_csrf_cookie = decorator_from_middleware(_EnsureCsrfCookie***REMOVED***
ensure_csrf_cookie.__name__ = 'ensure_csrf_cookie'
ensure_csrf_cookie.__doc__ = ***REMOVED***
Use this decorator to ensure that a view sets a CSRF cookie, whether or not it
uses the csrf_token template tag, or the CsrfViewMiddleware is used.
***REMOVED***


def csrf_exempt(view_func***REMOVED***:
    ***REMOVED***
    Marks a view function as being exempt from the CSRF view protection.
    ***REMOVED***
    # We could just do view_func.csrf_exempt = True, but decorators
    # are nicer if they don't have side-effects, so we return a new
    # function.
    def wrapped_view(*args, **kwargs***REMOVED***:
        return view_func(*args, **kwargs***REMOVED***
    wrapped_view.csrf_exempt = True
    return wraps(view_func, assigned=available_attrs(view_func***REMOVED******REMOVED***(wrapped_view***REMOVED***
