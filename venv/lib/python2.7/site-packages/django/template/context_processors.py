***REMOVED***
A set of request processors that return dictionaries to be merged into a
template context. Each function takes the request object as its only parameter
and returns a dictionary to add to the context.

These are referenced from the 'context_processors' option of the configuration
of a DjangoTemplates backend and used by RequestContext.
***REMOVED***

from __future__ import unicode_literals

import itertools

from django.conf import settings
from django.middleware.csrf import get_token
from django.utils.encoding import smart_text
from django.utils.functional import SimpleLazyObject, lazy


def csrf(request***REMOVED***:
    ***REMOVED***
    Context processor that provides a CSRF token, or the string 'NOTPROVIDED' if
    it has not been provided by either a view decorator or the middleware
    ***REMOVED***
    def _get_val(***REMOVED***:
        token = get_token(request***REMOVED***
        if token is None:
            # In order to be able to provide debugging info in the
            # case of misconfiguration, we use a sentinel value
            # instead of returning an empty dict.
            return 'NOTPROVIDED'
        else:
            return smart_text(token***REMOVED***

    return {'csrf_token': SimpleLazyObject(_get_val***REMOVED******REMOVED***


def debug(request***REMOVED***:
    ***REMOVED***
    Returns context variables helpful for debugging.
    ***REMOVED***
    context_extras = {***REMOVED***
    if settings.DEBUG and request.META.get('REMOTE_ADDR'***REMOVED*** in settings.INTERNAL_IPS:
        context_extras['debug'***REMOVED*** = True
        from django.db import connections
        # Return a lazy reference that computes connection.queries on access,
        # to ensure it contains queries triggered after this function runs.
        context_extras['sql_queries'***REMOVED*** = lazy(
            lambda: list(itertools.chain(*[connections[x***REMOVED***.queries for x in connections***REMOVED******REMOVED******REMOVED***,
            list
        ***REMOVED***
    return context_extras


def i18n(request***REMOVED***:
    from django.utils import translation
    return {
        'LANGUAGES': settings.LANGUAGES,
        'LANGUAGE_CODE': translation.get_language(***REMOVED***,
        'LANGUAGE_BIDI': translation.get_language_bidi(***REMOVED***,
***REMOVED***


def tz(request***REMOVED***:
    from django.utils import timezone
    return {'TIME_ZONE': timezone.get_current_timezone_name(***REMOVED******REMOVED***


def static(request***REMOVED***:
    ***REMOVED***
    Adds static-related context variables to the context.
    ***REMOVED***
    return {'STATIC_URL': settings.STATIC_URL***REMOVED***


def media(request***REMOVED***:
    ***REMOVED***
    Adds media-related context variables to the context.
    ***REMOVED***
    return {'MEDIA_URL': settings.MEDIA_URL***REMOVED***


def request(request***REMOVED***:
    return {'request': request***REMOVED***
