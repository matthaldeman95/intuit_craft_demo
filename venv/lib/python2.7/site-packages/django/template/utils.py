***REMOVED***
from collections import Counter, OrderedDict

from django.apps import apps
from django.conf import settings
from django.core.exceptions import ImproperlyConfigured
from django.utils import lru_cache
from django.utils._os import upath
from django.utils.functional import cached_property
from django.utils.module_loading import import_string


class InvalidTemplateEngineError(ImproperlyConfigured***REMOVED***:
    pass


class EngineHandler(object***REMOVED***:
    def __init__(self, templates=None***REMOVED***:
        ***REMOVED***
        templates is an optional list of template engine definitions
        (structured like settings.TEMPLATES***REMOVED***.
        ***REMOVED***
        self._templates = templates
        self._engines = {***REMOVED***

    @cached_property
    def templates(self***REMOVED***:
        if self._templates is None:
            self._templates = settings.TEMPLATES

        templates = OrderedDict(***REMOVED***
        backend_names = [***REMOVED***
        for tpl in self._templates:
            tpl = tpl.copy(***REMOVED***
            ***REMOVED***
                # This will raise an exception if 'BACKEND' doesn't exist or
                # isn't a string containing at least one dot.
                default_name = tpl['BACKEND'***REMOVED***.rsplit('.', 2***REMOVED***[-2***REMOVED***
            except Exception:
                invalid_backend = tpl.get('BACKEND', '<not defined>'***REMOVED***
                raise ImproperlyConfigured(
                    "Invalid BACKEND for a template engine: {***REMOVED***. Check "
                    "your TEMPLATES setting.".format(invalid_backend***REMOVED******REMOVED***

            tpl.setdefault('NAME', default_name***REMOVED***
            tpl.setdefault('DIRS', [***REMOVED******REMOVED***
            tpl.setdefault('APP_DIRS', False***REMOVED***
            tpl.setdefault('OPTIONS', {***REMOVED******REMOVED***

            templates[tpl['NAME'***REMOVED******REMOVED*** = tpl
            backend_names.append(tpl['NAME'***REMOVED******REMOVED***

        counts = Counter(backend_names***REMOVED***
        duplicates = [alias for alias, count in counts.most_common(***REMOVED*** if count > 1***REMOVED***
        if duplicates:
            raise ImproperlyConfigured(
                "Template engine aliases aren't unique, duplicates: {***REMOVED***. "
                "Set a unique NAME for each engine in settings.TEMPLATES."
                .format(", ".join(duplicates***REMOVED******REMOVED******REMOVED***

        return templates

    def __getitem__(self, alias***REMOVED***:
        ***REMOVED***
            return self._engines[alias***REMOVED***
        except KeyError:
            ***REMOVED***
                params = self.templates[alias***REMOVED***
            except KeyError:
                raise InvalidTemplateEngineError(
                    "Could not find config for '{***REMOVED***' "
                    "in settings.TEMPLATES".format(alias***REMOVED******REMOVED***

            # If importing or initializing the backend raises an exception,
            # self._engines[alias***REMOVED*** isn't set and this code may get executed
            # again, so we must preserve the original params. See #24265.
            params = params.copy(***REMOVED***
            backend = params.pop('BACKEND'***REMOVED***
            engine_cls = import_string(backend***REMOVED***
            engine = engine_cls(params***REMOVED***

            self._engines[alias***REMOVED*** = engine
            return engine

    def __iter__(self***REMOVED***:
        return iter(self.templates***REMOVED***

    def all(self***REMOVED***:
        return [self[alias***REMOVED*** for alias in self***REMOVED***


@lru_cache.lru_cache(***REMOVED***
def get_app_template_dirs(dirname***REMOVED***:
    ***REMOVED***
    Return an iterable of paths of directories to load app templates from.

    dirname is the name of the subdirectory containing templates inside
    installed applications.
    ***REMOVED***
    template_dirs = [***REMOVED***
    for app_config in apps.get_app_configs(***REMOVED***:
        if not app_config.path:
            continue
        template_dir = os.path.join(app_config.path, dirname***REMOVED***
        if os.path.isdir(template_dir***REMOVED***:
            template_dirs.append(upath(template_dir***REMOVED******REMOVED***
    # Immutable return value because it will be cached and shared by callers.
    return tuple(template_dirs***REMOVED***
