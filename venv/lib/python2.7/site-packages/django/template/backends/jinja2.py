# Since this package contains a "django" module, this is required on Python 2.
from __future__ import absolute_import

import sys

import jinja2

from django.conf import settings
from django.template import TemplateDoesNotExist, TemplateSyntaxError
from django.utils import six
from django.utils.module_loading import import_string

from .base import BaseEngine
from .utils import csrf_input_lazy, csrf_token_lazy


class Jinja2(BaseEngine***REMOVED***:

    app_dirname = 'jinja2'

    def __init__(self, params***REMOVED***:
        params = params.copy(***REMOVED***
        options = params.pop('OPTIONS'***REMOVED***.copy(***REMOVED***
        super(Jinja2, self***REMOVED***.__init__(params***REMOVED***

        environment = options.pop('environment', 'jinja2.Environment'***REMOVED***
        environment_cls = import_string(environment***REMOVED***

        if 'loader' not in options:
            options['loader'***REMOVED*** = jinja2.FileSystemLoader(self.template_dirs***REMOVED***
        options.setdefault('autoescape', True***REMOVED***
        options.setdefault('auto_reload', settings.DEBUG***REMOVED***
        options.setdefault('undefined',
                           jinja2.DebugUndefined if settings.DEBUG else jinja2.Undefined***REMOVED***

        self.env = environment_cls(**options***REMOVED***

    def from_string(self, template_code***REMOVED***:
        return Template(self.env.from_string(template_code***REMOVED******REMOVED***

    def get_template(self, template_name***REMOVED***:
        ***REMOVED***
            return Template(self.env.get_template(template_name***REMOVED******REMOVED***
        except jinja2.TemplateNotFound as exc:
            six.reraise(
                TemplateDoesNotExist,
                TemplateDoesNotExist(exc.name, backend=self***REMOVED***,
                sys.exc_info(***REMOVED***[2***REMOVED***,
            ***REMOVED***
        except jinja2.TemplateSyntaxError as exc:
            new = TemplateSyntaxError(exc.args***REMOVED***
            new.template_debug = get_exception_info(exc***REMOVED***
            six.reraise(TemplateSyntaxError, new, sys.exc_info(***REMOVED***[2***REMOVED******REMOVED***


class Template(object***REMOVED***:

    def __init__(self, template***REMOVED***:
        self.template = template
        self.origin = Origin(
            name=template.filename, template_name=template.name,
        ***REMOVED***

    def render(self, context=None, request=None***REMOVED***:
        if context is None:
            context = {***REMOVED***
        if request is not None:
            context['request'***REMOVED*** = request
            context['csrf_input'***REMOVED*** = csrf_input_lazy(request***REMOVED***
            context['csrf_token'***REMOVED*** = csrf_token_lazy(request***REMOVED***
        return self.template.render(context***REMOVED***


class Origin(object***REMOVED***:
    ***REMOVED***
    A container to hold debug information as described in the template API
    documentation.
    ***REMOVED***
    def __init__(self, name, template_name***REMOVED***:
        self.name = name
        self.template_name = template_name


def get_exception_info(exception***REMOVED***:
    ***REMOVED***
    Formats exception information for display on the debug page using the
    structure described in the template API documentation.
    ***REMOVED***
    context_lines = 10
    lineno = exception.lineno
    lines = list(enumerate(exception.source.strip(***REMOVED***.split("\n"***REMOVED***, start=1***REMOVED******REMOVED***
    during = lines[lineno - 1***REMOVED***[1***REMOVED***
    total = len(lines***REMOVED***
    top = max(0, lineno - context_lines - 1***REMOVED***
    bottom = min(total, lineno + context_lines***REMOVED***

    return {
        'name': exception.filename,
        'message': exception.message,
        'source_lines': lines[top:bottom***REMOVED***,
        'line': lineno,
        'before': '',
        'during': during,
        'after': '',
        'total': total,
        'top': top,
        'bottom': bottom,
***REMOVED***
