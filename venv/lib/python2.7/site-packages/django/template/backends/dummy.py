# Since this package contains a "django" module, this is required on Python 2.
from __future__ import absolute_import

import errno
import io
import string

from django.conf import settings
from django.core.exceptions import ImproperlyConfigured
from django.template import Origin, TemplateDoesNotExist
from django.utils.html import conditional_escape

from .base import BaseEngine
from .utils import csrf_input_lazy, csrf_token_lazy


class TemplateStrings(BaseEngine***REMOVED***:

    app_dirname = 'template_strings'

    def __init__(self, params***REMOVED***:
        params = params.copy(***REMOVED***
        options = params.pop('OPTIONS'***REMOVED***.copy(***REMOVED***
        if options:
            raise ImproperlyConfigured(
                "Unknown options: {***REMOVED***".format(", ".join(options***REMOVED******REMOVED******REMOVED***
        super(TemplateStrings, self***REMOVED***.__init__(params***REMOVED***

    def from_string(self, template_code***REMOVED***:
        return Template(template_code***REMOVED***

    def get_template(self, template_name***REMOVED***:
        tried = [***REMOVED***
        for template_file in self.iter_template_filenames(template_name***REMOVED***:
            ***REMOVED***
                with io.open(template_file, encoding=settings.FILE_CHARSET***REMOVED*** as fp:
                    template_code = fp.read(***REMOVED***
            except IOError as e:
                if e.errno == errno.ENOENT:
                    tried.append((
                        Origin(template_file, template_name, self***REMOVED***,
                        'Source does not exist',
                    ***REMOVED******REMOVED***
                    continue
                raise

            return Template(template_code***REMOVED***

        else:
            raise TemplateDoesNotExist(template_name, tried=tried, backend=self***REMOVED***


class Template(string.Template***REMOVED***:

    def render(self, context=None, request=None***REMOVED***:
        if context is None:
            context = {***REMOVED***
        else:
            context = {k: conditional_escape(v***REMOVED*** for k, v in context.items(***REMOVED******REMOVED***
        if request is not None:
            context['csrf_input'***REMOVED*** = csrf_input_lazy(request***REMOVED***
            context['csrf_token'***REMOVED*** = csrf_token_lazy(request***REMOVED***
        return self.safe_substitute(context***REMOVED***
