# Since this package contains a "django" module, this is required on Python 2.
from __future__ import absolute_import

from django.core.exceptions import (
    ImproperlyConfigured, SuspiciousFileOperation,
***REMOVED***
from django.template.utils import get_app_template_dirs
from django.utils._os import safe_join
from django.utils.functional import cached_property


class BaseEngine(object***REMOVED***:

    # Core methods: engines have to provide their own implementation
    #               (except for from_string which is optional***REMOVED***.

    def __init__(self, params***REMOVED***:
        ***REMOVED***
        Initializes the template engine.

        Receives the configuration settings as a dict.
        ***REMOVED***
        params = params.copy(***REMOVED***
        self.name = params.pop('NAME'***REMOVED***
        self.dirs = list(params.pop('DIRS'***REMOVED******REMOVED***
        self.app_dirs = bool(params.pop('APP_DIRS'***REMOVED******REMOVED***
        if params:
            raise ImproperlyConfigured(
                "Unknown parameters: {***REMOVED***".format(", ".join(params***REMOVED******REMOVED******REMOVED***

    @property
    def app_dirname(self***REMOVED***:
        raise ImproperlyConfigured(
            "{***REMOVED*** doesn't support loading templates from installed "
            "applications.".format(self.__class__.__name__***REMOVED******REMOVED***

    def from_string(self, template_code***REMOVED***:
        ***REMOVED***
        Creates and returns a template for the given source code.

        This method is optional.
        ***REMOVED***
        raise NotImplementedError(
            "subclasses of BaseEngine should provide "
            "a from_string(***REMOVED*** method"***REMOVED***

    def get_template(self, template_name***REMOVED***:
        ***REMOVED***
        Loads and returns a template for the given name.

        Raises TemplateDoesNotExist if no such template exists.
        ***REMOVED***
        raise NotImplementedError(
            "subclasses of BaseEngine must provide "
            "a get_template(***REMOVED*** method"***REMOVED***

    # Utility methods: they are provided to minimize code duplication and
    #                  security issues in third-party backends.

    @cached_property
    def template_dirs(self***REMOVED***:
        ***REMOVED***
        Returns a list of directories to search for templates.
        ***REMOVED***
        # Immutable return value because it's cached and shared by callers.
        template_dirs = tuple(self.dirs***REMOVED***
        if self.app_dirs:
            template_dirs += get_app_template_dirs(self.app_dirname***REMOVED***
        return template_dirs

    def iter_template_filenames(self, template_name***REMOVED***:
        ***REMOVED***
        Iterates over candidate files for template_name.

        Ignores files that don't lie inside configured template dirs to avoid
        directory traversal attacks.
        ***REMOVED***
        for template_dir in self.template_dirs:
            ***REMOVED***
                yield safe_join(template_dir, template_name***REMOVED***
            except SuspiciousFileOperation:
                # The joined path was located outside of this template_dir
                # (it might be inside another one, so this isn't fatal***REMOVED***.
                pass
