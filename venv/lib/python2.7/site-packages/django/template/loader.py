from django.utils import six
from django.utils.deprecation import (
    DeprecationInstanceCheck, RemovedInDjango20Warning,
***REMOVED***

from . import engines
from .base import Origin
from .exceptions import TemplateDoesNotExist


def get_template(template_name, using=None***REMOVED***:
    ***REMOVED***
    Loads and returns a template for the given name.

    Raises TemplateDoesNotExist if no such template exists.
    ***REMOVED***
    chain = [***REMOVED***
    engines = _engine_list(using***REMOVED***
    for engine in engines:
        ***REMOVED***
            return engine.get_template(template_name***REMOVED***
        except TemplateDoesNotExist as e:
            chain.append(e***REMOVED***

    raise TemplateDoesNotExist(template_name, chain=chain***REMOVED***


def select_template(template_name_list, using=None***REMOVED***:
    ***REMOVED***
    Loads and returns a template for one of the given names.

    Tries names in order and returns the first template found.

    Raises TemplateDoesNotExist if no such template exists.
    ***REMOVED***
    if isinstance(template_name_list, six.string_types***REMOVED***:
        raise TypeError(
            'select_template(***REMOVED*** takes an iterable of template names but got a '
            'string: %r. Use get_template(***REMOVED*** if you want to load a single '
            'template by name.' % template_name_list
        ***REMOVED***

    chain = [***REMOVED***
    engines = _engine_list(using***REMOVED***
    for template_name in template_name_list:
        for engine in engines:
            ***REMOVED***
                return engine.get_template(template_name***REMOVED***
            except TemplateDoesNotExist as e:
                chain.append(e***REMOVED***

    if template_name_list:
        raise TemplateDoesNotExist(', '.join(template_name_list***REMOVED***, chain=chain***REMOVED***
    else:
        raise TemplateDoesNotExist("No template names provided"***REMOVED***


def render_to_string(template_name, context=None, request=None, using=None***REMOVED***:
    ***REMOVED***
    Loads a template and renders it with a context. Returns a string.

    template_name may be a string or a list of strings.
    ***REMOVED***
    if isinstance(template_name, (list, tuple***REMOVED******REMOVED***:
        template = select_template(template_name, using=using***REMOVED***
    else:
        template = get_template(template_name, using=using***REMOVED***
    return template.render(context, request***REMOVED***


def _engine_list(using=None***REMOVED***:
    return engines.all(***REMOVED*** if using is None else [engines[using***REMOVED******REMOVED***


class LoaderOrigin(six.with_metaclass(DeprecationInstanceCheck, Origin***REMOVED******REMOVED***:
    alternative = 'django.template.Origin'
    deprecation_warning = RemovedInDjango20Warning
