import warnings

from django.template import Origin, Template, TemplateDoesNotExist
from django.utils.deprecation import RemovedInDjango20Warning
from django.utils.inspect import func_supports_parameter


class Loader(object***REMOVED***:

    def __init__(self, engine***REMOVED***:
        self.engine = engine

    def __call__(self, template_name, template_dirs=None***REMOVED***:
        # RemovedInDjango20Warning: Allow loaders to be called like functions.
        return self.load_template(template_name, template_dirs***REMOVED***

    def get_template(self, template_name, template_dirs=None, skip=None***REMOVED***:
        ***REMOVED***
        Calls self.get_template_sources(***REMOVED*** and returns a Template object for
        the first template matching template_name. If skip is provided,
        template origins in skip are ignored. This is used to avoid recursion
        during template extending.
        ***REMOVED***
        tried = [***REMOVED***

        args = [template_name***REMOVED***
        # RemovedInDjango20Warning: Add template_dirs for compatibility with
        # old loaders
        if func_supports_parameter(self.get_template_sources, 'template_dirs'***REMOVED***:
            args.append(template_dirs***REMOVED***

        for origin in self.get_template_sources(*args***REMOVED***:
            if skip is not None and origin in skip:
                tried.append((origin, 'Skipped'***REMOVED******REMOVED***
                continue

            ***REMOVED***
                contents = self.get_contents(origin***REMOVED***
            except TemplateDoesNotExist:
                tried.append((origin, 'Source does not exist'***REMOVED******REMOVED***
                continue
            else:
                return Template(
                    contents, origin, origin.template_name, self.engine,
                ***REMOVED***

        raise TemplateDoesNotExist(template_name, tried=tried***REMOVED***

    def load_template(self, template_name, template_dirs=None***REMOVED***:
        warnings.warn(
            'The load_template(***REMOVED*** method is deprecated. Use get_template(***REMOVED*** '
            'instead.', RemovedInDjango20Warning,
        ***REMOVED***
        source, display_name = self.load_template_source(
            template_name, template_dirs,
        ***REMOVED***
        origin = Origin(
            name=display_name,
            template_name=template_name,
            loader=self,
        ***REMOVED***
        ***REMOVED***
            template = Template(source, origin, template_name, self.engine***REMOVED***
        except TemplateDoesNotExist:
            # If compiling the template we found raises TemplateDoesNotExist,
            # back off to returning the source and display name for the
            # template we were asked to load. This allows for correct
            # identification of the actual template that does not exist.
            return source, display_name
        else:
            return template, None

    def get_template_sources(self, template_name***REMOVED***:
        ***REMOVED***
        An iterator that yields possible matching template paths for a
        template name.
        ***REMOVED***
        raise NotImplementedError(
            'subclasses of Loader must provide a get_template_sources(***REMOVED*** method'
        ***REMOVED***

    def load_template_source(self, template_name, template_dirs=None***REMOVED***:
        ***REMOVED***
        RemovedInDjango20Warning: Returns a tuple containing the source and
        origin for the given template name.
        ***REMOVED***
        raise NotImplementedError(
            'subclasses of Loader must provide a load_template_source(***REMOVED*** method'
        ***REMOVED***

    def reset(self***REMOVED***:
        ***REMOVED***
        Resets any state maintained by the loader instance (e.g. cached
        templates or cached loader modules***REMOVED***.
        ***REMOVED***
        pass

    @property
    def supports_recursion(self***REMOVED***:
        ***REMOVED***
        RemovedInDjango20Warning: This is an internal property used by the
        ExtendsNode during the deprecation of non-recursive loaders.
        ***REMOVED***
        return hasattr(self, 'get_contents'***REMOVED***
