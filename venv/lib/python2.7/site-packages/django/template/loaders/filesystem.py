***REMOVED***
Wrapper for loading templates from the filesystem.
***REMOVED***

import errno
import io
import warnings

from django.core.exceptions import SuspiciousFileOperation
from django.template import Origin, TemplateDoesNotExist
from django.utils._os import safe_join
from django.utils.deprecation import RemovedInDjango20Warning

from .base import Loader as BaseLoader


class Loader(BaseLoader***REMOVED***:

    def get_dirs(self***REMOVED***:
        return self.engine.dirs

    def get_contents(self, origin***REMOVED***:
        ***REMOVED***
            with io.open(origin.name, encoding=self.engine.file_charset***REMOVED*** as fp:
                return fp.read(***REMOVED***
        except IOError as e:
            if e.errno == errno.ENOENT:
                raise TemplateDoesNotExist(origin***REMOVED***
            raise

    def get_template_sources(self, template_name, template_dirs=None***REMOVED***:
        ***REMOVED***
        Return an Origin object pointing to an absolute path in each directory
        in template_dirs. For security reasons, if a path doesn't lie inside
        one of the template_dirs it is excluded from the result set.
        ***REMOVED***
        if not template_dirs:
            template_dirs = self.get_dirs(***REMOVED***
        for template_dir in template_dirs:
            ***REMOVED***
                name = safe_join(template_dir, template_name***REMOVED***
            except SuspiciousFileOperation:
                # The joined path was located outside of this template_dir
                # (it might be inside another one, so this isn't fatal***REMOVED***.
                continue

            yield Origin(
                name=name,
                template_name=template_name,
                loader=self,
            ***REMOVED***

    def load_template_source(self, template_name, template_dirs=None***REMOVED***:
        warnings.warn(
            'The load_template_sources(***REMOVED*** method is deprecated. Use '
            'get_template(***REMOVED*** or get_contents(***REMOVED*** instead.',
            RemovedInDjango20Warning,
        ***REMOVED***
        for origin in self.get_template_sources(template_name, template_dirs***REMOVED***:
            ***REMOVED***
                return self.get_contents(origin***REMOVED***, origin.name
            except TemplateDoesNotExist:
                pass
        raise TemplateDoesNotExist(template_name***REMOVED***
