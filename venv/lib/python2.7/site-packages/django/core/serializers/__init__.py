***REMOVED***
Interfaces for serializing Django objects.

Usage::

    from django.core import serializers
    json = serializers.serialize("json", some_queryset***REMOVED***
    objects = list(serializers.deserialize("json", json***REMOVED******REMOVED***

To add your own serializers, use the SERIALIZATION_MODULES setting::

    SERIALIZATION_MODULES = {
        "csv": "path.to.csv.serializer",
        "txt": "path.to.txt.serializer",
***REMOVED***

***REMOVED***

import importlib

from django.apps import apps
from django.conf import settings
from django.core.serializers.base import SerializerDoesNotExist
from django.utils import six

# Built-in serializers
BUILTIN_SERIALIZERS = {
    "xml": "django.core.serializers.xml_serializer",
    "python": "django.core.serializers.python",
    "json": "django.core.serializers.json",
    "yaml": "django.core.serializers.pyyaml",
***REMOVED***

_serializers = {***REMOVED***


class BadSerializer(object***REMOVED***:
    ***REMOVED***
    Stub serializer to hold exception raised during registration

    This allows the serializer registration to cache serializers and if there
    is an error raised in the process of creating a serializer it will be
    raised and passed along to the caller when the serializer is used.
    ***REMOVED***
    internal_use_only = False

    def __init__(self, exception***REMOVED***:
        self.exception = exception

    def __call__(self, *args, **kwargs***REMOVED***:
        raise self.exception


def register_serializer(format, serializer_module, serializers=None***REMOVED***:
    ***REMOVED***Register a new serializer.

    ``serializer_module`` should be the fully qualified module name
    for the serializer.

    If ``serializers`` is provided, the registration will be added
    to the provided dictionary.

    If ``serializers`` is not provided, the registration will be made
    directly into the global register of serializers. Adding serializers
    directly is not a thread-safe operation.
    ***REMOVED***
    if serializers is None and not _serializers:
        _load_serializers(***REMOVED***

    ***REMOVED***
        module = importlib.import_module(serializer_module***REMOVED***
    except ImportError as exc:
        bad_serializer = BadSerializer(exc***REMOVED***

        module = type('BadSerializerModule', (object,***REMOVED***, {
            'Deserializer': bad_serializer,
            'Serializer': bad_serializer,
    ***REMOVED******REMOVED***

    if serializers is None:
        _serializers[format***REMOVED*** = module
    else:
        serializers[format***REMOVED*** = module


def unregister_serializer(format***REMOVED***:
    "Unregister a given serializer. This is not a thread-safe operation."
    if not _serializers:
        _load_serializers(***REMOVED***
    if format not in _serializers:
        raise SerializerDoesNotExist(format***REMOVED***
    del _serializers[format***REMOVED***


def get_serializer(format***REMOVED***:
    if not _serializers:
        _load_serializers(***REMOVED***
    if format not in _serializers:
        raise SerializerDoesNotExist(format***REMOVED***
    return _serializers[format***REMOVED***.Serializer


def get_serializer_formats(***REMOVED***:
    if not _serializers:
        _load_serializers(***REMOVED***
    return list(_serializers***REMOVED***


def get_public_serializer_formats(***REMOVED***:
    if not _serializers:
        _load_serializers(***REMOVED***
    return [k for k, v in six.iteritems(_serializers***REMOVED*** if not v.Serializer.internal_use_only***REMOVED***


def get_deserializer(format***REMOVED***:
    if not _serializers:
        _load_serializers(***REMOVED***
    if format not in _serializers:
        raise SerializerDoesNotExist(format***REMOVED***
    return _serializers[format***REMOVED***.Deserializer


def serialize(format, queryset, **options***REMOVED***:
    ***REMOVED***
    Serialize a queryset (or any iterator that returns database objects***REMOVED*** using
    a certain serializer.
    ***REMOVED***
    s = get_serializer(format***REMOVED***(***REMOVED***
    s.serialize(queryset, **options***REMOVED***
    return s.getvalue(***REMOVED***


def deserialize(format, stream_or_string, **options***REMOVED***:
    ***REMOVED***
    Deserialize a stream or a string. Returns an iterator that yields ``(obj,
    m2m_relation_dict***REMOVED***``, where ``obj`` is an instantiated -- but *unsaved* --
    object, and ``m2m_relation_dict`` is a dictionary of ``{m2m_field_name :
    list_of_related_objects***REMOVED***``.
    ***REMOVED***
    d = get_deserializer(format***REMOVED***
    return d(stream_or_string, **options***REMOVED***


def _load_serializers(***REMOVED***:
    ***REMOVED***
    Register built-in and settings-defined serializers. This is done lazily so
    that user code has a chance to (e.g.***REMOVED*** set up custom settings without
    needing to be careful of import order.
    ***REMOVED***
    global _serializers
    serializers = {***REMOVED***
    for format in BUILTIN_SERIALIZERS:
        register_serializer(format, BUILTIN_SERIALIZERS[format***REMOVED***, serializers***REMOVED***
    if hasattr(settings, "SERIALIZATION_MODULES"***REMOVED***:
        for format in settings.SERIALIZATION_MODULES:
            register_serializer(format, settings.SERIALIZATION_MODULES[format***REMOVED***, serializers***REMOVED***
    _serializers = serializers


def sort_dependencies(app_list***REMOVED***:
    ***REMOVED***Sort a list of (app_config, models***REMOVED*** pairs into a single list of models.

    The single list of models is sorted so that any model with a natural key
    is serialized before a normal model, and any model with a natural key
    dependency has it's dependencies serialized first.
    ***REMOVED***
    # Process the list of models, and get the list of dependencies
    model_dependencies = [***REMOVED***
    models = set(***REMOVED***
    for app_config, model_list in app_list:
        if model_list is None:
            model_list = app_config.get_models(***REMOVED***

        for model in model_list:
            models.add(model***REMOVED***
            # Add any explicitly defined dependencies
            if hasattr(model, 'natural_key'***REMOVED***:
                deps = getattr(model.natural_key, 'dependencies', [***REMOVED******REMOVED***
                if deps:
                    deps = [apps.get_model(dep***REMOVED*** for dep in deps***REMOVED***
            else:
                deps = [***REMOVED***

            # Now add a dependency for any FK relation with a model that
            # defines a natural key
            for field in model._meta.fields:
                if field.remote_field:
                    rel_model = field.remote_field.model
                    if hasattr(rel_model, 'natural_key'***REMOVED*** and rel_model != model:
                        deps.append(rel_model***REMOVED***
            # Also add a dependency for any simple M2M relation with a model
            # that defines a natural key.  M2M relations with explicit through
            # models don't count as dependencies.
            for field in model._meta.many_to_many:
                if field.remote_field.through._meta.auto_created:
                    rel_model = field.remote_field.model
                    if hasattr(rel_model, 'natural_key'***REMOVED*** and rel_model != model:
                        deps.append(rel_model***REMOVED***
            model_dependencies.append((model, deps***REMOVED******REMOVED***

    model_dependencies.reverse(***REMOVED***
    # Now sort the models to ensure that dependencies are met. This
    # is done by repeatedly iterating over the input list of models.
    # If all the dependencies of a given model are in the final list,
    # that model is promoted to the end of the final list. This process
    # continues until the input list is empty, or we do a full iteration
    # over the input models without promoting a model to the final list.
    # If we do a full iteration without a promotion, that means there are
    # circular dependencies in the list.
    model_list = [***REMOVED***
    while model_dependencies:
        skipped = [***REMOVED***
        changed = False
        while model_dependencies:
            model, deps = model_dependencies.pop(***REMOVED***

            # If all of the models in the dependency list are either already
            # on the final model list, or not on the original serialization list,
            # then we've found another model with all it's dependencies satisfied.
            found = True
            for candidate in ((d not in models or d in model_list***REMOVED*** for d in deps***REMOVED***:
                if not candidate:
                    found = False
            if found:
                model_list.append(model***REMOVED***
                changed = True
            else:
                skipped.append((model, deps***REMOVED******REMOVED***
        if not changed:
            raise RuntimeError(
                "Can't resolve dependencies for %s in serialized app list." %
                ', '.join(
                    '%s.%s' % (model._meta.app_label, model._meta.object_name***REMOVED***
                    for model, deps in sorted(skipped, key=lambda obj: obj[0***REMOVED***.__name__***REMOVED***
                ***REMOVED***
            ***REMOVED***
        model_dependencies = skipped

    return model_list
