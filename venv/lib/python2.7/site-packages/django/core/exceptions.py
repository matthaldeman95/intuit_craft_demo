***REMOVED***
Global Django exception and warning classes.
***REMOVED***
from django.utils import six
from django.utils.encoding import force_text


class FieldDoesNotExist(Exception***REMOVED***:
    ***REMOVED***The requested model field does not exist***REMOVED***
    pass


class DjangoRuntimeWarning(RuntimeWarning***REMOVED***:
    pass


class AppRegistryNotReady(Exception***REMOVED***:
    ***REMOVED***The django.apps registry is not populated yet***REMOVED***
    pass


class ObjectDoesNotExist(Exception***REMOVED***:
    ***REMOVED***The requested object does not exist***REMOVED***
    silent_variable_failure = True


class MultipleObjectsReturned(Exception***REMOVED***:
    ***REMOVED***The query returned multiple objects when only one was expected.***REMOVED***
    pass


class SuspiciousOperation(Exception***REMOVED***:
    ***REMOVED***The user did something suspicious***REMOVED***


class SuspiciousMultipartForm(SuspiciousOperation***REMOVED***:
    ***REMOVED***Suspect MIME request in multipart form data***REMOVED***
    pass


class SuspiciousFileOperation(SuspiciousOperation***REMOVED***:
    ***REMOVED***A Suspicious filesystem operation was attempted***REMOVED***
    pass


class DisallowedHost(SuspiciousOperation***REMOVED***:
    ***REMOVED***HTTP_HOST header contains invalid value***REMOVED***
    pass


class DisallowedRedirect(SuspiciousOperation***REMOVED***:
    ***REMOVED***Redirect to scheme not in allowed list***REMOVED***
    pass


class TooManyFieldsSent(SuspiciousOperation***REMOVED***:
    ***REMOVED***
    The number of fields in a POST request exceeded
    settings.DATA_UPLOAD_MAX_NUMBER_FIELDS.
    ***REMOVED***
    pass


class RequestDataTooBig(SuspiciousOperation***REMOVED***:
    ***REMOVED***
    The size of the request (excluding any file uploads***REMOVED*** exceeded
    settings.DATA_UPLOAD_MAX_MEMORY_SIZE.
    ***REMOVED***
    pass


class PermissionDenied(Exception***REMOVED***:
    ***REMOVED***The user did not have permission to do that***REMOVED***
    pass


class ViewDoesNotExist(Exception***REMOVED***:
    ***REMOVED***The requested view does not exist***REMOVED***
    pass


class MiddlewareNotUsed(Exception***REMOVED***:
    ***REMOVED***This middleware is not used in this server configuration***REMOVED***
    pass


class ImproperlyConfigured(Exception***REMOVED***:
    ***REMOVED***Django is somehow improperly configured***REMOVED***
    pass


class FieldError(Exception***REMOVED***:
    ***REMOVED***Some kind of problem with a model field.***REMOVED***
    pass


NON_FIELD_ERRORS = '__all__'


class ValidationError(Exception***REMOVED***:
    ***REMOVED***An error while validating data.***REMOVED***
    def __init__(self, message, code=None, params=None***REMOVED***:
        ***REMOVED***
        The `message` argument can be a single error, a list of errors, or a
        dictionary that maps field names to lists of errors. What we define as
        an "error" can be either a simple string or an instance of
        ValidationError with its message attribute set, and what we define as
        list or dictionary can be an actual `list` or `dict` or an instance
        of ValidationError with its `error_list` or `error_dict` attribute set.
        ***REMOVED***

        # PY2 can't pickle naive exception: http://bugs.python.org/issue1692335.
        super(ValidationError, self***REMOVED***.__init__(message, code, params***REMOVED***

        if isinstance(message, ValidationError***REMOVED***:
            if hasattr(message, 'error_dict'***REMOVED***:
                message = message.error_dict
            # PY2 has a `message` property which is always there so we can't
            # duck-type on it. It was introduced in Python 2.5 and already
            # deprecated in Python 2.6.
            elif not hasattr(message, 'message' if six.PY3 else 'code'***REMOVED***:
                message = message.error_list
            else:
                message, code, params = message.message, message.code, message.params

        if isinstance(message, dict***REMOVED***:
            self.error_dict = {***REMOVED***
            for field, messages in message.items(***REMOVED***:
                if not isinstance(messages, ValidationError***REMOVED***:
                    messages = ValidationError(messages***REMOVED***
                self.error_dict[field***REMOVED*** = messages.error_list

        elif isinstance(message, list***REMOVED***:
            self.error_list = [***REMOVED***
            for message in message:
                # Normalize plain strings to instances of ValidationError.
                if not isinstance(message, ValidationError***REMOVED***:
                    message = ValidationError(message***REMOVED***
                if hasattr(message, 'error_dict'***REMOVED***:
                    self.error_list.extend(sum(message.error_dict.values(***REMOVED***, [***REMOVED******REMOVED******REMOVED***
                else:
                    self.error_list.extend(message.error_list***REMOVED***

        else:
            self.message = message
            self.code = code
            self.params = params
            self.error_list = [self***REMOVED***

    @property
    def message_dict(self***REMOVED***:
        # Trigger an AttributeError if this ValidationError
        # doesn't have an error_dict.
        getattr(self, 'error_dict'***REMOVED***

        return dict(self***REMOVED***

    @property
    def messages(self***REMOVED***:
        if hasattr(self, 'error_dict'***REMOVED***:
            return sum(dict(self***REMOVED***.values(***REMOVED***, [***REMOVED******REMOVED***
        return list(self***REMOVED***

    def update_error_dict(self, error_dict***REMOVED***:
        if hasattr(self, 'error_dict'***REMOVED***:
            for field, error_list in self.error_dict.items(***REMOVED***:
                error_dict.setdefault(field, [***REMOVED******REMOVED***.extend(error_list***REMOVED***
        else:
            error_dict.setdefault(NON_FIELD_ERRORS, [***REMOVED******REMOVED***.extend(self.error_list***REMOVED***
        return error_dict

    def __iter__(self***REMOVED***:
        if hasattr(self, 'error_dict'***REMOVED***:
            for field, errors in self.error_dict.items(***REMOVED***:
                yield field, list(ValidationError(errors***REMOVED******REMOVED***
        else:
            for error in self.error_list:
                message = error.message
                if error.params:
                    message %= error.params
                yield force_text(message***REMOVED***

    def __str__(self***REMOVED***:
        if hasattr(self, 'error_dict'***REMOVED***:
            return repr(dict(self***REMOVED******REMOVED***
        return repr(list(self***REMOVED******REMOVED***

    def __repr__(self***REMOVED***:
        return 'ValidationError(%s***REMOVED***' % self
