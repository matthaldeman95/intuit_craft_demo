from django.utils import six


class FileProxyMixin(object***REMOVED***:
    ***REMOVED***
    A mixin class used to forward file methods to an underlaying file
    object.  The internal file object has to be called "file"::

        class FileProxy(FileProxyMixin***REMOVED***:
            def __init__(self, file***REMOVED***:
                self.file = file
    ***REMOVED***

    encoding = property(lambda self: self.file.encoding***REMOVED***
    fileno = property(lambda self: self.file.fileno***REMOVED***
    flush = property(lambda self: self.file.flush***REMOVED***
    isatty = property(lambda self: self.file.isatty***REMOVED***
    newlines = property(lambda self: self.file.newlines***REMOVED***
    read = property(lambda self: self.file.read***REMOVED***
    readinto = property(lambda self: self.file.readinto***REMOVED***
    readline = property(lambda self: self.file.readline***REMOVED***
    readlines = property(lambda self: self.file.readlines***REMOVED***
    seek = property(lambda self: self.file.seek***REMOVED***
    softspace = property(lambda self: self.file.softspace***REMOVED***
    tell = property(lambda self: self.file.tell***REMOVED***
    truncate = property(lambda self: self.file.truncate***REMOVED***
    write = property(lambda self: self.file.write***REMOVED***
    writelines = property(lambda self: self.file.writelines***REMOVED***
    xreadlines = property(lambda self: self.file.xreadlines***REMOVED***
    if six.PY3:
        seekable = property(lambda self: self.file.seekable***REMOVED***

    def __iter__(self***REMOVED***:
        return iter(self.file***REMOVED***
