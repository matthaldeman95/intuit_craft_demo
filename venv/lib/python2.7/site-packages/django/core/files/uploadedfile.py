***REMOVED***
Classes representing uploaded files.
***REMOVED***

import errno
***REMOVED***
from io import BytesIO

from django.conf import settings
from django.core.files import temp as tempfile
from django.core.files.base import File
from django.utils.encoding import force_str

__all__ = ('UploadedFile', 'TemporaryUploadedFile', 'InMemoryUploadedFile',
           'SimpleUploadedFile'***REMOVED***


class UploadedFile(File***REMOVED***:
    ***REMOVED***
    A abstract uploaded file (``TemporaryUploadedFile`` and
    ``InMemoryUploadedFile`` are the built-in concrete subclasses***REMOVED***.

    An ``UploadedFile`` object behaves somewhat like a file object and
    represents some file data that the user submitted with a form.
    ***REMOVED***
    DEFAULT_CHUNK_SIZE = 64 * 2 ** 10

    def __init__(self, file=None, name=None, content_type=None, size=None, charset=None, content_type_extra=None***REMOVED***:
        super(UploadedFile, self***REMOVED***.__init__(file, name***REMOVED***
        self.size = size
        self.content_type = content_type
        self.charset = charset
        self.content_type_extra = content_type_extra

    def __repr__(self***REMOVED***:
        return force_str("<%s: %s (%s***REMOVED***>" % (
            self.__class__.__name__, self.name, self.content_type***REMOVED******REMOVED***

    def _get_name(self***REMOVED***:
        return self._name

    def _set_name(self, name***REMOVED***:
        # Sanitize the file name so that it can't be dangerous.
        if name is not None:
            # Just use the basename of the file -- anything else is dangerous.
            name = os.path.basename(name***REMOVED***

            # File names longer than 255 characters can cause problems on older OSes.
            if len(name***REMOVED*** > 255:
                name, ext = os.path.splitext(name***REMOVED***
                ext = ext[:255***REMOVED***
                name = name[:255 - len(ext***REMOVED******REMOVED*** + ext

        self._name = name

    name = property(_get_name, _set_name***REMOVED***


class TemporaryUploadedFile(UploadedFile***REMOVED***:
    ***REMOVED***
    A file uploaded to a temporary location (i.e. stream-to-disk***REMOVED***.
    ***REMOVED***
    def __init__(self, name, content_type, size, charset, content_type_extra=None***REMOVED***:
        if settings.FILE_UPLOAD_TEMP_DIR:
            file = tempfile.NamedTemporaryFile(suffix='.upload', dir=settings.FILE_UPLOAD_TEMP_DIR***REMOVED***
        else:
            file = tempfile.NamedTemporaryFile(suffix='.upload'***REMOVED***
        super(TemporaryUploadedFile, self***REMOVED***.__init__(file, name, content_type, size, charset, content_type_extra***REMOVED***

    def temporary_file_path(self***REMOVED***:
        ***REMOVED***
        Returns the full path of this file.
        ***REMOVED***
        return self.file.name

    def close(self***REMOVED***:
        ***REMOVED***
            return self.file.close(***REMOVED***
        except OSError as e:
            if e.errno != errno.ENOENT:
                # Means the file was moved or deleted before the tempfile
                # could unlink it.  Still sets self.file.close_called and
                # calls self.file.file.close(***REMOVED*** before the exception
                raise


class InMemoryUploadedFile(UploadedFile***REMOVED***:
    ***REMOVED***
    A file uploaded into memory (i.e. stream-to-memory***REMOVED***.
    ***REMOVED***
    def __init__(self, file, field_name, name, content_type, size, charset, content_type_extra=None***REMOVED***:
        super(InMemoryUploadedFile, self***REMOVED***.__init__(file, name, content_type, size, charset, content_type_extra***REMOVED***
        self.field_name = field_name

    def open(self, mode=None***REMOVED***:
        self.file.seek(0***REMOVED***

    def chunks(self, chunk_size=None***REMOVED***:
        self.file.seek(0***REMOVED***
        yield self.read(***REMOVED***

    def multiple_chunks(self, chunk_size=None***REMOVED***:
        # Since it's in memory, we'll never have multiple chunks.
        return False


class SimpleUploadedFile(InMemoryUploadedFile***REMOVED***:
    ***REMOVED***
    A simple representation of a file, which just has content, size, and a name.
    ***REMOVED***
    def __init__(self, name, content, content_type='text/plain'***REMOVED***:
        content = content or b''
        super(SimpleUploadedFile, self***REMOVED***.__init__(BytesIO(content***REMOVED***, None, name,
                                                 content_type, len(content***REMOVED***, None, None***REMOVED***

    @classmethod
    def from_dict(cls, file_dict***REMOVED***:
        ***REMOVED***
        Creates a SimpleUploadedFile object from
        a dictionary object with the following keys:
           - filename
           - content-type
           - content
        ***REMOVED***
        return cls(file_dict['filename'***REMOVED***,
                   file_dict['content'***REMOVED***,
                   file_dict.get('content-type', 'text/plain'***REMOVED******REMOVED***
