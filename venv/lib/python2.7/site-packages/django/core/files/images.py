***REMOVED***
Utility functions for handling images.

Requires Pillow as you might imagine.
***REMOVED***
import struct
import zlib

from django.core.files import File


class ImageFile(File***REMOVED***:
    ***REMOVED***
    A mixin for use alongside django.core.files.base.File, which provides
    additional features for dealing with images.
    ***REMOVED***
    def _get_width(self***REMOVED***:
        return self._get_image_dimensions(***REMOVED***[0***REMOVED***
    width = property(_get_width***REMOVED***

    def _get_height(self***REMOVED***:
        return self._get_image_dimensions(***REMOVED***[1***REMOVED***
    height = property(_get_height***REMOVED***

    def _get_image_dimensions(self***REMOVED***:
        if not hasattr(self, '_dimensions_cache'***REMOVED***:
            close = self.closed
            self.open(***REMOVED***
            self._dimensions_cache = get_image_dimensions(self, close=close***REMOVED***
        return self._dimensions_cache


def get_image_dimensions(file_or_path, close=False***REMOVED***:
    ***REMOVED***
    Returns the (width, height***REMOVED*** of an image, given an open file or a path.  Set
    'close' to True to close the file at the end if it is initially in an open
    state.
    ***REMOVED***
    from PIL import ImageFile as PillowImageFile

    p = PillowImageFile.Parser(***REMOVED***
    if hasattr(file_or_path, 'read'***REMOVED***:
        file = file_or_path
        file_pos = file.tell(***REMOVED***
        file.seek(0***REMOVED***
    else:
        file = open(file_or_path, 'rb'***REMOVED***
        close = True
    ***REMOVED***
        # Most of the time Pillow only needs a small chunk to parse the image
        # and get the dimensions, but with some TIFF files Pillow needs to
        # parse the whole file.
        chunk_size = 1024
        while 1:
            data = file.read(chunk_size***REMOVED***
            if not data:
                break
            ***REMOVED***
                p.feed(data***REMOVED***
            except zlib.error as e:
                # ignore zlib complaining on truncated stream, just feed more
                # data to parser (ticket #19457***REMOVED***.
                if e.args[0***REMOVED***.startswith("Error -5"***REMOVED***:
                    pass
                else:
                    raise
            except struct.error:
                # Ignore PIL failing on a too short buffer when reads return
                # less bytes than expected. Skip and feed more data to the
                # parser (ticket #24544***REMOVED***.
                pass
            if p.image:
                return p.image.size
            chunk_size *= 2
        return (None, None***REMOVED***
    finally:
        if close:
            file.close(***REMOVED***
        else:
            file.seek(file_pos***REMOVED***
