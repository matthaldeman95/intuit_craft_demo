***REMOVED***
Portable file locking utilities.

Based partially on an example by Jonathan Feignberg in the Python
Cookbook [1***REMOVED*** (licensed under the Python Software License***REMOVED*** and a ctypes port by
Anatoly Techtonik for Roundup [2***REMOVED*** (license [3***REMOVED******REMOVED***.

[1***REMOVED*** http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/65203
[2***REMOVED*** http://sourceforge.net/p/roundup/code/ci/default/tree/roundup/backends/portalocker.py
[3***REMOVED*** http://sourceforge.net/p/roundup/code/ci/default/tree/COPYING.txt

Example Usage::

    >>> from django.core.files import locks
    >>> with open('./file', 'wb'***REMOVED*** as f:
    ...     locks.lock(f, locks.LOCK_EX***REMOVED***
    ...     f.write('Django'***REMOVED***
***REMOVED***
***REMOVED***

__all__ = ('LOCK_EX', 'LOCK_SH', 'LOCK_NB', 'lock', 'unlock'***REMOVED***


def _fd(f***REMOVED***:
    ***REMOVED***Get a filedescriptor from something which could be a file or an fd.***REMOVED***
    return f.fileno(***REMOVED*** if hasattr(f, 'fileno'***REMOVED*** else f


if os.name == 'nt':
    import msvcrt
    from ctypes import (sizeof, c_ulong, c_void_p, c_int64,
                        Structure, Union, POINTER, windll, byref***REMOVED***
    from ctypes.wintypes import BOOL, DWORD, HANDLE

    LOCK_SH = 0  # the default
    LOCK_NB = 0x1  # LOCKFILE_FAIL_IMMEDIATELY
    LOCK_EX = 0x2  # LOCKFILE_EXCLUSIVE_LOCK

    # --- Adapted from the pyserial project ---
    # detect size of ULONG_PTR
    if sizeof(c_ulong***REMOVED*** != sizeof(c_void_p***REMOVED***:
        ULONG_PTR = c_int64
    else:
        ULONG_PTR = c_ulong
    PVOID = c_void_p

    # --- Union inside Structure by stackoverflow:3480240 ---
    class _OFFSET(Structure***REMOVED***:
        _fields_ = [
            ('Offset', DWORD***REMOVED***,
            ('OffsetHigh', DWORD***REMOVED******REMOVED***

    class _OFFSET_UNION(Union***REMOVED***:
        _anonymous_ = ['_offset'***REMOVED***
        _fields_ = [
            ('_offset', _OFFSET***REMOVED***,
            ('Pointer', PVOID***REMOVED******REMOVED***

    class OVERLAPPED(Structure***REMOVED***:
        _anonymous_ = ['_offset_union'***REMOVED***
        _fields_ = [
            ('Internal', ULONG_PTR***REMOVED***,
            ('InternalHigh', ULONG_PTR***REMOVED***,
            ('_offset_union', _OFFSET_UNION***REMOVED***,
            ('hEvent', HANDLE***REMOVED******REMOVED***

    LPOVERLAPPED = POINTER(OVERLAPPED***REMOVED***

    # --- Define function prototypes for extra safety ---
    LockFileEx = windll.kernel32.LockFileEx
    LockFileEx.restype = BOOL
    LockFileEx.argtypes = [HANDLE, DWORD, DWORD, DWORD, DWORD, LPOVERLAPPED***REMOVED***
    UnlockFileEx = windll.kernel32.UnlockFileEx
    UnlockFileEx.restype = BOOL
    UnlockFileEx.argtypes = [HANDLE, DWORD, DWORD, DWORD, LPOVERLAPPED***REMOVED***

    def lock(f, flags***REMOVED***:
        hfile = msvcrt.get_osfhandle(_fd(f***REMOVED******REMOVED***
        overlapped = OVERLAPPED(***REMOVED***
        ret = LockFileEx(hfile, flags, 0, 0, 0xFFFF0000, byref(overlapped***REMOVED******REMOVED***
        return bool(ret***REMOVED***

    def unlock(f***REMOVED***:
        hfile = msvcrt.get_osfhandle(_fd(f***REMOVED******REMOVED***
        overlapped = OVERLAPPED(***REMOVED***
        ret = UnlockFileEx(hfile, 0, 0, 0xFFFF0000, byref(overlapped***REMOVED******REMOVED***
        return bool(ret***REMOVED***
else:
    ***REMOVED***
        import fcntl
        LOCK_SH = fcntl.LOCK_SH  # shared lock
        LOCK_NB = fcntl.LOCK_NB  # non-blocking
        LOCK_EX = fcntl.LOCK_EX
    except (ImportError, AttributeError***REMOVED***:
        # File locking is not supported.
        LOCK_EX = LOCK_SH = LOCK_NB = 0

        # Dummy functions that don't do anything.
        def lock(f, flags***REMOVED***:
            # File is not locked
            return False

        def unlock(f***REMOVED***:
            # File is unlocked
            return True
    else:
        def lock(f, flags***REMOVED***:
            ret = fcntl.flock(_fd(f***REMOVED***, flags***REMOVED***
            return (ret == 0***REMOVED***

        def unlock(f***REMOVED***:
            ret = fcntl.flock(_fd(f***REMOVED***, fcntl.LOCK_UN***REMOVED***
            return (ret == 0***REMOVED***
