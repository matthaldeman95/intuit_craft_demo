from django.conf import settings

from .. import Tags, Warning, register
from ..utils import patch_middleware_message

SECRET_KEY_MIN_LENGTH = 50
SECRET_KEY_MIN_UNIQUE_CHARACTERS = 5

W001 = Warning(
    "You do not have 'django.middleware.security.SecurityMiddleware' "
    "in your MIDDLEWARE so the SECURE_HSTS_SECONDS, "
    "SECURE_CONTENT_TYPE_NOSNIFF, "
    "SECURE_BROWSER_XSS_FILTER, and SECURE_SSL_REDIRECT settings "
    "will have no effect.",
    id='security.W001',
***REMOVED***

W002 = Warning(
    "You do not have "
    "'django.middleware.clickjacking.XFrameOptionsMiddleware' in your "
    "MIDDLEWARE, so your pages will not be served with an "
    "'x-frame-options' header. Unless there is a good reason for your "
    "site to be served in a frame, you should consider enabling this "
    "header to help prevent clickjacking attacks.",
    id='security.W002',
***REMOVED***

W004 = Warning(
    "You have not set a value for the SECURE_HSTS_SECONDS setting. "
    "If your entire site is served only over SSL, you may want to consider "
    "setting a value and enabling HTTP Strict Transport Security. "
    "Be sure to read the documentation first; enabling HSTS carelessly "
    "can cause serious, irreversible problems.",
    id='security.W004',
***REMOVED***

W005 = Warning(
    "You have not set the SECURE_HSTS_INCLUDE_SUBDOMAINS setting to True. "
    "Without this, your site is potentially vulnerable to attack "
    "via an insecure connection to a subdomain. Only set this to True if "
    "you are certain that all subdomains of your domain should be served "
    "exclusively via SSL.",
    id='security.W005',
***REMOVED***

W006 = Warning(
    "Your SECURE_CONTENT_TYPE_NOSNIFF setting is not set to True, "
    "so your pages will not be served with an "
    "'x-content-type-options: nosniff' header. "
    "You should consider enabling this header to prevent the "
    "browser from identifying content types incorrectly.",
    id='security.W006',
***REMOVED***

W007 = Warning(
    "Your SECURE_BROWSER_XSS_FILTER setting is not set to True, "
    "so your pages will not be served with an "
    "'x-xss-protection: 1; mode=block' header. "
    "You should consider enabling this header to activate the "
    "browser's XSS filtering and help prevent XSS attacks.",
    id='security.W007',
***REMOVED***

W008 = Warning(
    "Your SECURE_SSL_REDIRECT setting is not set to True. "
    "Unless your site should be available over both SSL and non-SSL "
    "connections, you may want to either set this setting True "
    "or configure a load balancer or reverse-proxy server "
    "to redirect all connections to HTTPS.",
    id='security.W008',
***REMOVED***

W009 = Warning(
    "Your SECRET_KEY has less than %(min_length***REMOVED***s characters or less than "
    "%(min_unique_chars***REMOVED***s unique characters. Please generate a long and random "
    "SECRET_KEY, otherwise many of Django's security-critical features will be "
    "vulnerable to attack." % {
        'min_length': SECRET_KEY_MIN_LENGTH,
        'min_unique_chars': SECRET_KEY_MIN_UNIQUE_CHARACTERS,
***REMOVED***
    id='security.W009',
***REMOVED***

W018 = Warning(
    "You should not have DEBUG set to True in deployment.",
    id='security.W018',
***REMOVED***

W019 = Warning(
    "You have "
    "'django.middleware.clickjacking.XFrameOptionsMiddleware' in your "
    "MIDDLEWARE, but X_FRAME_OPTIONS is not set to 'DENY'. "
    "The default is 'SAMEORIGIN', but unless there is a good reason for "
    "your site to serve other parts of itself in a frame, you should "
    "change it to 'DENY'.",
    id='security.W019',
***REMOVED***

W020 = Warning(
    "ALLOWED_HOSTS must not be empty in deployment.",
    id='security.W020',
***REMOVED***


def _security_middleware(***REMOVED***:
    return ("django.middleware.security.SecurityMiddleware" in settings.MIDDLEWARE_CLASSES or
            settings.MIDDLEWARE and "django.middleware.security.SecurityMiddleware" in settings.MIDDLEWARE***REMOVED***


def _xframe_middleware(***REMOVED***:
    return ("django.middleware.clickjacking.XFrameOptionsMiddleware" in settings.MIDDLEWARE_CLASSES or
            settings.MIDDLEWARE and "django.middleware.clickjacking.XFrameOptionsMiddleware" in settings.MIDDLEWARE***REMOVED***


@register(Tags.security, deploy=True***REMOVED***
def check_security_middleware(app_configs, **kwargs***REMOVED***:
    passed_check = _security_middleware(***REMOVED***
    return [***REMOVED*** if passed_check else [patch_middleware_message(W001***REMOVED******REMOVED***


@register(Tags.security, deploy=True***REMOVED***
def check_xframe_options_middleware(app_configs, **kwargs***REMOVED***:
    passed_check = _xframe_middleware(***REMOVED***
    return [***REMOVED*** if passed_check else [patch_middleware_message(W002***REMOVED******REMOVED***


@register(Tags.security, deploy=True***REMOVED***
def check_sts(app_configs, **kwargs***REMOVED***:
    passed_check = not _security_middleware(***REMOVED*** or settings.SECURE_HSTS_SECONDS
    return [***REMOVED*** if passed_check else [W004***REMOVED***


@register(Tags.security, deploy=True***REMOVED***
def check_sts_include_subdomains(app_configs, **kwargs***REMOVED***:
    passed_check = (
        not _security_middleware(***REMOVED*** or
        not settings.SECURE_HSTS_SECONDS or
        settings.SECURE_HSTS_INCLUDE_SUBDOMAINS is True
    ***REMOVED***
    return [***REMOVED*** if passed_check else [W005***REMOVED***


@register(Tags.security, deploy=True***REMOVED***
def check_content_type_nosniff(app_configs, **kwargs***REMOVED***:
    passed_check = (
        not _security_middleware(***REMOVED*** or
        settings.SECURE_CONTENT_TYPE_NOSNIFF is True
    ***REMOVED***
    return [***REMOVED*** if passed_check else [W006***REMOVED***


@register(Tags.security, deploy=True***REMOVED***
def check_xss_filter(app_configs, **kwargs***REMOVED***:
    passed_check = (
        not _security_middleware(***REMOVED*** or
        settings.SECURE_BROWSER_XSS_FILTER is True
    ***REMOVED***
    return [***REMOVED*** if passed_check else [W007***REMOVED***


@register(Tags.security, deploy=True***REMOVED***
def check_ssl_redirect(app_configs, **kwargs***REMOVED***:
    passed_check = (
        not _security_middleware(***REMOVED*** or
        settings.SECURE_SSL_REDIRECT is True
    ***REMOVED***
    return [***REMOVED*** if passed_check else [W008***REMOVED***


@register(Tags.security, deploy=True***REMOVED***
def check_secret_key(app_configs, **kwargs***REMOVED***:
    passed_check = (
        getattr(settings, 'SECRET_KEY', None***REMOVED*** and
        len(set(settings.SECRET_KEY***REMOVED******REMOVED*** >= SECRET_KEY_MIN_UNIQUE_CHARACTERS and
        len(settings.SECRET_KEY***REMOVED*** >= SECRET_KEY_MIN_LENGTH
    ***REMOVED***
    return [***REMOVED*** if passed_check else [W009***REMOVED***


@register(Tags.security, deploy=True***REMOVED***
def check_debug(app_configs, **kwargs***REMOVED***:
    passed_check = not settings.DEBUG
    return [***REMOVED*** if passed_check else [W018***REMOVED***


@register(Tags.security, deploy=True***REMOVED***
def check_xframe_deny(app_configs, **kwargs***REMOVED***:
    passed_check = (
        not _xframe_middleware(***REMOVED*** or
        settings.X_FRAME_OPTIONS == 'DENY'
    ***REMOVED***
    return [***REMOVED*** if passed_check else [patch_middleware_message(W019***REMOVED******REMOVED***


@register(Tags.security, deploy=True***REMOVED***
def check_allowed_hosts(app_configs, **kwargs***REMOVED***:
    return [***REMOVED*** if settings.ALLOWED_HOSTS else [W020***REMOVED***
