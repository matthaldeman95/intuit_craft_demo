# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.utils.encoding import force_str, python_2_unicode_compatible

# Levels
DEBUG = 10
INFO = 20
WARNING = 30
ERROR = 40
CRITICAL = 50


@python_2_unicode_compatible
class CheckMessage(object***REMOVED***:

    def __init__(self, level, msg, hint=None, obj=None, id=None***REMOVED***:
        assert isinstance(level, int***REMOVED***, "The first argument should be level."
        self.level = level
        self.msg = msg
        self.hint = hint
        self.obj = obj
        self.id = id

    def __eq__(self, other***REMOVED***:
        return all(getattr(self, attr***REMOVED*** == getattr(other, attr***REMOVED***
                   for attr in ['level', 'msg', 'hint', 'obj', 'id'***REMOVED******REMOVED***

    def __ne__(self, other***REMOVED***:
        return not (self == other***REMOVED***

    def __str__(self***REMOVED***:
        from django.db import models

        if self.obj is None:
            obj = "?"
        elif isinstance(self.obj, models.base.ModelBase***REMOVED***:
            # We need to hardcode ModelBase and Field cases because its __str__
            # method doesn't return "applabel.modellabel" and cannot be changed.
            obj = self.obj._meta.label
        else:
            obj = force_str(self.obj***REMOVED***
        id = "(%s***REMOVED*** " % self.id if self.id else ""
        hint = "\n\tHINT: %s" % self.hint if self.hint else ''
        return "%s: %s%s%s" % (obj, id, self.msg, hint***REMOVED***

    def __repr__(self***REMOVED***:
        return "<%s: level=%r, msg=%r, hint=%r, obj=%r, id=%r>" % \
            (self.__class__.__name__, self.level, self.msg, self.hint, self.obj, self.id***REMOVED***

    def is_serious(self, level=ERROR***REMOVED***:
        return self.level >= level

    def is_silenced(self***REMOVED***:
        from django.conf import settings
        return self.id in settings.SILENCED_SYSTEM_CHECKS


class Debug(CheckMessage***REMOVED***:
    def __init__(self, *args, **kwargs***REMOVED***:
        super(Debug, self***REMOVED***.__init__(DEBUG, *args, **kwargs***REMOVED***


class Info(CheckMessage***REMOVED***:
    def __init__(self, *args, **kwargs***REMOVED***:
        super(Info, self***REMOVED***.__init__(INFO, *args, **kwargs***REMOVED***


class Warning(CheckMessage***REMOVED***:
    def __init__(self, *args, **kwargs***REMOVED***:
        super(Warning, self***REMOVED***.__init__(WARNING, *args, **kwargs***REMOVED***


class Error(CheckMessage***REMOVED***:
    def __init__(self, *args, **kwargs***REMOVED***:
        super(Error, self***REMOVED***.__init__(ERROR, *args, **kwargs***REMOVED***


class Critical(CheckMessage***REMOVED***:
    def __init__(self, *args, **kwargs***REMOVED***:
        super(Critical, self***REMOVED***.__init__(CRITICAL, *args, **kwargs***REMOVED***
