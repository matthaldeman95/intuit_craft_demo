# -*- coding: utf-8 -*-
from __future__ import unicode_literals

import copy

from django.conf import settings
from django.utils import six

from . import Error, Tags, register

E001 = Error(
    "You have 'APP_DIRS': True in your TEMPLATES but also specify 'loaders' "
    "in OPTIONS. Either remove APP_DIRS or remove the 'loaders' option.",
    id='templates.E001',
***REMOVED***
E002 = Error(
    "'string_if_invalid' in TEMPLATES OPTIONS must be a string but got: {***REMOVED*** ({***REMOVED******REMOVED***.",
    id="templates.E002",
***REMOVED***


@register(Tags.templates***REMOVED***
def check_setting_app_dirs_loaders(app_configs, **kwargs***REMOVED***:
    passed_check = True
    for conf in settings.TEMPLATES:
        if not conf.get('APP_DIRS'***REMOVED***:
            continue
        if 'loaders' in conf.get('OPTIONS', {***REMOVED******REMOVED***:
            passed_check = False
    return [***REMOVED*** if passed_check else [E001***REMOVED***


@register(Tags.templates***REMOVED***
def check_string_if_invalid_is_string(app_configs, **kwargs***REMOVED***:
    errors = [***REMOVED***
    for conf in settings.TEMPLATES:
        string_if_invalid = conf.get('OPTIONS', {***REMOVED******REMOVED***.get('string_if_invalid', ''***REMOVED***
        if not isinstance(string_if_invalid, six.string_types***REMOVED***:
            error = copy.copy(E002***REMOVED***
            error.msg = error.msg.format(string_if_invalid, type(string_if_invalid***REMOVED***.__name__***REMOVED***
            errors.append(error***REMOVED***
    return errors
