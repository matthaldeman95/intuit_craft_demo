from __future__ import unicode_literals

from django.conf import settings
from django.utils import six

from . import Error, Tags, Warning, register


@register(Tags.urls***REMOVED***
def check_url_config(app_configs, **kwargs***REMOVED***:
    if getattr(settings, 'ROOT_URLCONF', None***REMOVED***:
        from django.urls import get_resolver
        resolver = get_resolver(***REMOVED***
        return check_resolver(resolver***REMOVED***
    return [***REMOVED***


def check_resolver(resolver***REMOVED***:
    ***REMOVED***
    Recursively check the resolver.
    ***REMOVED***
    from django.urls import RegexURLPattern, RegexURLResolver
    warnings = [***REMOVED***
    for pattern in resolver.url_patterns:
        if isinstance(pattern, RegexURLResolver***REMOVED***:
            warnings.extend(check_include_trailing_dollar(pattern***REMOVED******REMOVED***
            # Check resolver recursively
            warnings.extend(check_resolver(pattern***REMOVED******REMOVED***
        elif isinstance(pattern, RegexURLPattern***REMOVED***:
            warnings.extend(check_pattern_name(pattern***REMOVED******REMOVED***
        else:
            # This is not a url(***REMOVED*** instance
            warnings.extend(get_warning_for_invalid_pattern(pattern***REMOVED******REMOVED***

        if not warnings:
            warnings.extend(check_pattern_startswith_slash(pattern***REMOVED******REMOVED***

    return warnings


def get_warning_for_invalid_pattern(pattern***REMOVED***:
    ***REMOVED***
    Return a list containing a warning that the pattern is invalid.

    describe_pattern(***REMOVED*** cannot be used here, because we cannot rely on the
    urlpattern having regex or name attributes.
    ***REMOVED***
    if isinstance(pattern, six.string_types***REMOVED***:
        hint = (
            "Try removing the string '{***REMOVED***'. The list of urlpatterns should not "
            "have a prefix string as the first element.".format(pattern***REMOVED***
        ***REMOVED***
    elif isinstance(pattern, tuple***REMOVED***:
        hint = "Try using url(***REMOVED*** instead of a tuple."
    else:
        hint = None

    return [Error(
        "Your URL pattern {!r***REMOVED*** is invalid. Ensure that urlpatterns is a list "
        "of url(***REMOVED*** instances.".format(pattern***REMOVED***,
        hint=hint,
        id="urls.E004",
    ***REMOVED******REMOVED***


def describe_pattern(pattern***REMOVED***:
    ***REMOVED***
    Format the URL pattern for display in warning messages.
    ***REMOVED***
    description = "'{***REMOVED***'".format(pattern.regex.pattern***REMOVED***
    if getattr(pattern, 'name', False***REMOVED***:
        description += " [name='{***REMOVED***'***REMOVED***".format(pattern.name***REMOVED***
    return description


def check_include_trailing_dollar(pattern***REMOVED***:
    ***REMOVED***
    Check that include is not used with a regex ending with a dollar.
    ***REMOVED***
    regex_pattern = pattern.regex.pattern
    if regex_pattern.endswith('$'***REMOVED*** and not regex_pattern.endswith('\$'***REMOVED***:
        warning = Warning(
            "Your URL pattern {***REMOVED*** uses include with a regex ending with a '$'. "
            "Remove the dollar from the regex to avoid problems including "
            "URLs.".format(describe_pattern(pattern***REMOVED******REMOVED***,
            id="urls.W001",
        ***REMOVED***
        return [warning***REMOVED***
    else:
        return [***REMOVED***


def check_pattern_startswith_slash(pattern***REMOVED***:
    ***REMOVED***
    Check that the pattern does not begin with a forward slash.
    ***REMOVED***
    regex_pattern = pattern.regex.pattern
    if not settings.APPEND_SLASH:
        # Skip check as it can be useful to start a URL pattern with a slash
        # when APPEND_SLASH=False.
        return [***REMOVED***
    if regex_pattern.startswith('/'***REMOVED*** or regex_pattern.startswith('^/'***REMOVED***:
        warning = Warning(
            "Your URL pattern {***REMOVED*** has a regex beginning with a '/'. Remove this "
            "slash as it is unnecessary. If this pattern is targeted in an "
            "include(***REMOVED***, ensure the include(***REMOVED*** pattern has a trailing '/'.".format(
                describe_pattern(pattern***REMOVED***
            ***REMOVED***,
            id="urls.W002",
        ***REMOVED***
        return [warning***REMOVED***
    else:
        return [***REMOVED***


def check_pattern_name(pattern***REMOVED***:
    ***REMOVED***
    Check that the pattern name does not contain a colon.
    ***REMOVED***
    if pattern.name is not None and ":" in pattern.name:
        warning = Warning(
            "Your URL pattern {***REMOVED*** has a name including a ':'. Remove the colon, to "
            "avoid ambiguous namespace references.".format(describe_pattern(pattern***REMOVED******REMOVED***,
            id="urls.W003",
        ***REMOVED***
        return [warning***REMOVED***
    else:
        return [***REMOVED***
