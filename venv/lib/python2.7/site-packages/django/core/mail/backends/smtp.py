***REMOVED***SMTP email backend class.***REMOVED***
import smtplib
import ssl
import threading

from django.conf import settings
from django.core.mail.backends.base import BaseEmailBackend
from django.core.mail.message import sanitize_address
from django.core.mail.utils import DNS_NAME


class EmailBackend(BaseEmailBackend***REMOVED***:
    ***REMOVED***
    A wrapper that manages the SMTP network connection.
    ***REMOVED***
    def __init__(self, host=None, port=None, username=None, password=None,
                 use_tls=None, fail_silently=False, use_ssl=None, timeout=None,
                 ssl_keyfile=None, ssl_certfile=None,
                 **kwargs***REMOVED***:
        super(EmailBackend, self***REMOVED***.__init__(fail_silently=fail_silently***REMOVED***
        self.host = host or settings.EMAIL_HOST
        self.port = port or settings.EMAIL_PORT
        self.username = settings.EMAIL_HOST_USER if username is None else username
        self.password = settings.EMAIL_HOST_PASSWORD if password is None else password
        self.use_tls = settings.EMAIL_USE_TLS if use_tls is None else use_tls
        self.use_ssl = settings.EMAIL_USE_SSL if use_ssl is None else use_ssl
        self.timeout = settings.EMAIL_TIMEOUT if timeout is None else timeout
        self.ssl_keyfile = settings.EMAIL_SSL_KEYFILE if ssl_keyfile is None else ssl_keyfile
        self.ssl_certfile = settings.EMAIL_SSL_CERTFILE if ssl_certfile is None else ssl_certfile
        if self.use_ssl and self.use_tls:
            raise ValueError(
                "EMAIL_USE_TLS/EMAIL_USE_SSL are mutually exclusive, so only set "
                "one of those settings to True."***REMOVED***
        self.connection = None
        self._lock = threading.RLock(***REMOVED***

    def open(self***REMOVED***:
        ***REMOVED***
        Ensures we have a connection to the email server. Returns whether or
        not a new connection was required (True or False***REMOVED***.
        ***REMOVED***
        if self.connection:
            # Nothing to do if the connection is already open.
            return False

        connection_class = smtplib.SMTP_SSL if self.use_ssl else smtplib.SMTP
        # If local_hostname is not specified, socket.getfqdn(***REMOVED*** gets used.
        # For performance, we use the cached FQDN for local_hostname.
        connection_params = {'local_hostname': DNS_NAME.get_fqdn(***REMOVED******REMOVED***
        if self.timeout is not None:
            connection_params['timeout'***REMOVED*** = self.timeout
        if self.use_ssl:
            connection_params.update({
                'keyfile': self.ssl_keyfile,
                'certfile': self.ssl_certfile,
        ***REMOVED******REMOVED***
        ***REMOVED***
            self.connection = connection_class(self.host, self.port, **connection_params***REMOVED***

            # TLS/SSL are mutually exclusive, so only attempt TLS over
            # non-secure connections.
            if not self.use_ssl and self.use_tls:
                self.connection.ehlo(***REMOVED***
                self.connection.starttls(keyfile=self.ssl_keyfile, certfile=self.ssl_certfile***REMOVED***
                self.connection.ehlo(***REMOVED***
            if self.username and self.password:
                self.connection.login(self.username, self.password***REMOVED***
            return True
        except smtplib.SMTPException:
            if not self.fail_silently:
                raise

    def close(self***REMOVED***:
        ***REMOVED***Closes the connection to the email server.***REMOVED***
        if self.connection is None:
            return
        ***REMOVED***
            ***REMOVED***
                self.connection.quit(***REMOVED***
            except (ssl.SSLError, smtplib.SMTPServerDisconnected***REMOVED***:
                # This happens when calling quit(***REMOVED*** on a TLS connection
                # sometimes, or when the connection was already disconnected
                # by the server.
                self.connection.close(***REMOVED***
            except smtplib.SMTPException:
                if self.fail_silently:
                    return
                raise
        finally:
            self.connection = None

    def send_messages(self, email_messages***REMOVED***:
        ***REMOVED***
        Sends one or more EmailMessage objects and returns the number of email
        messages sent.
        ***REMOVED***
        if not email_messages:
            return
        with self._lock:
            new_conn_created = self.open(***REMOVED***
            if not self.connection:
                # We failed silently on open(***REMOVED***.
                # Trying to send would be pointless.
                return
            num_sent = 0
            for message in email_messages:
                sent = self._send(message***REMOVED***
                if sent:
                    num_sent += 1
            if new_conn_created:
                self.close(***REMOVED***
        return num_sent

    def _send(self, email_message***REMOVED***:
        ***REMOVED***A helper method that does the actual sending.***REMOVED***
        if not email_message.recipients(***REMOVED***:
            return False
        encoding = email_message.encoding or settings.DEFAULT_CHARSET
        from_email = sanitize_address(email_message.from_email, encoding***REMOVED***
        recipients = [sanitize_address(addr, encoding***REMOVED*** for addr in email_message.recipients(***REMOVED******REMOVED***
        message = email_message.message(***REMOVED***
        ***REMOVED***
            self.connection.sendmail(from_email, recipients, message.as_bytes(linesep='\r\n'***REMOVED******REMOVED***
        except smtplib.SMTPException:
            if not self.fail_silently:
                raise
            return False
        return True
