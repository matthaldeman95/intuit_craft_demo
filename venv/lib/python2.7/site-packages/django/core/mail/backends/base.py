***REMOVED***Base email backend class.***REMOVED***


class BaseEmailBackend(object***REMOVED***:
    ***REMOVED***
    Base class for email backend implementations.

    Subclasses must at least overwrite send_messages(***REMOVED***.

   open(***REMOVED*** and close(***REMOVED*** can be called indirectly by using a backend object as a
   context manager:

       with backend as connection:
           # do something with connection
           pass
    ***REMOVED***
    def __init__(self, fail_silently=False, **kwargs***REMOVED***:
        self.fail_silently = fail_silently

    def open(self***REMOVED***:
        ***REMOVED***Open a network connection.

        This method can be overwritten by backend implementations to
        open a network connection.

        It's up to the backend implementation to track the status of
        a network connection if it's needed by the backend.

        This method can be called by applications to force a single
        network connection to be used when sending mails. See the
        send_messages(***REMOVED*** method of the SMTP backend for a reference
        implementation.

        The default implementation does nothing.
        ***REMOVED***
        pass

    def close(self***REMOVED***:
        ***REMOVED***Close a network connection.***REMOVED***
        pass

    def __enter__(self***REMOVED***:
        self.open(***REMOVED***
        return self

    def __exit__(self, exc_type, exc_value, traceback***REMOVED***:
        self.close(***REMOVED***

    def send_messages(self, email_messages***REMOVED***:
        ***REMOVED***
        Sends one or more EmailMessage objects and returns the number of email
        messages sent.
        ***REMOVED***
        raise NotImplementedError('subclasses of BaseEmailBackend must override send_messages(***REMOVED*** method'***REMOVED***
