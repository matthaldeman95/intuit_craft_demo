***REMOVED***
Email backend that writes messages to console instead of sending them.
***REMOVED***
import sys
import threading

from django.core.mail.backends.base import BaseEmailBackend
from django.utils import six


class EmailBackend(BaseEmailBackend***REMOVED***:
    def __init__(self, *args, **kwargs***REMOVED***:
        self.stream = kwargs.pop('stream', sys.stdout***REMOVED***
        self._lock = threading.RLock(***REMOVED***
        super(EmailBackend, self***REMOVED***.__init__(*args, **kwargs***REMOVED***

    def write_message(self, message***REMOVED***:
        msg = message.message(***REMOVED***
        msg_data = msg.as_bytes(***REMOVED***
        if six.PY3:
            charset = msg.get_charset(***REMOVED***.get_output_charset(***REMOVED*** if msg.get_charset(***REMOVED*** else 'utf-8'
            msg_data = msg_data.decode(charset***REMOVED***
        self.stream.write('%s\n' % msg_data***REMOVED***
        self.stream.write('-' * 79***REMOVED***
        self.stream.write('\n'***REMOVED***

    def send_messages(self, email_messages***REMOVED***:
        ***REMOVED***Write all messages to the stream in a thread-safe way.***REMOVED***
        if not email_messages:
            return
        msg_count = 0
        with self._lock:
            ***REMOVED***
                stream_created = self.open(***REMOVED***
                for message in email_messages:
                    self.write_message(message***REMOVED***
                    self.stream.flush(***REMOVED***  # flush after each message
                    msg_count += 1
                if stream_created:
                    self.close(***REMOVED***
            except Exception:
                if not self.fail_silently:
                    raise
        return msg_count
