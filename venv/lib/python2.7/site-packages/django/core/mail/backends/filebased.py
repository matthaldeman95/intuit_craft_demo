***REMOVED***Email backend that writes messages to a file.***REMOVED***

import datetime
***REMOVED***

from django.conf import settings
from django.core.exceptions import ImproperlyConfigured
from django.core.mail.backends.console import \
    EmailBackend as ConsoleEmailBackend
from django.utils import six


class EmailBackend(ConsoleEmailBackend***REMOVED***:
    def __init__(self, *args, **kwargs***REMOVED***:
        self._fname = None
        if 'file_path' in kwargs:
            self.file_path = kwargs.pop('file_path'***REMOVED***
        else:
            self.file_path = getattr(settings, 'EMAIL_FILE_PATH', None***REMOVED***
        # Make sure self.file_path is a string.
        if not isinstance(self.file_path, six.string_types***REMOVED***:
            raise ImproperlyConfigured('Path for saving emails is invalid: %r' % self.file_path***REMOVED***
        self.file_path = os.path.abspath(self.file_path***REMOVED***
        # Make sure that self.file_path is an directory if it exists.
        if os.path.exists(self.file_path***REMOVED*** and not os.path.isdir(self.file_path***REMOVED***:
            raise ImproperlyConfigured(
                'Path for saving email messages exists, but is not a directory: %s' % self.file_path
            ***REMOVED***
        # Try to create it, if it not exists.
        elif not os.path.exists(self.file_path***REMOVED***:
            ***REMOVED***
                os.makedirs(self.file_path***REMOVED***
            except OSError as err:
                raise ImproperlyConfigured(
                    'Could not create directory for saving email messages: %s (%s***REMOVED***' % (self.file_path, err***REMOVED***
                ***REMOVED***
        # Make sure that self.file_path is writable.
        if not os.access(self.file_path, os.W_OK***REMOVED***:
            raise ImproperlyConfigured('Could not write to directory: %s' % self.file_path***REMOVED***
        # Finally, call super(***REMOVED***.
        # Since we're using the console-based backend as a base,
        # force the stream to be None, so we don't default to stdout
        kwargs['stream'***REMOVED*** = None
        super(EmailBackend, self***REMOVED***.__init__(*args, **kwargs***REMOVED***

    def write_message(self, message***REMOVED***:
        self.stream.write(message.message(***REMOVED***.as_bytes(***REMOVED*** + b'\n'***REMOVED***
        self.stream.write(b'-' * 79***REMOVED***
        self.stream.write(b'\n'***REMOVED***

    def _get_filename(self***REMOVED***:
        ***REMOVED***Return a unique file name.***REMOVED***
        if self._fname is None:
            timestamp = datetime.datetime.now(***REMOVED***.strftime("%Y%m%d-%H%M%S"***REMOVED***
            fname = "%s-%s.log" % (timestamp, abs(id(self***REMOVED******REMOVED******REMOVED***
            self._fname = os.path.join(self.file_path, fname***REMOVED***
        return self._fname

    def open(self***REMOVED***:
        if self.stream is None:
            self.stream = open(self._get_filename(***REMOVED***, 'ab'***REMOVED***
            return True
        return False

    def close(self***REMOVED***:
        ***REMOVED***
            if self.stream is not None:
                self.stream.close(***REMOVED***
        finally:
            self.stream = None
