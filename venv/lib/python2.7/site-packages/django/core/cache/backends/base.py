"Base Cache class."
from __future__ import unicode_literals

import time
import warnings

from django.core.exceptions import DjangoRuntimeWarning, ImproperlyConfigured
from django.utils.module_loading import import_string


class InvalidCacheBackendError(ImproperlyConfigured***REMOVED***:
    pass


class CacheKeyWarning(DjangoRuntimeWarning***REMOVED***:
    pass


# Stub class to ensure not passing in a `timeout` argument results in
# the default timeout
DEFAULT_TIMEOUT = object(***REMOVED***

# Memcached does not accept keys longer than this.
MEMCACHE_MAX_KEY_LENGTH = 250


def default_key_func(key, key_prefix, version***REMOVED***:
    ***REMOVED***
    Default function to generate keys.

    Constructs the key used by all other methods. By default it prepends
    the `key_prefix'. KEY_FUNCTION can be used to specify an alternate
    function with custom key making behavior.
    ***REMOVED***
    return '%s:%s:%s' % (key_prefix, version, key***REMOVED***


def get_key_func(key_func***REMOVED***:
    ***REMOVED***
    Function to decide which key function to use.

    Defaults to ``default_key_func``.
    ***REMOVED***
    if key_func is not None:
        if callable(key_func***REMOVED***:
            return key_func
        else:
            return import_string(key_func***REMOVED***
    return default_key_func


class BaseCache(object***REMOVED***:
    def __init__(self, params***REMOVED***:
        timeout = params.get('timeout', params.get('TIMEOUT', 300***REMOVED******REMOVED***
        if timeout is not None:
            ***REMOVED***
                timeout = int(timeout***REMOVED***
            except (ValueError, TypeError***REMOVED***:
                timeout = 300
        self.default_timeout = timeout

        options = params.get('OPTIONS', {***REMOVED******REMOVED***
        max_entries = params.get('max_entries', options.get('MAX_ENTRIES', 300***REMOVED******REMOVED***
        ***REMOVED***
            self._max_entries = int(max_entries***REMOVED***
        except (ValueError, TypeError***REMOVED***:
            self._max_entries = 300

        cull_frequency = params.get('cull_frequency', options.get('CULL_FREQUENCY', 3***REMOVED******REMOVED***
        ***REMOVED***
            self._cull_frequency = int(cull_frequency***REMOVED***
        except (ValueError, TypeError***REMOVED***:
            self._cull_frequency = 3

        self.key_prefix = params.get('KEY_PREFIX', ''***REMOVED***
        self.version = params.get('VERSION', 1***REMOVED***
        self.key_func = get_key_func(params.get('KEY_FUNCTION'***REMOVED******REMOVED***

    def get_backend_timeout(self, timeout=DEFAULT_TIMEOUT***REMOVED***:
        ***REMOVED***
        Returns the timeout value usable by this backend based upon the provided
        timeout.
        ***REMOVED***
        if timeout == DEFAULT_TIMEOUT:
            timeout = self.default_timeout
        elif timeout == 0:
            # ticket 21147 - avoid time.time(***REMOVED*** related precision issues
            timeout = -1
        return None if timeout is None else time.time(***REMOVED*** + timeout

    def make_key(self, key, version=None***REMOVED***:
        ***REMOVED***Constructs the key used by all other methods. By default it
        uses the key_func to generate a key (which, by default,
        prepends the `key_prefix' and 'version'***REMOVED***. A different key
        function can be provided at the time of cache construction;
        alternatively, you can subclass the cache backend to provide
        custom key making behavior.
        ***REMOVED***
        if version is None:
            version = self.version

        new_key = self.key_func(key, self.key_prefix, version***REMOVED***
        return new_key

    def add(self, key, value, timeout=DEFAULT_TIMEOUT, version=None***REMOVED***:
        ***REMOVED***
        Set a value in the cache if the key does not already exist. If
        timeout is given, that timeout will be used for the key; otherwise
        the default cache timeout will be used.

        Returns True if the value was stored, False otherwise.
        ***REMOVED***
        raise NotImplementedError('subclasses of BaseCache must provide an add(***REMOVED*** method'***REMOVED***

    def get(self, key, default=None, version=None***REMOVED***:
        ***REMOVED***
        Fetch a given key from the cache. If the key does not exist, return
        default, which itself defaults to None.
        ***REMOVED***
        raise NotImplementedError('subclasses of BaseCache must provide a get(***REMOVED*** method'***REMOVED***

    def set(self, key, value, timeout=DEFAULT_TIMEOUT, version=None***REMOVED***:
        ***REMOVED***
        Set a value in the cache. If timeout is given, that timeout will be
        used for the key; otherwise the default cache timeout will be used.
        ***REMOVED***
        raise NotImplementedError('subclasses of BaseCache must provide a set(***REMOVED*** method'***REMOVED***

    def delete(self, key, version=None***REMOVED***:
        ***REMOVED***
        Delete a key from the cache, failing silently.
        ***REMOVED***
        raise NotImplementedError('subclasses of BaseCache must provide a delete(***REMOVED*** method'***REMOVED***

    def get_many(self, keys, version=None***REMOVED***:
        ***REMOVED***
        Fetch a bunch of keys from the cache. For certain backends (memcached,
        pgsql***REMOVED*** this can be *much* faster when fetching multiple values.

        Returns a dict mapping each key in keys to its value. If the given
        key is missing, it will be missing from the response dict.
        ***REMOVED***
        d = {***REMOVED***
        for k in keys:
            val = self.get(k, version=version***REMOVED***
            if val is not None:
                d[k***REMOVED*** = val
        return d

    def get_or_set(self, key, default=None, timeout=DEFAULT_TIMEOUT, version=None***REMOVED***:
        ***REMOVED***
        Fetch a given key from the cache. If the key does not exist,
        the key is added and set to the default value. The default value can
        also be any callable. If timeout is given, that timeout will be used
        for the key; otherwise the default cache timeout will be used.

        Return the value of the key stored or retrieved.
        ***REMOVED***
        if default is None:
            raise ValueError('You need to specify a value.'***REMOVED***
        val = self.get(key, version=version***REMOVED***
        if val is None:
            if callable(default***REMOVED***:
                default = default(***REMOVED***
            self.add(key, default, timeout=timeout, version=version***REMOVED***
            # Fetch the value again to avoid a race condition if another caller
            # added a value between the first get(***REMOVED*** and the add(***REMOVED*** above.
            return self.get(key, default, version=version***REMOVED***
        return val

    def has_key(self, key, version=None***REMOVED***:
        ***REMOVED***
        Returns True if the key is in the cache and has not expired.
        ***REMOVED***
        return self.get(key, version=version***REMOVED*** is not None

    def incr(self, key, delta=1, version=None***REMOVED***:
        ***REMOVED***
        Add delta to value in the cache. If the key does not exist, raise a
        ValueError exception.
        ***REMOVED***
        value = self.get(key, version=version***REMOVED***
        if value is None:
            raise ValueError("Key '%s' not found" % key***REMOVED***
        new_value = value + delta
        self.set(key, new_value, version=version***REMOVED***
        return new_value

    def decr(self, key, delta=1, version=None***REMOVED***:
        ***REMOVED***
        Subtract delta from value in the cache. If the key does not exist, raise
        a ValueError exception.
        ***REMOVED***
        return self.incr(key, -delta, version=version***REMOVED***

    def __contains__(self, key***REMOVED***:
        ***REMOVED***
        Returns True if the key is in the cache and has not expired.
        ***REMOVED***
        # This is a separate method, rather than just a copy of has_key(***REMOVED***,
        # so that it always has the same functionality as has_key(***REMOVED***, even
        # if a subclass overrides it.
        return self.has_key(key***REMOVED***

    def set_many(self, data, timeout=DEFAULT_TIMEOUT, version=None***REMOVED***:
        ***REMOVED***
        Set a bunch of values in the cache at once from a dict of key/value
        pairs.  For certain backends (memcached***REMOVED***, this is much more efficient
        than calling set(***REMOVED*** multiple times.

        If timeout is given, that timeout will be used for the key; otherwise
        the default cache timeout will be used.
        ***REMOVED***
        for key, value in data.items(***REMOVED***:
            self.set(key, value, timeout=timeout, version=version***REMOVED***

    def delete_many(self, keys, version=None***REMOVED***:
        ***REMOVED***
        Delete a bunch of values in the cache at once. For certain backends
        (memcached***REMOVED***, this is much more efficient than calling delete(***REMOVED*** multiple
        times.
        ***REMOVED***
        for key in keys:
            self.delete(key, version=version***REMOVED***

    def clear(self***REMOVED***:
        ***REMOVED***Remove *all* values from the cache at once.***REMOVED***
        raise NotImplementedError('subclasses of BaseCache must provide a clear(***REMOVED*** method'***REMOVED***

    def validate_key(self, key***REMOVED***:
        ***REMOVED***
        Warn about keys that would not be portable to the memcached
        backend. This encourages (but does not force***REMOVED*** writing backend-portable
        cache code.
        ***REMOVED***
        if len(key***REMOVED*** > MEMCACHE_MAX_KEY_LENGTH:
            warnings.warn(
                'Cache key will cause errors if used with memcached: %r '
                '(longer than %s***REMOVED***' % (key, MEMCACHE_MAX_KEY_LENGTH***REMOVED***, CacheKeyWarning
            ***REMOVED***
        for char in key:
            if ord(char***REMOVED*** < 33 or ord(char***REMOVED*** == 127:
                warnings.warn(
                    'Cache key contains characters that will cause errors if '
                    'used with memcached: %r' % key, CacheKeyWarning
                ***REMOVED***
                break

    def incr_version(self, key, delta=1, version=None***REMOVED***:
        ***REMOVED***Adds delta to the cache version for the supplied key. Returns the
        new version.
        ***REMOVED***
        if version is None:
            version = self.version

        value = self.get(key, version=version***REMOVED***
        if value is None:
            raise ValueError("Key '%s' not found" % key***REMOVED***

        self.set(key, value, version=version + delta***REMOVED***
        self.delete(key, version=version***REMOVED***
        return version + delta

    def decr_version(self, key, delta=1, version=None***REMOVED***:
        ***REMOVED***Subtracts delta from the cache version for the supplied key. Returns
        the new version.
        ***REMOVED***
        return self.incr_version(key, -delta, version***REMOVED***

    def close(self, **kwargs***REMOVED***:
        ***REMOVED***Close the cache connection***REMOVED***
        pass
