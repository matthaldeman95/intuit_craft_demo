import warnings
from collections import OrderedDict

from django.apps import apps
from django.core import serializers
from django.core.management.base import BaseCommand, CommandError
from django.db import DEFAULT_DB_ALIAS, router


class ProxyModelWarning(Warning***REMOVED***:
    pass


class Command(BaseCommand***REMOVED***:
    help = (
        "Output the contents of the database as a fixture of the given format "
        "(using each model's default manager unless --all is specified***REMOVED***."
    ***REMOVED***

    def add_arguments(self, parser***REMOVED***:
        parser.add_argument(
            'args', metavar='app_label[.ModelName***REMOVED***', nargs='*',
            help='Restricts dumped data to the specified app_label or app_label.ModelName.',
        ***REMOVED***
        parser.add_argument(
            '--format', default='json', dest='format',
            help='Specifies the output serialization format for fixtures.',
        ***REMOVED***
        parser.add_argument(
            '--indent', default=None, dest='indent', type=int,
            help='Specifies the indent level to use when pretty-printing output.',
        ***REMOVED***
        parser.add_argument(
            '--database', action='store', dest='database',
            default=DEFAULT_DB_ALIAS,
            help='Nominates a specific database to dump fixtures from. '
                 'Defaults to the "default" database.',
        ***REMOVED***
        parser.add_argument(
            '-e', '--exclude', dest='exclude', action='append', default=[***REMOVED***,
            help='An app_label or app_label.ModelName to exclude '
                 '(use multiple --exclude to exclude multiple apps/models***REMOVED***.',
        ***REMOVED***
        parser.add_argument(
            '--natural-foreign', action='store_true', dest='use_natural_foreign_keys', default=False,
            help='Use natural foreign keys if they are available.',
        ***REMOVED***
        parser.add_argument(
            '--natural-primary', action='store_true', dest='use_natural_primary_keys', default=False,
            help='Use natural primary keys if they are available.',
        ***REMOVED***
        parser.add_argument(
            '-a', '--all', action='store_true', dest='use_base_manager', default=False,
            help="Use Django's base manager to dump all models stored in the database, "
                 "including those that would otherwise be filtered or modified by a custom manager.",
        ***REMOVED***
        parser.add_argument(
            '--pks', dest='primary_keys',
            help="Only dump objects with given primary keys. Accepts a comma-separated "
                 "list of keys. This option only works when you specify one model.",
        ***REMOVED***
        parser.add_argument(
            '-o', '--output', default=None, dest='output',
            help='Specifies file to which the output is written.'
        ***REMOVED***

    def handle(self, *app_labels, **options***REMOVED***:
        format = options['format'***REMOVED***
        indent = options['indent'***REMOVED***
        using = options['database'***REMOVED***
        excludes = options['exclude'***REMOVED***
        output = options['output'***REMOVED***
        show_traceback = options['traceback'***REMOVED***
        use_natural_foreign_keys = options['use_natural_foreign_keys'***REMOVED***
        use_natural_primary_keys = options['use_natural_primary_keys'***REMOVED***
        use_base_manager = options['use_base_manager'***REMOVED***
        pks = options['primary_keys'***REMOVED***

        if pks:
            primary_keys = pks.split(','***REMOVED***
        else:
            primary_keys = [***REMOVED***

        excluded_apps = set(***REMOVED***
        excluded_models = set(***REMOVED***
        for exclude in excludes:
            if '.' in exclude:
                ***REMOVED***
                    model = apps.get_model(exclude***REMOVED***
                except LookupError:
                    raise CommandError('Unknown model in excludes: %s' % exclude***REMOVED***
                excluded_models.add(model***REMOVED***
            else:
                ***REMOVED***
                    app_config = apps.get_app_config(exclude***REMOVED***
                except LookupError as e:
                    raise CommandError(str(e***REMOVED******REMOVED***
                excluded_apps.add(app_config***REMOVED***

        if len(app_labels***REMOVED*** == 0:
            if primary_keys:
                raise CommandError("You can only use --pks option with one model"***REMOVED***
            app_list = OrderedDict(
                (app_config, None***REMOVED*** for app_config in apps.get_app_configs(***REMOVED***
                if app_config.models_module is not None and app_config not in excluded_apps
            ***REMOVED***
        else:
            if len(app_labels***REMOVED*** > 1 and primary_keys:
                raise CommandError("You can only use --pks option with one model"***REMOVED***
            app_list = OrderedDict(***REMOVED***
            for label in app_labels:
                ***REMOVED***
                    app_label, model_label = label.split('.'***REMOVED***
                    ***REMOVED***
                        app_config = apps.get_app_config(app_label***REMOVED***
                    except LookupError as e:
                        raise CommandError(str(e***REMOVED******REMOVED***
                    if app_config.models_module is None or app_config in excluded_apps:
                        continue
                    ***REMOVED***
                        model = app_config.get_model(model_label***REMOVED***
                    except LookupError:
                        raise CommandError("Unknown model: %s.%s" % (app_label, model_label***REMOVED******REMOVED***

                    app_list_value = app_list.setdefault(app_config, [***REMOVED******REMOVED***

                    # We may have previously seen a "all-models" request for
                    # this app (no model qualifier was given***REMOVED***. In this case
                    # there is no need adding specific models to the list.
                    if app_list_value is not None:
                        if model not in app_list_value:
                            app_list_value.append(model***REMOVED***
                except ValueError:
                    if primary_keys:
                        raise CommandError("You can only use --pks option with one model"***REMOVED***
                    # This is just an app - no model qualifier
                    app_label = label
                    ***REMOVED***
                        app_config = apps.get_app_config(app_label***REMOVED***
                    except LookupError as e:
                        raise CommandError(str(e***REMOVED******REMOVED***
                    if app_config.models_module is None or app_config in excluded_apps:
                        continue
                    app_list[app_config***REMOVED*** = None

        # Check that the serialization format exists; this is a shortcut to
        # avoid collating all the objects and _then_ failing.
        if format not in serializers.get_public_serializer_formats(***REMOVED***:
            ***REMOVED***
                serializers.get_serializer(format***REMOVED***
            except serializers.SerializerDoesNotExist:
                pass

            raise CommandError("Unknown serialization format: %s" % format***REMOVED***

        def get_objects(count_only=False***REMOVED***:
            ***REMOVED***
            Collate the objects to be serialized. If count_only is True, just
            count the number of objects to be serialized.
            ***REMOVED***
            models = serializers.sort_dependencies(app_list.items(***REMOVED******REMOVED***
            for model in models:
                if model in excluded_models:
                    continue
                if model._meta.proxy and model._meta.proxy_for_model not in models:
                    warnings.warn(
                        "%s is a proxy model and won't be serialized." % model._meta.label,
                        category=ProxyModelWarning,
                    ***REMOVED***
                if not model._meta.proxy and router.allow_migrate_model(using, model***REMOVED***:
                    if use_base_manager:
                        objects = model._base_manager
                    else:
                        objects = model._default_manager

                    queryset = objects.using(using***REMOVED***.order_by(model._meta.pk.name***REMOVED***
                    if primary_keys:
                        queryset = queryset.filter(pk__in=primary_keys***REMOVED***
                    if count_only:
                        yield queryset.order_by(***REMOVED***.count(***REMOVED***
                    else:
                        for obj in queryset.iterator(***REMOVED***:
                            yield obj

        ***REMOVED***
            self.stdout.ending = None
            progress_output = None
            object_count = 0
            # If dumpdata is outputting to stdout, there is no way to display progress
            if (output and self.stdout.isatty(***REMOVED*** and options['verbosity'***REMOVED*** > 0***REMOVED***:
                progress_output = self.stdout
                object_count = sum(get_objects(count_only=True***REMOVED******REMOVED***
            stream = open(output, 'w'***REMOVED*** if output else None
            ***REMOVED***
                serializers.serialize(
                    format, get_objects(***REMOVED***, indent=indent,
                    use_natural_foreign_keys=use_natural_foreign_keys,
                    use_natural_primary_keys=use_natural_primary_keys,
                    stream=stream or self.stdout, progress_output=progress_output,
                    object_count=object_count,
                ***REMOVED***
            finally:
                if stream:
                    stream.close(***REMOVED***
        except Exception as e:
            if show_traceback:
                raise
            raise CommandError("Unable to serialize database: %s" % e***REMOVED***
