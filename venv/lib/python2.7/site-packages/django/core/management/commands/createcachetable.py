from django.conf import settings
from django.core.cache import caches
from django.core.cache.backends.db import BaseDatabaseCache
from django.core.management.base import BaseCommand, CommandError
from django.db import (
    DEFAULT_DB_ALIAS, connections, models, router, transaction,
***REMOVED***
from django.db.utils import DatabaseError
from django.utils.encoding import force_text


class Command(BaseCommand***REMOVED***:
    help = "Creates the tables needed to use the SQL cache backend."

    requires_system_checks = False

    def add_arguments(self, parser***REMOVED***:
        parser.add_argument(
            'args', metavar='table_name', nargs='*',
            help='Optional table names. Otherwise, settings.CACHES is used to find cache tables.',
        ***REMOVED***
        parser.add_argument(
            '--database', action='store', dest='database',
            default=DEFAULT_DB_ALIAS,
            help='Nominates a database onto which the cache tables will be '
                 'installed. Defaults to the "default" database.',
        ***REMOVED***
        parser.add_argument(
            '--dry-run', action='store_true', dest='dry_run',
            help='Does not create the table, just prints the SQL that would be run.',
        ***REMOVED***

    def handle(self, *tablenames, **options***REMOVED***:
        db = options['database'***REMOVED***
        self.verbosity = options['verbosity'***REMOVED***
        dry_run = options['dry_run'***REMOVED***
        if len(tablenames***REMOVED***:
            # Legacy behavior, tablename specified as argument
            for tablename in tablenames:
                self.create_table(db, tablename, dry_run***REMOVED***
        else:
            for cache_alias in settings.CACHES:
                cache = caches[cache_alias***REMOVED***
                if isinstance(cache, BaseDatabaseCache***REMOVED***:
                    self.create_table(db, cache._table, dry_run***REMOVED***

    def create_table(self, database, tablename, dry_run***REMOVED***:
        cache = BaseDatabaseCache(tablename, {***REMOVED******REMOVED***
        if not router.allow_migrate_model(database, cache.cache_model_class***REMOVED***:
            return
        connection = connections[database***REMOVED***

        if tablename in connection.introspection.table_names(***REMOVED***:
            if self.verbosity > 0:
                self.stdout.write("Cache table '%s' already exists." % tablename***REMOVED***
            return

        fields = (
            # "key" is a reserved word in MySQL, so use "cache_key" instead.
            models.CharField(name='cache_key', max_length=255, unique=True, primary_key=True***REMOVED***,
            models.TextField(name='value'***REMOVED***,
            models.DateTimeField(name='expires', db_index=True***REMOVED***,
        ***REMOVED***
        table_output = [***REMOVED***
        index_output = [***REMOVED***
        qn = connection.ops.quote_name
        for f in fields:
            field_output = [
                qn(f.name***REMOVED***,
                f.db_type(connection=connection***REMOVED***,
                '%sNULL' % ('NOT ' if not f.null else ''***REMOVED***,
            ***REMOVED***
            if f.primary_key:
                field_output.append("PRIMARY KEY"***REMOVED***
            elif f.unique:
                field_output.append("UNIQUE"***REMOVED***
            if f.db_index:
                unique = "UNIQUE " if f.unique else ""
                index_output.append(
                    "CREATE %sINDEX %s ON %s (%s***REMOVED***;" %
                    (unique, qn('%s_%s' % (tablename, f.name***REMOVED******REMOVED***, qn(tablename***REMOVED***, qn(f.name***REMOVED******REMOVED***
                ***REMOVED***
            table_output.append(" ".join(field_output***REMOVED******REMOVED***
        full_statement = ["CREATE TABLE %s (" % qn(tablename***REMOVED******REMOVED***
        for i, line in enumerate(table_output***REMOVED***:
            full_statement.append('    %s%s' % (line, ',' if i < len(table_output***REMOVED*** - 1 else ''***REMOVED******REMOVED***
        full_statement.append('***REMOVED***;'***REMOVED***

        full_statement = "\n".join(full_statement***REMOVED***

        if dry_run:
            self.stdout.write(full_statement***REMOVED***
            for statement in index_output:
                self.stdout.write(statement***REMOVED***
            return

        with transaction.atomic(using=database, savepoint=connection.features.can_rollback_ddl***REMOVED***:
            with connection.cursor(***REMOVED*** as curs:
                ***REMOVED***
                    curs.execute(full_statement***REMOVED***
                except DatabaseError as e:
                    raise CommandError(
                        "Cache table '%s' could not be created.\nThe error was: %s." %
                        (tablename, force_text(e***REMOVED******REMOVED******REMOVED***
                for statement in index_output:
                    curs.execute(statement***REMOVED***

        if self.verbosity > 1:
            self.stdout.write("Cache table '%s' created." % tablename***REMOVED***
