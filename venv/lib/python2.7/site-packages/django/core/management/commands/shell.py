***REMOVED***
import warnings

from django.core.management.base import BaseCommand
from django.utils.deprecation import RemovedInDjango20Warning


class Command(BaseCommand***REMOVED***:
    help = "Runs a Python interactive interpreter. Tries to use IPython or bpython, if one of them is available."
    requires_system_checks = False
    shells = ['ipython', 'bpython', 'python'***REMOVED***

    def add_arguments(self, parser***REMOVED***:
        parser.add_argument(
            '--plain', action='store_true', dest='plain',
            help='Tells Django to use plain Python, not IPython or bpython. '
                 'Deprecated, use the `-i python` or `--interface python` option instead.',
        ***REMOVED***
        parser.add_argument(
            '--no-startup', action='store_true', dest='no_startup',
            help='When using plain Python, ignore the PYTHONSTARTUP environment variable and ~/.pythonrc.py script.',
        ***REMOVED***
        parser.add_argument(
            '-i', '--interface', choices=self.shells, dest='interface',
            help='Specify an interactive interpreter interface. Available options: "ipython", "bpython", and "python"',
        ***REMOVED***
        parser.add_argument(
            '-c', '--command', dest='command',
            help='Instead of opening an interactive shell, run a command as Django and exit.',
        ***REMOVED***

    def _ipython_pre_011(self***REMOVED***:
        ***REMOVED***Start IPython pre-0.11***REMOVED***
        from IPython.Shell import IPShell
        shell = IPShell(argv=[***REMOVED******REMOVED***
        shell.mainloop(***REMOVED***

    def _ipython_pre_100(self***REMOVED***:
        ***REMOVED***Start IPython pre-1.0.0***REMOVED***
        from IPython.frontend.terminal.ipapp import TerminalIPythonApp
        app = TerminalIPythonApp.instance(***REMOVED***
        app.initialize(argv=[***REMOVED******REMOVED***
        app.start(***REMOVED***

    def _ipython(self***REMOVED***:
        ***REMOVED***Start IPython >= 1.0***REMOVED***
        from IPython import start_ipython
        start_ipython(argv=[***REMOVED******REMOVED***

    def ipython(self, options***REMOVED***:
        ***REMOVED***Start any version of IPython***REMOVED***
        for ip in (self._ipython, self._ipython_pre_100, self._ipython_pre_011***REMOVED***:
            ***REMOVED***
                ip(***REMOVED***
            except ImportError:
                pass
            else:
                return
        # no IPython, raise ImportError
        raise ImportError("No IPython"***REMOVED***

    def bpython(self, options***REMOVED***:
        import bpython
        bpython.embed(***REMOVED***

    def python(self, options***REMOVED***:
        import code
        # Set up a dictionary to serve as the environment for the shell, so
        # that tab completion works on objects that are imported at runtime.
        imported_objects = {***REMOVED***
        ***REMOVED***  # Try activating rlcompleter, because it's handy.
            import readline
        except ImportError:
            pass
        else:
            # We don't have to wrap the following import in a 'try', because
            # we already know 'readline' was imported successfully.
            import rlcompleter
            readline.set_completer(rlcompleter.Completer(imported_objects***REMOVED***.complete***REMOVED***
            # Enable tab completion on systems using libedit (e.g. Mac OSX***REMOVED***.
            # These lines are copied from Lib/site.py on Python 3.4.
            readline_doc = getattr(readline, '__doc__', ''***REMOVED***
            if readline_doc is not None and 'libedit' in readline_doc:
                readline.parse_and_bind("bind ^I rl_complete"***REMOVED***
            else:
                readline.parse_and_bind("tab:complete"***REMOVED***

        # We want to honor both $PYTHONSTARTUP and .pythonrc.py, so follow system
        # conventions and get $PYTHONSTARTUP first then .pythonrc.py.
        if not options['no_startup'***REMOVED***:
            for pythonrc in (os.environ.get("PYTHONSTARTUP"***REMOVED***, '~/.pythonrc.py'***REMOVED***:
                if not pythonrc:
                    continue
                pythonrc = os.path.expanduser(pythonrc***REMOVED***
                if not os.path.isfile(pythonrc***REMOVED***:
                    continue
                ***REMOVED***
                    with open(pythonrc***REMOVED*** as handle:
                        exec(compile(handle.read(***REMOVED***, pythonrc, 'exec'***REMOVED***, imported_objects***REMOVED***
                except NameError:
                    pass
        code.interact(local=imported_objects***REMOVED***

    def handle(self, **options***REMOVED***:
        if options['plain'***REMOVED***:
            warnings.warn(
                "The --plain option is deprecated in favor of the -i python or --interface python option.",
                RemovedInDjango20Warning
            ***REMOVED***
            options['interface'***REMOVED*** = 'python'

        # Execute the command and exit.
        if options['command'***REMOVED***:
            exec(options['command'***REMOVED******REMOVED***
            return

        available_shells = [options['interface'***REMOVED******REMOVED*** if options['interface'***REMOVED*** else self.shells

        for shell in available_shells:
            ***REMOVED***
                return getattr(self, shell***REMOVED***(options***REMOVED***
            except ImportError:
                pass
        raise ImportError("Couldn't load any of the specified interfaces."***REMOVED***
