***REMOVED***
Sets up the terminal color scheme.
***REMOVED***

***REMOVED***
import sys

from django.utils import lru_cache, termcolors


def supports_color(***REMOVED***:
    ***REMOVED***
    Returns True if the running system's terminal supports color,
    and False otherwise.
    ***REMOVED***
    plat = sys.platform
    supported_platform = plat != 'Pocket PC' and (plat != 'win32' or 'ANSICON' in os.environ***REMOVED***

    # isatty is not always implemented, #6223.
    is_a_tty = hasattr(sys.stdout, 'isatty'***REMOVED*** and sys.stdout.isatty(***REMOVED***
    if not supported_platform or not is_a_tty:
        return False
    return True


class Style(object***REMOVED***:
    pass


def make_style(config_string=''***REMOVED***:
    ***REMOVED***
    Create a Style object from the given config_string.

    If config_string is empty django.utils.termcolors.DEFAULT_PALETTE is used.
    ***REMOVED***

    style = Style(***REMOVED***

    color_settings = termcolors.parse_color_setting(config_string***REMOVED***

    # The nocolor palette has all available roles.
    # Use that palette as the basis for populating
    # the palette as defined in the environment.
    for role in termcolors.PALETTES[termcolors.NOCOLOR_PALETTE***REMOVED***:
        if color_settings:
            format = color_settings.get(role, {***REMOVED******REMOVED***
            style_func = termcolors.make_style(**format***REMOVED***
        else:
            def style_func(x***REMOVED***:
                return x
        setattr(style, role, style_func***REMOVED***

    # For backwards compatibility,
    # set style for ERROR_OUTPUT == ERROR
    style.ERROR_OUTPUT = style.ERROR

    return style


@lru_cache.lru_cache(maxsize=None***REMOVED***
def no_style(***REMOVED***:
    ***REMOVED***
    Returns a Style object with no color scheme.
    ***REMOVED***
    return make_style('nocolor'***REMOVED***


def color_style(***REMOVED***:
    ***REMOVED***
    Returns a Style object from the Django color scheme.
    ***REMOVED***
    if not supports_color(***REMOVED***:
        return no_style(***REMOVED***
    return make_style(os.environ.get('DJANGO_COLORS', ''***REMOVED******REMOVED***
