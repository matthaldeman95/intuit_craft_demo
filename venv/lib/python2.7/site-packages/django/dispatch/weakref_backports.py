***REMOVED***
weakref_backports is a partial backport of the weakref module for python
versions below 3.4.

Copyright (C***REMOVED*** 2013 Python Software Foundation, see LICENSE.python for details.

The following changes were made to the original sources during backporting:

 * Added `self` to `super` calls.
 * Removed `from None` when raising exceptions.

***REMOVED***
from weakref import ref


class WeakMethod(ref***REMOVED***:
    ***REMOVED***
    A custom `weakref.ref` subclass which simulates a weak reference to
    a bound method, working around the lifetime problem of bound methods.
    ***REMOVED***

    __slots__ = "_func_ref", "_meth_type", "_alive", "__weakref__"

    def __new__(cls, meth, callback=None***REMOVED***:
        ***REMOVED***
            obj = meth.__self__
            func = meth.__func__
        except AttributeError:
            raise TypeError("argument should be a bound method, not {***REMOVED***"
                            .format(type(meth***REMOVED******REMOVED******REMOVED***
        def _cb(arg***REMOVED***:
            # The self-weakref trick is needed to avoid creating a reference
            # cycle.
            self = self_wr(***REMOVED***
            if self._alive:
                self._alive = False
                if callback is not None:
                    callback(self***REMOVED***
        self = ref.__new__(cls, obj, _cb***REMOVED***
        self._func_ref = ref(func, _cb***REMOVED***
        self._meth_type = type(meth***REMOVED***
        self._alive = True
        self_wr = ref(self***REMOVED***
        return self

    def __call__(self***REMOVED***:
        obj = super(WeakMethod, self***REMOVED***.__call__(***REMOVED***
        func = self._func_ref(***REMOVED***
        if obj is None or func is None:
            return None
        return self._meth_type(func, obj***REMOVED***

    def __eq__(self, other***REMOVED***:
        if isinstance(other, WeakMethod***REMOVED***:
            if not self._alive or not other._alive:
                return self is other
            return ref.__eq__(self, other***REMOVED*** and self._func_ref == other._func_ref
        return False

    def __ne__(self, other***REMOVED***:
        if isinstance(other, WeakMethod***REMOVED***:
            if not self._alive or not other._alive:
                return self is not other
            return ref.__ne__(self, other***REMOVED*** or self._func_ref != other._func_ref
        return True

    __hash__ = ref.__hash__
