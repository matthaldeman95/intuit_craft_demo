from __future__ import unicode_literals

import sys

from django.utils import six
from django.utils.encoding import force_str
from django.utils.six.moves import http_cookies

# http://bugs.python.org/issue2193 is fixed in Python 3.3+.
_cookie_allows_colon_in_names = six.PY3

# Cookie pickling bug is fixed in Python 2.7.9 and Python 3.4.3+
# http://bugs.python.org/issue22775
cookie_pickles_properly = (
    (sys.version_info[:2***REMOVED*** == (2, 7***REMOVED*** and sys.version_info >= (2, 7, 9***REMOVED******REMOVED*** or
    sys.version_info >= (3, 4, 3***REMOVED***
***REMOVED***

if _cookie_allows_colon_in_names and cookie_pickles_properly:
    SimpleCookie = http_cookies.SimpleCookie
else:
    Morsel = http_cookies.Morsel

    class SimpleCookie(http_cookies.SimpleCookie***REMOVED***:
        if not cookie_pickles_properly:
            def __setitem__(self, key, value***REMOVED***:
                # Apply the fix from http://bugs.python.org/issue22775 where
                # it's not fixed in Python itself
                if isinstance(value, Morsel***REMOVED***:
                    # allow assignment of constructed Morsels (e.g. for pickling***REMOVED***
                    dict.__setitem__(self, key, value***REMOVED***
                else:
                    super(SimpleCookie, self***REMOVED***.__setitem__(key, value***REMOVED***

        if not _cookie_allows_colon_in_names:
            def load(self, rawdata***REMOVED***:
                self.bad_cookies = set(***REMOVED***
                if isinstance(rawdata, six.text_type***REMOVED***:
                    rawdata = force_str(rawdata***REMOVED***
                super(SimpleCookie, self***REMOVED***.load(rawdata***REMOVED***
                for key in self.bad_cookies:
                    del self[key***REMOVED***

            # override private __set(***REMOVED*** method:
            # (needed for using our Morsel, and for laxness with CookieError
            def _BaseCookie__set(self, key, real_value, coded_value***REMOVED***:
                key = force_str(key***REMOVED***
                ***REMOVED***
                    M = self.get(key, Morsel(***REMOVED******REMOVED***
                    M.set(key, real_value, coded_value***REMOVED***
                    dict.__setitem__(self, key, M***REMOVED***
                except http_cookies.CookieError:
                    if not hasattr(self, 'bad_cookies'***REMOVED***:
                        self.bad_cookies = set(***REMOVED***
                    self.bad_cookies.add(key***REMOVED***
                    dict.__setitem__(self, key, http_cookies.Morsel(***REMOVED******REMOVED***


def parse_cookie(cookie***REMOVED***:
    ***REMOVED***
    Return a dictionary parsed from a `Cookie:` header string.
    ***REMOVED***
    cookiedict = {***REMOVED***
    if six.PY2:
        cookie = force_str(cookie***REMOVED***
    for chunk in cookie.split(str(';'***REMOVED******REMOVED***:
        if str('='***REMOVED*** in chunk:
            key, val = chunk.split(str('='***REMOVED***, 1***REMOVED***
        else:
            # Assume an empty name per
            # https://bugzilla.mozilla.org/show_bug.cgi?id=169091
            key, val = str(''***REMOVED***, chunk
        key, val = key.strip(***REMOVED***, val.strip(***REMOVED***
        if key or val:
            # unquote using Python's algorithm.
            cookiedict[key***REMOVED*** = http_cookies._unquote(val***REMOVED***
    return cookiedict
