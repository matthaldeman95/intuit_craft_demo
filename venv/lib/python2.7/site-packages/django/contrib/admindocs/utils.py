"Misc. utility functions/classes for admin documentation generator."

import re
from email.errors import HeaderParseError
from email.parser import HeaderParser

from django.urls import reverse
from django.utils.encoding import force_bytes
from django.utils.safestring import mark_safe

***REMOVED***
    import docutils.core
    import docutils.nodes
    import docutils.parsers.rst.roles
except ImportError:
    docutils_is_available = False
else:
    docutils_is_available = True


def trim_docstring(docstring***REMOVED***:
    ***REMOVED***
    Uniformly trim leading/trailing whitespace from docstrings.

    Based on https://www.python.org/dev/peps/pep-0257/#handling-docstring-indentation
    ***REMOVED***
    if not docstring or not docstring.strip(***REMOVED***:
        return ''
    # Convert tabs to spaces and split into lines
    lines = docstring.expandtabs(***REMOVED***.splitlines(***REMOVED***
    indent = min(len(line***REMOVED*** - len(line.lstrip(***REMOVED******REMOVED*** for line in lines if line.lstrip(***REMOVED******REMOVED***
    trimmed = [lines[0***REMOVED***.lstrip(***REMOVED******REMOVED*** + [line[indent:***REMOVED***.rstrip(***REMOVED*** for line in lines[1:***REMOVED******REMOVED***
    return "\n".join(trimmed***REMOVED***.strip(***REMOVED***


def parse_docstring(docstring***REMOVED***:
    ***REMOVED***
    Parse out the parts of a docstring.  Return (title, body, metadata***REMOVED***.
    ***REMOVED***
    docstring = trim_docstring(docstring***REMOVED***
    parts = re.split(r'\n{2,***REMOVED***', docstring***REMOVED***
    title = parts[0***REMOVED***
    if len(parts***REMOVED*** == 1:
        body = ''
        metadata = {***REMOVED***
    else:
        parser = HeaderParser(***REMOVED***
        ***REMOVED***
            metadata = parser.parsestr(parts[-1***REMOVED******REMOVED***
        except HeaderParseError:
            metadata = {***REMOVED***
            body = "\n\n".join(parts[1:***REMOVED******REMOVED***
        else:
            metadata = dict(metadata.items(***REMOVED******REMOVED***
            if metadata:
                body = "\n\n".join(parts[1:-1***REMOVED******REMOVED***
            else:
                body = "\n\n".join(parts[1:***REMOVED******REMOVED***
    return title, body, metadata


def parse_rst(text, default_reference_context, thing_being_parsed=None***REMOVED***:
    ***REMOVED***
    Convert the string from reST to an XHTML fragment.
    ***REMOVED***
    overrides = {
        'doctitle_xform': True,
        'initial_header_level': 3,
        "default_reference_context": default_reference_context,
        "link_base": reverse('django-admindocs-docroot'***REMOVED***.rstrip('/'***REMOVED***,
        'raw_enabled': False,
        'file_insertion_enabled': False,
***REMOVED***
    if thing_being_parsed:
        thing_being_parsed = force_bytes("<%s>" % thing_being_parsed***REMOVED***
    # Wrap ``text`` in some reST that sets the default role to ``cmsreference``,
    # then restores it.
    source = ***REMOVED***
.. default-role:: cmsreference

%s

.. default-role::
***REMOVED***
    parts = docutils.core.publish_parts(
        source % text,
        source_path=thing_being_parsed, destination_path=None,
        writer_name='html', settings_overrides=overrides,
    ***REMOVED***
    return mark_safe(parts['fragment'***REMOVED******REMOVED***

#
# reST roles
#
ROLES = {
    'model': '%s/models/%s/',
    'view': '%s/views/%s/',
    'template': '%s/templates/%s/',
    'filter': '%s/filters/#%s',
    'tag': '%s/tags/#%s',
***REMOVED***


def create_reference_role(rolename, urlbase***REMOVED***:
    def _role(name, rawtext, text, lineno, inliner, options=None, content=None***REMOVED***:
        if options is None:
            options = {***REMOVED***
        if content is None:
            content = [***REMOVED***
        node = docutils.nodes.reference(
            rawtext,
            text,
            refuri=(urlbase % (
                inliner.document.settings.link_base,
                text.lower(***REMOVED***,
            ***REMOVED******REMOVED***,
            **options
        ***REMOVED***
        return [node***REMOVED***, [***REMOVED***
    docutils.parsers.rst.roles.register_canonical_role(rolename, _role***REMOVED***


def default_reference_role(name, rawtext, text, lineno, inliner, options=None, content=None***REMOVED***:
    if options is None:
        options = {***REMOVED***
    if content is None:
        content = [***REMOVED***
    context = inliner.document.settings.default_reference_context
    node = docutils.nodes.reference(
        rawtext,
        text,
        refuri=(ROLES[context***REMOVED*** % (
            inliner.document.settings.link_base,
            text.lower(***REMOVED***,
        ***REMOVED******REMOVED***,
        **options
    ***REMOVED***
    return [node***REMOVED***, [***REMOVED***

if docutils_is_available:
    docutils.parsers.rst.roles.register_canonical_role('cmsreference', default_reference_role***REMOVED***

    for name, urlbase in ROLES.items(***REMOVED***:
        create_reference_role(name, urlbase***REMOVED***
