import time
from importlib import import_module

from django.conf import settings
from django.contrib.sessions.backends.base import UpdateError
from django.shortcuts import redirect
from django.utils.cache import patch_vary_headers
from django.utils.deprecation import MiddlewareMixin
from django.utils.http import cookie_date


class SessionMiddleware(MiddlewareMixin***REMOVED***:
    def __init__(self, get_response=None***REMOVED***:
        self.get_response = get_response
        engine = import_module(settings.SESSION_ENGINE***REMOVED***
        self.SessionStore = engine.SessionStore

    def process_request(self, request***REMOVED***:
        session_key = request.COOKIES.get(settings.SESSION_COOKIE_NAME***REMOVED***
        request.session = self.SessionStore(session_key***REMOVED***

    def process_response(self, request, response***REMOVED***:
        ***REMOVED***
        If request.session was modified, or if the configuration is to save the
        session every time, save the changes and set a session cookie or delete
        the session cookie if the session has been emptied.
        ***REMOVED***
        ***REMOVED***
            accessed = request.session.accessed
            modified = request.session.modified
            empty = request.session.is_empty(***REMOVED***
        except AttributeError:
            pass
        else:
            # First check if we need to delete this cookie.
            # The session should be deleted only if the session is entirely empty
            if settings.SESSION_COOKIE_NAME in request.COOKIES and empty:
                response.delete_cookie(
                    settings.SESSION_COOKIE_NAME,
                    path=settings.SESSION_COOKIE_PATH,
                    domain=settings.SESSION_COOKIE_DOMAIN,
                ***REMOVED***
            else:
                if accessed:
                    patch_vary_headers(response, ('Cookie',***REMOVED******REMOVED***
                if (modified or settings.SESSION_SAVE_EVERY_REQUEST***REMOVED*** and not empty:
                    if request.session.get_expire_at_browser_close(***REMOVED***:
                        max_age = None
                        expires = None
                    else:
                        max_age = request.session.get_expiry_age(***REMOVED***
                        expires_time = time.time(***REMOVED*** + max_age
                        expires = cookie_date(expires_time***REMOVED***
                    # Save the session data and refresh the client cookie.
                    # Skip session save for 500 responses, refs #3881.
                    if response.status_code != 500:
                        ***REMOVED***
                            request.session.save(***REMOVED***
                        except UpdateError:
                            # The user is now logged out; redirecting to same
                            # page will result in a redirect to the login page
                            # if required.
                            return redirect(request.path***REMOVED***
                        response.set_cookie(
                            settings.SESSION_COOKIE_NAME,
                            request.session.session_key, max_age=max_age,
                            expires=expires, domain=settings.SESSION_COOKIE_DOMAIN,
                            path=settings.SESSION_COOKIE_PATH,
                            secure=settings.SESSION_COOKIE_SECURE or None,
                            httponly=settings.SESSION_COOKIE_HTTPONLY or None,
                        ***REMOVED***
        return response
