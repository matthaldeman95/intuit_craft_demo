from __future__ import unicode_literals

import base64
import logging
import string
from datetime import datetime, timedelta

from django.conf import settings
from django.contrib.sessions.exceptions import SuspiciousSession
from django.core.exceptions import SuspiciousOperation
from django.utils import timezone
from django.utils.crypto import (
    constant_time_compare, get_random_string, salted_hmac,
***REMOVED***
from django.utils.encoding import force_bytes, force_text
from django.utils.module_loading import import_string

# session_key should not be case sensitive because some backends can store it
# on case insensitive file systems.
VALID_KEY_CHARS = string.ascii_lowercase + string.digits


class CreateError(Exception***REMOVED***:
    ***REMOVED***
    Used internally as a consistent exception type to catch from save (see the
    docstring for SessionBase.save(***REMOVED*** for details***REMOVED***.
    ***REMOVED***
    pass


class UpdateError(Exception***REMOVED***:
    ***REMOVED***
    Occurs if Django tries to update a session that was deleted.
    ***REMOVED***
    pass


class SessionBase(object***REMOVED***:
    ***REMOVED***
    Base class for all Session classes.
    ***REMOVED***
    TEST_COOKIE_NAME = 'testcookie'
    TEST_COOKIE_VALUE = 'worked'

    __not_given = object(***REMOVED***

    def __init__(self, session_key=None***REMOVED***:
        self._session_key = session_key
        self.accessed = False
        self.modified = False
        self.serializer = import_string(settings.SESSION_SERIALIZER***REMOVED***

    def __contains__(self, key***REMOVED***:
        return key in self._session

    def __getitem__(self, key***REMOVED***:
        return self._session[key***REMOVED***

    def __setitem__(self, key, value***REMOVED***:
        self._session[key***REMOVED*** = value
        self.modified = True

    def __delitem__(self, key***REMOVED***:
        del self._session[key***REMOVED***
        self.modified = True

    def get(self, key, default=None***REMOVED***:
        return self._session.get(key, default***REMOVED***

    def pop(self, key, default=__not_given***REMOVED***:
        self.modified = self.modified or key in self._session
        args = (***REMOVED*** if default is self.__not_given else (default,***REMOVED***
        return self._session.pop(key, *args***REMOVED***

    def setdefault(self, key, value***REMOVED***:
        if key in self._session:
            return self._session[key***REMOVED***
        else:
            self.modified = True
            self._session[key***REMOVED*** = value
            return value

    def set_test_cookie(self***REMOVED***:
        self[self.TEST_COOKIE_NAME***REMOVED*** = self.TEST_COOKIE_VALUE

    def test_cookie_worked(self***REMOVED***:
        return self.get(self.TEST_COOKIE_NAME***REMOVED*** == self.TEST_COOKIE_VALUE

    def delete_test_cookie(self***REMOVED***:
        del self[self.TEST_COOKIE_NAME***REMOVED***

    def _hash(self, value***REMOVED***:
        key_salt = "django.contrib.sessions" + self.__class__.__name__
        return salted_hmac(key_salt, value***REMOVED***.hexdigest(***REMOVED***

    def encode(self, session_dict***REMOVED***:
        "Returns the given session dictionary serialized and encoded as a string."
        serialized = self.serializer(***REMOVED***.dumps(session_dict***REMOVED***
        hash = self._hash(serialized***REMOVED***
        return base64.b64encode(hash.encode(***REMOVED*** + b":" + serialized***REMOVED***.decode('ascii'***REMOVED***

    def decode(self, session_data***REMOVED***:
        encoded_data = base64.b64decode(force_bytes(session_data***REMOVED******REMOVED***
        ***REMOVED***
            # could produce ValueError if there is no ':'
            hash, serialized = encoded_data.split(b':', 1***REMOVED***
            expected_hash = self._hash(serialized***REMOVED***
            if not constant_time_compare(hash.decode(***REMOVED***, expected_hash***REMOVED***:
                raise SuspiciousSession("Session data corrupted"***REMOVED***
            else:
                return self.serializer(***REMOVED***.loads(serialized***REMOVED***
        except Exception as e:
            # ValueError, SuspiciousOperation, unpickling exceptions. If any of
            # these happen, just return an empty dictionary (an empty session***REMOVED***.
            if isinstance(e, SuspiciousOperation***REMOVED***:
                logger = logging.getLogger('django.security.%s' % e.__class__.__name__***REMOVED***
                logger.warning(force_text(e***REMOVED******REMOVED***
            return {***REMOVED***

    def update(self, dict_***REMOVED***:
        self._session.update(dict_***REMOVED***
        self.modified = True

    def has_key(self, key***REMOVED***:
        return key in self._session

    def keys(self***REMOVED***:
        return self._session.keys(***REMOVED***

    def values(self***REMOVED***:
        return self._session.values(***REMOVED***

    def items(self***REMOVED***:
        return self._session.items(***REMOVED***

    def iterkeys(self***REMOVED***:
        return self._session.iterkeys(***REMOVED***

    def itervalues(self***REMOVED***:
        return self._session.itervalues(***REMOVED***

    def iteritems(self***REMOVED***:
        return self._session.iteritems(***REMOVED***

    def clear(self***REMOVED***:
        # To avoid unnecessary persistent storage accesses, we set up the
        # internals directly (loading data wastes time, since we are going to
        # set it to an empty dict anyway***REMOVED***.
        self._session_cache = {***REMOVED***
        self.accessed = True
        self.modified = True

    def is_empty(self***REMOVED***:
        "Returns True when there is no session_key and the session is empty"
        ***REMOVED***
            return not bool(self._session_key***REMOVED*** and not self._session_cache
        except AttributeError:
            return True

    def _get_new_session_key(self***REMOVED***:
        "Returns session key that isn't being used."
        while True:
            session_key = get_random_string(32, VALID_KEY_CHARS***REMOVED***
            if not self.exists(session_key***REMOVED***:
                break
        return session_key

    def _get_or_create_session_key(self***REMOVED***:
        if self._session_key is None:
            self._session_key = self._get_new_session_key(***REMOVED***
        return self._session_key

    def _validate_session_key(self, key***REMOVED***:
        ***REMOVED***
        Key must be truthy and at least 8 characters long. 8 characters is an
        arbitrary lower bound for some minimal key security.
        ***REMOVED***
        return key and len(key***REMOVED*** >= 8

    def _get_session_key(self***REMOVED***:
        return self.__session_key

    def _set_session_key(self, value***REMOVED***:
        ***REMOVED***
        Validate session key on assignment. Invalid values will set to None.
        ***REMOVED***
        if self._validate_session_key(value***REMOVED***:
            self.__session_key = value
        else:
            self.__session_key = None

    session_key = property(_get_session_key***REMOVED***
    _session_key = property(_get_session_key, _set_session_key***REMOVED***

    def _get_session(self, no_load=False***REMOVED***:
        ***REMOVED***
        Lazily loads session from storage (unless "no_load" is True, when only
        an empty dict is stored***REMOVED*** and stores it in the current instance.
        ***REMOVED***
        self.accessed = True
        ***REMOVED***
            return self._session_cache
        except AttributeError:
            if self.session_key is None or no_load:
                self._session_cache = {***REMOVED***
            else:
                self._session_cache = self.load(***REMOVED***
        return self._session_cache

    _session = property(_get_session***REMOVED***

    def get_expiry_age(self, **kwargs***REMOVED***:
        ***REMOVED***Get the number of seconds until the session expires.

        Optionally, this function accepts `modification` and `expiry` keyword
        arguments specifying the modification and expiry of the session.
        ***REMOVED***
        ***REMOVED***
            modification = kwargs['modification'***REMOVED***
        except KeyError:
            modification = timezone.now(***REMOVED***
        # Make the difference between "expiry=None passed in kwargs" and
        # "expiry not passed in kwargs", in order to guarantee not to trigger
        # self.load(***REMOVED*** when expiry is provided.
        ***REMOVED***
            expiry = kwargs['expiry'***REMOVED***
        except KeyError:
            expiry = self.get('_session_expiry'***REMOVED***

        if not expiry:   # Checks both None and 0 cases
            return settings.SESSION_COOKIE_AGE
        if not isinstance(expiry, datetime***REMOVED***:
            return expiry
        delta = expiry - modification
        return delta.days * 86400 + delta.seconds

    def get_expiry_date(self, **kwargs***REMOVED***:
        ***REMOVED***Get session the expiry date (as a datetime object***REMOVED***.

        Optionally, this function accepts `modification` and `expiry` keyword
        arguments specifying the modification and expiry of the session.
        ***REMOVED***
        ***REMOVED***
            modification = kwargs['modification'***REMOVED***
        except KeyError:
            modification = timezone.now(***REMOVED***
        # Same comment as in get_expiry_age
        ***REMOVED***
            expiry = kwargs['expiry'***REMOVED***
        except KeyError:
            expiry = self.get('_session_expiry'***REMOVED***

        if isinstance(expiry, datetime***REMOVED***:
            return expiry
        if not expiry:   # Checks both None and 0 cases
            expiry = settings.SESSION_COOKIE_AGE
        return modification + timedelta(seconds=expiry***REMOVED***

    def set_expiry(self, value***REMOVED***:
        ***REMOVED***
        Sets a custom expiration for the session. ``value`` can be an integer,
        a Python ``datetime`` or ``timedelta`` object or ``None``.

        If ``value`` is an integer, the session will expire after that many
        seconds of inactivity. If set to ``0`` then the session will expire on
        browser close.

        If ``value`` is a ``datetime`` or ``timedelta`` object, the session
        will expire at that specific future time.

        If ``value`` is ``None``, the session uses the global session expiry
        policy.
        ***REMOVED***
        if value is None:
            # Remove any custom expiration for this session.
            ***REMOVED***
                del self['_session_expiry'***REMOVED***
            except KeyError:
                pass
            return
        if isinstance(value, timedelta***REMOVED***:
            value = timezone.now(***REMOVED*** + value
        self['_session_expiry'***REMOVED*** = value

    def get_expire_at_browser_close(self***REMOVED***:
        ***REMOVED***
        Returns ``True`` if the session is set to expire when the browser
        closes, and ``False`` if there's an expiry date. Use
        ``get_expiry_date(***REMOVED***`` or ``get_expiry_age(***REMOVED***`` to find the actual expiry
        date/age, if there is one.
        ***REMOVED***
        if self.get('_session_expiry'***REMOVED*** is None:
            return settings.SESSION_EXPIRE_AT_BROWSER_CLOSE
        return self.get('_session_expiry'***REMOVED*** == 0

    def flush(self***REMOVED***:
        ***REMOVED***
        Removes the current session data from the database and regenerates the
        key.
        ***REMOVED***
        self.clear(***REMOVED***
        self.delete(***REMOVED***
        self._session_key = None

    def cycle_key(self***REMOVED***:
        ***REMOVED***
        Creates a new session key, while retaining the current session data.
        ***REMOVED***
        data = self._session_cache
        key = self.session_key
        self.create(***REMOVED***
        self._session_cache = data
        if key:
            self.delete(key***REMOVED***

    # Methods that child classes must implement.

    def exists(self, session_key***REMOVED***:
        ***REMOVED***
        Returns True if the given session_key already exists.
        ***REMOVED***
        raise NotImplementedError('subclasses of SessionBase must provide an exists(***REMOVED*** method'***REMOVED***

    def create(self***REMOVED***:
        ***REMOVED***
        Creates a new session instance. Guaranteed to create a new object with
        a unique key and will have saved the result once (with empty data***REMOVED***
        before the method returns.
        ***REMOVED***
        raise NotImplementedError('subclasses of SessionBase must provide a create(***REMOVED*** method'***REMOVED***

    def save(self, must_create=False***REMOVED***:
        ***REMOVED***
        Saves the session data. If 'must_create' is True, a new session object
        is created (otherwise a CreateError exception is raised***REMOVED***. Otherwise,
        save(***REMOVED*** only updates an existing object and does not create one
        (an UpdateError is raised***REMOVED***.
        ***REMOVED***
        raise NotImplementedError('subclasses of SessionBase must provide a save(***REMOVED*** method'***REMOVED***

    def delete(self, session_key=None***REMOVED***:
        ***REMOVED***
        Deletes the session data under this key. If the key is None, the
        current session key value is used.
        ***REMOVED***
        raise NotImplementedError('subclasses of SessionBase must provide a delete(***REMOVED*** method'***REMOVED***

    def load(self***REMOVED***:
        ***REMOVED***
        Loads the session data and returns a dictionary.
        ***REMOVED***
        raise NotImplementedError('subclasses of SessionBase must provide a load(***REMOVED*** method'***REMOVED***

    @classmethod
    def clear_expired(cls***REMOVED***:
        ***REMOVED***
        Remove expired sessions from the session store.

        If this operation isn't possible on a given backend, it should raise
        NotImplementedError. If it isn't necessary, because the backend has
        a built-in expiration mechanism, it should be a no-op.
        ***REMOVED***
        raise NotImplementedError('This backend does not support clear_expired(***REMOVED***.'***REMOVED***
