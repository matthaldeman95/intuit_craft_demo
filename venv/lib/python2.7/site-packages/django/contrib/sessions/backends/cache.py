from django.conf import settings
from django.contrib.sessions.backends.base import (
    CreateError, SessionBase, UpdateError,
***REMOVED***
from django.core.cache import caches
from django.utils.six.moves import range

KEY_PREFIX = "django.contrib.sessions.cache"


class SessionStore(SessionBase***REMOVED***:
    ***REMOVED***
    A cache-based session store.
    ***REMOVED***
    cache_key_prefix = KEY_PREFIX

    def __init__(self, session_key=None***REMOVED***:
        self._cache = caches[settings.SESSION_CACHE_ALIAS***REMOVED***
        super(SessionStore, self***REMOVED***.__init__(session_key***REMOVED***

    @property
    def cache_key(self***REMOVED***:
        return self.cache_key_prefix + self._get_or_create_session_key(***REMOVED***

    def load(self***REMOVED***:
        ***REMOVED***
            session_data = self._cache.get(self.cache_key***REMOVED***
        except Exception:
            # Some backends (e.g. memcache***REMOVED*** raise an exception on invalid
            # cache keys. If this happens, reset the session. See #17810.
            session_data = None
        if session_data is not None:
            return session_data
        self._session_key = None
        return {***REMOVED***

    def create(self***REMOVED***:
        # Because a cache can fail silently (e.g. memcache***REMOVED***, we don't know if
        # we are failing to create a new session because of a key collision or
        # because the cache is missing. So we try for a (large***REMOVED*** number of times
        # and then raise an exception. That's the risk you shoulder if using
        # cache backing.
        for i in range(10000***REMOVED***:
            self._session_key = self._get_new_session_key(***REMOVED***
            ***REMOVED***
                self.save(must_create=True***REMOVED***
            except CreateError:
                continue
            self.modified = True
            return
        raise RuntimeError(
            "Unable to create a new session key. "
            "It is likely that the cache is unavailable."***REMOVED***

    def save(self, must_create=False***REMOVED***:
        if self.session_key is None:
            return self.create(***REMOVED***
        if must_create:
            func = self._cache.add
        elif self._cache.get(self.cache_key***REMOVED*** is not None:
            func = self._cache.set
        else:
            raise UpdateError
        result = func(self.cache_key,
                      self._get_session(no_load=must_create***REMOVED***,
                      self.get_expiry_age(***REMOVED******REMOVED***
        if must_create and not result:
            raise CreateError

    def exists(self, session_key***REMOVED***:
        return session_key and (self.cache_key_prefix + session_key***REMOVED*** in self._cache

    def delete(self, session_key=None***REMOVED***:
        if session_key is None:
            if self.session_key is None:
                return
            session_key = self.session_key
        self._cache.delete(self.cache_key_prefix + session_key***REMOVED***

    @classmethod
    def clear_expired(cls***REMOVED***:
        pass
