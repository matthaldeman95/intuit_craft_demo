***REMOVED***
Cached, database-backed sessions.
***REMOVED***

import logging

from django.conf import settings
from django.contrib.sessions.backends.db import SessionStore as DBStore
from django.core.cache import caches
from django.core.exceptions import SuspiciousOperation
from django.utils import timezone
from django.utils.encoding import force_text

KEY_PREFIX = "django.contrib.sessions.cached_db"


class SessionStore(DBStore***REMOVED***:
    ***REMOVED***
    Implements cached, database backed sessions.
    ***REMOVED***
    cache_key_prefix = KEY_PREFIX

    def __init__(self, session_key=None***REMOVED***:
        self._cache = caches[settings.SESSION_CACHE_ALIAS***REMOVED***
        super(SessionStore, self***REMOVED***.__init__(session_key***REMOVED***

    @property
    def cache_key(self***REMOVED***:
        return self.cache_key_prefix + self._get_or_create_session_key(***REMOVED***

    def load(self***REMOVED***:
        ***REMOVED***
            data = self._cache.get(self.cache_key***REMOVED***
        except Exception:
            # Some backends (e.g. memcache***REMOVED*** raise an exception on invalid
            # cache keys. If this happens, reset the session. See #17810.
            data = None

        if data is None:
            # Duplicate DBStore.load, because we need to keep track
            # of the expiry date to set it properly in the cache.
            ***REMOVED***
                s = self.model.objects.get(
                    session_key=self.session_key,
                    expire_date__gt=timezone.now(***REMOVED***
                ***REMOVED***
                data = self.decode(s.session_data***REMOVED***
                self._cache.set(self.cache_key, data, self.get_expiry_age(expiry=s.expire_date***REMOVED******REMOVED***
            except (self.model.DoesNotExist, SuspiciousOperation***REMOVED*** as e:
                if isinstance(e, SuspiciousOperation***REMOVED***:
                    logger = logging.getLogger('django.security.%s' % e.__class__.__name__***REMOVED***
                    logger.warning(force_text(e***REMOVED******REMOVED***
                self._session_key = None
                data = {***REMOVED***
        return data

    def exists(self, session_key***REMOVED***:
        if session_key and (self.cache_key_prefix + session_key***REMOVED*** in self._cache:
            return True
        return super(SessionStore, self***REMOVED***.exists(session_key***REMOVED***

    def save(self, must_create=False***REMOVED***:
        super(SessionStore, self***REMOVED***.save(must_create***REMOVED***
        self._cache.set(self.cache_key, self._session, self.get_expiry_age(***REMOVED******REMOVED***

    def delete(self, session_key=None***REMOVED***:
        super(SessionStore, self***REMOVED***.delete(session_key***REMOVED***
        if session_key is None:
            if self.session_key is None:
                return
            session_key = self.session_key
        self._cache.delete(self.cache_key_prefix + session_key***REMOVED***

    def flush(self***REMOVED***:
        ***REMOVED***
        Removes the current session data from the database and regenerates the
        key.
        ***REMOVED***
        self.clear(***REMOVED***
        self.delete(self.session_key***REMOVED***
        self._session_key = None
