from django.conf import settings
from django.contrib.staticfiles import utils
from django.contrib.staticfiles.views import serve
from django.core.handlers.wsgi import WSGIHandler, get_path_info
from django.utils.six.moves.urllib.parse import urlparse
from django.utils.six.moves.urllib.request import url2pathname


class StaticFilesHandler(WSGIHandler***REMOVED***:
    ***REMOVED***
    WSGI middleware that intercepts calls to the static files directory, as
    defined by the STATIC_URL setting, and serves those files.
    ***REMOVED***
    # May be used to differentiate between handler types (e.g. in a
    # request_finished signal***REMOVED***
    handles_files = True

    def __init__(self, application***REMOVED***:
        self.application = application
        self.base_url = urlparse(self.get_base_url(***REMOVED******REMOVED***
        super(StaticFilesHandler, self***REMOVED***.__init__(***REMOVED***

    def get_base_url(self***REMOVED***:
        utils.check_settings(***REMOVED***
        return settings.STATIC_URL

    def _should_handle(self, path***REMOVED***:
        ***REMOVED***
        Checks if the path should be handled. Ignores the path if:

        * the host is provided as part of the base_url
        * the request's path isn't under the media path (or equal***REMOVED***
        ***REMOVED***
        return path.startswith(self.base_url[2***REMOVED******REMOVED*** and not self.base_url[1***REMOVED***

    def file_path(self, url***REMOVED***:
        ***REMOVED***
        Returns the relative path to the media file on disk for the given URL.
        ***REMOVED***
        relative_url = url[len(self.base_url[2***REMOVED******REMOVED***:***REMOVED***
        return url2pathname(relative_url***REMOVED***

    def serve(self, request***REMOVED***:
        ***REMOVED***
        Actually serves the request path.
        ***REMOVED***
        return serve(request, self.file_path(request.path***REMOVED***, insecure=True***REMOVED***

    def get_response(self, request***REMOVED***:
        from django.http import Http404

        if self._should_handle(request.path***REMOVED***:
            ***REMOVED***
                return self.serve(request***REMOVED***
            except Http404 as e:
                if settings.DEBUG:
                    from django.views import debug
                    return debug.technical_404_response(request, e***REMOVED***
        return super(StaticFilesHandler, self***REMOVED***.get_response(request***REMOVED***

    def __call__(self, environ, start_response***REMOVED***:
        if not self._should_handle(get_path_info(environ***REMOVED******REMOVED***:
            return self.application(environ, start_response***REMOVED***
        return super(StaticFilesHandler, self***REMOVED***.__call__(environ, start_response***REMOVED***
