***REMOVED***
from collections import OrderedDict

from django.apps import apps
from django.conf import settings
from django.contrib.staticfiles import utils
from django.core.exceptions import ImproperlyConfigured
from django.core.files.storage import (
    FileSystemStorage, Storage, default_storage,
***REMOVED***
from django.utils import lru_cache, six
from django.utils._os import safe_join
from django.utils.functional import LazyObject, empty
from django.utils.module_loading import import_string

# To keep track on which directories the finder has searched the static files.
searched_locations = [***REMOVED***


class BaseFinder(object***REMOVED***:
    ***REMOVED***
    A base file finder to be used for custom staticfiles finder classes.
    ***REMOVED***

    def find(self, path, all=False***REMOVED***:
        ***REMOVED***
        Given a relative file path this ought to find an
        absolute file path.

        If the ``all`` parameter is ``False`` (default***REMOVED*** only
        the first found file path will be returned; if set
        to ``True`` a list of all found files paths is returned.
        ***REMOVED***
        raise NotImplementedError('subclasses of BaseFinder must provide a find(***REMOVED*** method'***REMOVED***

    def list(self, ignore_patterns***REMOVED***:
        ***REMOVED***
        Given an optional list of paths to ignore, this should return
        a two item iterable consisting of the relative path and storage
        instance.
        ***REMOVED***
        raise NotImplementedError('subclasses of BaseFinder must provide a list(***REMOVED*** method'***REMOVED***


class FileSystemFinder(BaseFinder***REMOVED***:
    ***REMOVED***
    A static files finder that uses the ``STATICFILES_DIRS`` setting
    to locate files.
    ***REMOVED***
    def __init__(self, app_names=None, *args, **kwargs***REMOVED***:
        # List of locations with static files
        self.locations = [***REMOVED***
        # Maps dir paths to an appropriate storage instance
        self.storages = OrderedDict(***REMOVED***
        if not isinstance(settings.STATICFILES_DIRS, (list, tuple***REMOVED******REMOVED***:
            raise ImproperlyConfigured(
                "Your STATICFILES_DIRS setting is not a tuple or list; "
                "perhaps you forgot a trailing comma?"***REMOVED***
        for root in settings.STATICFILES_DIRS:
            if isinstance(root, (list, tuple***REMOVED******REMOVED***:
                prefix, root = root
            else:
                prefix = ''
            if settings.STATIC_ROOT and os.path.abspath(settings.STATIC_ROOT***REMOVED*** == os.path.abspath(root***REMOVED***:
                raise ImproperlyConfigured(
                    "The STATICFILES_DIRS setting should "
                    "not contain the STATIC_ROOT setting"***REMOVED***
            if (prefix, root***REMOVED*** not in self.locations:
                self.locations.append((prefix, root***REMOVED******REMOVED***
        for prefix, root in self.locations:
            filesystem_storage = FileSystemStorage(location=root***REMOVED***
            filesystem_storage.prefix = prefix
            self.storages[root***REMOVED*** = filesystem_storage
        super(FileSystemFinder, self***REMOVED***.__init__(*args, **kwargs***REMOVED***

    def find(self, path, all=False***REMOVED***:
        ***REMOVED***
        Looks for files in the extra locations
        as defined in ``STATICFILES_DIRS``.
        ***REMOVED***
        matches = [***REMOVED***
        for prefix, root in self.locations:
            if root not in searched_locations:
                searched_locations.append(root***REMOVED***
            matched_path = self.find_location(root, path, prefix***REMOVED***
            if matched_path:
                if not all:
                    return matched_path
                matches.append(matched_path***REMOVED***
        return matches

    def find_location(self, root, path, prefix=None***REMOVED***:
        ***REMOVED***
        Finds a requested static file in a location, returning the found
        absolute path (or ``None`` if no match***REMOVED***.
        ***REMOVED***
        if prefix:
            prefix = '%s%s' % (prefix, os.sep***REMOVED***
            if not path.startswith(prefix***REMOVED***:
                return None
            path = path[len(prefix***REMOVED***:***REMOVED***
        path = safe_join(root, path***REMOVED***
        if os.path.exists(path***REMOVED***:
            return path

    def list(self, ignore_patterns***REMOVED***:
        ***REMOVED***
        List all files in all locations.
        ***REMOVED***
        for prefix, root in self.locations:
            storage = self.storages[root***REMOVED***
            for path in utils.get_files(storage, ignore_patterns***REMOVED***:
                yield path, storage


class AppDirectoriesFinder(BaseFinder***REMOVED***:
    ***REMOVED***
    A static files finder that looks in the directory of each app as
    specified in the source_dir attribute.
    ***REMOVED***
    storage_class = FileSystemStorage
    source_dir = 'static'

    def __init__(self, app_names=None, *args, **kwargs***REMOVED***:
        # The list of apps that are handled
        self.apps = [***REMOVED***
        # Mapping of app names to storage instances
        self.storages = OrderedDict(***REMOVED***
        app_configs = apps.get_app_configs(***REMOVED***
        if app_names:
            app_names = set(app_names***REMOVED***
            app_configs = [ac for ac in app_configs if ac.name in app_names***REMOVED***
        for app_config in app_configs:
            app_storage = self.storage_class(
                os.path.join(app_config.path, self.source_dir***REMOVED******REMOVED***
            if os.path.isdir(app_storage.location***REMOVED***:
                self.storages[app_config.name***REMOVED*** = app_storage
                if app_config.name not in self.apps:
                    self.apps.append(app_config.name***REMOVED***
        super(AppDirectoriesFinder, self***REMOVED***.__init__(*args, **kwargs***REMOVED***

    def list(self, ignore_patterns***REMOVED***:
        ***REMOVED***
        List all files in all app storages.
        ***REMOVED***
        for storage in six.itervalues(self.storages***REMOVED***:
            if storage.exists(''***REMOVED***:  # check if storage location exists
                for path in utils.get_files(storage, ignore_patterns***REMOVED***:
                    yield path, storage

    def find(self, path, all=False***REMOVED***:
        ***REMOVED***
        Looks for files in the app directories.
        ***REMOVED***
        matches = [***REMOVED***
        for app in self.apps:
            app_location = self.storages[app***REMOVED***.location
            if app_location not in searched_locations:
                searched_locations.append(app_location***REMOVED***
            match = self.find_in_app(app, path***REMOVED***
            if match:
                if not all:
                    return match
                matches.append(match***REMOVED***
        return matches

    def find_in_app(self, app, path***REMOVED***:
        ***REMOVED***
        Find a requested static file in an app's static locations.
        ***REMOVED***
        storage = self.storages.get(app***REMOVED***
        if storage:
            # only try to find a file if the source dir actually exists
            if storage.exists(path***REMOVED***:
                matched_path = storage.path(path***REMOVED***
                if matched_path:
                    return matched_path


class BaseStorageFinder(BaseFinder***REMOVED***:
    ***REMOVED***
    A base static files finder to be used to extended
    with an own storage class.
    ***REMOVED***
    storage = None

    def __init__(self, storage=None, *args, **kwargs***REMOVED***:
        if storage is not None:
            self.storage = storage
        if self.storage is None:
            raise ImproperlyConfigured("The staticfiles storage finder %r "
                                       "doesn't have a storage class "
                                       "assigned." % self.__class__***REMOVED***
        # Make sure we have an storage instance here.
        if not isinstance(self.storage, (Storage, LazyObject***REMOVED******REMOVED***:
            self.storage = self.storage(***REMOVED***
        super(BaseStorageFinder, self***REMOVED***.__init__(*args, **kwargs***REMOVED***

    def find(self, path, all=False***REMOVED***:
        ***REMOVED***
        Looks for files in the default file storage, if it's local.
        ***REMOVED***
        ***REMOVED***
            self.storage.path(''***REMOVED***
        except NotImplementedError:
            pass
        else:
            if self.storage.location not in searched_locations:
                searched_locations.append(self.storage.location***REMOVED***
            if self.storage.exists(path***REMOVED***:
                match = self.storage.path(path***REMOVED***
                if all:
                    match = [match***REMOVED***
                return match
        return [***REMOVED***

    def list(self, ignore_patterns***REMOVED***:
        ***REMOVED***
        List all files of the storage.
        ***REMOVED***
        for path in utils.get_files(self.storage, ignore_patterns***REMOVED***:
            yield path, self.storage


class DefaultStorageFinder(BaseStorageFinder***REMOVED***:
    ***REMOVED***
    A static files finder that uses the default storage backend.
    ***REMOVED***
    storage = default_storage

    def __init__(self, *args, **kwargs***REMOVED***:
        super(DefaultStorageFinder, self***REMOVED***.__init__(*args, **kwargs***REMOVED***
        base_location = getattr(self.storage, 'base_location', empty***REMOVED***
        if not base_location:
            raise ImproperlyConfigured("The storage backend of the "
                                       "staticfiles finder %r doesn't have "
                                       "a valid location." % self.__class__***REMOVED***


def find(path, all=False***REMOVED***:
    ***REMOVED***
    Find a static file with the given path using all enabled finders.

    If ``all`` is ``False`` (default***REMOVED***, return the first matching
    absolute path (or ``None`` if no match***REMOVED***. Otherwise return a list.
    ***REMOVED***
    searched_locations[:***REMOVED*** = [***REMOVED***
    matches = [***REMOVED***
    for finder in get_finders(***REMOVED***:
        result = finder.find(path, all=all***REMOVED***
        if not all and result:
            return result
        if not isinstance(result, (list, tuple***REMOVED******REMOVED***:
            result = [result***REMOVED***
        matches.extend(result***REMOVED***
    if matches:
        return matches
    # No match.
    return [***REMOVED*** if all else None


def get_finders(***REMOVED***:
    for finder_path in settings.STATICFILES_FINDERS:
        yield get_finder(finder_path***REMOVED***


@lru_cache.lru_cache(maxsize=None***REMOVED***
def get_finder(import_path***REMOVED***:
    ***REMOVED***
    Imports the staticfiles finder class described by import_path, where
    import_path is the full Python path to the class.
    ***REMOVED***
    Finder = import_string(import_path***REMOVED***
    if not issubclass(Finder, BaseFinder***REMOVED***:
        raise ImproperlyConfigured('Finder "%s" is not a subclass of "%s"' %
                                   (Finder, BaseFinder***REMOVED******REMOVED***
    return Finder(***REMOVED***
