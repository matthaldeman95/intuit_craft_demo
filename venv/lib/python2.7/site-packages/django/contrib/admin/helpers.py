from __future__ import unicode_literals

import json
import warnings

from django import forms
from django.conf import settings
from django.contrib.admin.utils import (
    display_for_field, flatten_fieldsets, help_text_for_field, label_for_field,
    lookup_field,
***REMOVED***
from django.core.exceptions import ObjectDoesNotExist
from django.db.models.fields.related import ManyToManyRel
from django.forms.utils import flatatt
from django.template.defaultfilters import capfirst, linebreaksbr
from django.utils import six
from django.utils.deprecation import RemovedInDjango20Warning
from django.utils.encoding import force_text, smart_text
from django.utils.html import conditional_escape, format_html
from django.utils.safestring import mark_safe
from django.utils.translation import ugettext, ugettext_lazy as _

ACTION_CHECKBOX_NAME = '_selected_action'


class ActionForm(forms.Form***REMOVED***:
    action = forms.ChoiceField(label=_('Action:'***REMOVED******REMOVED***
    select_across = forms.BooleanField(
        label='',
        required=False,
        initial=0,
        widget=forms.HiddenInput({'class': 'select-across'***REMOVED******REMOVED***,
    ***REMOVED***

checkbox = forms.CheckboxInput({'class': 'action-select'***REMOVED***, lambda value: False***REMOVED***


class AdminForm(object***REMOVED***:
    def __init__(self, form, fieldsets, prepopulated_fields, readonly_fields=None, model_admin=None***REMOVED***:
        self.form, self.fieldsets = form, fieldsets
        self.prepopulated_fields = [{
            'field': form[field_name***REMOVED***,
            'dependencies': [form[f***REMOVED*** for f in dependencies***REMOVED***
    ***REMOVED*** for field_name, dependencies in prepopulated_fields.items(***REMOVED******REMOVED***
        self.model_admin = model_admin
        if readonly_fields is None:
            readonly_fields = (***REMOVED***
        self.readonly_fields = readonly_fields

    def __iter__(self***REMOVED***:
        for name, options in self.fieldsets:
            yield Fieldset(
                self.form, name,
                readonly_fields=self.readonly_fields,
                model_admin=self.model_admin,
                **options
            ***REMOVED***

    def _media(self***REMOVED***:
        media = self.form.media
        for fs in self:
            media = media + fs.media
        return media
    media = property(_media***REMOVED***


class Fieldset(object***REMOVED***:
    def __init__(self, form, name=None, readonly_fields=(***REMOVED***, fields=(***REMOVED***, classes=(***REMOVED***,
                 description=None, model_admin=None***REMOVED***:
        self.form = form
        self.name, self.fields = name, fields
        self.classes = ' '.join(classes***REMOVED***
        self.description = description
        self.model_admin = model_admin
        self.readonly_fields = readonly_fields

    def _media(self***REMOVED***:
        if 'collapse' in self.classes:
            extra = '' if settings.DEBUG else '.min'
            js = [
                'vendor/jquery/jquery%s.js' % extra,
                'jquery.init.js',
                'collapse%s.js' % extra,
            ***REMOVED***
            return forms.Media(js=['admin/js/%s' % url for url in js***REMOVED******REMOVED***
        return forms.Media(***REMOVED***
    media = property(_media***REMOVED***

    def __iter__(self***REMOVED***:
        for field in self.fields:
            yield Fieldline(self.form, field, self.readonly_fields, model_admin=self.model_admin***REMOVED***


class Fieldline(object***REMOVED***:
    def __init__(self, form, field, readonly_fields=None, model_admin=None***REMOVED***:
        self.form = form  # A django.forms.Form instance
        if not hasattr(field, "__iter__"***REMOVED*** or isinstance(field, six.text_type***REMOVED***:
            self.fields = [field***REMOVED***
        else:
            self.fields = field
        self.has_visible_field = not all(
            field in self.form.fields and self.form.fields[field***REMOVED***.widget.is_hidden
            for field in self.fields
        ***REMOVED***
        self.model_admin = model_admin
        if readonly_fields is None:
            readonly_fields = (***REMOVED***
        self.readonly_fields = readonly_fields

    def __iter__(self***REMOVED***:
        for i, field in enumerate(self.fields***REMOVED***:
            if field in self.readonly_fields:
                yield AdminReadonlyField(self.form, field, is_first=(i == 0***REMOVED***, model_admin=self.model_admin***REMOVED***
            else:
                yield AdminField(self.form, field, is_first=(i == 0***REMOVED******REMOVED***

    def errors(self***REMOVED***:
        return mark_safe(
            '\n'.join(
                self.form[f***REMOVED***.errors.as_ul(***REMOVED*** for f in self.fields if f not in self.readonly_fields
            ***REMOVED***.strip('\n'***REMOVED***
        ***REMOVED***


class AdminField(object***REMOVED***:
    def __init__(self, form, field, is_first***REMOVED***:
        self.field = form[field***REMOVED***  # A django.forms.BoundField instance
        self.is_first = is_first  # Whether this field is first on the line
        self.is_checkbox = isinstance(self.field.field.widget, forms.CheckboxInput***REMOVED***
        self.is_readonly = False

    def label_tag(self***REMOVED***:
        classes = [***REMOVED***
        contents = conditional_escape(force_text(self.field.label***REMOVED******REMOVED***
        if self.is_checkbox:
            classes.append('vCheckboxLabel'***REMOVED***

        if self.field.field.required:
            classes.append('required'***REMOVED***
        if not self.is_first:
            classes.append('inline'***REMOVED***
        attrs = {'class': ' '.join(classes***REMOVED******REMOVED*** if classes else {***REMOVED***
        # checkboxes should not have a label suffix as the checkbox appears
        # to the left of the label.
        return self.field.label_tag(
            contents=mark_safe(contents***REMOVED***, attrs=attrs,
            label_suffix='' if self.is_checkbox else None,
        ***REMOVED***

    def errors(self***REMOVED***:
        return mark_safe(self.field.errors.as_ul(***REMOVED******REMOVED***


class AdminReadonlyField(object***REMOVED***:
    def __init__(self, form, field, is_first, model_admin=None***REMOVED***:
        # Make self.field look a little bit like a field. This means that
        # {{ field.name ***REMOVED******REMOVED*** must be a useful class name to identify the field.
        # For convenience, store other field-related data here too.
        if callable(field***REMOVED***:
            class_name = field.__name__ if field.__name__ != '<lambda>' else ''
        else:
            class_name = field

        if form._meta.labels and class_name in form._meta.labels:
            label = form._meta.labels[class_name***REMOVED***
        else:
            label = label_for_field(field, form._meta.model, model_admin***REMOVED***

        if form._meta.help_texts and class_name in form._meta.help_texts:
            help_text = form._meta.help_texts[class_name***REMOVED***
        else:
            help_text = help_text_for_field(class_name, form._meta.model***REMOVED***

        self.field = {
            'name': class_name,
            'label': label,
            'help_text': help_text,
            'field': field,
    ***REMOVED***
        self.form = form
        self.model_admin = model_admin
        self.is_first = is_first
        self.is_checkbox = False
        self.is_readonly = True
        self.empty_value_display = model_admin.get_empty_value_display(***REMOVED***

    def label_tag(self***REMOVED***:
        attrs = {***REMOVED***
        if not self.is_first:
            attrs["class"***REMOVED*** = "inline"
        label = self.field['label'***REMOVED***
        return format_html('<label{***REMOVED***>{***REMOVED***:</label>',
                           flatatt(attrs***REMOVED***,
                           capfirst(force_text(label***REMOVED******REMOVED******REMOVED***

    def contents(self***REMOVED***:
        from django.contrib.admin.templatetags.admin_list import _boolean_icon
        field, obj, model_admin = self.field['field'***REMOVED***, self.form.instance, self.model_admin
        ***REMOVED***
            f, attr, value = lookup_field(field, obj, model_admin***REMOVED***
        except (AttributeError, ValueError, ObjectDoesNotExist***REMOVED***:
            result_repr = self.empty_value_display
        else:
            if f is None:
                boolean = getattr(attr, "boolean", False***REMOVED***
                if boolean:
                    result_repr = _boolean_icon(value***REMOVED***
                else:
                    if hasattr(value, "__html__"***REMOVED***:
                        result_repr = value
                    else:
                        result_repr = smart_text(value***REMOVED***
                        if getattr(attr, "allow_tags", False***REMOVED***:
                            warnings.warn(
                                "Deprecated allow_tags attribute used on %s. "
                                "Use django.utils.html.format_html(***REMOVED***, format_html_join(***REMOVED***, "
                                "or django.utils.safestring.mark_safe(***REMOVED*** instead." % attr,
                                RemovedInDjango20Warning
                            ***REMOVED***
                            result_repr = mark_safe(value***REMOVED***
                        else:
                            result_repr = linebreaksbr(result_repr***REMOVED***
            else:
                if isinstance(f.remote_field, ManyToManyRel***REMOVED*** and value is not None:
                    result_repr = ", ".join(map(six.text_type, value.all(***REMOVED******REMOVED******REMOVED***
                else:
                    result_repr = display_for_field(value, f, self.empty_value_display***REMOVED***
                result_repr = linebreaksbr(result_repr***REMOVED***
        return conditional_escape(result_repr***REMOVED***


class InlineAdminFormSet(object***REMOVED***:
    ***REMOVED***
    A wrapper around an inline formset for use in the admin system.
    ***REMOVED***
    def __init__(self, inline, formset, fieldsets, prepopulated_fields=None,
                 readonly_fields=None, model_admin=None***REMOVED***:
        self.opts = inline
        self.formset = formset
        self.fieldsets = fieldsets
        self.model_admin = model_admin
        if readonly_fields is None:
            readonly_fields = (***REMOVED***
        self.readonly_fields = readonly_fields
        if prepopulated_fields is None:
            prepopulated_fields = {***REMOVED***
        self.prepopulated_fields = prepopulated_fields
        self.classes = ' '.join(inline.classes***REMOVED*** if inline.classes else ''

    def __iter__(self***REMOVED***:
        for form, original in zip(self.formset.initial_forms, self.formset.get_queryset(***REMOVED******REMOVED***:
            view_on_site_url = self.opts.get_view_on_site_url(original***REMOVED***
            yield InlineAdminForm(
                self.formset, form, self.fieldsets, self.prepopulated_fields,
                original, self.readonly_fields, model_admin=self.opts,
                view_on_site_url=view_on_site_url,
            ***REMOVED***
        for form in self.formset.extra_forms:
            yield InlineAdminForm(
                self.formset, form, self.fieldsets, self.prepopulated_fields,
                None, self.readonly_fields, model_admin=self.opts,
            ***REMOVED***
        yield InlineAdminForm(
            self.formset, self.formset.empty_form,
            self.fieldsets, self.prepopulated_fields, None,
            self.readonly_fields, model_admin=self.opts,
        ***REMOVED***

    def fields(self***REMOVED***:
        fk = getattr(self.formset, "fk", None***REMOVED***
        for i, field_name in enumerate(flatten_fieldsets(self.fieldsets***REMOVED******REMOVED***:
            if fk and fk.name == field_name:
                continue
            if field_name in self.readonly_fields:
                yield {
                    'label': label_for_field(field_name, self.opts.model, self.opts***REMOVED***,
                    'widget': {'is_hidden': False***REMOVED***,
                    'required': False,
                    'help_text': help_text_for_field(field_name, self.opts.model***REMOVED***,
            ***REMOVED***
            else:
                form_field = self.formset.empty_form.fields[field_name***REMOVED***
                label = form_field.label
                if label is None:
                    label = label_for_field(field_name, self.opts.model, self.opts***REMOVED***
                yield {
                    'label': label,
                    'widget': form_field.widget,
                    'required': form_field.required,
                    'help_text': form_field.help_text,
            ***REMOVED***

    def inline_formset_data(self***REMOVED***:
        verbose_name = self.opts.verbose_name
        return json.dumps({
            'name': '#%s' % self.formset.prefix,
            'options': {
                'prefix': self.formset.prefix,
                'addText': ugettext('Add another %(verbose_name***REMOVED***s'***REMOVED*** % {
                    'verbose_name': capfirst(verbose_name***REMOVED***,
        ***REMOVED***
                'deleteText': ugettext('Remove'***REMOVED***,
        ***REMOVED***
    ***REMOVED******REMOVED***

    def _media(self***REMOVED***:
        media = self.opts.media + self.formset.media
        for fs in self:
            media = media + fs.media
        return media
    media = property(_media***REMOVED***


class InlineAdminForm(AdminForm***REMOVED***:
    ***REMOVED***
    A wrapper around an inline form for use in the admin system.
    ***REMOVED***
    def __init__(self, formset, form, fieldsets, prepopulated_fields, original,
                 readonly_fields=None, model_admin=None, view_on_site_url=None***REMOVED***:
        self.formset = formset
        self.model_admin = model_admin
        self.original = original
        self.show_url = original and view_on_site_url is not None
        self.absolute_url = view_on_site_url
        super(InlineAdminForm, self***REMOVED***.__init__(form, fieldsets, prepopulated_fields, readonly_fields, model_admin***REMOVED***

    def __iter__(self***REMOVED***:
        for name, options in self.fieldsets:
            yield InlineFieldset(
                self.formset, self.form, name, self.readonly_fields,
                model_admin=self.model_admin, **options
            ***REMOVED***

    def needs_explicit_pk_field(self***REMOVED***:
        # Auto fields are editable (oddly***REMOVED***, so need to check for auto or non-editable pk
        if self.form._meta.model._meta.has_auto_field or not self.form._meta.model._meta.pk.editable:
            return True
        # Also search any parents for an auto field. (The pk info is propagated to child
        # models so that does not need to be checked in parents.***REMOVED***
        for parent in self.form._meta.model._meta.get_parent_list(***REMOVED***:
            if parent._meta.has_auto_field:
                return True
        return False

    def pk_field(self***REMOVED***:
        return AdminField(self.form, self.formset._pk_field.name, False***REMOVED***

    def fk_field(self***REMOVED***:
        fk = getattr(self.formset, "fk", None***REMOVED***
        if fk:
            return AdminField(self.form, fk.name, False***REMOVED***
        else:
            return ""

    def deletion_field(self***REMOVED***:
        from django.forms.formsets import DELETION_FIELD_NAME
        return AdminField(self.form, DELETION_FIELD_NAME, False***REMOVED***

    def ordering_field(self***REMOVED***:
        from django.forms.formsets import ORDERING_FIELD_NAME
        return AdminField(self.form, ORDERING_FIELD_NAME, False***REMOVED***


class InlineFieldset(Fieldset***REMOVED***:
    def __init__(self, formset, *args, **kwargs***REMOVED***:
        self.formset = formset
        super(InlineFieldset, self***REMOVED***.__init__(*args, **kwargs***REMOVED***

    def __iter__(self***REMOVED***:
        fk = getattr(self.formset, "fk", None***REMOVED***
        for field in self.fields:
            if fk and fk.name == field:
                continue
            yield Fieldline(self.form, field, self.readonly_fields, model_admin=self.model_admin***REMOVED***


class AdminErrorList(forms.utils.ErrorList***REMOVED***:
    ***REMOVED***
    Stores all errors for the form/formsets in an add/change stage view.
    ***REMOVED***
    def __init__(self, form, inline_formsets***REMOVED***:
        super(AdminErrorList, self***REMOVED***.__init__(***REMOVED***

        if form.is_bound:
            self.extend(form.errors.values(***REMOVED******REMOVED***
            for inline_formset in inline_formsets:
                self.extend(inline_formset.non_form_errors(***REMOVED******REMOVED***
                for errors_in_inline_form in inline_formset.errors:
                    self.extend(errors_in_inline_form.values(***REMOVED******REMOVED***
