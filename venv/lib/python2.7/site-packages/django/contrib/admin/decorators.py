def register(*models, **kwargs***REMOVED***:
    ***REMOVED***
    Registers the given model(s***REMOVED*** classes and wrapped ModelAdmin class with
    admin site:

    @register(Author***REMOVED***
    class AuthorAdmin(admin.ModelAdmin***REMOVED***:
        pass

    A kwarg of `site` can be passed as the admin site, otherwise the default
    admin site will be used.
    ***REMOVED***
    from django.contrib.admin import ModelAdmin
    from django.contrib.admin.sites import site, AdminSite

    def _model_admin_wrapper(admin_class***REMOVED***:
        if not models:
            raise ValueError('At least one model must be passed to register.'***REMOVED***

        admin_site = kwargs.pop('site', site***REMOVED***

        if not isinstance(admin_site, AdminSite***REMOVED***:
            raise ValueError('site must subclass AdminSite'***REMOVED***

        if not issubclass(admin_class, ModelAdmin***REMOVED***:
            raise ValueError('Wrapped class must subclass ModelAdmin.'***REMOVED***

        admin_site.register(models, admin_class=admin_class***REMOVED***

        return admin_class
    return _model_admin_wrapper
