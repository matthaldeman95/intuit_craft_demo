from django import template
from django.contrib.admin.models import LogEntry

register = template.Library(***REMOVED***


class AdminLogNode(template.Node***REMOVED***:
    def __init__(self, limit, varname, user***REMOVED***:
        self.limit, self.varname, self.user = limit, varname, user

    def __repr__(self***REMOVED***:
        return "<GetAdminLog Node>"

    def render(self, context***REMOVED***:
        if self.user is None:
            entries = LogEntry.objects.all(***REMOVED***
        else:
            user_id = self.user
            if not user_id.isdigit(***REMOVED***:
                user_id = context[self.user***REMOVED***.pk
            entries = LogEntry.objects.filter(user__pk=user_id***REMOVED***
        context[self.varname***REMOVED*** = entries.select_related('content_type', 'user'***REMOVED***[:int(self.limit***REMOVED******REMOVED***
        return ''


@register.tag
def get_admin_log(parser, token***REMOVED***:
    ***REMOVED***
    Populates a template variable with the admin log for the given criteria.

    Usage::

    ***REMOVED***% get_admin_log [limit***REMOVED*** as [varname***REMOVED*** for_user [context_var_containing_user_obj***REMOVED*** %***REMOVED***

    Examples::

    ***REMOVED***% get_admin_log 10 as admin_log for_user 23 %***REMOVED***
    ***REMOVED***% get_admin_log 10 as admin_log for_user user %***REMOVED***
    ***REMOVED***% get_admin_log 10 as admin_log %***REMOVED***

    Note that ``context_var_containing_user_obj`` can be a hard-coded integer
    (user ID***REMOVED*** or the name of a template context variable containing the user
    object whose ID you want.
    ***REMOVED***
    tokens = token.contents.split(***REMOVED***
    if len(tokens***REMOVED*** < 4:
        raise template.TemplateSyntaxError(
            "'get_admin_log' statements require two arguments"***REMOVED***
    if not tokens[1***REMOVED***.isdigit(***REMOVED***:
        raise template.TemplateSyntaxError(
            "First argument to 'get_admin_log' must be an integer"***REMOVED***
    if tokens[2***REMOVED*** != 'as':
        raise template.TemplateSyntaxError(
            "Second argument to 'get_admin_log' must be 'as'"***REMOVED***
    if len(tokens***REMOVED*** > 4:
        if tokens[4***REMOVED*** != 'for_user':
            raise template.TemplateSyntaxError(
                "Fourth argument to 'get_admin_log' must be 'for_user'"***REMOVED***
    return AdminLogNode(limit=tokens[1***REMOVED***, varname=tokens[3***REMOVED***, user=(tokens[5***REMOVED*** if len(tokens***REMOVED*** > 5 else None***REMOVED******REMOVED***
