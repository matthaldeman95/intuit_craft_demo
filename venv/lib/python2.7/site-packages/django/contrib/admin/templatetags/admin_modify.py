import json

from django import template
from django.template.context import Context

register = template.Library(***REMOVED***


@register.inclusion_tag('admin/prepopulated_fields_js.html', takes_context=True***REMOVED***
def prepopulated_fields_js(context***REMOVED***:
    ***REMOVED***
    Creates a list of prepopulated_fields that should render Javascript for
    the prepopulated fields for both the admin form and inlines.
    ***REMOVED***
    prepopulated_fields = [***REMOVED***
    if 'adminform' in context:
        prepopulated_fields.extend(context['adminform'***REMOVED***.prepopulated_fields***REMOVED***
    if 'inline_admin_formsets' in context:
        for inline_admin_formset in context['inline_admin_formsets'***REMOVED***:
            for inline_admin_form in inline_admin_formset:
                if inline_admin_form.original is None:
                    prepopulated_fields.extend(inline_admin_form.prepopulated_fields***REMOVED***

    prepopulated_fields_json = [***REMOVED***
    for field in prepopulated_fields:
        prepopulated_fields_json.append({
            "id": "#%s" % field["field"***REMOVED***.auto_id,
            "name": field["field"***REMOVED***.name,
            "dependency_ids": ["#%s" % dependency.auto_id for dependency in field["dependencies"***REMOVED******REMOVED***,
            "dependency_list": [dependency.name for dependency in field["dependencies"***REMOVED******REMOVED***,
            "maxLength": field["field"***REMOVED***.field.max_length or 50,
            "allowUnicode": getattr(field["field"***REMOVED***.field, "allow_unicode", False***REMOVED***
    ***REMOVED******REMOVED***

    context.update({
        'prepopulated_fields': prepopulated_fields,
        'prepopulated_fields_json': json.dumps(prepopulated_fields_json***REMOVED***,
***REMOVED******REMOVED***
    return context


@register.inclusion_tag('admin/submit_line.html', takes_context=True***REMOVED***
def submit_row(context***REMOVED***:
    ***REMOVED***
    Displays the row of buttons for delete and save.
    ***REMOVED***
    change = context['change'***REMOVED***
    is_popup = context['is_popup'***REMOVED***
    save_as = context['save_as'***REMOVED***
    show_save = context.get('show_save', True***REMOVED***
    show_save_and_continue = context.get('show_save_and_continue', True***REMOVED***
    ctx = Context(context***REMOVED***
    ctx.update({
        'show_delete_link': (
            not is_popup and context['has_delete_permission'***REMOVED*** and
            change and context.get('show_delete', True***REMOVED***
        ***REMOVED***,
        'show_save_as_new': not is_popup and change and save_as,
        'show_save_and_add_another': (
            context['has_add_permission'***REMOVED*** and not is_popup and
            (not save_as or context['add'***REMOVED******REMOVED***
        ***REMOVED***,
        'show_save_and_continue': not is_popup and context['has_change_permission'***REMOVED*** and show_save_and_continue,
        'show_save': show_save,
***REMOVED******REMOVED***
    return ctx


@register.filter
def cell_count(inline_admin_form***REMOVED***:
    ***REMOVED***Returns the number of cells used in a tabular inline***REMOVED***
    count = 1  # Hidden cell with hidden 'id' field
    for fieldset in inline_admin_form:
        # Loop through all the fields (one per cell***REMOVED***
        for line in fieldset:
            for field in line:
                count += 1
    if inline_admin_form.formset.can_delete:
        # Delete checkbox
        count += 1
    return count
