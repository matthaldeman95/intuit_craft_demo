from __future__ import unicode_literals

import datetime
import warnings

from django.contrib.admin.templatetags.admin_urls import add_preserved_filters
from django.contrib.admin.utils import (
    display_for_field, display_for_value, label_for_field, lookup_field,
***REMOVED***
from django.contrib.admin.views.main import (
    ALL_VAR, ORDER_VAR, PAGE_VAR, SEARCH_VAR,
***REMOVED***
from django.core.exceptions import ObjectDoesNotExist
from django.db import models
from django.template import Library
from django.template.loader import get_template
from django.templatetags.static import static
from django.urls import NoReverseMatch
from django.utils import formats
from django.utils.deprecation import RemovedInDjango20Warning
from django.utils.encoding import force_text
from django.utils.html import format_html
from django.utils.safestring import mark_safe
from django.utils.text import capfirst
from django.utils.translation import ugettext as _

register = Library(***REMOVED***

DOT = '.'


@register.simple_tag
def paginator_number(cl, i***REMOVED***:
    ***REMOVED***
    Generates an individual page index link in a paginated list.
    ***REMOVED***
    if i == DOT:
        return '... '
    elif i == cl.page_num:
        return format_html('<span class="this-page">{***REMOVED***</span> ', i + 1***REMOVED***
    else:
        return format_html('<a href="{***REMOVED***"{***REMOVED***>{***REMOVED***</a> ',
                           cl.get_query_string({PAGE_VAR: i***REMOVED******REMOVED***,
                           mark_safe(' class="end"' if i == cl.paginator.num_pages - 1 else ''***REMOVED***,
                           i + 1***REMOVED***


@register.inclusion_tag('admin/pagination.html'***REMOVED***
def pagination(cl***REMOVED***:
    ***REMOVED***
    Generates the series of links to the pages in a paginated list.
    ***REMOVED***
    paginator, page_num = cl.paginator, cl.page_num

    pagination_required = (not cl.show_all or not cl.can_show_all***REMOVED*** and cl.multi_page
    if not pagination_required:
        page_range = [***REMOVED***
    else:
        ON_EACH_SIDE = 3
        ON_ENDS = 2

        # If there are 10 or fewer pages, display links to every page.
        # Otherwise, do some fancy
        if paginator.num_pages <= 10:
            page_range = range(paginator.num_pages***REMOVED***
        else:
            # Insert "smart" pagination links, so that there are always ON_ENDS
            # links at either end of the list of pages, and there are always
            # ON_EACH_SIDE links at either end of the "current page" link.
            page_range = [***REMOVED***
            if page_num > (ON_EACH_SIDE + ON_ENDS***REMOVED***:
                page_range.extend(range(0, ON_ENDS***REMOVED******REMOVED***
                page_range.append(DOT***REMOVED***
                page_range.extend(range(page_num - ON_EACH_SIDE, page_num + 1***REMOVED******REMOVED***
            else:
                page_range.extend(range(0, page_num + 1***REMOVED******REMOVED***
            if page_num < (paginator.num_pages - ON_EACH_SIDE - ON_ENDS - 1***REMOVED***:
                page_range.extend(range(page_num + 1, page_num + ON_EACH_SIDE + 1***REMOVED******REMOVED***
                page_range.append(DOT***REMOVED***
                page_range.extend(range(paginator.num_pages - ON_ENDS, paginator.num_pages***REMOVED******REMOVED***
            else:
                page_range.extend(range(page_num + 1, paginator.num_pages***REMOVED******REMOVED***

    need_show_all_link = cl.can_show_all and not cl.show_all and cl.multi_page
    return {
        'cl': cl,
        'pagination_required': pagination_required,
        'show_all_url': need_show_all_link and cl.get_query_string({ALL_VAR: ''***REMOVED******REMOVED***,
        'page_range': page_range,
        'ALL_VAR': ALL_VAR,
        '1': 1,
***REMOVED***


def result_headers(cl***REMOVED***:
    ***REMOVED***
    Generates the list column headers.
    ***REMOVED***
    ordering_field_columns = cl.get_ordering_field_columns(***REMOVED***
    for i, field_name in enumerate(cl.list_display***REMOVED***:
        text, attr = label_for_field(
            field_name, cl.model,
            model_admin=cl.model_admin,
            return_attr=True
        ***REMOVED***
        if attr:
            field_name = _coerce_field_name(field_name, i***REMOVED***
            # Potentially not sortable

            # if the field is the action checkbox: no sorting and special class
            if field_name == 'action_checkbox':
                yield {
                    "text": text,
                    "class_attrib": mark_safe(' class="action-checkbox-column"'***REMOVED***,
                    "sortable": False,
            ***REMOVED***
                continue

            admin_order_field = getattr(attr, "admin_order_field", None***REMOVED***
            if not admin_order_field:
                # Not sortable
                yield {
                    "text": text,
                    "class_attrib": format_html(' class="column-{***REMOVED***"', field_name***REMOVED***,
                    "sortable": False,
            ***REMOVED***
                continue

        # OK, it is sortable if we got this far
        th_classes = ['sortable', 'column-{***REMOVED***'.format(field_name***REMOVED******REMOVED***
        order_type = ''
        new_order_type = 'asc'
        sort_priority = 0
        sorted = False
        # Is it currently being sorted on?
        if i in ordering_field_columns:
            sorted = True
            order_type = ordering_field_columns.get(i***REMOVED***.lower(***REMOVED***
            sort_priority = list(ordering_field_columns***REMOVED***.index(i***REMOVED*** + 1
            th_classes.append('sorted %sending' % order_type***REMOVED***
            new_order_type = {'asc': 'desc', 'desc': 'asc'***REMOVED***[order_type***REMOVED***

        # build new ordering param
        o_list_primary = [***REMOVED***  # URL for making this field the primary sort
        o_list_remove = [***REMOVED***  # URL for removing this field from sort
        o_list_toggle = [***REMOVED***  # URL for toggling order type for this field

        def make_qs_param(t, n***REMOVED***:
            return ('-' if t == 'desc' else ''***REMOVED*** + str(n***REMOVED***

        for j, ot in ordering_field_columns.items(***REMOVED***:
            if j == i:  # Same column
                param = make_qs_param(new_order_type, j***REMOVED***
                # We want clicking on this header to bring the ordering to the
                # front
                o_list_primary.insert(0, param***REMOVED***
                o_list_toggle.append(param***REMOVED***
                # o_list_remove - omit
            else:
                param = make_qs_param(ot, j***REMOVED***
                o_list_primary.append(param***REMOVED***
                o_list_toggle.append(param***REMOVED***
                o_list_remove.append(param***REMOVED***

        if i not in ordering_field_columns:
            o_list_primary.insert(0, make_qs_param(new_order_type, i***REMOVED******REMOVED***

        yield {
            "text": text,
            "sortable": True,
            "sorted": sorted,
            "ascending": order_type == "asc",
            "sort_priority": sort_priority,
            "url_primary": cl.get_query_string({ORDER_VAR: '.'.join(o_list_primary***REMOVED******REMOVED******REMOVED***,
            "url_remove": cl.get_query_string({ORDER_VAR: '.'.join(o_list_remove***REMOVED******REMOVED******REMOVED***,
            "url_toggle": cl.get_query_string({ORDER_VAR: '.'.join(o_list_toggle***REMOVED******REMOVED******REMOVED***,
            "class_attrib": format_html(' class="{***REMOVED***"', ' '.join(th_classes***REMOVED******REMOVED*** if th_classes else '',
    ***REMOVED***


def _boolean_icon(field_val***REMOVED***:
    icon_url = static('admin/img/icon-%s.svg' %
                  ***REMOVED***True: 'yes', False: 'no', None: 'unknown'***REMOVED***[field_val***REMOVED******REMOVED***
    return format_html('<img src="{***REMOVED***" alt="{***REMOVED***" />', icon_url, field_val***REMOVED***


def _coerce_field_name(field_name, field_index***REMOVED***:
    ***REMOVED***
    Coerce a field_name (which may be a callable***REMOVED*** to a string.
    ***REMOVED***
    if callable(field_name***REMOVED***:
        if field_name.__name__ == '<lambda>':
            return 'lambda' + str(field_index***REMOVED***
        else:
            return field_name.__name__
    return field_name


def items_for_result(cl, result, form***REMOVED***:
    ***REMOVED***
    Generates the actual list of data.
    ***REMOVED***

    def link_in_col(is_first, field_name, cl***REMOVED***:
        if cl.list_display_links is None:
            return False
        if is_first and not cl.list_display_links:
            return True
        return field_name in cl.list_display_links

    first = True
    pk = cl.lookup_opts.pk.attname
    for field_index, field_name in enumerate(cl.list_display***REMOVED***:
        empty_value_display = cl.model_admin.get_empty_value_display(***REMOVED***
        row_classes = ['field-%s' % _coerce_field_name(field_name, field_index***REMOVED******REMOVED***
        ***REMOVED***
            f, attr, value = lookup_field(field_name, result, cl.model_admin***REMOVED***
        except ObjectDoesNotExist:
            result_repr = empty_value_display
        else:
            empty_value_display = getattr(attr, 'empty_value_display', empty_value_display***REMOVED***
            if f is None or f.auto_created:
                if field_name == 'action_checkbox':
                    row_classes = ['action-checkbox'***REMOVED***
                allow_tags = getattr(attr, 'allow_tags', False***REMOVED***
                boolean = getattr(attr, 'boolean', False***REMOVED***
                result_repr = display_for_value(value, empty_value_display, boolean***REMOVED***
                if allow_tags:
                    warnings.warn(
                        "Deprecated allow_tags attribute used on field {***REMOVED***. "
                        "Use django.utils.html.format_html(***REMOVED***, format_html_join(***REMOVED***, "
                        "or django.utils.safestring.mark_safe(***REMOVED*** instead.".format(field_name***REMOVED***,
                        RemovedInDjango20Warning
                    ***REMOVED***
                    result_repr = mark_safe(result_repr***REMOVED***
                if isinstance(value, (datetime.date, datetime.time***REMOVED******REMOVED***:
                    row_classes.append('nowrap'***REMOVED***
            else:
                if isinstance(f.remote_field, models.ManyToOneRel***REMOVED***:
                    field_val = getattr(result, f.name***REMOVED***
                    if field_val is None:
                        result_repr = empty_value_display
                    else:
                        result_repr = field_val
                else:
                    result_repr = display_for_field(value, f, empty_value_display***REMOVED***
                if isinstance(f, (models.DateField, models.TimeField, models.ForeignKey***REMOVED******REMOVED***:
                    row_classes.append('nowrap'***REMOVED***
        if force_text(result_repr***REMOVED*** == '':
            result_repr = mark_safe('&nbsp;'***REMOVED***
        row_class = mark_safe(' class="%s"' % ' '.join(row_classes***REMOVED******REMOVED***
        # If list_display_links not defined, add the link tag to the first field
        if link_in_col(first, field_name, cl***REMOVED***:
            table_tag = 'th' if first else 'td'
            first = False

            # Display link to the result's change_view if the url exists, else
            # display just the result's representation.
            ***REMOVED***
                url = cl.url_for_result(result***REMOVED***
            except NoReverseMatch:
                link_or_text = result_repr
            else:
                url = add_preserved_filters({'preserved_filters': cl.preserved_filters, 'opts': cl.opts***REMOVED***, url***REMOVED***
                # Convert the pk to something that can be used in Javascript.
                # Problem cases are long ints (23L***REMOVED*** and non-ASCII strings.
                if cl.to_field:
                    attr = str(cl.to_field***REMOVED***
                else:
                    attr = pk
                value = result.serializable_value(attr***REMOVED***
                link_or_text = format_html(
                    '<a href="{***REMOVED***"{***REMOVED***>{***REMOVED***</a>',
                    url,
                    format_html(
                        ' data-popup-opener="{***REMOVED***"', value
                    ***REMOVED*** if cl.is_popup else '',
                    result_repr***REMOVED***

            yield format_html('<{***REMOVED***{***REMOVED***>{***REMOVED***</{***REMOVED***>',
                              table_tag,
                              row_class,
                              link_or_text,
                              table_tag***REMOVED***
        else:
            # By default the fields come from ModelAdmin.list_editable, but if we pull
            # the fields out of the form instead of list_editable custom admins
            # can provide fields on a per request basis
            if (form and field_name in form.fields and not (
                    field_name == cl.model._meta.pk.name and
                    form[cl.model._meta.pk.name***REMOVED***.is_hidden***REMOVED******REMOVED***:
                bf = form[field_name***REMOVED***
                result_repr = mark_safe(force_text(bf.errors***REMOVED*** + force_text(bf***REMOVED******REMOVED***
            yield format_html('<td{***REMOVED***>{***REMOVED***</td>', row_class, result_repr***REMOVED***
    if form and not form[cl.model._meta.pk.name***REMOVED***.is_hidden:
        yield format_html('<td>{***REMOVED***</td>', force_text(form[cl.model._meta.pk.name***REMOVED******REMOVED******REMOVED***


class ResultList(list***REMOVED***:
    # Wrapper class used to return items in a list_editable
    # changelist, annotated with the form object for error
    # reporting purposes. Needed to maintain backwards
    # compatibility with existing admin templates.
    def __init__(self, form, *items***REMOVED***:
        self.form = form
        super(ResultList, self***REMOVED***.__init__(*items***REMOVED***


def results(cl***REMOVED***:
    if cl.formset:
        for res, form in zip(cl.result_list, cl.formset.forms***REMOVED***:
            yield ResultList(form, items_for_result(cl, res, form***REMOVED******REMOVED***
    else:
        for res in cl.result_list:
            yield ResultList(None, items_for_result(cl, res, None***REMOVED******REMOVED***


def result_hidden_fields(cl***REMOVED***:
    if cl.formset:
        for res, form in zip(cl.result_list, cl.formset.forms***REMOVED***:
            if form[cl.model._meta.pk.name***REMOVED***.is_hidden:
                yield mark_safe(force_text(form[cl.model._meta.pk.name***REMOVED******REMOVED******REMOVED***


@register.inclusion_tag("admin/change_list_results.html"***REMOVED***
def result_list(cl***REMOVED***:
    ***REMOVED***
    Displays the headers and data list together
    ***REMOVED***
    headers = list(result_headers(cl***REMOVED******REMOVED***
    num_sorted_fields = 0
    for h in headers:
        if h['sortable'***REMOVED*** and h['sorted'***REMOVED***:
            num_sorted_fields += 1
    return {'cl': cl,
            'result_hidden_fields': list(result_hidden_fields(cl***REMOVED******REMOVED***,
            'result_headers': headers,
            'num_sorted_fields': num_sorted_fields,
            'results': list(results(cl***REMOVED******REMOVED******REMOVED***


@register.inclusion_tag('admin/date_hierarchy.html'***REMOVED***
def date_hierarchy(cl***REMOVED***:
    ***REMOVED***
    Displays the date hierarchy for date drill-down functionality.
    ***REMOVED***
    if cl.date_hierarchy:
        field_name = cl.date_hierarchy
        field = cl.opts.get_field(field_name***REMOVED***
        dates_or_datetimes = 'datetimes' if isinstance(field, models.DateTimeField***REMOVED*** else 'dates'
        year_field = '%s__year' % field_name
        month_field = '%s__month' % field_name
        day_field = '%s__day' % field_name
        field_generic = '%s__' % field_name
        year_lookup = cl.params.get(year_field***REMOVED***
        month_lookup = cl.params.get(month_field***REMOVED***
        day_lookup = cl.params.get(day_field***REMOVED***

        def link(filters***REMOVED***:
            return cl.get_query_string(filters, [field_generic***REMOVED******REMOVED***

        if not (year_lookup or month_lookup or day_lookup***REMOVED***:
            # select appropriate start level
            date_range = cl.queryset.aggregate(first=models.Min(field_name***REMOVED***,
                                               last=models.Max(field_name***REMOVED******REMOVED***
            if date_range['first'***REMOVED*** and date_range['last'***REMOVED***:
                if date_range['first'***REMOVED***.year == date_range['last'***REMOVED***.year:
                    year_lookup = date_range['first'***REMOVED***.year
                    if date_range['first'***REMOVED***.month == date_range['last'***REMOVED***.month:
                        month_lookup = date_range['first'***REMOVED***.month

        if year_lookup and month_lookup and day_lookup:
            day = datetime.date(int(year_lookup***REMOVED***, int(month_lookup***REMOVED***, int(day_lookup***REMOVED******REMOVED***
            return {
                'show': True,
                'back': {
                    'link': link({year_field: year_lookup, month_field: month_lookup***REMOVED******REMOVED***,
                    'title': capfirst(formats.date_format(day, 'YEAR_MONTH_FORMAT'***REMOVED******REMOVED***
        ***REMOVED***
                'choices': [{'title': capfirst(formats.date_format(day, 'MONTH_DAY_FORMAT'***REMOVED******REMOVED******REMOVED******REMOVED***
        ***REMOVED***
        elif year_lookup and month_lookup:
            days = cl.queryset.filter(**{year_field: year_lookup, month_field: month_lookup***REMOVED******REMOVED***
            days = getattr(days, dates_or_datetimes***REMOVED***(field_name, 'day'***REMOVED***
            return {
                'show': True,
                'back': {
                    'link': link({year_field: year_lookup***REMOVED******REMOVED***,
                    'title': str(year_lookup***REMOVED***
        ***REMOVED***
                'choices': [{
                    'link': link({year_field: year_lookup, month_field: month_lookup, day_field: day.day***REMOVED******REMOVED***,
                    'title': capfirst(formats.date_format(day, 'MONTH_DAY_FORMAT'***REMOVED******REMOVED***
            ***REMOVED*** for day in days***REMOVED***
        ***REMOVED***
        elif year_lookup:
            months = cl.queryset.filter(**{year_field: year_lookup***REMOVED******REMOVED***
            months = getattr(months, dates_or_datetimes***REMOVED***(field_name, 'month'***REMOVED***
            return {
                'show': True,
                'back': {
                    'link': link({***REMOVED******REMOVED***,
                    'title': _('All dates'***REMOVED***
        ***REMOVED***
                'choices': [{
                    'link': link({year_field: year_lookup, month_field: month.month***REMOVED******REMOVED***,
                    'title': capfirst(formats.date_format(month, 'YEAR_MONTH_FORMAT'***REMOVED******REMOVED***
            ***REMOVED*** for month in months***REMOVED***
        ***REMOVED***
        else:
            years = getattr(cl.queryset, dates_or_datetimes***REMOVED***(field_name, 'year'***REMOVED***
            return {
                'show': True,
                'choices': [{
                    'link': link({year_field: str(year.year***REMOVED******REMOVED******REMOVED***,
                    'title': str(year.year***REMOVED***,
            ***REMOVED*** for year in years***REMOVED***
        ***REMOVED***


@register.inclusion_tag('admin/search_form.html'***REMOVED***
def search_form(cl***REMOVED***:
    ***REMOVED***
    Displays a search form for searching the list.
    ***REMOVED***
    return {
        'cl': cl,
        'show_result_count': cl.result_count != cl.full_result_count,
        'search_var': SEARCH_VAR
***REMOVED***


@register.simple_tag
def admin_list_filter(cl, spec***REMOVED***:
    tpl = get_template(spec.template***REMOVED***
    return tpl.render({
        'title': spec.title,
        'choices': list(spec.choices(cl***REMOVED******REMOVED***,
        'spec': spec,
***REMOVED******REMOVED***


@register.inclusion_tag('admin/actions.html', takes_context=True***REMOVED***
def admin_actions(context***REMOVED***:
    ***REMOVED***
    Track the number of times the action field has been rendered on the page,
    so we know which value to use.
    ***REMOVED***
    context['action_index'***REMOVED*** = context.get('action_index', -1***REMOVED*** + 1
    return context
