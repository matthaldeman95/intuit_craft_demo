***REMOVED***
Built-in, globally-available admin actions.
***REMOVED***

from django.contrib import messages
from django.contrib.admin import helpers
from django.contrib.admin.utils import get_deleted_objects, model_ngettext
from django.core.exceptions import PermissionDenied
from django.db import router
from django.template.response import TemplateResponse
from django.utils.encoding import force_text
from django.utils.translation import ugettext as _, ugettext_lazy


def delete_selected(modeladmin, request, queryset***REMOVED***:
    ***REMOVED***
    Default action which deletes the selected objects.

    This action first displays a confirmation page which shows all the
    deleteable objects, or, if the user has no permission one of the related
    childs (foreignkeys***REMOVED***, a "permission denied" message.

    Next, it deletes all selected objects and redirects back to the change list.
    ***REMOVED***
    opts = modeladmin.model._meta
    app_label = opts.app_label

    # Check that the user has delete permission for the actual model
    if not modeladmin.has_delete_permission(request***REMOVED***:
        raise PermissionDenied

    using = router.db_for_write(modeladmin.model***REMOVED***

    # Populate deletable_objects, a data structure of all related objects that
    # will also be deleted.
    deletable_objects, model_count, perms_needed, protected = get_deleted_objects(
        queryset, opts, request.user, modeladmin.admin_site, using***REMOVED***

    # The user has already confirmed the deletion.
    # Do the deletion and return a None to display the change list view again.
    if request.POST.get('post'***REMOVED*** and not protected:
        if perms_needed:
            raise PermissionDenied
        n = queryset.count(***REMOVED***
        if n:
            for obj in queryset:
                obj_display = force_text(obj***REMOVED***
                modeladmin.log_deletion(request, obj, obj_display***REMOVED***
            queryset.delete(***REMOVED***
            modeladmin.message_user(request, _("Successfully deleted %(count***REMOVED***d %(items***REMOVED***s."***REMOVED*** % {
                "count": n, "items": model_ngettext(modeladmin.opts, n***REMOVED***
    ***REMOVED*** messages.SUCCESS***REMOVED***
        # Return None to display the change list page again.
        return None

    if len(queryset***REMOVED*** == 1:
        objects_name = force_text(opts.verbose_name***REMOVED***
    else:
        objects_name = force_text(opts.verbose_name_plural***REMOVED***

    if perms_needed or protected:
        title = _("Cannot delete %(name***REMOVED***s"***REMOVED*** % {"name": objects_name***REMOVED***
    else:
        title = _("Are you sure?"***REMOVED***

    context = dict(
        modeladmin.admin_site.each_context(request***REMOVED***,
        title=title,
        objects_name=objects_name,
        deletable_objects=[deletable_objects***REMOVED***,
        model_count=dict(model_count***REMOVED***.items(***REMOVED***,
        queryset=queryset,
        perms_lacking=perms_needed,
        protected=protected,
        opts=opts,
        action_checkbox_name=helpers.ACTION_CHECKBOX_NAME,
        media=modeladmin.media,
    ***REMOVED***

    request.current_app = modeladmin.admin_site.name

    # Display the confirmation page
    return TemplateResponse(request, modeladmin.delete_selected_confirmation_template or [
        "admin/%s/%s/delete_selected_confirmation.html" % (app_label, opts.model_name***REMOVED***,
        "admin/%s/delete_selected_confirmation.html" % app_label,
        "admin/delete_selected_confirmation.html"
    ***REMOVED***, context***REMOVED***

delete_selected.short_description = ugettext_lazy("Delete selected %(verbose_name_plural***REMOVED***s"***REMOVED***
