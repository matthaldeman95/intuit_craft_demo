from django.contrib.staticfiles.testing import StaticLiveServerTestCase
from django.test import modify_settings
from django.test.selenium import SeleniumTestCase
from django.utils.deprecation import MiddlewareMixin
from django.utils.translation import ugettext as _


class CSPMiddleware(MiddlewareMixin***REMOVED***:
    ***REMOVED***The admin's JavaScript should be compatible with CSP.***REMOVED***
    def process_response(self, request, response***REMOVED***:
        response['Content-Security-Policy'***REMOVED*** = "default-src 'self'"
        return response


@modify_settings(MIDDLEWARE={'append': 'django.contrib.admin.tests.CSPMiddleware'***REMOVED******REMOVED***
class AdminSeleniumTestCase(SeleniumTestCase, StaticLiveServerTestCase***REMOVED***:

    available_apps = [
    ***REMOVED***
    ***REMOVED***
    ***REMOVED***
    ***REMOVED***
        'django.contrib.sites',
    ***REMOVED***

    def wait_until(self, callback, timeout=10***REMOVED***:
        ***REMOVED***
        Helper function that blocks the execution of the tests until the
        specified callback returns a value that is not falsy. This function can
        be called, for example, after clicking a link or submitting a form.
        See the other public methods that call this function for more details.
        ***REMOVED***
        from selenium.webdriver.support.wait import WebDriverWait
        WebDriverWait(self.selenium, timeout***REMOVED***.until(callback***REMOVED***

    def wait_for_popup(self, num_windows=2, timeout=10***REMOVED***:
        ***REMOVED***
        Block until `num_windows` are present (usually 2, but can be
        overridden in the case of pop-ups opening other pop-ups***REMOVED***.
        ***REMOVED***
        self.wait_until(lambda d: len(d.window_handles***REMOVED*** == num_windows, timeout***REMOVED***

    def wait_for(self, css_selector, timeout=10***REMOVED***:
        ***REMOVED***
        Helper function that blocks until a CSS selector is found on the page.
        ***REMOVED***
        from selenium.webdriver.common.by import By
        from selenium.webdriver.support import expected_conditions as ec
        self.wait_until(
            ec.presence_of_element_located((By.CSS_SELECTOR, css_selector***REMOVED******REMOVED***,
            timeout
        ***REMOVED***

    def wait_for_text(self, css_selector, text, timeout=10***REMOVED***:
        ***REMOVED***
        Helper function that blocks until the text is found in the CSS selector.
        ***REMOVED***
        from selenium.webdriver.common.by import By
        from selenium.webdriver.support import expected_conditions as ec
        self.wait_until(
            ec.text_to_be_present_in_element(
                (By.CSS_SELECTOR, css_selector***REMOVED***, text***REMOVED***,
            timeout
        ***REMOVED***

    def wait_for_value(self, css_selector, text, timeout=10***REMOVED***:
        ***REMOVED***
        Helper function that blocks until the value is found in the CSS selector.
        ***REMOVED***
        from selenium.webdriver.common.by import By
        from selenium.webdriver.support import expected_conditions as ec
        self.wait_until(
            ec.text_to_be_present_in_element_value(
                (By.CSS_SELECTOR, css_selector***REMOVED***, text***REMOVED***,
            timeout
        ***REMOVED***

    def wait_until_visible(self, css_selector, timeout=10***REMOVED***:
        ***REMOVED***
        Block until the element described by the CSS selector is visible.
        ***REMOVED***
        from selenium.webdriver.common.by import By
        from selenium.webdriver.support import expected_conditions as ec
        self.wait_until(
            ec.visibility_of_element_located((By.CSS_SELECTOR, css_selector***REMOVED******REMOVED***,
            timeout
        ***REMOVED***

    def wait_until_invisible(self, css_selector, timeout=10***REMOVED***:
        ***REMOVED***
        Block until the element described by the CSS selector is invisible.
        ***REMOVED***
        from selenium.webdriver.common.by import By
        from selenium.webdriver.support import expected_conditions as ec
        self.wait_until(
            ec.invisibility_of_element_located((By.CSS_SELECTOR, css_selector***REMOVED******REMOVED***,
            timeout
        ***REMOVED***

    def wait_page_loaded(self***REMOVED***:
        ***REMOVED***
        Block until page has started to load.
        ***REMOVED***
        from selenium.common.exceptions import TimeoutException
        ***REMOVED***
            # Wait for the next page to be loaded
            self.wait_for('body'***REMOVED***
        except TimeoutException:
            # IE7 occasionally returns an error "Internet Explorer cannot
            # display the webpage" and doesn't load the next page. We just
            # ignore it.
            pass

    def admin_login(self, username, password, login_url='/admin/'***REMOVED***:
        ***REMOVED***
        Helper function to log into the admin.
        ***REMOVED***
        self.selenium.get('%s%s' % (self.live_server_url, login_url***REMOVED******REMOVED***
        username_input = self.selenium.find_element_by_name('username'***REMOVED***
        username_input.send_keys(username***REMOVED***
        password_input = self.selenium.find_element_by_name('password'***REMOVED***
        password_input.send_keys(password***REMOVED***
        login_text = _('Log in'***REMOVED***
        self.selenium.find_element_by_xpath(
            '//input[@value="%s"***REMOVED***' % login_text***REMOVED***.click(***REMOVED***
        self.wait_page_loaded(***REMOVED***

    def get_css_value(self, selector, attribute***REMOVED***:
        ***REMOVED***
        Helper function that returns the value for the CSS attribute of an
        DOM element specified by the given selector. Uses the jQuery that ships
        with Django.
        ***REMOVED***
        return self.selenium.execute_script(
            'return django.jQuery("%s"***REMOVED***.css("%s"***REMOVED***' % (selector, attribute***REMOVED******REMOVED***

    def get_select_option(self, selector, value***REMOVED***:
        ***REMOVED***
        Returns the <OPTION> with the value `value` inside the <SELECT> widget
        identified by the CSS selector `selector`.
        ***REMOVED***
        from selenium.common.exceptions import NoSuchElementException
        options = self.selenium.find_elements_by_css_selector('%s > option' % selector***REMOVED***
        for option in options:
            if option.get_attribute('value'***REMOVED*** == value:
                return option
        raise NoSuchElementException('Option "%s" not found in "%s"' % (value, selector***REMOVED******REMOVED***

    def _assertOptionsValues(self, options_selector, values***REMOVED***:
        if values:
            options = self.selenium.find_elements_by_css_selector(options_selector***REMOVED***
            actual_values = [***REMOVED***
            for option in options:
                actual_values.append(option.get_attribute('value'***REMOVED******REMOVED***
            self.assertEqual(values, actual_values***REMOVED***
        else:
            # Prevent the `find_elements_by_css_selector` call from blocking
            # if the selector doesn't match any options as we expect it
            # to be the case.
            with self.disable_implicit_wait(***REMOVED***:
                self.wait_until(
                    lambda driver: len(driver.find_elements_by_css_selector(options_selector***REMOVED******REMOVED*** == 0
                ***REMOVED***

    def assertSelectOptions(self, selector, values***REMOVED***:
        ***REMOVED***
        Asserts that the <SELECT> widget identified by `selector` has the
        options with the given `values`.
        ***REMOVED***
        self._assertOptionsValues("%s > option" % selector, values***REMOVED***

    def assertSelectedOptions(self, selector, values***REMOVED***:
        ***REMOVED***
        Asserts that the <SELECT> widget identified by `selector` has the
        selected options with the given `values`.
        ***REMOVED***
        self._assertOptionsValues("%s > option:checked" % selector, values***REMOVED***

    def has_css_class(self, selector, klass***REMOVED***:
        ***REMOVED***
        Returns True if the element identified by `selector` has the CSS class
        `klass`.
        ***REMOVED***
        return (self.selenium.find_element_by_css_selector(selector***REMOVED***
                .get_attribute('class'***REMOVED***.find(klass***REMOVED*** != -1***REMOVED***
