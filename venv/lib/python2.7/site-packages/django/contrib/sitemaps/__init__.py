from django.apps import apps as django_apps
from django.conf import settings
from django.core import paginator
from django.core.exceptions import ImproperlyConfigured
from django.urls import NoReverseMatch, reverse
from django.utils import translation
from django.utils.six.moves.urllib.parse import urlencode
from django.utils.six.moves.urllib.request import urlopen

PING_URL = "https://www.google.com/webmasters/tools/ping"


class SitemapNotFound(Exception***REMOVED***:
    pass


def ping_google(sitemap_url=None, ping_url=PING_URL***REMOVED***:
    ***REMOVED***
    Alerts Google that the sitemap for the current site has been updated.
    If sitemap_url is provided, it should be an absolute path to the sitemap
    for this site -- e.g., '/sitemap.xml'. If sitemap_url is not provided, this
    function will attempt to deduce it by using urls.reverse(***REMOVED***.
    ***REMOVED***
    if sitemap_url is None:
        ***REMOVED***
            # First, try to get the "index" sitemap URL.
            sitemap_url = reverse('django.contrib.sitemaps.views.index'***REMOVED***
        except NoReverseMatch:
            ***REMOVED***
                # Next, try for the "global" sitemap URL.
                sitemap_url = reverse('django.contrib.sitemaps.views.sitemap'***REMOVED***
            except NoReverseMatch:
                pass

    if sitemap_url is None:
        raise SitemapNotFound("You didn't provide a sitemap_url, and the sitemap URL couldn't be auto-detected."***REMOVED***

    if not django_apps.is_installed('django.contrib.sites'***REMOVED***:
        raise ImproperlyConfigured("ping_google requires django.contrib.sites, which isn't installed."***REMOVED***
    Site = django_apps.get_model('sites.Site'***REMOVED***
    current_site = Site.objects.get_current(***REMOVED***
    url = "http://%s%s" % (current_site.domain, sitemap_url***REMOVED***
    params = urlencode({'sitemap': url***REMOVED******REMOVED***
    urlopen("%s?%s" % (ping_url, params***REMOVED******REMOVED***


class Sitemap(object***REMOVED***:
    # This limit is defined by Google. See the index documentation at
    # http://www.sitemaps.org/protocol.html#index.
    limit = 50000

    # If protocol is None, the URLs in the sitemap will use the protocol
    # with which the sitemap was requested.
    protocol = None

    def __get(self, name, obj, default=None***REMOVED***:
        ***REMOVED***
            attr = getattr(self, name***REMOVED***
        except AttributeError:
            return default
        if callable(attr***REMOVED***:
            return attr(obj***REMOVED***
        return attr

    def items(self***REMOVED***:
        return [***REMOVED***

    def location(self, obj***REMOVED***:
        return obj.get_absolute_url(***REMOVED***

    def _get_paginator(self***REMOVED***:
        return paginator.Paginator(self.items(***REMOVED***, self.limit***REMOVED***
    paginator = property(_get_paginator***REMOVED***

    def get_urls(self, page=1, site=None, protocol=None***REMOVED***:
        # Determine protocol
        if self.protocol is not None:
            protocol = self.protocol
        if protocol is None:
            protocol = 'http'

        # Determine domain
        if site is None:
            if django_apps.is_installed('django.contrib.sites'***REMOVED***:
                Site = django_apps.get_model('sites.Site'***REMOVED***
                ***REMOVED***
                    site = Site.objects.get_current(***REMOVED***
                except Site.DoesNotExist:
                    pass
            if site is None:
                raise ImproperlyConfigured(
                    "To use sitemaps, either enable the sites framework or pass "
                    "a Site/RequestSite object in your view."
                ***REMOVED***
        domain = site.domain

        if getattr(self, 'i18n', False***REMOVED***:
            urls = [***REMOVED***
            current_lang_code = translation.get_language(***REMOVED***
            for lang_code, lang_name in settings.LANGUAGES:
                translation.activate(lang_code***REMOVED***
                urls += self._urls(page, protocol, domain***REMOVED***
            translation.activate(current_lang_code***REMOVED***
        else:
            urls = self._urls(page, protocol, domain***REMOVED***

        return urls

    def _urls(self, page, protocol, domain***REMOVED***:
        urls = [***REMOVED***
        latest_lastmod = None
        all_items_lastmod = True  # track if all items have a lastmod
        for item in self.paginator.page(page***REMOVED***.object_list:
            loc = "%s://%s%s" % (protocol, domain, self.__get('location', item***REMOVED******REMOVED***
            priority = self.__get('priority', item***REMOVED***
            lastmod = self.__get('lastmod', item***REMOVED***
            if all_items_lastmod:
                all_items_lastmod = lastmod is not None
                if (all_items_lastmod and
                        (latest_lastmod is None or lastmod > latest_lastmod***REMOVED******REMOVED***:
                    latest_lastmod = lastmod
            url_info = {
                'item': item,
                'location': loc,
                'lastmod': lastmod,
                'changefreq': self.__get('changefreq', item***REMOVED***,
                'priority': str(priority if priority is not None else ''***REMOVED***,
        ***REMOVED***
            urls.append(url_info***REMOVED***
        if all_items_lastmod and latest_lastmod:
            self.latest_lastmod = latest_lastmod
        return urls


class GenericSitemap(Sitemap***REMOVED***:
    priority = None
    changefreq = None

    def __init__(self, info_dict, priority=None, changefreq=None***REMOVED***:
        self.queryset = info_dict['queryset'***REMOVED***
        self.date_field = info_dict.get('date_field'***REMOVED***
        self.priority = priority
        self.changefreq = changefreq

    def items(self***REMOVED***:
        # Make sure to return a clone; we don't want premature evaluation.
        return self.queryset.filter(***REMOVED***

    def lastmod(self, item***REMOVED***:
        if self.date_field is not None:
            return getattr(item, self.date_field***REMOVED***
        return None


default_app_config = 'django.contrib.sitemaps.apps.SiteMapsConfig'
