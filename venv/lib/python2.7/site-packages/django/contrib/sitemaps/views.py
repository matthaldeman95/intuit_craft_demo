import datetime
from calendar import timegm
from functools import wraps

from django.contrib.sites.shortcuts import get_current_site
from django.core.paginator import EmptyPage, PageNotAnInteger
from django.http import Http404
from django.template.response import TemplateResponse
from django.urls import reverse
from django.utils.http import http_date


def x_robots_tag(func***REMOVED***:
    @wraps(func***REMOVED***
    def inner(request, *args, **kwargs***REMOVED***:
        response = func(request, *args, **kwargs***REMOVED***
        response['X-Robots-Tag'***REMOVED*** = 'noindex, noodp, noarchive'
        return response
    return inner


@x_robots_tag
def index(request, sitemaps,
          template_name='sitemap_index.xml', content_type='application/xml',
          sitemap_url_name='django.contrib.sitemaps.views.sitemap'***REMOVED***:

    req_protocol = request.scheme
    req_site = get_current_site(request***REMOVED***

    sites = [***REMOVED***
    for section, site in sitemaps.items(***REMOVED***:
        if callable(site***REMOVED***:
            site = site(***REMOVED***
        protocol = req_protocol if site.protocol is None else site.protocol
        sitemap_url = reverse(sitemap_url_name, kwargs={'section': section***REMOVED******REMOVED***
        absolute_url = '%s://%s%s' % (protocol, req_site.domain, sitemap_url***REMOVED***
        sites.append(absolute_url***REMOVED***
        for page in range(2, site.paginator.num_pages + 1***REMOVED***:
            sites.append('%s?p=%s' % (absolute_url, page***REMOVED******REMOVED***

    return TemplateResponse(request, template_name, {'sitemaps': sites***REMOVED***,
                            content_type=content_type***REMOVED***


@x_robots_tag
def sitemap(request, sitemaps, section=None,
            template_name='sitemap.xml', content_type='application/xml'***REMOVED***:

    req_protocol = request.scheme
    req_site = get_current_site(request***REMOVED***

    if section is not None:
        if section not in sitemaps:
            raise Http404("No sitemap available for section: %r" % section***REMOVED***
        maps = [sitemaps[section***REMOVED******REMOVED***
    else:
        maps = sitemaps.values(***REMOVED***
    page = request.GET.get("p", 1***REMOVED***

    lastmod = None
    all_sites_lastmod = True
    urls = [***REMOVED***
    for site in maps:
        ***REMOVED***
            if callable(site***REMOVED***:
                site = site(***REMOVED***
            urls.extend(site.get_urls(page=page, site=req_site,
                                      protocol=req_protocol***REMOVED******REMOVED***
            if all_sites_lastmod:
                site_lastmod = getattr(site, 'latest_lastmod', None***REMOVED***
                if site_lastmod is not None:
                    site_lastmod = (
                        site_lastmod.utctimetuple(***REMOVED*** if isinstance(site_lastmod, datetime.datetime***REMOVED***
                        else site_lastmod.timetuple(***REMOVED***
                    ***REMOVED***
                    lastmod = site_lastmod if lastmod is None else max(lastmod, site_lastmod***REMOVED***
                else:
                    all_sites_lastmod = False
        except EmptyPage:
            raise Http404("Page %s empty" % page***REMOVED***
        except PageNotAnInteger:
            raise Http404("No page '%s'" % page***REMOVED***
    response = TemplateResponse(request, template_name, {'urlset': urls***REMOVED***,
                                content_type=content_type***REMOVED***
    if all_sites_lastmod and lastmod is not None:
        # if lastmod is defined for all sites, set header so as
        # ConditionalGetMiddleware is able to send 304 NOT MODIFIED
        response['Last-Modified'***REMOVED*** = http_date(timegm(lastmod***REMOVED******REMOVED***
    return response
