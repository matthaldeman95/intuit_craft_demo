from django.contrib.messages import constants
from django.contrib.messages.storage import default_storage
from django.http import HttpRequest

__all__ = (
    'add_message', 'get_messages',
    'get_level', 'set_level',
    'debug', 'info', 'success', 'warning', 'error',
    'MessageFailure',
***REMOVED***


class MessageFailure(Exception***REMOVED***:
    pass


def add_message(request, level, message, extra_tags='', fail_silently=False***REMOVED***:
    ***REMOVED***
    Attempts to add a message to the request using the 'messages' app.
    ***REMOVED***
    if not isinstance(request, HttpRequest***REMOVED***:
        raise TypeError("add_message(***REMOVED*** argument must be an HttpRequest object, "
                        "not '%s'." % request.__class__.__name__***REMOVED***
    if hasattr(request, '_messages'***REMOVED***:
        return request._messages.add(level, message, extra_tags***REMOVED***
    if not fail_silently:
        raise MessageFailure(
            'You cannot add messages without installing '
            'django.contrib.messages.middleware.MessageMiddleware'
        ***REMOVED***


def get_messages(request***REMOVED***:
    ***REMOVED***
    Returns the message storage on the request if it exists, otherwise returns
    an empty list.
    ***REMOVED***
    return getattr(request, '_messages', [***REMOVED******REMOVED***


def get_level(request***REMOVED***:
    ***REMOVED***
    Returns the minimum level of messages to be recorded.

    The default level is the ``MESSAGE_LEVEL`` setting. If this is not found,
    the ``INFO`` level is used.
    ***REMOVED***
    storage = getattr(request, '_messages', default_storage(request***REMOVED******REMOVED***
    return storage.level


def set_level(request, level***REMOVED***:
    ***REMOVED***
    Sets the minimum level of messages to be recorded, returning ``True`` if
    the level was recorded successfully.

    If set to ``None``, the default level will be used (see the ``get_level``
    method***REMOVED***.
    ***REMOVED***
    if not hasattr(request, '_messages'***REMOVED***:
        return False
    request._messages.level = level
    return True


def debug(request, message, extra_tags='', fail_silently=False***REMOVED***:
    ***REMOVED***
    Adds a message with the ``DEBUG`` level.
    ***REMOVED***
    add_message(request, constants.DEBUG, message, extra_tags=extra_tags,
                fail_silently=fail_silently***REMOVED***


def info(request, message, extra_tags='', fail_silently=False***REMOVED***:
    ***REMOVED***
    Adds a message with the ``INFO`` level.
    ***REMOVED***
    add_message(request, constants.INFO, message, extra_tags=extra_tags,
                fail_silently=fail_silently***REMOVED***


def success(request, message, extra_tags='', fail_silently=False***REMOVED***:
    ***REMOVED***
    Adds a message with the ``SUCCESS`` level.
    ***REMOVED***
    add_message(request, constants.SUCCESS, message, extra_tags=extra_tags,
                fail_silently=fail_silently***REMOVED***


def warning(request, message, extra_tags='', fail_silently=False***REMOVED***:
    ***REMOVED***
    Adds a message with the ``WARNING`` level.
    ***REMOVED***
    add_message(request, constants.WARNING, message, extra_tags=extra_tags,
                fail_silently=fail_silently***REMOVED***


def error(request, message, extra_tags='', fail_silently=False***REMOVED***:
    ***REMOVED***
    Adds a message with the ``ERROR`` level.
    ***REMOVED***
    add_message(request, constants.ERROR, message, extra_tags=extra_tags,
                fail_silently=fail_silently***REMOVED***
