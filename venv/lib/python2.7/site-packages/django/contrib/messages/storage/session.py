import json

from django.conf import settings
from django.contrib.messages.storage.base import BaseStorage
from django.contrib.messages.storage.cookie import (
    MessageDecoder, MessageEncoder,
***REMOVED***
from django.utils import six


class SessionStorage(BaseStorage***REMOVED***:
    ***REMOVED***
    Stores messages in the session (that is, django.contrib.sessions***REMOVED***.
    ***REMOVED***
    session_key = '_messages'

    def __init__(self, request, *args, **kwargs***REMOVED***:
        assert hasattr(request, 'session'***REMOVED***, "The session-based temporary "\
            "message storage requires session middleware to be installed, "\
            "and come before the message middleware in the "\
            "MIDDLEWARE%s list." % ("_CLASSES" if settings.MIDDLEWARE is None else ""***REMOVED***
        super(SessionStorage, self***REMOVED***.__init__(request, *args, **kwargs***REMOVED***

    def _get(self, *args, **kwargs***REMOVED***:
        ***REMOVED***
        Retrieves a list of messages from the request's session.  This storage
        always stores everything it is given, so return True for the
        all_retrieved flag.
        ***REMOVED***
        return self.deserialize_messages(self.request.session.get(self.session_key***REMOVED******REMOVED***, True

    def _store(self, messages, response, *args, **kwargs***REMOVED***:
        ***REMOVED***
        Stores a list of messages to the request's session.
        ***REMOVED***
        if messages:
            self.request.session[self.session_key***REMOVED*** = self.serialize_messages(messages***REMOVED***
        else:
            self.request.session.pop(self.session_key, None***REMOVED***
        return [***REMOVED***

    def serialize_messages(self, messages***REMOVED***:
        encoder = MessageEncoder(separators=(',', ':'***REMOVED******REMOVED***
        return encoder.encode(messages***REMOVED***

    def deserialize_messages(self, data***REMOVED***:
        if data and isinstance(data, six.string_types***REMOVED***:
            return json.loads(data, cls=MessageDecoder***REMOVED***
        return data
