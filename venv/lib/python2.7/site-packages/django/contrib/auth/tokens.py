from datetime import date

from django.conf import settings
from django.utils import six
from django.utils.crypto import constant_time_compare, salted_hmac
from django.utils.http import base36_to_int, int_to_base36


class PasswordResetTokenGenerator(object***REMOVED***:
    ***REMOVED***
    Strategy object used to generate and check tokens for the password
    reset mechanism.
    ***REMOVED***
    key_salt = "django.contrib.auth.tokens.PasswordResetTokenGenerator"

    def make_token(self, user***REMOVED***:
        ***REMOVED***
        Returns a token that can be used once to do a password reset
        for the given user.
        ***REMOVED***
        return self._make_token_with_timestamp(user, self._num_days(self._today(***REMOVED******REMOVED******REMOVED***

    def check_token(self, user, token***REMOVED***:
        ***REMOVED***
        Check that a password reset token is correct for a given user.
        ***REMOVED***
        # Parse the token
        ***REMOVED***
            ts_b36, hash = token.split("-"***REMOVED***
        except ValueError:
            return False

        ***REMOVED***
            ts = base36_to_int(ts_b36***REMOVED***
        except ValueError:
            return False

        # Check that the timestamp/uid has not been tampered with
        if not constant_time_compare(self._make_token_with_timestamp(user, ts***REMOVED***, token***REMOVED***:
            return False

        # Check the timestamp is within limit
        if (self._num_days(self._today(***REMOVED******REMOVED*** - ts***REMOVED*** > settings.PASSWORD_RESET_TIMEOUT_DAYS:
            return False

        return True

    def _make_token_with_timestamp(self, user, timestamp***REMOVED***:
        # timestamp is number of days since 2001-1-1.  Converted to
        # base 36, this gives us a 3 digit string until about 2121
        ts_b36 = int_to_base36(timestamp***REMOVED***

        # By hashing on the internal state of the user and using state
        # that is sure to change (the password salt will change as soon as
        # the password is set, at least for current Django auth, and
        # last_login will also change***REMOVED***, we produce a hash that will be
        # invalid as soon as it is used.
        # We limit the hash to 20 chars to keep URL short

        hash = salted_hmac(
            self.key_salt,
            self._make_hash_value(user, timestamp***REMOVED***,
        ***REMOVED***.hexdigest(***REMOVED***[::2***REMOVED***
        return "%s-%s" % (ts_b36, hash***REMOVED***

    def _make_hash_value(self, user, timestamp***REMOVED***:
        # Ensure results are consistent across DB backends
        login_timestamp = '' if user.last_login is None else user.last_login.replace(microsecond=0, tzinfo=None***REMOVED***
        return (
            six.text_type(user.pk***REMOVED*** + user.password +
            six.text_type(login_timestamp***REMOVED*** + six.text_type(timestamp***REMOVED***
        ***REMOVED***

    def _num_days(self, dt***REMOVED***:
        return (dt - date(2001, 1, 1***REMOVED******REMOVED***.days

    def _today(self***REMOVED***:
        # Used for mocking in tests
        return date.today(***REMOVED***

default_token_generator = PasswordResetTokenGenerator(***REMOVED***
