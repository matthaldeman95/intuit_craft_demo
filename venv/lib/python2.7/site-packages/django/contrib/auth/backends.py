from __future__ import unicode_literals

from django.contrib.auth import get_user_model
from django.contrib.auth.models import Permission


class ModelBackend(object***REMOVED***:
    ***REMOVED***
    Authenticates against settings.AUTH_USER_MODEL.
    ***REMOVED***

    def authenticate(self, username=None, password=None, **kwargs***REMOVED***:
        UserModel = get_user_model(***REMOVED***
        if username is None:
            username = kwargs.get(UserModel.USERNAME_FIELD***REMOVED***
        ***REMOVED***
            user = UserModel._default_manager.get_by_natural_key(username***REMOVED***
        except UserModel.DoesNotExist:
            # Run the default password hasher once to reduce the timing
            # difference between an existing and a non-existing user (#20760***REMOVED***.
            UserModel(***REMOVED***.set_password(password***REMOVED***
        else:
            if user.check_password(password***REMOVED*** and self.user_can_authenticate(user***REMOVED***:
                return user

    def user_can_authenticate(self, user***REMOVED***:
        ***REMOVED***
        Reject users with is_active=False. Custom user models that don't have
        that attribute are allowed.
        ***REMOVED***
        is_active = getattr(user, 'is_active', None***REMOVED***
        return is_active or is_active is None

    def _get_user_permissions(self, user_obj***REMOVED***:
        return user_obj.user_permissions.all(***REMOVED***

    def _get_group_permissions(self, user_obj***REMOVED***:
        user_groups_field = get_user_model(***REMOVED***._meta.get_field('groups'***REMOVED***
        user_groups_query = 'group__%s' % user_groups_field.related_query_name(***REMOVED***
        return Permission.objects.filter(**{user_groups_query: user_obj***REMOVED******REMOVED***

    def _get_permissions(self, user_obj, obj, from_name***REMOVED***:
        ***REMOVED***
        Returns the permissions of `user_obj` from `from_name`. `from_name` can
        be either "group" or "user" to return permissions from
        `_get_group_permissions` or `_get_user_permissions` respectively.
        ***REMOVED***
        if not user_obj.is_active or user_obj.is_anonymous or obj is not None:
            return set(***REMOVED***

        perm_cache_name = '_%s_perm_cache' % from_name
        if not hasattr(user_obj, perm_cache_name***REMOVED***:
            if user_obj.is_superuser:
                perms = Permission.objects.all(***REMOVED***
            else:
                perms = getattr(self, '_get_%s_permissions' % from_name***REMOVED***(user_obj***REMOVED***
            perms = perms.values_list('content_type__app_label', 'codename'***REMOVED***.order_by(***REMOVED***
            setattr(user_obj, perm_cache_name, set("%s.%s" % (ct, name***REMOVED*** for ct, name in perms***REMOVED******REMOVED***
        return getattr(user_obj, perm_cache_name***REMOVED***

    def get_user_permissions(self, user_obj, obj=None***REMOVED***:
        ***REMOVED***
        Returns a set of permission strings the user `user_obj` has from their
        `user_permissions`.
        ***REMOVED***
        return self._get_permissions(user_obj, obj, 'user'***REMOVED***

    def get_group_permissions(self, user_obj, obj=None***REMOVED***:
        ***REMOVED***
        Returns a set of permission strings the user `user_obj` has from the
        groups they belong.
        ***REMOVED***
        return self._get_permissions(user_obj, obj, 'group'***REMOVED***

    def get_all_permissions(self, user_obj, obj=None***REMOVED***:
        if not user_obj.is_active or user_obj.is_anonymous or obj is not None:
            return set(***REMOVED***
        if not hasattr(user_obj, '_perm_cache'***REMOVED***:
            user_obj._perm_cache = self.get_user_permissions(user_obj***REMOVED***
            user_obj._perm_cache.update(self.get_group_permissions(user_obj***REMOVED******REMOVED***
        return user_obj._perm_cache

    def has_perm(self, user_obj, perm, obj=None***REMOVED***:
        if not user_obj.is_active:
            return False
        return perm in self.get_all_permissions(user_obj, obj***REMOVED***

    def has_module_perms(self, user_obj, app_label***REMOVED***:
        ***REMOVED***
        Returns True if user_obj has any permissions in the given app_label.
        ***REMOVED***
        if not user_obj.is_active:
            return False
        for perm in self.get_all_permissions(user_obj***REMOVED***:
            if perm[:perm.index('.'***REMOVED******REMOVED*** == app_label:
                return True
        return False

    def get_user(self, user_id***REMOVED***:
        UserModel = get_user_model(***REMOVED***
        ***REMOVED***
            user = UserModel._default_manager.get(pk=user_id***REMOVED***
        except UserModel.DoesNotExist:
            return None
        return user if self.user_can_authenticate(user***REMOVED*** else None


class AllowAllUsersModelBackend(ModelBackend***REMOVED***:
    def user_can_authenticate(self, user***REMOVED***:
        return True


class RemoteUserBackend(ModelBackend***REMOVED***:
    ***REMOVED***
    This backend is to be used in conjunction with the ``RemoteUserMiddleware``
    found in the middleware module of this package, and is used when the server
    is handling authentication outside of Django.

    By default, the ``authenticate`` method creates ``User`` objects for
    usernames that don't already exist in the database.  Subclasses can disable
    this behavior by setting the ``create_unknown_user`` attribute to
    ``False``.
    ***REMOVED***

    # Create a User object if not already in the database?
    create_unknown_user = True

    def authenticate(self, remote_user***REMOVED***:
        ***REMOVED***
        The username passed as ``remote_user`` is considered trusted.  This
        method simply returns the ``User`` object with the given username,
        creating a new ``User`` object if ``create_unknown_user`` is ``True``.

        Returns None if ``create_unknown_user`` is ``False`` and a ``User``
        object with the given username is not found in the database.
        ***REMOVED***
        if not remote_user:
            return
        user = None
        username = self.clean_username(remote_user***REMOVED***

        UserModel = get_user_model(***REMOVED***

        # Note that this could be accomplished in one try-except clause, but
        # instead we use get_or_create when creating unknown users since it has
        # built-in safeguards for multiple threads.
        if self.create_unknown_user:
            user, created = UserModel._default_manager.get_or_create(**{
                UserModel.USERNAME_FIELD: username
        ***REMOVED******REMOVED***
            if created:
                user = self.configure_user(user***REMOVED***
        else:
            ***REMOVED***
                user = UserModel._default_manager.get_by_natural_key(username***REMOVED***
            except UserModel.DoesNotExist:
                pass
        return user if self.user_can_authenticate(user***REMOVED*** else None

    def clean_username(self, username***REMOVED***:
        ***REMOVED***
        Performs any cleaning on the "username" prior to using it to get or
        create the user object.  Returns the cleaned username.

        By default, returns the username unchanged.
        ***REMOVED***
        return username

    def configure_user(self, user***REMOVED***:
        ***REMOVED***
        Configures a user after creation and returns the updated user.

        By default, returns the user unmodified.
        ***REMOVED***
        return user


class AllowAllUsersRemoteUserBackend(RemoteUserBackend***REMOVED***:
    def user_can_authenticate(self, user***REMOVED***:
        return True
