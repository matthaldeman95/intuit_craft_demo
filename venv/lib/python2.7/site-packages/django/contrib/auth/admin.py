from django.conf import settings
from django.conf.urls import url
from django.contrib import admin, messages
from django.contrib.admin.options import IS_POPUP_VAR
from django.contrib.admin.utils import unquote
from django.contrib.auth import update_session_auth_hash
from django.contrib.auth.forms import (
    AdminPasswordChangeForm, UserChangeForm, UserCreationForm,
***REMOVED***
from django.contrib.auth.models import Group, User
from django.core.exceptions import PermissionDenied
from django.db import transaction
from django.http import Http404, HttpResponseRedirect
from django.template.response import TemplateResponse
from django.urls import reverse
from django.utils.decorators import method_decorator
from django.utils.encoding import force_text
from django.utils.html import escape
from django.utils.translation import ugettext, ugettext_lazy as _
from django.views.decorators.csrf import csrf_protect
from django.views.decorators.debug import sensitive_post_parameters

csrf_protect_m = method_decorator(csrf_protect***REMOVED***
sensitive_post_parameters_m = method_decorator(sensitive_post_parameters(***REMOVED******REMOVED***


@admin.register(Group***REMOVED***
class GroupAdmin(admin.ModelAdmin***REMOVED***:
    search_fields = ('name',***REMOVED***
    ordering = ('name',***REMOVED***
    filter_horizontal = ('permissions',***REMOVED***

    def formfield_for_manytomany(self, db_field, request=None, **kwargs***REMOVED***:
        if db_field.name == 'permissions':
            qs = kwargs.get('queryset', db_field.remote_field.model.objects***REMOVED***
            # Avoid a major performance hit resolving permission names which
            # triggers a content_type load:
            kwargs['queryset'***REMOVED*** = qs.select_related('content_type'***REMOVED***
        return super(GroupAdmin, self***REMOVED***.formfield_for_manytomany(
            db_field, request=request, **kwargs***REMOVED***


@admin.register(User***REMOVED***
class UserAdmin(admin.ModelAdmin***REMOVED***:
    add_form_template = 'admin/auth/user/add_form.html'
    change_user_password_template = None
    fieldsets = (
        (None, {'fields': ('username', 'password'***REMOVED******REMOVED******REMOVED***,
        (_('Personal info'***REMOVED***, {'fields': ('first_name', 'last_name', 'email'***REMOVED******REMOVED******REMOVED***,
        (_('Permissions'***REMOVED***, {'fields': ('is_active', 'is_staff', 'is_superuser',
                                       'groups', 'user_permissions'***REMOVED******REMOVED******REMOVED***,
        (_('Important dates'***REMOVED***, {'fields': ('last_login', 'date_joined'***REMOVED******REMOVED******REMOVED***,
    ***REMOVED***
    add_fieldsets = (
        (None, {
            'classes': ('wide',***REMOVED***,
            'fields': ('username', 'password1', 'password2'***REMOVED***,
    ***REMOVED******REMOVED***,
    ***REMOVED***
    form = UserChangeForm
    add_form = UserCreationForm
    change_password_form = AdminPasswordChangeForm
    list_display = ('username', 'email', 'first_name', 'last_name', 'is_staff'***REMOVED***
    list_filter = ('is_staff', 'is_superuser', 'is_active', 'groups'***REMOVED***
    search_fields = ('username', 'first_name', 'last_name', 'email'***REMOVED***
    ordering = ('username',***REMOVED***
    filter_horizontal = ('groups', 'user_permissions',***REMOVED***

    def get_fieldsets(self, request, obj=None***REMOVED***:
        if not obj:
            return self.add_fieldsets
        return super(UserAdmin, self***REMOVED***.get_fieldsets(request, obj***REMOVED***

    def get_form(self, request, obj=None, **kwargs***REMOVED***:
        ***REMOVED***
        Use special form during user creation
        ***REMOVED***
        defaults = {***REMOVED***
        if obj is None:
            defaults['form'***REMOVED*** = self.add_form
        defaults.update(kwargs***REMOVED***
        return super(UserAdmin, self***REMOVED***.get_form(request, obj, **defaults***REMOVED***

    def get_urls(self***REMOVED***:
        return [
            url(
                r'^(.+***REMOVED***/password/$',
                self.admin_site.admin_view(self.user_change_password***REMOVED***,
                name='auth_user_password_change',
            ***REMOVED***,
        ***REMOVED*** + super(UserAdmin, self***REMOVED***.get_urls(***REMOVED***

    def lookup_allowed(self, lookup, value***REMOVED***:
        # See #20078: we don't want to allow any lookups involving passwords.
        if lookup.startswith('password'***REMOVED***:
            return False
        return super(UserAdmin, self***REMOVED***.lookup_allowed(lookup, value***REMOVED***

    @sensitive_post_parameters_m
    @csrf_protect_m
    @transaction.atomic
    def add_view(self, request, form_url='', extra_context=None***REMOVED***:
        # It's an error for a user to have add permission but NOT change
        # permission for users. If we allowed such users to add users, they
        # could create superusers, which would mean they would essentially have
        # the permission to change users. To avoid the problem entirely, we
        # disallow users from adding users if they don't have change
        # permission.
        if not self.has_change_permission(request***REMOVED***:
            if self.has_add_permission(request***REMOVED*** and settings.DEBUG:
                # Raise Http404 in debug mode so that the user gets a helpful
                # error message.
                raise Http404(
                    'Your user does not have the "Change user" permission. In '
                    'order to add users, Django requires that your user '
                    'account have both the "Add user" and "Change user" '
                    'permissions set.'***REMOVED***
            raise PermissionDenied
        if extra_context is None:
            extra_context = {***REMOVED***
        username_field = self.model._meta.get_field(self.model.USERNAME_FIELD***REMOVED***
        defaults = {
            'auto_populated_fields': (***REMOVED***,
            'username_help_text': username_field.help_text,
    ***REMOVED***
        extra_context.update(defaults***REMOVED***
        return super(UserAdmin, self***REMOVED***.add_view(request, form_url,
                                               extra_context***REMOVED***

    @sensitive_post_parameters_m
    def user_change_password(self, request, id, form_url=''***REMOVED***:
        if not self.has_change_permission(request***REMOVED***:
            raise PermissionDenied
        user = self.get_object(request, unquote(id***REMOVED******REMOVED***
        if user is None:
            raise Http404(_('%(name***REMOVED***s object with primary key %(key***REMOVED***r does not exist.'***REMOVED*** % {
                'name': force_text(self.model._meta.verbose_name***REMOVED***,
                'key': escape(id***REMOVED***,
        ***REMOVED******REMOVED***
        if request.method == 'POST':
            form = self.change_password_form(user, request.POST***REMOVED***
            if form.is_valid(***REMOVED***:
                form.save(***REMOVED***
                change_message = self.construct_change_message(request, form, None***REMOVED***
                self.log_change(request, user, change_message***REMOVED***
                msg = ugettext('Password changed successfully.'***REMOVED***
                messages.success(request, msg***REMOVED***
                update_session_auth_hash(request, form.user***REMOVED***
                return HttpResponseRedirect(
                    reverse(
                        '%s:%s_%s_change' % (
                            self.admin_site.name,
                            user._meta.app_label,
                            user._meta.model_name,
                        ***REMOVED***,
                        args=(user.pk,***REMOVED***,
                    ***REMOVED***
                ***REMOVED***
        else:
            form = self.change_password_form(user***REMOVED***

        fieldsets = [(None, {'fields': list(form.base_fields***REMOVED******REMOVED******REMOVED******REMOVED***
        adminForm = admin.helpers.AdminForm(form, fieldsets, {***REMOVED******REMOVED***

        context = {
            'title': _('Change password: %s'***REMOVED*** % escape(user.get_username(***REMOVED******REMOVED***,
            'adminForm': adminForm,
            'form_url': form_url,
            'form': form,
            'is_popup': (IS_POPUP_VAR in request.POST or
                         IS_POPUP_VAR in request.GET***REMOVED***,
            'add': True,
            'change': False,
            'has_delete_permission': False,
            'has_change_permission': True,
            'has_absolute_url': False,
            'opts': self.model._meta,
            'original': user,
            'save_as': False,
            'show_save': True,
    ***REMOVED***
        context.update(self.admin_site.each_context(request***REMOVED******REMOVED***

        request.current_app = self.admin_site.name

        return TemplateResponse(
            request,
            self.change_user_password_template or
            'admin/auth/user/change_password.html',
            context,
        ***REMOVED***

    def response_add(self, request, obj, post_url_continue=None***REMOVED***:
        ***REMOVED***
        Determines the HttpResponse for the add_view stage. It mostly defers to
        its superclass implementation but is customized because the User model
        has a slightly different workflow.
        ***REMOVED***
        # We should allow further modification of the user just added i.e. the
        # 'Save' button should behave like the 'Save and continue editing'
        # button except in two scenarios:
        # * The user has pressed the 'Save and add another' button
        # * We are adding a user in a popup
        if '_addanother' not in request.POST and IS_POPUP_VAR not in request.POST:
            request.POST['_continue'***REMOVED*** = 1
        return super(UserAdmin, self***REMOVED***.response_add(request, obj,
                                                   post_url_continue***REMOVED***
