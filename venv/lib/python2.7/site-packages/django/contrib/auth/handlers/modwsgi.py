from django import db
from django.contrib import auth
from django.utils.encoding import force_bytes


def check_password(environ, username, password***REMOVED***:
    ***REMOVED***
    Authenticates against Django's auth database

    mod_wsgi docs specify None, True, False as return value depending
    on whether the user exists and authenticates.
    ***REMOVED***

    UserModel = auth.get_user_model(***REMOVED***
    # db connection state is managed similarly to the wsgi handler
    # as mod_wsgi may call these functions outside of a request/response cycle
    db.reset_queries(***REMOVED***

    ***REMOVED***
        ***REMOVED***
            user = UserModel._default_manager.get_by_natural_key(username***REMOVED***
        except UserModel.DoesNotExist:
            return None
        if not user.is_active:
            return None
        return user.check_password(password***REMOVED***
    finally:
        db.close_old_connections(***REMOVED***


def groups_for_user(environ, username***REMOVED***:
    ***REMOVED***
    Authorizes a user based on groups
    ***REMOVED***

    UserModel = auth.get_user_model(***REMOVED***
    db.reset_queries(***REMOVED***

    ***REMOVED***
        ***REMOVED***
            user = UserModel._default_manager.get_by_natural_key(username***REMOVED***
        except UserModel.DoesNotExist:
            return [***REMOVED***
        if not user.is_active:
            return [***REMOVED***
        return [force_bytes(group.name***REMOVED*** for group in user.groups.all(***REMOVED******REMOVED***
    finally:
        db.close_old_connections(***REMOVED***
