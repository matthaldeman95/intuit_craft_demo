from django.conf import settings
from django.contrib.auth import REDIRECT_FIELD_NAME
from django.contrib.auth.views import redirect_to_login
from django.core.exceptions import ImproperlyConfigured, PermissionDenied
from django.utils import six
from django.utils.encoding import force_text


class AccessMixin(object***REMOVED***:
    ***REMOVED***
    Abstract CBV mixin that gives access mixins the same customizable
    functionality.
    ***REMOVED***
    login_url = None
    permission_denied_message = ''
    raise_exception = False
    redirect_field_name = REDIRECT_FIELD_NAME

    def get_login_url(self***REMOVED***:
        ***REMOVED***
        Override this method to override the login_url attribute.
        ***REMOVED***
        login_url = self.login_url or settings.LOGIN_URL
        if not login_url:
            raise ImproperlyConfigured(
                '{0***REMOVED*** is missing the login_url attribute. Define {0***REMOVED***.login_url, settings.LOGIN_URL, or override '
                '{0***REMOVED***.get_login_url(***REMOVED***.'.format(self.__class__.__name__***REMOVED***
            ***REMOVED***
        return force_text(login_url***REMOVED***

    def get_permission_denied_message(self***REMOVED***:
        ***REMOVED***
        Override this method to override the permission_denied_message attribute.
        ***REMOVED***
        return self.permission_denied_message

    def get_redirect_field_name(self***REMOVED***:
        ***REMOVED***
        Override this method to override the redirect_field_name attribute.
        ***REMOVED***
        return self.redirect_field_name

    def handle_no_permission(self***REMOVED***:
        if self.raise_exception:
            raise PermissionDenied(self.get_permission_denied_message(***REMOVED******REMOVED***
        return redirect_to_login(self.request.get_full_path(***REMOVED***, self.get_login_url(***REMOVED***, self.get_redirect_field_name(***REMOVED******REMOVED***


class LoginRequiredMixin(AccessMixin***REMOVED***:
    ***REMOVED***
    CBV mixin which verifies that the current user is authenticated.
    ***REMOVED***
    def dispatch(self, request, *args, **kwargs***REMOVED***:
        if not request.user.is_authenticated:
            return self.handle_no_permission(***REMOVED***
        return super(LoginRequiredMixin, self***REMOVED***.dispatch(request, *args, **kwargs***REMOVED***


class PermissionRequiredMixin(AccessMixin***REMOVED***:
    ***REMOVED***
    CBV mixin which verifies that the current user has all specified
    permissions.
    ***REMOVED***
    permission_required = None

    def get_permission_required(self***REMOVED***:
        ***REMOVED***
        Override this method to override the permission_required attribute.
        Must return an iterable.
        ***REMOVED***
        if self.permission_required is None:
            raise ImproperlyConfigured(
                '{0***REMOVED*** is missing the permission_required attribute. Define {0***REMOVED***.permission_required, or override '
                '{0***REMOVED***.get_permission_required(***REMOVED***.'.format(self.__class__.__name__***REMOVED***
            ***REMOVED***
        if isinstance(self.permission_required, six.string_types***REMOVED***:
            perms = (self.permission_required, ***REMOVED***
        else:
            perms = self.permission_required
        return perms

    def has_permission(self***REMOVED***:
        ***REMOVED***
        Override this method to customize the way permissions are checked.
        ***REMOVED***
        perms = self.get_permission_required(***REMOVED***
        return self.request.user.has_perms(perms***REMOVED***

    def dispatch(self, request, *args, **kwargs***REMOVED***:
        if not self.has_permission(***REMOVED***:
            return self.handle_no_permission(***REMOVED***
        return super(PermissionRequiredMixin, self***REMOVED***.dispatch(request, *args, **kwargs***REMOVED***


class UserPassesTestMixin(AccessMixin***REMOVED***:
    ***REMOVED***
    CBV Mixin that allows you to define a test function which must return True
    if the current user can access the view.
    ***REMOVED***

    def test_func(self***REMOVED***:
        raise NotImplementedError(
            '{0***REMOVED*** is missing the implementation of the test_func(***REMOVED*** method.'.format(self.__class__.__name__***REMOVED***
        ***REMOVED***

    def get_test_func(self***REMOVED***:
        ***REMOVED***
        Override this method to use a different test_func method.
        ***REMOVED***
        return self.test_func

    def dispatch(self, request, *args, **kwargs***REMOVED***:
        user_test_result = self.get_test_func(***REMOVED***(***REMOVED***
        if not user_test_result:
            return self.handle_no_permission(***REMOVED***
        return super(UserPassesTestMixin, self***REMOVED***.dispatch(request, *args, **kwargs***REMOVED***
