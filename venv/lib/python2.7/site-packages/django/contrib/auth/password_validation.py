from __future__ import unicode_literals

import gzip
***REMOVED***
import re
from difflib import SequenceMatcher

from django.conf import settings
from django.core.exceptions import ImproperlyConfigured, ValidationError
from django.utils import lru_cache
from django.utils._os import upath
from django.utils.encoding import force_text
from django.utils.functional import lazy
from django.utils.html import format_html
from django.utils.module_loading import import_string
from django.utils.six import string_types, text_type
from django.utils.translation import ugettext as _, ungettext


@lru_cache.lru_cache(maxsize=None***REMOVED***
def get_default_password_validators(***REMOVED***:
    return get_password_validators(settings.AUTH_PASSWORD_VALIDATORS***REMOVED***


def get_password_validators(validator_config***REMOVED***:
    validators = [***REMOVED***
    for validator in validator_config:
        ***REMOVED***
            klass = import_string(validator['NAME'***REMOVED******REMOVED***
        except ImportError:
            msg = "The module in NAME could not be imported: %s. Check your AUTH_PASSWORD_VALIDATORS setting."
            raise ImproperlyConfigured(msg % validator['NAME'***REMOVED******REMOVED***
        validators.append(klass(**validator.get('OPTIONS', {***REMOVED******REMOVED******REMOVED******REMOVED***

    return validators


def validate_password(password, user=None, password_validators=None***REMOVED***:
    ***REMOVED***
    Validate whether the password meets all validator requirements.

    If the password is valid, return ``None``.
    If the password is invalid, raise ValidationError with all error messages.
    ***REMOVED***
    errors = [***REMOVED***
    if password_validators is None:
        password_validators = get_default_password_validators(***REMOVED***
    for validator in password_validators:
        ***REMOVED***
            validator.validate(password, user***REMOVED***
        except ValidationError as error:
            errors.append(error***REMOVED***
    if errors:
        raise ValidationError(errors***REMOVED***


def password_changed(password, user=None, password_validators=None***REMOVED***:
    ***REMOVED***
    Inform all validators that have implemented a password_changed(***REMOVED*** method
    that the password has been changed.
    ***REMOVED***
    if password_validators is None:
        password_validators = get_default_password_validators(***REMOVED***
    for validator in password_validators:
        password_changed = getattr(validator, 'password_changed', lambda *a: None***REMOVED***
        password_changed(password, user***REMOVED***


def password_validators_help_texts(password_validators=None***REMOVED***:
    ***REMOVED***
    Return a list of all help texts of all configured validators.
    ***REMOVED***
    help_texts = [***REMOVED***
    if password_validators is None:
        password_validators = get_default_password_validators(***REMOVED***
    for validator in password_validators:
        help_texts.append(validator.get_help_text(***REMOVED******REMOVED***
    return help_texts


def _password_validators_help_text_html(password_validators=None***REMOVED***:
    ***REMOVED***
    Return an HTML string with all help texts of all configured validators
    in an <ul>.
    ***REMOVED***
    help_texts = password_validators_help_texts(password_validators***REMOVED***
    help_items = [format_html('<li>{***REMOVED***</li>', help_text***REMOVED*** for help_text in help_texts***REMOVED***
    return '<ul>%s</ul>' % ''.join(help_items***REMOVED*** if help_items else ''
password_validators_help_text_html = lazy(_password_validators_help_text_html, text_type***REMOVED***


class MinimumLengthValidator(object***REMOVED***:
    ***REMOVED***
    Validate whether the password is of a minimum length.
    ***REMOVED***
    def __init__(self, min_length=8***REMOVED***:
        self.min_length = min_length

    def validate(self, password, user=None***REMOVED***:
        if len(password***REMOVED*** < self.min_length:
            raise ValidationError(
                ungettext(
                    "This password is too short. It must contain at least %(min_length***REMOVED***d character.",
                    "This password is too short. It must contain at least %(min_length***REMOVED***d characters.",
                    self.min_length
                ***REMOVED***,
                code='password_too_short',
                params={'min_length': self.min_length***REMOVED***,
            ***REMOVED***

    def get_help_text(self***REMOVED***:
        return ungettext(
            "Your password must contain at least %(min_length***REMOVED***d character.",
            "Your password must contain at least %(min_length***REMOVED***d characters.",
            self.min_length
        ***REMOVED*** % {'min_length': self.min_length***REMOVED***


class UserAttributeSimilarityValidator(object***REMOVED***:
    ***REMOVED***
    Validate whether the password is sufficiently different from the user's
    attributes.

    If no specific attributes are provided, look at a sensible list of
    defaults. Attributes that don't exist are ignored. Comparison is made to
    not only the full attribute value, but also its components, so that, for
    example, a password is validated against either part of an email address,
    as well as the full address.
    ***REMOVED***
    DEFAULT_USER_ATTRIBUTES = ('username', 'first_name', 'last_name', 'email'***REMOVED***

    def __init__(self, user_attributes=DEFAULT_USER_ATTRIBUTES, max_similarity=0.7***REMOVED***:
        self.user_attributes = user_attributes
        self.max_similarity = max_similarity

    def validate(self, password, user=None***REMOVED***:
        if not user:
            return

        for attribute_name in self.user_attributes:
            value = getattr(user, attribute_name, None***REMOVED***
            if not value or not isinstance(value, string_types***REMOVED***:
                continue
            value_parts = re.split('\W+', value***REMOVED*** + [value***REMOVED***
            for value_part in value_parts:
                if SequenceMatcher(a=password.lower(***REMOVED***, b=value_part.lower(***REMOVED******REMOVED***.quick_ratio(***REMOVED*** > self.max_similarity:
                    verbose_name = force_text(user._meta.get_field(attribute_name***REMOVED***.verbose_name***REMOVED***
                    raise ValidationError(
                        _("The password is too similar to the %(verbose_name***REMOVED***s."***REMOVED***,
                        code='password_too_similar',
                        params={'verbose_name': verbose_name***REMOVED***,
                    ***REMOVED***

    def get_help_text(self***REMOVED***:
        return _("Your password can't be too similar to your other personal information."***REMOVED***


class CommonPasswordValidator(object***REMOVED***:
    ***REMOVED***
    Validate whether the password is a common password.

    The password is rejected if it occurs in a provided list, which may be gzipped.
    The list Django ships with contains 1000 common passwords, created by Mark Burnett:
    https://xato.net/passwords/more-top-worst-passwords/
    ***REMOVED***
    DEFAULT_PASSWORD_LIST_PATH = os.path.join(
        os.path.dirname(os.path.realpath(upath(__file__***REMOVED******REMOVED******REMOVED***, 'common-passwords.txt.gz'
    ***REMOVED***

    def __init__(self, password_list_path=DEFAULT_PASSWORD_LIST_PATH***REMOVED***:
        ***REMOVED***
            common_passwords_lines = gzip.open(password_list_path***REMOVED***.read(***REMOVED***.decode('utf-8'***REMOVED***.splitlines(***REMOVED***
        except IOError:
            with open(password_list_path***REMOVED*** as f:
                common_passwords_lines = f.readlines(***REMOVED***

        self.passwords = {p.strip(***REMOVED*** for p in common_passwords_lines***REMOVED***

    def validate(self, password, user=None***REMOVED***:
        if password.lower(***REMOVED***.strip(***REMOVED*** in self.passwords:
            raise ValidationError(
                _("This password is too common."***REMOVED***,
                code='password_too_common',
            ***REMOVED***

    def get_help_text(self***REMOVED***:
        return _("Your password can't be a commonly used password."***REMOVED***


class NumericPasswordValidator(object***REMOVED***:
    ***REMOVED***
    Validate whether the password is alphanumeric.
    ***REMOVED***
    def validate(self, password, user=None***REMOVED***:
        if password.isdigit(***REMOVED***:
            raise ValidationError(
                _("This password is entirely numeric."***REMOVED***,
                code='password_entirely_numeric',
            ***REMOVED***

    def get_help_text(self***REMOVED***:
        return _("Your password can't be entirely numeric."***REMOVED***
