from __future__ import unicode_literals

import getpass

from django.contrib.auth import get_user_model
from django.contrib.auth.password_validation import validate_password
from django.core.exceptions import ValidationError
from django.core.management.base import BaseCommand, CommandError
from django.db import DEFAULT_DB_ALIAS
from django.utils.encoding import force_str


class Command(BaseCommand***REMOVED***:
    help = "Change a user's password for django.contrib.auth."
    requires_migrations_checks = True
    requires_system_checks = False

    def _get_pass(self, prompt="Password: "***REMOVED***:
        p = getpass.getpass(prompt=force_str(prompt***REMOVED******REMOVED***
        if not p:
            raise CommandError("aborted"***REMOVED***
        return p

    def add_arguments(self, parser***REMOVED***:
        parser.add_argument(
            'username', nargs='?',
            help='Username to change password for; by default, it\'s the current username.',
        ***REMOVED***
        parser.add_argument(
            '--database', action='store', dest='database',
            default=DEFAULT_DB_ALIAS,
            help='Specifies the database to use. Default is "default".',
        ***REMOVED***

    def handle(self, *args, **options***REMOVED***:
        if options['username'***REMOVED***:
            username = options['username'***REMOVED***
        else:
            username = getpass.getuser(***REMOVED***

        UserModel = get_user_model(***REMOVED***

        ***REMOVED***
            u = UserModel._default_manager.using(options['database'***REMOVED******REMOVED***.get(**{
                UserModel.USERNAME_FIELD: username
        ***REMOVED******REMOVED***
        except UserModel.DoesNotExist:
            raise CommandError("user '%s' does not exist" % username***REMOVED***

        self.stdout.write("Changing password for user '%s'\n" % u***REMOVED***

        MAX_TRIES = 3
        count = 0
        p1, p2 = 1, 2  # To make them initially mismatch.
        password_validated = False
        while (p1 != p2 or not password_validated***REMOVED*** and count < MAX_TRIES:
            p1 = self._get_pass(***REMOVED***
            p2 = self._get_pass("Password (again***REMOVED***: "***REMOVED***
            if p1 != p2:
                self.stdout.write("Passwords do not match. Please try again.\n"***REMOVED***
                count += 1
                # Don't validate passwords that don't match.
                continue
            ***REMOVED***
                validate_password(p2, u***REMOVED***
            except ValidationError as err:
                self.stderr.write('\n'.join(err.messages***REMOVED******REMOVED***
                count += 1
            else:
                password_validated = True

        if count == MAX_TRIES:
            raise CommandError("Aborting password change for user '%s' after %s attempts" % (u, count***REMOVED******REMOVED***

        u.set_password(p1***REMOVED***
        u.save(***REMOVED***

        return "Password changed successfully for user '%s'" % u
