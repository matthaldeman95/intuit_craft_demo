***REMOVED***
Management utility to create superusers.
***REMOVED***
from __future__ import unicode_literals

import getpass
import sys

from django.contrib.auth import get_user_model
from django.contrib.auth.management import get_default_username
from django.contrib.auth.password_validation import validate_password
from django.core import exceptions
from django.core.management.base import BaseCommand, CommandError
from django.db import DEFAULT_DB_ALIAS
from django.utils.encoding import force_str
from django.utils.six.moves import input
from django.utils.text import capfirst


class NotRunningInTTYException(Exception***REMOVED***:
    pass


class Command(BaseCommand***REMOVED***:
    help = 'Used to create a superuser.'
    requires_migrations_checks = True

    def __init__(self, *args, **kwargs***REMOVED***:
        super(Command, self***REMOVED***.__init__(*args, **kwargs***REMOVED***
        self.UserModel = get_user_model(***REMOVED***
        self.username_field = self.UserModel._meta.get_field(self.UserModel.USERNAME_FIELD***REMOVED***

    def add_arguments(self, parser***REMOVED***:
        parser.add_argument(
            '--%s' % self.UserModel.USERNAME_FIELD,
            dest=self.UserModel.USERNAME_FIELD, default=None,
            help='Specifies the login for the superuser.',
        ***REMOVED***
        parser.add_argument(
            '--noinput', '--no-input',
            action='store_false', dest='interactive', default=True,
            help=(
                'Tells Django to NOT prompt the user for input of any kind. '
                'You must use --%s with --noinput, along with an option for '
                'any other required field. Superusers created with --noinput will '
                'not be able to log in until they\'re given a valid password.' %
                self.UserModel.USERNAME_FIELD
            ***REMOVED***,
        ***REMOVED***
        parser.add_argument(
            '--database', action='store', dest='database',
            default=DEFAULT_DB_ALIAS,
            help='Specifies the database to use. Default is "default".',
        ***REMOVED***
        for field in self.UserModel.REQUIRED_FIELDS:
            parser.add_argument(
                '--%s' % field, dest=field, default=None,
                help='Specifies the %s for the superuser.' % field,
            ***REMOVED***

    def execute(self, *args, **options***REMOVED***:
        self.stdin = options.get('stdin', sys.stdin***REMOVED***  # Used for testing
        return super(Command, self***REMOVED***.execute(*args, **options***REMOVED***

    def handle(self, *args, **options***REMOVED***:
        username = options[self.UserModel.USERNAME_FIELD***REMOVED***
        database = options['database'***REMOVED***

        # If not provided, create the user with an unusable password
        password = None
        user_data = {***REMOVED***
        # Same as user_data but with foreign keys as fake model instances
        # instead of raw IDs.
        fake_user_data = {***REMOVED***

        # Do quick and dirty validation if --noinput
        if not options['interactive'***REMOVED***:
            ***REMOVED***
                if not username:
                    raise CommandError("You must use --%s with --noinput." % self.UserModel.USERNAME_FIELD***REMOVED***
                username = self.username_field.clean(username, None***REMOVED***

                for field_name in self.UserModel.REQUIRED_FIELDS:
                    if options[field_name***REMOVED***:
                        field = self.UserModel._meta.get_field(field_name***REMOVED***
                        user_data[field_name***REMOVED*** = field.clean(options[field_name***REMOVED***, None***REMOVED***
                    else:
                        raise CommandError("You must use --%s with --noinput." % field_name***REMOVED***
            except exceptions.ValidationError as e:
                raise CommandError('; '.join(e.messages***REMOVED******REMOVED***

        else:
            # Prompt for username/password, and any other required fields.
            # Enclose this whole thing in a try/except to catch
            # KeyboardInterrupt and exit gracefully.
            default_username = get_default_username(***REMOVED***
            ***REMOVED***

                if hasattr(self.stdin, 'isatty'***REMOVED*** and not self.stdin.isatty(***REMOVED***:
                    raise NotRunningInTTYException("Not running in a TTY"***REMOVED***

                # Get a username
                verbose_field_name = self.username_field.verbose_name
                while username is None:
                    input_msg = capfirst(verbose_field_name***REMOVED***
                    if default_username:
                        input_msg += " (leave blank to use '%s'***REMOVED***" % default_username
                    username_rel = self.username_field.remote_field
                    input_msg = force_str('%s%s: ' % (
                        input_msg,
                        ' (%s.%s***REMOVED***' % (
                            username_rel.model._meta.object_name,
                            username_rel.field_name
                        ***REMOVED*** if username_rel else ''***REMOVED***
                    ***REMOVED***
                    username = self.get_input_data(self.username_field, input_msg, default_username***REMOVED***
                    if not username:
                        continue
                    if self.username_field.unique:
                        ***REMOVED***
                            self.UserModel._default_manager.db_manager(database***REMOVED***.get_by_natural_key(username***REMOVED***
                        except self.UserModel.DoesNotExist:
                            pass
                        else:
                            self.stderr.write("Error: That %s is already taken." % verbose_field_name***REMOVED***
                            username = None

                for field_name in self.UserModel.REQUIRED_FIELDS:
                    field = self.UserModel._meta.get_field(field_name***REMOVED***
                    user_data[field_name***REMOVED*** = options[field_name***REMOVED***
                    while user_data[field_name***REMOVED*** is None:
                        message = force_str('%s%s: ' % (
                            capfirst(field.verbose_name***REMOVED***,
                            ' (%s.%s***REMOVED***' % (
                                field.remote_field.model._meta.object_name,
                                field.remote_field.field_name,
                            ***REMOVED*** if field.remote_field else '',
                        ***REMOVED******REMOVED***
                        input_value = self.get_input_data(field, message***REMOVED***
                        user_data[field_name***REMOVED*** = input_value
                        fake_user_data[field_name***REMOVED*** = input_value

                        # Wrap any foreign keys in fake model instances
                        if field.remote_field:
                            fake_user_data[field_name***REMOVED*** = field.remote_field.model(input_value***REMOVED***

                # Get a password
                while password is None:
                    password = getpass.getpass(***REMOVED***
                    password2 = getpass.getpass(force_str('Password (again***REMOVED***: '***REMOVED******REMOVED***
                    if password != password2:
                        self.stderr.write("Error: Your passwords didn't match."***REMOVED***
                        password = None
                        # Don't validate passwords that don't match.
                        continue

                    if password.strip(***REMOVED*** == '':
                        self.stderr.write("Error: Blank passwords aren't allowed."***REMOVED***
                        password = None
                        # Don't validate blank passwords.
                        continue

                    ***REMOVED***
                        validate_password(password2, self.UserModel(**fake_user_data***REMOVED******REMOVED***
                    except exceptions.ValidationError as err:
                        self.stderr.write('\n'.join(err.messages***REMOVED******REMOVED***
                        password = None

            except KeyboardInterrupt:
                self.stderr.write("\nOperation cancelled."***REMOVED***
                sys.exit(1***REMOVED***

            except NotRunningInTTYException:
                self.stdout.write(
                    "Superuser creation skipped due to not running in a TTY. "
                    "You can run `manage.py createsuperuser` in your project "
                    "to create one manually."
                ***REMOVED***

        if username:
            user_data[self.UserModel.USERNAME_FIELD***REMOVED*** = username
            user_data['password'***REMOVED*** = password
            self.UserModel._default_manager.db_manager(database***REMOVED***.create_superuser(**user_data***REMOVED***
            if options['verbosity'***REMOVED*** >= 1:
                self.stdout.write("Superuser created successfully."***REMOVED***

    def get_input_data(self, field, message, default=None***REMOVED***:
        ***REMOVED***
        Override this method if you want to customize data inputs or
        validation exceptions.
        ***REMOVED***
        raw_value = input(message***REMOVED***
        if default and raw_value == '':
            raw_value = default
        ***REMOVED***
            val = field.clean(raw_value, None***REMOVED***
        except exceptions.ValidationError as e:
            self.stderr.write("Error: %s" % '; '.join(e.messages***REMOVED******REMOVED***
            val = None

        return val
