from ctypes import POINTER, c_char_p, c_double, c_int, c_void_p

from django.contrib.gis.gdal.envelope import OGREnvelope
from django.contrib.gis.gdal.libgdal import lgdal
from django.contrib.gis.gdal.prototypes.errcheck import check_envelope
from django.contrib.gis.gdal.prototypes.generation import (
    const_string_output, double_output, geom_output, int_output, srs_output,
    string_output, void_output,
***REMOVED***


# ### Generation routines specific to this module ###
def env_func(f, argtypes***REMOVED***:
    "For getting OGREnvelopes."
    f.argtypes = argtypes
    f.restype = None
    f.errcheck = check_envelope
    return f


def pnt_func(f***REMOVED***:
    "For accessing point information."
    return double_output(f, [c_void_p, c_int***REMOVED******REMOVED***


def topology_func(f***REMOVED***:
    f.argtypes = [c_void_p, c_void_p***REMOVED***
    f.restype = c_int
    f.errcheck = lambda result, func, cargs: bool(result***REMOVED***
    return f

# ### OGR_G ctypes function prototypes ###

# GeoJSON routines.
from_json = geom_output(lgdal.OGR_G_CreateGeometryFromJson, [c_char_p***REMOVED******REMOVED***
to_json = string_output(lgdal.OGR_G_ExportToJson, [c_void_p***REMOVED***, str_result=True, decoding='ascii'***REMOVED***
to_kml = string_output(lgdal.OGR_G_ExportToKML, [c_void_p, c_char_p***REMOVED***, str_result=True, decoding='ascii'***REMOVED***

# GetX, GetY, GetZ all return doubles.
getx = pnt_func(lgdal.OGR_G_GetX***REMOVED***
gety = pnt_func(lgdal.OGR_G_GetY***REMOVED***
getz = pnt_func(lgdal.OGR_G_GetZ***REMOVED***

# Geometry creation routines.
from_wkb = geom_output(lgdal.OGR_G_CreateFromWkb, [c_char_p, c_void_p, POINTER(c_void_p***REMOVED***, c_int***REMOVED***, offset=-2***REMOVED***
from_wkt = geom_output(lgdal.OGR_G_CreateFromWkt, [POINTER(c_char_p***REMOVED***, c_void_p, POINTER(c_void_p***REMOVED******REMOVED***, offset=-1***REMOVED***
create_geom = geom_output(lgdal.OGR_G_CreateGeometry, [c_int***REMOVED******REMOVED***
clone_geom = geom_output(lgdal.OGR_G_Clone, [c_void_p***REMOVED******REMOVED***
get_geom_ref = geom_output(lgdal.OGR_G_GetGeometryRef, [c_void_p, c_int***REMOVED******REMOVED***
get_boundary = geom_output(lgdal.OGR_G_GetBoundary, [c_void_p***REMOVED******REMOVED***
geom_convex_hull = geom_output(lgdal.OGR_G_ConvexHull, [c_void_p***REMOVED******REMOVED***
geom_diff = geom_output(lgdal.OGR_G_Difference, [c_void_p, c_void_p***REMOVED******REMOVED***
geom_intersection = geom_output(lgdal.OGR_G_Intersection, [c_void_p, c_void_p***REMOVED******REMOVED***
geom_sym_diff = geom_output(lgdal.OGR_G_SymmetricDifference, [c_void_p, c_void_p***REMOVED******REMOVED***
geom_union = geom_output(lgdal.OGR_G_Union, [c_void_p, c_void_p***REMOVED******REMOVED***

# Geometry modification routines.
add_geom = void_output(lgdal.OGR_G_AddGeometry, [c_void_p, c_void_p***REMOVED******REMOVED***
import_wkt = void_output(lgdal.OGR_G_ImportFromWkt, [c_void_p, POINTER(c_char_p***REMOVED******REMOVED******REMOVED***

# Destroys a geometry
destroy_geom = void_output(lgdal.OGR_G_DestroyGeometry, [c_void_p***REMOVED***, errcheck=False***REMOVED***

# Geometry export routines.
to_wkb = void_output(lgdal.OGR_G_ExportToWkb, None, errcheck=True***REMOVED***  # special handling for WKB.
to_wkt = string_output(lgdal.OGR_G_ExportToWkt, [c_void_p, POINTER(c_char_p***REMOVED******REMOVED***, decoding='ascii'***REMOVED***
to_gml = string_output(lgdal.OGR_G_ExportToGML, [c_void_p***REMOVED***, str_result=True, decoding='ascii'***REMOVED***
get_wkbsize = int_output(lgdal.OGR_G_WkbSize, [c_void_p***REMOVED******REMOVED***

# Geometry spatial-reference related routines.
assign_srs = void_output(lgdal.OGR_G_AssignSpatialReference, [c_void_p, c_void_p***REMOVED***, errcheck=False***REMOVED***
get_geom_srs = srs_output(lgdal.OGR_G_GetSpatialReference, [c_void_p***REMOVED******REMOVED***

# Geometry properties
get_area = double_output(lgdal.OGR_G_GetArea, [c_void_p***REMOVED******REMOVED***
get_centroid = void_output(lgdal.OGR_G_Centroid, [c_void_p, c_void_p***REMOVED******REMOVED***
get_dims = int_output(lgdal.OGR_G_GetDimension, [c_void_p***REMOVED******REMOVED***
get_coord_dim = int_output(lgdal.OGR_G_GetCoordinateDimension, [c_void_p***REMOVED******REMOVED***
set_coord_dim = void_output(lgdal.OGR_G_SetCoordinateDimension, [c_void_p, c_int***REMOVED***, errcheck=False***REMOVED***

get_geom_count = int_output(lgdal.OGR_G_GetGeometryCount, [c_void_p***REMOVED******REMOVED***
get_geom_name = const_string_output(lgdal.OGR_G_GetGeometryName, [c_void_p***REMOVED***, decoding='ascii'***REMOVED***
get_geom_type = int_output(lgdal.OGR_G_GetGeometryType, [c_void_p***REMOVED******REMOVED***
get_point_count = int_output(lgdal.OGR_G_GetPointCount, [c_void_p***REMOVED******REMOVED***
get_point = void_output(
    lgdal.OGR_G_GetPoint,
    [c_void_p, c_int, POINTER(c_double***REMOVED***, POINTER(c_double***REMOVED***, POINTER(c_double***REMOVED******REMOVED***, errcheck=False
***REMOVED***
geom_close_rings = void_output(lgdal.OGR_G_CloseRings, [c_void_p***REMOVED***, errcheck=False***REMOVED***

# Topology routines.
ogr_contains = topology_func(lgdal.OGR_G_Contains***REMOVED***
ogr_crosses = topology_func(lgdal.OGR_G_Crosses***REMOVED***
ogr_disjoint = topology_func(lgdal.OGR_G_Disjoint***REMOVED***
ogr_equals = topology_func(lgdal.OGR_G_Equals***REMOVED***
ogr_intersects = topology_func(lgdal.OGR_G_Intersects***REMOVED***
ogr_overlaps = topology_func(lgdal.OGR_G_Overlaps***REMOVED***
ogr_touches = topology_func(lgdal.OGR_G_Touches***REMOVED***
ogr_within = topology_func(lgdal.OGR_G_Within***REMOVED***

# Transformation routines.
geom_transform = void_output(lgdal.OGR_G_Transform, [c_void_p, c_void_p***REMOVED******REMOVED***
geom_transform_to = void_output(lgdal.OGR_G_TransformTo, [c_void_p, c_void_p***REMOVED******REMOVED***

# For retrieving the envelope of the geometry.
get_envelope = env_func(lgdal.OGR_G_GetEnvelope, [c_void_p, POINTER(OGREnvelope***REMOVED******REMOVED******REMOVED***
