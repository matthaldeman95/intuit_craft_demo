from django.contrib.gis.gdal.base import GDALBase
from django.contrib.gis.gdal.error import GDALException, OGRIndexError
from django.contrib.gis.gdal.field import Field
from django.contrib.gis.gdal.geometries import OGRGeometry, OGRGeomType
from django.contrib.gis.gdal.prototypes import ds as capi, geom as geom_api
from django.utils import six
from django.utils.encoding import force_bytes, force_text
from django.utils.six.moves import range


# For more information, see the OGR C API source code:
#  http://www.gdal.org/ogr__api_8h.html
#
# The OGR_F_* routines are relevant here.
class Feature(GDALBase***REMOVED***:
    ***REMOVED***
    This class that wraps an OGR Feature, needs to be instantiated
    from a Layer object.
    ***REMOVED***

    def __init__(self, feat, layer***REMOVED***:
        ***REMOVED***
        Initializes Feature from a pointer and its Layer object.
        ***REMOVED***
        if not feat:
            raise GDALException('Cannot create OGR Feature, invalid pointer given.'***REMOVED***
        self.ptr = feat
        self._layer = layer

    def __del__(self***REMOVED***:
        "Releases a reference to this object."
        ***REMOVED***
            capi.destroy_feature(self._ptr***REMOVED***
        except (AttributeError, TypeError***REMOVED***:
            pass  # Some part might already have been garbage collected

    def __getitem__(self, index***REMOVED***:
        ***REMOVED***
        Gets the Field object at the specified index, which may be either
        an integer or the Field's string label.  Note that the Field object
        is not the field's _value_ -- use the `get` method instead to
        retrieve the value (e.g. an integer***REMOVED*** instead of a Field instance.
        ***REMOVED***
        if isinstance(index, six.string_types***REMOVED***:
            i = self.index(index***REMOVED***
        else:
            if index < 0 or index > self.num_fields:
                raise OGRIndexError('index out of range'***REMOVED***
            i = index
        return Field(self, i***REMOVED***

    def __iter__(self***REMOVED***:
        "Iterates over each field in the Feature."
        for i in range(self.num_fields***REMOVED***:
            yield self[i***REMOVED***

    def __len__(self***REMOVED***:
        "Returns the count of fields in this feature."
        return self.num_fields

    def __str__(self***REMOVED***:
        "The string name of the feature."
        return 'Feature FID %d in Layer<%s>' % (self.fid, self.layer_name***REMOVED***

    def __eq__(self, other***REMOVED***:
        "Does equivalence testing on the features."
        return bool(capi.feature_equal(self.ptr, other._ptr***REMOVED******REMOVED***

    # #### Feature Properties ####
    @property
    def encoding(self***REMOVED***:
        return self._layer._ds.encoding

    @property
    def fid(self***REMOVED***:
        "Returns the feature identifier."
        return capi.get_fid(self.ptr***REMOVED***

    @property
    def layer_name(self***REMOVED***:
        "Returns the name of the layer for the feature."
        name = capi.get_feat_name(self._layer._ldefn***REMOVED***
        return force_text(name, self.encoding, strings_only=True***REMOVED***

    @property
    def num_fields(self***REMOVED***:
        "Returns the number of fields in the Feature."
        return capi.get_feat_field_count(self.ptr***REMOVED***

    @property
    def fields(self***REMOVED***:
        "Returns a list of fields in the Feature."
        return [capi.get_field_name(capi.get_field_defn(self._layer._ldefn, i***REMOVED******REMOVED***
                for i in range(self.num_fields***REMOVED******REMOVED***

    @property
    def geom(self***REMOVED***:
        "Returns the OGR Geometry for this Feature."
        # Retrieving the geometry pointer for the feature.
        geom_ptr = capi.get_feat_geom_ref(self.ptr***REMOVED***
        return OGRGeometry(geom_api.clone_geom(geom_ptr***REMOVED******REMOVED***

    @property
    def geom_type(self***REMOVED***:
        "Returns the OGR Geometry Type for this Feture."
        return OGRGeomType(capi.get_fd_geom_type(self._layer._ldefn***REMOVED******REMOVED***

    # #### Feature Methods ####
    def get(self, field***REMOVED***:
        ***REMOVED***
        Returns the value of the field, instead of an instance of the Field
        object.  May take a string of the field name or a Field object as
        parameters.
        ***REMOVED***
        field_name = getattr(field, 'name', field***REMOVED***
        return self[field_name***REMOVED***.value

    def index(self, field_name***REMOVED***:
        "Returns the index of the given field name."
        i = capi.get_field_index(self.ptr, force_bytes(field_name***REMOVED******REMOVED***
        if i < 0:
            raise OGRIndexError('invalid OFT field name given: "%s"' % field_name***REMOVED***
        return i
