***REMOVED***
  The Spatial Reference class, represents OGR Spatial Reference objects.

  Example:
  >>> from django.contrib.gis.gdal import SpatialReference
  >>> srs = SpatialReference('WGS84'***REMOVED***
  >>> print(srs***REMOVED***
  GEOGCS["WGS 84",
      DATUM["WGS_1984",
          SPHEROID["WGS 84",6378137,298.257223563,
              AUTHORITY["EPSG","7030"***REMOVED******REMOVED***,
          TOWGS84[0,0,0,0,0,0,0***REMOVED***,
          AUTHORITY["EPSG","6326"***REMOVED******REMOVED***,
      PRIMEM["Greenwich",0,
          AUTHORITY["EPSG","8901"***REMOVED******REMOVED***,
      UNIT["degree",0.01745329251994328,
          AUTHORITY["EPSG","9122"***REMOVED******REMOVED***,
      AUTHORITY["EPSG","4326"***REMOVED******REMOVED***
  >>> print(srs.proj***REMOVED***
  +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs
  >>> print(srs.ellipsoid***REMOVED***
  (6378137.0, 6356752.3142451793, 298.25722356300003***REMOVED***
  >>> print(srs.projected, srs.geographic***REMOVED***
  False True
  >>> srs.import_epsg(32140***REMOVED***
  >>> print(srs.name***REMOVED***
  NAD83 / Texas South Central
***REMOVED***
from ctypes import byref, c_char_p, c_int

from django.contrib.gis.gdal.base import GDALBase
from django.contrib.gis.gdal.error import SRSException
from django.contrib.gis.gdal.prototypes import srs as capi
from django.utils import six
from django.utils.encoding import force_bytes, force_text


class SpatialReference(GDALBase***REMOVED***:
    ***REMOVED***
    A wrapper for the OGRSpatialReference object.  According to the GDAL Web site,
    the SpatialReference object "provide[s***REMOVED*** services to represent coordinate
    systems (projections and datums***REMOVED*** and to transform between them."
    ***REMOVED***

    def __init__(self, srs_input='', srs_type='user'***REMOVED***:
        ***REMOVED***
        Creates a GDAL OSR Spatial Reference object from the given input.
        The input may be string of OGC Well Known Text (WKT***REMOVED***, an integer
        EPSG code, a PROJ.4 string, and/or a projection "well known" shorthand
        string (one of 'WGS84', 'WGS72', 'NAD27', 'NAD83'***REMOVED***.
        ***REMOVED***

        if srs_type == 'wkt':
            self.ptr = capi.new_srs(c_char_p(b''***REMOVED******REMOVED***
            self.import_wkt(srs_input***REMOVED***
            return
        elif isinstance(srs_input, six.string_types***REMOVED***:
            # Encoding to ASCII if unicode passed in.
            if isinstance(srs_input, six.text_type***REMOVED***:
                srs_input = srs_input.encode('ascii'***REMOVED***
            ***REMOVED***
                # If SRID is a string, e.g., '4326', then make acceptable
                # as user input.
                srid = int(srs_input***REMOVED***
                srs_input = 'EPSG:%d' % srid
            except ValueError:
                pass
        elif isinstance(srs_input, six.integer_types***REMOVED***:
            # EPSG integer code was input.
            srs_type = 'epsg'
        elif isinstance(srs_input, self.ptr_type***REMOVED***:
            srs = srs_input
            srs_type = 'ogr'
        else:
            raise TypeError('Invalid SRS type "%s"' % srs_type***REMOVED***

        if srs_type == 'ogr':
            # Input is already an SRS pointer.
            srs = srs_input
        else:
            # Creating a new SRS pointer, using the string buffer.
            buf = c_char_p(b''***REMOVED***
            srs = capi.new_srs(buf***REMOVED***

        # If the pointer is NULL, throw an exception.
        if not srs:
            raise SRSException('Could not create spatial reference from: %s' % srs_input***REMOVED***
        else:
            self.ptr = srs

        # Importing from either the user input string or an integer SRID.
        if srs_type == 'user':
            self.import_user_input(srs_input***REMOVED***
        elif srs_type == 'epsg':
            self.import_epsg(srs_input***REMOVED***

    def __del__(self***REMOVED***:
        "Destroys this spatial reference."
        ***REMOVED***
            capi.release_srs(self._ptr***REMOVED***
        except (AttributeError, TypeError***REMOVED***:
            pass  # Some part might already have been garbage collected

    def __getitem__(self, target***REMOVED***:
        ***REMOVED***
        Returns the value of the given string attribute node, None if the node
        doesn't exist.  Can also take a tuple as a parameter, (target, child***REMOVED***,
        where child is the index of the attribute in the WKT.  For example:

        >>> wkt = 'GEOGCS["WGS 84", DATUM["WGS_1984, ... AUTHORITY["EPSG","4326"***REMOVED******REMOVED***'
        >>> srs = SpatialReference(wkt***REMOVED*** # could also use 'WGS84', or 4326
        >>> print(srs['GEOGCS'***REMOVED******REMOVED***
        WGS 84
        >>> print(srs['DATUM'***REMOVED******REMOVED***
        WGS_1984
        >>> print(srs['AUTHORITY'***REMOVED******REMOVED***
        EPSG
        >>> print(srs['AUTHORITY', 1***REMOVED******REMOVED*** # The authority value
        4326
        >>> print(srs['TOWGS84', 4***REMOVED******REMOVED*** # the fourth value in this wkt
        0
        >>> print(srs['UNIT|AUTHORITY'***REMOVED******REMOVED*** # For the units authority, have to use the pipe symbole.
        EPSG
        >>> print(srs['UNIT|AUTHORITY', 1***REMOVED******REMOVED*** # The authority value for the units
        9122
        ***REMOVED***
        if isinstance(target, tuple***REMOVED***:
            return self.attr_value(*target***REMOVED***
        else:
            return self.attr_value(target***REMOVED***

    def __str__(self***REMOVED***:
        "The string representation uses 'pretty' WKT."
        return self.pretty_wkt

    # #### SpatialReference Methods ####
    def attr_value(self, target, index=0***REMOVED***:
        ***REMOVED***
        The attribute value for the given target node (e.g. 'PROJCS'***REMOVED***. The index
        keyword specifies an index of the child node to return.
        ***REMOVED***
        if not isinstance(target, six.string_types***REMOVED*** or not isinstance(index, int***REMOVED***:
            raise TypeError
        return capi.get_attr_value(self.ptr, force_bytes(target***REMOVED***, index***REMOVED***

    def auth_name(self, target***REMOVED***:
        "Returns the authority name for the given string target node."
        return capi.get_auth_name(self.ptr, force_bytes(target***REMOVED******REMOVED***

    def auth_code(self, target***REMOVED***:
        "Returns the authority code for the given string target node."
        return capi.get_auth_code(self.ptr, force_bytes(target***REMOVED******REMOVED***

    def clone(self***REMOVED***:
        "Returns a clone of this SpatialReference object."
        return SpatialReference(capi.clone_srs(self.ptr***REMOVED******REMOVED***

    def from_esri(self***REMOVED***:
        "Morphs this SpatialReference from ESRI's format to EPSG."
        capi.morph_from_esri(self.ptr***REMOVED***

    def identify_epsg(self***REMOVED***:
        ***REMOVED***
        This method inspects the WKT of this SpatialReference, and will
        add EPSG authority nodes where an EPSG identifier is applicable.
        ***REMOVED***
        capi.identify_epsg(self.ptr***REMOVED***

    def to_esri(self***REMOVED***:
        "Morphs this SpatialReference to ESRI's format."
        capi.morph_to_esri(self.ptr***REMOVED***

    def validate(self***REMOVED***:
        "Checks to see if the given spatial reference is valid."
        capi.srs_validate(self.ptr***REMOVED***

    # #### Name & SRID properties ####
    @property
    def name(self***REMOVED***:
        "Returns the name of this Spatial Reference."
        if self.projected:
            return self.attr_value('PROJCS'***REMOVED***
        elif self.geographic:
            return self.attr_value('GEOGCS'***REMOVED***
        elif self.local:
            return self.attr_value('LOCAL_CS'***REMOVED***
        else:
            return None

    @property
    def srid(self***REMOVED***:
        "Returns the SRID of top-level authority, or None if undefined."
        ***REMOVED***
            return int(self.attr_value('AUTHORITY', 1***REMOVED******REMOVED***
        except (TypeError, ValueError***REMOVED***:
            return None

    # #### Unit Properties ####
    @property
    def linear_name(self***REMOVED***:
        "Returns the name of the linear units."
        units, name = capi.linear_units(self.ptr, byref(c_char_p(***REMOVED******REMOVED******REMOVED***
        return name

    @property
    def linear_units(self***REMOVED***:
        "Returns the value of the linear units."
        units, name = capi.linear_units(self.ptr, byref(c_char_p(***REMOVED******REMOVED******REMOVED***
        return units

    @property
    def angular_name(self***REMOVED***:
        "Returns the name of the angular units."
        units, name = capi.angular_units(self.ptr, byref(c_char_p(***REMOVED******REMOVED******REMOVED***
        return name

    @property
    def angular_units(self***REMOVED***:
        "Returns the value of the angular units."
        units, name = capi.angular_units(self.ptr, byref(c_char_p(***REMOVED******REMOVED******REMOVED***
        return units

    @property
    def units(self***REMOVED***:
        ***REMOVED***
        Returns a 2-tuple of the units value and the units name,
        and will automatically determines whether to return the linear
        or angular units.
        ***REMOVED***
        units, name = None, None
        if self.projected or self.local:
            units, name = capi.linear_units(self.ptr, byref(c_char_p(***REMOVED******REMOVED******REMOVED***
        elif self.geographic:
            units, name = capi.angular_units(self.ptr, byref(c_char_p(***REMOVED******REMOVED******REMOVED***
        if name is not None:
            name = force_text(name***REMOVED***
        return (units, name***REMOVED***

    # #### Spheroid/Ellipsoid Properties ####
    @property
    def ellipsoid(self***REMOVED***:
        ***REMOVED***
        Returns a tuple of the ellipsoid parameters:
         (semimajor axis, semiminor axis, and inverse flattening***REMOVED***
        ***REMOVED***
        return (self.semi_major, self.semi_minor, self.inverse_flattening***REMOVED***

    @property
    def semi_major(self***REMOVED***:
        "Returns the Semi Major Axis for this Spatial Reference."
        return capi.semi_major(self.ptr, byref(c_int(***REMOVED******REMOVED******REMOVED***

    @property
    def semi_minor(self***REMOVED***:
        "Returns the Semi Minor Axis for this Spatial Reference."
        return capi.semi_minor(self.ptr, byref(c_int(***REMOVED******REMOVED******REMOVED***

    @property
    def inverse_flattening(self***REMOVED***:
        "Returns the Inverse Flattening for this Spatial Reference."
        return capi.invflattening(self.ptr, byref(c_int(***REMOVED******REMOVED******REMOVED***

    # #### Boolean Properties ####
    @property
    def geographic(self***REMOVED***:
        ***REMOVED***
        Returns True if this SpatialReference is geographic
         (root node is GEOGCS***REMOVED***.
        ***REMOVED***
        return bool(capi.isgeographic(self.ptr***REMOVED******REMOVED***

    @property
    def local(self***REMOVED***:
        "Returns True if this SpatialReference is local (root node is LOCAL_CS***REMOVED***."
        return bool(capi.islocal(self.ptr***REMOVED******REMOVED***

    @property
    def projected(self***REMOVED***:
        ***REMOVED***
        Returns True if this SpatialReference is a projected coordinate system
         (root node is PROJCS***REMOVED***.
        ***REMOVED***
        return bool(capi.isprojected(self.ptr***REMOVED******REMOVED***

    # #### Import Routines #####
    def import_epsg(self, epsg***REMOVED***:
        "Imports the Spatial Reference from the EPSG code (an integer***REMOVED***."
        capi.from_epsg(self.ptr, epsg***REMOVED***

    def import_proj(self, proj***REMOVED***:
        "Imports the Spatial Reference from a PROJ.4 string."
        capi.from_proj(self.ptr, proj***REMOVED***

    def import_user_input(self, user_input***REMOVED***:
        "Imports the Spatial Reference from the given user input string."
        capi.from_user_input(self.ptr, force_bytes(user_input***REMOVED******REMOVED***

    def import_wkt(self, wkt***REMOVED***:
        "Imports the Spatial Reference from OGC WKT (string***REMOVED***"
        capi.from_wkt(self.ptr, byref(c_char_p(wkt***REMOVED******REMOVED******REMOVED***

    def import_xml(self, xml***REMOVED***:
        "Imports the Spatial Reference from an XML string."
        capi.from_xml(self.ptr, xml***REMOVED***

    # #### Export Properties ####
    @property
    def wkt(self***REMOVED***:
        "Returns the WKT representation of this Spatial Reference."
        return capi.to_wkt(self.ptr, byref(c_char_p(***REMOVED******REMOVED******REMOVED***

    @property
    def pretty_wkt(self, simplify=0***REMOVED***:
        "Returns the 'pretty' representation of the WKT."
        return capi.to_pretty_wkt(self.ptr, byref(c_char_p(***REMOVED******REMOVED***, simplify***REMOVED***

    @property
    def proj(self***REMOVED***:
        "Returns the PROJ.4 representation for this Spatial Reference."
        return capi.to_proj(self.ptr, byref(c_char_p(***REMOVED******REMOVED******REMOVED***

    @property
    def proj4(self***REMOVED***:
        "Alias for proj(***REMOVED***."
        return self.proj

    @property
    def xml(self, dialect=''***REMOVED***:
        "Returns the XML representation of this Spatial Reference."
        return capi.to_xml(self.ptr, byref(c_char_p(***REMOVED******REMOVED***, dialect***REMOVED***


class CoordTransform(GDALBase***REMOVED***:
    "The coordinate system transformation object."

    def __init__(self, source, target***REMOVED***:
        "Initializes on a source and target SpatialReference objects."
        if not isinstance(source, SpatialReference***REMOVED*** or not isinstance(target, SpatialReference***REMOVED***:
            raise TypeError('source and target must be of type SpatialReference'***REMOVED***
        self.ptr = capi.new_ct(source._ptr, target._ptr***REMOVED***
        self._srs1_name = source.name
        self._srs2_name = target.name

    def __del__(self***REMOVED***:
        "Deletes this Coordinate Transformation object."
        ***REMOVED***
            capi.destroy_ct(self._ptr***REMOVED***
        except (AttributeError, TypeError***REMOVED***:
            pass

    def __str__(self***REMOVED***:
        return 'Transform from "%s" to "%s"' % (self._srs1_name, self._srs2_name***REMOVED***
