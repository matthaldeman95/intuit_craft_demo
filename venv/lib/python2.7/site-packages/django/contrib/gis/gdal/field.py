from ctypes import byref, c_int
from datetime import date, datetime, time

from django.contrib.gis.gdal.base import GDALBase
from django.contrib.gis.gdal.error import GDALException
from django.contrib.gis.gdal.prototypes import ds as capi
from django.utils.encoding import force_text


# For more information, see the OGR C API source code:
#  http://www.gdal.org/ogr__api_8h.html
#
# The OGR_Fld_* routines are relevant here.
class Field(GDALBase***REMOVED***:
    ***REMOVED***
    This class wraps an OGR Field, and needs to be instantiated
    from a Feature object.
    ***REMOVED***

    def __init__(self, feat, index***REMOVED***:
        ***REMOVED***
        Initializes on the feature object and the integer index of
        the field within the feature.
        ***REMOVED***
        # Setting the feature pointer and index.
        self._feat = feat
        self._index = index

        # Getting the pointer for this field.
        fld_ptr = capi.get_feat_field_defn(feat.ptr, index***REMOVED***
        if not fld_ptr:
            raise GDALException('Cannot create OGR Field, invalid pointer given.'***REMOVED***
        self.ptr = fld_ptr

        # Setting the class depending upon the OGR Field Type (OFT***REMOVED***
        self.__class__ = OGRFieldTypes[self.type***REMOVED***

        # OFTReal with no precision should be an OFTInteger.
        if isinstance(self, OFTReal***REMOVED*** and self.precision == 0:
            self.__class__ = OFTInteger
            self._double = True

    def __str__(self***REMOVED***:
        "Returns the string representation of the Field."
        return str(self.value***REMOVED***.strip(***REMOVED***

    # #### Field Methods ####
    def as_double(self***REMOVED***:
        "Retrieves the Field's value as a double (float***REMOVED***."
        return capi.get_field_as_double(self._feat.ptr, self._index***REMOVED***

    def as_int(self, is_64=False***REMOVED***:
        "Retrieves the Field's value as an integer."
        if is_64:
            return capi.get_field_as_integer64(self._feat.ptr, self._index***REMOVED***
        else:
            return capi.get_field_as_integer(self._feat.ptr, self._index***REMOVED***

    def as_string(self***REMOVED***:
        "Retrieves the Field's value as a string."
        string = capi.get_field_as_string(self._feat.ptr, self._index***REMOVED***
        return force_text(string, encoding=self._feat.encoding, strings_only=True***REMOVED***

    def as_datetime(self***REMOVED***:
        "Retrieves the Field's value as a tuple of date & time components."
        yy, mm, dd, hh, mn, ss, tz = [c_int(***REMOVED*** for i in range(7***REMOVED******REMOVED***
        status = capi.get_field_as_datetime(
            self._feat.ptr, self._index, byref(yy***REMOVED***, byref(mm***REMOVED***, byref(dd***REMOVED***,
            byref(hh***REMOVED***, byref(mn***REMOVED***, byref(ss***REMOVED***, byref(tz***REMOVED******REMOVED***
        if status:
            return (yy, mm, dd, hh, mn, ss, tz***REMOVED***
        else:
            raise GDALException('Unable to retrieve date & time information from the field.'***REMOVED***

    # #### Field Properties ####
    @property
    def name(self***REMOVED***:
        "Returns the name of this Field."
        name = capi.get_field_name(self.ptr***REMOVED***
        return force_text(name, encoding=self._feat.encoding, strings_only=True***REMOVED***

    @property
    def precision(self***REMOVED***:
        "Returns the precision of this Field."
        return capi.get_field_precision(self.ptr***REMOVED***

    @property
    def type(self***REMOVED***:
        "Returns the OGR type of this Field."
        return capi.get_field_type(self.ptr***REMOVED***

    @property
    def type_name(self***REMOVED***:
        "Return the OGR field type name for this Field."
        return capi.get_field_type_name(self.type***REMOVED***

    @property
    def value(self***REMOVED***:
        "Returns the value of this Field."
        # Default is to get the field as a string.
        return self.as_string(***REMOVED***

    @property
    def width(self***REMOVED***:
        "Returns the width of this Field."
        return capi.get_field_width(self.ptr***REMOVED***


# ### The Field sub-classes for each OGR Field type. ###
class OFTInteger(Field***REMOVED***:
    _double = False
    _bit64 = False

    @property
    def value(self***REMOVED***:
        "Returns an integer contained in this field."
        if self._double:
            # If this is really from an OFTReal field with no precision,
            # read as a double and cast as Python int (to prevent overflow***REMOVED***.
            return int(self.as_double(***REMOVED******REMOVED***
        else:
            return self.as_int(self._bit64***REMOVED***

    @property
    def type(self***REMOVED***:
        ***REMOVED***
        GDAL uses OFTReals to represent OFTIntegers in created
        shapefiles -- forcing the type here since the underlying field
        type may actually be OFTReal.
        ***REMOVED***
        return 0


class OFTReal(Field***REMOVED***:
    @property
    def value(self***REMOVED***:
        "Returns a float contained in this field."
        return self.as_double(***REMOVED***


# String & Binary fields, just subclasses
class OFTString(Field***REMOVED***:
    pass


class OFTWideString(Field***REMOVED***:
    pass


class OFTBinary(Field***REMOVED***:
    pass


# OFTDate, OFTTime, OFTDateTime fields.
class OFTDate(Field***REMOVED***:
    @property
    def value(self***REMOVED***:
        "Returns a Python `date` object for the OFTDate field."
        ***REMOVED***
            yy, mm, dd, hh, mn, ss, tz = self.as_datetime(***REMOVED***
            return date(yy.value, mm.value, dd.value***REMOVED***
        except (ValueError, GDALException***REMOVED***:
            return None


class OFTDateTime(Field***REMOVED***:
    @property
    def value(self***REMOVED***:
        "Returns a Python `datetime` object for this OFTDateTime field."
        # TODO: Adapt timezone information.
        #  See http://lists.osgeo.org/pipermail/gdal-dev/2006-February/007990.html
        #  The `tz` variable has values of: 0=unknown, 1=localtime (ambiguous***REMOVED***,
        #  100=GMT, 104=GMT+1, 80=GMT-5, etc.
        ***REMOVED***
            yy, mm, dd, hh, mn, ss, tz = self.as_datetime(***REMOVED***
            return datetime(yy.value, mm.value, dd.value, hh.value, mn.value, ss.value***REMOVED***
        except (ValueError, GDALException***REMOVED***:
            return None


class OFTTime(Field***REMOVED***:
    @property
    def value(self***REMOVED***:
        "Returns a Python `time` object for this OFTTime field."
        ***REMOVED***
            yy, mm, dd, hh, mn, ss, tz = self.as_datetime(***REMOVED***
            return time(hh.value, mn.value, ss.value***REMOVED***
        except (ValueError, GDALException***REMOVED***:
            return None


class OFTInteger64(OFTInteger***REMOVED***:
    _bit64 = True


# List fields are also just subclasses
class OFTIntegerList(Field***REMOVED***:
    pass


class OFTRealList(Field***REMOVED***:
    pass


class OFTStringList(Field***REMOVED***:
    pass


class OFTWideStringList(Field***REMOVED***:
    pass


class OFTInteger64List(Field***REMOVED***:
    pass


# Class mapping dictionary for OFT Types and reverse mapping.
OGRFieldTypes = {
    0: OFTInteger,
    1: OFTIntegerList,
    2: OFTReal,
    3: OFTRealList,
    4: OFTString,
    5: OFTStringList,
    6: OFTWideString,
    7: OFTWideStringList,
    8: OFTBinary,
    9: OFTDate,
    10: OFTTime,
    11: OFTDateTime,
    # New 64-bit integer types in GDAL 2
    12: OFTInteger64,
    13: OFTInteger64List,
***REMOVED***
ROGRFieldTypes = {cls: num for num, cls in OGRFieldTypes.items(***REMOVED******REMOVED***
