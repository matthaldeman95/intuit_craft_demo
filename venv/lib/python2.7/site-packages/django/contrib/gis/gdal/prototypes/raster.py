***REMOVED***
This module houses the ctypes function prototypes for GDAL DataSource (raster***REMOVED***
related data structures.
***REMOVED***
from ctypes import POINTER, c_char_p, c_double, c_int, c_void_p
from functools import partial

from django.contrib.gis.gdal.libgdal import GDAL_VERSION, std_call
from django.contrib.gis.gdal.prototypes.generation import (
    const_string_output, double_output, int_output, void_output,
    voidptr_output,
***REMOVED***

# For more detail about c function names and definitions see
# http://gdal.org/gdal_8h.html
# http://gdal.org/gdalwarper_8h.html

# Prepare partial functions that use cpl error codes
void_output = partial(void_output, cpl=True***REMOVED***
const_string_output = partial(const_string_output, cpl=True***REMOVED***
double_output = partial(double_output, cpl=True***REMOVED***

# Raster Driver Routines
register_all = void_output(std_call('GDALAllRegister'***REMOVED***, [***REMOVED******REMOVED***
get_driver = voidptr_output(std_call('GDALGetDriver'***REMOVED***, [c_int***REMOVED******REMOVED***
get_driver_by_name = voidptr_output(std_call('GDALGetDriverByName'***REMOVED***, [c_char_p***REMOVED***, errcheck=False***REMOVED***
get_driver_count = int_output(std_call('GDALGetDriverCount'***REMOVED***, [***REMOVED******REMOVED***
get_driver_description = const_string_output(std_call('GDALGetDescription'***REMOVED***, [c_void_p***REMOVED******REMOVED***

# Raster Data Source Routines
create_ds = voidptr_output(std_call('GDALCreate'***REMOVED***, [c_void_p, c_char_p, c_int, c_int, c_int, c_int, c_void_p***REMOVED******REMOVED***
open_ds = voidptr_output(std_call('GDALOpen'***REMOVED***, [c_char_p, c_int***REMOVED******REMOVED***
if GDAL_VERSION >= (2, 0***REMOVED***:
    close_ds = voidptr_output(std_call('GDALClose'***REMOVED***, [c_void_p***REMOVED******REMOVED***
else:
    close_ds = void_output(std_call('GDALClose'***REMOVED***, [c_void_p***REMOVED******REMOVED***
flush_ds = int_output(std_call('GDALFlushCache'***REMOVED***, [c_void_p***REMOVED******REMOVED***
copy_ds = voidptr_output(
    std_call('GDALCreateCopy'***REMOVED***,
    [c_void_p, c_char_p, c_void_p, c_int, POINTER(c_char_p***REMOVED***, c_void_p, c_void_p***REMOVED***
***REMOVED***
add_band_ds = void_output(std_call('GDALAddBand'***REMOVED***, [c_void_p, c_int***REMOVED******REMOVED***
get_ds_description = const_string_output(std_call('GDALGetDescription'***REMOVED***, [c_void_p***REMOVED******REMOVED***
get_ds_driver = voidptr_output(std_call('GDALGetDatasetDriver'***REMOVED***, [c_void_p***REMOVED******REMOVED***
get_ds_xsize = int_output(std_call('GDALGetRasterXSize'***REMOVED***, [c_void_p***REMOVED******REMOVED***
get_ds_ysize = int_output(std_call('GDALGetRasterYSize'***REMOVED***, [c_void_p***REMOVED******REMOVED***
get_ds_raster_count = int_output(std_call('GDALGetRasterCount'***REMOVED***, [c_void_p***REMOVED******REMOVED***
get_ds_raster_band = voidptr_output(std_call('GDALGetRasterBand'***REMOVED***, [c_void_p, c_int***REMOVED******REMOVED***
get_ds_projection_ref = const_string_output(std_call('GDALGetProjectionRef'***REMOVED***, [c_void_p***REMOVED******REMOVED***
set_ds_projection_ref = void_output(std_call('GDALSetProjection'***REMOVED***, [c_void_p, c_char_p***REMOVED******REMOVED***
get_ds_geotransform = void_output(std_call('GDALGetGeoTransform'***REMOVED***, [c_void_p, POINTER(c_double * 6***REMOVED******REMOVED***, errcheck=False***REMOVED***
set_ds_geotransform = void_output(std_call('GDALSetGeoTransform'***REMOVED***, [c_void_p, POINTER(c_double * 6***REMOVED******REMOVED******REMOVED***

# Raster Band Routines
band_io = void_output(
    std_call('GDALRasterIO'***REMOVED***,
    [c_void_p, c_int, c_int, c_int, c_int, c_int, c_void_p, c_int, c_int, c_int, c_int, c_int***REMOVED***
***REMOVED***
get_band_xsize = int_output(std_call('GDALGetRasterBandXSize'***REMOVED***, [c_void_p***REMOVED******REMOVED***
get_band_ysize = int_output(std_call('GDALGetRasterBandYSize'***REMOVED***, [c_void_p***REMOVED******REMOVED***
get_band_index = int_output(std_call('GDALGetBandNumber'***REMOVED***, [c_void_p***REMOVED******REMOVED***
get_band_description = const_string_output(std_call('GDALGetDescription'***REMOVED***, [c_void_p***REMOVED******REMOVED***
get_band_ds = voidptr_output(std_call('GDALGetBandDataset'***REMOVED***, [c_void_p***REMOVED******REMOVED***
get_band_datatype = int_output(std_call('GDALGetRasterDataType'***REMOVED***, [c_void_p***REMOVED******REMOVED***
get_band_nodata_value = double_output(std_call('GDALGetRasterNoDataValue'***REMOVED***, [c_void_p, POINTER(c_int***REMOVED******REMOVED******REMOVED***
set_band_nodata_value = void_output(std_call('GDALSetRasterNoDataValue'***REMOVED***, [c_void_p, c_double***REMOVED******REMOVED***
if GDAL_VERSION >= (2, 1***REMOVED***:
    delete_band_nodata_value = void_output(std_call('GDALDeleteRasterNoDataValue'***REMOVED***, [c_void_p***REMOVED******REMOVED***
else:
    delete_band_nodata_value = None
get_band_statistics = void_output(
    std_call('GDALGetRasterStatistics'***REMOVED***,
    [
        c_void_p, c_int, c_int, POINTER(c_double***REMOVED***, POINTER(c_double***REMOVED***,
        POINTER(c_double***REMOVED***, POINTER(c_double***REMOVED***, c_void_p, c_void_p,
    ***REMOVED***,
***REMOVED***
compute_band_statistics = void_output(
    std_call('GDALComputeRasterStatistics'***REMOVED***,
    [c_void_p, c_int, POINTER(c_double***REMOVED***, POINTER(c_double***REMOVED***, POINTER(c_double***REMOVED***, POINTER(c_double***REMOVED***, c_void_p, c_void_p***REMOVED***,
***REMOVED***

# Reprojection routine
reproject_image = void_output(
    std_call('GDALReprojectImage'***REMOVED***,
    [c_void_p, c_char_p, c_void_p, c_char_p, c_int, c_double, c_double, c_void_p, c_void_p, c_void_p***REMOVED***
***REMOVED***
auto_create_warped_vrt = voidptr_output(
    std_call('GDALAutoCreateWarpedVRT'***REMOVED***,
    [c_void_p, c_char_p, c_char_p, c_int, c_double, c_void_p***REMOVED***
***REMOVED***
