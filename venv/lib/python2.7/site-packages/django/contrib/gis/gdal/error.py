***REMOVED***
 This module houses the GDAL & SRS Exception objects, and the
 check_err(***REMOVED*** routine which checks the status code returned by
 GDAL/OGR methods.
***REMOVED***


# #### GDAL & SRS Exceptions ####
class GDALException(Exception***REMOVED***:
    pass


# Legacy name
OGRException = GDALException


class SRSException(Exception***REMOVED***:
    pass


class OGRIndexError(GDALException, KeyError***REMOVED***:
    ***REMOVED***
    This exception is raised when an invalid index is encountered, and has
    the 'silent_variable_feature' attribute set to true.  This ensures that
    django's templates proceed to use the next lookup type gracefully when
    an Exception is raised.  Fixes ticket #4740.
    ***REMOVED***
    silent_variable_failure = True

# #### GDAL/OGR error checking codes and routine ####

# OGR Error Codes
OGRERR_DICT = {
    1: (GDALException, 'Not enough data.'***REMOVED***,
    2: (GDALException, 'Not enough memory.'***REMOVED***,
    3: (GDALException, 'Unsupported geometry type.'***REMOVED***,
    4: (GDALException, 'Unsupported operation.'***REMOVED***,
    5: (GDALException, 'Corrupt data.'***REMOVED***,
    6: (GDALException, 'OGR failure.'***REMOVED***,
    7: (SRSException, 'Unsupported SRS.'***REMOVED***,
    8: (GDALException, 'Invalid handle.'***REMOVED***,
***REMOVED***

# CPL Error Codes
# http://www.gdal.org/cpl__error_8h.html
CPLERR_DICT = {
    1: (GDALException, 'AppDefined'***REMOVED***,
    2: (GDALException, 'OutOfMemory'***REMOVED***,
    3: (GDALException, 'FileIO'***REMOVED***,
    4: (GDALException, 'OpenFailed'***REMOVED***,
    5: (GDALException, 'IllegalArg'***REMOVED***,
    6: (GDALException, 'NotSupported'***REMOVED***,
    7: (GDALException, 'AssertionFailed'***REMOVED***,
    8: (GDALException, 'NoWriteAccess'***REMOVED***,
    9: (GDALException, 'UserInterrupt'***REMOVED***,
    10: (GDALException, 'ObjectNull'***REMOVED***,
***REMOVED***

ERR_NONE = 0


def check_err(code, cpl=False***REMOVED***:
    ***REMOVED***
    Checks the given CPL/OGRERR, and raises an exception where appropriate.
    ***REMOVED***
    err_dict = CPLERR_DICT if cpl else OGRERR_DICT

    if code == ERR_NONE:
        return
    elif code in err_dict:
        e, msg = err_dict[code***REMOVED***
        raise e(msg***REMOVED***
    else:
        raise GDALException('Unknown error code: "%s"' % code***REMOVED***
