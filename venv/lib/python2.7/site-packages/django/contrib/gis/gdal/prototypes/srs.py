from ctypes import POINTER, c_char_p, c_int, c_void_p

from django.contrib.gis.gdal.libgdal import lgdal, std_call
from django.contrib.gis.gdal.prototypes.generation import (
    const_string_output, double_output, int_output, srs_output, string_output,
    void_output,
***REMOVED***


# Shortcut generation for routines with known parameters.
def srs_double(f***REMOVED***:
    ***REMOVED***
    Creates a function prototype for the OSR routines that take
    the OSRSpatialReference object and
    ***REMOVED***
    return double_output(f, [c_void_p, POINTER(c_int***REMOVED******REMOVED***, errcheck=True***REMOVED***


def units_func(f***REMOVED***:
    ***REMOVED***
    Creates a ctypes function prototype for OSR units functions, e.g.,
    OSRGetAngularUnits, OSRGetLinearUnits.
    ***REMOVED***
    return double_output(f, [c_void_p, POINTER(c_char_p***REMOVED******REMOVED***, strarg=True***REMOVED***

# Creation & destruction.
clone_srs = srs_output(std_call('OSRClone'***REMOVED***, [c_void_p***REMOVED******REMOVED***
new_srs = srs_output(std_call('OSRNewSpatialReference'***REMOVED***, [c_char_p***REMOVED******REMOVED***
release_srs = void_output(lgdal.OSRRelease, [c_void_p***REMOVED***, errcheck=False***REMOVED***
destroy_srs = void_output(std_call('OSRDestroySpatialReference'***REMOVED***, [c_void_p***REMOVED***, errcheck=False***REMOVED***
srs_validate = void_output(lgdal.OSRValidate, [c_void_p***REMOVED******REMOVED***

# Getting the semi_major, semi_minor, and flattening functions.
semi_major = srs_double(lgdal.OSRGetSemiMajor***REMOVED***
semi_minor = srs_double(lgdal.OSRGetSemiMinor***REMOVED***
invflattening = srs_double(lgdal.OSRGetInvFlattening***REMOVED***

# WKT, PROJ, EPSG, XML importation routines.
from_wkt = void_output(lgdal.OSRImportFromWkt, [c_void_p, POINTER(c_char_p***REMOVED******REMOVED******REMOVED***
from_proj = void_output(lgdal.OSRImportFromProj4, [c_void_p, c_char_p***REMOVED******REMOVED***
from_epsg = void_output(std_call('OSRImportFromEPSG'***REMOVED***, [c_void_p, c_int***REMOVED******REMOVED***
from_xml = void_output(lgdal.OSRImportFromXML, [c_void_p, c_char_p***REMOVED******REMOVED***
from_user_input = void_output(std_call('OSRSetFromUserInput'***REMOVED***, [c_void_p, c_char_p***REMOVED******REMOVED***

# Morphing to/from ESRI WKT.
morph_to_esri = void_output(lgdal.OSRMorphToESRI, [c_void_p***REMOVED******REMOVED***
morph_from_esri = void_output(lgdal.OSRMorphFromESRI, [c_void_p***REMOVED******REMOVED***

# Identifying the EPSG
identify_epsg = void_output(lgdal.OSRAutoIdentifyEPSG, [c_void_p***REMOVED******REMOVED***

# Getting the angular_units, linear_units functions
linear_units = units_func(lgdal.OSRGetLinearUnits***REMOVED***
angular_units = units_func(lgdal.OSRGetAngularUnits***REMOVED***

# For exporting to WKT, PROJ.4, "Pretty" WKT, and XML.
to_wkt = string_output(std_call('OSRExportToWkt'***REMOVED***, [c_void_p, POINTER(c_char_p***REMOVED******REMOVED***, decoding='ascii'***REMOVED***
to_proj = string_output(std_call('OSRExportToProj4'***REMOVED***, [c_void_p, POINTER(c_char_p***REMOVED******REMOVED***, decoding='ascii'***REMOVED***
to_pretty_wkt = string_output(
    std_call('OSRExportToPrettyWkt'***REMOVED***,
    [c_void_p, POINTER(c_char_p***REMOVED***, c_int***REMOVED***, offset=-2, decoding='ascii'
***REMOVED***

# Memory leak fixed in GDAL 1.5; still exists in 1.4.
to_xml = string_output(lgdal.OSRExportToXML, [c_void_p, POINTER(c_char_p***REMOVED***, c_char_p***REMOVED***, offset=-2, decoding='ascii'***REMOVED***

# String attribute retrival routines.
get_attr_value = const_string_output(std_call('OSRGetAttrValue'***REMOVED***, [c_void_p, c_char_p, c_int***REMOVED***, decoding='ascii'***REMOVED***
get_auth_name = const_string_output(lgdal.OSRGetAuthorityName, [c_void_p, c_char_p***REMOVED***, decoding='ascii'***REMOVED***
get_auth_code = const_string_output(lgdal.OSRGetAuthorityCode, [c_void_p, c_char_p***REMOVED***, decoding='ascii'***REMOVED***

# SRS Properties
isgeographic = int_output(lgdal.OSRIsGeographic, [c_void_p***REMOVED******REMOVED***
islocal = int_output(lgdal.OSRIsLocal, [c_void_p***REMOVED******REMOVED***
isprojected = int_output(lgdal.OSRIsProjected, [c_void_p***REMOVED******REMOVED***

# Coordinate transformation
new_ct = srs_output(std_call('OCTNewCoordinateTransformation'***REMOVED***, [c_void_p, c_void_p***REMOVED******REMOVED***
destroy_ct = void_output(std_call('OCTDestroyCoordinateTransformation'***REMOVED***, [c_void_p***REMOVED***, errcheck=False***REMOVED***
