import warnings
from ctypes import c_uint

from django.contrib.gis.geos import prototypes as capi
from django.contrib.gis.geos.error import GEOSException
from django.contrib.gis.geos.geometry import GEOSGeometry
from django.utils import six
from django.utils.deprecation import RemovedInDjango20Warning
from django.utils.six.moves import range


class Point(GEOSGeometry***REMOVED***:
    _minlength = 2
    _maxlength = 3
    has_cs = True

    def __init__(self, x=None, y=None, z=None, srid=None***REMOVED***:
        ***REMOVED***
        The Point object may be initialized with either a tuple, or individual
        parameters.

        For Example:
        >>> p = Point((5, 23***REMOVED******REMOVED*** # 2D point, passed in as a tuple
        >>> p = Point(5, 23, 8***REMOVED*** # 3D point, passed in with individual parameters
        ***REMOVED***
        if x is None:
            coords = [***REMOVED***
        elif isinstance(x, (tuple, list***REMOVED******REMOVED***:
            # Here a tuple or list was passed in under the `x` parameter.
            coords = x
        elif isinstance(x, six.integer_types + (float,***REMOVED******REMOVED*** and isinstance(y, six.integer_types + (float,***REMOVED******REMOVED***:
            # Here X, Y, and (optionally***REMOVED*** Z were passed in individually, as parameters.
            if isinstance(z, six.integer_types + (float,***REMOVED******REMOVED***:
                coords = [x, y, z***REMOVED***
            else:
                coords = [x, y***REMOVED***
        else:
            raise TypeError('Invalid parameters given for Point initialization.'***REMOVED***

        point = self._create_point(len(coords***REMOVED***, coords***REMOVED***

        # Initializing using the address returned from the GEOS
        #  createPoint factory.
        super(Point, self***REMOVED***.__init__(point, srid=srid***REMOVED***

    def _create_point(self, ndim, coords***REMOVED***:
        ***REMOVED***
        Create a coordinate sequence, set X, Y, [Z***REMOVED***, and create point
        ***REMOVED***
        if not ndim:
            return capi.create_point(None***REMOVED***

        if ndim < 2 or ndim > 3:
            raise TypeError('Invalid point dimension: %s' % str(ndim***REMOVED******REMOVED***

        cs = capi.create_cs(c_uint(1***REMOVED***, c_uint(ndim***REMOVED******REMOVED***
        i = iter(coords***REMOVED***
        capi.cs_setx(cs, 0, next(i***REMOVED******REMOVED***
        capi.cs_sety(cs, 0, next(i***REMOVED******REMOVED***
        if ndim == 3:
            capi.cs_setz(cs, 0, next(i***REMOVED******REMOVED***

        return capi.create_point(cs***REMOVED***

    def _set_list(self, length, items***REMOVED***:
        ptr = self._create_point(length, items***REMOVED***
        if ptr:
            capi.destroy_geom(self.ptr***REMOVED***
            self._ptr = ptr
            self._set_cs(***REMOVED***
        else:
            # can this happen?
            raise GEOSException('Geometry resulting from slice deletion was invalid.'***REMOVED***

    def _set_single(self, index, value***REMOVED***:
        self._cs.setOrdinate(index, 0, value***REMOVED***

    def __iter__(self***REMOVED***:
        "Allows iteration over coordinates of this Point."
        for i in range(len(self***REMOVED******REMOVED***:
            yield self[i***REMOVED***

    def __len__(self***REMOVED***:
        "Returns the number of dimensions for this Point (either 0, 2 or 3***REMOVED***."
        if self.empty:
            return 0
        if self.hasz:
            return 3
        else:
            return 2

    def _get_single_external(self, index***REMOVED***:
        if index == 0:
            return self.x
        elif index == 1:
            return self.y
        elif index == 2:
            return self.z

    _get_single_internal = _get_single_external

    @property
    def x(self***REMOVED***:
        "Returns the X component of the Point."
        return self._cs.getOrdinate(0, 0***REMOVED***

    @x.setter
    def x(self, value***REMOVED***:
        "Sets the X component of the Point."
        self._cs.setOrdinate(0, 0, value***REMOVED***

    @property
    def y(self***REMOVED***:
        "Returns the Y component of the Point."
        return self._cs.getOrdinate(1, 0***REMOVED***

    @y.setter
    def y(self, value***REMOVED***:
        "Sets the Y component of the Point."
        self._cs.setOrdinate(1, 0, value***REMOVED***

    @property
    def z(self***REMOVED***:
        "Returns the Z component of the Point."
        return self._cs.getOrdinate(2, 0***REMOVED*** if self.hasz else None

    @z.setter
    def z(self, value***REMOVED***:
        "Sets the Z component of the Point."
        if not self.hasz:
            raise GEOSException('Cannot set Z on 2D Point.'***REMOVED***
        self._cs.setOrdinate(2, 0, value***REMOVED***

    def get_x(self***REMOVED***:
        warnings.warn(
            "`get_x(***REMOVED***` is deprecated, use the `x` property instead.",
            RemovedInDjango20Warning, 2
        ***REMOVED***
        return self.x

    def set_x(self, value***REMOVED***:
        warnings.warn(
            "`set_x(***REMOVED***` is deprecated, use the `x` property instead.",
            RemovedInDjango20Warning, 2
        ***REMOVED***
        self.x = value

    def get_y(self***REMOVED***:
        warnings.warn(
            "`get_y(***REMOVED***` is deprecated, use the `y` property instead.",
            RemovedInDjango20Warning, 2
        ***REMOVED***
        return self.y

    def set_y(self, value***REMOVED***:
        warnings.warn(
            "`set_y(***REMOVED***` is deprecated, use the `y` property instead.",
            RemovedInDjango20Warning, 2
        ***REMOVED***
        self.y = value

    def get_z(self***REMOVED***:
        warnings.warn(
            "`get_z(***REMOVED***` is deprecated, use the `z` property instead.",
            RemovedInDjango20Warning, 2
        ***REMOVED***
        return self.z

    def set_z(self, value***REMOVED***:
        warnings.warn(
            "`set_z(***REMOVED***` is deprecated, use the `z` property instead.",
            RemovedInDjango20Warning, 2
        ***REMOVED***
        self.z = value

    # ### Tuple setting and retrieval routines. ###
    @property
    def tuple(self***REMOVED***:
        "Returns a tuple of the point."
        return self._cs.tuple

    @tuple.setter
    def tuple(self, tup***REMOVED***:
        "Sets the coordinates of the point with the given tuple."
        self._cs[0***REMOVED*** = tup

    def get_coords(self***REMOVED***:
        warnings.warn(
            "`get_coords(***REMOVED***` is deprecated, use the `tuple` property instead.",
            RemovedInDjango20Warning, 2
        ***REMOVED***
        return self.tuple

    def set_coords(self, tup***REMOVED***:
        warnings.warn(
            "`set_coords(***REMOVED***` is deprecated, use the `tuple` property instead.",
            RemovedInDjango20Warning, 2
        ***REMOVED***
        self.tuple = tup

    # The tuple and coords properties
    coords = tuple
