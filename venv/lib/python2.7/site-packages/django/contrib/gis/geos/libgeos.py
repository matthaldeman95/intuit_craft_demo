***REMOVED***
 This module houses the ctypes initialization procedures, as well
 as the notice and error handler function callbacks (get called
 when an error occurs in GEOS***REMOVED***.

 This module also houses GEOS Pointer utilities, including
 get_pointer_arr(***REMOVED***, and GEOM_PTR.
***REMOVED***
import logging
***REMOVED***
import re
from ctypes import CDLL, CFUNCTYPE, POINTER, Structure, c_char_p
from ctypes.util import find_library

from django.contrib.gis.geos.error import GEOSException
from django.core.exceptions import ImproperlyConfigured
from django.utils.functional import SimpleLazyObject

logger = logging.getLogger('django.contrib.gis'***REMOVED***


def load_geos(***REMOVED***:
    # Custom library path set?
    ***REMOVED***
        from django.conf import settings
        lib_path = settings.GEOS_LIBRARY_PATH
    except (AttributeError, EnvironmentError,
            ImportError, ImproperlyConfigured***REMOVED***:
        lib_path = None

    # Setting the appropriate names for the GEOS-C library.
    if lib_path:
        lib_names = None
    elif os.name == 'nt':
        # Windows NT libraries
        lib_names = ['geos_c', 'libgeos_c-1'***REMOVED***
    elif os.name == 'posix':
        # *NIX libraries
        lib_names = ['geos_c', 'GEOS'***REMOVED***
    else:
        raise ImportError('Unsupported OS "%s"' % os.name***REMOVED***

    # Using the ctypes `find_library` utility to find the path to the GEOS
    # shared library.  This is better than manually specifying each library name
    # and extension (e.g., libgeos_c.[so|so.1|dylib***REMOVED***.***REMOVED***.
    if lib_names:
        for lib_name in lib_names:
            lib_path = find_library(lib_name***REMOVED***
            if lib_path is not None:
                break

    # No GEOS library could be found.
    if lib_path is None:
        raise ImportError(
            'Could not find the GEOS library (tried "%s"***REMOVED***. '
            'Try setting GEOS_LIBRARY_PATH in your settings.' %
            '", "'.join(lib_names***REMOVED***
        ***REMOVED***
    # Getting the GEOS C library.  The C interface (CDLL***REMOVED*** is used for
    # both *NIX and Windows.
    # See the GEOS C API source code for more details on the library function calls:
    #  http://geos.refractions.net/ro/doxygen_docs/html/geos__c_8h-source.html
    _lgeos = CDLL(lib_path***REMOVED***
    # Here we set up the prototypes for the initGEOS_r and finishGEOS_r
    # routines.  These functions aren't actually called until they are
    # attached to a GEOS context handle -- this actually occurs in
    # geos/prototypes/threadsafe.py.
    _lgeos.initGEOS_r.restype = CONTEXT_PTR
    _lgeos.finishGEOS_r.argtypes = [CONTEXT_PTR***REMOVED***
    return _lgeos


# The notice and error handler C function callback definitions.
# Supposed to mimic the GEOS message handler (C below***REMOVED***:
#  typedef void (*GEOSMessageHandler***REMOVED***(const char *fmt, ...***REMOVED***;
NOTICEFUNC = CFUNCTYPE(None, c_char_p, c_char_p***REMOVED***


def notice_h(fmt, lst***REMOVED***:
    fmt, lst = fmt.decode(***REMOVED***, lst.decode(***REMOVED***
    ***REMOVED***
        warn_msg = fmt % lst
    except TypeError:
        warn_msg = fmt
    logger.warning('GEOS_NOTICE: %s\n', warn_msg***REMOVED***
notice_h = NOTICEFUNC(notice_h***REMOVED***

ERRORFUNC = CFUNCTYPE(None, c_char_p, c_char_p***REMOVED***


def error_h(fmt, lst***REMOVED***:
    fmt, lst = fmt.decode(***REMOVED***, lst.decode(***REMOVED***
    ***REMOVED***
        err_msg = fmt % lst
    except TypeError:
        err_msg = fmt
    logger.error('GEOS_ERROR: %s\n', err_msg***REMOVED***
error_h = ERRORFUNC(error_h***REMOVED***

# #### GEOS Geometry C data structures, and utility functions. ####


# Opaque GEOS geometry structures, used for GEOM_PTR and CS_PTR
class GEOSGeom_t(Structure***REMOVED***:
    pass


class GEOSPrepGeom_t(Structure***REMOVED***:
    pass


class GEOSCoordSeq_t(Structure***REMOVED***:
    pass


class GEOSContextHandle_t(Structure***REMOVED***:
    pass

# Pointers to opaque GEOS geometry structures.
GEOM_PTR = POINTER(GEOSGeom_t***REMOVED***
PREPGEOM_PTR = POINTER(GEOSPrepGeom_t***REMOVED***
CS_PTR = POINTER(GEOSCoordSeq_t***REMOVED***
CONTEXT_PTR = POINTER(GEOSContextHandle_t***REMOVED***


# Used specifically by the GEOSGeom_createPolygon and GEOSGeom_createCollection
#  GEOS routines
def get_pointer_arr(n***REMOVED***:
    "Gets a ctypes pointer array (of length `n`***REMOVED*** for GEOSGeom_t opaque pointer."
    GeomArr = GEOM_PTR * n
    return GeomArr(***REMOVED***


lgeos = SimpleLazyObject(load_geos***REMOVED***


class GEOSFuncFactory(object***REMOVED***:
    ***REMOVED***
    Lazy loading of GEOS functions.
    ***REMOVED***
    argtypes = None
    restype = None
    errcheck = None

    def __init__(self, func_name, *args, **kwargs***REMOVED***:
        self.func_name = func_name
        self.restype = kwargs.pop('restype', self.restype***REMOVED***
        self.errcheck = kwargs.pop('errcheck', self.errcheck***REMOVED***
        self.argtypes = kwargs.pop('argtypes', self.argtypes***REMOVED***
        self.args = args
        self.kwargs = kwargs
        self.func = None

    def __call__(self, *args, **kwargs***REMOVED***:
        if self.func is None:
            self.func = self.get_func(*self.args, **self.kwargs***REMOVED***
        return self.func(*args, **kwargs***REMOVED***

    def get_func(self, *args, **kwargs***REMOVED***:
        from django.contrib.gis.geos.prototypes.threadsafe import GEOSFunc
        func = GEOSFunc(self.func_name***REMOVED***
        func.argtypes = self.argtypes or [***REMOVED***
        func.restype = self.restype
        if self.errcheck:
            func.errcheck = self.errcheck
        return func


# Returns the string version of the GEOS library. Have to set the restype
# explicitly to c_char_p to ensure compatibility across 32 and 64-bit platforms.
geos_version = GEOSFuncFactory('GEOSversion', restype=c_char_p***REMOVED***

# Regular expression should be able to parse version strings such as
# '3.0.0rc4-CAPI-1.3.3', '3.0.0-CAPI-1.4.1', '3.4.0dev-CAPI-1.8.0' or '3.4.0dev-CAPI-1.8.0 r0'
version_regex = re.compile(
    r'^(?P<version>(?P<major>\d+***REMOVED***\.(?P<minor>\d+***REMOVED***\.(?P<subminor>\d+***REMOVED******REMOVED***'
    r'((rc(?P<release_candidate>\d+***REMOVED******REMOVED***|dev***REMOVED***?-CAPI-(?P<capi_version>\d+\.\d+\.\d+***REMOVED***( r\d+***REMOVED***?$'
***REMOVED***


def geos_version_info(***REMOVED***:
    ***REMOVED***
    Returns a dictionary containing the various version metadata parsed from
    the GEOS version string, including the version number, whether the version
    is a release candidate (and what number release candidate***REMOVED***, and the C API
    version.
    ***REMOVED***
    ver = geos_version(***REMOVED***.decode(***REMOVED***
    m = version_regex.match(ver***REMOVED***
    if not m:
        raise GEOSException('Could not parse version info string "%s"' % ver***REMOVED***
    return {key: m.group(key***REMOVED*** for key in (
        'version', 'release_candidate', 'capi_version', 'major', 'minor', 'subminor'***REMOVED******REMOVED***
