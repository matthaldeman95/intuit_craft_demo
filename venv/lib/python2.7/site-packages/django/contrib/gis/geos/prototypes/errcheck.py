***REMOVED***
 Error checking functions for GEOS ctypes prototype functions.
***REMOVED***
from ctypes import c_void_p, string_at

from django.contrib.gis.geos.error import GEOSException
from django.contrib.gis.geos.libgeos import GEOSFuncFactory

# Getting the `free` routine used to free the memory allocated for
# string pointers returned by GEOS.
free = GEOSFuncFactory('GEOSFree'***REMOVED***
free.argtypes = [c_void_p***REMOVED***


def last_arg_byref(args***REMOVED***:
    "Returns the last C argument's value by reference."
    return args[-1***REMOVED***._obj.value


def check_dbl(result, func, cargs***REMOVED***:
    "Checks the status code and returns the double value passed in by reference."
    # Checking the status code
    if result != 1:
        return None
    # Double passed in by reference, return its value.
    return last_arg_byref(cargs***REMOVED***


def check_geom(result, func, cargs***REMOVED***:
    "Error checking on routines that return Geometries."
    if not result:
        raise GEOSException('Error encountered checking Geometry returned from GEOS C function "%s".' % func.__name__***REMOVED***
    return result


def check_minus_one(result, func, cargs***REMOVED***:
    "Error checking on routines that should not return -1."
    if result == -1:
        raise GEOSException('Error encountered in GEOS C function "%s".' % func.__name__***REMOVED***
    else:
        return result


def check_predicate(result, func, cargs***REMOVED***:
    "Error checking for unary/binary predicate functions."
    val = ord(result***REMOVED***  # getting the ordinal from the character
    if val == 1:
        return True
    elif val == 0:
        return False
    else:
        raise GEOSException('Error encountered on GEOS C predicate function "%s".' % func.__name__***REMOVED***


def check_sized_string(result, func, cargs***REMOVED***:
    ***REMOVED***
    Error checking for routines that return explicitly sized strings.

    This frees the memory allocated by GEOS at the result pointer.
    ***REMOVED***
    if not result:
        raise GEOSException('Invalid string pointer returned by GEOS C function "%s"' % func.__name__***REMOVED***
    # A c_size_t object is passed in by reference for the second
    # argument on these routines, and its needed to determine the
    # correct size.
    s = string_at(result, last_arg_byref(cargs***REMOVED******REMOVED***
    # Freeing the memory allocated within GEOS
    free(result***REMOVED***
    return s


def check_string(result, func, cargs***REMOVED***:
    ***REMOVED***
    Error checking for routines that return strings.

    This frees the memory allocated by GEOS at the result pointer.
    ***REMOVED***
    if not result:
        raise GEOSException('Error encountered checking string return value in GEOS C function "%s".' % func.__name__***REMOVED***
    # Getting the string value at the pointer address.
    s = string_at(result***REMOVED***
    # Freeing the memory allocated within GEOS
    free(result***REMOVED***
    return s


def check_zero(result, func, cargs***REMOVED***:
    "Error checking on routines that should not return 0."
    if result == 0:
        raise GEOSException('Error encountered in GEOS C function "%s".' % func.__name__***REMOVED***
    else:
        return result
