***REMOVED***
 This module houses the Geometry Collection objects:
 GeometryCollection, MultiPoint, MultiLineString, and MultiPolygon
***REMOVED***
import json
import warnings
from ctypes import byref, c_int, c_uint

from django.contrib.gis.geos import prototypes as capi
from django.contrib.gis.geos.error import GEOSException
from django.contrib.gis.geos.geometry import GEOSGeometry, LinearGeometryMixin
from django.contrib.gis.geos.libgeos import geos_version_info, get_pointer_arr
from django.contrib.gis.geos.linestring import LinearRing, LineString
from django.contrib.gis.geos.point import Point
from django.contrib.gis.geos.polygon import Polygon
from django.utils.deprecation import RemovedInDjango20Warning
from django.utils.six.moves import range


class GeometryCollection(GEOSGeometry***REMOVED***:
    _typeid = 7

    def __init__(self, *args, **kwargs***REMOVED***:
        "Initializes a Geometry Collection from a sequence of Geometry objects."

        # Checking the arguments
        if len(args***REMOVED*** == 1:
            # If only one geometry provided or a list of geometries is provided
            #  in the first argument.
            if isinstance(args[0***REMOVED***, (tuple, list***REMOVED******REMOVED***:
                init_geoms = args[0***REMOVED***
            else:
                init_geoms = args
        else:
            init_geoms = args

        # Ensuring that only the permitted geometries are allowed in this collection
        # this is moved to list mixin super class
        self._check_allowed(init_geoms***REMOVED***

        # Creating the geometry pointer array.
        collection = self._create_collection(len(init_geoms***REMOVED***, iter(init_geoms***REMOVED******REMOVED***
        super(GeometryCollection, self***REMOVED***.__init__(collection, **kwargs***REMOVED***

    def __iter__(self***REMOVED***:
        "Iterates over each Geometry in the Collection."
        for i in range(len(self***REMOVED******REMOVED***:
            yield self[i***REMOVED***

    def __len__(self***REMOVED***:
        "Returns the number of geometries in this Collection."
        return self.num_geom

    # ### Methods for compatibility with ListMixin ###
    def _create_collection(self, length, items***REMOVED***:
        # Creating the geometry pointer array.
        geoms = get_pointer_arr(length***REMOVED***
        for i, g in enumerate(items***REMOVED***:
            # this is a little sloppy, but makes life easier
            # allow GEOSGeometry types (python wrappers***REMOVED*** or pointer types
            geoms[i***REMOVED*** = capi.geom_clone(getattr(g, 'ptr', g***REMOVED******REMOVED***

        return capi.create_collection(c_int(self._typeid***REMOVED***, byref(geoms***REMOVED***, c_uint(length***REMOVED******REMOVED***

    def _get_single_internal(self, index***REMOVED***:
        return capi.get_geomn(self.ptr, index***REMOVED***

    def _get_single_external(self, index***REMOVED***:
        "Returns the Geometry from this Collection at the given index (0-based***REMOVED***."
        # Checking the index and returning the corresponding GEOS geometry.
        return GEOSGeometry(capi.geom_clone(self._get_single_internal(index***REMOVED******REMOVED***, srid=self.srid***REMOVED***

    def _set_list(self, length, items***REMOVED***:
        "Create a new collection, and destroy the contents of the previous pointer."
        prev_ptr = self.ptr
        srid = self.srid
        self.ptr = self._create_collection(length, items***REMOVED***
        if srid:
            self.srid = srid
        capi.destroy_geom(prev_ptr***REMOVED***

    _set_single = GEOSGeometry._set_single_rebuild
    _assign_extended_slice = GEOSGeometry._assign_extended_slice_rebuild

    @property
    def json(self***REMOVED***:
        if self.__class__.__name__ == 'GeometryCollection':
            return json.dumps({
                'type': self.__class__.__name__,
                'geometries': [
                ***REMOVED***'type': geom.__class__.__name__, 'coordinates': geom.coords***REMOVED***
                    for geom in self
                ***REMOVED***,
        ***REMOVED******REMOVED***
        return super(GeometryCollection, self***REMOVED***.json
    geojson = json

    @property
    def kml(self***REMOVED***:
        "Returns the KML for this Geometry Collection."
        return '<MultiGeometry>%s</MultiGeometry>' % ''.join(g.kml for g in self***REMOVED***

    @property
    def tuple(self***REMOVED***:
        "Returns a tuple of all the coordinates in this Geometry Collection"
        return tuple(g.tuple for g in self***REMOVED***
    coords = tuple


# MultiPoint, MultiLineString, and MultiPolygon class definitions.
class MultiPoint(GeometryCollection***REMOVED***:
    _allowed = Point
    _typeid = 4


class MultiLineString(LinearGeometryMixin, GeometryCollection***REMOVED***:
    _allowed = (LineString, LinearRing***REMOVED***
    _typeid = 5

    @property
    def closed(self***REMOVED***:
        if geos_version_info(***REMOVED***['version'***REMOVED*** < '3.5':
            raise GEOSException("MultiLineString.closed requires GEOS >= 3.5.0."***REMOVED***
        return super(MultiLineString, self***REMOVED***.closed


class MultiPolygon(GeometryCollection***REMOVED***:
    _allowed = Polygon
    _typeid = 6

    @property
    def cascaded_union(self***REMOVED***:
        "Returns a cascaded union of this MultiPolygon."
        warnings.warn(
            "`cascaded_union` is deprecated, use the `unary_union` property instead.",
            RemovedInDjango20Warning, 2
        ***REMOVED***
        return GEOSGeometry(capi.geos_cascaded_union(self.ptr***REMOVED***, self.srid***REMOVED***

# Setting the allowed types here since GeometryCollection is defined before
# its subclasses.
GeometryCollection._allowed = (Point, LineString, LinearRing, Polygon, MultiPoint, MultiLineString, MultiPolygon***REMOVED***
