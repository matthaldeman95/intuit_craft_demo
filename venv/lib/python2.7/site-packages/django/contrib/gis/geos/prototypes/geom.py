from ctypes import POINTER, c_char_p, c_int, c_size_t, c_ubyte

from django.contrib.gis.geos.libgeos import CS_PTR, GEOM_PTR, GEOSFuncFactory
from django.contrib.gis.geos.prototypes.errcheck import (
    check_geom, check_minus_one, check_sized_string, check_string, check_zero,
***REMOVED***

# This is the return type used by binary output (WKB, HEX***REMOVED*** routines.
c_uchar_p = POINTER(c_ubyte***REMOVED***


# We create a simple subclass of c_char_p here because when the response
# type is set to c_char_p, you get a _Python_ string and there's no way
# to access the string's address inside the error checking function.
# In other words, you can't free the memory allocated inside GEOS.  Previously,
# the return type would just be omitted and the integer address would be
# used -- but this allows us to be specific in the function definition and
# keeps the reference so it may be free'd.
class geos_char_p(c_char_p***REMOVED***:
    pass


# ### ctypes factory classes ###
class BinConstructor(GEOSFuncFactory***REMOVED***:
    "Generates a prototype for binary construction (HEX, WKB***REMOVED*** GEOS routines."
    argtypes = [c_char_p, c_size_t***REMOVED***
    restype = GEOM_PTR
    errcheck = staticmethod(check_geom***REMOVED***


# HEX & WKB output
class BinOutput(GEOSFuncFactory***REMOVED***:
    "Generates a prototype for the routines that return a sized string."
    argtypes = [GEOM_PTR, POINTER(c_size_t***REMOVED******REMOVED***
    restype = c_uchar_p
    errcheck = staticmethod(check_sized_string***REMOVED***


class GeomOutput(GEOSFuncFactory***REMOVED***:
    "For GEOS routines that return a geometry."
    restype = GEOM_PTR
    errcheck = staticmethod(check_geom***REMOVED***

    def get_func(self, argtypes***REMOVED***:
        self.argtypes = argtypes
        return super(GeomOutput, self***REMOVED***.get_func(***REMOVED***


class IntFromGeom(GEOSFuncFactory***REMOVED***:
    "Argument is a geometry, return type is an integer."
    argtypes = [GEOM_PTR***REMOVED***
    restype = c_int

    def get_func(self, zero=False***REMOVED***:
        if zero:
            self.errcheck = check_zero
        else:
            self.errcheck = check_minus_one
        return super(IntFromGeom, self***REMOVED***.get_func(***REMOVED***


class StringFromGeom(GEOSFuncFactory***REMOVED***:
    "Argument is a Geometry, return type is a string."
    argtypes = [GEOM_PTR***REMOVED***
    restype = geos_char_p
    errcheck = staticmethod(check_string***REMOVED***


# ### ctypes prototypes ###

# Deprecated creation routines from WKB, HEX, WKT
from_hex = BinConstructor('GEOSGeomFromHEX_buf'***REMOVED***
from_wkb = BinConstructor('GEOSGeomFromWKB_buf'***REMOVED***
from_wkt = GeomOutput('GEOSGeomFromWKT', [c_char_p***REMOVED******REMOVED***

# Deprecated output routines
to_hex = BinOutput('GEOSGeomToHEX_buf'***REMOVED***
to_wkb = BinOutput('GEOSGeomToWKB_buf'***REMOVED***
to_wkt = StringFromGeom('GEOSGeomToWKT'***REMOVED***

# The GEOS geometry type, typeid, num_coordinates and number of geometries
geos_normalize = IntFromGeom('GEOSNormalize'***REMOVED***
geos_type = StringFromGeom('GEOSGeomType'***REMOVED***
geos_typeid = IntFromGeom('GEOSGeomTypeId'***REMOVED***
get_dims = GEOSFuncFactory('GEOSGeom_getDimensions', argtypes=[GEOM_PTR***REMOVED***, restype=c_int***REMOVED***
get_num_coords = IntFromGeom('GEOSGetNumCoordinates'***REMOVED***
get_num_geoms = IntFromGeom('GEOSGetNumGeometries'***REMOVED***

# Geometry creation factories
create_point = GeomOutput('GEOSGeom_createPoint', [CS_PTR***REMOVED******REMOVED***
create_linestring = GeomOutput('GEOSGeom_createLineString', [CS_PTR***REMOVED******REMOVED***
create_linearring = GeomOutput('GEOSGeom_createLinearRing', [CS_PTR***REMOVED******REMOVED***

# Polygon and collection creation routines are special and will not
# have their argument types defined.
create_polygon = GeomOutput('GEOSGeom_createPolygon', None***REMOVED***
create_empty_polygon = GeomOutput('GEOSGeom_createEmptyPolygon', None***REMOVED***
create_collection = GeomOutput('GEOSGeom_createCollection', None***REMOVED***

# Ring routines
get_extring = GeomOutput('GEOSGetExteriorRing', [GEOM_PTR***REMOVED******REMOVED***
get_intring = GeomOutput('GEOSGetInteriorRingN', [GEOM_PTR, c_int***REMOVED******REMOVED***
get_nrings = IntFromGeom('GEOSGetNumInteriorRings'***REMOVED***

# Collection Routines
get_geomn = GeomOutput('GEOSGetGeometryN', [GEOM_PTR, c_int***REMOVED******REMOVED***

# Cloning
geom_clone = GEOSFuncFactory('GEOSGeom_clone', argtypes=[GEOM_PTR***REMOVED***, restype=GEOM_PTR***REMOVED***

# Destruction routine.
destroy_geom = GEOSFuncFactory('GEOSGeom_destroy', argtypes=[GEOM_PTR***REMOVED******REMOVED***

# SRID routines
geos_get_srid = GEOSFuncFactory('GEOSGetSRID', argtypes=[GEOM_PTR***REMOVED***, restype=c_int***REMOVED***
geos_set_srid = GEOSFuncFactory('GEOSSetSRID', argtypes=[GEOM_PTR, c_int***REMOVED******REMOVED***
