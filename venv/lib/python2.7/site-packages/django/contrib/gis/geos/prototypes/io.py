import threading
from ctypes import POINTER, Structure, byref, c_char, c_char_p, c_int, c_size_t

from django.contrib.gis.geos.base import GEOSBase
from django.contrib.gis.geos.libgeos import GEOM_PTR, GEOSFuncFactory
from django.contrib.gis.geos.prototypes.errcheck import (
    check_geom, check_sized_string, check_string,
***REMOVED***
from django.contrib.gis.geos.prototypes.geom import c_uchar_p, geos_char_p
from django.utils import six
from django.utils.encoding import force_bytes


# ### The WKB/WKT Reader/Writer structures and pointers ###
class WKTReader_st(Structure***REMOVED***:
    pass


class WKTWriter_st(Structure***REMOVED***:
    pass


class WKBReader_st(Structure***REMOVED***:
    pass


class WKBWriter_st(Structure***REMOVED***:
    pass

WKT_READ_PTR = POINTER(WKTReader_st***REMOVED***
WKT_WRITE_PTR = POINTER(WKTWriter_st***REMOVED***
WKB_READ_PTR = POINTER(WKBReader_st***REMOVED***
WKB_WRITE_PTR = POINTER(WKBReader_st***REMOVED***

# WKTReader routines
wkt_reader_create = GEOSFuncFactory('GEOSWKTReader_create', restype=WKT_READ_PTR***REMOVED***
wkt_reader_destroy = GEOSFuncFactory('GEOSWKTReader_destroy', argtypes=[WKT_READ_PTR***REMOVED******REMOVED***

wkt_reader_read = GEOSFuncFactory(
    'GEOSWKTReader_read', argtypes=[WKT_READ_PTR, c_char_p***REMOVED***, restype=GEOM_PTR, errcheck=check_geom
***REMOVED***
# WKTWriter routines
wkt_writer_create = GEOSFuncFactory('GEOSWKTWriter_create', restype=WKT_WRITE_PTR***REMOVED***
wkt_writer_destroy = GEOSFuncFactory('GEOSWKTWriter_destroy', argtypes=[WKT_WRITE_PTR***REMOVED******REMOVED***

wkt_writer_write = GEOSFuncFactory(
    'GEOSWKTWriter_write', argtypes=[WKT_WRITE_PTR, GEOM_PTR***REMOVED***, restype=geos_char_p, errcheck=check_string
***REMOVED***

wkt_writer_get_outdim = GEOSFuncFactory(
    'GEOSWKTWriter_getOutputDimension', argtypes=[WKT_WRITE_PTR***REMOVED***, restype=c_int
***REMOVED***
wkt_writer_set_outdim = GEOSFuncFactory(
    'GEOSWKTWriter_setOutputDimension', argtypes=[WKT_WRITE_PTR, c_int***REMOVED***
***REMOVED***

wkt_writer_set_trim = GEOSFuncFactory('GEOSWKTWriter_setTrim', argtypes=[WKT_WRITE_PTR, c_char***REMOVED******REMOVED***
wkt_writer_set_precision = GEOSFuncFactory('GEOSWKTWriter_setRoundingPrecision', argtypes=[WKT_WRITE_PTR, c_int***REMOVED******REMOVED***

# WKBReader routines
wkb_reader_create = GEOSFuncFactory('GEOSWKBReader_create', restype=WKB_READ_PTR***REMOVED***
wkb_reader_destroy = GEOSFuncFactory('GEOSWKBReader_destroy', argtypes=[WKB_READ_PTR***REMOVED******REMOVED***


class WKBReadFunc(GEOSFuncFactory***REMOVED***:
    # Although the function definitions take `const unsigned char *`
    # as their parameter, we use c_char_p here so the function may
    # take Python strings directly as parameters.  Inside Python there
    # is not a difference between signed and unsigned characters, so
    # it is not a problem.
    argtypes = [WKB_READ_PTR, c_char_p, c_size_t***REMOVED***
    restype = GEOM_PTR
    errcheck = staticmethod(check_geom***REMOVED***


wkb_reader_read = WKBReadFunc('GEOSWKBReader_read'***REMOVED***
wkb_reader_read_hex = WKBReadFunc('GEOSWKBReader_readHEX'***REMOVED***

# WKBWriter routines
wkb_writer_create = GEOSFuncFactory('GEOSWKBWriter_create', restype=WKB_WRITE_PTR***REMOVED***
wkb_writer_destroy = GEOSFuncFactory('GEOSWKBWriter_destroy', argtypes=[WKB_WRITE_PTR***REMOVED******REMOVED***


# WKB Writing prototypes.
class WKBWriteFunc(GEOSFuncFactory***REMOVED***:
    argtypes = [WKB_WRITE_PTR, GEOM_PTR, POINTER(c_size_t***REMOVED******REMOVED***
    restype = c_uchar_p
    errcheck = staticmethod(check_sized_string***REMOVED***


wkb_writer_write = WKBWriteFunc('GEOSWKBWriter_write'***REMOVED***
wkb_writer_write_hex = WKBWriteFunc('GEOSWKBWriter_writeHEX'***REMOVED***


# WKBWriter property getter/setter prototypes.
class WKBWriterGet(GEOSFuncFactory***REMOVED***:
    argtypes = [WKB_WRITE_PTR***REMOVED***
    restype = c_int


class WKBWriterSet(GEOSFuncFactory***REMOVED***:
    argtypes = [WKB_WRITE_PTR, c_int***REMOVED***

wkb_writer_get_byteorder = WKBWriterGet('GEOSWKBWriter_getByteOrder'***REMOVED***
wkb_writer_set_byteorder = WKBWriterSet('GEOSWKBWriter_setByteOrder'***REMOVED***
wkb_writer_get_outdim = WKBWriterGet('GEOSWKBWriter_getOutputDimension'***REMOVED***
wkb_writer_set_outdim = WKBWriterSet('GEOSWKBWriter_setOutputDimension'***REMOVED***
wkb_writer_get_include_srid = WKBWriterGet('GEOSWKBWriter_getIncludeSRID', restype=c_char***REMOVED***
wkb_writer_set_include_srid = WKBWriterSet('GEOSWKBWriter_setIncludeSRID', argtypes=[WKB_WRITE_PTR, c_char***REMOVED******REMOVED***


# ### Base I/O Class ###
class IOBase(GEOSBase***REMOVED***:
    "Base class for GEOS I/O objects."
    def __init__(self***REMOVED***:
        # Getting the pointer with the constructor.
        self.ptr = self._constructor(***REMOVED***
        # Loading the real destructor function at this point as doing it in
        # __del__ is too late (import error***REMOVED***.
        self._destructor.func = self._destructor.get_func(
            *self._destructor.args, **self._destructor.kwargs
        ***REMOVED***

    def __del__(self***REMOVED***:
        # Cleaning up with the appropriate destructor.
        ***REMOVED***
            self._destructor(self._ptr***REMOVED***
        except (AttributeError, TypeError***REMOVED***:
            pass  # Some part might already have been garbage collected

# ### Base WKB/WKT Reading and Writing objects ###


# Non-public WKB/WKT reader classes for internal use because
# their `read` methods return _pointers_ instead of GEOSGeometry
# objects.
class _WKTReader(IOBase***REMOVED***:
    _constructor = wkt_reader_create
    _destructor = wkt_reader_destroy
    ptr_type = WKT_READ_PTR

    def read(self, wkt***REMOVED***:
        if not isinstance(wkt, (bytes, six.string_types***REMOVED******REMOVED***:
            raise TypeError
        return wkt_reader_read(self.ptr, force_bytes(wkt***REMOVED******REMOVED***


class _WKBReader(IOBase***REMOVED***:
    _constructor = wkb_reader_create
    _destructor = wkb_reader_destroy
    ptr_type = WKB_READ_PTR

    def read(self, wkb***REMOVED***:
        "Returns a _pointer_ to C GEOS Geometry object from the given WKB."
        if isinstance(wkb, six.memoryview***REMOVED***:
            wkb_s = bytes(wkb***REMOVED***
            return wkb_reader_read(self.ptr, wkb_s, len(wkb_s***REMOVED******REMOVED***
        elif isinstance(wkb, (bytes, six.string_types***REMOVED******REMOVED***:
            return wkb_reader_read_hex(self.ptr, wkb, len(wkb***REMOVED******REMOVED***
        else:
            raise TypeError


# ### WKB/WKT Writer Classes ###
class WKTWriter(IOBase***REMOVED***:
    _constructor = wkt_writer_create
    _destructor = wkt_writer_destroy
    ptr_type = WKT_WRITE_PTR

    _trim = False
    _precision = None

    def __init__(self, dim=2, trim=False, precision=None***REMOVED***:
        super(WKTWriter, self***REMOVED***.__init__(***REMOVED***
        if bool(trim***REMOVED*** != self._trim:
            self.trim = trim
        if precision is not None:
            self.precision = precision
        self.outdim = dim

    def write(self, geom***REMOVED***:
        "Returns the WKT representation of the given geometry."
        return wkt_writer_write(self.ptr, geom.ptr***REMOVED***

    @property
    def outdim(self***REMOVED***:
        return wkt_writer_get_outdim(self.ptr***REMOVED***

    @outdim.setter
    def outdim(self, new_dim***REMOVED***:
        if new_dim not in (2, 3***REMOVED***:
            raise ValueError('WKT output dimension must be 2 or 3'***REMOVED***
        wkt_writer_set_outdim(self.ptr, new_dim***REMOVED***

    @property
    def trim(self***REMOVED***:
        return self._trim

    @trim.setter
    def trim(self, flag***REMOVED***:
        if bool(flag***REMOVED*** != self._trim:
            self._trim = bool(flag***REMOVED***
            wkt_writer_set_trim(self.ptr, b'\x01' if flag else b'\x00'***REMOVED***

    @property
    def precision(self***REMOVED***:
        return self._precision

    @precision.setter
    def precision(self, precision***REMOVED***:
        if (not isinstance(precision, int***REMOVED*** or precision < 0***REMOVED*** and precision is not None:
            raise AttributeError('WKT output rounding precision must be non-negative integer or None.'***REMOVED***
        if precision != self._precision:
            self._precision = precision
            wkt_writer_set_precision(self.ptr, -1 if precision is None else precision***REMOVED***


class WKBWriter(IOBase***REMOVED***:
    _constructor = wkb_writer_create
    _destructor = wkb_writer_destroy
    ptr_type = WKB_WRITE_PTR

    def __init__(self, dim=2***REMOVED***:
        super(WKBWriter, self***REMOVED***.__init__(***REMOVED***
        self.outdim = dim

    def write(self, geom***REMOVED***:
        "Returns the WKB representation of the given geometry."
        return six.memoryview(wkb_writer_write(self.ptr, geom.ptr, byref(c_size_t(***REMOVED******REMOVED******REMOVED******REMOVED***

    def write_hex(self, geom***REMOVED***:
        "Returns the HEXEWKB representation of the given geometry."
        return wkb_writer_write_hex(self.ptr, geom.ptr, byref(c_size_t(***REMOVED******REMOVED******REMOVED***

    # ### WKBWriter Properties ###

    # Property for getting/setting the byteorder.
    def _get_byteorder(self***REMOVED***:
        return wkb_writer_get_byteorder(self.ptr***REMOVED***

    def _set_byteorder(self, order***REMOVED***:
        if order not in (0, 1***REMOVED***:
            raise ValueError('Byte order parameter must be 0 (Big Endian***REMOVED*** or 1 (Little Endian***REMOVED***.'***REMOVED***
        wkb_writer_set_byteorder(self.ptr, order***REMOVED***

    byteorder = property(_get_byteorder, _set_byteorder***REMOVED***

    # Property for getting/setting the output dimension.
    @property
    def outdim(self***REMOVED***:
        return wkb_writer_get_outdim(self.ptr***REMOVED***

    @outdim.setter
    def outdim(self, new_dim***REMOVED***:
        if new_dim not in (2, 3***REMOVED***:
            raise ValueError('WKB output dimension must be 2 or 3'***REMOVED***
        wkb_writer_set_outdim(self.ptr, new_dim***REMOVED***

    # Property for getting/setting the include srid flag.
    @property
    def srid(self***REMOVED***:
        return bool(ord(wkb_writer_get_include_srid(self.ptr***REMOVED******REMOVED******REMOVED***

    @srid.setter
    def srid(self, include***REMOVED***:
        if include:
            flag = b'\x01'
        else:
            flag = b'\x00'
        wkb_writer_set_include_srid(self.ptr, flag***REMOVED***


# `ThreadLocalIO` object holds instances of the WKT and WKB reader/writer
# objects that are local to the thread.  The `GEOSGeometry` internals
# access these instances by calling the module-level functions, defined
# below.
class ThreadLocalIO(threading.local***REMOVED***:
    wkt_r = None
    wkt_w = None
    wkb_r = None
    wkb_w = None
    ewkb_w = None

thread_context = ThreadLocalIO(***REMOVED***


# These module-level routines return the I/O object that is local to the
# thread. If the I/O object does not exist yet it will be initialized.
def wkt_r(***REMOVED***:
    if not thread_context.wkt_r:
        thread_context.wkt_r = _WKTReader(***REMOVED***
    return thread_context.wkt_r


def wkt_w(dim=2, trim=False, precision=None***REMOVED***:
    if not thread_context.wkt_w:
        thread_context.wkt_w = WKTWriter(dim=dim, trim=trim, precision=precision***REMOVED***
    else:
        thread_context.wkt_w.outdim = dim
        thread_context.wkt_w.trim = trim
        thread_context.wkt_w.precision = precision
    return thread_context.wkt_w


def wkb_r(***REMOVED***:
    if not thread_context.wkb_r:
        thread_context.wkb_r = _WKBReader(***REMOVED***
    return thread_context.wkb_r


def wkb_w(dim=2***REMOVED***:
    if not thread_context.wkb_w:
        thread_context.wkb_w = WKBWriter(dim=dim***REMOVED***
    else:
        thread_context.wkb_w.outdim = dim
    return thread_context.wkb_w


def ewkb_w(dim=2***REMOVED***:
    if not thread_context.ewkb_w:
        thread_context.ewkb_w = WKBWriter(dim=dim***REMOVED***
        thread_context.ewkb_w.srid = True
    else:
        thread_context.ewkb_w.outdim = dim
    return thread_context.ewkb_w
