***REMOVED***
This module includes some utility functions for inspecting the layout
of a GDAL data source -- the functionality is analogous to the output
produced by the `ogrinfo` utility.
***REMOVED***

from django.contrib.gis.gdal import DataSource
from django.contrib.gis.gdal.geometries import GEO_CLASSES


def ogrinfo(data_source, num_features=10***REMOVED***:
    ***REMOVED***
    Walks the available layers in the supplied `data_source`, displaying
    the fields for the first `num_features` features.
    ***REMOVED***

    # Checking the parameters.
    if isinstance(data_source, str***REMOVED***:
        data_source = DataSource(data_source***REMOVED***
    elif isinstance(data_source, DataSource***REMOVED***:
        pass
    else:
        raise Exception('Data source parameter must be a string or a DataSource object.'***REMOVED***

    for i, layer in enumerate(data_source***REMOVED***:
        print("data source : %s" % data_source.name***REMOVED***
        print("==== layer %s" % i***REMOVED***
        print("  shape type: %s" % GEO_CLASSES[layer.geom_type.num***REMOVED***.__name__***REMOVED***
        print("  # features: %s" % len(layer***REMOVED******REMOVED***
        print("         srs: %s" % layer.srs***REMOVED***
        extent_tup = layer.extent.tuple
        print("      extent: %s - %s" % (extent_tup[0:2***REMOVED***, extent_tup[2:4***REMOVED******REMOVED******REMOVED***
        print("Displaying the first %s features ====" % num_features***REMOVED***

        width = max(*map(len, layer.fields***REMOVED******REMOVED***
        fmt = " %%%ss: %%s" % width
        for j, feature in enumerate(layer[:num_features***REMOVED******REMOVED***:
            print("=== Feature %s" % j***REMOVED***
            for fld_name in layer.fields:
                type_name = feature[fld_name***REMOVED***.type_name
                output = fmt % (fld_name, type_name***REMOVED***
                val = feature.get(fld_name***REMOVED***
                if val:
                    if isinstance(val, str***REMOVED***:
                        val_fmt = ' ("%s"***REMOVED***'
                    else:
                        val_fmt = ' (%s***REMOVED***'
                    output += val_fmt % val
                else:
                    output += ' (None***REMOVED***'
                print(output***REMOVED***
