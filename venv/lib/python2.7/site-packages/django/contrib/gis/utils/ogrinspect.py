***REMOVED***
This module is for inspecting OGR data sources and generating either
models for GeoDjango and/or mapping dictionaries for use with the
`LayerMapping` utility.
***REMOVED***
from django.contrib.gis.gdal import DataSource
from django.contrib.gis.gdal.field import (
    OFTDate, OFTDateTime, OFTInteger, OFTInteger64, OFTReal, OFTString,
    OFTTime,
***REMOVED***
from django.utils import six
from django.utils.six.moves import zip


def mapping(data_source, geom_name='geom', layer_key=0, multi_geom=False***REMOVED***:
    ***REMOVED***
    Given a DataSource, generates a dictionary that may be used
    for invoking the LayerMapping utility.

    Keyword Arguments:
     `geom_name` => The name of the geometry field to use for the model.

     `layer_key` => The key for specifying which layer in the DataSource to use;
       defaults to 0 (the first layer***REMOVED***.  May be an integer index or a string
       identifier for the layer.

     `multi_geom` => Boolean (default: False***REMOVED*** - specify as multigeometry.
    ***REMOVED***
    if isinstance(data_source, six.string_types***REMOVED***:
        # Instantiating the DataSource from the string.
        data_source = DataSource(data_source***REMOVED***
    elif isinstance(data_source, DataSource***REMOVED***:
        pass
    else:
        raise TypeError('Data source parameter must be a string or a DataSource object.'***REMOVED***

    # Creating the dictionary.
    _mapping = {***REMOVED***

    # Generating the field name for each field in the layer.
    for field in data_source[layer_key***REMOVED***.fields:
        mfield = field.lower(***REMOVED***
        if mfield[-1:***REMOVED*** == '_':
            mfield += 'field'
        _mapping[mfield***REMOVED*** = field
    gtype = data_source[layer_key***REMOVED***.geom_type
    if multi_geom:
        gtype.to_multi(***REMOVED***
    _mapping[geom_name***REMOVED*** = str(gtype***REMOVED***.upper(***REMOVED***
    return _mapping


def ogrinspect(*args, **kwargs***REMOVED***:
    ***REMOVED***
    Given a data source (either a string or a DataSource object***REMOVED*** and a string
    model name this function will generate a GeoDjango model.

    Usage:

    >>> from django.contrib.gis.utils import ogrinspect
    >>> ogrinspect('/path/to/shapefile.shp','NewModel'***REMOVED***

    ...will print model definition to stout

    or put this in a python script and use to redirect the output to a new
    model like:

    $ python generate_model.py > myapp/models.py

    # generate_model.py
    from django.contrib.gis.utils import ogrinspect
    shp_file = 'data/mapping_hacks/world_borders.shp'
    model_name = 'WorldBorders'

    print(ogrinspect(shp_file, model_name, multi_geom=True, srid=4326,
                     geom_name='shapes', blank=True***REMOVED******REMOVED***

    Required Arguments
     `datasource` => string or DataSource object to file pointer

     `model name` => string of name of new model class to create

    Optional Keyword Arguments
     `geom_name` => For specifying the model name for the Geometry Field.
       Otherwise will default to `geom`

     `layer_key` => The key for specifying which layer in the DataSource to use;
       defaults to 0 (the first layer***REMOVED***.  May be an integer index or a string
       identifier for the layer.

     `srid` => The SRID to use for the Geometry Field.  If it can be determined,
       the SRID of the datasource is used.

     `multi_geom` => Boolean (default: False***REMOVED*** - specify as multigeometry.

     `name_field` => String - specifies a field name to return for the
       `__unicode__`/`__str__` function (which will be generated if specified***REMOVED***.

     `imports` => Boolean (default: True***REMOVED*** - set to False to omit the
       `from django.contrib.gis.db import models` code from the
       autogenerated models thus avoiding duplicated imports when building
       more than one model by batching ogrinspect(***REMOVED***

     `decimal` => Boolean or sequence (default: False***REMOVED***.  When set to True
       all generated model fields corresponding to the `OFTReal` type will
       be `DecimalField` instead of `FloatField`.  A sequence of specific
       field names to generate as `DecimalField` may also be used.

     `blank` => Boolean or sequence (default: False***REMOVED***.  When set to True all
       generated model fields will have `blank=True`.  If the user wants to
       give specific fields to have blank, then a list/tuple of OGR field
       names may be used.

     `null` => Boolean (default: False***REMOVED*** - When set to True all generated
       model fields will have `null=True`.  If the user wants to specify
       give specific fields to have null, then a list/tuple of OGR field
       names may be used.

    Note: This routine calls the _ogrinspect(***REMOVED*** helper to do the heavy lifting.
    ***REMOVED***
    return '\n'.join(s for s in _ogrinspect(*args, **kwargs***REMOVED******REMOVED***


def _ogrinspect(data_source, model_name, geom_name='geom', layer_key=0, srid=None,
                multi_geom=False, name_field=None, imports=True,
                decimal=False, blank=False, null=False***REMOVED***:
    ***REMOVED***
    Helper routine for `ogrinspect` that generates GeoDjango models corresponding
    to the given data source.  See the `ogrinspect` docstring for more details.
    ***REMOVED***
    # Getting the DataSource
    if isinstance(data_source, six.string_types***REMOVED***:
        data_source = DataSource(data_source***REMOVED***
    elif isinstance(data_source, DataSource***REMOVED***:
        pass
    else:
        raise TypeError('Data source parameter must be a string or a DataSource object.'***REMOVED***

    # Getting the layer corresponding to the layer key and getting
    # a string listing of all OGR fields in the Layer.
    layer = data_source[layer_key***REMOVED***
    ogr_fields = layer.fields

    # Creating lists from the `null`, `blank`, and `decimal`
    # keyword arguments.
    def process_kwarg(kwarg***REMOVED***:
        if isinstance(kwarg, (list, tuple***REMOVED******REMOVED***:
            return [s.lower(***REMOVED*** for s in kwarg***REMOVED***
        elif kwarg:
            return [s.lower(***REMOVED*** for s in ogr_fields***REMOVED***
        else:
            return [***REMOVED***
    null_fields = process_kwarg(null***REMOVED***
    blank_fields = process_kwarg(blank***REMOVED***
    decimal_fields = process_kwarg(decimal***REMOVED***

    # Gets the `null` and `blank` keywords for the given field name.
    def get_kwargs_str(field_name***REMOVED***:
        kwlist = [***REMOVED***
        if field_name.lower(***REMOVED*** in null_fields:
            kwlist.append('null=True'***REMOVED***
        if field_name.lower(***REMOVED*** in blank_fields:
            kwlist.append('blank=True'***REMOVED***
        if kwlist:
            return ', ' + ', '.join(kwlist***REMOVED***
        else:
            return ''

    # For those wishing to disable the imports.
    if imports:
        yield '# This is an auto-generated Django model module created by ogrinspect.'
        yield 'from django.contrib.gis.db import models'
        yield ''

    yield 'class %s(models.Model***REMOVED***:' % model_name

    for field_name, width, precision, field_type in zip(
            ogr_fields, layer.field_widths, layer.field_precisions, layer.field_types***REMOVED***:
        # The model field name.
        mfield = field_name.lower(***REMOVED***
        if mfield[-1:***REMOVED*** == '_':
            mfield += 'field'

        # Getting the keyword args string.
        kwargs_str = get_kwargs_str(field_name***REMOVED***

        if field_type is OFTReal:
            # By default OFTReals are mapped to `FloatField`, however, they
            # may also be mapped to `DecimalField` if specified in the
            # `decimal` keyword.
            if field_name.lower(***REMOVED*** in decimal_fields:
                yield '    %s = models.DecimalField(max_digits=%d, decimal_places=%d%s***REMOVED***' % (
                    mfield, width, precision, kwargs_str
                ***REMOVED***
            else:
                yield '    %s = models.FloatField(%s***REMOVED***' % (mfield, kwargs_str[2:***REMOVED******REMOVED***
        elif field_type is OFTInteger:
            yield '    %s = models.IntegerField(%s***REMOVED***' % (mfield, kwargs_str[2:***REMOVED******REMOVED***
        elif field_type is OFTInteger64:
            yield '    %s = models.BigIntegerField(%s***REMOVED***' % (mfield, kwargs_str[2:***REMOVED******REMOVED***
        elif field_type is OFTString:
            yield '    %s = models.CharField(max_length=%s%s***REMOVED***' % (mfield, width, kwargs_str***REMOVED***
        elif field_type is OFTDate:
            yield '    %s = models.DateField(%s***REMOVED***' % (mfield, kwargs_str[2:***REMOVED******REMOVED***
        elif field_type is OFTDateTime:
            yield '    %s = models.DateTimeField(%s***REMOVED***' % (mfield, kwargs_str[2:***REMOVED******REMOVED***
        elif field_type is OFTTime:
            yield '    %s = models.TimeField(%s***REMOVED***' % (mfield, kwargs_str[2:***REMOVED******REMOVED***
        else:
            raise TypeError('Unknown field type %s in %s' % (field_type, mfield***REMOVED******REMOVED***

    # TODO: Autodetection of multigeometry types (see #7218***REMOVED***.
    gtype = layer.geom_type
    if multi_geom:
        gtype.to_multi(***REMOVED***
    geom_field = gtype.django

    # Setting up the SRID keyword string.
    if srid is None:
        if layer.srs is None:
            srid_str = 'srid=-1'
        else:
            srid = layer.srs.srid
            if srid is None:
                srid_str = 'srid=-1'
            elif srid == 4326:
                # WGS84 is already the default.
                srid_str = ''
            else:
                srid_str = 'srid=%s' % srid
    else:
        srid_str = 'srid=%s' % srid

    yield '    %s = models.%s(%s***REMOVED***' % (geom_name, geom_field, srid_str***REMOVED***

    if name_field:
        yield ''
        yield '    def __%s__(self***REMOVED***: return self.%s' % (
            'str' if six.PY3 else 'unicode', name_field***REMOVED***
