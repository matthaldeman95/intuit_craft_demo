import argparse

from django.contrib.gis import gdal
from django.core.management.base import BaseCommand, CommandError
from django.utils.inspect import get_func_args


class LayerOptionAction(argparse.Action***REMOVED***:
    ***REMOVED***
    Custom argparse action for the `ogrinspect` `layer_key` keyword option
    which may be an integer or a string.
    ***REMOVED***
    def __call__(self, parser, namespace, value, option_string=None***REMOVED***:
        ***REMOVED***
            setattr(namespace, self.dest, int(value***REMOVED******REMOVED***
        except ValueError:
            setattr(namespace, self.dest, value***REMOVED***


class ListOptionAction(argparse.Action***REMOVED***:
    ***REMOVED***
    Custom argparse action for `ogrinspect` keywords that require
    a string list. If the string is 'True'/'true' then the option
    value will be a boolean instead.
    ***REMOVED***
    def __call__(self, parser, namespace, value, option_string=None***REMOVED***:
        if value.lower(***REMOVED*** == 'true':
            setattr(namespace, self.dest, True***REMOVED***
        else:
            setattr(namespace, self.dest, value.split(','***REMOVED******REMOVED***


class Command(BaseCommand***REMOVED***:
    help = (
        'Inspects the given OGR-compatible data source (e.g., a shapefile***REMOVED*** and outputs\n'
        'a GeoDjango model with the given model name. For example:\n'
        ' ./manage.py ogrinspect zipcode.shp Zipcode'
    ***REMOVED***

    requires_system_checks = False

    def add_arguments(self, parser***REMOVED***:
        parser.add_argument('data_source', help='Path to the data source.'***REMOVED***
        parser.add_argument('model_name', help='Name of the model to create.'***REMOVED***
        parser.add_argument(
            '--blank', dest='blank',
            action=ListOptionAction, default=False,
            help='Use a comma separated list of OGR field names to add '
                 'the `blank=True` option to the field definition. Set to `true` '
                 'to apply to all applicable fields.',
        ***REMOVED***
        parser.add_argument(
            '--decimal', dest='decimal',
            action=ListOptionAction, default=False,
            help='Use a comma separated list of OGR float fields to '
                 'generate `DecimalField` instead of the default '
                 '`FloatField`. Set to `true` to apply to all OGR float fields.',
        ***REMOVED***
        parser.add_argument(
            '--geom-name', dest='geom_name', default='geom',
            help='Specifies the model name for the Geometry Field (defaults to `geom`***REMOVED***'
        ***REMOVED***
        parser.add_argument(
            '--layer', dest='layer_key',
            action=LayerOptionAction, default=0,
            help='The key for specifying which layer in the OGR data '
                 'source to use. Defaults to 0 (the first layer***REMOVED***. May be '
                 'an integer or a string identifier for the layer.',
        ***REMOVED***
        parser.add_argument(
            '--multi-geom', action='store_true',
            dest='multi_geom', default=False,
            help='Treat the geometry in the data source as a geometry collection.',
        ***REMOVED***
        parser.add_argument(
            '--name-field', dest='name_field',
            help='Specifies a field name to return for the `__unicode__`/`__str__` function.',
        ***REMOVED***
        parser.add_argument(
            '--no-imports', action='store_false', dest='imports', default=True,
            help='Do not include `from django.contrib.gis.db import models` statement.',
        ***REMOVED***
        parser.add_argument(
            '--null', dest='null', action=ListOptionAction, default=False,
            help='Use a comma separated list of OGR field names to add '
                 'the `null=True` option to the field definition. Set to `true` '
                 'to apply to all applicable fields.',
        ***REMOVED***
        parser.add_argument(
            '--srid', dest='srid',
            help='The SRID to use for the Geometry Field. If it can be '
                 'determined, the SRID of the data source is used.',
        ***REMOVED***
        parser.add_argument(
            '--mapping', action='store_true', dest='mapping',
            help='Generate mapping dictionary for use with `LayerMapping`.',
        ***REMOVED***

    def handle(self, *args, **options***REMOVED***:
        data_source, model_name = options.pop('data_source'***REMOVED***, options.pop('model_name'***REMOVED***
        if not gdal.HAS_GDAL:
            raise CommandError('GDAL is required to inspect geospatial data sources.'***REMOVED***

        # Getting the OGR DataSource from the string parameter.
        ***REMOVED***
            ds = gdal.DataSource(data_source***REMOVED***
        except gdal.GDALException as msg:
            raise CommandError(msg***REMOVED***

        # Returning the output of ogrinspect with the given arguments
        # and options.
        from django.contrib.gis.utils.ogrinspect import _ogrinspect, mapping
        # Filter options to params accepted by `_ogrinspect`
        ogr_options = {k: v for k, v in options.items(***REMOVED***
                       if k in get_func_args(_ogrinspect***REMOVED*** and v is not None***REMOVED***
        output = [s for s in _ogrinspect(ds, model_name, **ogr_options***REMOVED******REMOVED***

        if options['mapping'***REMOVED***:
            # Constructing the keyword arguments for `mapping`, and
            # calling it on the data source.
            kwargs = {
                'geom_name': options['geom_name'***REMOVED***,
                'layer_key': options['layer_key'***REMOVED***,
                'multi_geom': options['multi_geom'***REMOVED***,
        ***REMOVED***
            mapping_dict = mapping(ds, **kwargs***REMOVED***
            # This extra legwork is so that the dictionary definition comes
            # out in the same order as the fields in the model definition.
            rev_mapping = {v: k for k, v in mapping_dict.items(***REMOVED******REMOVED***
            output.extend(['', '# Auto-generated `LayerMapping` dictionary for %s model' % model_name,
                           '%s_mapping = {' % model_name.lower(***REMOVED******REMOVED******REMOVED***
            output.extend("    '%s' : '%s'," % (
                rev_mapping[ogr_fld***REMOVED***, ogr_fld***REMOVED*** for ogr_fld in ds[options['layer_key'***REMOVED******REMOVED***.fields
            ***REMOVED***
            output.extend(["    '%s' : '%s'," % (options['geom_name'***REMOVED***, mapping_dict[options['geom_name'***REMOVED******REMOVED******REMOVED***, '***REMOVED***'***REMOVED******REMOVED***
        return '\n'.join(output***REMOVED*** + '\n'
