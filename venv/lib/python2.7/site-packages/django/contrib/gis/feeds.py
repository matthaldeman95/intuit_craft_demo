from __future__ import unicode_literals

from django.contrib.syndication.views import Feed as BaseFeed
from django.utils.feedgenerator import Atom1Feed, Rss201rev2Feed


class GeoFeedMixin(object***REMOVED***:
    ***REMOVED***
    This mixin provides the necessary routines for SyndicationFeed subclasses
    to produce simple GeoRSS or W3C Geo elements.
    ***REMOVED***

    def georss_coords(self, coords***REMOVED***:
        ***REMOVED***
        In GeoRSS coordinate pairs are ordered by lat/lon and separated by
        a single white space.  Given a tuple of coordinates, this will return
        a unicode GeoRSS representation.
        ***REMOVED***
        return ' '.join('%f %f' % (coord[1***REMOVED***, coord[0***REMOVED******REMOVED*** for coord in coords***REMOVED***

    def add_georss_point(self, handler, coords, w3c_geo=False***REMOVED***:
        ***REMOVED***
        Adds a GeoRSS point with the given coords using the given handler.
        Handles the differences between simple GeoRSS and the more popular
        W3C Geo specification.
        ***REMOVED***
        if w3c_geo:
            lon, lat = coords[:2***REMOVED***
            handler.addQuickElement('geo:lat', '%f' % lat***REMOVED***
            handler.addQuickElement('geo:lon', '%f' % lon***REMOVED***
        else:
            handler.addQuickElement('georss:point', self.georss_coords((coords,***REMOVED******REMOVED******REMOVED***

    def add_georss_element(self, handler, item, w3c_geo=False***REMOVED***:
        ***REMOVED***
        This routine adds a GeoRSS XML element using the given item and handler.
        ***REMOVED***
        # Getting the Geometry object.
        geom = item.get('geometry'***REMOVED***
        if geom is not None:
            if isinstance(geom, (list, tuple***REMOVED******REMOVED***:
                # Special case if a tuple/list was passed in.  The tuple may be
                # a point or a box
                box_coords = None
                if isinstance(geom[0***REMOVED***, (list, tuple***REMOVED******REMOVED***:
                    # Box: ( (X0, Y0***REMOVED***, (X1, Y1***REMOVED*** ***REMOVED***
                    if len(geom***REMOVED*** == 2:
                        box_coords = geom
                    else:
                        raise ValueError('Only should be two sets of coordinates.'***REMOVED***
                else:
                    if len(geom***REMOVED*** == 2:
                        # Point: (X, Y***REMOVED***
                        self.add_georss_point(handler, geom, w3c_geo=w3c_geo***REMOVED***
                    elif len(geom***REMOVED*** == 4:
                        # Box: (X0, Y0, X1, Y1***REMOVED***
                        box_coords = (geom[:2***REMOVED***, geom[2:***REMOVED******REMOVED***
                    else:
                        raise ValueError('Only should be 2 or 4 numeric elements.'***REMOVED***
                # If a GeoRSS box was given via tuple.
                if box_coords is not None:
                    if w3c_geo:
                        raise ValueError('Cannot use simple GeoRSS box in W3C Geo feeds.'***REMOVED***
                    handler.addQuickElement('georss:box', self.georss_coords(box_coords***REMOVED******REMOVED***
            else:
                # Getting the lower-case geometry type.
                gtype = str(geom.geom_type***REMOVED***.lower(***REMOVED***
                if gtype == 'point':
                    self.add_georss_point(handler, geom.coords, w3c_geo=w3c_geo***REMOVED***
                else:
                    if w3c_geo:
                        raise ValueError('W3C Geo only supports Point geometries.'***REMOVED***
                    # For formatting consistent w/the GeoRSS simple standard:
                    # http://georss.org/1.0#simple
                    if gtype in ('linestring', 'linearring'***REMOVED***:
                        handler.addQuickElement('georss:line', self.georss_coords(geom.coords***REMOVED******REMOVED***
                    elif gtype in ('polygon',***REMOVED***:
                        # Only support the exterior ring.
                        handler.addQuickElement('georss:polygon', self.georss_coords(geom[0***REMOVED***.coords***REMOVED******REMOVED***
                    else:
                        raise ValueError('Geometry type "%s" not supported.' % geom.geom_type***REMOVED***


# ### SyndicationFeed subclasses ###
class GeoRSSFeed(Rss201rev2Feed, GeoFeedMixin***REMOVED***:
    def rss_attributes(self***REMOVED***:
        attrs = super(GeoRSSFeed, self***REMOVED***.rss_attributes(***REMOVED***
        attrs['xmlns:georss'***REMOVED*** = 'http://www.georss.org/georss'
        return attrs

    def add_item_elements(self, handler, item***REMOVED***:
        super(GeoRSSFeed, self***REMOVED***.add_item_elements(handler, item***REMOVED***
        self.add_georss_element(handler, item***REMOVED***

    def add_root_elements(self, handler***REMOVED***:
        super(GeoRSSFeed, self***REMOVED***.add_root_elements(handler***REMOVED***
        self.add_georss_element(handler, self.feed***REMOVED***


class GeoAtom1Feed(Atom1Feed, GeoFeedMixin***REMOVED***:
    def root_attributes(self***REMOVED***:
        attrs = super(GeoAtom1Feed, self***REMOVED***.root_attributes(***REMOVED***
        attrs['xmlns:georss'***REMOVED*** = 'http://www.georss.org/georss'
        return attrs

    def add_item_elements(self, handler, item***REMOVED***:
        super(GeoAtom1Feed, self***REMOVED***.add_item_elements(handler, item***REMOVED***
        self.add_georss_element(handler, item***REMOVED***

    def add_root_elements(self, handler***REMOVED***:
        super(GeoAtom1Feed, self***REMOVED***.add_root_elements(handler***REMOVED***
        self.add_georss_element(handler, self.feed***REMOVED***


class W3CGeoFeed(Rss201rev2Feed, GeoFeedMixin***REMOVED***:
    def rss_attributes(self***REMOVED***:
        attrs = super(W3CGeoFeed, self***REMOVED***.rss_attributes(***REMOVED***
        attrs['xmlns:geo'***REMOVED*** = 'http://www.w3.org/2003/01/geo/wgs84_pos#'
        return attrs

    def add_item_elements(self, handler, item***REMOVED***:
        super(W3CGeoFeed, self***REMOVED***.add_item_elements(handler, item***REMOVED***
        self.add_georss_element(handler, item, w3c_geo=True***REMOVED***

    def add_root_elements(self, handler***REMOVED***:
        super(W3CGeoFeed, self***REMOVED***.add_root_elements(handler***REMOVED***
        self.add_georss_element(handler, self.feed, w3c_geo=True***REMOVED***


# ### Feed subclass ###
class Feed(BaseFeed***REMOVED***:
    ***REMOVED***
    This is a subclass of the `Feed` from `django.contrib.syndication`.
    This allows users to define a `geometry(obj***REMOVED***` and/or `item_geometry(item***REMOVED***`
    methods on their own subclasses so that geo-referenced information may
    placed in the feed.
    ***REMOVED***
    feed_type = GeoRSSFeed

    def feed_extra_kwargs(self, obj***REMOVED***:
        return {'geometry': self._get_dynamic_attr('geometry', obj***REMOVED******REMOVED***

    def item_extra_kwargs(self, item***REMOVED***:
        return {'geometry': self._get_dynamic_attr('item_geometry', item***REMOVED******REMOVED***
