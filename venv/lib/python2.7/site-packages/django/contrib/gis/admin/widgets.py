import logging

from django.contrib.gis.gdal import GDALException
from django.contrib.gis.geos import GEOSException, GEOSGeometry
from django.forms.widgets import Textarea
from django.template import loader
from django.utils import six, translation

# Creating a template context that contains Django settings
# values needed by admin map templates.
geo_context = {'LANGUAGE_BIDI': translation.get_language_bidi(***REMOVED******REMOVED***
logger = logging.getLogger('django.contrib.gis'***REMOVED***


class OpenLayersWidget(Textarea***REMOVED***:
    ***REMOVED***
    Renders an OpenLayers map using the WKT of the geometry.
    ***REMOVED***
    def render(self, name, value, attrs=None***REMOVED***:
        # Update the template parameters with any attributes passed in.
        if attrs:
            self.params.update(attrs***REMOVED***
            self.params['editable'***REMOVED*** = self.params['modifiable'***REMOVED***
        else:
            self.params['editable'***REMOVED*** = True

        # Defaulting the WKT value to a blank string -- this
        # will be tested in the JavaScript and the appropriate
        # interface will be constructed.
        self.params['wkt'***REMOVED*** = ''

        # If a string reaches here (via a validation error on another
        # field***REMOVED*** then just reconstruct the Geometry.
        if isinstance(value, six.string_types***REMOVED***:
            ***REMOVED***
                value = GEOSGeometry(value***REMOVED***
            except (GEOSException, ValueError***REMOVED*** as err:
                logger.error("Error creating geometry from value '%s' (%s***REMOVED***", value, err***REMOVED***
                value = None

        if (value and value.geom_type.upper(***REMOVED*** != self.geom_type and
                self.geom_type != 'GEOMETRY'***REMOVED***:
            value = None

        # Constructing the dictionary of the map options.
        self.params['map_options'***REMOVED*** = self.map_options(***REMOVED***

        # Constructing the JavaScript module name using the name of
        # the GeometryField (passed in via the `attrs` keyword***REMOVED***.
        # Use the 'name' attr for the field name (rather than 'field'***REMOVED***
        self.params['name'***REMOVED*** = name
        # note: we must switch out dashes for underscores since js
        # functions are created using the module variable
        js_safe_name = self.params['name'***REMOVED***.replace('-', '_'***REMOVED***
        self.params['module'***REMOVED*** = 'geodjango_%s' % js_safe_name

        if value:
            # Transforming the geometry to the projection used on the
            # OpenLayers map.
            srid = self.params['srid'***REMOVED***
            if value.srid != srid:
                ***REMOVED***
                    ogr = value.ogr
                    ogr.transform(srid***REMOVED***
                    wkt = ogr.wkt
                except GDALException as err:
                    logger.error(
                        "Error transforming geometry from srid '%s' to srid '%s' (%s***REMOVED***",
                        value.srid, srid, err
                    ***REMOVED***
                    wkt = ''
            else:
                wkt = value.wkt

            # Setting the parameter WKT with that of the transformed
            # geometry.
            self.params['wkt'***REMOVED*** = wkt

        self.params.update(geo_context***REMOVED***
        return loader.render_to_string(self.template, self.params***REMOVED***

    def map_options(self***REMOVED***:
        "Builds the map options hash for the OpenLayers template."

        # JavaScript construction utilities for the Bounds and Projection.
        def ol_bounds(extent***REMOVED***:
            return 'new OpenLayers.Bounds(%s***REMOVED***' % str(extent***REMOVED***

        def ol_projection(srid***REMOVED***:
            return 'new OpenLayers.Projection("EPSG:%s"***REMOVED***' % srid

        # An array of the parameter name, the name of their OpenLayers
        # counterpart, and the type of variable they are.
        map_types = [('srid', 'projection', 'srid'***REMOVED***,
                     ('display_srid', 'displayProjection', 'srid'***REMOVED***,
                     ('units', 'units', str***REMOVED***,
                     ('max_resolution', 'maxResolution', float***REMOVED***,
                     ('max_extent', 'maxExtent', 'bounds'***REMOVED***,
                     ('num_zoom', 'numZoomLevels', int***REMOVED***,
                     ('max_zoom', 'maxZoomLevels', int***REMOVED***,
                     ('min_zoom', 'minZoomLevel', int***REMOVED***,
                     ***REMOVED***

        # Building the map options hash.
        map_options = {***REMOVED***
        for param_name, js_name, option_type in map_types:
            if self.params.get(param_name, False***REMOVED***:
                if option_type == 'srid':
                    value = ol_projection(self.params[param_name***REMOVED******REMOVED***
                elif option_type == 'bounds':
                    value = ol_bounds(self.params[param_name***REMOVED******REMOVED***
                elif option_type in (float, int***REMOVED***:
                    value = self.params[param_name***REMOVED***
                elif option_type in (str,***REMOVED***:
                    value = '"%s"' % self.params[param_name***REMOVED***
                else:
                    raise TypeError
                map_options[js_name***REMOVED*** = value
        return map_options
