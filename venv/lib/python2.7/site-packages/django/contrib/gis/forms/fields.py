from __future__ import unicode_literals

from django import forms
from django.contrib.gis.geos import GEOSException, GEOSGeometry
from django.utils.translation import ugettext_lazy as _

from .widgets import OpenLayersWidget


class GeometryField(forms.Field***REMOVED***:
    ***REMOVED***
    This is the basic form field for a Geometry.  Any textual input that is
    accepted by GEOSGeometry is accepted by this form.  By default,
    this includes WKT, HEXEWKB, WKB (in a buffer***REMOVED***, and GeoJSON.
    ***REMOVED***
    widget = OpenLayersWidget
    geom_type = 'GEOMETRY'

    default_error_messages = {
        'required': _('No geometry value provided.'***REMOVED***,
        'invalid_geom': _('Invalid geometry value.'***REMOVED***,
        'invalid_geom_type': _('Invalid geometry type.'***REMOVED***,
        'transform_error': _('An error occurred when transforming the geometry '
                             'to the SRID of the geometry form field.'***REMOVED***,
***REMOVED***

    def __init__(self, **kwargs***REMOVED***:
        # Pop out attributes from the database field, or use sensible
        # defaults (e.g., allow None***REMOVED***.
        self.srid = kwargs.pop('srid', None***REMOVED***
        self.geom_type = kwargs.pop('geom_type', self.geom_type***REMOVED***
        super(GeometryField, self***REMOVED***.__init__(**kwargs***REMOVED***
        self.widget.attrs['geom_type'***REMOVED*** = self.geom_type

    def to_python(self, value***REMOVED***:
        ***REMOVED***
        Transforms the value to a Geometry object.
        ***REMOVED***
        if value in self.empty_values:
            return None

        if not isinstance(value, GEOSGeometry***REMOVED***:
            ***REMOVED***
                value = GEOSGeometry(value***REMOVED***
            except (GEOSException, ValueError, TypeError***REMOVED***:
                raise forms.ValidationError(self.error_messages['invalid_geom'***REMOVED***, code='invalid_geom'***REMOVED***

        # Try to set the srid
        if not value.srid:
            ***REMOVED***
                value.srid = self.widget.map_srid
            except AttributeError:
                if self.srid:
                    value.srid = self.srid
        return value

    def clean(self, value***REMOVED***:
        ***REMOVED***
        Validates that the input value can be converted to a Geometry
        object (which is returned***REMOVED***.  A ValidationError is raised if
        the value cannot be instantiated as a Geometry.
        ***REMOVED***
        geom = super(GeometryField, self***REMOVED***.clean(value***REMOVED***
        if geom is None:
            return geom

        # Ensuring that the geometry is of the correct type (indicated
        # using the OGC string label***REMOVED***.
        if str(geom.geom_type***REMOVED***.upper(***REMOVED*** != self.geom_type and not self.geom_type == 'GEOMETRY':
            raise forms.ValidationError(self.error_messages['invalid_geom_type'***REMOVED***, code='invalid_geom_type'***REMOVED***

        # Transforming the geometry if the SRID was set.
        if self.srid and self.srid != -1 and self.srid != geom.srid:
            ***REMOVED***
                geom.transform(self.srid***REMOVED***
            except GEOSException:
                raise forms.ValidationError(
                    self.error_messages['transform_error'***REMOVED***, code='transform_error'***REMOVED***

        return geom

    def has_changed(self, initial, data***REMOVED***:
        ***REMOVED*** Compare geographic value of data with its initial value. ***REMOVED***

        ***REMOVED***
            data = self.to_python(data***REMOVED***
            initial = self.to_python(initial***REMOVED***
        except forms.ValidationError:
            return True

        # Only do a geographic comparison if both values are available
        if initial and data:
            data.transform(initial.srid***REMOVED***
            # If the initial value was not added by the browser, the geometry
            # provided may be slightly different, the first time it is saved.
            # The comparison is done with a very low tolerance.
            return not initial.equals_exact(data, tolerance=0.000001***REMOVED***
        else:
            # Check for change of state of existence
            return bool(initial***REMOVED*** != bool(data***REMOVED***


class GeometryCollectionField(GeometryField***REMOVED***:
    geom_type = 'GEOMETRYCOLLECTION'


class PointField(GeometryField***REMOVED***:
    geom_type = 'POINT'


class MultiPointField(GeometryField***REMOVED***:
    geom_type = 'MULTIPOINT'


class LineStringField(GeometryField***REMOVED***:
    geom_type = 'LINESTRING'


class MultiLineStringField(GeometryField***REMOVED***:
    geom_type = 'MULTILINESTRING'


class PolygonField(GeometryField***REMOVED***:
    geom_type = 'POLYGON'


class MultiPolygonField(GeometryField***REMOVED***:
    geom_type = 'MULTIPOLYGON'
