/*global OpenLayers*/
(function(***REMOVED*** {
    'use strict';
    /**
     * Transforms an array of features to a single feature with the merged
     * geometry of geom_type
     */
    OpenLayers.Util.properFeatures = function(features, geom_type***REMOVED*** {
        if (features.constructor === Array***REMOVED*** {
            var geoms = [***REMOVED***;
            for (var i = 0; i < features.length; i++***REMOVED*** {
                geoms.push(features[i***REMOVED***.geometry***REMOVED***;
        ***REMOVED***
            var geom = new geom_type(geoms***REMOVED***;
            features = new OpenLayers.Feature.Vector(geom***REMOVED***;
    ***REMOVED***
        return features;
***REMOVED***;

    /**
     * @requires OpenLayers/Format/WKT.js
     */

    /**
     * Class: OpenLayers.Format.DjangoWKT
     * Class for reading Well-Known Text, with workarounds to successfully parse
     * geometries and collections as returned by django.contrib.gis.geos.
     *
     * Inherits from:
     *  - <OpenLayers.Format.WKT>
     */

    OpenLayers.Format.DjangoWKT = OpenLayers.Class(OpenLayers.Format.WKT, {
        initialize: function(options***REMOVED*** {
            OpenLayers.Format.WKT.prototype.initialize.apply(this, [options***REMOVED******REMOVED***;
            this.regExes.justComma = /\s*,\s*/;
***REMOVED***

        parse: {
            'point': function(str***REMOVED*** {
                var coords = OpenLayers.String.trim(str***REMOVED***.split(this.regExes.spaces***REMOVED***;
                return new OpenLayers.Feature.Vector(
                    new OpenLayers.Geometry.Point(coords[0***REMOVED***, coords[1***REMOVED******REMOVED***
                ***REMOVED***;
    ***REMOVED***

            'multipoint': function(str***REMOVED*** {
                var point;
                var points = OpenLayers.String.trim(str***REMOVED***.split(this.regExes.justComma***REMOVED***;
                var components = [***REMOVED***;
                for(var i = 0, len = points.length; i < len; ++i***REMOVED*** {
                    point = points[i***REMOVED***.replace(this.regExes.trimParens, '$1'***REMOVED***;
                    components.push(this.parse.point.apply(this, [point***REMOVED******REMOVED***.geometry***REMOVED***;
            ***REMOVED***
                return new OpenLayers.Feature.Vector(
                    new OpenLayers.Geometry.MultiPoint(components***REMOVED***
                ***REMOVED***;
    ***REMOVED***

            'linestring': function(str***REMOVED*** {
                var points = OpenLayers.String.trim(str***REMOVED***.split(','***REMOVED***;
                var components = [***REMOVED***;
                for(var i = 0, len = points.length; i < len; ++i***REMOVED*** {
                    components.push(this.parse.point.apply(this, [points[i***REMOVED******REMOVED******REMOVED***.geometry***REMOVED***;
            ***REMOVED***
                return new OpenLayers.Feature.Vector(
                    new OpenLayers.Geometry.LineString(components***REMOVED***
                ***REMOVED***;
    ***REMOVED***

            'multilinestring': function(str***REMOVED*** {
                var line;
                var lines = OpenLayers.String.trim(str***REMOVED***.split(this.regExes.parenComma***REMOVED***;
                var components = [***REMOVED***;
                for(var i = 0, len = lines.length; i < len; ++i***REMOVED*** {
                    line = lines[i***REMOVED***.replace(this.regExes.trimParens, '$1'***REMOVED***;
                    components.push(this.parse.linestring.apply(this, [line***REMOVED******REMOVED***.geometry***REMOVED***;
            ***REMOVED***
                return new OpenLayers.Feature.Vector(
                    new OpenLayers.Geometry.MultiLineString(components***REMOVED***
                ***REMOVED***;
    ***REMOVED***

            'polygon': function(str***REMOVED*** {
                var ring, linestring, linearring;
                var rings = OpenLayers.String.trim(str***REMOVED***.split(this.regExes.parenComma***REMOVED***;
                var components = [***REMOVED***;
                for(var i = 0, len = rings.length; i < len; ++i***REMOVED*** {
                    ring = rings[i***REMOVED***.replace(this.regExes.trimParens, '$1'***REMOVED***;
                    linestring = this.parse.linestring.apply(this, [ring***REMOVED******REMOVED***.geometry;
                    linearring = new OpenLayers.Geometry.LinearRing(linestring.components***REMOVED***;
                    components.push(linearring***REMOVED***;
            ***REMOVED***
                return new OpenLayers.Feature.Vector(
                    new OpenLayers.Geometry.Polygon(components***REMOVED***
                ***REMOVED***;
    ***REMOVED***

            'multipolygon': function(str***REMOVED*** {
                var polygon;
                var polygons = OpenLayers.String.trim(str***REMOVED***.split(this.regExes.doubleParenComma***REMOVED***;
                var components = [***REMOVED***;
                for(var i = 0, len = polygons.length; i < len; ++i***REMOVED*** {
                    polygon = polygons[i***REMOVED***.replace(this.regExes.trimParens, '$1'***REMOVED***;
                    components.push(this.parse.polygon.apply(this, [polygon***REMOVED******REMOVED***.geometry***REMOVED***;
            ***REMOVED***
                return new OpenLayers.Feature.Vector(
                    new OpenLayers.Geometry.MultiPolygon(components***REMOVED***
                ***REMOVED***;
    ***REMOVED***

            'geometrycollection': function(str***REMOVED*** {
                // separate components of the collection with |
                str = str.replace(/,\s*([A-Za-z***REMOVED******REMOVED***/g, '|$1'***REMOVED***;
                var wktArray = OpenLayers.String.trim(str***REMOVED***.split('|'***REMOVED***;
                var components = [***REMOVED***;
                for(var i = 0, len = wktArray.length; i < len; ++i***REMOVED*** {
                    components.push(OpenLayers.Format.WKT.prototype.read.apply(this, [wktArray[i***REMOVED******REMOVED******REMOVED******REMOVED***;
            ***REMOVED***
                return components;
        ***REMOVED***
***REMOVED***

        extractGeome***REMOVED*** function(geometry***REMOVED*** {
            var type = geometry.CLASS_NAME.split('.'***REMOVED***[2***REMOVED***.toLowerCase(***REMOVED***;
            if (!this.extract[type***REMOVED******REMOVED*** {
                return null;
        ***REMOVED***
            if (this.internalProjection && this.externalProjection***REMOVED*** {
                geometry = geometry.clone(***REMOVED***;
                geometry.transform(this.internalProjection, this.externalProjection***REMOVED***;
        ***REMOVED***
            var wktType = type === 'collection' ? 'GEOMETRYCOLLECTION' : type.toUpperCase(***REMOVED***;
            var data = wktType + '(' + this.extract[type***REMOVED***.apply(this, [geometry***REMOVED******REMOVED*** + '***REMOVED***';
            return data;
***REMOVED***

        /**
         * Patched write: successfully writes WKT for geometries and
         * geometrycollections.
         */
        write: function(features***REMOVED*** {
            var collection, isCollection;
            isCollection = features.geometry.CLASS_NAME === "OpenLayers.Geometry.Collection";
            var pieces = [***REMOVED***;
            if (isCollection***REMOVED*** {
                collection = features.geometry.components;
                pieces.push('GEOMETRYCOLLECTION('***REMOVED***;
                for (var i = 0, len = collection.length; i < len; ++i***REMOVED*** {
                    if (i > 0***REMOVED*** {
                        pieces.push(','***REMOVED***;
                ***REMOVED***
                    pieces.push(this.extractGeometry(collection[i***REMOVED******REMOVED******REMOVED***;
            ***REMOVED***
                pieces.push('***REMOVED***'***REMOVED***;
        ***REMOVED*** else {
                pieces.push(this.extractGeometry(features.geometry***REMOVED******REMOVED***;
        ***REMOVED***
            return pieces.join(''***REMOVED***;
***REMOVED***

        CLASS_NAME: "OpenLayers.Format.DjangoWKT"
***REMOVED******REMOVED***;

    function MapWidget(options***REMOVED*** {
        this.map = null;
        this.controls = null;
        this.panel = null;
        this.layers = {***REMOVED***;
        this.wkt_f = new OpenLayers.Format.DjangoWKT(***REMOVED***;

        // Mapping from OGRGeomType name to OpenLayers.Geometry name
        if (options.geom_name === 'Unknown'***REMOVED*** {
            options.geom_type = OpenLayers.Geometry;
    ***REMOVED*** else if (options.geom_name === 'GeometryCollection'***REMOVED*** {
            options.geom_type = OpenLayers.Geometry.Collection;
    ***REMOVED*** else {
            options.geom_type = OpenLayers.Geometry[options.geom_name***REMOVED***;
    ***REMOVED***

        // Default options
        this.options = {
            color: 'ee9900',
            default_lat: 0,
            default_lon: 0,
            default_zoom: 4,
            is_collection: options.geom_name.indexOf('Multi'***REMOVED*** > -1 || options.geom_name.indexOf('Collection'***REMOVED*** > -1,
            layerswitcher: false,
            map_options: {***REMOVED***,
            map_srid: 4326,
            modifiable: true,
            mouse_position: false,
            opacity: 0.4,
            point_zoom: 12,
            scale_text: false,
            scrollable: true
    ***REMOVED***;

        // Altering using user-provided options
        for (var property in options***REMOVED*** {
            if (options.hasOwnProperty(property***REMOVED******REMOVED*** {
                this.options[property***REMOVED*** = options[property***REMOVED***;
        ***REMOVED***
    ***REMOVED***

        this.map = this.create_map(***REMOVED***;

        var defaults_style = {
            'fillColor': '#' + this.options.color,
            'fillOpacity': this.options.opacity,
            'strokeColor': '#' + this.options.color
    ***REMOVED***;
        if (this.options.geom_name === 'LineString'***REMOVED*** {
            defaults_style.strokeWidth = 3;
    ***REMOVED***
        var styleMap = new OpenLayers.StyleMap({'default': OpenLayers.Util.applyDefaults(defaults_style, OpenLayers.Feature.Vector.style.default***REMOVED******REMOVED******REMOVED***;
        this.layers.vector = new OpenLayers.Layer.Vector(" " + this.options.name, {styleMap: styleMap***REMOVED******REMOVED***;
        this.map.addLayer(this.layers.vector***REMOVED***;
        var wkt = document.getElementById(this.options.id***REMOVED***.value;
        if (wkt***REMOVED*** {
            var feat = OpenLayers.Util.properFeatures(this.read_wkt(wkt***REMOVED***, this.options.geom_type***REMOVED***;
            this.write_wkt(feat***REMOVED***;
            if (this.options.is_collection***REMOVED*** {
                for (var i = 0; i < this.num_geom; i++***REMOVED*** {
                    this.layers.vector.addFeatures([new OpenLayers.Feature.Vector(feat.geometry.components[i***REMOVED***.clone(***REMOVED******REMOVED******REMOVED******REMOVED***;
            ***REMOVED***
        ***REMOVED*** else {
                this.layers.vector.addFeatures([feat***REMOVED******REMOVED***;
        ***REMOVED***
            this.map.zoomToExtent(feat.geometry.getBounds(***REMOVED******REMOVED***;
            if (this.options.geom_name === 'Point'***REMOVED*** {
                this.map.zoomTo(this.options.point_zoom***REMOVED***;
        ***REMOVED***
    ***REMOVED*** else {
            this.map.setCenter(this.defaultCenter(***REMOVED***, this.options.default_zoom***REMOVED***;
    ***REMOVED***
        this.layers.vector.events.on({'featuremodified': this.modify_wkt, scope: this***REMOVED******REMOVED***;
        this.layers.vector.events.on({'featureadded': this.add_wkt, scope: this***REMOVED******REMOVED***;

        this.getControls(this.layers.vector***REMOVED***;
        this.panel.addControls(this.controls***REMOVED***;
        this.map.addControl(this.panel***REMOVED***;
        this.addSelectControl(***REMOVED***;

        if (this.options.mouse_position***REMOVED*** {
            this.map.addControl(new OpenLayers.Control.MousePosition(***REMOVED******REMOVED***;
    ***REMOVED***
        if (this.options.scale_text***REMOVED*** {
            this.map.addControl(new OpenLayers.Control.Scale(***REMOVED******REMOVED***;
    ***REMOVED***
        if (this.options.layerswitcher***REMOVED*** {
            this.map.addControl(new OpenLayers.Control.LayerSwitcher(***REMOVED******REMOVED***;
    ***REMOVED***
        if (!this.options.scrollable***REMOVED*** {
            this.map.getControlsByClass('OpenLayers.Control.Navigation'***REMOVED***[0***REMOVED***.disableZoomWheel(***REMOVED***;
    ***REMOVED***
        if (wkt***REMOVED*** {
            if (this.options.modifiable***REMOVED*** {
                this.enableEditing(***REMOVED***;
        ***REMOVED***
    ***REMOVED*** else {
            this.enableDrawing(***REMOVED***;
    ***REMOVED***
***REMOVED***

    MapWidget.prototype.create_map = function(***REMOVED*** {
        var map = new OpenLayers.Map(this.options.map_id, this.options.map_options***REMOVED***;
        if (this.options.base_layer***REMOVED*** {
            this.layers.base = this.options.base_layer;
    ***REMOVED*** else {
            this.layers.base = new OpenLayers.Layer.WMS('OpenLayers WMS', 'http://vmap0.tiles.osgeo.org/wms/vmap0', {layers: 'basic'***REMOVED******REMOVED***;
    ***REMOVED***
        map.addLayer(this.layers.base***REMOVED***;
        return map;
***REMOVED***;

    MapWidget.prototype.get_ewkt = function(feat***REMOVED*** {
        return "SRID=" + this.options.map_srid + ";" + this.wkt_f.write(feat***REMOVED***;
***REMOVED***;

    MapWidget.prototype.read_wkt = function(wkt***REMOVED*** {
        var prefix = 'SRID=' + this.options.map_srid + ';';
        if (wkt.indexOf(prefix***REMOVED*** === 0***REMOVED*** {
            wkt = wkt.slice(prefix.length***REMOVED***;
    ***REMOVED***
        return this.wkt_f.read(wkt***REMOVED***;
***REMOVED***;

    MapWidget.prototype.write_wkt = function(feat***REMOVED*** {
        feat = OpenLayers.Util.properFeatures(feat, this.options.geom_type***REMOVED***;
        if (this.options.is_collection***REMOVED*** {
            this.num_geom = feat.geometry.components.length;
    ***REMOVED*** else {
            this.num_geom = 1;
    ***REMOVED***
        document.getElementById(this.options.id***REMOVED***.value = this.get_ewkt(feat***REMOVED***;
***REMOVED***;

    MapWidget.prototype.add_wkt = function(event***REMOVED*** {
        if (this.options.is_collection***REMOVED*** {
            var feat = new OpenLayers.Feature.Vector(new this.options.geom_type(***REMOVED******REMOVED***;
            for (var i = 0; i < this.layers.vector.features.length; i++***REMOVED*** {
                feat.geometry.addComponents([this.layers.vector.features[i***REMOVED***.geometry***REMOVED******REMOVED***;
        ***REMOVED***
            this.write_wkt(feat***REMOVED***;
    ***REMOVED*** else {
            if (this.layers.vector.features.length > 1***REMOVED*** {
                var old_feats = [this.layers.vector.features[0***REMOVED******REMOVED***;
                this.layers.vector.removeFeatures(old_feats***REMOVED***;
                this.layers.vector.destroyFeatures(old_feats***REMOVED***;
        ***REMOVED***
            this.write_wkt(event.feature***REMOVED***;
    ***REMOVED***
***REMOVED***;

    MapWidget.prototype.modify_wkt = function(event***REMOVED*** {
        if (this.options.is_collection***REMOVED*** {
            if (this.options.geom_name === 'MultiPoint'***REMOVED*** {
                this.add_wkt(event***REMOVED***;
                return;
        ***REMOVED*** else {
                var feat = new OpenLayers.Feature.Vector(new this.options.geom_type(***REMOVED******REMOVED***;
                for (var i = 0; i < this.num_geom; i++***REMOVED*** {
                    feat.geometry.addComponents([this.layers.vector.features[i***REMOVED***.geometry***REMOVED******REMOVED***;
            ***REMOVED***
                this.write_wkt(feat***REMOVED***;
        ***REMOVED***
    ***REMOVED*** else {
            this.write_wkt(event.feature***REMOVED***;
    ***REMOVED***
***REMOVED***;

    MapWidget.prototype.deleteFeatures = function(***REMOVED*** {
        this.layers.vector.removeFeatures(this.layers.vector.features***REMOVED***;
        this.layers.vector.destroyFeatures(***REMOVED***;
***REMOVED***;

    MapWidget.prototype.clearFeatures = function(***REMOVED*** {
        this.deleteFeatures(***REMOVED***;
        document.getElementById(this.options.id***REMOVED***.value = '';
        this.map.setCenter(this.defaultCenter(***REMOVED***, this.options.default_zoom***REMOVED***;
***REMOVED***;

    MapWidget.prototype.defaultCenter = function(***REMOVED*** {
        var center = new OpenLayers.LonLat(this.options.default_lon, this.options.default_lat***REMOVED***;
        if (this.options.map_srid***REMOVED*** {
            return center.transform(new OpenLayers.Projection("EPSG:4326"***REMOVED***, this.map.getProjectionObject(***REMOVED******REMOVED***;
    ***REMOVED***
        return center;
***REMOVED***;

    MapWidget.prototype.addSelectControl = function(***REMOVED*** {
        var select = new OpenLayers.Control.SelectFeature(this.layers.vector, {'toggle': true, 'clickout': true***REMOVED******REMOVED***;
        this.map.addControl(select***REMOVED***;
        select.activate(***REMOVED***;
***REMOVED***;

    MapWidget.prototype.enableDrawing = function(***REMOVED*** {
        this.map.getControlsByClass('OpenLayers.Control.DrawFeature'***REMOVED***[0***REMOVED***.activate(***REMOVED***;
***REMOVED***;

    MapWidget.prototype.enableEditing = function(***REMOVED*** {
        this.map.getControlsByClass('OpenLayers.Control.ModifyFeature'***REMOVED***[0***REMOVED***.activate(***REMOVED***;
***REMOVED***;

    MapWidget.prototype.getControls = function(layer***REMOVED*** {
        this.panel = new OpenLayers.Control.Panel({'displayClass': 'olControlEditingToolbar'***REMOVED******REMOVED***;
        this.controls = [new OpenLayers.Control.Navigation(***REMOVED******REMOVED***;
        if (!this.options.modifiable && layer.features.length***REMOVED*** {
            return;
    ***REMOVED***
        if (this.options.geom_name.indexOf('LineString'***REMOVED*** >= 0 || this.options.geom_name === 'GeometryCollection' || this.options.geom_name === 'Unknown'***REMOVED*** {
            this.controls.push(new OpenLayers.Control.DrawFeature(layer, OpenLayers.Handler.Path, {'displayClass': 'olControlDrawFeaturePath'***REMOVED******REMOVED******REMOVED***;
    ***REMOVED***
        if (this.options.geom_name.indexOf('Polygon'***REMOVED*** >= 0 || this.options.geom_name === 'GeometryCollection' || this.options.geom_name === 'Unknown'***REMOVED*** {
            this.controls.push(new OpenLayers.Control.DrawFeature(layer, OpenLayers.Handler.Polygon, {'displayClass': 'olControlDrawFeaturePolygon'***REMOVED******REMOVED******REMOVED***;
    ***REMOVED***
        if (this.options.geom_name.indexOf('Point'***REMOVED*** >= 0 || this.options.geom_name === 'GeometryCollection' || this.options.geom_name === 'Unknown'***REMOVED*** {
            this.controls.push(new OpenLayers.Control.DrawFeature(layer, OpenLayers.Handler.Point, {'displayClass': 'olControlDrawFeaturePoint'***REMOVED******REMOVED******REMOVED***;
    ***REMOVED***
        if (this.options.modifiable***REMOVED*** {
            this.controls.push(new OpenLayers.Control.ModifyFeature(layer, {'displayClass': 'olControlModifyFeature'***REMOVED******REMOVED******REMOVED***;
    ***REMOVED***
***REMOVED***;
    window.MapWidget = MapWidget;
***REMOVED******REMOVED***(***REMOVED***;
