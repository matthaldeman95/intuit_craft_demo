from django.db.backends.sqlite3.schema import DatabaseSchemaEditor
from django.db.utils import DatabaseError


class SpatialiteSchemaEditor(DatabaseSchemaEditor***REMOVED***:
    sql_add_geometry_column = (
        "SELECT AddGeometryColumn(%(table***REMOVED***s, %(column***REMOVED***s, %(srid***REMOVED***s, "
        "%(geom_type***REMOVED***s, %(dim***REMOVED***s, %(null***REMOVED***s***REMOVED***"
    ***REMOVED***
    sql_add_spatial_index = "SELECT CreateSpatialIndex(%(table***REMOVED***s, %(column***REMOVED***s***REMOVED***"
    sql_drop_spatial_index = "DROP TABLE idx_%(table***REMOVED***s_%(column***REMOVED***s"
    sql_remove_geometry_metadata = "SELECT DiscardGeometryColumn(%(table***REMOVED***s, %(column***REMOVED***s***REMOVED***"
    sql_discard_geometry_columns = "DELETE FROM %(geom_table***REMOVED***s WHERE f_table_name = %(table***REMOVED***s"
    sql_update_geometry_columns = (
        "UPDATE %(geom_table***REMOVED***s SET f_table_name = %(new_table***REMOVED***s "
        "WHERE f_table_name = %(old_table***REMOVED***s"
    ***REMOVED***

    geometry_tables = [
        "geometry_columns",
        "geometry_columns_auth",
        "geometry_columns_time",
        "geometry_columns_statistics",
    ***REMOVED***

    def __init__(self, *args, **kwargs***REMOVED***:
        super(SpatialiteSchemaEditor, self***REMOVED***.__init__(*args, **kwargs***REMOVED***
        self.geometry_sql = [***REMOVED***

    def geo_quote_name(self, name***REMOVED***:
        return self.connection.ops.geo_quote_name(name***REMOVED***

    def column_sql(self, model, field, include_default=False***REMOVED***:
        from django.contrib.gis.db.models.fields import GeometryField
        if not isinstance(field, GeometryField***REMOVED***:
            return super(SpatialiteSchemaEditor, self***REMOVED***.column_sql(model, field, include_default***REMOVED***

        # Geometry columns are created by the `AddGeometryColumn` function
        self.geometry_sql.append(
            self.sql_add_geometry_column % {
                "table": self.geo_quote_name(model._meta.db_table***REMOVED***,
                "column": self.geo_quote_name(field.column***REMOVED***,
                "srid": field.srid,
                "geom_type": self.geo_quote_name(field.geom_type***REMOVED***,
                "dim": field.dim,
                "null": int(not field.null***REMOVED***,
        ***REMOVED***
        ***REMOVED***

        if field.spatial_index:
            self.geometry_sql.append(
                self.sql_add_spatial_index % {
                    "table": self.quote_name(model._meta.db_table***REMOVED***,
                    "column": self.quote_name(field.column***REMOVED***,
            ***REMOVED***
            ***REMOVED***
        return None, None

    def remove_geometry_metadata(self, model, field***REMOVED***:
        self.execute(
            self.sql_remove_geometry_metadata % {
                "table": self.quote_name(model._meta.db_table***REMOVED***,
                "column": self.quote_name(field.column***REMOVED***,
        ***REMOVED***
        ***REMOVED***
        self.execute(
            self.sql_drop_spatial_index % {
                "table": model._meta.db_table,
                "column": field.column,
        ***REMOVED***
        ***REMOVED***

    def create_model(self, model***REMOVED***:
        super(SpatialiteSchemaEditor, self***REMOVED***.create_model(model***REMOVED***
        # Create geometry columns
        for sql in self.geometry_sql:
            self.execute(sql***REMOVED***
        self.geometry_sql = [***REMOVED***

    def delete_model(self, model, **kwargs***REMOVED***:
        from django.contrib.gis.db.models.fields import GeometryField
        # Drop spatial metadata (dropping the table does not automatically remove them***REMOVED***
        for field in model._meta.local_fields:
            if isinstance(field, GeometryField***REMOVED***:
                self.remove_geometry_metadata(model, field***REMOVED***
        # Make sure all geom stuff is gone
        for geom_table in self.geometry_tables:
            ***REMOVED***
                self.execute(
                    self.sql_discard_geometry_columns % {
                        "geom_table": geom_table,
                        "table": self.quote_name(model._meta.db_table***REMOVED***,
                ***REMOVED***
                ***REMOVED***
            except DatabaseError:
                pass
        super(SpatialiteSchemaEditor, self***REMOVED***.delete_model(model, **kwargs***REMOVED***

    def add_field(self, model, field***REMOVED***:
        from django.contrib.gis.db.models.fields import GeometryField
        if isinstance(field, GeometryField***REMOVED***:
            # Populate self.geometry_sql
            self.column_sql(model, field***REMOVED***
            for sql in self.geometry_sql:
                self.execute(sql***REMOVED***
            self.geometry_sql = [***REMOVED***
        else:
            super(SpatialiteSchemaEditor, self***REMOVED***.add_field(model, field***REMOVED***

    def remove_field(self, model, field***REMOVED***:
        from django.contrib.gis.db.models.fields import GeometryField
        # NOTE: If the field is a geometry field, the table is just recreated,
        # the parent's remove_field can't be used cause it will skip the
        # recreation if the field does not have a database type. Geometry fields
        # do not have a db type cause they are added and removed via stored
        # procedures.
        if isinstance(field, GeometryField***REMOVED***:
            self._remake_table(model, delete_fields=[field***REMOVED******REMOVED***
        else:
            super(SpatialiteSchemaEditor, self***REMOVED***.remove_field(model, field***REMOVED***

    def alter_db_table(self, model, old_db_table, new_db_table***REMOVED***:
        from django.contrib.gis.db.models.fields import GeometryField
        # Remove geometry-ness from temp table
        for field in model._meta.local_fields:
            if isinstance(field, GeometryField***REMOVED***:
                self.execute(
                    self.sql_remove_geometry_metadata % {
                        "table": self.quote_name(old_db_table***REMOVED***,
                        "column": self.quote_name(field.column***REMOVED***,
                ***REMOVED***
                ***REMOVED***
        # Alter table
        super(SpatialiteSchemaEditor, self***REMOVED***.alter_db_table(model, old_db_table, new_db_table***REMOVED***
        # Repoint any straggler names
        for geom_table in self.geometry_tables:
            ***REMOVED***
                self.execute(
                    self.sql_update_geometry_columns % {
                        "geom_table": geom_table,
                        "old_table": self.quote_name(old_db_table***REMOVED***,
                        "new_table": self.quote_name(new_db_table***REMOVED***,
                ***REMOVED***
                ***REMOVED***
            except DatabaseError:
                pass
        # Re-add geometry-ness and rename spatial index tables
        for field in model._meta.local_fields:
            if isinstance(field, GeometryField***REMOVED***:
                self.execute(self.sql_add_geometry_column % {
                    "table": self.geo_quote_name(new_db_table***REMOVED***,
                    "column": self.geo_quote_name(field.column***REMOVED***,
                    "srid": field.srid,
                    "geom_type": self.geo_quote_name(field.geom_type***REMOVED***,
                    "dim": field.dim,
                    "null": int(not field.null***REMOVED***,
            ***REMOVED******REMOVED***
            if getattr(field, 'spatial_index', False***REMOVED***:
                self.execute(self.sql_rename_table % {
                    "old_table": self.quote_name("idx_%s_%s" % (old_db_table, field.column***REMOVED******REMOVED***,
                    "new_table": self.quote_name("idx_%s_%s" % (new_db_table, field.column***REMOVED******REMOVED***,
            ***REMOVED******REMOVED***
