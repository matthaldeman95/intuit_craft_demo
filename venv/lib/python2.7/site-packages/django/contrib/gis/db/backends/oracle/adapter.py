from cx_Oracle import CLOB

from django.contrib.gis.db.backends.base.adapter import WKTAdapter
from django.contrib.gis.geos import GeometryCollection, Polygon
from django.utils.six.moves import range


class OracleSpatialAdapter(WKTAdapter***REMOVED***:
    input_size = CLOB

    def __init__(self, geom***REMOVED***:
        ***REMOVED***
        Oracle requires that polygon rings are in proper orientation. This
        affects spatial operations and an invalid orientation may cause
        failures. Correct orientations are:
         * Outer ring - counter clockwise
         * Inner ring(s***REMOVED*** - clockwise
        ***REMOVED***
        if isinstance(geom, Polygon***REMOVED***:
            self._fix_polygon(geom***REMOVED***
        elif isinstance(geom, GeometryCollection***REMOVED***:
            self._fix_geometry_collection(geom***REMOVED***

        self.wkt = geom.wkt
        self.srid = geom.srid

    def _fix_polygon(self, poly***REMOVED***:
        # Fix single polygon orientation as described in __init__(***REMOVED***
        if self._isClockwise(poly.exterior_ring***REMOVED***:
            poly.exterior_ring = list(reversed(poly.exterior_ring***REMOVED******REMOVED***

        for i in range(1, len(poly***REMOVED******REMOVED***:
            if not self._isClockwise(poly[i***REMOVED******REMOVED***:
                poly[i***REMOVED*** = list(reversed(poly[i***REMOVED******REMOVED******REMOVED***

        return poly

    def _fix_geometry_collection(self, coll***REMOVED***:
        # Fix polygon orientations in geometry collections as described in
        # __init__(***REMOVED***
        for i, geom in enumerate(coll***REMOVED***:
            if isinstance(geom, Polygon***REMOVED***:
                coll[i***REMOVED*** = self._fix_polygon(geom***REMOVED***

    def _isClockwise(self, coords***REMOVED***:
        # A modified shoelace algorithm to determine polygon orientation.
        # See https://en.wikipedia.org/wiki/Shoelace_formula
        n = len(coords***REMOVED***
        area = 0.0
        for i in range(n***REMOVED***:
            j = (i + 1***REMOVED*** % n
            area += coords[i***REMOVED***[0***REMOVED*** * coords[j***REMOVED***[1***REMOVED***
            area -= coords[j***REMOVED***[0***REMOVED*** * coords[i***REMOVED***[1***REMOVED***
        return area < 0.0
