from django.contrib.gis.gdal import OGRGeomType
from django.db.backends.postgresql.introspection import DatabaseIntrospection


class GeoIntrospectionError(Exception***REMOVED***:
    pass


class PostGISIntrospection(DatabaseIntrospection***REMOVED***:
    # Reverse dictionary for PostGIS geometry types not populated until
    # introspection is actually performed.
    postgis_types_reverse = {***REMOVED***

    ignored_tables = DatabaseIntrospection.ignored_tables + [
        'geography_columns',
        'geometry_columns',
        'raster_columns',
        'spatial_ref_sys',
        'raster_overviews',
    ***REMOVED***

    # Overridden from parent to include raster indices in retrieval.
    # Raster indices have pg_index.indkey value 0 because they are an
    # expression over the raster column through the ST_ConvexHull function.
    # So the default query has to be adapted to include raster indices.
    _get_indexes_query = ***REMOVED***
        SELECT DISTINCT attr.attname, idx.indkey, idx.indisunique, idx.indisprimary
        FROM pg_catalog.pg_class c, pg_catalog.pg_class c2,
            pg_catalog.pg_index idx, pg_catalog.pg_attribute attr
        LEFT JOIN pg_catalog.pg_type t ON t.oid = attr.atttypid
        WHERE
            c.oid = idx.indrelid
            AND idx.indexrelid = c2.oid
            AND attr.attrelid = c.oid
            AND (
                attr.attnum = idx.indkey[0***REMOVED*** OR
                (t.typname LIKE 'raster' AND idx.indkey = '0'***REMOVED***
            ***REMOVED***
            AND attr.attnum > 0
            AND c.relname = %s***REMOVED***

    def get_postgis_types(self***REMOVED***:
        ***REMOVED***
        Returns a dictionary with keys that are the PostgreSQL object
        identification integers for the PostGIS geometry and/or
        geography types (if supported***REMOVED***.
        ***REMOVED***
        field_types = [
            ('geometry', 'GeometryField'***REMOVED***,
            # The value for the geography type is actually a tuple
            # to pass in the `geography=True` keyword to the field
            # definition.
            ('geography', ('GeometryField', {'geography': True***REMOVED******REMOVED******REMOVED***,
        ***REMOVED***
        postgis_types = {***REMOVED***

        # The OID integers associated with the geometry type may
        # be different across versions; hence, this is why we have
        # to query the PostgreSQL pg_type table corresponding to the
        # PostGIS custom data types.
        oid_sql = 'SELECT "oid" FROM "pg_type" WHERE "typname" = %s'
        cursor = self.connection.cursor(***REMOVED***
        ***REMOVED***
            for field_type in field_types:
                cursor.execute(oid_sql, (field_type[0***REMOVED***,***REMOVED******REMOVED***
                for result in cursor.fetchall(***REMOVED***:
                    postgis_types[result[0***REMOVED******REMOVED*** = field_type[1***REMOVED***
        finally:
            cursor.close(***REMOVED***

        return postgis_types

    def get_field_type(self, data_type, description***REMOVED***:
        if not self.postgis_types_reverse:
            # If the PostGIS types reverse dictionary is not populated, do so
            # now.  In order to prevent unnecessary requests upon connection
            # initialization, the `data_types_reverse` dictionary is not updated
            # with the PostGIS custom types until introspection is actually
            # performed -- in other words, when this function is called.
            self.postgis_types_reverse = self.get_postgis_types(***REMOVED***
            self.data_types_reverse.update(self.postgis_types_reverse***REMOVED***
        return super(PostGISIntrospection, self***REMOVED***.get_field_type(data_type, description***REMOVED***

    def get_geometry_type(self, table_name, geo_col***REMOVED***:
        ***REMOVED***
        The geometry type OID used by PostGIS does not indicate the particular
        type of field that a geometry column is (e.g., whether it's a
        PointField or a PolygonField***REMOVED***.  Thus, this routine queries the PostGIS
        metadata tables to determine the geometry type,
        ***REMOVED***
        cursor = self.connection.cursor(***REMOVED***
        ***REMOVED***
            ***REMOVED***
                # First seeing if this geometry column is in the `geometry_columns`
                cursor.execute('SELECT "coord_dimension", "srid", "type" '
                               'FROM "geometry_columns" '
                               'WHERE "f_table_name"=%s AND "f_geometry_column"=%s',
                               (table_name, geo_col***REMOVED******REMOVED***
                row = cursor.fetchone(***REMOVED***
                if not row:
                    raise GeoIntrospectionError
            except GeoIntrospectionError:
                cursor.execute('SELECT "coord_dimension", "srid", "type" '
                               'FROM "geography_columns" '
                               'WHERE "f_table_name"=%s AND "f_geography_column"=%s',
                               (table_name, geo_col***REMOVED******REMOVED***
                row = cursor.fetchone(***REMOVED***

            if not row:
                raise Exception('Could not find a geometry or geography column for "%s"."%s"' %
                                (table_name, geo_col***REMOVED******REMOVED***

            # OGRGeomType does not require GDAL and makes it easy to convert
            # from OGC geom type name to Django field.
            field_type = OGRGeomType(row[2***REMOVED******REMOVED***.django

            # Getting any GeometryField keyword arguments that are not the default.
            dim = row[0***REMOVED***
            srid = row[1***REMOVED***
            field_params = {***REMOVED***
            if srid != 4326:
                field_params['srid'***REMOVED*** = srid
            if dim != 2:
                field_params['dim'***REMOVED*** = dim
        finally:
            cursor.close(***REMOVED***

        return field_type, field_params
