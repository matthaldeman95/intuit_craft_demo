from django.contrib.gis.db.models.fields import GeometryField
from django.db.backends.oracle.schema import DatabaseSchemaEditor
from django.db.backends.utils import truncate_name


class OracleGISSchemaEditor(DatabaseSchemaEditor***REMOVED***:
    sql_add_geometry_metadata = (***REMOVED***
        INSERT INTO USER_SDO_GEOM_METADATA
            ("TABLE_NAME", "COLUMN_NAME", "DIMINFO", "SRID"***REMOVED***
        VALUES (
            %(table***REMOVED***s,
            %(column***REMOVED***s,
            MDSYS.SDO_DIM_ARRAY(
                MDSYS.SDO_DIM_ELEMENT('LONG', %(dim0***REMOVED***s, %(dim2***REMOVED***s, %(tolerance***REMOVED***s***REMOVED***,
                MDSYS.SDO_DIM_ELEMENT('LAT', %(dim1***REMOVED***s, %(dim3***REMOVED***s, %(tolerance***REMOVED***s***REMOVED***
            ***REMOVED***,
            %(srid***REMOVED***s
        ***REMOVED******REMOVED******REMOVED***
    sql_add_spatial_index = 'CREATE INDEX %(index***REMOVED***s ON %(table***REMOVED***s(%(column***REMOVED***s***REMOVED*** INDEXTYPE IS MDSYS.SPATIAL_INDEX'
    sql_drop_spatial_index = 'DROP INDEX %(index***REMOVED***s'
    sql_clear_geometry_table_metadata = 'DELETE FROM USER_SDO_GEOM_METADATA WHERE TABLE_NAME = %(table***REMOVED***s'
    sql_clear_geometry_field_metadata = (
        'DELETE FROM USER_SDO_GEOM_METADATA WHERE TABLE_NAME = %(table***REMOVED***s '
        'AND COLUMN_NAME = %(column***REMOVED***s'
    ***REMOVED***

    def __init__(self, *args, **kwargs***REMOVED***:
        super(OracleGISSchemaEditor, self***REMOVED***.__init__(*args, **kwargs***REMOVED***
        self.geometry_sql = [***REMOVED***

    def geo_quote_name(self, name***REMOVED***:
        return self.connection.ops.geo_quote_name(name***REMOVED***

    def column_sql(self, model, field, include_default=False***REMOVED***:
        column_sql = super(OracleGISSchemaEditor, self***REMOVED***.column_sql(model, field, include_default***REMOVED***
        if isinstance(field, GeometryField***REMOVED***:
            db_table = model._meta.db_table
            self.geometry_sql.append(
                self.sql_add_geometry_metadata % {
                    'table': self.geo_quote_name(db_table***REMOVED***,
                    'column': self.geo_quote_name(field.column***REMOVED***,
                    'dim0': field._extent[0***REMOVED***,
                    'dim1': field._extent[1***REMOVED***,
                    'dim2': field._extent[2***REMOVED***,
                    'dim3': field._extent[3***REMOVED***,
                    'tolerance': field._tolerance,
                    'srid': field.srid,
            ***REMOVED***
            ***REMOVED***
            if field.spatial_index:
                self.geometry_sql.append(
                    self.sql_add_spatial_index % {
                        'index': self.quote_name(self._create_spatial_index_name(model, field***REMOVED******REMOVED***,
                        'table': self.quote_name(db_table***REMOVED***,
                        'column': self.quote_name(field.column***REMOVED***,
                ***REMOVED***
                ***REMOVED***
        return column_sql

    def create_model(self, model***REMOVED***:
        super(OracleGISSchemaEditor, self***REMOVED***.create_model(model***REMOVED***
        self.run_geometry_sql(***REMOVED***

    def delete_model(self, model***REMOVED***:
        super(OracleGISSchemaEditor, self***REMOVED***.delete_model(model***REMOVED***
        self.execute(self.sql_clear_geometry_table_metadata % {
            'table': self.geo_quote_name(model._meta.db_table***REMOVED***,
    ***REMOVED******REMOVED***

    def add_field(self, model, field***REMOVED***:
        super(OracleGISSchemaEditor, self***REMOVED***.add_field(model, field***REMOVED***
        self.run_geometry_sql(***REMOVED***

    def remove_field(self, model, field***REMOVED***:
        if isinstance(field, GeometryField***REMOVED***:
            self.execute(self.sql_clear_geometry_field_metadata % {
                'table': self.geo_quote_name(model._meta.db_table***REMOVED***,
                'column': self.geo_quote_name(field.column***REMOVED***,
        ***REMOVED******REMOVED***
            if field.spatial_index:
                self.execute(self.sql_drop_spatial_index % {
                    'index': self.quote_name(self._create_spatial_index_name(model, field***REMOVED******REMOVED***,
            ***REMOVED******REMOVED***
        super(OracleGISSchemaEditor, self***REMOVED***.remove_field(model, field***REMOVED***

    def run_geometry_sql(self***REMOVED***:
        for sql in self.geometry_sql:
            self.execute(sql***REMOVED***
        self.geometry_sql = [***REMOVED***

    def _create_spatial_index_name(self, model, field***REMOVED***:
        # Oracle doesn't allow object names > 30 characters. Use this scheme
        # instead of self._create_index_name(***REMOVED*** for backwards compatibility.
        return truncate_name('%s_%s_id' % (model._meta.db_table, field.column***REMOVED***, 30***REMOVED***
