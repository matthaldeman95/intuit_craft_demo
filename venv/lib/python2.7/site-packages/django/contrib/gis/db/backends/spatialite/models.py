***REMOVED***
 The GeometryColumns and SpatialRefSys models for the SpatiaLite backend.
***REMOVED***
from django.contrib.gis.db.backends.base.models import SpatialRefSysMixin
from django.contrib.gis.db.backends.spatialite.base import DatabaseWrapper
from django.db import connection, models
from django.db.backends.signals import connection_created
from django.utils.encoding import python_2_unicode_compatible


@python_2_unicode_compatible
class SpatialiteGeometryColumns(models.Model***REMOVED***:
    ***REMOVED***
    The 'geometry_columns' table from SpatiaLite.
    ***REMOVED***
    f_table_name = models.CharField(max_length=256***REMOVED***
    f_geometry_column = models.CharField(max_length=256***REMOVED***
    coord_dimension = models.IntegerField(***REMOVED***
    srid = models.IntegerField(primary_key=True***REMOVED***
    spatial_index_enabled = models.IntegerField(***REMOVED***

    class Meta:
        app_label = 'gis'
        db_table = 'geometry_columns'
        managed = False

    @classmethod
    def table_name_col(cls***REMOVED***:
        ***REMOVED***
        Returns the name of the metadata column used to store the feature table
        name.
        ***REMOVED***
        return 'f_table_name'

    @classmethod
    def geom_col_name(cls***REMOVED***:
        ***REMOVED***
        Returns the name of the metadata column used to store the feature
        geometry column.
        ***REMOVED***
        return 'f_geometry_column'

    def __str__(self***REMOVED***:
        return "%s.%s - %dD %s field (SRID: %d***REMOVED***" % \
               (self.f_table_name, self.f_geometry_column,
                self.coord_dimension, self.type, self.srid***REMOVED***


class SpatialiteSpatialRefSys(models.Model, SpatialRefSysMixin***REMOVED***:
    ***REMOVED***
    The 'spatial_ref_sys' table from SpatiaLite.
    ***REMOVED***
    srid = models.IntegerField(primary_key=True***REMOVED***
    auth_name = models.CharField(max_length=256***REMOVED***
    auth_srid = models.IntegerField(***REMOVED***
    ref_sys_name = models.CharField(max_length=256***REMOVED***
    proj4text = models.CharField(max_length=2048***REMOVED***

    @property
    def wkt(self***REMOVED***:
        if hasattr(self, 'srtext'***REMOVED***:
            return self.srtext
        from django.contrib.gis.gdal import SpatialReference
        return SpatialReference(self.proj4text***REMOVED***.wkt

    class Meta:
        app_label = 'gis'
        db_table = 'spatial_ref_sys'
        managed = False


def add_spatial_version_related_fields(sender, **kwargs***REMOVED***:
    ***REMOVED***
    Adds fields after establishing a database connection to prevent database
    operations at compile time.
    ***REMOVED***
    if connection_created.disconnect(add_spatial_version_related_fields, sender=DatabaseWrapper***REMOVED***:
        spatial_version = connection.ops.spatial_version[0***REMOVED***
        if spatial_version >= 4:
            SpatialiteSpatialRefSys.add_to_class('srtext', models.CharField(max_length=2048***REMOVED******REMOVED***
            SpatialiteGeometryColumns.add_to_class('type', models.IntegerField(db_column='geometry_type'***REMOVED******REMOVED***
        else:
            SpatialiteGeometryColumns.add_to_class('type', models.CharField(max_length=30***REMOVED******REMOVED***
connection_created.connect(add_spatial_version_related_fields, sender=DatabaseWrapper***REMOVED***
