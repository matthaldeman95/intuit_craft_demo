import re

from django.contrib.gis import gdal
from django.utils import six
from django.utils.encoding import python_2_unicode_compatible


@python_2_unicode_compatible
class SpatialRefSysMixin(object***REMOVED***:
    ***REMOVED***
    The SpatialRefSysMixin is a class used by the database-dependent
    SpatialRefSys objects to reduce redundant code.
    ***REMOVED***
    # For pulling out the spheroid from the spatial reference string. This
    # regular expression is used only if the user does not have GDAL installed.
    # TODO: Flattening not used in all ellipsoids, could also be a minor axis,
    # or 'b' parameter.
    spheroid_regex = re.compile(r'.+SPHEROID\[\"(?P<name>.+***REMOVED***\",(?P<major>\d+(\.\d+***REMOVED***?***REMOVED***,(?P<flattening>\d{3***REMOVED***\.\d+***REMOVED***,'***REMOVED***

    # For pulling out the units on platforms w/o GDAL installed.
    # TODO: Figure out how to pull out angular units of projected coordinate system and
    # fix for LOCAL_CS types.  GDAL should be highly recommended for performing
    # distance queries.
    units_regex = re.compile(r'.+UNIT ?\["(?P<unit_name>[\w \.\'\(\***REMOVED******REMOVED***+***REMOVED***", ?(?P<unit>[^ ,\***REMOVED******REMOVED***+***REMOVED***', re.DOTALL***REMOVED***

    @property
    def srs(self***REMOVED***:
        ***REMOVED***
        Returns a GDAL SpatialReference object, if GDAL is installed.
        ***REMOVED***
        if gdal.HAS_GDAL:
            # TODO: Is caching really necessary here?  Is complexity worth it?
            if hasattr(self, '_srs'***REMOVED***:
                # Returning a clone of the cached SpatialReference object.
                return self._srs.clone(***REMOVED***
            else:
                # Attempting to cache a SpatialReference object.

                # Trying to get from WKT first.
                ***REMOVED***
                    self._srs = gdal.SpatialReference(self.wkt***REMOVED***
                    return self.srs
                except Exception as e:
                    msg = e

                ***REMOVED***
                    self._srs = gdal.SpatialReference(self.proj4text***REMOVED***
                    return self.srs
                except Exception as e:
                    msg = e

                raise Exception('Could not get OSR SpatialReference from WKT: %s\nError:\n%s' % (self.wkt, msg***REMOVED******REMOVED***
        else:
            raise Exception('GDAL is not installed.'***REMOVED***

    @property
    def ellipsoid(self***REMOVED***:
        ***REMOVED***
        Returns a tuple of the ellipsoid parameters:
        (semimajor axis, semiminor axis, and inverse flattening***REMOVED***.
        ***REMOVED***
        if gdal.HAS_GDAL:
            return self.srs.ellipsoid
        else:
            m = self.spheroid_regex.match(self.wkt***REMOVED***
            if m:
                return (float(m.group('major'***REMOVED******REMOVED***, float(m.group('flattening'***REMOVED******REMOVED******REMOVED***
            else:
                return None

    @property
    def name(self***REMOVED***:
        "Returns the projection name."
        return self.srs.name

    @property
    def spheroid(self***REMOVED***:
        "Returns the spheroid name for this spatial reference."
        return self.srs['spheroid'***REMOVED***

    @property
    def datum(self***REMOVED***:
        "Returns the datum for this spatial reference."
        return self.srs['datum'***REMOVED***

    @property
    def projected(self***REMOVED***:
        "Is this Spatial Reference projected?"
        if gdal.HAS_GDAL:
            return self.srs.projected
        else:
            return self.wkt.startswith('PROJCS'***REMOVED***

    @property
    def local(self***REMOVED***:
        "Is this Spatial Reference local?"
        if gdal.HAS_GDAL:
            return self.srs.local
        else:
            return self.wkt.startswith('LOCAL_CS'***REMOVED***

    @property
    def geographic(self***REMOVED***:
        "Is this Spatial Reference geographic?"
        if gdal.HAS_GDAL:
            return self.srs.geographic
        else:
            return self.wkt.startswith('GEOGCS'***REMOVED***

    @property
    def linear_name(self***REMOVED***:
        "Returns the linear units name."
        if gdal.HAS_GDAL:
            return self.srs.linear_name
        elif self.geographic:
            return None
        else:
            m = self.units_regex.match(self.wkt***REMOVED***
            return m.group('unit_name'***REMOVED***

    @property
    def linear_units(self***REMOVED***:
        "Returns the linear units."
        if gdal.HAS_GDAL:
            return self.srs.linear_units
        elif self.geographic:
            return None
        else:
            m = self.units_regex.match(self.wkt***REMOVED***
            return m.group('unit'***REMOVED***

    @property
    def angular_name(self***REMOVED***:
        "Returns the name of the angular units."
        if gdal.HAS_GDAL:
            return self.srs.angular_name
        elif self.projected:
            return None
        else:
            m = self.units_regex.match(self.wkt***REMOVED***
            return m.group('unit_name'***REMOVED***

    @property
    def angular_units(self***REMOVED***:
        "Returns the angular units."
        if gdal.HAS_GDAL:
            return self.srs.angular_units
        elif self.projected:
            return None
        else:
            m = self.units_regex.match(self.wkt***REMOVED***
            return m.group('unit'***REMOVED***

    @property
    def units(self***REMOVED***:
        "Returns a tuple of the units and the name."
        if self.projected or self.local:
            return (self.linear_units, self.linear_name***REMOVED***
        elif self.geographic:
            return (self.angular_units, self.angular_name***REMOVED***
        else:
            return (None, None***REMOVED***

    @classmethod
    def get_units(cls, wkt***REMOVED***:
        ***REMOVED***
        Return a tuple of (unit_value, unit_name***REMOVED*** for the given WKT without
        using any of the database fields.
        ***REMOVED***
        if gdal.HAS_GDAL:
            return gdal.SpatialReference(wkt***REMOVED***.units
        else:
            m = cls.units_regex.match(wkt***REMOVED***
            return float(m.group('unit'***REMOVED******REMOVED***, m.group('unit_name'***REMOVED***

    @classmethod
    def get_spheroid(cls, wkt, string=True***REMOVED***:
        ***REMOVED***
        Class method used by GeometryField on initialization to
        retrieve the `SPHEROID[..***REMOVED***` parameters from the given WKT.
        ***REMOVED***
        if gdal.HAS_GDAL:
            srs = gdal.SpatialReference(wkt***REMOVED***
            sphere_params = srs.ellipsoid
            sphere_name = srs['spheroid'***REMOVED***
        else:
            m = cls.spheroid_regex.match(wkt***REMOVED***
            if m:
                sphere_params = (float(m.group('major'***REMOVED******REMOVED***, float(m.group('flattening'***REMOVED******REMOVED******REMOVED***
                sphere_name = m.group('name'***REMOVED***
            else:
                return None

        if not string:
            return sphere_name, sphere_params
        else:
            # `string` parameter used to place in format acceptable by PostGIS
            if len(sphere_params***REMOVED*** == 3:
                radius, flattening = sphere_params[0***REMOVED***, sphere_params[2***REMOVED***
            else:
                radius, flattening = sphere_params
            return 'SPHEROID["%s",%s,%s***REMOVED***' % (sphere_name, radius, flattening***REMOVED***

    def __str__(self***REMOVED***:
        ***REMOVED***
        Returns the string representation.  If GDAL is installed,
        it will be 'pretty' OGC WKT.
        ***REMOVED***
        ***REMOVED***
            return six.text_type(self.srs***REMOVED***
        except Exception:
            return six.text_type(self.wkt***REMOVED***
