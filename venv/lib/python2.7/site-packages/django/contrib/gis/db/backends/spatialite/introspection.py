from django.contrib.gis.gdal import OGRGeomType
from django.db.backends.sqlite3.introspection import (
    DatabaseIntrospection, FlexibleFieldLookupDict,
***REMOVED***
from django.utils import six


class GeoFlexibleFieldLookupDict(FlexibleFieldLookupDict***REMOVED***:
    ***REMOVED***
    Sublcass that includes updates the `base_data_types_reverse` dict
    for geometry field types.
    ***REMOVED***
    base_data_types_reverse = FlexibleFieldLookupDict.base_data_types_reverse.copy(***REMOVED***
    base_data_types_reverse.update(
    ***REMOVED***'point': 'GeometryField',
         'linestring': 'GeometryField',
         'polygon': 'GeometryField',
         'multipoint': 'GeometryField',
         'multilinestring': 'GeometryField',
         'multipolygon': 'GeometryField',
         'geometrycollection': 'GeometryField',
     ***REMOVED******REMOVED***


class SpatiaLiteIntrospection(DatabaseIntrospection***REMOVED***:
    data_types_reverse = GeoFlexibleFieldLookupDict(***REMOVED***

    def get_geometry_type(self, table_name, geo_col***REMOVED***:
        cursor = self.connection.cursor(***REMOVED***
        ***REMOVED***
            # Querying the `geometry_columns` table to get additional metadata.
            type_col = 'type' if self.connection.ops.spatial_version < (4, 0, 0***REMOVED*** else 'geometry_type'
            cursor.execute('SELECT coord_dimension, srid, %s '
                           'FROM geometry_columns '
                           'WHERE f_table_name=%%s AND f_geometry_column=%%s' % type_col,
                           (table_name, geo_col***REMOVED******REMOVED***
            row = cursor.fetchone(***REMOVED***
            if not row:
                raise Exception('Could not find a geometry column for "%s"."%s"' %
                                (table_name, geo_col***REMOVED******REMOVED***

            # OGRGeomType does not require GDAL and makes it easy to convert
            # from OGC geom type name to Django field.
            ogr_type = row[2***REMOVED***
            if isinstance(ogr_type, six.integer_types***REMOVED*** and ogr_type > 1000:
                # SpatiaLite versions >= 4 use the new SFSQL 1.2 offsets
                # 1000 (Z***REMOVED***, 2000 (M***REMOVED***, and 3000 (ZM***REMOVED*** to indicate the presence of
                # higher dimensional coordinates (M not yet supported by Django***REMOVED***.
                ogr_type = ogr_type % 1000 + OGRGeomType.wkb25bit
            field_type = OGRGeomType(ogr_type***REMOVED***.django

            # Getting any GeometryField keyword arguments that are not the default.
            dim = row[0***REMOVED***
            srid = row[1***REMOVED***
            field_params = {***REMOVED***
            if srid != 4326:
                field_params['srid'***REMOVED*** = srid
            if (isinstance(dim, six.string_types***REMOVED*** and 'Z' in dim***REMOVED*** or dim == 3:
                field_params['dim'***REMOVED*** = 3
        finally:
            cursor.close(***REMOVED***

        return field_type, field_params

    def get_indexes(self, cursor, table_name***REMOVED***:
        indexes = super(SpatiaLiteIntrospection, self***REMOVED***.get_indexes(cursor, table_name***REMOVED***
        cursor.execute('SELECT f_geometry_column '
                       'FROM geometry_columns '
                       'WHERE f_table_name=%s AND spatial_index_enabled=1', (table_name,***REMOVED******REMOVED***
        for row in cursor.fetchall(***REMOVED***:
            indexes[row[0***REMOVED******REMOVED*** = {'primary_key': False, 'unique': False***REMOVED***
        return indexes
