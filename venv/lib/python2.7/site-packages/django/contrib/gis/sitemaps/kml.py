from django.apps import apps
from django.contrib.gis.db.models.fields import GeometryField
from django.contrib.sitemaps import Sitemap
from django.db import models
from django.urls import reverse


class KMLSitemap(Sitemap***REMOVED***:
    ***REMOVED***
    A minimal hook to produce KML sitemaps.
    ***REMOVED***
    geo_format = 'kml'

    def __init__(self, locations=None***REMOVED***:
        # If no locations specified, then we try to build for
        # every model in installed applications.
        self.locations = self._build_kml_sources(locations***REMOVED***

    def _build_kml_sources(self, sources***REMOVED***:
        ***REMOVED***
        Goes through the given sources and returns a 3-tuple of
        the application label, module name, and field name of every
        GeometryField encountered in the sources.

        If no sources are provided, then all models.
        ***REMOVED***
        kml_sources = [***REMOVED***
        if sources is None:
            sources = apps.get_models(***REMOVED***
        for source in sources:
            if isinstance(source, models.base.ModelBase***REMOVED***:
                for field in source._meta.fields:
                    if isinstance(field, GeometryField***REMOVED***:
                        kml_sources.append((source._meta.app_label,
                                            source._meta.model_name,
                                            field.name***REMOVED******REMOVED***
            elif isinstance(source, (list, tuple***REMOVED******REMOVED***:
                if len(source***REMOVED*** != 3:
                    raise ValueError('Must specify a 3-tuple of (app_label, module_name, field_name***REMOVED***.'***REMOVED***
                kml_sources.append(source***REMOVED***
            else:
                raise TypeError('KML Sources must be a model or a 3-tuple.'***REMOVED***
        return kml_sources

    def get_urls(self, page=1, site=None, protocol=None***REMOVED***:
        ***REMOVED***
        This method is overridden so the appropriate `geo_format` attribute
        is placed on each URL element.
        ***REMOVED***
        urls = Sitemap.get_urls(self, page=page, site=site, protocol=protocol***REMOVED***
        for url in urls:
            url['geo_format'***REMOVED*** = self.geo_format
        return urls

    def items(self***REMOVED***:
        return self.locations

    def location(self, obj***REMOVED***:
        return reverse(
            'django.contrib.gis.sitemaps.views.%s' % self.geo_format,
            kwargs={
                'label': obj[0***REMOVED***,
                'model': obj[1***REMOVED***,
                'field_name': obj[2***REMOVED***,
    ***REMOVED***
        ***REMOVED***


class KMZSitemap(KMLSitemap***REMOVED***:
    geo_format = 'kmz'
