from __future__ import unicode_literals

from django.apps import apps
from django.contrib.gis.db.models.fields import GeometryField
from django.contrib.gis.db.models.functions import AsKML, Transform
from django.contrib.gis.shortcuts import render_to_kml, render_to_kmz
from django.core.exceptions import FieldDoesNotExist
from django.db import DEFAULT_DB_ALIAS, connections
from django.http import Http404


def kml(request, label, model, field_name=None, compress=False, using=DEFAULT_DB_ALIAS***REMOVED***:
    ***REMOVED***
    This view generates KML for the given app label, model, and field name.

    The field name must be that of a geographic field.
    ***REMOVED***
    placemarks = [***REMOVED***
    ***REMOVED***
        klass = apps.get_model(label, model***REMOVED***
    except LookupError:
        raise Http404('You must supply a valid app label and module name.  Got "%s.%s"' % (label, model***REMOVED******REMOVED***

    if field_name:
        ***REMOVED***
            field = klass._meta.get_field(field_name***REMOVED***
            if not isinstance(field, GeometryField***REMOVED***:
                raise FieldDoesNotExist
        except FieldDoesNotExist:
            raise Http404('Invalid geometry field.'***REMOVED***

    connection = connections[using***REMOVED***

    if connection.features.has_AsKML_function:
        ***REMOVED*** will take care of transformation.
        placemarks = klass._default_manager.using(using***REMOVED***.annotate(kml=AsKML(field_name***REMOVED******REMOVED***
    else:
        # If the database offers no KML method, we use the `kml`
        # attribute of the lazy geometry instead.
        placemarks = [***REMOVED***
        if connection.features.has_Transform_function:
            qs = klass._default_manager.using(using***REMOVED***.annotate(
                **{'%s_4326' % field_name: Transform(field_name, 4326***REMOVED******REMOVED******REMOVED***
            field_name += '_4326'
        else:
            qs = klass._default_manager.using(using***REMOVED***.all(***REMOVED***
        for mod in qs:
            mod.kml = getattr(mod, field_name***REMOVED***.kml
            placemarks.append(mod***REMOVED***

    # Getting the render function and rendering to the correct.
    if compress:
        render = render_to_kmz
    else:
        render = render_to_kml
    return render('gis/kml/placemarks.kml', {'places': placemarks***REMOVED******REMOVED***


def kmz(request, label, model, field_name=None, using=DEFAULT_DB_ALIAS***REMOVED***:
    ***REMOVED***
    This view returns KMZ for the given app label, model, and field name.
    ***REMOVED***
    return kml(request, label, model, field_name, compress=True, using=using***REMOVED***
