from __future__ import unicode_literals

from django.contrib.gis.gdal import HAS_GDAL
from django.core.serializers.base import (
    SerializationError, SerializerDoesNotExist,
***REMOVED***
from django.core.serializers.json import Serializer as JSONSerializer

if HAS_GDAL:
    from django.contrib.gis.gdal import CoordTransform, SpatialReference


class Serializer(JSONSerializer***REMOVED***:
    ***REMOVED***
    Convert a queryset to GeoJSON, http://geojson.org/
    ***REMOVED***
    def _init_options(self***REMOVED***:
        super(Serializer, self***REMOVED***._init_options(***REMOVED***
        self.geometry_field = self.json_kwargs.pop('geometry_field', None***REMOVED***
        self.srid = self.json_kwargs.pop('srid', 4326***REMOVED***
        if (self.selected_fields is not None and self.geometry_field is not None and
                self.geometry_field not in self.selected_fields***REMOVED***:
            self.selected_fields = list(self.selected_fields***REMOVED*** + [self.geometry_field***REMOVED***

    def start_serialization(self***REMOVED***:
        self._init_options(***REMOVED***
        self._cts = {***REMOVED***  # cache of CoordTransform's
        self.stream.write(
            '{"type": "FeatureCollection", "crs": {"type": "name", "properties": {"name": "EPSG:%d"***REMOVED******REMOVED***,'
            ' "features": [' % self.srid***REMOVED***

    def end_serialization(self***REMOVED***:
        self.stream.write('***REMOVED******REMOVED***'***REMOVED***

    def start_object(self, obj***REMOVED***:
        super(Serializer, self***REMOVED***.start_object(obj***REMOVED***
        self._geometry = None
        if self.geometry_field is None:
            # Find the first declared geometry field
            for field in obj._meta.fields:
                if hasattr(field, 'geom_type'***REMOVED***:
                    self.geometry_field = field.name
                    break

    def get_dump_object(self, obj***REMOVED***:
        data = {
            "type": "Feature",
            "properties": self._current,
    ***REMOVED***
        if ((self.selected_fields is None or 'pk' in self.selected_fields***REMOVED*** and
                'pk' not in data["properties"***REMOVED******REMOVED***:
            data["properties"***REMOVED***["pk"***REMOVED*** = obj._meta.pk.value_to_string(obj***REMOVED***
        if self._geome***REMOVED***
            if self._geometry.srid != self.srid:
                # If needed, transform the geometry in the srid of the global geojson srid
                if not HAS_GDAL:
                    raise SerializationError(
                        'Unable to convert geometry to SRID %s when GDAL is not installed.' % self.srid
                    ***REMOVED***
                if self._geometry.srid not in self._cts:
                    srs = SpatialReference(self.srid***REMOVED***
                    self._cts[self._geometry.srid***REMOVED*** = CoordTransform(self._geometry.srs, srs***REMOVED***
                self._geometry.transform(self._cts[self._geometry.srid***REMOVED******REMOVED***
            data["geometry"***REMOVED*** = eval(self._geometry.geojson***REMOVED***
        else:
            data["geometry"***REMOVED*** = None
        return data

    def handle_field(self, obj, field***REMOVED***:
        if field.name == self.geometry_field:
            self._geometry = field.value_from_object(obj***REMOVED***
        else:
            super(Serializer, self***REMOVED***.handle_field(obj, field***REMOVED***


class Deserializer(object***REMOVED***:
    def __init__(self, *args, **kwargs***REMOVED***:
        raise SerializerDoesNotExist("geojson is a serialization-only serializer"***REMOVED***
