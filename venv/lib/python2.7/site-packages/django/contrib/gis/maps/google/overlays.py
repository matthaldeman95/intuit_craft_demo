from __future__ import unicode_literals

from functools import total_ordering

from django.contrib.gis.geos import (
    LinearRing, LineString, Point, Polygon, fromstr,
***REMOVED***
from django.utils import six
from django.utils.encoding import python_2_unicode_compatible
from django.utils.html import html_safe


@html_safe
@python_2_unicode_compatible
class GEvent(object***REMOVED***:
    ***REMOVED***
    A Python wrapper for the Google GEvent object.

    Events can be attached to any object derived from GOverlayBase with the
    add_event(***REMOVED*** call.

    For more information please see the Google Maps API Reference:
     https://developers.google.com/maps/documentation/javascript/reference#event

    Example:

      from django.shortcuts import render
      from django.contrib.gis.maps.google import GoogleMap, GEvent, GPolyline

      def sample_request(request***REMOVED***:
          polyline = GPolyline('LINESTRING(101 26, 112 26, 102 31***REMOVED***'***REMOVED***
          event = GEvent('click',
            'function(***REMOVED*** { location.href = "http://www.google.com"***REMOVED***'***REMOVED***
          polyline.add_event(event***REMOVED***
          return render(request, 'mytemplate.html', {
              'google': GoogleMap(polylines=[polyline***REMOVED******REMOVED***,
      ***REMOVED******REMOVED***
    ***REMOVED***

    def __init__(self, event, action***REMOVED***:
        ***REMOVED***
        Initializes a GEvent object.

        Parameters:

        event:
          string for the event, such as 'click'. The event must be a valid
          event for the object in the Google Maps API.
          There is no validation of the event type within Django.

        action:
          string containing a Javascript function, such as
          'function(***REMOVED*** { location.href = "newurl";***REMOVED***'
          The string must be a valid Javascript function. Again there is no
          validation fo the function within Django.
        ***REMOVED***
        self.event = event
        self.action = action

    def __str__(self***REMOVED***:
        "Returns the parameter part of a GEvent."
        return '"%s", %s' % (self.event, self.action***REMOVED***


@html_safe
@python_2_unicode_compatible
class GOverlayBase(object***REMOVED***:
    def __init__(self***REMOVED***:
        self.events = [***REMOVED***

    def latlng_from_coords(self, coords***REMOVED***:
        "Generates a JavaScript array of GLatLng objects for the given coordinates."
        return '[%s***REMOVED***' % ','.join('new GLatLng(%s,%s***REMOVED***' % (y, x***REMOVED*** for x, y in coords***REMOVED***

    def add_event(self, event***REMOVED***:
        "Attaches a GEvent to the overlay object."
        self.events.append(event***REMOVED***

    def __str__(self***REMOVED***:
        "The string representation is the JavaScript API call."
        return '%s(%s***REMOVED***' % (self.__class__.__name__, self.js_params***REMOVED***


class GPolygon(GOverlayBase***REMOVED***:
    ***REMOVED***
    A Python wrapper for the Google GPolygon object.  For more information
    please see the Google Maps API Reference:
     https://developers.google.com/maps/documentation/javascript/reference#Polygon
    ***REMOVED***
    def __init__(self, poly,
                 stroke_color='#0000ff', stroke_weight=2, stroke_opacity=1,
                 fill_color='#0000ff', fill_opacity=0.4***REMOVED***:
        ***REMOVED***
        The GPolygon object initializes on a GEOS Polygon or a parameter that
        may be instantiated into GEOS Polygon.  Please note that this will not
        depict a Polygon's internal rings.

        Keyword Options:

          stroke_color:
            The color of the polygon outline. Defaults to '#0000ff' (blue***REMOVED***.

          stroke_weight:
            The width of the polygon outline, in pixels.  Defaults to 2.

          stroke_opacity:
            The opacity of the polygon outline, between 0 and 1.  Defaults to 1.

          fill_color:
            The color of the polygon fill.  Defaults to '#0000ff' (blue***REMOVED***.

          fill_opacity:
            The opacity of the polygon fill.  Defaults to 0.4.
        ***REMOVED***
        if isinstance(poly, six.string_types***REMOVED***:
            poly = fromstr(poly***REMOVED***
        if isinstance(poly, (tuple, list***REMOVED******REMOVED***:
            poly = Polygon(poly***REMOVED***
        if not isinstance(poly, Polygon***REMOVED***:
            raise TypeError('GPolygon may only initialize on GEOS Polygons.'***REMOVED***

        # Getting the envelope of the input polygon (used for automatically
        # determining the zoom level***REMOVED***.
        self.envelope = poly.envelope

        # Translating the coordinates into a JavaScript array of
        # Google `GLatLng` objects.
        self.points = self.latlng_from_coords(poly.shell.coords***REMOVED***

        # Stroke settings.
        self.stroke_color, self.stroke_opacity, self.stroke_weight = stroke_color, stroke_opacity, stroke_weight

        # Fill settings.
        self.fill_color, self.fill_opacity = fill_color, fill_opacity

        super(GPolygon, self***REMOVED***.__init__(***REMOVED***

    @property
    def js_params(self***REMOVED***:
        return '%s, "%s", %s, %s, "%s", %s' % (self.points, self.stroke_color, self.stroke_weight, self.stroke_opacity,
                                               self.fill_color, self.fill_opacity***REMOVED***


class GPolyline(GOverlayBase***REMOVED***:
    ***REMOVED***
    A Python wrapper for the Google GPolyline object.  For more information
    please see the Google Maps API Reference:
     https://developers.google.com/maps/documentation/javascript/reference#Polyline
    ***REMOVED***
    def __init__(self, geom, color='#0000ff', weight=2, opacity=1***REMOVED***:
        ***REMOVED***
        The GPolyline object may be initialized on GEOS LineStirng, LinearRing,
        and Polygon objects (internal rings not supported***REMOVED*** or a parameter that
        may instantiated into one of the above geometries.

        Keyword Options:

          color:
            The color to use for the polyline.  Defaults to '#0000ff' (blue***REMOVED***.

          weight:
            The width of the polyline, in pixels.  Defaults to 2.

          opacity:
            The opacity of the polyline, between 0 and 1.  Defaults to 1.
        ***REMOVED***
        # If a GEOS geometry isn't passed in, try to construct one.
        if isinstance(geom, six.string_types***REMOVED***:
            geom = fromstr(geom***REMOVED***
        if isinstance(geom, (tuple, list***REMOVED******REMOVED***:
            geom = Polygon(geom***REMOVED***
        # Generating the lat/lng coordinate pairs.
        if isinstance(geom, (LineString, LinearRing***REMOVED******REMOVED***:
            self.latlngs = self.latlng_from_coords(geom.coords***REMOVED***
        elif isinstance(geom, Polygon***REMOVED***:
            self.latlngs = self.latlng_from_coords(geom.shell.coords***REMOVED***
        else:
            raise TypeError('GPolyline may only initialize on GEOS LineString, LinearRing, and/or Polygon geometries.'***REMOVED***

        # Getting the envelope for automatic zoom determination.
        self.envelope = geom.envelope
        self.color, self.weight, self.opacity = color, weight, opacity
        super(GPolyline, self***REMOVED***.__init__(***REMOVED***

    @property
    def js_params(self***REMOVED***:
        return '%s, "%s", %s, %s' % (self.latlngs, self.color, self.weight, self.opacity***REMOVED***


@total_ordering
class GIcon(object***REMOVED***:
    ***REMOVED***
    Creates a GIcon object to pass into a Gmarker object.

    The keyword arguments map to instance attributes of the same name. These,
    in turn, correspond to a subset of the attributes of the official GIcon
    javascript object:

    https://developers.google.com/maps/documentation/javascript/reference#Icon

    Because a Google map often uses several different icons, a name field has
    been added to the required arguments.

    Required Arguments:
        varname:
            A string which will become the basis for the js variable name of
            the marker, for this reason, your code should assign a unique
            name for each GIcon you instantiate, otherwise there will be
            name space collisions in your javascript.

    Keyword Options:
        image:
            The url of the image to be used as the icon on the map defaults
            to 'G_DEFAULT_ICON'

        iconsize:
            a tuple representing the pixel size of the foreground (not the
            shadow***REMOVED*** image of the icon, in the format: (width, height***REMOVED*** ex.:

            GIcon('fast_food',
                  image="/media/icon/star.png",
                  iconsize=(15,10***REMOVED******REMOVED***

            Would indicate your custom icon was 15px wide and 10px height.

        shadow:
            the url of the image of the icon's shadow

        shadowsize:
            a tuple representing the pixel size of the shadow image, format is
            the same as ``iconsize``

        iconanchor:
            a tuple representing the pixel coordinate relative to the top left
            corner of the icon image at which this icon is anchored to the map.
            In (x, y***REMOVED*** format.  x increases to the right in the Google Maps
            coordinate system and y increases downwards in the Google Maps
            coordinate system.***REMOVED***

        infowindowanchor:
            The pixel coordinate relative to the top left corner of the icon
            image at which the info window is anchored to this icon.
    ***REMOVED***
    def __init__(self, varname, image=None, iconsize=None,
                 shadow=None, shadowsize=None, iconanchor=None,
                 infowindowanchor=None***REMOVED***:
        self.varname = varname
        self.image = image
        self.iconsize = iconsize
        self.shadow = shadow
        self.shadowsize = shadowsize
        self.iconanchor = iconanchor
        self.infowindowanchor = infowindowanchor

    def __eq__(self, other***REMOVED***:
        return self.varname == other.varname

    def __lt__(self, other***REMOVED***:
        return self.varname < other.varname

    def __hash__(self***REMOVED***:
        # XOR with hash of GIcon type so that hash('varname'***REMOVED*** won't
        # equal hash(GIcon('varname'***REMOVED******REMOVED***.
        return hash(self.__class__***REMOVED*** ^ hash(self.varname***REMOVED***


class GMarker(GOverlayBase***REMOVED***:
    ***REMOVED***
    A Python wrapper for the Google GMarker object.  For more information
    please see the Google Maps API Reference:
     https://developers.google.com/maps/documentation/javascript/reference#Marker

    Example:

      from django.shortcuts import render
      from django.contrib.gis.maps.google.overlays import GMarker, GEvent

      def sample_request(request***REMOVED***:
          marker = GMarker('POINT(101 26***REMOVED***'***REMOVED***
          event = GEvent('click',
                         'function(***REMOVED*** { location.href = "http://www.google.com"***REMOVED***'***REMOVED***
          marker.add_event(event***REMOVED***
          return render(request, 'mytemplate.html', {
              'google': GoogleMap(markers=[marker***REMOVED******REMOVED***,
      ***REMOVED******REMOVED***
    ***REMOVED***
    def __init__(self, geom, title=None, draggable=False, icon=None***REMOVED***:
        ***REMOVED***
        The GMarker object may initialize on GEOS Points or a parameter
        that may be instantiated into a GEOS point.  Keyword options map to
        GMarkerOptions -- so far only the title option is supported.

        Keyword Options:
         title:
           Title option for GMarker, will be displayed as a tooltip.

         draggable:
           Draggable option for GMarker, disabled by default.
        ***REMOVED***
        # If a GEOS geometry isn't passed in, try to construct one.
        if isinstance(geom, six.string_types***REMOVED***:
            geom = fromstr(geom***REMOVED***
        if isinstance(geom, (tuple, list***REMOVED******REMOVED***:
            geom = Point(geom***REMOVED***
        if isinstance(geom, Point***REMOVED***:
            self.latlng = self.latlng_from_coords(geom.coords***REMOVED***
        else:
            raise TypeError('GMarker may only initialize on GEOS Point geometry.'***REMOVED***
        # Getting the envelope for automatic zoom determination.
        self.envelope = geom.envelope
        # TODO: Add support for more GMarkerOptions
        self.title = title
        self.draggable = draggable
        self.icon = icon
        super(GMarker, self***REMOVED***.__init__(***REMOVED***

    def latlng_from_coords(self, coords***REMOVED***:
        return 'new GLatLng(%s,%s***REMOVED***' % (coords[1***REMOVED***, coords[0***REMOVED******REMOVED***

    def options(self***REMOVED***:
        result = [***REMOVED***
        if self.title:
            result.append('title: "%s"' % self.title***REMOVED***
        if self.icon:
            result.append('icon: %s' % self.icon.varname***REMOVED***
        if self.draggable:
            result.append('draggable: true'***REMOVED***
        return '{%s***REMOVED***' % ','.join(result***REMOVED***

    @property
    def js_params(self***REMOVED***:
        return '%s, %s' % (self.latlng, self.options(***REMOVED******REMOVED***
