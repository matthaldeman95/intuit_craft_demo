from __future__ import unicode_literals

from calendar import timegm

from django.conf import settings
from django.contrib.sites.shortcuts import get_current_site
from django.core.exceptions import ImproperlyConfigured, ObjectDoesNotExist
from django.http import Http404, HttpResponse
from django.template import TemplateDoesNotExist, loader
from django.utils import feedgenerator, six
from django.utils.encoding import force_text, iri_to_uri, smart_text
from django.utils.html import escape
from django.utils.http import http_date
from django.utils.timezone import get_default_timezone, is_naive, make_aware


def add_domain(domain, url, secure=False***REMOVED***:
    protocol = 'https' if secure else 'http'
    if url.startswith('//'***REMOVED***:
        # Support network-path reference (see #16753***REMOVED*** - RSS requires a protocol
        url = '%s:%s' % (protocol, url***REMOVED***
    elif not url.startswith(('http://', 'https://', 'mailto:'***REMOVED******REMOVED***:
        url = iri_to_uri('%s://%s%s' % (protocol, domain, url***REMOVED******REMOVED***
    return url


class FeedDoesNotExist(ObjectDoesNotExist***REMOVED***:
    pass


class Feed(object***REMOVED***:
    feed_type = feedgenerator.DefaultFeed
    title_template = None
    description_template = None

    def __call__(self, request, *args, **kwargs***REMOVED***:
        ***REMOVED***
            obj = self.get_object(request, *args, **kwargs***REMOVED***
        except ObjectDoesNotExist:
            raise Http404('Feed object does not exist.'***REMOVED***
        feedgen = self.get_feed(obj, request***REMOVED***
        response = HttpResponse(content_type=feedgen.content_type***REMOVED***
        if hasattr(self, 'item_pubdate'***REMOVED*** or hasattr(self, 'item_updateddate'***REMOVED***:
            # if item_pubdate or item_updateddate is defined for the feed, set
            # header so as ConditionalGetMiddleware is able to send 304 NOT MODIFIED
            response['Last-Modified'***REMOVED*** = http_date(
                timegm(feedgen.latest_post_date(***REMOVED***.utctimetuple(***REMOVED******REMOVED******REMOVED***
        feedgen.write(response, 'utf-8'***REMOVED***
        return response

    def item_title(self, item***REMOVED***:
        # Titles should be double escaped by default (see #6533***REMOVED***
        return escape(force_text(item***REMOVED******REMOVED***

    def item_description(self, item***REMOVED***:
        return force_text(item***REMOVED***

    def item_link(self, item***REMOVED***:
        ***REMOVED***
            return item.get_absolute_url(***REMOVED***
        except AttributeError:
            raise ImproperlyConfigured(
                'Give your %s class a get_absolute_url(***REMOVED*** method, or define an '
                'item_link(***REMOVED*** method in your Feed class.' % item.__class__.__name__
            ***REMOVED***

    def item_enclosures(self, item***REMOVED***:
        enc_url = self._get_dynamic_attr('item_enclosure_url', item***REMOVED***
        if enc_url:
            enc = feedgenerator.Enclosure(
                url=smart_text(enc_url***REMOVED***,
                length=smart_text(self._get_dynamic_attr('item_enclosure_length', item***REMOVED******REMOVED***,
                mime_type=smart_text(self._get_dynamic_attr('item_enclosure_mime_type', item***REMOVED******REMOVED***,
            ***REMOVED***
            return [enc***REMOVED***
        return [***REMOVED***

    def _get_dynamic_attr(self, attname, obj, default=None***REMOVED***:
        ***REMOVED***
            attr = getattr(self, attname***REMOVED***
        except AttributeError:
            return default
        if callable(attr***REMOVED***:
            # Check co_argcount rather than try/excepting the function and
            # catching the TypeError, because something inside the function
            # may raise the TypeError. This technique is more accurate.
            ***REMOVED***
                code = six.get_function_code(attr***REMOVED***
            except AttributeError:
                code = six.get_function_code(attr.__call__***REMOVED***
            if code.co_argcount == 2:       # one argument is 'self'
                return attr(obj***REMOVED***
            else:
                return attr(***REMOVED***
        return attr

    def feed_extra_kwargs(self, obj***REMOVED***:
        ***REMOVED***
        Returns an extra keyword arguments dictionary that is used when
        initializing the feed generator.
        ***REMOVED***
        return {***REMOVED***

    def item_extra_kwargs(self, item***REMOVED***:
        ***REMOVED***
        Returns an extra keyword arguments dictionary that is used with
        the `add_item` call of the feed generator.
        ***REMOVED***
        return {***REMOVED***

    def get_object(self, request, *args, **kwargs***REMOVED***:
        return None

    def get_context_data(self, **kwargs***REMOVED***:
        ***REMOVED***
        Returns a dictionary to use as extra context if either
        ``self.description_template`` or ``self.item_template`` are used.

        Default implementation preserves the old behavior
        of using {'obj': item, 'site': current_site***REMOVED*** as the context.
        ***REMOVED***
        return {'obj': kwargs.get('item'***REMOVED***, 'site': kwargs.get('site'***REMOVED******REMOVED***

    def get_feed(self, obj, request***REMOVED***:
        ***REMOVED***
        Returns a feedgenerator.DefaultFeed object, fully populated, for
        this feed. Raises FeedDoesNotExist for invalid parameters.
        ***REMOVED***
        current_site = get_current_site(request***REMOVED***

        link = self._get_dynamic_attr('link', obj***REMOVED***
        link = add_domain(current_site.domain, link, request.is_secure(***REMOVED******REMOVED***

        feed = self.feed_type(
            title=self._get_dynamic_attr('title', obj***REMOVED***,
            subtitle=self._get_dynamic_attr('subtitle', obj***REMOVED***,
            link=link,
            description=self._get_dynamic_attr('description', obj***REMOVED***,
            language=settings.LANGUAGE_CODE,
            feed_url=add_domain(
                current_site.domain,
                self._get_dynamic_attr('feed_url', obj***REMOVED*** or request.path,
                request.is_secure(***REMOVED***,
            ***REMOVED***,
            author_name=self._get_dynamic_attr('author_name', obj***REMOVED***,
            author_link=self._get_dynamic_attr('author_link', obj***REMOVED***,
            author_email=self._get_dynamic_attr('author_email', obj***REMOVED***,
            categories=self._get_dynamic_attr('categories', obj***REMOVED***,
            feed_copyright=self._get_dynamic_attr('feed_copyright', obj***REMOVED***,
            feed_guid=self._get_dynamic_attr('feed_guid', obj***REMOVED***,
            ttl=self._get_dynamic_attr('ttl', obj***REMOVED***,
            **self.feed_extra_kwargs(obj***REMOVED***
        ***REMOVED***

        title_tmp = None
        if self.title_template is not None:
            ***REMOVED***
                title_tmp = loader.get_template(self.title_template***REMOVED***
            except TemplateDoesNotExist:
                pass

        description_tmp = None
        if self.description_template is not None:
            ***REMOVED***
                description_tmp = loader.get_template(self.description_template***REMOVED***
            except TemplateDoesNotExist:
                pass

        for item in self._get_dynamic_attr('items', obj***REMOVED***:
            context = self.get_context_data(item=item, site=current_site,
                                            obj=obj, request=request***REMOVED***
            if title_tmp is not None:
                title = title_tmp.render(context, request***REMOVED***
            else:
                title = self._get_dynamic_attr('item_title', item***REMOVED***
            if description_tmp is not None:
                description = description_tmp.render(context, request***REMOVED***
            else:
                description = self._get_dynamic_attr('item_description', item***REMOVED***
            link = add_domain(
                current_site.domain,
                self._get_dynamic_attr('item_link', item***REMOVED***,
                request.is_secure(***REMOVED***,
            ***REMOVED***
            enclosures = self._get_dynamic_attr('item_enclosures', item***REMOVED***
            author_name = self._get_dynamic_attr('item_author_name', item***REMOVED***
            if author_name is not None:
                author_email = self._get_dynamic_attr('item_author_email', item***REMOVED***
                author_link = self._get_dynamic_attr('item_author_link', item***REMOVED***
            else:
                author_email = author_link = None

            tz = get_default_timezone(***REMOVED***

            pubdate = self._get_dynamic_attr('item_pubdate', item***REMOVED***
            if pubdate and is_naive(pubdate***REMOVED***:
                pubdate = make_aware(pubdate, tz***REMOVED***

            updateddate = self._get_dynamic_attr('item_updateddate', item***REMOVED***
            if updateddate and is_naive(updateddate***REMOVED***:
                updateddate = make_aware(updateddate, tz***REMOVED***

            feed.add_item(
                title=title,
                link=link,
                description=description,
                unique_id=self._get_dynamic_attr('item_guid', item, link***REMOVED***,
                unique_id_is_permalink=self._get_dynamic_attr(
                    'item_guid_is_permalink', item***REMOVED***,
                enclosures=enclosures,
                pubdate=pubdate,
                updateddate=updateddate,
                author_name=author_name,
                author_email=author_email,
                author_link=author_link,
                categories=self._get_dynamic_attr('item_categories', item***REMOVED***,
                item_copyright=self._get_dynamic_attr('item_copyright', item***REMOVED***,
                **self.item_extra_kwargs(item***REMOVED***
            ***REMOVED***
        return feed
