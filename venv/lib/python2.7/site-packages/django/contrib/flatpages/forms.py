from django import forms
from django.conf import settings
from django.contrib.flatpages.models import FlatPage
from django.utils.translation import ugettext, ugettext_lazy as _


class FlatpageForm(forms.ModelForm***REMOVED***:
    url = forms.RegexField(
        label=_("URL"***REMOVED***,
        max_length=100,
        regex=r'^[-\w/\.~***REMOVED***+$',
        help_text=_("Example: '/about/contact/'. Make sure to have leading and trailing slashes."***REMOVED***,
        error_messages={
            "invalid": _(
                "This value must contain only letters, numbers, dots, "
                "underscores, dashes, slashes or tildes."
            ***REMOVED***,
***REMOVED***
    ***REMOVED***

    class Meta:
        model = FlatPage
        fields = '__all__'

    def clean_url(self***REMOVED***:
        url = self.cleaned_data['url'***REMOVED***
        if not url.startswith('/'***REMOVED***:
            raise forms.ValidationError(
                ugettext("URL is missing a leading slash."***REMOVED***,
                code='missing_leading_slash',
            ***REMOVED***
        if (settings.APPEND_SLASH and (
                (settings.MIDDLEWARE and 'django.middleware.common.CommonMiddleware' in settings.MIDDLEWARE***REMOVED*** or
                'django.middleware.common.CommonMiddleware' in settings.MIDDLEWARE_CLASSES***REMOVED*** and
                not url.endswith('/'***REMOVED******REMOVED***:
            raise forms.ValidationError(
                ugettext("URL is missing a trailing slash."***REMOVED***,
                code='missing_trailing_slash',
            ***REMOVED***
        return url

    def clean(self***REMOVED***:
        url = self.cleaned_data.get('url'***REMOVED***
        sites = self.cleaned_data.get('sites'***REMOVED***

        same_url = FlatPage.objects.filter(url=url***REMOVED***
        if self.instance.pk:
            same_url = same_url.exclude(pk=self.instance.pk***REMOVED***

        if sites and same_url.filter(sites__in=sites***REMOVED***.exists(***REMOVED***:
            for site in sites:
                if same_url.filter(sites=site***REMOVED***.exists(***REMOVED***:
                    raise forms.ValidationError(
                        _('Flatpage with url %(url***REMOVED***s already exists for site %(site***REMOVED***s'***REMOVED***,
                        code='duplicate_url',
                        params={'url': url, 'site': site***REMOVED***,
                    ***REMOVED***

        return super(FlatpageForm, self***REMOVED***.clean(***REMOVED***
