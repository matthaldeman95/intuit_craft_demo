# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.conf import settings
from django.core import checks
from django.core.exceptions import FieldDoesNotExist
from django.db import models


class CurrentSiteManager(models.Manager***REMOVED***:
    "Use this to limit objects to those associated with the current site."

    use_in_migrations = True

    def __init__(self, field_name=None***REMOVED***:
        super(CurrentSiteManager, self***REMOVED***.__init__(***REMOVED***
        self.__field_name = field_name

    def check(self, **kwargs***REMOVED***:
        errors = super(CurrentSiteManager, self***REMOVED***.check(**kwargs***REMOVED***
        errors.extend(self._check_field_name(***REMOVED******REMOVED***
        return errors

    def _check_field_name(self***REMOVED***:
        field_name = self._get_field_name(***REMOVED***
        ***REMOVED***
            field = self.model._meta.get_field(field_name***REMOVED***
        except FieldDoesNotExist:
            return [
                checks.Error(
                    "CurrentSiteManager could not find a field named '%s'." % field_name,
                    obj=self,
                    id='sites.E001',
                ***REMOVED***
            ***REMOVED***

        if not field.many_to_many and not isinstance(field, (models.ForeignKey***REMOVED******REMOVED***:
            return [
                checks.Error(
                    "CurrentSiteManager cannot use '%s.%s' as it is not a foreign key or a many-to-many field." % (
                        self.model._meta.object_name, field_name
                    ***REMOVED***,
                    obj=self,
                    id='sites.E002',
                ***REMOVED***
            ***REMOVED***

        return [***REMOVED***

    def _get_field_name(self***REMOVED***:
        ***REMOVED*** Return self.__field_name or 'site' or 'sites'. ***REMOVED***

        if not self.__field_name:
            ***REMOVED***
                self.model._meta.get_field('site'***REMOVED***
            except FieldDoesNotExist:
                self.__field_name = 'sites'
            else:
                self.__field_name = 'site'
        return self.__field_name

    def get_queryset(self***REMOVED***:
        return super(CurrentSiteManager, self***REMOVED***.get_queryset(***REMOVED***.filter(
            **{self._get_field_name(***REMOVED*** + '__id': settings.SITE_ID***REMOVED******REMOVED***
