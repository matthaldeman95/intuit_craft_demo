from __future__ import unicode_literals

import string

from django.core.exceptions import ImproperlyConfigured, ValidationError
from django.db import models
from django.db.models.signals import pre_delete, pre_save
from django.http.request import split_domain_port
from django.utils.encoding import python_2_unicode_compatible
from django.utils.translation import ugettext_lazy as _

SITE_CACHE = {***REMOVED***


def _simple_domain_name_validator(value***REMOVED***:
    ***REMOVED***
    Validates that the given value contains no whitespaces to prevent common
    typos.
    ***REMOVED***
    if not value:
        return
    checks = ((s in value***REMOVED*** for s in string.whitespace***REMOVED***
    if any(checks***REMOVED***:
        raise ValidationError(
            _("The domain name cannot contain any spaces or tabs."***REMOVED***,
            code='invalid',
        ***REMOVED***


class SiteManager(models.Manager***REMOVED***:
    use_in_migrations = True

    def _get_site_by_id(self, site_id***REMOVED***:
        if site_id not in SITE_CACHE:
            site = self.get(pk=site_id***REMOVED***
            SITE_CACHE[site_id***REMOVED*** = site
        return SITE_CACHE[site_id***REMOVED***

    def _get_site_by_request(self, request***REMOVED***:
        host = request.get_host(***REMOVED***
        ***REMOVED***
            # First attempt to look up the site by host with or without port.
            if host not in SITE_CACHE:
                SITE_CACHE[host***REMOVED*** = self.get(domain__iexact=host***REMOVED***
            return SITE_CACHE[host***REMOVED***
        except Site.DoesNotExist:
            # Fallback to looking up site after stripping port from the host.
            domain, port = split_domain_port(host***REMOVED***
            if not port:
                raise
            if domain not in SITE_CACHE:
                SITE_CACHE[domain***REMOVED*** = self.get(domain__iexact=domain***REMOVED***
            return SITE_CACHE[domain***REMOVED***

    def get_current(self, request=None***REMOVED***:
        ***REMOVED***
        Returns the current Site based on the SITE_ID in the project's settings.
        If SITE_ID isn't defined, it returns the site with domain matching
        request.get_host(***REMOVED***. The ``Site`` object is cached the first time it's
        retrieved from the database.
        ***REMOVED***
        from django.conf import settings
        if getattr(settings, 'SITE_ID', ''***REMOVED***:
            site_id = settings.SITE_ID
            return self._get_site_by_id(site_id***REMOVED***
        elif request:
            return self._get_site_by_request(request***REMOVED***

        raise ImproperlyConfigured(
            "You're using the Django \"sites framework\" without having "
            "set the SITE_ID setting. Create a site in your database and "
            "set the SITE_ID setting or pass a request to "
            "Site.objects.get_current(***REMOVED*** to fix this error."
        ***REMOVED***

    def clear_cache(self***REMOVED***:
        ***REMOVED***Clears the ``Site`` object cache.***REMOVED***
        global SITE_CACHE
        SITE_CACHE = {***REMOVED***

    def get_by_natural_key(self, domain***REMOVED***:
        return self.get(domain=domain***REMOVED***


@python_2_unicode_compatible
class Site(models.Model***REMOVED***:

    domain = models.CharField(
        _('domain name'***REMOVED***,
        max_length=100,
        validators=[_simple_domain_name_validator***REMOVED***,
        unique=True,
    ***REMOVED***
    name = models.CharField(_('display name'***REMOVED***, max_length=50***REMOVED***
    objects = SiteManager(***REMOVED***

    class Meta:
        db_table = 'django_site'
        verbose_name = _('site'***REMOVED***
        verbose_name_plural = _('sites'***REMOVED***
        ordering = ('domain',***REMOVED***

    def __str__(self***REMOVED***:
        return self.domain

    def natural_key(self***REMOVED***:
        return (self.domain,***REMOVED***


def clear_site_cache(sender, **kwargs***REMOVED***:
    ***REMOVED***
    Clears the cache (if primed***REMOVED*** each time a site is saved or deleted
    ***REMOVED***
    instance = kwargs['instance'***REMOVED***
    using = kwargs['using'***REMOVED***
    ***REMOVED***
        del SITE_CACHE[instance.pk***REMOVED***
    except KeyError:
        pass
    ***REMOVED***
        del SITE_CACHE[Site.objects.using(using***REMOVED***.get(pk=instance.pk***REMOVED***.domain***REMOVED***
    except (KeyError, Site.DoesNotExist***REMOVED***:
        pass
pre_save.connect(clear_site_cache, sender=Site***REMOVED***
pre_delete.connect(clear_site_cache, sender=Site***REMOVED***
