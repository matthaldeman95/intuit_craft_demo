***REMOVED***
Creates the default Site object.
***REMOVED***

from django.apps import apps as global_apps
from django.conf import settings
from django.core.management.color import no_style
from django.db import DEFAULT_DB_ALIAS, connections, router


def create_default_site(app_config, verbosity=2, interactive=True, using=DEFAULT_DB_ALIAS, apps=global_apps, **kwargs***REMOVED***:
    ***REMOVED***
        Site = apps.get_model('sites', 'Site'***REMOVED***
    except LookupError:
        return

    if not router.allow_migrate_model(using, Site***REMOVED***:
        return

    if not Site.objects.using(using***REMOVED***.exists(***REMOVED***:
        # The default settings set SITE_ID = 1, and some tests in Django's test
        # suite rely on this value. However, if database sequences are reused
        # (e.g. in the test suite after flush/syncdb***REMOVED***, it isn't guaranteed that
        # the next id will be 1, so we coerce it. See #15573 and #16353. This
        # can also crop up outside of tests - see #15346.
        if verbosity >= 2:
            print("Creating example.com Site object"***REMOVED***
        Site(pk=getattr(settings, 'SITE_ID', 1***REMOVED***, domain="example.com", name="example.com"***REMOVED***.save(using=using***REMOVED***

        # We set an explicit pk instead of relying on auto-incrementation,
        # so we need to reset the database sequence. See #17415.
        sequence_sql = connections[using***REMOVED***.ops.sequence_reset_sql(no_style(***REMOVED***, [Site***REMOVED******REMOVED***
        if sequence_sql:
            if verbosity >= 2:
                print("Resetting sequence"***REMOVED***
            with connections[using***REMOVED***.cursor(***REMOVED*** as cursor:
                for command in sequence_sql:
                    cursor.execute(command***REMOVED***
