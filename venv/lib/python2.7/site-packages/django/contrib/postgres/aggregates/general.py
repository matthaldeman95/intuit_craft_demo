from django.db.models.aggregates import Aggregate

__all__ = [
    'ArrayAgg', 'BitAnd', 'BitOr', 'BoolAnd', 'BoolOr', 'StringAgg',
***REMOVED***


class ArrayAgg(Aggregate***REMOVED***:
    function = 'ARRAY_AGG'

    def convert_value(self, value, expression, connection, context***REMOVED***:
        if not value:
            return [***REMOVED***
        return value


class BitAnd(Aggregate***REMOVED***:
    function = 'BIT_AND'


class BitOr(Aggregate***REMOVED***:
    function = 'BIT_OR'


class BoolAnd(Aggregate***REMOVED***:
    function = 'BOOL_AND'


class BoolOr(Aggregate***REMOVED***:
    function = 'BOOL_OR'


class StringAgg(Aggregate***REMOVED***:
    function = 'STRING_AGG'
    template = "%(function***REMOVED***s(%(expressions***REMOVED***s, '%(delimiter***REMOVED***s'***REMOVED***"

    def __init__(self, expression, delimiter, **extra***REMOVED***:
        super(StringAgg, self***REMOVED***.__init__(expression, delimiter=delimiter, **extra***REMOVED***

    def convert_value(self, value, expression, connection, context***REMOVED***:
        if not value:
            return ''
        return value
