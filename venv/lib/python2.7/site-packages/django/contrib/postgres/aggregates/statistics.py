from django.db.models import FloatField, IntegerField
from django.db.models.aggregates import Aggregate

__all__ = [
    'CovarPop', 'Corr', 'RegrAvgX', 'RegrAvgY', 'RegrCount', 'RegrIntercept',
    'RegrR2', 'RegrSlope', 'RegrSXX', 'RegrSXY', 'RegrSYY', 'StatAggregate',
***REMOVED***


class StatAggregate(Aggregate***REMOVED***:
    def __init__(self, y, x, output_field=FloatField(***REMOVED******REMOVED***:
        if not x or not y:
            raise ValueError('Both y and x must be provided.'***REMOVED***
        super(StatAggregate, self***REMOVED***.__init__(y=y, x=x, output_field=output_field***REMOVED***
        self.x = x
        self.y = y
        self.source_expressions = self._parse_expressions(self.y, self.x***REMOVED***

    def get_source_expressions(self***REMOVED***:
        return self.y, self.x

    def set_source_expressions(self, exprs***REMOVED***:
        self.y, self.x = exprs

    def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False***REMOVED***:
        return super(Aggregate, self***REMOVED***.resolve_expression(query, allow_joins, reuse, summarize***REMOVED***


class Corr(StatAggregate***REMOVED***:
    function = 'CORR'


class CovarPop(StatAggregate***REMOVED***:
    def __init__(self, y, x, sample=False***REMOVED***:
        self.function = 'COVAR_SAMP' if sample else 'COVAR_POP'
        super(CovarPop, self***REMOVED***.__init__(y, x***REMOVED***


class RegrAvgX(StatAggregate***REMOVED***:
    function = 'REGR_AVGX'


class RegrAvgY(StatAggregate***REMOVED***:
    function = 'REGR_AVGY'


class RegrCount(StatAggregate***REMOVED***:
    function = 'REGR_COUNT'

    def __init__(self, y, x***REMOVED***:
        super(RegrCount, self***REMOVED***.__init__(y=y, x=x, output_field=IntegerField(***REMOVED******REMOVED***

    def convert_value(self, value, expression, connection, context***REMOVED***:
        if value is None:
            return 0
        return int(value***REMOVED***


class RegrIntercept(StatAggregate***REMOVED***:
    function = 'REGR_INTERCEPT'


class RegrR2(StatAggregate***REMOVED***:
    function = 'REGR_R2'


class RegrSlope(StatAggregate***REMOVED***:
    function = 'REGR_SLOPE'


class RegrSXX(StatAggregate***REMOVED***:
    function = 'REGR_SXX'


class RegrSXY(StatAggregate***REMOVED***:
    function = 'REGR_SXY'


class RegrSYY(StatAggregate***REMOVED***:
    function = 'REGR_SYY'
