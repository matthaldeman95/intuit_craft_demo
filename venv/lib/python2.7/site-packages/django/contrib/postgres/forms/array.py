import copy
from itertools import chain

from django import forms
from django.contrib.postgres.validators import (
    ArrayMaxLengthValidator, ArrayMinLengthValidator,
***REMOVED***
from django.core.exceptions import ValidationError
from django.utils import six
from django.utils.safestring import mark_safe
from django.utils.translation import ugettext_lazy as _

from ..utils import prefix_validation_error


class SimpleArrayField(forms.CharField***REMOVED***:
    default_error_messages = {
        'item_invalid': _('Item %(nth***REMOVED***s in the array did not validate: '***REMOVED***,
***REMOVED***

    def __init__(self, base_field, delimiter=',', max_length=None, min_length=None, *args, **kwargs***REMOVED***:
        self.base_field = base_field
        self.delimiter = delimiter
        super(SimpleArrayField, self***REMOVED***.__init__(*args, **kwargs***REMOVED***
        if min_length is not None:
            self.min_length = min_length
            self.validators.append(ArrayMinLengthValidator(int(min_length***REMOVED******REMOVED******REMOVED***
        if max_length is not None:
            self.max_length = max_length
            self.validators.append(ArrayMaxLengthValidator(int(max_length***REMOVED******REMOVED******REMOVED***

    def prepare_value(self, value***REMOVED***:
        if isinstance(value, list***REMOVED***:
            return self.delimiter.join(six.text_type(self.base_field.prepare_value(v***REMOVED******REMOVED*** for v in value***REMOVED***
        return value

    def to_python(self, value***REMOVED***:
        if value:
            items = value.split(self.delimiter***REMOVED***
        else:
            items = [***REMOVED***
        errors = [***REMOVED***
        values = [***REMOVED***
        for index, item in enumerate(items***REMOVED***:
            ***REMOVED***
                values.append(self.base_field.to_python(item***REMOVED******REMOVED***
            except ValidationError as error:
                errors.append(prefix_validation_error(
                    error,
                    prefix=self.error_messages['item_invalid'***REMOVED***,
                    code='item_invalid',
                    params={'nth': index***REMOVED***,
                ***REMOVED******REMOVED***
        if errors:
            raise ValidationError(errors***REMOVED***
        return values

    def validate(self, value***REMOVED***:
        super(SimpleArrayField, self***REMOVED***.validate(value***REMOVED***
        errors = [***REMOVED***
        for index, item in enumerate(value***REMOVED***:
            ***REMOVED***
                self.base_field.validate(item***REMOVED***
            except ValidationError as error:
                errors.append(prefix_validation_error(
                    error,
                    prefix=self.error_messages['item_invalid'***REMOVED***,
                    code='item_invalid',
                    params={'nth': index***REMOVED***,
                ***REMOVED******REMOVED***
        if errors:
            raise ValidationError(errors***REMOVED***

    def run_validators(self, value***REMOVED***:
        super(SimpleArrayField, self***REMOVED***.run_validators(value***REMOVED***
        errors = [***REMOVED***
        for index, item in enumerate(value***REMOVED***:
            ***REMOVED***
                self.base_field.run_validators(item***REMOVED***
            except ValidationError as error:
                errors.append(prefix_validation_error(
                    error,
                    prefix=self.error_messages['item_invalid'***REMOVED***,
                    code='item_invalid',
                    params={'nth': index***REMOVED***,
                ***REMOVED******REMOVED***
        if errors:
            raise ValidationError(errors***REMOVED***


class SplitArrayWidget(forms.Widget***REMOVED***:

    def __init__(self, widget, size, **kwargs***REMOVED***:
        self.widget = widget(***REMOVED*** if isinstance(widget, type***REMOVED*** else widget
        self.size = size
        super(SplitArrayWidget, self***REMOVED***.__init__(**kwargs***REMOVED***

    @property
    def is_hidden(self***REMOVED***:
        return self.widget.is_hidden

    def value_from_datadict(self, data, files, name***REMOVED***:
        return [self.widget.value_from_datadict(data, files, '%s_%s' % (name, index***REMOVED******REMOVED***
                for index in range(self.size***REMOVED******REMOVED***

    def value_omitted_from_data(self, data, files, name***REMOVED***:
        return all(
            self.widget.value_omitted_from_data(data, files, '%s_%s' % (name, index***REMOVED******REMOVED***
            for index in range(self.size***REMOVED***
        ***REMOVED***

    def id_for_label(self, id_***REMOVED***:
        # See the comment for RadioSelect.id_for_label(***REMOVED***
        if id_:
            id_ += '_0'
        return id_

    def render(self, name, value, attrs=None***REMOVED***:
        if self.is_localized:
            self.widget.is_localized = self.is_localized
        value = value or [***REMOVED***
        output = [***REMOVED***
        final_attrs = self.build_attrs(attrs***REMOVED***
        id_ = final_attrs.get('id'***REMOVED***
        for i in range(max(len(value***REMOVED***, self.size***REMOVED******REMOVED***:
            ***REMOVED***
                widget_value = value[i***REMOVED***
            except IndexError:
                widget_value = None
            if id_:
                final_attrs = dict(final_attrs, id='%s_%s' % (id_, i***REMOVED******REMOVED***
            output.append(self.widget.render(name + '_%s' % i, widget_value, final_attrs***REMOVED******REMOVED***
        return mark_safe(self.format_output(output***REMOVED******REMOVED***

    def format_output(self, rendered_widgets***REMOVED***:
        return ''.join(rendered_widgets***REMOVED***

    @property
    def media(self***REMOVED***:
        return self.widget.media

    def __deepcopy__(self, memo***REMOVED***:
        obj = super(SplitArrayWidget, self***REMOVED***.__deepcopy__(memo***REMOVED***
        obj.widget = copy.deepcopy(self.widget***REMOVED***
        return obj

    @property
    def needs_multipart_form(self***REMOVED***:
        return self.widget.needs_multipart_form


class SplitArrayField(forms.Field***REMOVED***:
    default_error_messages = {
        'item_invalid': _('Item %(nth***REMOVED***s in the array did not validate: '***REMOVED***,
***REMOVED***

    def __init__(self, base_field, size, remove_trailing_nulls=False, **kwargs***REMOVED***:
        self.base_field = base_field
        self.size = size
        self.remove_trailing_nulls = remove_trailing_nulls
        widget = SplitArrayWidget(widget=base_field.widget, size=size***REMOVED***
        kwargs.setdefault('widget', widget***REMOVED***
        super(SplitArrayField, self***REMOVED***.__init__(**kwargs***REMOVED***

    def clean(self, value***REMOVED***:
        cleaned_data = [***REMOVED***
        errors = [***REMOVED***
        if not any(value***REMOVED*** and self.required:
            raise ValidationError(self.error_messages['required'***REMOVED******REMOVED***
        max_size = max(self.size, len(value***REMOVED******REMOVED***
        for index in range(max_size***REMOVED***:
            item = value[index***REMOVED***
            ***REMOVED***
                cleaned_data.append(self.base_field.clean(item***REMOVED******REMOVED***
            except ValidationError as error:
                errors.append(prefix_validation_error(
                    error,
                    self.error_messages['item_invalid'***REMOVED***,
                    code='item_invalid',
                    params={'nth': index***REMOVED***,
                ***REMOVED******REMOVED***
                cleaned_data.append(None***REMOVED***
            else:
                errors.append(None***REMOVED***
        if self.remove_trailing_nulls:
            null_index = None
            for i, value in reversed(list(enumerate(cleaned_data***REMOVED******REMOVED******REMOVED***:
                if value in self.base_field.empty_values:
                    null_index = i
                else:
                    break
            if null_index is not None:
                cleaned_data = cleaned_data[:null_index***REMOVED***
                errors = errors[:null_index***REMOVED***
        errors = list(filter(None, errors***REMOVED******REMOVED***
        if errors:
            raise ValidationError(list(chain.from_iterable(errors***REMOVED******REMOVED******REMOVED***
        return cleaned_data
