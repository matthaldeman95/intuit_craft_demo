from psycopg2.extras import DateRange, DateTimeTZRange, NumericRange

from django import forms
from django.core import exceptions
from django.forms.widgets import MultiWidget
from django.utils.translation import ugettext_lazy as _

__all__ = ['IntegerRangeField', 'FloatRangeField', 'DateTimeRangeField', 'DateRangeField'***REMOVED***


class BaseRangeField(forms.MultiValueField***REMOVED***:
    default_error_messages = {
        'invalid': _('Enter two valid values.'***REMOVED***,
        'bound_ordering': _('The start of the range must not exceed the end of the range.'***REMOVED***,
***REMOVED***

    def __init__(self, **kwargs***REMOVED***:
        if 'widget' not in kwargs:
            kwargs['widget'***REMOVED*** = RangeWidget(self.base_field.widget***REMOVED***
        if 'fields' not in kwargs:
            kwargs['fields'***REMOVED*** = [self.base_field(required=False***REMOVED***, self.base_field(required=False***REMOVED******REMOVED***
        kwargs.setdefault('required', False***REMOVED***
        kwargs.setdefault('require_all_fields', False***REMOVED***
        super(BaseRangeField, self***REMOVED***.__init__(**kwargs***REMOVED***

    def prepare_value(self, value***REMOVED***:
        lower_base, upper_base = self.fields
        if isinstance(value, self.range_type***REMOVED***:
            return [
                lower_base.prepare_value(value.lower***REMOVED***,
                upper_base.prepare_value(value.upper***REMOVED***,
            ***REMOVED***
        if value is None:
            return [
                lower_base.prepare_value(None***REMOVED***,
                upper_base.prepare_value(None***REMOVED***,
            ***REMOVED***
        return value

    def compress(self, values***REMOVED***:
        if not values:
            return None
        lower, upper = values
        if lower is not None and upper is not None and lower > upper:
            raise exceptions.ValidationError(
                self.error_messages['bound_ordering'***REMOVED***,
                code='bound_ordering',
            ***REMOVED***
        ***REMOVED***
            range_value = self.range_type(lower, upper***REMOVED***
        except TypeError:
            raise exceptions.ValidationError(
                self.error_messages['invalid'***REMOVED***,
                code='invalid',
            ***REMOVED***
        else:
            return range_value


class IntegerRangeField(BaseRangeField***REMOVED***:
    default_error_messages = {'invalid': _('Enter two whole numbers.'***REMOVED******REMOVED***
    base_field = forms.IntegerField
    range_type = NumericRange


class FloatRangeField(BaseRangeField***REMOVED***:
    default_error_messages = {'invalid': _('Enter two numbers.'***REMOVED******REMOVED***
    base_field = forms.FloatField
    range_type = NumericRange


class DateTimeRangeField(BaseRangeField***REMOVED***:
    default_error_messages = {'invalid': _('Enter two valid date/times.'***REMOVED******REMOVED***
    base_field = forms.DateTimeField
    range_type = DateTimeTZRange


class DateRangeField(BaseRangeField***REMOVED***:
    default_error_messages = {'invalid': _('Enter two valid dates.'***REMOVED******REMOVED***
    base_field = forms.DateField
    range_type = DateRange


class RangeWidget(MultiWidget***REMOVED***:
    def __init__(self, base_widget, attrs=None***REMOVED***:
        widgets = (base_widget, base_widget***REMOVED***
        super(RangeWidget, self***REMOVED***.__init__(widgets, attrs***REMOVED***

    def decompress(self, value***REMOVED***:
        if value:
            return (value.lower, value.upper***REMOVED***
        return (None, None***REMOVED***
