import json

from django.contrib.postgres import forms, lookups
from django.contrib.postgres.fields.array import ArrayField
from django.core import exceptions
from django.db.models import Field, TextField, Transform
from django.utils import six
from django.utils.encoding import force_text
from django.utils.translation import ugettext_lazy as _

__all__ = ['HStoreField'***REMOVED***


class HStoreField(Field***REMOVED***:
    empty_strings_allowed = False
    description = _('Map of strings to strings'***REMOVED***
    default_error_messages = {
        'not_a_string': _('The value of "%(key***REMOVED***s" is not a string.'***REMOVED***,
***REMOVED***

    def db_type(self, connection***REMOVED***:
        return 'hstore'

    def get_transform(self, name***REMOVED***:
        transform = super(HStoreField, self***REMOVED***.get_transform(name***REMOVED***
        if transform:
            return transform
        return KeyTransformFactory(name***REMOVED***

    def validate(self, value, model_instance***REMOVED***:
        super(HStoreField, self***REMOVED***.validate(value, model_instance***REMOVED***
        for key, val in value.items(***REMOVED***:
            if not isinstance(val, six.string_types***REMOVED***:
                raise exceptions.ValidationError(
                    self.error_messages['not_a_string'***REMOVED***,
                    code='not_a_string',
                    params={'key': key***REMOVED***,
                ***REMOVED***

    def to_python(self, value***REMOVED***:
        if isinstance(value, six.string_types***REMOVED***:
            value = json.loads(value***REMOVED***
        return value

    def value_to_string(self, obj***REMOVED***:
        return json.dumps(self.value_from_object(obj***REMOVED******REMOVED***

    def formfield(self, **kwargs***REMOVED***:
        defaults = {
            'form_class': forms.HStoreField,
    ***REMOVED***
        defaults.update(kwargs***REMOVED***
        return super(HStoreField, self***REMOVED***.formfield(**defaults***REMOVED***

    def get_prep_value(self, value***REMOVED***:
        value = super(HStoreField, self***REMOVED***.get_prep_value(value***REMOVED***

        if isinstance(value, dict***REMOVED***:
            prep_value = {***REMOVED***
            for key, val in value.items(***REMOVED***:
                key = force_text(key***REMOVED***
                if val is not None:
                    val = force_text(val***REMOVED***
                prep_value[key***REMOVED*** = val
            value = prep_value

        if isinstance(value, list***REMOVED***:
            value = [force_text(item***REMOVED*** for item in value***REMOVED***

        return value

HStoreField.register_lookup(lookups.DataContains***REMOVED***
HStoreField.register_lookup(lookups.ContainedBy***REMOVED***
HStoreField.register_lookup(lookups.HasKey***REMOVED***
HStoreField.register_lookup(lookups.HasKeys***REMOVED***
HStoreField.register_lookup(lookups.HasAnyKeys***REMOVED***


class KeyTransform(Transform***REMOVED***:
    output_field = TextField(***REMOVED***

    def __init__(self, key_name, *args, **kwargs***REMOVED***:
        super(KeyTransform, self***REMOVED***.__init__(*args, **kwargs***REMOVED***
        self.key_name = key_name

    def as_sql(self, compiler, connection***REMOVED***:
        lhs, params = compiler.compile(self.lhs***REMOVED***
        return "(%s -> '%s'***REMOVED***" % (lhs, self.key_name***REMOVED***, params


class KeyTransformFactory(object***REMOVED***:

    def __init__(self, key_name***REMOVED***:
        self.key_name = key_name

    def __call__(self, *args, **kwargs***REMOVED***:
        return KeyTransform(self.key_name, *args, **kwargs***REMOVED***


@HStoreField.register_lookup
class KeysTransform(Transform***REMOVED***:
    lookup_name = 'keys'
    function = 'akeys'
    output_field = ArrayField(TextField(***REMOVED******REMOVED***


@HStoreField.register_lookup
class ValuesTransform(Transform***REMOVED***:
    lookup_name = 'values'
    function = 'avals'
    output_field = ArrayField(TextField(***REMOVED******REMOVED***
