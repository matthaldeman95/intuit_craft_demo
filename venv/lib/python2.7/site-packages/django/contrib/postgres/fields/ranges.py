import json

from psycopg2.extras import DateRange, DateTimeTZRange, NumericRange, Range

from django.contrib.postgres import forms, lookups
from django.db import models
from django.utils import six

from .utils import AttributeSetter

__all__ = [
    'RangeField', 'IntegerRangeField', 'BigIntegerRangeField',
    'FloatRangeField', 'DateTimeRangeField', 'DateRangeField',
***REMOVED***


class RangeField(models.Field***REMOVED***:
    empty_strings_allowed = False

    def __init__(self, *args, **kwargs***REMOVED***:
        # Initializing base_field here ensures that its model matches the model for self.
        if hasattr(self, 'base_field'***REMOVED***:
            self.base_field = self.base_field(***REMOVED***
        super(RangeField, self***REMOVED***.__init__(*args, **kwargs***REMOVED***

    @property
    def model(self***REMOVED***:
        ***REMOVED***
            return self.__dict__['model'***REMOVED***
        except KeyError:
            raise AttributeError("'%s' object has no attribute 'model'" % self.__class__.__name__***REMOVED***

    @model.setter
    def model(self, model***REMOVED***:
        self.__dict__['model'***REMOVED*** = model
        self.base_field.model = model

    def get_prep_value(self, value***REMOVED***:
        if value is None:
            return None
        elif isinstance(value, Range***REMOVED***:
            return value
        elif isinstance(value, (list, tuple***REMOVED******REMOVED***:
            return self.range_type(value[0***REMOVED***, value[1***REMOVED******REMOVED***
        return value

    def to_python(self, value***REMOVED***:
        if isinstance(value, six.string_types***REMOVED***:
            # Assume we're deserializing
            vals = json.loads(value***REMOVED***
            for end in ('lower', 'upper'***REMOVED***:
                if end in vals:
                    vals[end***REMOVED*** = self.base_field.to_python(vals[end***REMOVED******REMOVED***
            value = self.range_type(**vals***REMOVED***
        elif isinstance(value, (list, tuple***REMOVED******REMOVED***:
            value = self.range_type(value[0***REMOVED***, value[1***REMOVED******REMOVED***
        return value

    def set_attributes_from_name(self, name***REMOVED***:
        super(RangeField, self***REMOVED***.set_attributes_from_name(name***REMOVED***
        self.base_field.set_attributes_from_name(name***REMOVED***

    def value_to_string(self, obj***REMOVED***:
        value = self.value_from_object(obj***REMOVED***
        if value is None:
            return None
        if value.isempty:
            return json.dumps({"empty": True***REMOVED******REMOVED***
        base_field = self.base_field
        result = {"bounds": value._bounds***REMOVED***
        for end in ('lower', 'upper'***REMOVED***:
            val = getattr(value, end***REMOVED***
            if val is None:
                result[end***REMOVED*** = None
            else:
                obj = AttributeSetter(base_field.attname, val***REMOVED***
                result[end***REMOVED*** = base_field.value_to_string(obj***REMOVED***
        return json.dumps(result***REMOVED***

    def formfield(self, **kwargs***REMOVED***:
        kwargs.setdefault('form_class', self.form_field***REMOVED***
        return super(RangeField, self***REMOVED***.formfield(**kwargs***REMOVED***


class IntegerRangeField(RangeField***REMOVED***:
    base_field = models.IntegerField
    range_type = NumericRange
    form_field = forms.IntegerRangeField

    def db_type(self, connection***REMOVED***:
        return 'int4range'


class BigIntegerRangeField(RangeField***REMOVED***:
    base_field = models.BigIntegerField
    range_type = NumericRange
    form_field = forms.IntegerRangeField

    def db_type(self, connection***REMOVED***:
        return 'int8range'


class FloatRangeField(RangeField***REMOVED***:
    base_field = models.FloatField
    range_type = NumericRange
    form_field = forms.FloatRangeField

    def db_type(self, connection***REMOVED***:
        return 'numrange'


class DateTimeRangeField(RangeField***REMOVED***:
    base_field = models.DateTimeField
    range_type = DateTimeTZRange
    form_field = forms.DateTimeRangeField

    def db_type(self, connection***REMOVED***:
        return 'tstzrange'


class DateRangeField(RangeField***REMOVED***:
    base_field = models.DateField
    range_type = DateRange
    form_field = forms.DateRangeField

    def db_type(self, connection***REMOVED***:
        return 'daterange'


RangeField.register_lookup(lookups.DataContains***REMOVED***
RangeField.register_lookup(lookups.ContainedBy***REMOVED***
RangeField.register_lookup(lookups.Overlap***REMOVED***


class RangeContainedBy(models.Lookup***REMOVED***:
    lookup_name = 'contained_by'
    type_mapping = {
        'integer': 'int4range',
        'bigint': 'int8range',
        'double precision': 'numrange',
        'date': 'daterange',
        'timestamp with time zone': 'tstzrange',
***REMOVED***

    def as_sql(self, qn, connection***REMOVED***:
        field = self.lhs.output_field
        if isinstance(field, models.FloatField***REMOVED***:
            sql = '%s::numeric <@ %s::{***REMOVED***'.format(self.type_mapping[field.db_type(connection***REMOVED******REMOVED******REMOVED***
        else:
            sql = '%s <@ %s::{***REMOVED***'.format(self.type_mapping[field.db_type(connection***REMOVED******REMOVED******REMOVED***
        lhs, lhs_params = self.process_lhs(qn, connection***REMOVED***
        rhs, rhs_params = self.process_rhs(qn, connection***REMOVED***
        params = lhs_params + rhs_params
        return sql % (lhs, rhs***REMOVED***, params

    def get_prep_lookup(self***REMOVED***:
        return RangeField(***REMOVED***.get_prep_value(self.rhs***REMOVED***


models.DateField.register_lookup(RangeContainedBy***REMOVED***
models.DateTimeField.register_lookup(RangeContainedBy***REMOVED***
models.IntegerField.register_lookup(RangeContainedBy***REMOVED***
models.BigIntegerField.register_lookup(RangeContainedBy***REMOVED***
models.FloatField.register_lookup(RangeContainedBy***REMOVED***


@RangeField.register_lookup
class FullyLessThan(lookups.PostgresSimpleLookup***REMOVED***:
    lookup_name = 'fully_lt'
    operator = '<<'


@RangeField.register_lookup
class FullGreaterThan(lookups.PostgresSimpleLookup***REMOVED***:
    lookup_name = 'fully_gt'
    operator = '>>'


@RangeField.register_lookup
class NotLessThan(lookups.PostgresSimpleLookup***REMOVED***:
    lookup_name = 'not_lt'
    operator = '&>'


@RangeField.register_lookup
class NotGreaterThan(lookups.PostgresSimpleLookup***REMOVED***:
    lookup_name = 'not_gt'
    operator = '&<'


@RangeField.register_lookup
class AdjacentToLookup(lookups.PostgresSimpleLookup***REMOVED***:
    lookup_name = 'adjacent_to'
    operator = '-|-'


@RangeField.register_lookup
class RangeStartsWith(models.Transform***REMOVED***:
    lookup_name = 'startswith'
    function = 'lower'

    @property
    def output_field(self***REMOVED***:
        return self.lhs.output_field.base_field


@RangeField.register_lookup
class RangeEndsWith(models.Transform***REMOVED***:
    lookup_name = 'endswith'
    function = 'upper'

    @property
    def output_field(self***REMOVED***:
        return self.lhs.output_field.base_field


@RangeField.register_lookup
class IsEmpty(models.Transform***REMOVED***:
    lookup_name = 'isempty'
    function = 'isempty'
    output_field = models.BooleanField(***REMOVED***
