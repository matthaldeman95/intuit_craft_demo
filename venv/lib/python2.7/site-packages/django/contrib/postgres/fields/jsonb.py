import json

from psycopg2.extras import Json

from django.contrib.postgres import forms, lookups
from django.core import exceptions
from django.db.models import Field, Transform
from django.utils.translation import ugettext_lazy as _

__all__ = ['JSONField'***REMOVED***


class JSONField(Field***REMOVED***:
    empty_strings_allowed = False
    description = _('A JSON object'***REMOVED***
    default_error_messages = {
        'invalid': _("Value must be valid JSON."***REMOVED***,
***REMOVED***

    def db_type(self, connection***REMOVED***:
        return 'jsonb'

    def get_transform(self, name***REMOVED***:
        transform = super(JSONField, self***REMOVED***.get_transform(name***REMOVED***
        if transform:
            return transform
        return KeyTransformFactory(name***REMOVED***

    def get_prep_value(self, value***REMOVED***:
        if value is not None:
            return Json(value***REMOVED***
        return value

    def validate(self, value, model_instance***REMOVED***:
        super(JSONField, self***REMOVED***.validate(value, model_instance***REMOVED***
        ***REMOVED***
            json.dumps(value***REMOVED***
        except TypeError:
            raise exceptions.ValidationError(
                self.error_messages['invalid'***REMOVED***,
                code='invalid',
                params={'value': value***REMOVED***,
            ***REMOVED***

    def value_to_string(self, obj***REMOVED***:
        value = self.value_from_object(obj***REMOVED***
        return value

    def formfield(self, **kwargs***REMOVED***:
        defaults = {'form_class': forms.JSONField***REMOVED***
        defaults.update(kwargs***REMOVED***
        return super(JSONField, self***REMOVED***.formfield(**defaults***REMOVED***


JSONField.register_lookup(lookups.DataContains***REMOVED***
JSONField.register_lookup(lookups.ContainedBy***REMOVED***
JSONField.register_lookup(lookups.HasKey***REMOVED***
JSONField.register_lookup(lookups.HasKeys***REMOVED***
JSONField.register_lookup(lookups.HasAnyKeys***REMOVED***


class KeyTransform(Transform***REMOVED***:

    def __init__(self, key_name, *args, **kwargs***REMOVED***:
        super(KeyTransform, self***REMOVED***.__init__(*args, **kwargs***REMOVED***
        self.key_name = key_name

    def as_sql(self, compiler, connection***REMOVED***:
        key_transforms = [self.key_name***REMOVED***
        previous = self.lhs
        while isinstance(previous, KeyTransform***REMOVED***:
            key_transforms.insert(0, previous.key_name***REMOVED***
            previous = previous.lhs
        lhs, params = compiler.compile(previous***REMOVED***
        if len(key_transforms***REMOVED*** > 1:
            return "{***REMOVED*** #> %s".format(lhs***REMOVED***, [key_transforms***REMOVED*** + params
        ***REMOVED***
            int(self.key_name***REMOVED***
        except ValueError:
            lookup = "'%s'" % self.key_name
        else:
            lookup = "%s" % self.key_name
        return "%s -> %s" % (lhs, lookup***REMOVED***, params


class KeyTransformFactory(object***REMOVED***:

    def __init__(self, key_name***REMOVED***:
        self.key_name = key_name

    def __call__(self, *args, **kwargs***REMOVED***:
        return KeyTransform(self.key_name, *args, **kwargs***REMOVED***
