import copy

from django.core.exceptions import ValidationError
from django.core.validators import (
    MaxLengthValidator, MaxValueValidator, MinLengthValidator,
    MinValueValidator,
***REMOVED***
from django.utils.deconstruct import deconstructible
from django.utils.translation import ugettext_lazy as _, ungettext_lazy


class ArrayMaxLengthValidator(MaxLengthValidator***REMOVED***:
    message = ungettext_lazy(
        'List contains %(show_value***REMOVED***d item, it should contain no more than %(limit_value***REMOVED***d.',
        'List contains %(show_value***REMOVED***d items, it should contain no more than %(limit_value***REMOVED***d.',
        'limit_value'***REMOVED***


class ArrayMinLengthValidator(MinLengthValidator***REMOVED***:
    message = ungettext_lazy(
        'List contains %(show_value***REMOVED***d item, it should contain no fewer than %(limit_value***REMOVED***d.',
        'List contains %(show_value***REMOVED***d items, it should contain no fewer than %(limit_value***REMOVED***d.',
        'limit_value'***REMOVED***


@deconstructible
class KeysValidator(object***REMOVED***:
    ***REMOVED***A validator designed for HStore to require/restrict keys.***REMOVED***

    messages = {
        'missing_keys': _('Some keys were missing: %(keys***REMOVED***s'***REMOVED***,
        'extra_keys': _('Some unknown keys were provided: %(keys***REMOVED***s'***REMOVED***,
***REMOVED***
    strict = False

    def __init__(self, keys, strict=False, messages=None***REMOVED***:
        self.keys = set(keys***REMOVED***
        self.strict = strict
        if messages is not None:
            self.messages = copy.copy(self.messages***REMOVED***
            self.messages.update(messages***REMOVED***

    def __call__(self, value***REMOVED***:
        keys = set(value.keys(***REMOVED******REMOVED***
        missing_keys = self.keys - keys
        if missing_keys:
            raise ValidationError(
                self.messages['missing_keys'***REMOVED***,
                code='missing_keys',
                params={'keys': ', '.join(missing_keys***REMOVED******REMOVED***,
            ***REMOVED***
        if self.strict:
            extra_keys = keys - self.keys
            if extra_keys:
                raise ValidationError(
                    self.messages['extra_keys'***REMOVED***,
                    code='extra_keys',
                    params={'keys': ', '.join(extra_keys***REMOVED******REMOVED***,
                ***REMOVED***

    def __eq__(self, other***REMOVED***:
        return (
            isinstance(other, self.__class__***REMOVED*** and
            self.keys == other.keys and
            self.messages == other.messages and
            self.strict == other.strict
        ***REMOVED***

    def __ne__(self, other***REMOVED***:
        return not (self == other***REMOVED***


class RangeMaxValueValidator(MaxValueValidator***REMOVED***:
    def compare(self, a, b***REMOVED***:
        return a.upper > b
    message = _('Ensure that this range is completely less than or equal to %(limit_value***REMOVED***s.'***REMOVED***


class RangeMinValueValidator(MinValueValidator***REMOVED***:
    def compare(self, a, b***REMOVED***:
        return a.lower < b
    message = _('Ensure that this range is completely greater than or equal to %(limit_value***REMOVED***s.'***REMOVED***
