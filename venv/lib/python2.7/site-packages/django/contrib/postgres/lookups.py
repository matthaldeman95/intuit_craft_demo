from django.db.models import Lookup, Transform
from django.utils.encoding import force_text

from .search import SearchVector, SearchVectorExact, SearchVectorField


class PostgresSimpleLookup(Lookup***REMOVED***:
    def as_sql(self, qn, connection***REMOVED***:
        lhs, lhs_params = self.process_lhs(qn, connection***REMOVED***
        rhs, rhs_params = self.process_rhs(qn, connection***REMOVED***
        params = lhs_params + rhs_params
        return '%s %s %s' % (lhs, self.operator, rhs***REMOVED***, params


class DataContains(PostgresSimpleLookup***REMOVED***:
    lookup_name = 'contains'
    operator = '@>'


class ContainedBy(PostgresSimpleLookup***REMOVED***:
    lookup_name = 'contained_by'
    operator = '<@'


class Overlap(PostgresSimpleLookup***REMOVED***:
    lookup_name = 'overlap'
    operator = '&&'


class HasKey(PostgresSimpleLookup***REMOVED***:
    lookup_name = 'has_key'
    operator = '?'
    prepare_rhs = False


class HasKeys(PostgresSimpleLookup***REMOVED***:
    lookup_name = 'has_keys'
    operator = '?&'

    def get_prep_lookup(self***REMOVED***:
        return [force_text(item***REMOVED*** for item in self.rhs***REMOVED***


class HasAnyKeys(HasKeys***REMOVED***:
    lookup_name = 'has_any_keys'
    operator = '?|'


class Unaccent(Transform***REMOVED***:
    bilateral = True
    lookup_name = 'unaccent'
    function = 'UNACCENT'


class SearchLookup(SearchVectorExact***REMOVED***:
    lookup_name = 'search'

    def process_lhs(self, qn, connection***REMOVED***:
        if not isinstance(self.lhs.output_field, SearchVectorField***REMOVED***:
            self.lhs = SearchVector(self.lhs***REMOVED***
        lhs, lhs_params = super(SearchLookup, self***REMOVED***.process_lhs(qn, connection***REMOVED***
        return lhs, lhs_params


class TrigramSimilar(PostgresSimpleLookup***REMOVED***:
    lookup_name = 'trigram_similar'
    operator = '%%'
