from django.template import Library, Node, TemplateSyntaxError
from django.utils import formats
from django.utils.encoding import force_text

register = Library(***REMOVED***


@register.filter(is_safe=False***REMOVED***
def localize(value***REMOVED***:
    ***REMOVED***
    Forces a value to be rendered as a localized value,
    regardless of the value of ``settings.USE_L10N``.
    ***REMOVED***
    return force_text(formats.localize(value, use_l10n=True***REMOVED******REMOVED***


@register.filter(is_safe=False***REMOVED***
def unlocalize(value***REMOVED***:
    ***REMOVED***
    Forces a value to be rendered as a non-localized value,
    regardless of the value of ``settings.USE_L10N``.
    ***REMOVED***
    return force_text(value***REMOVED***


class LocalizeNode(Node***REMOVED***:
    def __init__(self, nodelist, use_l10n***REMOVED***:
        self.nodelist = nodelist
        self.use_l10n = use_l10n

    def __repr__(self***REMOVED***:
        return "<LocalizeNode>"

    def render(self, context***REMOVED***:
        old_setting = context.use_l10n
        context.use_l10n = self.use_l10n
        output = self.nodelist.render(context***REMOVED***
        context.use_l10n = old_setting
        return output


@register.tag('localize'***REMOVED***
def localize_tag(parser, token***REMOVED***:
    ***REMOVED***
    Forces or prevents localization of values, regardless of the value of
    `settings.USE_L10N`.

    Sample usage::

    ***REMOVED***% localize off %***REMOVED***
            var pi = {{ 3.1415 ***REMOVED******REMOVED***;
    ***REMOVED***% endlocalize %***REMOVED***
    ***REMOVED***
    use_l10n = None
    bits = list(token.split_contents(***REMOVED******REMOVED***
    if len(bits***REMOVED*** == 1:
        use_l10n = True
    elif len(bits***REMOVED*** > 2 or bits[1***REMOVED*** not in ('on', 'off'***REMOVED***:
        raise TemplateSyntaxError("%r argument should be 'on' or 'off'" % bits[0***REMOVED******REMOVED***
    else:
        use_l10n = bits[1***REMOVED*** == 'on'
    nodelist = parser.parse(('endlocalize',***REMOVED******REMOVED***
    parser.delete_first_token(***REMOVED***
    return LocalizeNode(nodelist, use_l10n***REMOVED***
