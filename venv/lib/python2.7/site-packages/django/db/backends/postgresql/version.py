***REMOVED***
Extracts the version of the PostgreSQL server.
***REMOVED***

import re

# This reg-exp is intentionally fairly flexible here.
# Needs to be able to handle stuff like:
#   PostgreSQL #.#.#
#   EnterpriseDB #.#
#   PostgreSQL #.# beta#
#   PostgreSQL #.#beta#
VERSION_RE = re.compile(r'\S+ (\d+***REMOVED***\.(\d+***REMOVED***\.?(\d+***REMOVED***?'***REMOVED***


def _parse_version(text***REMOVED***:
    "Internal parsing method. Factored out for testing purposes."
    major, major2, minor = VERSION_RE.search(text***REMOVED***.groups(***REMOVED***
    ***REMOVED***
        return int(major***REMOVED*** * 10000 + int(major2***REMOVED*** * 100 + int(minor***REMOVED***
    except (ValueError, TypeError***REMOVED***:
        return int(major***REMOVED*** * 10000 + int(major2***REMOVED*** * 100


def get_version(connection***REMOVED***:
    ***REMOVED***
    Returns an integer representing the major, minor and revision number of the
    server. Format is the one used for the return value of libpq
    PQServerVersion(***REMOVED***/``server_version`` connection attribute (available in
    newer psycopg2 versions.***REMOVED***

    For example, 90304 for 9.3.4. The last two digits will be 00 in the case of
    releases (e.g., 90400 for 'PostgreSQL 9.4'***REMOVED*** or in the case of beta and
    prereleases (e.g. 90100 for 'PostgreSQL 9.1beta2'***REMOVED***.

    PQServerVersion(***REMOVED***/``server_version`` doesn't execute a query so try that
    first, then fallback to a ``SELECT version(***REMOVED***`` query.
    ***REMOVED***
    if hasattr(connection, 'server_version'***REMOVED***:
        return connection.server_version
    else:
        with connection.cursor(***REMOVED*** as cursor:
            cursor.execute("SELECT version(***REMOVED***"***REMOVED***
            return _parse_version(cursor.fetchone(***REMOVED***[0***REMOVED******REMOVED***
