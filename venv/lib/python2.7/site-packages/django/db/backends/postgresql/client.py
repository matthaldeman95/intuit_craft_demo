***REMOVED***
import subprocess

from django.core.files.temp import NamedTemporaryFile
from django.db.backends.base.client import BaseDatabaseClient
from django.utils.six import print_


def _escape_pgpass(txt***REMOVED***:
    ***REMOVED***
    Escape a fragment of a PostgreSQL .pgpass file.
    ***REMOVED***
    return txt.replace('\\', '\\\\'***REMOVED***.replace(':', '\\:'***REMOVED***


class DatabaseClient(BaseDatabaseClient***REMOVED***:
    executable_name = 'psql'

    @classmethod
    def runshell_db(cls, conn_params***REMOVED***:
        args = [cls.executable_name***REMOVED***

        host = conn_params.get('host', ''***REMOVED***
        port = conn_params.get('port', ''***REMOVED***
        dbname = conn_params.get('database', ''***REMOVED***
        user = conn_params.get('user', ''***REMOVED***
        passwd = conn_params.get('password', ''***REMOVED***

        if user:
            args += ['-U', user***REMOVED***
        if host:
            args += ['-h', host***REMOVED***
        if port:
            args += ['-p', str(port***REMOVED******REMOVED***
        args += [dbname***REMOVED***

        temp_pgpass = None
        ***REMOVED***
            if passwd:
                # Create temporary .pgpass file.
                temp_pgpass = NamedTemporaryFile(mode='w+'***REMOVED***
                ***REMOVED***
                    print_(
                        _escape_pgpass(host***REMOVED*** or '*',
                        str(port***REMOVED*** or '*',
                        _escape_pgpass(dbname***REMOVED*** or '*',
                        _escape_pgpass(user***REMOVED*** or '*',
                        _escape_pgpass(passwd***REMOVED***,
                        file=temp_pgpass,
                        sep=':',
                        flush=True,
                    ***REMOVED***
                    os.environ['PGPASSFILE'***REMOVED*** = temp_pgpass.name
                except UnicodeEncodeError:
                    # If the current locale can't encode the data, we let
                    # the user input the password manually.
                    pass
            subprocess.call(args***REMOVED***
        finally:
            if temp_pgpass:
                temp_pgpass.close(***REMOVED***
                if 'PGPASSFILE' in os.environ:  # unit tests need cleanup
                    del os.environ['PGPASSFILE'***REMOVED***

    def runshell(self***REMOVED***:
        DatabaseClient.runshell_db(self.connection.get_connection_params(***REMOVED******REMOVED***
