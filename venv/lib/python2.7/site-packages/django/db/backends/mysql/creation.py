import subprocess
import sys

from django.db.backends.base.creation import BaseDatabaseCreation

from .client import DatabaseClient


class DatabaseCreation(BaseDatabaseCreation***REMOVED***:

    def sql_table_creation_suffix(self***REMOVED***:
        suffix = [***REMOVED***
        test_settings = self.connection.settings_dict['TEST'***REMOVED***
        if test_settings['CHARSET'***REMOVED***:
            suffix.append('CHARACTER SET %s' % test_settings['CHARSET'***REMOVED******REMOVED***
        if test_settings['COLLATION'***REMOVED***:
            suffix.append('COLLATE %s' % test_settings['COLLATION'***REMOVED******REMOVED***
        return ' '.join(suffix***REMOVED***

    def _clone_test_db(self, number, verbosity, keepdb=False***REMOVED***:
        qn = self.connection.ops.quote_name
        source_database_name = self.connection.settings_dict['NAME'***REMOVED***
        target_database_name = self.get_test_db_clone_settings(number***REMOVED***['NAME'***REMOVED***

        with self._nodb_connection.cursor(***REMOVED*** as cursor:
            ***REMOVED***
                cursor.execute("CREATE DATABASE %s" % qn(target_database_name***REMOVED******REMOVED***
            except Exception as e:
                if keepdb:
                    return
                ***REMOVED***
                    if verbosity >= 1:
                        print("Destroying old test database for alias %s..." % (
                            self._get_database_display_str(verbosity, target_database_name***REMOVED***,
                        ***REMOVED******REMOVED***
                    cursor.execute("DROP DATABASE %s" % qn(target_database_name***REMOVED******REMOVED***
                    cursor.execute("CREATE DATABASE %s" % qn(target_database_name***REMOVED******REMOVED***
                except Exception as e:
                    sys.stderr.write("Got an error recreating the test database: %s\n" % e***REMOVED***
                    sys.exit(2***REMOVED***

        dump_cmd = DatabaseClient.settings_to_cmd_args(self.connection.settings_dict***REMOVED***
        dump_cmd[0***REMOVED*** = 'mysqldump'
        dump_cmd[-1***REMOVED*** = source_database_name
        load_cmd = DatabaseClient.settings_to_cmd_args(self.connection.settings_dict***REMOVED***
        load_cmd[-1***REMOVED*** = target_database_name

        dump_proc = subprocess.Popen(dump_cmd, stdout=subprocess.PIPE***REMOVED***
        load_proc = subprocess.Popen(load_cmd, stdin=dump_proc.stdout, stdout=subprocess.PIPE***REMOVED***
        dump_proc.stdout.close(***REMOVED***    # allow dump_proc to receive a SIGPIPE if load_proc exits.
        load_proc.communicate(***REMOVED***
