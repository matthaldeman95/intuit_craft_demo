import subprocess

from django.db.backends.base.client import BaseDatabaseClient


class DatabaseClient(BaseDatabaseClient***REMOVED***:
    executable_name = 'mysql'

    @classmethod
    def settings_to_cmd_args(cls, settings_dict***REMOVED***:
        args = [cls.executable_name***REMOVED***
        db = settings_dict['OPTIONS'***REMOVED***.get('db', settings_dict['NAME'***REMOVED******REMOVED***
        user = settings_dict['OPTIONS'***REMOVED***.get('user', settings_dict['USER'***REMOVED******REMOVED***
        passwd = settings_dict['OPTIONS'***REMOVED***.get('passwd', settings_dict['PASSWORD'***REMOVED******REMOVED***
        host = settings_dict['OPTIONS'***REMOVED***.get('host', settings_dict['HOST'***REMOVED******REMOVED***
        port = settings_dict['OPTIONS'***REMOVED***.get('port', settings_dict['PORT'***REMOVED******REMOVED***
        cert = settings_dict['OPTIONS'***REMOVED***.get('ssl', {***REMOVED******REMOVED***.get('ca'***REMOVED***
        defaults_file = settings_dict['OPTIONS'***REMOVED***.get('read_default_file'***REMOVED***
        # Seems to be no good way to set sql_mode with CLI.

        if defaults_file:
            args += ["--defaults-file=%s" % defaults_file***REMOVED***
        if user:
            args += ["--user=%s" % user***REMOVED***
        if passwd:
            args += ["--password=%s" % passwd***REMOVED***
        if host:
            if '/' in host:
                args += ["--socket=%s" % host***REMOVED***
            else:
                args += ["--host=%s" % host***REMOVED***
        if port:
            args += ["--port=%s" % port***REMOVED***
        if cert:
            args += ["--ssl-ca=%s" % cert***REMOVED***
        if db:
            args += [db***REMOVED***
        return args

    def runshell(self***REMOVED***:
        args = DatabaseClient.settings_to_cmd_args(self.connection.settings_dict***REMOVED***
        subprocess.call(args***REMOVED***
