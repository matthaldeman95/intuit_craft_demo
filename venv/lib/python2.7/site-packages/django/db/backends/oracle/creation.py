import sys
import time

from django.conf import settings
from django.db.backends.base.creation import BaseDatabaseCreation
from django.db.utils import DatabaseError
from django.utils.functional import cached_property
from django.utils.six.moves import input

TEST_DATABASE_PREFIX = 'test_'
PASSWORD = 'Im_a_lumberjack'


class DatabaseCreation(BaseDatabaseCreation***REMOVED***:

    @cached_property
    def _maindb_connection(self***REMOVED***:
        ***REMOVED***
        This is analogous to other backends' `_nodb_connection` property,
        which allows access to an "administrative" connection which can
        be used to manage the test databases.
        For Oracle, the only connection that can be used for that purpose
        is the main (non-test***REMOVED*** connection.
        ***REMOVED***
        settings_dict = settings.DATABASES[self.connection.alias***REMOVED***
        user = settings_dict.get('SAVED_USER'***REMOVED*** or settings_dict['USER'***REMOVED***
        password = settings_dict.get('SAVED_PASSWORD'***REMOVED*** or settings_dict['PASSWORD'***REMOVED***
        settings_dict = settings_dict.copy(***REMOVED***
        settings_dict.update(USER=user, PASSWORD=password***REMOVED***
        DatabaseWrapper = type(self.connection***REMOVED***
        return DatabaseWrapper(settings_dict, alias=self.connection.alias***REMOVED***

    def _create_test_db(self, verbosity=1, autoclobber=False, keepdb=False***REMOVED***:
        parameters = self._get_test_db_params(***REMOVED***
        cursor = self._maindb_connection.cursor(***REMOVED***
        if self._test_database_create(***REMOVED***:
            ***REMOVED***
                self._execute_test_db_creation(cursor, parameters, verbosity, keepdb***REMOVED***
            except Exception as e:
                # if we want to keep the db, then no need to do any of the below,
                # just return and skip it all.
                if keepdb:
                    return
                sys.stderr.write("Got an error creating the test database: %s\n" % e***REMOVED***
                if not autoclobber:
                    confirm = input(
                        "It appears the test database, %s, already exists. "
                        "Type 'yes' to delete it, or 'no' to cancel: " % parameters['user'***REMOVED******REMOVED***
                if autoclobber or confirm == 'yes':
                    if verbosity >= 1:
                        print("Destroying old test database for alias '%s'..." % self.connection.alias***REMOVED***
                    ***REMOVED***
                        self._execute_test_db_destruction(cursor, parameters, verbosity***REMOVED***
                    except DatabaseError as e:
                        if 'ORA-29857' in str(e***REMOVED***:
                            self._handle_objects_preventing_db_destruction(cursor, parameters,
                                                                           verbosity, autoclobber***REMOVED***
                        else:
                            # Ran into a database error that isn't about leftover objects in the tablespace
                            sys.stderr.write("Got an error destroying the old test database: %s\n" % e***REMOVED***
                            sys.exit(2***REMOVED***
                    except Exception as e:
                        sys.stderr.write("Got an error destroying the old test database: %s\n" % e***REMOVED***
                        sys.exit(2***REMOVED***
                    ***REMOVED***
                        self._execute_test_db_creation(cursor, parameters, verbosity, keepdb***REMOVED***
                    except Exception as e:
                        sys.stderr.write("Got an error recreating the test database: %s\n" % e***REMOVED***
                        sys.exit(2***REMOVED***
                else:
                    print("Tests cancelled."***REMOVED***
                    sys.exit(1***REMOVED***

        if self._test_user_create(***REMOVED***:
            if verbosity >= 1:
                print("Creating test user..."***REMOVED***
            ***REMOVED***
                self._create_test_user(cursor, parameters, verbosity, keepdb***REMOVED***
            except Exception as e:
                # If we want to keep the db, then we want to also keep the user.
                if keepdb:
                    return
                sys.stderr.write("Got an error creating the test user: %s\n" % e***REMOVED***
                if not autoclobber:
                    confirm = input(
                        "It appears the test user, %s, already exists. Type "
                        "'yes' to delete it, or 'no' to cancel: " % parameters['user'***REMOVED******REMOVED***
                if autoclobber or confirm == 'yes':
                    ***REMOVED***
                        if verbosity >= 1:
                            print("Destroying old test user..."***REMOVED***
                        self._destroy_test_user(cursor, parameters, verbosity***REMOVED***
                        if verbosity >= 1:
                            print("Creating test user..."***REMOVED***
                        self._create_test_user(cursor, parameters, verbosity, keepdb***REMOVED***
                    except Exception as e:
                        sys.stderr.write("Got an error recreating the test user: %s\n" % e***REMOVED***
                        sys.exit(2***REMOVED***
                else:
                    print("Tests cancelled."***REMOVED***
                    sys.exit(1***REMOVED***

        self._maindb_connection.close(***REMOVED***  # done with main user -- test user and tablespaces created
        self._switch_to_test_user(parameters***REMOVED***
        return self.connection.settings_dict['NAME'***REMOVED***

    def _switch_to_test_user(self, parameters***REMOVED***:
        ***REMOVED***
        Oracle doesn't have the concept of separate databases under the same user.
        Thus, we use a separate user (see _create_test_db***REMOVED***. This method is used
        to switch to that user. We will need the main user again for clean-up when
        we end testing, so we keep its credentials in SAVED_USER/SAVED_PASSWORD
        entries in the settings dict.
        ***REMOVED***
        real_settings = settings.DATABASES[self.connection.alias***REMOVED***
        real_settings['SAVED_USER'***REMOVED*** = self.connection.settings_dict['SAVED_USER'***REMOVED*** = \
            self.connection.settings_dict['USER'***REMOVED***
        real_settings['SAVED_PASSWORD'***REMOVED*** = self.connection.settings_dict['SAVED_PASSWORD'***REMOVED*** = \
            self.connection.settings_dict['PASSWORD'***REMOVED***
        real_test_settings = real_settings['TEST'***REMOVED***
        test_settings = self.connection.settings_dict['TEST'***REMOVED***
        real_test_settings['USER'***REMOVED*** = real_settings['USER'***REMOVED*** = test_settings['USER'***REMOVED*** = \
            self.connection.settings_dict['USER'***REMOVED*** = parameters['user'***REMOVED***
        real_settings['PASSWORD'***REMOVED*** = self.connection.settings_dict['PASSWORD'***REMOVED*** = parameters['password'***REMOVED***

    def set_as_test_mirror(self, primary_settings_dict***REMOVED***:
        ***REMOVED***
        Set this database up to be used in testing as a mirror of a primary database
        whose settings are given
        ***REMOVED***
        self.connection.settings_dict['USER'***REMOVED*** = primary_settings_dict['USER'***REMOVED***
        self.connection.settings_dict['PASSWORD'***REMOVED*** = primary_settings_dict['PASSWORD'***REMOVED***

    def _handle_objects_preventing_db_destruction(self, cursor, parameters, verbosity, autoclobber***REMOVED***:
        # There are objects in the test tablespace which prevent dropping it
        # The easy fix is to drop the test user -- but are we allowed to do so?
        print("There are objects in the old test database which prevent its destruction."***REMOVED***
        print("If they belong to the test user, deleting the user will allow the test "
              "database to be recreated."***REMOVED***
        print("Otherwise, you will need to find and remove each of these objects, "
              "or use a different tablespace.\n"***REMOVED***
        if self._test_user_create(***REMOVED***:
            if not autoclobber:
                confirm = input("Type 'yes' to delete user %s: " % parameters['user'***REMOVED******REMOVED***
            if autoclobber or confirm == 'yes':
                ***REMOVED***
                    if verbosity >= 1:
                        print("Destroying old test user..."***REMOVED***
                    self._destroy_test_user(cursor, parameters, verbosity***REMOVED***
                except Exception as e:
                    sys.stderr.write("Got an error destroying the test user: %s\n" % e***REMOVED***
                    sys.exit(2***REMOVED***
                ***REMOVED***
                    if verbosity >= 1:
                        print("Destroying old test database for alias '%s'..." % self.connection.alias***REMOVED***
                    self._execute_test_db_destruction(cursor, parameters, verbosity***REMOVED***
                except Exception as e:
                    sys.stderr.write("Got an error destroying the test database: %s\n" % e***REMOVED***
                    sys.exit(2***REMOVED***
            else:
                print("Tests cancelled -- test database cannot be recreated."***REMOVED***
                sys.exit(1***REMOVED***
        else:
            print("Django is configured to use pre-existing test user '%s',"
                  " and will not attempt to delete it.\n" % parameters['user'***REMOVED******REMOVED***
            print("Tests cancelled -- test database cannot be recreated."***REMOVED***
            sys.exit(1***REMOVED***

    def _destroy_test_db(self, test_database_name, verbosity=1***REMOVED***:
        ***REMOVED***
        Destroy a test database, prompting the user for confirmation if the
        database already exists. Returns the name of the test database created.
        ***REMOVED***
        self.connection.settings_dict['USER'***REMOVED*** = self.connection.settings_dict['SAVED_USER'***REMOVED***
        self.connection.settings_dict['PASSWORD'***REMOVED*** = self.connection.settings_dict['SAVED_PASSWORD'***REMOVED***
        self.connection.close(***REMOVED***
        parameters = self._get_test_db_params(***REMOVED***
        cursor = self._maindb_connection.cursor(***REMOVED***
        time.sleep(1***REMOVED***  # To avoid "database is being accessed by other users" errors.
        if self._test_user_create(***REMOVED***:
            if verbosity >= 1:
                print('Destroying test user...'***REMOVED***
            self._destroy_test_user(cursor, parameters, verbosity***REMOVED***
        if self._test_database_create(***REMOVED***:
            if verbosity >= 1:
                print('Destroying test database tables...'***REMOVED***
            self._execute_test_db_destruction(cursor, parameters, verbosity***REMOVED***
        self._maindb_connection.close(***REMOVED***

    def _execute_test_db_creation(self, cursor, parameters, verbosity, keepdb=False***REMOVED***:
        if verbosity >= 2:
            print("_create_test_db(***REMOVED***: dbname = %s" % parameters['user'***REMOVED******REMOVED***
        statements = [
            ***REMOVED***CREATE TABLESPACE %(tblspace***REMOVED***s
               DATAFILE '%(datafile***REMOVED***s' SIZE 20M
               REUSE AUTOEXTEND ON NEXT 10M MAXSIZE %(maxsize***REMOVED***s
            ***REMOVED***,
            ***REMOVED***CREATE TEMPORARY TABLESPACE %(tblspace_temp***REMOVED***s
               TEMPFILE '%(datafile_tmp***REMOVED***s' SIZE 20M
               REUSE AUTOEXTEND ON NEXT 10M MAXSIZE %(maxsize_tmp***REMOVED***s
            ***REMOVED***,
        ***REMOVED***
        # Ignore "tablespace already exists" error when keepdb is on.
        acceptable_ora_err = 'ORA-01543' if keepdb else None
        self._execute_allow_fail_statements(cursor, statements, parameters, verbosity, acceptable_ora_err***REMOVED***

    def _create_test_user(self, cursor, parameters, verbosity, keepdb=False***REMOVED***:
        if verbosity >= 2:
            print("_create_test_user(***REMOVED***: username = %s" % parameters['user'***REMOVED******REMOVED***
        statements = [
            ***REMOVED***CREATE USER %(user***REMOVED***s
               IDENTIFIED BY %(password***REMOVED***s
               DEFAULT TABLESPACE %(tblspace***REMOVED***s
               TEMPORARY TABLESPACE %(tblspace_temp***REMOVED***s
               QUOTA UNLIMITED ON %(tblspace***REMOVED***s
            ***REMOVED***,
            ***REMOVED***GRANT CREATE SESSION,
                     CREATE TABLE,
                     CREATE SEQUENCE,
                     CREATE PROCEDURE,
                     CREATE TRIGGER
               TO %(user***REMOVED***s***REMOVED***,
        ***REMOVED***
        # Ignore "user already exists" error when keepdb is on
        acceptable_ora_err = 'ORA-01920' if keepdb else None
        self._execute_allow_fail_statements(cursor, statements, parameters, verbosity, acceptable_ora_err***REMOVED***
        # Most test-suites can be run without the create-view privilege. But some need it.
        extra = "GRANT CREATE VIEW TO %(user***REMOVED***s"
        success = self._execute_allow_fail_statements(cursor, [extra***REMOVED***, parameters, verbosity, 'ORA-01031'***REMOVED***
        if not success and verbosity >= 2:
            print("Failed to grant CREATE VIEW permission to test user. This may be ok."***REMOVED***

    def _execute_test_db_destruction(self, cursor, parameters, verbosity***REMOVED***:
        if verbosity >= 2:
            print("_execute_test_db_destruction(***REMOVED***: dbname=%s" % parameters['user'***REMOVED******REMOVED***
        statements = [
            'DROP TABLESPACE %(tblspace***REMOVED***s INCLUDING CONTENTS AND DATAFILES CASCADE CONSTRAINTS',
            'DROP TABLESPACE %(tblspace_temp***REMOVED***s INCLUDING CONTENTS AND DATAFILES CASCADE CONSTRAINTS',
        ***REMOVED***
        self._execute_statements(cursor, statements, parameters, verbosity***REMOVED***

    def _destroy_test_user(self, cursor, parameters, verbosity***REMOVED***:
        if verbosity >= 2:
            print("_destroy_test_user(***REMOVED***: user=%s" % parameters['user'***REMOVED******REMOVED***
            print("Be patient.  This can take some time..."***REMOVED***
        statements = [
            'DROP USER %(user***REMOVED***s CASCADE',
        ***REMOVED***
        self._execute_statements(cursor, statements, parameters, verbosity***REMOVED***

    def _execute_statements(self, cursor, statements, parameters, verbosity, allow_quiet_fail=False***REMOVED***:
        for template in statements:
            stmt = template % parameters
            if verbosity >= 2:
                print(stmt***REMOVED***
            ***REMOVED***
                cursor.execute(stmt***REMOVED***
            except Exception as err:
                if (not allow_quiet_fail***REMOVED*** or verbosity >= 2:
                    sys.stderr.write("Failed (%s***REMOVED***\n" % (err***REMOVED******REMOVED***
                raise

    def _execute_allow_fail_statements(self, cursor, statements, parameters, verbosity, acceptable_ora_err***REMOVED***:
        ***REMOVED***
        Execute statements which are allowed to fail silently if the Oracle
        error code given by `acceptable_ora_err` is raised. Return True if the
        statements execute without an exception, or False otherwise.
        ***REMOVED***
        ***REMOVED***
            # Statement can fail when acceptable_ora_err is not None
            allow_quiet_fail = acceptable_ora_err is not None and len(acceptable_ora_err***REMOVED*** > 0
            self._execute_statements(cursor, statements, parameters, verbosity, allow_quiet_fail=allow_quiet_fail***REMOVED***
            return True
        except DatabaseError as err:
            description = str(err***REMOVED***
            if acceptable_ora_err is None or acceptable_ora_err not in description:
                raise
            return False

    def _get_test_db_params(self***REMOVED***:
        return {
            'dbname': self._test_database_name(***REMOVED***,
            'user': self._test_database_user(***REMOVED***,
            'password': self._test_database_passwd(***REMOVED***,
            'tblspace': self._test_database_tblspace(***REMOVED***,
            'tblspace_temp': self._test_database_tblspace_tmp(***REMOVED***,
            'datafile': self._test_database_tblspace_datafile(***REMOVED***,
            'datafile_tmp': self._test_database_tblspace_tmp_datafile(***REMOVED***,
            'maxsize': self._test_database_tblspace_size(***REMOVED***,
            'maxsize_tmp': self._test_database_tblspace_tmp_size(***REMOVED***,
    ***REMOVED***

    def _test_settings_get(self, key, default=None, prefixed=None***REMOVED***:
        ***REMOVED***
        Return a value from the test settings dict,
        or a given default,
        or a prefixed entry from the main settings dict
        ***REMOVED***
        settings_dict = self.connection.settings_dict
        val = settings_dict['TEST'***REMOVED***.get(key, default***REMOVED***
        if val is None:
            val = TEST_DATABASE_PREFIX + settings_dict[prefixed***REMOVED***
        return val

    def _test_database_name(self***REMOVED***:
        return self._test_settings_get('NAME', prefixed='NAME'***REMOVED***

    def _test_database_create(self***REMOVED***:
        return self._test_settings_get('CREATE_DB', default=True***REMOVED***

    def _test_user_create(self***REMOVED***:
        return self._test_settings_get('CREATE_USER', default=True***REMOVED***

    def _test_database_user(self***REMOVED***:
        return self._test_settings_get('USER', prefixed='USER'***REMOVED***

    def _test_database_passwd(self***REMOVED***:
        return self._test_settings_get('PASSWORD', default=PASSWORD***REMOVED***

    def _test_database_tblspace(self***REMOVED***:
        return self._test_settings_get('TBLSPACE', prefixed='USER'***REMOVED***

    def _test_database_tblspace_tmp(self***REMOVED***:
        settings_dict = self.connection.settings_dict
        return settings_dict['TEST'***REMOVED***.get('TBLSPACE_TMP',
                                         TEST_DATABASE_PREFIX + settings_dict['USER'***REMOVED*** + '_temp'***REMOVED***

    def _test_database_tblspace_datafile(self***REMOVED***:
        tblspace = '%s.dbf' % self._test_database_tblspace(***REMOVED***
        return self._test_settings_get('DATAFILE', default=tblspace***REMOVED***

    def _test_database_tblspace_tmp_datafile(self***REMOVED***:
        tblspace = '%s.dbf' % self._test_database_tblspace_tmp(***REMOVED***
        return self._test_settings_get('DATAFILE_TMP', default=tblspace***REMOVED***

    def _test_database_tblspace_size(self***REMOVED***:
        return self._test_settings_get('DATAFILE_MAXSIZE', default='500M'***REMOVED***

    def _test_database_tblspace_tmp_size(self***REMOVED***:
        return self._test_settings_get('DATAFILE_TMP_MAXSIZE', default='500M'***REMOVED***

    def _get_test_db_name(self***REMOVED***:
        ***REMOVED***
        We need to return the 'production' DB name to get the test DB creation
        machinery to work. This isn't a great deal in this case because DB
        names as handled by Django haven't real counterparts in Oracle.
        ***REMOVED***
        return self.connection.settings_dict['NAME'***REMOVED***

    def test_db_signature(self***REMOVED***:
        settings_dict = self.connection.settings_dict
        return (
            settings_dict['HOST'***REMOVED***,
            settings_dict['PORT'***REMOVED***,
            settings_dict['ENGINE'***REMOVED***,
            settings_dict['NAME'***REMOVED***,
            self._test_database_user(***REMOVED***,
        ***REMOVED***
