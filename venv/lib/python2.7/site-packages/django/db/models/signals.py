import warnings
from functools import partial

from django.db.models.utils import make_model_tuple
from django.dispatch import Signal
from django.utils import six
from django.utils.deprecation import RemovedInDjango20Warning


class_prepared = Signal(providing_args=["class"***REMOVED******REMOVED***


class ModelSignal(Signal***REMOVED***:
    ***REMOVED***
    Signal subclass that allows the sender to be lazily specified as a string
    of the `app_label.ModelName` form.
    ***REMOVED***
    def _lazy_method(self, method, apps, receiver, sender, **kwargs***REMOVED***:
        from django.db.models.options import Options

        # This partial takes a single optional argument named "sender".
        partial_method = partial(method, receiver, **kwargs***REMOVED***
        if isinstance(sender, six.string_types***REMOVED***:
            apps = apps or Options.default_apps
            apps.lazy_model_operation(partial_method, make_model_tuple(sender***REMOVED******REMOVED***
        else:
            return partial_method(sender***REMOVED***

    def connect(self, receiver, sender=None, weak=True, dispatch_uid=None, apps=None***REMOVED***:
        self._lazy_method(
            super(ModelSignal, self***REMOVED***.connect, apps, receiver, sender,
            weak=weak, dispatch_uid=dispatch_uid,
        ***REMOVED***

    def disconnect(self, receiver=None, sender=None, weak=None, dispatch_uid=None, apps=None***REMOVED***:
        if weak is not None:
            warnings.warn("Passing `weak` to disconnect has no effect.", RemovedInDjango20Warning, stacklevel=2***REMOVED***
        return self._lazy_method(
            super(ModelSignal, self***REMOVED***.disconnect, apps, receiver, sender, dispatch_uid=dispatch_uid
        ***REMOVED***


pre_init = ModelSignal(providing_args=["instance", "args", "kwargs"***REMOVED***, use_caching=True***REMOVED***
post_init = ModelSignal(providing_args=["instance"***REMOVED***, use_caching=True***REMOVED***

pre_save = ModelSignal(providing_args=["instance", "raw", "using", "update_fields"***REMOVED***,
                       use_caching=True***REMOVED***
post_save = ModelSignal(providing_args=["instance", "raw", "created", "using", "update_fields"***REMOVED***, use_caching=True***REMOVED***

pre_delete = ModelSignal(providing_args=["instance", "using"***REMOVED***, use_caching=True***REMOVED***
post_delete = ModelSignal(providing_args=["instance", "using"***REMOVED***, use_caching=True***REMOVED***

m2m_changed = ModelSignal(
    providing_args=["action", "instance", "reverse", "model", "pk_set", "using"***REMOVED***,
    use_caching=True,
***REMOVED***

pre_migrate = Signal(providing_args=["app_config", "verbosity", "interactive", "using", "apps", "plan"***REMOVED******REMOVED***
post_migrate = Signal(providing_args=["app_config", "verbosity", "interactive", "using", "apps", "plan"***REMOVED******REMOVED***
