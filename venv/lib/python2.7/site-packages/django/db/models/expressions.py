import copy
import datetime

from django.core.exceptions import FieldError
from django.db.backends import utils as backend_utils
from django.db.models import fields
from django.db.models.query_utils import Q
from django.utils import six
from django.utils.functional import cached_property


class Combinable(object***REMOVED***:
    ***REMOVED***
    Provides the ability to combine one or two objects with
    some connector. For example F('foo'***REMOVED*** + F('bar'***REMOVED***.
    ***REMOVED***

    # Arithmetic connectors
    ADD = '+'
    SUB = '-'
    MUL = '*'
    DIV = '/'
    POW = '^'
    # The following is a quoted % operator - it is quoted because it can be
    # used in strings that also have parameter substitution.
    MOD = '%%'

    # Bitwise operators - note that these are generated by .bitand(***REMOVED***
    # and .bitor(***REMOVED***, the '&' and '|' are reserved for boolean operator
    # usage.
    BITAND = '&'
    BITOR = '|'

    def _combine(self, other, connector, reversed, node=None***REMOVED***:
        if not hasattr(other, 'resolve_expression'***REMOVED***:
            # everything must be resolvable to an expression
            if isinstance(other, datetime.timedelta***REMOVED***:
                other = DurationValue(other, output_field=fields.DurationField(***REMOVED******REMOVED***
            else:
                other = Value(other***REMOVED***

        if reversed:
            return CombinedExpression(other, connector, self***REMOVED***
        return CombinedExpression(self, connector, other***REMOVED***

    #############
    # OPERATORS #
    #############

    def __add__(self, other***REMOVED***:
        return self._combine(other, self.ADD, False***REMOVED***

    def __sub__(self, other***REMOVED***:
        return self._combine(other, self.SUB, False***REMOVED***

    def __mul__(self, other***REMOVED***:
        return self._combine(other, self.MUL, False***REMOVED***

    def __truediv__(self, other***REMOVED***:
        return self._combine(other, self.DIV, False***REMOVED***

    def __div__(self, other***REMOVED***:  # Python 2 compatibility
        return type(self***REMOVED***.__truediv__(self, other***REMOVED***

    def __mod__(self, other***REMOVED***:
        return self._combine(other, self.MOD, False***REMOVED***

    def __pow__(self, other***REMOVED***:
        return self._combine(other, self.POW, False***REMOVED***

    def __and__(self, other***REMOVED***:
        raise NotImplementedError(
            "Use .bitand(***REMOVED*** and .bitor(***REMOVED*** for bitwise logical operations."
        ***REMOVED***

    def bitand(self, other***REMOVED***:
        return self._combine(other, self.BITAND, False***REMOVED***

    def __or__(self, other***REMOVED***:
        raise NotImplementedError(
            "Use .bitand(***REMOVED*** and .bitor(***REMOVED*** for bitwise logical operations."
        ***REMOVED***

    def bitor(self, other***REMOVED***:
        return self._combine(other, self.BITOR, False***REMOVED***

    def __radd__(self, other***REMOVED***:
        return self._combine(other, self.ADD, True***REMOVED***

    def __rsub__(self, other***REMOVED***:
        return self._combine(other, self.SUB, True***REMOVED***

    def __rmul__(self, other***REMOVED***:
        return self._combine(other, self.MUL, True***REMOVED***

    def __rtruediv__(self, other***REMOVED***:
        return self._combine(other, self.DIV, True***REMOVED***

    def __rdiv__(self, other***REMOVED***:  # Python 2 compatibility
        return type(self***REMOVED***.__rtruediv__(self, other***REMOVED***

    def __rmod__(self, other***REMOVED***:
        return self._combine(other, self.MOD, True***REMOVED***

    def __rpow__(self, other***REMOVED***:
        return self._combine(other, self.POW, True***REMOVED***

    def __rand__(self, other***REMOVED***:
        raise NotImplementedError(
            "Use .bitand(***REMOVED*** and .bitor(***REMOVED*** for bitwise logical operations."
        ***REMOVED***

    def __ror__(self, other***REMOVED***:
        raise NotImplementedError(
            "Use .bitand(***REMOVED*** and .bitor(***REMOVED*** for bitwise logical operations."
        ***REMOVED***


class BaseExpression(object***REMOVED***:
    ***REMOVED***
    Base class for all query expressions.
    ***REMOVED***

    # aggregate specific fields
    is_summary = False
    _output_field = None

    def __init__(self, output_field=None***REMOVED***:
        if output_field is not None:
            self._output_field = output_field

    def get_db_converters(self, connection***REMOVED***:
        return [self.convert_value***REMOVED*** + self.output_field.get_db_converters(connection***REMOVED***

    def get_source_expressions(self***REMOVED***:
        return [***REMOVED***

    def set_source_expressions(self, exprs***REMOVED***:
        assert len(exprs***REMOVED*** == 0

    def _parse_expressions(self, *expressions***REMOVED***:
        return [
            arg if hasattr(arg, 'resolve_expression'***REMOVED*** else (
                F(arg***REMOVED*** if isinstance(arg, six.string_types***REMOVED*** else Value(arg***REMOVED***
            ***REMOVED*** for arg in expressions
        ***REMOVED***

    def as_sql(self, compiler, connection***REMOVED***:
        ***REMOVED***
        Responsible for returning a (sql, [params***REMOVED******REMOVED*** tuple to be included
        in the current query.

        Different backends can provide their own implementation, by
        providing an `as_{vendor***REMOVED***` method and patching the Expression:

        ```
        def override_as_sql(self, compiler, connection***REMOVED***:
            # custom logic
            return super(Expression, self***REMOVED***.as_sql(compiler, connection***REMOVED***
        setattr(Expression, 'as_' + connection.vendor, override_as_sql***REMOVED***
        ```

        Arguments:
         * compiler: the query compiler responsible for generating the query.
           Must have a compile method, returning a (sql, [params***REMOVED******REMOVED*** tuple.
           Calling compiler(value***REMOVED*** will return a quoted `value`.

         * connection: the database connection used for the current query.

        Returns: (sql, params***REMOVED***
          Where `sql` is a string containing ordered sql parameters to be
          replaced with the elements of the list `params`.
        ***REMOVED***
        raise NotImplementedError("Subclasses must implement as_sql(***REMOVED***"***REMOVED***

    @cached_property
    def contains_aggregate(self***REMOVED***:
        for expr in self.get_source_expressions(***REMOVED***:
            if expr and expr.contains_aggregate:
                return True
        return False

    @cached_property
    def contains_column_references(self***REMOVED***:
        for expr in self.get_source_expressions(***REMOVED***:
            if expr and expr.contains_column_references:
                return True
        return False

    def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False***REMOVED***:
        ***REMOVED***
        Provides the chance to do any preprocessing or validation before being
        added to the query.

        Arguments:
         * query: the backend query implementation
         * allow_joins: boolean allowing or denying use of joins
           in this query
         * reuse: a set of reusable joins for multijoins
         * summarize: a terminal aggregate clause
         * for_save: whether this expression about to be used in a save or update

        Returns: an Expression to be added to the query.
        ***REMOVED***
        c = self.copy(***REMOVED***
        c.is_summary = summarize
        c.set_source_expressions([
            expr.resolve_expression(query, allow_joins, reuse, summarize***REMOVED***
            for expr in c.get_source_expressions(***REMOVED***
        ***REMOVED******REMOVED***
        return c

    def _prepare(self, field***REMOVED***:
        ***REMOVED***
        Hook used by Lookup.get_prep_lookup(***REMOVED*** to do custom preparation.
        ***REMOVED***
        return self

    @property
    def field(self***REMOVED***:
        return self.output_field

    @cached_property
    def output_field(self***REMOVED***:
        ***REMOVED***
        Returns the output type of this expressions.
        ***REMOVED***
        if self._output_field_or_none is None:
            raise FieldError("Cannot resolve expression type, unknown output_field"***REMOVED***
        return self._output_field_or_none

    @cached_property
    def _output_field_or_none(self***REMOVED***:
        ***REMOVED***
        Returns the output field of this expression, or None if no output type
        can be resolved. Note that the 'output_field' property will raise
        FieldError if no type can be resolved, but this attribute allows for
        None values.
        ***REMOVED***
        if self._output_field is None:
            self._resolve_output_field(***REMOVED***
        return self._output_field

    def _resolve_output_field(self***REMOVED***:
        ***REMOVED***
        Attempts to infer the output type of the expression. If the output
        fields of all source fields match then we can simply infer the same
        type here. This isn't always correct, but it makes sense most of the
        time.

        Consider the difference between `2 + 2` and `2 / 3`. Inferring
        the type here is a convenience for the common case. The user should
        supply their own output_field with more complex computations.

        If a source does not have an `_output_field` then we exclude it from
        this check. If all sources are `None`, then an error will be thrown
        higher up the stack in the `output_field` property.
        ***REMOVED***
        if self._output_field is None:
            sources = self.get_source_fields(***REMOVED***
            num_sources = len(sources***REMOVED***
            if num_sources == 0:
                self._output_field = None
            else:
                for source in sources:
                    if self._output_field is None:
                        self._output_field = source
                    if source is not None and not isinstance(self._output_field, source.__class__***REMOVED***:
                        raise FieldError(
                            "Expression contains mixed types. You must set output_field"***REMOVED***

    def convert_value(self, value, expression, connection, context***REMOVED***:
        ***REMOVED***
        Expressions provide their own converters because users have the option
        of manually specifying the output_field which may be a different type
        from the one the database returns.
        ***REMOVED***
        field = self.output_field
        internal_type = field.get_internal_type(***REMOVED***
        if value is None:
            return value
        elif internal_type == 'FloatField':
            return float(value***REMOVED***
        elif internal_type.endswith('IntegerField'***REMOVED***:
            return int(value***REMOVED***
        elif internal_type == 'DecimalField':
            return backend_utils.typecast_decimal(value***REMOVED***
        return value

    def get_lookup(self, lookup***REMOVED***:
        return self.output_field.get_lookup(lookup***REMOVED***

    def get_transform(self, name***REMOVED***:
        return self.output_field.get_transform(name***REMOVED***

    def relabeled_clone(self, change_map***REMOVED***:
        clone = self.copy(***REMOVED***
        clone.set_source_expressions(
            [e.relabeled_clone(change_map***REMOVED*** for e in self.get_source_expressions(***REMOVED******REMOVED******REMOVED***
        return clone

    def copy(self***REMOVED***:
        c = copy.copy(self***REMOVED***
        c.copied = True
        return c

    def get_group_by_cols(self***REMOVED***:
        if not self.contains_aggregate:
            return [self***REMOVED***
        cols = [***REMOVED***
        for source in self.get_source_expressions(***REMOVED***:
            cols.extend(source.get_group_by_cols(***REMOVED******REMOVED***
        return cols

    def get_source_fields(self***REMOVED***:
        ***REMOVED***
        Returns the underlying field types used by this
        aggregate.
        ***REMOVED***
        return [e._output_field_or_none for e in self.get_source_expressions(***REMOVED******REMOVED***

    def asc(self***REMOVED***:
        return OrderBy(self***REMOVED***

    def desc(self***REMOVED***:
        return OrderBy(self, descending=True***REMOVED***

    def reverse_ordering(self***REMOVED***:
        return self

    def flatten(self***REMOVED***:
        ***REMOVED***
        Recursively yield this expression and all subexpressions, in
        depth-first order.
        ***REMOVED***
        yield self
        for expr in self.get_source_expressions(***REMOVED***:
            if expr:
                for inner_expr in expr.flatten(***REMOVED***:
                    yield inner_expr


class Expression(BaseExpression, Combinable***REMOVED***:
    ***REMOVED***
    An expression that can be combined with other expressions.
    ***REMOVED***
    pass


class CombinedExpression(Expression***REMOVED***:

    def __init__(self, lhs, connector, rhs, output_field=None***REMOVED***:
        super(CombinedExpression, self***REMOVED***.__init__(output_field=output_field***REMOVED***
        self.connector = connector
        self.lhs = lhs
        self.rhs = rhs

    def __repr__(self***REMOVED***:
        return "<{***REMOVED***: {***REMOVED***>".format(self.__class__.__name__, self***REMOVED***

    def __str__(self***REMOVED***:
        return "{***REMOVED*** {***REMOVED*** {***REMOVED***".format(self.lhs, self.connector, self.rhs***REMOVED***

    def get_source_expressions(self***REMOVED***:
        return [self.lhs, self.rhs***REMOVED***

    def set_source_expressions(self, exprs***REMOVED***:
        self.lhs, self.rhs = exprs

    def as_sql(self, compiler, connection***REMOVED***:
        ***REMOVED***
            lhs_output = self.lhs.output_field
        except FieldError:
            lhs_output = None
        ***REMOVED***
            rhs_output = self.rhs.output_field
        except FieldError:
            rhs_output = None
        if (not connection.features.has_native_duration_field and
                ((lhs_output and lhs_output.get_internal_type(***REMOVED*** == 'DurationField'***REMOVED*** or
                 (rhs_output and rhs_output.get_internal_type(***REMOVED*** == 'DurationField'***REMOVED******REMOVED******REMOVED***:
            return DurationExpression(self.lhs, self.connector, self.rhs***REMOVED***.as_sql(compiler, connection***REMOVED***
        if (lhs_output and rhs_output and self.connector == self.SUB and
            lhs_output.get_internal_type(***REMOVED*** in {'DateField', 'DateTimeField', 'TimeField'***REMOVED*** and
                lhs_output.get_internal_type(***REMOVED*** == lhs_output.get_internal_type(***REMOVED******REMOVED***:
            return TemporalSubtraction(self.lhs, self.rhs***REMOVED***.as_sql(compiler, connection***REMOVED***
        expressions = [***REMOVED***
        expression_params = [***REMOVED***
        sql, params = compiler.compile(self.lhs***REMOVED***
        expressions.append(sql***REMOVED***
        expression_params.extend(params***REMOVED***
        sql, params = compiler.compile(self.rhs***REMOVED***
        expressions.append(sql***REMOVED***
        expression_params.extend(params***REMOVED***
        # order of precedence
        expression_wrapper = '(%s***REMOVED***'
        sql = connection.ops.combine_expression(self.connector, expressions***REMOVED***
        return expression_wrapper % sql, expression_params

    def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False***REMOVED***:
        c = self.copy(***REMOVED***
        c.is_summary = summarize
        c.lhs = c.lhs.resolve_expression(query, allow_joins, reuse, summarize, for_save***REMOVED***
        c.rhs = c.rhs.resolve_expression(query, allow_joins, reuse, summarize, for_save***REMOVED***
        return c


class DurationExpression(CombinedExpression***REMOVED***:
    def compile(self, side, compiler, connection***REMOVED***:
        if not isinstance(side, DurationValue***REMOVED***:
            ***REMOVED***
                output = side.output_field
            except FieldError:
                pass
            else:
                if output.get_internal_type(***REMOVED*** == 'DurationField':
                    sql, params = compiler.compile(side***REMOVED***
                    return connection.ops.format_for_duration_arithmetic(sql***REMOVED***, params
        return compiler.compile(side***REMOVED***

    def as_sql(self, compiler, connection***REMOVED***:
        connection.ops.check_expression_support(self***REMOVED***
        expressions = [***REMOVED***
        expression_params = [***REMOVED***
        sql, params = self.compile(self.lhs, compiler, connection***REMOVED***
        expressions.append(sql***REMOVED***
        expression_params.extend(params***REMOVED***
        sql, params = self.compile(self.rhs, compiler, connection***REMOVED***
        expressions.append(sql***REMOVED***
        expression_params.extend(params***REMOVED***
        # order of precedence
        expression_wrapper = '(%s***REMOVED***'
        sql = connection.ops.combine_duration_expression(self.connector, expressions***REMOVED***
        return expression_wrapper % sql, expression_params


class TemporalSubtraction(CombinedExpression***REMOVED***:
    def __init__(self, lhs, rhs***REMOVED***:
        super(TemporalSubtraction, self***REMOVED***.__init__(lhs, self.SUB, rhs, output_field=fields.DurationField(***REMOVED******REMOVED***

    def as_sql(self, compiler, connection***REMOVED***:
        connection.ops.check_expression_support(self***REMOVED***
        lhs = compiler.compile(self.lhs, connection***REMOVED***
        rhs = compiler.compile(self.rhs, connection***REMOVED***
        return connection.ops.subtract_temporals(self.lhs.output_field.get_internal_type(***REMOVED***, lhs, rhs***REMOVED***


class F(Combinable***REMOVED***:
    ***REMOVED***
    An object capable of resolving references to existing query objects.
    ***REMOVED***
    def __init__(self, name***REMOVED***:
        ***REMOVED***
        Arguments:
         * name: the name of the field this expression references
        ***REMOVED***
        self.name = name

    def __repr__(self***REMOVED***:
        return "{***REMOVED***({***REMOVED******REMOVED***".format(self.__class__.__name__, self.name***REMOVED***

    def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False***REMOVED***:
        return query.resolve_ref(self.name, allow_joins, reuse, summarize***REMOVED***

    def asc(self***REMOVED***:
        return OrderBy(self***REMOVED***

    def desc(self***REMOVED***:
        return OrderBy(self, descending=True***REMOVED***


class Func(Expression***REMOVED***:
    ***REMOVED***
    An SQL function call.
    ***REMOVED***
    function = None
    template = '%(function***REMOVED***s(%(expressions***REMOVED***s***REMOVED***'
    arg_joiner = ', '
    arity = None  # The number of arguments the function accepts.

    def __init__(self, *expressions, **extra***REMOVED***:
        if self.arity is not None and len(expressions***REMOVED*** != self.arity:
            raise TypeError(
                "'%s' takes exactly %s %s (%s given***REMOVED***" % (
                    self.__class__.__name__,
                    self.arity,
                    "argument" if self.arity == 1 else "arguments",
                    len(expressions***REMOVED***,
                ***REMOVED***
            ***REMOVED***
        output_field = extra.pop('output_field', None***REMOVED***
        super(Func, self***REMOVED***.__init__(output_field=output_field***REMOVED***
        self.source_expressions = self._parse_expressions(*expressions***REMOVED***
        self.extra = extra

    def __repr__(self***REMOVED***:
        args = self.arg_joiner.join(str(arg***REMOVED*** for arg in self.source_expressions***REMOVED***
        extra = ', '.join(str(key***REMOVED*** + '=' + str(val***REMOVED*** for key, val in self.extra.items(***REMOVED******REMOVED***
        if extra:
            return "{***REMOVED***({***REMOVED***, {***REMOVED******REMOVED***".format(self.__class__.__name__, args, extra***REMOVED***
        return "{***REMOVED***({***REMOVED******REMOVED***".format(self.__class__.__name__, args***REMOVED***

    def get_source_expressions(self***REMOVED***:
        return self.source_expressions

    def set_source_expressions(self, exprs***REMOVED***:
        self.source_expressions = exprs

    def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False***REMOVED***:
        c = self.copy(***REMOVED***
        c.is_summary = summarize
        for pos, arg in enumerate(c.source_expressions***REMOVED***:
            c.source_expressions[pos***REMOVED*** = arg.resolve_expression(query, allow_joins, reuse, summarize, for_save***REMOVED***
        return c

    def as_sql(self, compiler, connection, function=None, template=None, arg_joiner=None, **extra_context***REMOVED***:
        connection.ops.check_expression_support(self***REMOVED***
        sql_parts = [***REMOVED***
        params = [***REMOVED***
        for arg in self.source_expressions:
            arg_sql, arg_params = compiler.compile(arg***REMOVED***
            sql_parts.append(arg_sql***REMOVED***
            params.extend(arg_params***REMOVED***
        data = self.extra.copy(***REMOVED***
        data.update(**extra_context***REMOVED***
        # Use the first supplied value in this order: the parameter to this
        # method, a value supplied in __init__(***REMOVED***'s **extra (the value in
        # `data`***REMOVED***, or the value defined on the class.
        if function is not None:
            data['function'***REMOVED*** = function
        else:
            data.setdefault('function', self.function***REMOVED***
        template = template or data.get('template', self.template***REMOVED***
        arg_joiner = arg_joiner or data.get('arg_joiner', self.arg_joiner***REMOVED***
        data['expressions'***REMOVED*** = data['field'***REMOVED*** = arg_joiner.join(sql_parts***REMOVED***
        return template % data, params

    def as_sqlite(self, compiler, connection***REMOVED***:
        sql, params = self.as_sql(compiler, connection***REMOVED***
        ***REMOVED***
            if self.output_field.get_internal_type(***REMOVED*** == 'DecimalField':
                sql = 'CAST(%s AS NUMERIC***REMOVED***' % sql
        except FieldError:
            pass
        return sql, params

    def copy(self***REMOVED***:
        copy = super(Func, self***REMOVED***.copy(***REMOVED***
        copy.source_expressions = self.source_expressions[:***REMOVED***
        copy.extra = self.extra.copy(***REMOVED***
        return copy


class Value(Expression***REMOVED***:
    ***REMOVED***
    Represents a wrapped value as a node within an expression
    ***REMOVED***
    def __init__(self, value, output_field=None***REMOVED***:
        ***REMOVED***
        Arguments:
         * value: the value this expression represents. The value will be
           added into the sql parameter list and properly quoted.

         * output_field: an instance of the model field type that this
           expression will return, such as IntegerField(***REMOVED*** or CharField(***REMOVED***.
        ***REMOVED***
        super(Value, self***REMOVED***.__init__(output_field=output_field***REMOVED***
        self.value = value

    def __repr__(self***REMOVED***:
        return "{***REMOVED***({***REMOVED******REMOVED***".format(self.__class__.__name__, self.value***REMOVED***

    def as_sql(self, compiler, connection***REMOVED***:
        connection.ops.check_expression_support(self***REMOVED***
        val = self.value
        # check _output_field to avoid triggering an exception
        if self._output_field is not None:
            if self.for_save:
                val = self.output_field.get_db_prep_save(val, connection=connection***REMOVED***
            else:
                val = self.output_field.get_db_prep_value(val, connection=connection***REMOVED***
        if val is None:
            # cx_Oracle does not always convert None to the appropriate
            # NULL type (like in case expressions using numbers***REMOVED***, so we
            # use a literal SQL NULL
            return 'NULL', [***REMOVED***
        return '%s', [val***REMOVED***

    def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False***REMOVED***:
        c = super(Value, self***REMOVED***.resolve_expression(query, allow_joins, reuse, summarize, for_save***REMOVED***
        c.for_save = for_save
        return c

    def get_group_by_cols(self***REMOVED***:
        return [***REMOVED***


class DurationValue(Value***REMOVED***:
    def as_sql(self, compiler, connection***REMOVED***:
        connection.ops.check_expression_support(self***REMOVED***
        if (connection.features.has_native_duration_field and
                connection.features.driver_supports_timedelta_args***REMOVED***:
            return super(DurationValue, self***REMOVED***.as_sql(compiler, connection***REMOVED***
        return connection.ops.date_interval_sql(self.value***REMOVED***


class RawSQL(Expression***REMOVED***:
    def __init__(self, sql, params, output_field=None***REMOVED***:
        if output_field is None:
            output_field = fields.Field(***REMOVED***
        self.sql, self.params = sql, params
        super(RawSQL, self***REMOVED***.__init__(output_field=output_field***REMOVED***

    def __repr__(self***REMOVED***:
        return "{***REMOVED***({***REMOVED***, {***REMOVED******REMOVED***".format(self.__class__.__name__, self.sql, self.params***REMOVED***

    def as_sql(self, compiler, connection***REMOVED***:
        return '(%s***REMOVED***' % self.sql, self.params

    def get_group_by_cols(self***REMOVED***:
        return [self***REMOVED***


class Star(Expression***REMOVED***:
    def __repr__(self***REMOVED***:
        return "'*'"

    def as_sql(self, compiler, connection***REMOVED***:
        return '*', [***REMOVED***


class Random(Expression***REMOVED***:
    def __init__(self***REMOVED***:
        super(Random, self***REMOVED***.__init__(output_field=fields.FloatField(***REMOVED******REMOVED***

    def __repr__(self***REMOVED***:
        return "Random(***REMOVED***"

    def as_sql(self, compiler, connection***REMOVED***:
        return connection.ops.random_function_sql(***REMOVED***, [***REMOVED***


class Col(Expression***REMOVED***:

    contains_column_references = True

    def __init__(self, alias, target, output_field=None***REMOVED***:
        if output_field is None:
            output_field = target
        super(Col, self***REMOVED***.__init__(output_field=output_field***REMOVED***
        self.alias, self.target = alias, target

    def __repr__(self***REMOVED***:
        return "{***REMOVED***({***REMOVED***, {***REMOVED******REMOVED***".format(
            self.__class__.__name__, self.alias, self.target***REMOVED***

    def as_sql(self, compiler, connection***REMOVED***:
        qn = compiler.quote_name_unless_alias
        return "%s.%s" % (qn(self.alias***REMOVED***, qn(self.target.column***REMOVED******REMOVED***, [***REMOVED***

    def relabeled_clone(self, relabels***REMOVED***:
        return self.__class__(relabels.get(self.alias, self.alias***REMOVED***, self.target, self.output_field***REMOVED***

    def get_group_by_cols(self***REMOVED***:
        return [self***REMOVED***

    def get_db_converters(self, connection***REMOVED***:
        if self.target == self.output_field:
            return self.output_field.get_db_converters(connection***REMOVED***
        return (self.output_field.get_db_converters(connection***REMOVED*** +
                self.target.get_db_converters(connection***REMOVED******REMOVED***


class Ref(Expression***REMOVED***:
    ***REMOVED***
    Reference to column alias of the query. For example, Ref('sum_cost'***REMOVED*** in
    qs.annotate(sum_cost=Sum('cost'***REMOVED******REMOVED*** query.
    ***REMOVED***
    def __init__(self, refs, source***REMOVED***:
        super(Ref, self***REMOVED***.__init__(***REMOVED***
        self.refs, self.source = refs, source

    def __repr__(self***REMOVED***:
        return "{***REMOVED***({***REMOVED***, {***REMOVED******REMOVED***".format(self.__class__.__name__, self.refs, self.source***REMOVED***

    def get_source_expressions(self***REMOVED***:
        return [self.source***REMOVED***

    def set_source_expressions(self, exprs***REMOVED***:
        self.source, = exprs

    def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False***REMOVED***:
        # The sub-expression `source` has already been resolved, as this is
        # just a reference to the name of `source`.
        return self

    def relabeled_clone(self, relabels***REMOVED***:
        return self

    def as_sql(self, compiler, connection***REMOVED***:
        return "%s" % connection.ops.quote_name(self.refs***REMOVED***, [***REMOVED***

    def get_group_by_cols(self***REMOVED***:
        return [self***REMOVED***


class ExpressionWrapper(Expression***REMOVED***:
    ***REMOVED***
    An expression that can wrap another expression so that it can provide
    extra context to the inner expression, such as the output_field.
    ***REMOVED***

    def __init__(self, expression, output_field***REMOVED***:
        super(ExpressionWrapper, self***REMOVED***.__init__(output_field=output_field***REMOVED***
        self.expression = expression

    def set_source_expressions(self, exprs***REMOVED***:
        self.expression = exprs[0***REMOVED***

    def get_source_expressions(self***REMOVED***:
        return [self.expression***REMOVED***

    def as_sql(self, compiler, connection***REMOVED***:
        return self.expression.as_sql(compiler, connection***REMOVED***

    def __repr__(self***REMOVED***:
        return "{***REMOVED***({***REMOVED******REMOVED***".format(self.__class__.__name__, self.expression***REMOVED***


class When(Expression***REMOVED***:
    template = 'WHEN %(condition***REMOVED***s THEN %(result***REMOVED***s'

    def __init__(self, condition=None, then=None, **lookups***REMOVED***:
        if lookups and condition is None:
            condition, lookups = Q(**lookups***REMOVED***, None
        if condition is None or not isinstance(condition, Q***REMOVED*** or lookups:
            raise TypeError("__init__(***REMOVED*** takes either a Q object or lookups as keyword arguments"***REMOVED***
        super(When, self***REMOVED***.__init__(output_field=None***REMOVED***
        self.condition = condition
        self.result = self._parse_expressions(then***REMOVED***[0***REMOVED***

    def __str__(self***REMOVED***:
        return "WHEN %r THEN %r" % (self.condition, self.result***REMOVED***

    def __repr__(self***REMOVED***:
        return "<%s: %s>" % (self.__class__.__name__, self***REMOVED***

    def get_source_expressions(self***REMOVED***:
        return [self.condition, self.result***REMOVED***

    def set_source_expressions(self, exprs***REMOVED***:
        self.condition, self.result = exprs

    def get_source_fields(self***REMOVED***:
        # We're only interested in the fields of the result expressions.
        return [self.result._output_field_or_none***REMOVED***

    def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False***REMOVED***:
        c = self.copy(***REMOVED***
        c.is_summary = summarize
        if hasattr(c.condition, 'resolve_expression'***REMOVED***:
            c.condition = c.condition.resolve_expression(query, allow_joins, reuse, summarize, False***REMOVED***
        c.result = c.result.resolve_expression(query, allow_joins, reuse, summarize, for_save***REMOVED***
        return c

    def as_sql(self, compiler, connection, template=None, **extra_context***REMOVED***:
        connection.ops.check_expression_support(self***REMOVED***
        template_params = extra_context
        sql_params = [***REMOVED***
        condition_sql, condition_params = compiler.compile(self.condition***REMOVED***
        template_params['condition'***REMOVED*** = condition_sql
        sql_params.extend(condition_params***REMOVED***
        result_sql, result_params = compiler.compile(self.result***REMOVED***
        template_params['result'***REMOVED*** = result_sql
        sql_params.extend(result_params***REMOVED***
        template = template or self.template
        return template % template_params, sql_params

    def get_group_by_cols(self***REMOVED***:
        # This is not a complete expression and cannot be used in GROUP BY.
        cols = [***REMOVED***
        for source in self.get_source_expressions(***REMOVED***:
            cols.extend(source.get_group_by_cols(***REMOVED******REMOVED***
        return cols


class Case(Expression***REMOVED***:
    ***REMOVED***
    An SQL searched CASE expression:

        CASE
            WHEN n > 0
                THEN 'positive'
            WHEN n < 0
                THEN 'negative'
            ELSE 'zero'
        END
    ***REMOVED***
    template = 'CASE %(cases***REMOVED***s ELSE %(default***REMOVED***s END'
    case_joiner = ' '

    def __init__(self, *cases, **extra***REMOVED***:
        if not all(isinstance(case, When***REMOVED*** for case in cases***REMOVED***:
            raise TypeError("Positional arguments must all be When objects."***REMOVED***
        default = extra.pop('default', None***REMOVED***
        output_field = extra.pop('output_field', None***REMOVED***
        super(Case, self***REMOVED***.__init__(output_field***REMOVED***
        self.cases = list(cases***REMOVED***
        self.default = self._parse_expressions(default***REMOVED***[0***REMOVED***
        self.extra = extra

    def __str__(self***REMOVED***:
        return "CASE %s, ELSE %r" % (', '.join(str(c***REMOVED*** for c in self.cases***REMOVED***, self.default***REMOVED***

    def __repr__(self***REMOVED***:
        return "<%s: %s>" % (self.__class__.__name__, self***REMOVED***

    def get_source_expressions(self***REMOVED***:
        return self.cases + [self.default***REMOVED***

    def set_source_expressions(self, exprs***REMOVED***:
        self.cases = exprs[:-1***REMOVED***
        self.default = exprs[-1***REMOVED***

    def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False***REMOVED***:
        c = self.copy(***REMOVED***
        c.is_summary = summarize
        for pos, case in enumerate(c.cases***REMOVED***:
            c.cases[pos***REMOVED*** = case.resolve_expression(query, allow_joins, reuse, summarize, for_save***REMOVED***
        c.default = c.default.resolve_expression(query, allow_joins, reuse, summarize, for_save***REMOVED***
        return c

    def copy(self***REMOVED***:
        c = super(Case, self***REMOVED***.copy(***REMOVED***
        c.cases = c.cases[:***REMOVED***
        return c

    def as_sql(self, compiler, connection, template=None, case_joiner=None, **extra_context***REMOVED***:
        connection.ops.check_expression_support(self***REMOVED***
        if not self.cases:
            return compiler.compile(self.default***REMOVED***
        template_params = self.extra.copy(***REMOVED***
        template_params.update(extra_context***REMOVED***
        case_parts = [***REMOVED***
        sql_params = [***REMOVED***
        for case in self.cases:
            case_sql, case_params = compiler.compile(case***REMOVED***
            case_parts.append(case_sql***REMOVED***
            sql_params.extend(case_params***REMOVED***
        case_joiner = case_joiner or self.case_joiner
        template_params['cases'***REMOVED*** = case_joiner.join(case_parts***REMOVED***
        default_sql, default_params = compiler.compile(self.default***REMOVED***
        template_params['default'***REMOVED*** = default_sql
        sql_params.extend(default_params***REMOVED***
        template = template or template_params.get('template', self.template***REMOVED***
        sql = template % template_params
        if self._output_field_or_none is not None:
            sql = connection.ops.unification_cast_sql(self.output_field***REMOVED*** % sql
        return sql, sql_params


class OrderBy(BaseExpression***REMOVED***:
    template = '%(expression***REMOVED***s %(ordering***REMOVED***s'

    def __init__(self, expression, descending=False***REMOVED***:
        self.descending = descending
        if not hasattr(expression, 'resolve_expression'***REMOVED***:
            raise ValueError('expression must be an expression type'***REMOVED***
        self.expression = expression

    def __repr__(self***REMOVED***:
        return "{***REMOVED***({***REMOVED***, descending={***REMOVED******REMOVED***".format(
            self.__class__.__name__, self.expression, self.descending***REMOVED***

    def set_source_expressions(self, exprs***REMOVED***:
        self.expression = exprs[0***REMOVED***

    def get_source_expressions(self***REMOVED***:
        return [self.expression***REMOVED***

    def as_sql(self, compiler, connection, template=None, **extra_context***REMOVED***:
        connection.ops.check_expression_support(self***REMOVED***
        expression_sql, params = compiler.compile(self.expression***REMOVED***
        placeholders = {
            'expression': expression_sql,
            'ordering': 'DESC' if self.descending else 'ASC',
    ***REMOVED***
        placeholders.update(extra_context***REMOVED***
        template = template or self.template
        return (template % placeholders***REMOVED***.rstrip(***REMOVED***, params

    def get_group_by_cols(self***REMOVED***:
        cols = [***REMOVED***
        for source in self.get_source_expressions(***REMOVED***:
            cols.extend(source.get_group_by_cols(***REMOVED******REMOVED***
        return cols

    def reverse_ordering(self***REMOVED***:
        self.descending = not self.descending
        return self

    def asc(self***REMOVED***:
        self.descending = False

    def desc(self***REMOVED***:
        self.descending = True
