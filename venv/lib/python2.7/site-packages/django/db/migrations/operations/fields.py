from __future__ import unicode_literals

from django.db.models.fields import NOT_PROVIDED
from django.utils.functional import cached_property

from .base import Operation


class FieldOperation(Operation***REMOVED***:
    def __init__(self, model_name, name***REMOVED***:
        self.model_name = model_name
        self.name = name

    @cached_property
    def model_name_lower(self***REMOVED***:
        return self.model_name.lower(***REMOVED***

    @cached_property
    def name_lower(self***REMOVED***:
        return self.name.lower(***REMOVED***

    def is_same_model_operation(self, operation***REMOVED***:
        return self.model_name_lower == operation.model_name_lower

    def is_same_field_operation(self, operation***REMOVED***:
        return self.is_same_model_operation(operation***REMOVED*** and self.name_lower == operation.name_lower

    def references_model(self, name, app_label=None***REMOVED***:
        return name.lower(***REMOVED*** == self.model_name_lower

    def references_field(self, model_name, name, app_label=None***REMOVED***:
        return self.references_model(model_name***REMOVED*** and name.lower(***REMOVED*** == self.name_lower

    def reduce(self, operation, in_between, app_label=None***REMOVED***:
        return (
            super(FieldOperation, self***REMOVED***.reduce(operation, in_between, app_label=app_label***REMOVED*** or
            not operation.references_field(self.model_name, self.name, app_label***REMOVED***
        ***REMOVED***


class AddField(FieldOperation***REMOVED***:
    ***REMOVED***
    Adds a field to a model.
    ***REMOVED***

    def __init__(self, model_name, name, field, preserve_default=True***REMOVED***:
        self.field = field
        self.preserve_default = preserve_default
        super(AddField, self***REMOVED***.__init__(model_name, name***REMOVED***

    def deconstruct(self***REMOVED***:
        kwargs = {
            'model_name': self.model_name,
            'name': self.name,
            'field': self.field,
    ***REMOVED***
        if self.preserve_default is not True:
            kwargs['preserve_default'***REMOVED*** = self.preserve_default
        return (
            self.__class__.__name__,
            [***REMOVED***,
            kwargs
        ***REMOVED***

    def state_forwards(self, app_label, state***REMOVED***:
        # If preserve default is off, don't use the default for future state
        if not self.preserve_default:
            field = self.field.clone(***REMOVED***
            field.default = NOT_PROVIDED
        else:
            field = self.field
        state.models[app_label, self.model_name_lower***REMOVED***.fields.append((self.name, field***REMOVED******REMOVED***
        state.reload_model(app_label, self.model_name_lower***REMOVED***

    def database_forwards(self, app_label, schema_editor, from_state, to_state***REMOVED***:
        to_model = to_state.apps.get_model(app_label, self.model_name***REMOVED***
        if self.allow_migrate_model(schema_editor.connection.alias, to_model***REMOVED***:
            from_model = from_state.apps.get_model(app_label, self.model_name***REMOVED***
            field = to_model._meta.get_field(self.name***REMOVED***
            if not self.preserve_default:
                field.default = self.field.default
            schema_editor.add_field(
                from_model,
                field,
            ***REMOVED***
            if not self.preserve_default:
                field.default = NOT_PROVIDED

    def database_backwards(self, app_label, schema_editor, from_state, to_state***REMOVED***:
        from_model = from_state.apps.get_model(app_label, self.model_name***REMOVED***
        if self.allow_migrate_model(schema_editor.connection.alias, from_model***REMOVED***:
            schema_editor.remove_field(from_model, from_model._meta.get_field(self.name***REMOVED******REMOVED***

    def describe(self***REMOVED***:
        return "Add field %s to %s" % (self.name, self.model_name***REMOVED***

    def reduce(self, operation, in_between, app_label=None***REMOVED***:
        if isinstance(operation, FieldOperation***REMOVED*** and self.is_same_field_operation(operation***REMOVED***:
            if isinstance(operation, AlterField***REMOVED***:
                return [
                    AddField(
                        model_name=self.model_name,
                        name=operation.name,
                        field=operation.field,
                    ***REMOVED***,
                ***REMOVED***
            elif isinstance(operation, RemoveField***REMOVED***:
                return [***REMOVED***
            elif isinstance(operation, RenameField***REMOVED***:
                return [
                    AddField(
                        model_name=self.model_name,
                        name=operation.new_name,
                        field=self.field,
                    ***REMOVED***,
                ***REMOVED***
        return super(AddField, self***REMOVED***.reduce(operation, in_between, app_label=app_label***REMOVED***


class RemoveField(FieldOperation***REMOVED***:
    ***REMOVED***
    Removes a field from a model.
    ***REMOVED***

    def deconstruct(self***REMOVED***:
        kwargs = {
            'model_name': self.model_name,
            'name': self.name,
    ***REMOVED***
        return (
            self.__class__.__name__,
            [***REMOVED***,
            kwargs
        ***REMOVED***

    def state_forwards(self, app_label, state***REMOVED***:
        new_fields = [***REMOVED***
        for name, instance in state.models[app_label, self.model_name_lower***REMOVED***.fields:
            if name != self.name:
                new_fields.append((name, instance***REMOVED******REMOVED***
        state.models[app_label, self.model_name_lower***REMOVED***.fields = new_fields
        state.reload_model(app_label, self.model_name_lower***REMOVED***

    def database_forwards(self, app_label, schema_editor, from_state, to_state***REMOVED***:
        from_model = from_state.apps.get_model(app_label, self.model_name***REMOVED***
        if self.allow_migrate_model(schema_editor.connection.alias, from_model***REMOVED***:
            schema_editor.remove_field(from_model, from_model._meta.get_field(self.name***REMOVED******REMOVED***

    def database_backwards(self, app_label, schema_editor, from_state, to_state***REMOVED***:
        to_model = to_state.apps.get_model(app_label, self.model_name***REMOVED***
        if self.allow_migrate_model(schema_editor.connection.alias, to_model***REMOVED***:
            from_model = from_state.apps.get_model(app_label, self.model_name***REMOVED***
            schema_editor.add_field(from_model, to_model._meta.get_field(self.name***REMOVED******REMOVED***

    def describe(self***REMOVED***:
        return "Remove field %s from %s" % (self.name, self.model_name***REMOVED***


class AlterField(FieldOperation***REMOVED***:
    ***REMOVED***
    Alters a field's database column (e.g. null, max_length***REMOVED*** to the provided new field
    ***REMOVED***

    def __init__(self, model_name, name, field, preserve_default=True***REMOVED***:
        self.field = field
        self.preserve_default = preserve_default
        super(AlterField, self***REMOVED***.__init__(model_name, name***REMOVED***

    def deconstruct(self***REMOVED***:
        kwargs = {
            'model_name': self.model_name,
            'name': self.name,
            'field': self.field,
    ***REMOVED***
        if self.preserve_default is not True:
            kwargs['preserve_default'***REMOVED*** = self.preserve_default
        return (
            self.__class__.__name__,
            [***REMOVED***,
            kwargs
        ***REMOVED***

    def state_forwards(self, app_label, state***REMOVED***:
        if not self.preserve_default:
            field = self.field.clone(***REMOVED***
            field.default = NOT_PROVIDED
        else:
            field = self.field
        state.models[app_label, self.model_name_lower***REMOVED***.fields = [
            (n, field if n == self.name else f***REMOVED***
            for n, f in
            state.models[app_label, self.model_name_lower***REMOVED***.fields
        ***REMOVED***
        state.reload_model(app_label, self.model_name_lower***REMOVED***

    def database_forwards(self, app_label, schema_editor, from_state, to_state***REMOVED***:
        to_model = to_state.apps.get_model(app_label, self.model_name***REMOVED***
        if self.allow_migrate_model(schema_editor.connection.alias, to_model***REMOVED***:
            from_model = from_state.apps.get_model(app_label, self.model_name***REMOVED***
            from_field = from_model._meta.get_field(self.name***REMOVED***
            to_field = to_model._meta.get_field(self.name***REMOVED***
            if not self.preserve_default:
                to_field.default = self.field.default
            schema_editor.alter_field(from_model, from_field, to_field***REMOVED***
            if not self.preserve_default:
                to_field.default = NOT_PROVIDED

    def database_backwards(self, app_label, schema_editor, from_state, to_state***REMOVED***:
        self.database_forwards(app_label, schema_editor, from_state, to_state***REMOVED***

    def describe(self***REMOVED***:
        return "Alter field %s on %s" % (self.name, self.model_name***REMOVED***

    def reduce(self, operation, in_between, app_label=None***REMOVED***:
        if isinstance(operation, RemoveField***REMOVED*** and self.is_same_field_operation(operation***REMOVED***:
            return [operation***REMOVED***
        elif isinstance(operation, RenameField***REMOVED*** and self.is_same_field_operation(operation***REMOVED***:
            return [
                operation,
                AlterField(
                    model_name=self.model_name,
                    name=operation.new_name,
                    field=self.field,
                ***REMOVED***,
            ***REMOVED***
        return super(AlterField, self***REMOVED***.reduce(operation, in_between, app_label=app_label***REMOVED***


class RenameField(FieldOperation***REMOVED***:
    ***REMOVED***
    Renames a field on the model. Might affect db_column too.
    ***REMOVED***

    def __init__(self, model_name, old_name, new_name***REMOVED***:
        self.old_name = old_name
        self.new_name = new_name
        super(RenameField, self***REMOVED***.__init__(model_name, old_name***REMOVED***

    @cached_property
    def old_name_lower(self***REMOVED***:
        return self.old_name.lower(***REMOVED***

    @cached_property
    def new_name_lower(self***REMOVED***:
        return self.new_name.lower(***REMOVED***

    def deconstruct(self***REMOVED***:
        kwargs = {
            'model_name': self.model_name,
            'old_name': self.old_name,
            'new_name': self.new_name,
    ***REMOVED***
        return (
            self.__class__.__name__,
            [***REMOVED***,
            kwargs
        ***REMOVED***

    def state_forwards(self, app_label, state***REMOVED***:
        # Rename the field
        state.models[app_label, self.model_name_lower***REMOVED***.fields = [
            (self.new_name if n == self.old_name else n, f***REMOVED***
            for n, f in state.models[app_label, self.model_name_lower***REMOVED***.fields
        ***REMOVED***
        # Fix index/unique_together to refer to the new field
        options = state.models[app_label, self.model_name_lower***REMOVED***.options
        for option in ('index_together', 'unique_together'***REMOVED***:
            if option in options:
                options[option***REMOVED*** = [
                    [self.new_name if n == self.old_name else n for n in together***REMOVED***
                    for together in options[option***REMOVED***
                ***REMOVED***
        state.reload_model(app_label, self.model_name_lower***REMOVED***

    def database_forwards(self, app_label, schema_editor, from_state, to_state***REMOVED***:
        to_model = to_state.apps.get_model(app_label, self.model_name***REMOVED***
        if self.allow_migrate_model(schema_editor.connection.alias, to_model***REMOVED***:
            from_model = from_state.apps.get_model(app_label, self.model_name***REMOVED***
            schema_editor.alter_field(
                from_model,
                from_model._meta.get_field(self.old_name***REMOVED***,
                to_model._meta.get_field(self.new_name***REMOVED***,
            ***REMOVED***

    def database_backwards(self, app_label, schema_editor, from_state, to_state***REMOVED***:
        to_model = to_state.apps.get_model(app_label, self.model_name***REMOVED***
        if self.allow_migrate_model(schema_editor.connection.alias, to_model***REMOVED***:
            from_model = from_state.apps.get_model(app_label, self.model_name***REMOVED***
            schema_editor.alter_field(
                from_model,
                from_model._meta.get_field(self.new_name***REMOVED***,
                to_model._meta.get_field(self.old_name***REMOVED***,
            ***REMOVED***

    def describe(self***REMOVED***:
        return "Rename field %s on %s to %s" % (self.old_name, self.model_name, self.new_name***REMOVED***

    def references_field(self, model_name, name, app_label=None***REMOVED***:
        return self.references_model(model_name***REMOVED*** and (
            name.lower(***REMOVED*** == self.old_name_lower or
            name.lower(***REMOVED*** == self.new_name_lower
        ***REMOVED***

    def reduce(self, operation, in_between, app_label=None***REMOVED***:
        if (isinstance(operation, RenameField***REMOVED*** and
                self.is_same_model_operation(operation***REMOVED*** and
                self.new_name_lower == operation.old_name_lower***REMOVED***:
            return [
                RenameField(
                    self.model_name,
                    self.old_name,
                    operation.new_name,
                ***REMOVED***,
            ***REMOVED***
        # Skip `FieldOperation.reduce` as we want to run `references_field`
        # against self.new_name.
        return (
            super(FieldOperation, self***REMOVED***.reduce(operation, in_between, app_label=app_label***REMOVED*** or
            not operation.references_field(self.model_name, self.new_name, app_label***REMOVED***
        ***REMOVED***
