from __future__ import unicode_literals

from django.db import router


class Operation(object***REMOVED***:
    ***REMOVED***
    Base class for migration operations.

    It's responsible for both mutating the in-memory model state
    (see db/migrations/state.py***REMOVED*** to represent what it performs, as well
    as actually performing it against a live database.

    Note that some operations won't modify memory state at all (e.g. data
    copying operations***REMOVED***, and some will need their modifications to be
    optionally specified by the user (e.g. custom Python code snippets***REMOVED***

    Due to the way this class deals with deconstruction, it should be
    considered immutable.
    ***REMOVED***

    # If this migration can be run in reverse.
    # Some operations are impossible to reverse, like deleting data.
    reversible = True

    # Can this migration be represented as SQL? (things like RunPython cannot***REMOVED***
    reduces_to_sql = True

    # Should this operation be forced as atomic even on backends with no
    # DDL transaction support (i.e., does it have no DDL, like RunPython***REMOVED***
    atomic = False

    # Should this operation be considered safe to elide and optimize across?
    elidable = False

    serialization_expand_args = [***REMOVED***

    def __new__(cls, *args, **kwargs***REMOVED***:
        # We capture the arguments to make returning them trivial
        self = object.__new__(cls***REMOVED***
        self._constructor_args = (args, kwargs***REMOVED***
        return self

    def deconstruct(self***REMOVED***:
        ***REMOVED***
        Returns a 3-tuple of class import path (or just name if it lives
        under django.db.migrations***REMOVED***, positional arguments, and keyword
        arguments.
        ***REMOVED***
        return (
            self.__class__.__name__,
            self._constructor_args[0***REMOVED***,
            self._constructor_args[1***REMOVED***,
        ***REMOVED***

    def state_forwards(self, app_label, state***REMOVED***:
        ***REMOVED***
        Takes the state from the previous migration, and mutates it
        so that it matches what this migration would perform.
        ***REMOVED***
        raise NotImplementedError('subclasses of Operation must provide a state_forwards(***REMOVED*** method'***REMOVED***

    def database_forwards(self, app_label, schema_editor, from_state, to_state***REMOVED***:
        ***REMOVED***
        Performs the mutation on the database schema in the normal
        (forwards***REMOVED*** direction.
        ***REMOVED***
        raise NotImplementedError('subclasses of Operation must provide a database_forwards(***REMOVED*** method'***REMOVED***

    def database_backwards(self, app_label, schema_editor, from_state, to_state***REMOVED***:
        ***REMOVED***
        Performs the mutation on the database schema in the reverse
        direction - e.g. if this were CreateModel, it would in fact
        drop the model's table.
        ***REMOVED***
        raise NotImplementedError('subclasses of Operation must provide a database_backwards(***REMOVED*** method'***REMOVED***

    def describe(self***REMOVED***:
        ***REMOVED***
        Outputs a brief summary of what the action does.
        ***REMOVED***
        return "%s: %s" % (self.__class__.__name__, self._constructor_args***REMOVED***

    def references_model(self, name, app_label=None***REMOVED***:
        ***REMOVED***
        Returns True if there is a chance this operation references the given
        model name (as a string***REMOVED***, with an optional app label for accuracy.

        Used for optimization. If in doubt, return True;
        returning a false positive will merely make the optimizer a little
        less efficient, while returning a false negative may result in an
        unusable optimized migration.
        ***REMOVED***
        return True

    def references_field(self, model_name, name, app_label=None***REMOVED***:
        ***REMOVED***
        Returns True if there is a chance this operation references the given
        field name, with an optional app label for accuracy.

        Used for optimization. If in doubt, return True.
        ***REMOVED***
        return self.references_model(model_name, app_label***REMOVED***

    def allow_migrate_model(self, connection_alias, model***REMOVED***:
        ***REMOVED***
        Returns if we're allowed to migrate the model.

        This is a thin wrapper around router.allow_migrate_model(***REMOVED*** that
        preemptively rejects any proxy, swapped out, or unmanaged model.
        ***REMOVED***
        if not model._meta.can_migrate(connection_alias***REMOVED***:
            return False

        return router.allow_migrate_model(connection_alias, model***REMOVED***

    def reduce(self, operation, in_between, app_label=None***REMOVED***:
        ***REMOVED***
        Return either a list of operations the actual operation should be
        replaced with or a boolean that indicates whether or not the specified
        operation can be optimized across.
        ***REMOVED***
        if self.elidable:
            return [operation***REMOVED***
        elif operation.elidable:
            return [self***REMOVED***
        return False

    def __repr__(self***REMOVED***:
        return "<%s %s%s>" % (
            self.__class__.__name__,
            ", ".join(map(repr, self._constructor_args[0***REMOVED******REMOVED******REMOVED***,
            ",".join(" %s=%r" % x for x in self._constructor_args[1***REMOVED***.items(***REMOVED******REMOVED***,
        ***REMOVED***
