from django.core import signals
from django.db.utils import (
    DEFAULT_DB_ALIAS, DJANGO_VERSION_PICKLE_KEY, ConnectionHandler,
    ConnectionRouter, DatabaseError, DataError, Error, IntegrityError,
    InterfaceError, InternalError, NotSupportedError, OperationalError,
    ProgrammingError,
***REMOVED***

__all__ = [
    'connection', 'connections', 'router', 'DatabaseError', 'IntegrityError',
    'InternalError', 'ProgrammingError', 'DataError', 'NotSupportedError',
    'Error', 'InterfaceError', 'OperationalError', 'DEFAULT_DB_ALIAS',
    'DJANGO_VERSION_PICKLE_KEY',
***REMOVED***

connections = ConnectionHandler(***REMOVED***

router = ConnectionRouter(***REMOVED***


***REMOVED***Wrapper.__init__(***REMOVED*** takes a dictionary, not a settings module, so we
# manually create the dictionary from the settings, passing only the settings
# that the database backends care about.
# We load all these up for backwards compatibility, you should use
# connections['default'***REMOVED*** instead.
class DefaultConnectionProxy(object***REMOVED***:
    ***REMOVED***
    Proxy for accessing the default DatabaseWrapper object's attributes. If you
    need to access the DatabaseWrapper object itself, use
    connections[DEFAULT_DB_ALIAS***REMOVED*** instead.
    ***REMOVED***
    def __getattr__(self, item***REMOVED***:
        return getattr(connections[DEFAULT_DB_ALIAS***REMOVED***, item***REMOVED***

    def __setattr__(self, name, value***REMOVED***:
        return setattr(connections[DEFAULT_DB_ALIAS***REMOVED***, name, value***REMOVED***

    def __delattr__(self, name***REMOVED***:
        return delattr(connections[DEFAULT_DB_ALIAS***REMOVED***, name***REMOVED***

    def __eq__(self, other***REMOVED***:
        return connections[DEFAULT_DB_ALIAS***REMOVED*** == other

    def __ne__(self, other***REMOVED***:
        return connections[DEFAULT_DB_ALIAS***REMOVED*** != other

connection = DefaultConnectionProxy(***REMOVED***


# Register an event to reset saved queries when a Django request is started.
def reset_queries(**kwargs***REMOVED***:
    for conn in connections.all(***REMOVED***:
        conn.queries_log.clear(***REMOVED***
signals.request_started.connect(reset_queries***REMOVED***


# Register an event to reset transaction state and close connections past
# their lifetime.
def close_old_connections(**kwargs***REMOVED***:
    for conn in connections.all(***REMOVED***:
        conn.close_if_unusable_or_obsolete(***REMOVED***
signals.request_started.connect(close_old_connections***REMOVED***
signals.request_finished.connect(close_old_connections***REMOVED***
