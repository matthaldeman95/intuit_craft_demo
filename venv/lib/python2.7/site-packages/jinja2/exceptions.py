# -*- coding: utf-8 -*-
***REMOVED***
    jinja2.exceptions
    ~~~~~~~~~~~~~~~~~

    Jinja exceptions.

    :copyright: (c***REMOVED*** 2010 by the Jinja Team.
    :license: BSD, see LICENSE for more details.
***REMOVED***
from jinja2._compat import imap, text_type, PY2, implements_to_string


class TemplateError(Exception***REMOVED***:
    ***REMOVED***Baseclass for all template errors.***REMOVED***

    if PY2:
        def __init__(self, message=None***REMOVED***:
            if message is not None:
                message = text_type(message***REMOVED***.encode('utf-8'***REMOVED***
            Exception.__init__(self, message***REMOVED***

        @property
        def message(self***REMOVED***:
            if self.args:
                message = self.args[0***REMOVED***
                if message is not None:
                    return message.decode('utf-8', 'replace'***REMOVED***

        def __unicode__(self***REMOVED***:
            return self.message or u''
    else:
        def __init__(self, message=None***REMOVED***:
            Exception.__init__(self, message***REMOVED***

        @property
        def message(self***REMOVED***:
            if self.args:
                message = self.args[0***REMOVED***
                if message is not None:
                    return message


@implements_to_string
class TemplateNotFound(IOError, LookupError, TemplateError***REMOVED***:
    ***REMOVED***Raised if a template does not exist.***REMOVED***

    # looks weird, but removes the warning descriptor that just
    # bogusly warns us about message being deprecated
    message = None

    def __init__(self, name, message=None***REMOVED***:
        IOError.__init__(self***REMOVED***
        if message is None:
            message = name
        self.message = message
        self.name = name
        self.templates = [name***REMOVED***

    def __str__(self***REMOVED***:
        return self.message


class TemplatesNotFound(TemplateNotFound***REMOVED***:
    ***REMOVED***Like :class:`TemplateNotFound` but raised if multiple templates
    are selected.  This is a subclass of :class:`TemplateNotFound`
    exception, so just catching the base exception will catch both.

    .. versionadded:: 2.2
    ***REMOVED***

    def __init__(self, names=(***REMOVED***, message=None***REMOVED***:
        if message is None:
            message = u'none of the templates given were found: ' + \
                      u', '.join(imap(text_type, names***REMOVED******REMOVED***
        TemplateNotFound.__init__(self, names and names[-1***REMOVED*** or None, message***REMOVED***
        self.templates = list(names***REMOVED***


@implements_to_string
class TemplateSyntaxError(TemplateError***REMOVED***:
    ***REMOVED***Raised to tell the user that there is a problem with the template.***REMOVED***

    def __init__(self, message, lineno, name=None, filename=None***REMOVED***:
        TemplateError.__init__(self, message***REMOVED***
        self.lineno = lineno
        self.name = name
        self.filename = filename
        self.source = None

        # this is set to True if the debug.translate_syntax_error
        # function translated the syntax error into a new traceback
        self.translated = False

    def __str__(self***REMOVED***:
        # for translated errors we only return the message
        if self.translated:
            return self.message

        # otherwise attach some stuff
        location = 'line %d' % self.lineno
        name = self.filename or self.name
        if name:
            location = 'File "%s", %s' % (name, location***REMOVED***
        lines = [self.message, '  ' + location***REMOVED***

        # if the source is set, add the line to the output
        if self.source is not None:
            ***REMOVED***
                line = self.source.splitlines(***REMOVED***[self.lineno - 1***REMOVED***
            except IndexError:
                line = None
            if line:
                lines.append('    ' + line.strip(***REMOVED******REMOVED***

        return u'\n'.join(lines***REMOVED***


class TemplateAssertionError(TemplateSyntaxError***REMOVED***:
    ***REMOVED***Like a template syntax error, but covers cases where something in the
    template caused an error at compile time that wasn't necessarily caused
    by a syntax error.  However it's a direct subclass of
    :exc:`TemplateSyntaxError` and has the same attributes.
    ***REMOVED***


class TemplateRuntimeError(TemplateError***REMOVED***:
    ***REMOVED***A generic runtime error in the template engine.  Under some situations
    Jinja may raise this exception.
    ***REMOVED***


class UndefinedError(TemplateRuntimeError***REMOVED***:
    ***REMOVED***Raised if a template tries to operate on :class:`Undefined`.***REMOVED***


class SecurityError(TemplateRuntimeError***REMOVED***:
    ***REMOVED***Raised if a template tries to do something insecure if the
    sandbox is enabled.
    ***REMOVED***


class FilterArgumentError(TemplateRuntimeError***REMOVED***:
    ***REMOVED***This error is raised if a filter was called with inappropriate
    arguments
    ***REMOVED***
